{"version":3,"sources":["../../src/Controllers/UserController.js"],"names":["RestQuery","require","Auth","UserController","AdaptableController","constructor","adapter","appId","options","config","Config","get","validateAdapter","shouldVerifyEmails","expectedAdapterType","MailAdapter","verifyUserEmails","setEmailVerifyToken","user","_email_verify_token","emailVerified","emailVerifyTokenValidityDuration","_email_verify_token_expires_at","Parse","_encode","generateEmailVerifyTokenExpiresAt","verifyEmail","username","token","undefined","query","updateFields","__op","$gt","Date","masterAuth","master","findUserForEmailVerification","execute","then","result","results","length","Promise","resolve","objectId","rest","update","checkResetTokenValidity","database","find","_perishable_token","limit","passwordPolicy","resetTokenValidityDuration","expiresDate","_perishable_token_expires_at","__type","iso","getUserIfNeeded","email","where","sendVerificationEmail","encodeURIComponent","link","buildEmailLink","verifyEmailURL","appName","sendMail","defaultVerificationEmail","regenerateEmailVerifyToken","emailVerifyTokenReuseIfValid","resendVerificationEmail","aUser","setPasswordResetToken","generatePasswordResetTokenExpiresAt","$or","$exists","sendPasswordResetEmail","resetTokenReuseIfValid","requestResetPasswordURL","defaultResetPasswordEmail","updatePassword","password","updateUserPassword","accountLockoutPolicy","AccountLockout","unlockAccount","catch","error","message","reject","text","to","subject","destination","usernameAndToken","parseFrameURL","destinationWithoutHost","replace","publicServerURL"],"mappings":"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","sourcesContent":["import { randomString } from '../cryptoUtils';\nimport { inflate } from '../triggers';\nimport AdaptableController from './AdaptableController';\nimport MailAdapter from '../Adapters/Email/MailAdapter';\nimport rest from '../rest';\nimport Parse from 'parse/node';\nimport AccountLockout from '../AccountLockout';\nimport Config from '../Config';\n\nvar RestQuery = require('../RestQuery');\nvar Auth = require('../Auth');\n\nexport class UserController extends AdaptableController {\n  constructor(adapter, appId, options = {}) {\n    super(adapter, appId, options);\n  }\n\n  get config() {\n    return Config.get(this.appId);\n  }\n\n  validateAdapter(adapter) {\n    // Allow no adapter\n    if (!adapter && !this.shouldVerifyEmails) {\n      return;\n    }\n    super.validateAdapter(adapter);\n  }\n\n  expectedAdapterType() {\n    return MailAdapter;\n  }\n\n  get shouldVerifyEmails() {\n    return this.options.verifyUserEmails;\n  }\n\n  setEmailVerifyToken(user) {\n    if (this.shouldVerifyEmails) {\n      user._email_verify_token = randomString(25);\n      user.emailVerified = false;\n\n      if (this.config.emailVerifyTokenValidityDuration) {\n        user._email_verify_token_expires_at = Parse._encode(\n          this.config.generateEmailVerifyTokenExpiresAt()\n        );\n      }\n    }\n  }\n\n  verifyEmail(username, token) {\n    if (!this.shouldVerifyEmails) {\n      // Trying to verify email when not enabled\n      // TODO: Better error here.\n      throw undefined;\n    }\n\n    const query = { username: username, _email_verify_token: token };\n    const updateFields = {\n      emailVerified: true,\n      _email_verify_token: { __op: 'Delete' },\n    };\n\n    // if the email verify token needs to be validated then\n    // add additional query params and additional fields that need to be updated\n    if (this.config.emailVerifyTokenValidityDuration) {\n      query.emailVerified = false;\n      query._email_verify_token_expires_at = { $gt: Parse._encode(new Date()) };\n\n      updateFields._email_verify_token_expires_at = { __op: 'Delete' };\n    }\n    const masterAuth = Auth.master(this.config);\n    var findUserForEmailVerification = new RestQuery(\n      this.config,\n      Auth.master(this.config),\n      '_User',\n      { username: username }\n    );\n    return findUserForEmailVerification.execute().then(result => {\n      if (result.results.length && result.results[0].emailVerified) {\n        return Promise.resolve(result.results.length[0]);\n      } else if (result.results.length) {\n        query.objectId = result.results[0].objectId;\n      }\n      return rest.update(this.config, masterAuth, '_User', query, updateFields);\n    });\n  }\n\n  checkResetTokenValidity(username, token) {\n    return this.config.database\n      .find(\n        '_User',\n        {\n          username: username,\n          _perishable_token: token,\n        },\n        { limit: 1 }\n      )\n      .then(results => {\n        if (results.length != 1) {\n          throw 'Failed to reset password: username / email / token is invalid';\n        }\n\n        if (this.config.passwordPolicy && this.config.passwordPolicy.resetTokenValidityDuration) {\n          let expiresDate = results[0]._perishable_token_expires_at;\n          if (expiresDate && expiresDate.__type == 'Date') {\n            expiresDate = new Date(expiresDate.iso);\n          }\n          if (expiresDate < new Date()) throw 'The password reset link has expired';\n        }\n        return results[0];\n      });\n  }\n\n  getUserIfNeeded(user) {\n    if (user.username && user.email) {\n      return Promise.resolve(user);\n    }\n    var where = {};\n    if (user.username) {\n      where.username = user.username;\n    }\n    if (user.email) {\n      where.email = user.email;\n    }\n\n    var query = new RestQuery(this.config, Auth.master(this.config), '_User', where);\n    return query.execute().then(function (result) {\n      if (result.results.length != 1) {\n        throw undefined;\n      }\n      return result.results[0];\n    });\n  }\n\n  sendVerificationEmail(user) {\n    if (!this.shouldVerifyEmails) {\n      return;\n    }\n    const token = encodeURIComponent(user._email_verify_token);\n    // We may need to fetch the user in case of update email\n    this.getUserIfNeeded(user).then(user => {\n      const username = encodeURIComponent(user.username);\n\n      const link = buildEmailLink(this.config.verifyEmailURL, username, token, this.config);\n      const options = {\n        appName: this.config.appName,\n        link: link,\n        user: inflate('_User', user),\n      };\n      if (this.adapter.sendVerificationEmail) {\n        this.adapter.sendVerificationEmail(options);\n      } else {\n        this.adapter.sendMail(this.defaultVerificationEmail(options));\n      }\n    });\n  }\n\n  /**\n   * Regenerates the given user's email verification token\n   *\n   * @param user\n   * @returns {*}\n   */\n  regenerateEmailVerifyToken(user) {\n    const { _email_verify_token } = user;\n    let { _email_verify_token_expires_at } = user;\n    if (_email_verify_token_expires_at && _email_verify_token_expires_at.__type === 'Date') {\n      _email_verify_token_expires_at = _email_verify_token_expires_at.iso;\n    }\n    if (\n      this.config.emailVerifyTokenReuseIfValid &&\n      this.config.emailVerifyTokenValidityDuration &&\n      _email_verify_token &&\n      new Date() < new Date(_email_verify_token_expires_at)\n    ) {\n      return Promise.resolve();\n    }\n    this.setEmailVerifyToken(user);\n    return this.config.database.update('_User', { username: user.username }, user);\n  }\n\n  resendVerificationEmail(username) {\n    return this.getUserIfNeeded({ username: username }).then(aUser => {\n      if (!aUser || aUser.emailVerified) {\n        throw undefined;\n      }\n      return this.regenerateEmailVerifyToken(aUser).then(() => {\n        this.sendVerificationEmail(aUser);\n      });\n    });\n  }\n\n  setPasswordResetToken(email) {\n    const token = { _perishable_token: randomString(25) };\n\n    if (this.config.passwordPolicy && this.config.passwordPolicy.resetTokenValidityDuration) {\n      token._perishable_token_expires_at = Parse._encode(\n        this.config.generatePasswordResetTokenExpiresAt()\n      );\n    }\n\n    return this.config.database.update(\n      '_User',\n      { $or: [{ email }, { username: email, email: { $exists: false } }] },\n      token,\n      {},\n      true\n    );\n  }\n\n  async sendPasswordResetEmail(email) {\n    if (!this.adapter) {\n      throw 'Trying to send a reset password but no adapter is set';\n      //  TODO: No adapter?\n    }\n    let user;\n    if (\n      this.config.passwordPolicy &&\n      this.config.passwordPolicy.resetTokenReuseIfValid &&\n      this.config.passwordPolicy.resetTokenValidityDuration\n    ) {\n      const results = await this.config.database.find(\n        '_User',\n        {\n          $or: [\n            { email, _perishable_token: { $exists: true } },\n            { username: email, email: { $exists: false }, _perishable_token: { $exists: true } },\n          ],\n        },\n        { limit: 1 }\n      );\n      if (results.length == 1) {\n        let expiresDate = results[0]._perishable_token_expires_at;\n        if (expiresDate && expiresDate.__type == 'Date') {\n          expiresDate = new Date(expiresDate.iso);\n        }\n        if (expiresDate > new Date()) {\n          user = results[0];\n        }\n      }\n    }\n    if (!user || !user._perishable_token) {\n      user = await this.setPasswordResetToken(email);\n    }\n    const token = encodeURIComponent(user._perishable_token);\n    const username = encodeURIComponent(user.username);\n\n    const link = buildEmailLink(this.config.requestResetPasswordURL, username, token, this.config);\n    const options = {\n      appName: this.config.appName,\n      link: link,\n      user: inflate('_User', user),\n    };\n\n    if (this.adapter.sendPasswordResetEmail) {\n      this.adapter.sendPasswordResetEmail(options);\n    } else {\n      this.adapter.sendMail(this.defaultResetPasswordEmail(options));\n    }\n\n    return Promise.resolve(user);\n  }\n\n  updatePassword(username, token, password) {\n    return this.checkResetTokenValidity(username, token)\n      .then(user => updateUserPassword(user, password, this.config))\n      .then(user => {\n        const accountLockoutPolicy = new AccountLockout(user, this.config);\n        return accountLockoutPolicy.unlockAccount();\n      })\n      .catch(error => {\n        if (error && error.message) {\n          // in case of Parse.Error, fail with the error message only\n          return Promise.reject(error.message);\n        } else {\n          return Promise.reject(error);\n        }\n      });\n  }\n\n  defaultVerificationEmail({ link, user, appName }) {\n    const text =\n      'Hi,\\n\\n' +\n      'You are being asked to confirm the e-mail address ' +\n      user.get('email') +\n      ' with ' +\n      appName +\n      '\\n\\n' +\n      '' +\n      'Click here to confirm it:\\n' +\n      link;\n    const to = user.get('email');\n    const subject = 'Please verify your e-mail for ' + appName;\n    return { text, to, subject };\n  }\n\n  defaultResetPasswordEmail({ link, user, appName }) {\n    const text =\n      'Hi,\\n\\n' +\n      'You requested to reset your password for ' +\n      appName +\n      (user.get('username') ? \" (your username is '\" + user.get('username') + \"')\" : '') +\n      '.\\n\\n' +\n      '' +\n      'Click here to reset it:\\n' +\n      link;\n    const to = user.get('email') || user.get('username');\n    const subject = 'Password Reset for ' + appName;\n    return { text, to, subject };\n  }\n}\n\n// Mark this private\nfunction updateUserPassword(user, password, config) {\n  return rest\n    .update(\n      config,\n      Auth.master(config),\n      '_User',\n      { objectId: user.objectId },\n      {\n        password: password,\n      }\n    )\n    .then(() => user);\n}\n\nfunction buildEmailLink(destination, username, token, config) {\n  const usernameAndToken = `token=${token}&username=${username}`;\n\n  if (config.parseFrameURL) {\n    const destinationWithoutHost = destination.replace(config.publicServerURL, '');\n\n    return `${config.parseFrameURL}?link=${encodeURIComponent(\n      destinationWithoutHost\n    )}&${usernameAndToken}`;\n  } else {\n    return `${destination}?${usernameAndToken}`;\n  }\n}\n\nexport default UserController;\n"]}