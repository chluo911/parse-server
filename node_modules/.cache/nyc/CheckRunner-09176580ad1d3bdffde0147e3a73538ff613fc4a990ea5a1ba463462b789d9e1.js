"use strict";function cov_2ffslx14ah(){var path="/parse-server/lib/Security/CheckRunner.js";var hash="5acb405c7c47b73e28fd1a8ce6e203f998864263";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Security/CheckRunner.js",statementMap:{"0":{start:{line:3,column:13},end:{line:3,column:56}},"1":{start:{line:5,column:13},end:{line:5,column:31}},"2":{start:{line:7,column:18},end:{line:7,column:79}},"3":{start:{line:9,column:14},end:{line:9,column:58}},"4":{start:{line:11,column:14},end:{line:11,column:31}},"5":{start:{line:13,column:49},end:{line:13,column:96}},"6":{start:{line:13,column:84},end:{line:13,column:96}},"7":{start:{line:13,column:121},end:{line:13,column:134}},"8":{start:{line:13,column:159},end:{line:13,column:172}},"9":{start:{line:13,column:174},end:{line:13,column:309}},"10":{start:{line:13,column:234},end:{line:13,column:292}},"11":{start:{line:15,column:53},end:{line:15,column:111}},"12":{start:{line:15,column:98},end:{line:15,column:109}},"13":{start:{line:15,column:112},end:{line:15,column:214}},"14":{start:{line:15,column:188},end:{line:15,column:212}},"15":{start:{line:15,column:227},end:{line:15,column:264}},"16":{start:{line:15,column:266},end:{line:15,column:321}},"17":{start:{line:15,column:297},end:{line:15,column:319}},"18":{start:{line:15,column:335},end:{line:15,column:337}},"19":{start:{line:15,column:367},end:{line:15,column:423}},"20":{start:{line:15,column:425},end:{line:15,column:726}},"21":{start:{line:15,column:448},end:{line:15,column:724}},"22":{start:{line:15,column:534},end:{line:15,column:606}},"23":{start:{line:15,column:608},end:{line:15,column:722}},"24":{start:{line:15,column:646},end:{line:15,column:687}},"25":{start:{line:15,column:697},end:{line:15,column:720}},"26":{start:{line:15,column:727},end:{line:15,column:748}},"27":{start:{line:15,column:749},end:{line:15,column:787}},"28":{start:{line:15,column:762},end:{line:15,column:785}},"29":{start:{line:15,column:788},end:{line:15,column:802}},"30":{start:{line:17,column:39},end:{line:17,column:93}},"31":{start:{line:35,column:4},end:{line:35,column:33}},"32":{start:{line:41,column:8},end:{line:41,column:14}},"33":{start:{line:42,column:4},end:{line:42,column:35}},"34":{start:{line:43,column:4},end:{line:43,column:41}},"35":{start:{line:44,column:4},end:{line:44,column:35}},"36":{start:{line:57,column:19},end:{line:57,column:123}},"37":{start:{line:57,column:63},end:{line:57,column:86}},"38":{start:{line:57,column:106},end:{line:57,column:122}},"39":{start:{line:59,column:4},end:{line:59,column:41}},"40":{start:{line:59,column:28},end:{line:59,column:39}},"41":{start:{line:61,column:19},end:{line:64,column:6}},"42":{start:{line:67,column:4},end:{line:69,column:5}},"43":{start:{line:68,column:6},end:{line:68,column:30}},"44":{start:{line:71,column:4},end:{line:71,column:18}},"45":{start:{line:108,column:19},end:{line:114,column:5}},"46":{start:{line:116,column:4},end:{line:146,column:5}},"47":{start:{line:120,column:8},end:{line:144,column:9}},"48":{start:{line:122,column:30},end:{line:126,column:11}},"49":{start:{line:128,column:10},end:{line:142,column:13}},"50":{start:{line:129,column:32},end:{line:132,column:13}},"51":{start:{line:134,column:12},end:{line:139,column:13}},"52":{start:{line:135,column:14},end:{line:135,column:50}},"53":{start:{line:136,column:14},end:{line:136,column:52}},"54":{start:{line:137,column:14},end:{line:137,column:59}},"55":{start:{line:138,column:14},end:{line:138,column:57}},"56":{start:{line:141,column:12},end:{line:141,column:31}},"57":{start:{line:143,column:10},end:{line:143,column:49}},"58":{start:{line:148,column:4},end:{line:148,column:18}},"59":{start:{line:158,column:16},end:{line:158,column:126}},"60":{start:{line:158,column:72},end:{line:158,column:95}},"61":{start:{line:158,column:103},end:{line:158,column:126}},"62":{start:{line:160,column:19},end:{line:160,column:24}},"63":{start:{line:161,column:17},end:{line:161,column:19}},"64":{start:{line:162,column:22},end:{line:162,column:23}},"65":{start:{line:163,column:28},end:{line:163,column:29}},"66":{start:{line:164,column:28},end:{line:164,column:29}},"67":{start:{line:166,column:4},end:{line:182,column:5}},"68":{start:{line:167,column:6},end:{line:167,column:36}},"69":{start:{line:169,column:6},end:{line:181,column:7}},"70":{start:{line:170,column:8},end:{line:170,column:22}},"71":{start:{line:171,column:8},end:{line:171,column:87}},"72":{start:{line:173,column:8},end:{line:180,column:9}},"73":{start:{line:174,column:10},end:{line:174,column:30}},"74":{start:{line:175,column:10},end:{line:175,column:68}},"75":{start:{line:176,column:10},end:{line:176,column:41}},"76":{start:{line:177,column:15},end:{line:180,column:9}},"77":{start:{line:178,column:10},end:{line:178,column:30}},"78":{start:{line:179,column:10},end:{line:179,column:120}},"79":{start:{line:184,column:4},end:{line:184,column:468}},"80":{start:{line:186,column:4},end:{line:186,column:16}},"81":{start:{line:196,column:4},end:{line:205,column:5}},"82":{start:{line:198,column:8},end:{line:198,column:19}},"83":{start:{line:201,column:8},end:{line:201,column:19}},"84":{start:{line:204,column:8},end:{line:204,column:20}},"85":{start:{line:214,column:4},end:{line:230,column:7}},"86":{start:{line:235,column:0},end:{line:235,column:29}}},fnMap:{"0":{name:"_getRequireWildcardCache",decl:{start:{line:13,column:9},end:{line:13,column:33}},loc:{start:{line:13,column:47},end:{line:13,column:311}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:209},end:{line:13,column:210}},loc:{start:{line:13,column:232},end:{line:13,column:294}},line:13},"2":{name:"_interopRequireWildcard",decl:{start:{line:15,column:9},end:{line:15,column:32}},loc:{start:{line:15,column:51},end:{line:15,column:804}},line:15},"3":{name:"_interopRequireDefault",decl:{start:{line:17,column:9},end:{line:17,column:31}},loc:{start:{line:17,column:37},end:{line:17,column:95}},line:17},"4":{name:"(anonymous_4)",decl:{start:{line:34,column:2},end:{line:34,column:3}},loc:{start:{line:34,column:27},end:{line:45,column:3}},line:34},"5":{name:"(anonymous_5)",decl:{start:{line:53,column:2},end:{line:53,column:3}},loc:{start:{line:55,column:10},end:{line:72,column:3}},line:55},"6":{name:"(anonymous_6)",decl:{start:{line:57,column:58},end:{line:57,column:59}},loc:{start:{line:57,column:63},end:{line:57,column:86}},line:57},"7":{name:"(anonymous_7)",decl:{start:{line:57,column:92},end:{line:57,column:93}},loc:{start:{line:57,column:106},end:{line:57,column:122}},line:57},"8":{name:"(anonymous_8)",decl:{start:{line:59,column:19},end:{line:59,column:20}},loc:{start:{line:59,column:28},end:{line:59,column:39}},line:59},"9":{name:"(anonymous_9)",decl:{start:{line:103,column:2},end:{line:103,column:3}},loc:{start:{line:106,column:5},end:{line:149,column:3}},line:106},"10":{name:"(anonymous_10)",decl:{start:{line:128,column:50},end:{line:128,column:51}},loc:{start:{line:128,column:59},end:{line:142,column:11}},line:128},"11":{name:"(anonymous_11)",decl:{start:{line:156,column:2},end:{line:156,column:3}},loc:{start:{line:156,column:21},end:{line:187,column:3}},line:156},"12":{name:"(anonymous_12)",decl:{start:{line:158,column:67},end:{line:158,column:68}},loc:{start:{line:158,column:72},end:{line:158,column:95}},line:158},"13":{name:"(anonymous_13)",decl:{start:{line:158,column:98},end:{line:158,column:99}},loc:{start:{line:158,column:103},end:{line:158,column:126}},line:158},"14":{name:"(anonymous_14)",decl:{start:{line:195,column:2},end:{line:195,column:3}},loc:{start:{line:195,column:29},end:{line:206,column:3}},line:195},"15":{name:"(anonymous_15)",decl:{start:{line:213,column:2},end:{line:213,column:3}},loc:{start:{line:213,column:26},end:{line:231,column:3}},line:213}},branchMap:{"0":{loc:{start:{line:13,column:49},end:{line:13,column:96}},type:"if",locations:[{start:{line:13,column:49},end:{line:13,column:96}},{start:{line:13,column:49},end:{line:13,column:96}}],line:13},"1":{loc:{start:{line:13,column:241},end:{line:13,column:291}},type:"cond-expr",locations:[{start:{line:13,column:255},end:{line:13,column:271}},{start:{line:13,column:274},end:{line:13,column:291}}],line:13},"2":{loc:{start:{line:15,column:53},end:{line:15,column:111}},type:"if",locations:[{start:{line:15,column:53},end:{line:15,column:111}},{start:{line:15,column:53},end:{line:15,column:111}}],line:15},"3":{loc:{start:{line:15,column:57},end:{line:15,column:94}},type:"binary-expr",locations:[{start:{line:15,column:57},end:{line:15,column:69}},{start:{line:15,column:73},end:{line:15,column:76}},{start:{line:15,column:80},end:{line:15,column:94}}],line:15},"4":{loc:{start:{line:15,column:112},end:{line:15,column:214}},type:"if",locations:[{start:{line:15,column:112},end:{line:15,column:214}},{start:{line:15,column:112},end:{line:15,column:214}}],line:15},"5":{loc:{start:{line:15,column:116},end:{line:15,column:184}},type:"binary-expr",locations:[{start:{line:15,column:116},end:{line:15,column:128}},{start:{line:15,column:132},end:{line:15,column:155}},{start:{line:15,column:159},end:{line:15,column:184}}],line:15},"6":{loc:{start:{line:15,column:266},end:{line:15,column:321}},type:"if",locations:[{start:{line:15,column:266},end:{line:15,column:321}},{start:{line:15,column:266},end:{line:15,column:321}}],line:15},"7":{loc:{start:{line:15,column:270},end:{line:15,column:293}},type:"binary-expr",locations:[{start:{line:15,column:270},end:{line:15,column:275}},{start:{line:15,column:279},end:{line:15,column:293}}],line:15},"8":{loc:{start:{line:15,column:367},end:{line:15,column:423}},type:"binary-expr",locations:[{start:{line:15,column:367},end:{line:15,column:388}},{start:{line:15,column:392},end:{line:15,column:423}}],line:15},"9":{loc:{start:{line:15,column:448},end:{line:15,column:724}},type:"if",locations:[{start:{line:15,column:448},end:{line:15,column:724}},{start:{line:15,column:448},end:{line:15,column:724}}],line:15},"10":{loc:{start:{line:15,column:452},end:{line:15,column:519}},type:"binary-expr",locations:[{start:{line:15,column:452},end:{line:15,column:469}},{start:{line:15,column:473},end:{line:15,column:519}}],line:15},"11":{loc:{start:{line:15,column:534},end:{line:15,column:606}},type:"cond-expr",locations:[{start:{line:15,column:558},end:{line:15,column:599}},{start:{line:15,column:602},end:{line:15,column:606}}],line:15},"12":{loc:{start:{line:15,column:608},end:{line:15,column:722}},type:"if",locations:[{start:{line:15,column:608},end:{line:15,column:722}},{start:{line:15,column:608},end:{line:15,column:722}}],line:15},"13":{loc:{start:{line:15,column:612},end:{line:15,column:642}},type:"binary-expr",locations:[{start:{line:15,column:612},end:{line:15,column:616}},{start:{line:15,column:621},end:{line:15,column:629}},{start:{line:15,column:633},end:{line:15,column:641}}],line:15},"14":{loc:{start:{line:15,column:749},end:{line:15,column:787}},type:"if",locations:[{start:{line:15,column:749},end:{line:15,column:787}},{start:{line:15,column:749},end:{line:15,column:787}}],line:15},"15":{loc:{start:{line:17,column:46},end:{line:17,column:92}},type:"cond-expr",locations:[{start:{line:17,column:70},end:{line:17,column:73}},{start:{line:17,column:76},end:{line:17,column:92}}],line:17},"16":{loc:{start:{line:17,column:46},end:{line:17,column:67}},type:"binary-expr",locations:[{start:{line:17,column:46},end:{line:17,column:49}},{start:{line:17,column:53},end:{line:17,column:67}}],line:17},"17":{loc:{start:{line:34,column:14},end:{line:34,column:25}},type:"default-arg",locations:[{start:{line:34,column:23},end:{line:34,column:25}}],line:34},"18":{loc:{start:{line:38,column:6},end:{line:38,column:25}},type:"default-arg",locations:[{start:{line:38,column:20},end:{line:38,column:25}}],line:38},"19":{loc:{start:{line:39,column:6},end:{line:39,column:28}},type:"default-arg",locations:[{start:{line:39,column:23},end:{line:39,column:28}}],line:39},"20":{loc:{start:{line:40,column:6},end:{line:40,column:31}},type:"default-arg",locations:[{start:{line:40,column:20},end:{line:40,column:31}}],line:40},"21":{loc:{start:{line:53,column:12},end:{line:55,column:8}},type:"default-arg",locations:[{start:{line:55,column:6},end:{line:55,column:8}}],line:53},"22":{loc:{start:{line:54,column:4},end:{line:54,column:21}},type:"default-arg",locations:[{start:{line:54,column:14},end:{line:54,column:21}}],line:54},"23":{loc:{start:{line:67,column:4},end:{line:69,column:5}},type:"if",locations:[{start:{line:67,column:4},end:{line:69,column:5}},{start:{line:67,column:4},end:{line:69,column:5}}],line:67},"24":{loc:{start:{line:116,column:4},end:{line:146,column:5}},type:"switch",locations:[{start:{line:117,column:6},end:{line:117,column:19}},{start:{line:118,column:6},end:{line:144,column:9}}],line:116},"25":{loc:{start:{line:134,column:12},end:{line:139,column:13}},type:"if",locations:[{start:{line:134,column:12},end:{line:139,column:13}},{start:{line:134,column:12},end:{line:139,column:13}}],line:134},"26":{loc:{start:{line:158,column:16},end:{line:158,column:126}},type:"cond-expr",locations:[{start:{line:158,column:67},end:{line:158,column:95}},{start:{line:158,column:98},end:{line:158,column:126}}],line:158},"27":{loc:{start:{line:173,column:8},end:{line:180,column:9}},type:"if",locations:[{start:{line:173,column:8},end:{line:180,column:9}},{start:{line:173,column:8},end:{line:180,column:9}}],line:173},"28":{loc:{start:{line:177,column:15},end:{line:180,column:9}},type:"if",locations:[{start:{line:177,column:15},end:{line:180,column:9}},{start:{line:177,column:15},end:{line:180,column:9}}],line:177},"29":{loc:{start:{line:184,column:235},end:{line:184,column:275}},type:"cond-expr",locations:[{start:{line:184,column:259},end:{line:184,column:270}},{start:{line:184,column:273},end:{line:184,column:275}}],line:184},"30":{loc:{start:{line:184,column:329},end:{line:184,column:361}},type:"cond-expr",locations:[{start:{line:184,column:353},end:{line:184,column:356}},{start:{line:184,column:359},end:{line:184,column:361}}],line:184},"31":{loc:{start:{line:196,column:4},end:{line:205,column:5}},type:"switch",locations:[{start:{line:197,column:6},end:{line:198,column:19}},{start:{line:200,column:6},end:{line:201,column:19}},{start:{line:203,column:6},end:{line:204,column:20}}],line:196}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0],"18":[0],"19":[0],"20":[0],"21":[0],"22":[0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0,0]},inputSourceMap:{version:3,sources:["../../src/Security/CheckRunner.js"],names:["CheckRunner","constructor","config","_validateParams","enableCheck","enableCheckLog","checkGroups","CheckGroups","run","version","groups","Object","values","filter","c","map","CheckGroup","forEach","group","report","_generateReport","_logReport","state","CheckState","success","groupReport","name","checks","check","checkReport","title","checkState","fail","warning","solution","push","log","s","logger","info","warn","indent","output","checksCount","failedChecksCount","skippedCheckCount","_getLogIconForState","none","params","Utils","validateParams","t","v","isBoolean","o","isArray","module","exports"],mappings:"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",sourcesContent:["/**\n * @module SecurityCheck\n */\n\nimport Utils from '../Utils';\nimport { CheckState } from './Check';\nimport * as CheckGroups from './CheckGroups/CheckGroups';\nimport logger from '../logger';\nimport { isArray, isBoolean } from 'lodash';\n\n/**\n * The security check runner.\n */\nclass CheckRunner {\n  /**\n   * The security check runner.\n   * @param {Object} [config] The configuration options.\n   * @param {Boolean} [config.enableCheck=false] Is true if Parse Server should report weak security settings.\n   * @param {Boolean} [config.enableCheckLog=false] Is true if the security check report should be written to logs.\n   * @param {Object} [config.checkGroups] The check groups to run. Default are the groups defined in `./CheckGroups/CheckGroups.js`.\n   */\n  constructor(config = {}) {\n    this._validateParams(config);\n    const { enableCheck = false, enableCheckLog = false, checkGroups = CheckGroups } = config;\n    this.enableCheck = enableCheck;\n    this.enableCheckLog = enableCheckLog;\n    this.checkGroups = checkGroups;\n  }\n\n  /**\n   * Runs all security checks and returns the results.\n   * @params\n   * @returns {Object} The security check report.\n   */\n  async run({ version = '1.0.0' } = {}) {\n    // Instantiate check groups\n    const groups = Object.values(this.checkGroups)\n      .filter(c => typeof c === 'function')\n      .map(CheckGroup => new CheckGroup());\n\n    // Run checks\n    groups.forEach(group => group.run());\n\n    // Generate JSON report\n    const report = this._generateReport({ groups, version });\n\n    // If report should be written to logs\n    if (this.enableCheckLog) {\n      this._logReport(report);\n    }\n    return report;\n  }\n\n  /**\n   * Generates a security check report in JSON format with schema:\n   * ```\n   * {\n   *    report: {\n   *      version: \"1.0.0\", // The report version, defines the schema\n   *      state: \"fail\"     // The disjunctive indicator of failed checks in all groups.\n   *      groups: [         // The check groups\n   *        {\n   *          name: \"House\",            // The group name\n   *          state: \"fail\"             // The disjunctive indicator of failed checks in this group.\n   *          checks: [                 // The checks\n   *            title: \"Door locked\",   // The check title\n   *            state: \"fail\"           // The check state\n   *            warning: \"Anyone can enter your house.\"   // The warning.\n   *            solution: \"Lock your door.\"               // The solution.\n   *          ]\n   *        },\n   *        ...\n   *      ]\n   *    }\n   * }\n   * ```\n   * @param {Object} params The parameters.\n   * @param {Array<CheckGroup>} params.groups The check groups.\n   * @param {String} params.version: The report schema version.\n   * @returns {Object} The report.\n   */\n  _generateReport({ groups, version }) {\n    // Create report template\n    const report = {\n      report: {\n        version,\n        state: CheckState.success,\n        groups: [],\n      },\n    };\n\n    // Identify report version\n    switch (version) {\n      case '1.0.0':\n      default:\n        // For each check group\n        for (const group of groups) {\n          // Create group report\n          const groupReport = {\n            name: group.name(),\n            state: CheckState.success,\n            checks: [],\n          };\n\n          // Create check reports\n          groupReport.checks = group.checks().map(check => {\n            const checkReport = {\n              title: check.title,\n              state: check.checkState(),\n            };\n            if (check.checkState() == CheckState.fail) {\n              checkReport.warning = check.warning;\n              checkReport.solution = check.solution;\n              report.report.state = CheckState.fail;\n              groupReport.state = CheckState.fail;\n            }\n            return checkReport;\n          });\n\n          report.report.groups.push(groupReport);\n        }\n    }\n    return report;\n  }\n\n  /**\n   * Logs the security check report.\n   * @param {Object} report The report to log.\n   */\n  _logReport(report) {\n    // Determine log level depending on whether any check failed\n    const log =\n      report.report.state == CheckState.success ? s => logger.info(s) : s => logger.warn(s);\n\n    // Declare output\n    const indent = '   ';\n    let output = '';\n    let checksCount = 0;\n    let failedChecksCount = 0;\n    let skippedCheckCount = 0;\n\n    // Traverse all groups and checks for compose output\n    for (const group of report.report.groups) {\n      output += `\\n- ${group.name}`;\n\n      for (const check of group.checks) {\n        checksCount++;\n        output += `\\n${indent}${this._getLogIconForState(check.state)} ${check.title}`;\n\n        if (check.state == CheckState.fail) {\n          failedChecksCount++;\n          output += `\\n${indent}${indent}Warning: ${check.warning}`;\n          output += ` ${check.solution}`;\n        } else if (check.state == CheckState.none) {\n          skippedCheckCount++;\n          output += `\\n${indent}${indent}Test did not execute, this is likely an internal server issue, please report.`;\n        }\n      }\n    }\n\n    output =\n      `\\n###################################` +\n      `\\n#                                 #` +\n      `\\n#   Parse Server Security Check   #` +\n      `\\n#                                 #` +\n      `\\n###################################` +\n      `\\n` +\n      `\\n${\n        failedChecksCount > 0 ? 'Warning: ' : ''\n      }${failedChecksCount} weak security setting(s) found${failedChecksCount > 0 ? '!' : ''}` +\n      `\\n${checksCount} check(s) executed` +\n      `\\n${skippedCheckCount} check(s) skipped` +\n      `\\n` +\n      `${output}`;\n\n    // Write log\n    log(output);\n  }\n\n  /**\n   * Returns an icon for use in the report log output.\n   * @param {CheckState} state The check state.\n   * @returns {String} The icon.\n   */\n  _getLogIconForState(state) {\n    switch (state) {\n      case CheckState.success:\n        return '\u2705';\n      case CheckState.fail:\n        return '\u274C';\n      default:\n        return '\u2139\uFE0F';\n    }\n  }\n\n  /**\n   * Validates the constructor parameters.\n   * @param {Object} params The parameters to validate.\n   */\n  _validateParams(params) {\n    Utils.validateParams(params, {\n      enableCheck: { t: 'boolean', v: isBoolean, o: true },\n      enableCheckLog: { t: 'boolean', v: isBoolean, o: true },\n      checkGroups: { t: 'array', v: isArray, o: true },\n    });\n  }\n}\n\nmodule.exports = CheckRunner;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5acb405c7c47b73e28fd1a8ce6e203f998864263"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2ffslx14ah=function(){return actualCoverage;};}return actualCoverage;}cov_2ffslx14ah();var _Utils=(cov_2ffslx14ah().s[0]++,_interopRequireDefault(require("../Utils")));var _Check=(cov_2ffslx14ah().s[1]++,require("./Check"));var CheckGroups=(cov_2ffslx14ah().s[2]++,_interopRequireWildcard(require("./CheckGroups/CheckGroups")));var _logger=(cov_2ffslx14ah().s[3]++,_interopRequireDefault(require("../logger")));var _lodash=(cov_2ffslx14ah().s[4]++,require("lodash"));function _getRequireWildcardCache(nodeInterop){cov_2ffslx14ah().f[0]++;cov_2ffslx14ah().s[5]++;if(typeof WeakMap!=="function"){cov_2ffslx14ah().b[0][0]++;cov_2ffslx14ah().s[6]++;return null;}else{cov_2ffslx14ah().b[0][1]++;}var cacheBabelInterop=(cov_2ffslx14ah().s[7]++,new WeakMap());var cacheNodeInterop=(cov_2ffslx14ah().s[8]++,new WeakMap());cov_2ffslx14ah().s[9]++;return(_getRequireWildcardCache=function(nodeInterop){cov_2ffslx14ah().f[1]++;cov_2ffslx14ah().s[10]++;return nodeInterop?(cov_2ffslx14ah().b[1][0]++,cacheNodeInterop):(cov_2ffslx14ah().b[1][1]++,cacheBabelInterop);})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){cov_2ffslx14ah().f[2]++;cov_2ffslx14ah().s[11]++;if((cov_2ffslx14ah().b[3][0]++,!nodeInterop)&&(cov_2ffslx14ah().b[3][1]++,obj)&&(cov_2ffslx14ah().b[3][2]++,obj.__esModule)){cov_2ffslx14ah().b[2][0]++;cov_2ffslx14ah().s[12]++;return obj;}else{cov_2ffslx14ah().b[2][1]++;}cov_2ffslx14ah().s[13]++;if((cov_2ffslx14ah().b[5][0]++,obj===null)||(cov_2ffslx14ah().b[5][1]++,typeof obj!=="object")&&(cov_2ffslx14ah().b[5][2]++,typeof obj!=="function")){cov_2ffslx14ah().b[4][0]++;cov_2ffslx14ah().s[14]++;return{default:obj};}else{cov_2ffslx14ah().b[4][1]++;}var cache=(cov_2ffslx14ah().s[15]++,_getRequireWildcardCache(nodeInterop));cov_2ffslx14ah().s[16]++;if((cov_2ffslx14ah().b[7][0]++,cache)&&(cov_2ffslx14ah().b[7][1]++,cache.has(obj))){cov_2ffslx14ah().b[6][0]++;cov_2ffslx14ah().s[17]++;return cache.get(obj);}else{cov_2ffslx14ah().b[6][1]++;}var newObj=(cov_2ffslx14ah().s[18]++,{});var hasPropertyDescriptor=(cov_2ffslx14ah().s[19]++,(cov_2ffslx14ah().b[8][0]++,Object.defineProperty)&&(cov_2ffslx14ah().b[8][1]++,Object.getOwnPropertyDescriptor));cov_2ffslx14ah().s[20]++;for(var key in obj){cov_2ffslx14ah().s[21]++;if((cov_2ffslx14ah().b[10][0]++,key!=="default")&&(cov_2ffslx14ah().b[10][1]++,Object.prototype.hasOwnProperty.call(obj,key))){cov_2ffslx14ah().b[9][0]++;var desc=(cov_2ffslx14ah().s[22]++,hasPropertyDescriptor?(cov_2ffslx14ah().b[11][0]++,Object.getOwnPropertyDescriptor(obj,key)):(cov_2ffslx14ah().b[11][1]++,null));cov_2ffslx14ah().s[23]++;if((cov_2ffslx14ah().b[13][0]++,desc)&&((cov_2ffslx14ah().b[13][1]++,desc.get)||(cov_2ffslx14ah().b[13][2]++,desc.set))){cov_2ffslx14ah().b[12][0]++;cov_2ffslx14ah().s[24]++;Object.defineProperty(newObj,key,desc);}else{cov_2ffslx14ah().b[12][1]++;cov_2ffslx14ah().s[25]++;newObj[key]=obj[key];}}else{cov_2ffslx14ah().b[9][1]++;}}cov_2ffslx14ah().s[26]++;newObj.default=obj;cov_2ffslx14ah().s[27]++;if(cache){cov_2ffslx14ah().b[14][0]++;cov_2ffslx14ah().s[28]++;cache.set(obj,newObj);}else{cov_2ffslx14ah().b[14][1]++;}cov_2ffslx14ah().s[29]++;return newObj;}function _interopRequireDefault(obj){cov_2ffslx14ah().f[3]++;cov_2ffslx14ah().s[30]++;return(cov_2ffslx14ah().b[16][0]++,obj)&&(cov_2ffslx14ah().b[16][1]++,obj.__esModule)?(cov_2ffslx14ah().b[15][0]++,obj):(cov_2ffslx14ah().b[15][1]++,{default:obj});}/**
 * @module SecurityCheck
 */ /**
 * The security check runner.
 */class CheckRunner{/**
   * The security check runner.
   * @param {Object} [config] The configuration options.
   * @param {Boolean} [config.enableCheck=false] Is true if Parse Server should report weak security settings.
   * @param {Boolean} [config.enableCheckLog=false] Is true if the security check report should be written to logs.
   * @param {Object} [config.checkGroups] The check groups to run. Default are the groups defined in `./CheckGroups/CheckGroups.js`.
   */constructor(config=(cov_2ffslx14ah().b[17][0]++,{})){cov_2ffslx14ah().f[4]++;cov_2ffslx14ah().s[31]++;this._validateParams(config);const{enableCheck=(cov_2ffslx14ah().b[18][0]++,false),enableCheckLog=(cov_2ffslx14ah().b[19][0]++,false),checkGroups=(cov_2ffslx14ah().b[20][0]++,CheckGroups)}=(cov_2ffslx14ah().s[32]++,config);cov_2ffslx14ah().s[33]++;this.enableCheck=enableCheck;cov_2ffslx14ah().s[34]++;this.enableCheckLog=enableCheckLog;cov_2ffslx14ah().s[35]++;this.checkGroups=checkGroups;}/**
   * Runs all security checks and returns the results.
   * @params
   * @returns {Object} The security check report.
   */async run({version=(cov_2ffslx14ah().b[22][0]++,'1.0.0')}=(cov_2ffslx14ah().b[21][0]++,{})){cov_2ffslx14ah().f[5]++;// Instantiate check groups
const groups=(cov_2ffslx14ah().s[36]++,Object.values(this.checkGroups).filter(c=>{cov_2ffslx14ah().f[6]++;cov_2ffslx14ah().s[37]++;return typeof c==='function';}).map(CheckGroup=>{cov_2ffslx14ah().f[7]++;cov_2ffslx14ah().s[38]++;return new CheckGroup();}));// Run checks
cov_2ffslx14ah().s[39]++;groups.forEach(group=>{cov_2ffslx14ah().f[8]++;cov_2ffslx14ah().s[40]++;return group.run();});// Generate JSON report
const report=(cov_2ffslx14ah().s[41]++,this._generateReport({groups,version}));// If report should be written to logs
cov_2ffslx14ah().s[42]++;if(this.enableCheckLog){cov_2ffslx14ah().b[23][0]++;cov_2ffslx14ah().s[43]++;this._logReport(report);}else{cov_2ffslx14ah().b[23][1]++;}cov_2ffslx14ah().s[44]++;return report;}/**
   * Generates a security check report in JSON format with schema:
   * ```
   * {
   *    report: {
   *      version: "1.0.0", // The report version, defines the schema
   *      state: "fail"     // The disjunctive indicator of failed checks in all groups.
   *      groups: [         // The check groups
   *        {
   *          name: "House",            // The group name
   *          state: "fail"             // The disjunctive indicator of failed checks in this group.
   *          checks: [                 // The checks
   *            title: "Door locked",   // The check title
   *            state: "fail"           // The check state
   *            warning: "Anyone can enter your house."   // The warning.
   *            solution: "Lock your door."               // The solution.
   *          ]
   *        },
   *        ...
   *      ]
   *    }
   * }
   * ```
   * @param {Object} params The parameters.
   * @param {Array<CheckGroup>} params.groups The check groups.
   * @param {String} params.version: The report schema version.
   * @returns {Object} The report.
   */_generateReport({groups,version}){cov_2ffslx14ah().f[9]++;// Create report template
const report=(cov_2ffslx14ah().s[45]++,{report:{version,state:_Check.CheckState.success,groups:[]}});// Identify report version
cov_2ffslx14ah().s[46]++;switch(version){case'1.0.0':cov_2ffslx14ah().b[24][0]++;default:cov_2ffslx14ah().b[24][1]++;cov_2ffslx14ah().s[47]++;// For each check group
for(const group of groups){// Create group report
const groupReport=(cov_2ffslx14ah().s[48]++,{name:group.name(),state:_Check.CheckState.success,checks:[]});// Create check reports
cov_2ffslx14ah().s[49]++;groupReport.checks=group.checks().map(check=>{cov_2ffslx14ah().f[10]++;const checkReport=(cov_2ffslx14ah().s[50]++,{title:check.title,state:check.checkState()});cov_2ffslx14ah().s[51]++;if(check.checkState()==_Check.CheckState.fail){cov_2ffslx14ah().b[25][0]++;cov_2ffslx14ah().s[52]++;checkReport.warning=check.warning;cov_2ffslx14ah().s[53]++;checkReport.solution=check.solution;cov_2ffslx14ah().s[54]++;report.report.state=_Check.CheckState.fail;cov_2ffslx14ah().s[55]++;groupReport.state=_Check.CheckState.fail;}else{cov_2ffslx14ah().b[25][1]++;}cov_2ffslx14ah().s[56]++;return checkReport;});cov_2ffslx14ah().s[57]++;report.report.groups.push(groupReport);}}cov_2ffslx14ah().s[58]++;return report;}/**
   * Logs the security check report.
   * @param {Object} report The report to log.
   */_logReport(report){cov_2ffslx14ah().f[11]++;// Determine log level depending on whether any check failed
const log=(cov_2ffslx14ah().s[59]++,report.report.state==_Check.CheckState.success?(cov_2ffslx14ah().b[26][0]++,s=>{cov_2ffslx14ah().f[12]++;cov_2ffslx14ah().s[60]++;return _logger.default.info(s);}):(cov_2ffslx14ah().b[26][1]++,s=>{cov_2ffslx14ah().f[13]++;cov_2ffslx14ah().s[61]++;return _logger.default.warn(s);}));// Declare output
const indent=(cov_2ffslx14ah().s[62]++,'   ');let output=(cov_2ffslx14ah().s[63]++,'');let checksCount=(cov_2ffslx14ah().s[64]++,0);let failedChecksCount=(cov_2ffslx14ah().s[65]++,0);let skippedCheckCount=(cov_2ffslx14ah().s[66]++,0);// Traverse all groups and checks for compose output
cov_2ffslx14ah().s[67]++;for(const group of report.report.groups){cov_2ffslx14ah().s[68]++;output+=`\n- ${group.name}`;cov_2ffslx14ah().s[69]++;for(const check of group.checks){cov_2ffslx14ah().s[70]++;checksCount++;cov_2ffslx14ah().s[71]++;output+=`\n${indent}${this._getLogIconForState(check.state)} ${check.title}`;cov_2ffslx14ah().s[72]++;if(check.state==_Check.CheckState.fail){cov_2ffslx14ah().b[27][0]++;cov_2ffslx14ah().s[73]++;failedChecksCount++;cov_2ffslx14ah().s[74]++;output+=`\n${indent}${indent}Warning: ${check.warning}`;cov_2ffslx14ah().s[75]++;output+=` ${check.solution}`;}else{cov_2ffslx14ah().b[27][1]++;cov_2ffslx14ah().s[76]++;if(check.state==_Check.CheckState.none){cov_2ffslx14ah().b[28][0]++;cov_2ffslx14ah().s[77]++;skippedCheckCount++;cov_2ffslx14ah().s[78]++;output+=`\n${indent}${indent}Test did not execute, this is likely an internal server issue, please report.`;}else{cov_2ffslx14ah().b[28][1]++;}}}}cov_2ffslx14ah().s[79]++;output=`\n###################################`+`\n#                                 #`+`\n#   Parse Server Security Check   #`+`\n#                                 #`+`\n###################################`+`\n`+`\n${failedChecksCount>0?(cov_2ffslx14ah().b[29][0]++,'Warning: '):(cov_2ffslx14ah().b[29][1]++,'')}${failedChecksCount} weak security setting(s) found${failedChecksCount>0?(cov_2ffslx14ah().b[30][0]++,'!'):(cov_2ffslx14ah().b[30][1]++,'')}`+`\n${checksCount} check(s) executed`+`\n${skippedCheckCount} check(s) skipped`+`\n`+`${output}`;// Write log
cov_2ffslx14ah().s[80]++;log(output);}/**
   * Returns an icon for use in the report log output.
   * @param {CheckState} state The check state.
   * @returns {String} The icon.
   */_getLogIconForState(state){cov_2ffslx14ah().f[14]++;cov_2ffslx14ah().s[81]++;switch(state){case _Check.CheckState.success:cov_2ffslx14ah().b[31][0]++;cov_2ffslx14ah().s[82]++;return'✅';case _Check.CheckState.fail:cov_2ffslx14ah().b[31][1]++;cov_2ffslx14ah().s[83]++;return'❌';default:cov_2ffslx14ah().b[31][2]++;cov_2ffslx14ah().s[84]++;return'ℹ️';}}/**
   * Validates the constructor parameters.
   * @param {Object} params The parameters to validate.
   */_validateParams(params){cov_2ffslx14ah().f[15]++;cov_2ffslx14ah().s[85]++;_Utils.default.validateParams(params,{enableCheck:{t:'boolean',v:_lodash.isBoolean,o:true},enableCheckLog:{t:'boolean',v:_lodash.isBoolean,o:true},checkGroups:{t:'array',v:_lodash.isArray,o:true}});}}cov_2ffslx14ah().s[86]++;module.exports=CheckRunner;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TZWN1cml0eS9DaGVja1J1bm5lci5qcyJdLCJuYW1lcyI6WyJDaGVja1J1bm5lciIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwiX3ZhbGlkYXRlUGFyYW1zIiwiZW5hYmxlQ2hlY2siLCJlbmFibGVDaGVja0xvZyIsImNoZWNrR3JvdXBzIiwiQ2hlY2tHcm91cHMiLCJydW4iLCJ2ZXJzaW9uIiwiZ3JvdXBzIiwiT2JqZWN0IiwidmFsdWVzIiwiZmlsdGVyIiwiYyIsIm1hcCIsIkNoZWNrR3JvdXAiLCJmb3JFYWNoIiwiZ3JvdXAiLCJyZXBvcnQiLCJfZ2VuZXJhdGVSZXBvcnQiLCJfbG9nUmVwb3J0Iiwic3RhdGUiLCJDaGVja1N0YXRlIiwic3VjY2VzcyIsImdyb3VwUmVwb3J0IiwibmFtZSIsImNoZWNrcyIsImNoZWNrIiwiY2hlY2tSZXBvcnQiLCJ0aXRsZSIsImNoZWNrU3RhdGUiLCJmYWlsIiwid2FybmluZyIsInNvbHV0aW9uIiwicHVzaCIsImxvZyIsInMiLCJsb2dnZXIiLCJpbmZvIiwid2FybiIsImluZGVudCIsIm91dHB1dCIsImNoZWNrc0NvdW50IiwiZmFpbGVkQ2hlY2tzQ291bnQiLCJza2lwcGVkQ2hlY2tDb3VudCIsIl9nZXRMb2dJY29uRm9yU3RhdGUiLCJub25lIiwicGFyYW1zIiwiVXRpbHMiLCJ2YWxpZGF0ZVBhcmFtcyIsInQiLCJ2IiwiaXNCb29sZWFuIiwibyIsImlzQXJyYXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUlBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztBQVJBO0FBQ0E7QUFDQTs7QUFRQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxXQUFOLENBQWtCO0FBQ2hCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0VDLEVBQUFBLFdBQVcsQ0FBQ0MsTUFBTSxHQUFHLEVBQVYsRUFBYztBQUN2QixTQUFLQyxlQUFMLENBQXFCRCxNQUFyQjs7QUFDQSxVQUFNO0FBQUVFLE1BQUFBLFdBQVcsR0FBRyxLQUFoQjtBQUF1QkMsTUFBQUEsY0FBYyxHQUFHLEtBQXhDO0FBQStDQyxNQUFBQSxXQUFXLEdBQUdDO0FBQTdELFFBQTZFTCxNQUFuRjtBQUNBLFNBQUtFLFdBQUwsR0FBbUJBLFdBQW5CO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQkEsY0FBdEI7QUFDQSxTQUFLQyxXQUFMLEdBQW1CQSxXQUFuQjtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7O0FBQ1csUUFBSEUsR0FBRyxDQUFDO0FBQUVDLElBQUFBLE9BQU8sR0FBRztBQUFaLE1BQXdCLEVBQXpCLEVBQTZCO0FBQ3BDO0FBQ0EsVUFBTUMsTUFBTSxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxLQUFLTixXQUFuQixFQUNaTyxNQURZLENBQ0xDLENBQUMsSUFBSSxPQUFPQSxDQUFQLEtBQWEsVUFEYixFQUVaQyxHQUZZLENBRVJDLFVBQVUsSUFBSSxJQUFJQSxVQUFKLEVBRk4sQ0FBZixDQUZvQyxDQU1wQzs7QUFDQU4sSUFBQUEsTUFBTSxDQUFDTyxPQUFQLENBQWVDLEtBQUssSUFBSUEsS0FBSyxDQUFDVixHQUFOLEVBQXhCLEVBUG9DLENBU3BDOztBQUNBLFVBQU1XLE1BQU0sR0FBRyxLQUFLQyxlQUFMLENBQXFCO0FBQUVWLE1BQUFBLE1BQUY7QUFBVUQsTUFBQUE7QUFBVixLQUFyQixDQUFmLENBVm9DLENBWXBDOzs7QUFDQSxRQUFJLEtBQUtKLGNBQVQsRUFBeUI7QUFDdkIsV0FBS2dCLFVBQUwsQ0FBZ0JGLE1BQWhCO0FBQ0Q7O0FBQ0QsV0FBT0EsTUFBUDtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNFQyxFQUFBQSxlQUFlLENBQUM7QUFBRVYsSUFBQUEsTUFBRjtBQUFVRCxJQUFBQTtBQUFWLEdBQUQsRUFBc0I7QUFDbkM7QUFDQSxVQUFNVSxNQUFNLEdBQUc7QUFDYkEsTUFBQUEsTUFBTSxFQUFFO0FBQ05WLFFBQUFBLE9BRE07QUFFTmEsUUFBQUEsS0FBSyxFQUFFQyxrQkFBV0MsT0FGWjtBQUdOZCxRQUFBQSxNQUFNLEVBQUU7QUFIRjtBQURLLEtBQWYsQ0FGbUMsQ0FVbkM7O0FBQ0EsWUFBUUQsT0FBUjtBQUNFLFdBQUssT0FBTDtBQUNBO0FBQ0U7QUFDQSxhQUFLLE1BQU1TLEtBQVgsSUFBb0JSLE1BQXBCLEVBQTRCO0FBQzFCO0FBQ0EsZ0JBQU1lLFdBQVcsR0FBRztBQUNsQkMsWUFBQUEsSUFBSSxFQUFFUixLQUFLLENBQUNRLElBQU4sRUFEWTtBQUVsQkosWUFBQUEsS0FBSyxFQUFFQyxrQkFBV0MsT0FGQTtBQUdsQkcsWUFBQUEsTUFBTSxFQUFFO0FBSFUsV0FBcEIsQ0FGMEIsQ0FRMUI7O0FBQ0FGLFVBQUFBLFdBQVcsQ0FBQ0UsTUFBWixHQUFxQlQsS0FBSyxDQUFDUyxNQUFOLEdBQWVaLEdBQWYsQ0FBbUJhLEtBQUssSUFBSTtBQUMvQyxrQkFBTUMsV0FBVyxHQUFHO0FBQ2xCQyxjQUFBQSxLQUFLLEVBQUVGLEtBQUssQ0FBQ0UsS0FESztBQUVsQlIsY0FBQUEsS0FBSyxFQUFFTSxLQUFLLENBQUNHLFVBQU47QUFGVyxhQUFwQjs7QUFJQSxnQkFBSUgsS0FBSyxDQUFDRyxVQUFOLE1BQXNCUixrQkFBV1MsSUFBckMsRUFBMkM7QUFDekNILGNBQUFBLFdBQVcsQ0FBQ0ksT0FBWixHQUFzQkwsS0FBSyxDQUFDSyxPQUE1QjtBQUNBSixjQUFBQSxXQUFXLENBQUNLLFFBQVosR0FBdUJOLEtBQUssQ0FBQ00sUUFBN0I7QUFDQWYsY0FBQUEsTUFBTSxDQUFDQSxNQUFQLENBQWNHLEtBQWQsR0FBc0JDLGtCQUFXUyxJQUFqQztBQUNBUCxjQUFBQSxXQUFXLENBQUNILEtBQVosR0FBb0JDLGtCQUFXUyxJQUEvQjtBQUNEOztBQUNELG1CQUFPSCxXQUFQO0FBQ0QsV0Fab0IsQ0FBckI7QUFjQVYsVUFBQUEsTUFBTSxDQUFDQSxNQUFQLENBQWNULE1BQWQsQ0FBcUJ5QixJQUFyQixDQUEwQlYsV0FBMUI7QUFDRDs7QUE1Qkw7O0FBOEJBLFdBQU9OLE1BQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBOzs7QUFDRUUsRUFBQUEsVUFBVSxDQUFDRixNQUFELEVBQVM7QUFDakI7QUFDQSxVQUFNaUIsR0FBRyxHQUNQakIsTUFBTSxDQUFDQSxNQUFQLENBQWNHLEtBQWQsSUFBdUJDLGtCQUFXQyxPQUFsQyxHQUE0Q2EsQ0FBQyxJQUFJQyxnQkFBT0MsSUFBUCxDQUFZRixDQUFaLENBQWpELEdBQWtFQSxDQUFDLElBQUlDLGdCQUFPRSxJQUFQLENBQVlILENBQVosQ0FEekUsQ0FGaUIsQ0FLakI7O0FBQ0EsVUFBTUksTUFBTSxHQUFHLEtBQWY7QUFDQSxRQUFJQyxNQUFNLEdBQUcsRUFBYjtBQUNBLFFBQUlDLFdBQVcsR0FBRyxDQUFsQjtBQUNBLFFBQUlDLGlCQUFpQixHQUFHLENBQXhCO0FBQ0EsUUFBSUMsaUJBQWlCLEdBQUcsQ0FBeEIsQ0FWaUIsQ0FZakI7O0FBQ0EsU0FBSyxNQUFNM0IsS0FBWCxJQUFvQkMsTUFBTSxDQUFDQSxNQUFQLENBQWNULE1BQWxDLEVBQTBDO0FBQ3hDZ0MsTUFBQUEsTUFBTSxJQUFLLE9BQU14QixLQUFLLENBQUNRLElBQUssRUFBNUI7O0FBRUEsV0FBSyxNQUFNRSxLQUFYLElBQW9CVixLQUFLLENBQUNTLE1BQTFCLEVBQWtDO0FBQ2hDZ0IsUUFBQUEsV0FBVztBQUNYRCxRQUFBQSxNQUFNLElBQUssS0FBSUQsTUFBTyxHQUFFLEtBQUtLLG1CQUFMLENBQXlCbEIsS0FBSyxDQUFDTixLQUEvQixDQUFzQyxJQUFHTSxLQUFLLENBQUNFLEtBQU0sRUFBN0U7O0FBRUEsWUFBSUYsS0FBSyxDQUFDTixLQUFOLElBQWVDLGtCQUFXUyxJQUE5QixFQUFvQztBQUNsQ1ksVUFBQUEsaUJBQWlCO0FBQ2pCRixVQUFBQSxNQUFNLElBQUssS0FBSUQsTUFBTyxHQUFFQSxNQUFPLFlBQVdiLEtBQUssQ0FBQ0ssT0FBUSxFQUF4RDtBQUNBUyxVQUFBQSxNQUFNLElBQUssSUFBR2QsS0FBSyxDQUFDTSxRQUFTLEVBQTdCO0FBQ0QsU0FKRCxNQUlPLElBQUlOLEtBQUssQ0FBQ04sS0FBTixJQUFlQyxrQkFBV3dCLElBQTlCLEVBQW9DO0FBQ3pDRixVQUFBQSxpQkFBaUI7QUFDakJILFVBQUFBLE1BQU0sSUFBSyxLQUFJRCxNQUFPLEdBQUVBLE1BQU8sK0VBQS9CO0FBQ0Q7QUFDRjtBQUNGOztBQUVEQyxJQUFBQSxNQUFNLEdBQ0gsdUNBQUQsR0FDQyx1Q0FERCxHQUVDLHVDQUZELEdBR0MsdUNBSEQsR0FJQyx1Q0FKRCxHQUtDLElBTEQsR0FNQyxLQUNDRSxpQkFBaUIsR0FBRyxDQUFwQixHQUF3QixXQUF4QixHQUFzQyxFQUN2QyxHQUFFQSxpQkFBa0Isa0NBQWlDQSxpQkFBaUIsR0FBRyxDQUFwQixHQUF3QixHQUF4QixHQUE4QixFQUFHLEVBUnZGLEdBU0MsS0FBSUQsV0FBWSxvQkFUakIsR0FVQyxLQUFJRSxpQkFBa0IsbUJBVnZCLEdBV0MsSUFYRCxHQVlDLEdBQUVILE1BQU8sRUFiWixDQS9CaUIsQ0E4Q2pCOztBQUNBTixJQUFBQSxHQUFHLENBQUNNLE1BQUQsQ0FBSDtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0VJLEVBQUFBLG1CQUFtQixDQUFDeEIsS0FBRCxFQUFRO0FBQ3pCLFlBQVFBLEtBQVI7QUFDRSxXQUFLQyxrQkFBV0MsT0FBaEI7QUFDRSxlQUFPLEdBQVA7O0FBQ0YsV0FBS0Qsa0JBQVdTLElBQWhCO0FBQ0UsZUFBTyxHQUFQOztBQUNGO0FBQ0UsZUFBTyxJQUFQO0FBTko7QUFRRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBOzs7QUFDRTdCLEVBQUFBLGVBQWUsQ0FBQzZDLE1BQUQsRUFBUztBQUN0QkMsbUJBQU1DLGNBQU4sQ0FBcUJGLE1BQXJCLEVBQTZCO0FBQzNCNUMsTUFBQUEsV0FBVyxFQUFFO0FBQUUrQyxRQUFBQSxDQUFDLEVBQUUsU0FBTDtBQUFnQkMsUUFBQUEsQ0FBQyxFQUFFQyxpQkFBbkI7QUFBOEJDLFFBQUFBLENBQUMsRUFBRTtBQUFqQyxPQURjO0FBRTNCakQsTUFBQUEsY0FBYyxFQUFFO0FBQUU4QyxRQUFBQSxDQUFDLEVBQUUsU0FBTDtBQUFnQkMsUUFBQUEsQ0FBQyxFQUFFQyxpQkFBbkI7QUFBOEJDLFFBQUFBLENBQUMsRUFBRTtBQUFqQyxPQUZXO0FBRzNCaEQsTUFBQUEsV0FBVyxFQUFFO0FBQUU2QyxRQUFBQSxDQUFDLEVBQUUsT0FBTDtBQUFjQyxRQUFBQSxDQUFDLEVBQUVHLGVBQWpCO0FBQTBCRCxRQUFBQSxDQUFDLEVBQUU7QUFBN0I7QUFIYyxLQUE3QjtBQUtEOztBQWhNZTs7QUFtTWxCRSxNQUFNLENBQUNDLE9BQVAsR0FBaUJ6RCxXQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG1vZHVsZSBTZWN1cml0eUNoZWNrXG4gKi9cblxuaW1wb3J0IFV0aWxzIGZyb20gJy4uL1V0aWxzJztcbmltcG9ydCB7IENoZWNrU3RhdGUgfSBmcm9tICcuL0NoZWNrJztcbmltcG9ydCAqIGFzIENoZWNrR3JvdXBzIGZyb20gJy4vQ2hlY2tHcm91cHMvQ2hlY2tHcm91cHMnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgaXNBcnJheSwgaXNCb29sZWFuIH0gZnJvbSAnbG9kYXNoJztcblxuLyoqXG4gKiBUaGUgc2VjdXJpdHkgY2hlY2sgcnVubmVyLlxuICovXG5jbGFzcyBDaGVja1J1bm5lciB7XG4gIC8qKlxuICAgKiBUaGUgc2VjdXJpdHkgY2hlY2sgcnVubmVyLlxuICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZ10gVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cbiAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmVuYWJsZUNoZWNrPWZhbHNlXSBJcyB0cnVlIGlmIFBhcnNlIFNlcnZlciBzaG91bGQgcmVwb3J0IHdlYWsgc2VjdXJpdHkgc2V0dGluZ3MuXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZy5lbmFibGVDaGVja0xvZz1mYWxzZV0gSXMgdHJ1ZSBpZiB0aGUgc2VjdXJpdHkgY2hlY2sgcmVwb3J0IHNob3VsZCBiZSB3cml0dGVuIHRvIGxvZ3MuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnLmNoZWNrR3JvdXBzXSBUaGUgY2hlY2sgZ3JvdXBzIHRvIHJ1bi4gRGVmYXVsdCBhcmUgdGhlIGdyb3VwcyBkZWZpbmVkIGluIGAuL0NoZWNrR3JvdXBzL0NoZWNrR3JvdXBzLmpzYC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XG4gICAgdGhpcy5fdmFsaWRhdGVQYXJhbXMoY29uZmlnKTtcbiAgICBjb25zdCB7IGVuYWJsZUNoZWNrID0gZmFsc2UsIGVuYWJsZUNoZWNrTG9nID0gZmFsc2UsIGNoZWNrR3JvdXBzID0gQ2hlY2tHcm91cHMgfSA9IGNvbmZpZztcbiAgICB0aGlzLmVuYWJsZUNoZWNrID0gZW5hYmxlQ2hlY2s7XG4gICAgdGhpcy5lbmFibGVDaGVja0xvZyA9IGVuYWJsZUNoZWNrTG9nO1xuICAgIHRoaXMuY2hlY2tHcm91cHMgPSBjaGVja0dyb3VwcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSdW5zIGFsbCBzZWN1cml0eSBjaGVja3MgYW5kIHJldHVybnMgdGhlIHJlc3VsdHMuXG4gICAqIEBwYXJhbXNcbiAgICogQHJldHVybnMge09iamVjdH0gVGhlIHNlY3VyaXR5IGNoZWNrIHJlcG9ydC5cbiAgICovXG4gIGFzeW5jIHJ1bih7IHZlcnNpb24gPSAnMS4wLjAnIH0gPSB7fSkge1xuICAgIC8vIEluc3RhbnRpYXRlIGNoZWNrIGdyb3Vwc1xuICAgIGNvbnN0IGdyb3VwcyA9IE9iamVjdC52YWx1ZXModGhpcy5jaGVja0dyb3VwcylcbiAgICAgIC5maWx0ZXIoYyA9PiB0eXBlb2YgYyA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgIC5tYXAoQ2hlY2tHcm91cCA9PiBuZXcgQ2hlY2tHcm91cCgpKTtcblxuICAgIC8vIFJ1biBjaGVja3NcbiAgICBncm91cHMuZm9yRWFjaChncm91cCA9PiBncm91cC5ydW4oKSk7XG5cbiAgICAvLyBHZW5lcmF0ZSBKU09OIHJlcG9ydFxuICAgIGNvbnN0IHJlcG9ydCA9IHRoaXMuX2dlbmVyYXRlUmVwb3J0KHsgZ3JvdXBzLCB2ZXJzaW9uIH0pO1xuXG4gICAgLy8gSWYgcmVwb3J0IHNob3VsZCBiZSB3cml0dGVuIHRvIGxvZ3NcbiAgICBpZiAodGhpcy5lbmFibGVDaGVja0xvZykge1xuICAgICAgdGhpcy5fbG9nUmVwb3J0KHJlcG9ydCk7XG4gICAgfVxuICAgIHJldHVybiByZXBvcnQ7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgc2VjdXJpdHkgY2hlY2sgcmVwb3J0IGluIEpTT04gZm9ybWF0IHdpdGggc2NoZW1hOlxuICAgKiBgYGBcbiAgICoge1xuICAgKiAgICByZXBvcnQ6IHtcbiAgICogICAgICB2ZXJzaW9uOiBcIjEuMC4wXCIsIC8vIFRoZSByZXBvcnQgdmVyc2lvbiwgZGVmaW5lcyB0aGUgc2NoZW1hXG4gICAqICAgICAgc3RhdGU6IFwiZmFpbFwiICAgICAvLyBUaGUgZGlzanVuY3RpdmUgaW5kaWNhdG9yIG9mIGZhaWxlZCBjaGVja3MgaW4gYWxsIGdyb3Vwcy5cbiAgICogICAgICBncm91cHM6IFsgICAgICAgICAvLyBUaGUgY2hlY2sgZ3JvdXBzXG4gICAqICAgICAgICB7XG4gICAqICAgICAgICAgIG5hbWU6IFwiSG91c2VcIiwgICAgICAgICAgICAvLyBUaGUgZ3JvdXAgbmFtZVxuICAgKiAgICAgICAgICBzdGF0ZTogXCJmYWlsXCIgICAgICAgICAgICAgLy8gVGhlIGRpc2p1bmN0aXZlIGluZGljYXRvciBvZiBmYWlsZWQgY2hlY2tzIGluIHRoaXMgZ3JvdXAuXG4gICAqICAgICAgICAgIGNoZWNrczogWyAgICAgICAgICAgICAgICAgLy8gVGhlIGNoZWNrc1xuICAgKiAgICAgICAgICAgIHRpdGxlOiBcIkRvb3IgbG9ja2VkXCIsICAgLy8gVGhlIGNoZWNrIHRpdGxlXG4gICAqICAgICAgICAgICAgc3RhdGU6IFwiZmFpbFwiICAgICAgICAgICAvLyBUaGUgY2hlY2sgc3RhdGVcbiAgICogICAgICAgICAgICB3YXJuaW5nOiBcIkFueW9uZSBjYW4gZW50ZXIgeW91ciBob3VzZS5cIiAgIC8vIFRoZSB3YXJuaW5nLlxuICAgKiAgICAgICAgICAgIHNvbHV0aW9uOiBcIkxvY2sgeW91ciBkb29yLlwiICAgICAgICAgICAgICAgLy8gVGhlIHNvbHV0aW9uLlxuICAgKiAgICAgICAgICBdXG4gICAqICAgICAgICB9LFxuICAgKiAgICAgICAgLi4uXG4gICAqICAgICAgXVxuICAgKiAgICB9XG4gICAqIH1cbiAgICogYGBgXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgVGhlIHBhcmFtZXRlcnMuXG4gICAqIEBwYXJhbSB7QXJyYXk8Q2hlY2tHcm91cD59IHBhcmFtcy5ncm91cHMgVGhlIGNoZWNrIGdyb3Vwcy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhcmFtcy52ZXJzaW9uOiBUaGUgcmVwb3J0IHNjaGVtYSB2ZXJzaW9uLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVwb3J0LlxuICAgKi9cbiAgX2dlbmVyYXRlUmVwb3J0KHsgZ3JvdXBzLCB2ZXJzaW9uIH0pIHtcbiAgICAvLyBDcmVhdGUgcmVwb3J0IHRlbXBsYXRlXG4gICAgY29uc3QgcmVwb3J0ID0ge1xuICAgICAgcmVwb3J0OiB7XG4gICAgICAgIHZlcnNpb24sXG4gICAgICAgIHN0YXRlOiBDaGVja1N0YXRlLnN1Y2Nlc3MsXG4gICAgICAgIGdyb3VwczogW10sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICAvLyBJZGVudGlmeSByZXBvcnQgdmVyc2lvblxuICAgIHN3aXRjaCAodmVyc2lvbikge1xuICAgICAgY2FzZSAnMS4wLjAnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gRm9yIGVhY2ggY2hlY2sgZ3JvdXBcbiAgICAgICAgZm9yIChjb25zdCBncm91cCBvZiBncm91cHMpIHtcbiAgICAgICAgICAvLyBDcmVhdGUgZ3JvdXAgcmVwb3J0XG4gICAgICAgICAgY29uc3QgZ3JvdXBSZXBvcnQgPSB7XG4gICAgICAgICAgICBuYW1lOiBncm91cC5uYW1lKCksXG4gICAgICAgICAgICBzdGF0ZTogQ2hlY2tTdGF0ZS5zdWNjZXNzLFxuICAgICAgICAgICAgY2hlY2tzOiBbXSxcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gQ3JlYXRlIGNoZWNrIHJlcG9ydHNcbiAgICAgICAgICBncm91cFJlcG9ydC5jaGVja3MgPSBncm91cC5jaGVja3MoKS5tYXAoY2hlY2sgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hlY2tSZXBvcnQgPSB7XG4gICAgICAgICAgICAgIHRpdGxlOiBjaGVjay50aXRsZSxcbiAgICAgICAgICAgICAgc3RhdGU6IGNoZWNrLmNoZWNrU3RhdGUoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoY2hlY2suY2hlY2tTdGF0ZSgpID09IENoZWNrU3RhdGUuZmFpbCkge1xuICAgICAgICAgICAgICBjaGVja1JlcG9ydC53YXJuaW5nID0gY2hlY2sud2FybmluZztcbiAgICAgICAgICAgICAgY2hlY2tSZXBvcnQuc29sdXRpb24gPSBjaGVjay5zb2x1dGlvbjtcbiAgICAgICAgICAgICAgcmVwb3J0LnJlcG9ydC5zdGF0ZSA9IENoZWNrU3RhdGUuZmFpbDtcbiAgICAgICAgICAgICAgZ3JvdXBSZXBvcnQuc3RhdGUgPSBDaGVja1N0YXRlLmZhaWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tSZXBvcnQ7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXBvcnQucmVwb3J0Lmdyb3Vwcy5wdXNoKGdyb3VwUmVwb3J0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVwb3J0O1xuICB9XG5cbiAgLyoqXG4gICAqIExvZ3MgdGhlIHNlY3VyaXR5IGNoZWNrIHJlcG9ydC5cbiAgICogQHBhcmFtIHtPYmplY3R9IHJlcG9ydCBUaGUgcmVwb3J0IHRvIGxvZy5cbiAgICovXG4gIF9sb2dSZXBvcnQocmVwb3J0KSB7XG4gICAgLy8gRGV0ZXJtaW5lIGxvZyBsZXZlbCBkZXBlbmRpbmcgb24gd2hldGhlciBhbnkgY2hlY2sgZmFpbGVkXG4gICAgY29uc3QgbG9nID1cbiAgICAgIHJlcG9ydC5yZXBvcnQuc3RhdGUgPT0gQ2hlY2tTdGF0ZS5zdWNjZXNzID8gcyA9PiBsb2dnZXIuaW5mbyhzKSA6IHMgPT4gbG9nZ2VyLndhcm4ocyk7XG5cbiAgICAvLyBEZWNsYXJlIG91dHB1dFxuICAgIGNvbnN0IGluZGVudCA9ICcgICAnO1xuICAgIGxldCBvdXRwdXQgPSAnJztcbiAgICBsZXQgY2hlY2tzQ291bnQgPSAwO1xuICAgIGxldCBmYWlsZWRDaGVja3NDb3VudCA9IDA7XG4gICAgbGV0IHNraXBwZWRDaGVja0NvdW50ID0gMDtcblxuICAgIC8vIFRyYXZlcnNlIGFsbCBncm91cHMgYW5kIGNoZWNrcyBmb3IgY29tcG9zZSBvdXRwdXRcbiAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIHJlcG9ydC5yZXBvcnQuZ3JvdXBzKSB7XG4gICAgICBvdXRwdXQgKz0gYFxcbi0gJHtncm91cC5uYW1lfWA7XG5cbiAgICAgIGZvciAoY29uc3QgY2hlY2sgb2YgZ3JvdXAuY2hlY2tzKSB7XG4gICAgICAgIGNoZWNrc0NvdW50Kys7XG4gICAgICAgIG91dHB1dCArPSBgXFxuJHtpbmRlbnR9JHt0aGlzLl9nZXRMb2dJY29uRm9yU3RhdGUoY2hlY2suc3RhdGUpfSAke2NoZWNrLnRpdGxlfWA7XG5cbiAgICAgICAgaWYgKGNoZWNrLnN0YXRlID09IENoZWNrU3RhdGUuZmFpbCkge1xuICAgICAgICAgIGZhaWxlZENoZWNrc0NvdW50Kys7XG4gICAgICAgICAgb3V0cHV0ICs9IGBcXG4ke2luZGVudH0ke2luZGVudH1XYXJuaW5nOiAke2NoZWNrLndhcm5pbmd9YDtcbiAgICAgICAgICBvdXRwdXQgKz0gYCAke2NoZWNrLnNvbHV0aW9ufWA7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hlY2suc3RhdGUgPT0gQ2hlY2tTdGF0ZS5ub25lKSB7XG4gICAgICAgICAgc2tpcHBlZENoZWNrQ291bnQrKztcbiAgICAgICAgICBvdXRwdXQgKz0gYFxcbiR7aW5kZW50fSR7aW5kZW50fVRlc3QgZGlkIG5vdCBleGVjdXRlLCB0aGlzIGlzIGxpa2VseSBhbiBpbnRlcm5hbCBzZXJ2ZXIgaXNzdWUsIHBsZWFzZSByZXBvcnQuYDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIG91dHB1dCA9XG4gICAgICBgXFxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNgICtcbiAgICAgIGBcXG4jICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2AgK1xuICAgICAgYFxcbiMgICBQYXJzZSBTZXJ2ZXIgU2VjdXJpdHkgQ2hlY2sgICAjYCArXG4gICAgICBgXFxuIyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNgICtcbiAgICAgIGBcXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI2AgK1xuICAgICAgYFxcbmAgK1xuICAgICAgYFxcbiR7XG4gICAgICAgIGZhaWxlZENoZWNrc0NvdW50ID4gMCA/ICdXYXJuaW5nOiAnIDogJydcbiAgICAgIH0ke2ZhaWxlZENoZWNrc0NvdW50fSB3ZWFrIHNlY3VyaXR5IHNldHRpbmcocykgZm91bmQke2ZhaWxlZENoZWNrc0NvdW50ID4gMCA/ICchJyA6ICcnfWAgK1xuICAgICAgYFxcbiR7Y2hlY2tzQ291bnR9IGNoZWNrKHMpIGV4ZWN1dGVkYCArXG4gICAgICBgXFxuJHtza2lwcGVkQ2hlY2tDb3VudH0gY2hlY2socykgc2tpcHBlZGAgK1xuICAgICAgYFxcbmAgK1xuICAgICAgYCR7b3V0cHV0fWA7XG5cbiAgICAvLyBXcml0ZSBsb2dcbiAgICBsb2cob3V0cHV0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGljb24gZm9yIHVzZSBpbiB0aGUgcmVwb3J0IGxvZyBvdXRwdXQuXG4gICAqIEBwYXJhbSB7Q2hlY2tTdGF0ZX0gc3RhdGUgVGhlIGNoZWNrIHN0YXRlLlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgaWNvbi5cbiAgICovXG4gIF9nZXRMb2dJY29uRm9yU3RhdGUoc3RhdGUpIHtcbiAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICBjYXNlIENoZWNrU3RhdGUuc3VjY2VzczpcbiAgICAgICAgcmV0dXJuICfinIUnO1xuICAgICAgY2FzZSBDaGVja1N0YXRlLmZhaWw6XG4gICAgICAgIHJldHVybiAn4p2MJztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAn4oS577iPJztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGVzIHRoZSBjb25zdHJ1Y3RvciBwYXJhbWV0ZXJzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIFRoZSBwYXJhbWV0ZXJzIHRvIHZhbGlkYXRlLlxuICAgKi9cbiAgX3ZhbGlkYXRlUGFyYW1zKHBhcmFtcykge1xuICAgIFV0aWxzLnZhbGlkYXRlUGFyYW1zKHBhcmFtcywge1xuICAgICAgZW5hYmxlQ2hlY2s6IHsgdDogJ2Jvb2xlYW4nLCB2OiBpc0Jvb2xlYW4sIG86IHRydWUgfSxcbiAgICAgIGVuYWJsZUNoZWNrTG9nOiB7IHQ6ICdib29sZWFuJywgdjogaXNCb29sZWFuLCBvOiB0cnVlIH0sXG4gICAgICBjaGVja0dyb3VwczogeyB0OiAnYXJyYXknLCB2OiBpc0FycmF5LCBvOiB0cnVlIH0sXG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDaGVja1J1bm5lcjtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,