"use strict";function cov_gbo8ccsw5(){var path="/parse-server/lib/Adapters/Storage/Mongo/MongoStorageAdapter.js";var hash="cb9fe62d9f038c6d8a9dab2f04ffd8fd07ea0c67";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Adapters/Storage/Mongo/MongoStorageAdapter.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:55}},"2":{start:{line:8,column:23},end:{line:8,column:75}},"3":{start:{line:10,column:29},end:{line:10,column:87}},"4":{start:{line:12,column:22},end:{line:12,column:50}},"5":{start:{line:14,column:18},end:{line:14,column:55}},"6":{start:{line:16,column:22},end:{line:16,column:49}},"7":{start:{line:18,column:12},end:{line:18,column:57}},"8":{start:{line:20,column:14},end:{line:20,column:55}},"9":{start:{line:22,column:16},end:{line:22,column:68}},"10":{start:{line:24,column:14},end:{line:24,column:64}},"11":{start:{line:26,column:39},end:{line:26,column:93}},"12":{start:{line:28,column:54},end:{line:28,column:73}},"13":{start:{line:28,column:75},end:{line:28,column:330}},"14":{start:{line:28,column:125},end:{line:28,column:161}},"15":{start:{line:28,column:163},end:{line:28,column:296}},"16":{start:{line:28,column:185},end:{line:28,column:294}},"17":{start:{line:28,column:227},end:{line:28,column:290}},"18":{start:{line:28,column:297},end:{line:28,column:328}},"19":{start:{line:28,column:331},end:{line:28,column:343}},"20":{start:{line:30,column:33},end:{line:30,column:517}},"21":{start:{line:30,column:46},end:{line:30,column:47}},"22":{start:{line:30,column:91},end:{line:30,column:131}},"23":{start:{line:30,column:133},end:{line:30,column:515}},"24":{start:{line:30,column:146},end:{line:30,column:247}},"25":{start:{line:30,column:201},end:{line:30,column:243}},"26":{start:{line:30,column:255},end:{line:30,column:515}},"27":{start:{line:30,column:295},end:{line:30,column:369}},"28":{start:{line:30,column:379},end:{line:30,column:513}},"29":{start:{line:30,column:428},end:{line:30,column:509}},"30":{start:{line:30,column:518},end:{line:30,column:532}},"31":{start:{line:32,column:44},end:{line:32,column:195}},"32":{start:{line:32,column:62},end:{line:32,column:166}},"33":{start:{line:32,column:176},end:{line:32,column:193}},"34":{start:{line:32,column:196},end:{line:32,column:207}},"35":{start:{line:34,column:54},end:{line:34,column:84}},"36":{start:{line:34,column:74},end:{line:34,column:84}},"37":{start:{line:34,column:98},end:{line:34,column:145}},"38":{start:{line:34,column:159},end:{line:34,column:475}},"39":{start:{line:34,column:218},end:{line:34,column:254}},"40":{start:{line:34,column:256},end:{line:34,column:473}},"41":{start:{line:34,column:304},end:{line:34,column:330}},"42":{start:{line:34,column:331},end:{line:34,column:372}},"43":{start:{line:34,column:363},end:{line:34,column:372}},"44":{start:{line:34,column:373},end:{line:34,column:444}},"45":{start:{line:34,column:435},end:{line:34,column:444}},"46":{start:{line:34,column:445},end:{line:34,column:471}},"47":{start:{line:34,column:476},end:{line:34,column:490}},"48":{start:{line:36,column:59},end:{line:36,column:89}},"49":{start:{line:36,column:79},end:{line:36,column:89}},"50":{start:{line:36,column:103},end:{line:36,column:105}},"51":{start:{line:36,column:124},end:{line:36,column:143}},"52":{start:{line:36,column:157},end:{line:36,column:290}},"53":{start:{line:36,column:199},end:{line:36,column:219}},"54":{start:{line:36,column:220},end:{line:36,column:261}},"55":{start:{line:36,column:252},end:{line:36,column:261}},"56":{start:{line:36,column:262},end:{line:36,column:288}},"57":{start:{line:36,column:291},end:{line:36,column:305}},"58":{start:{line:38,column:22},end:{line:38,column:275}},"59":{start:{line:38,column:70},end:{line:38,column:257}},"60":{start:{line:38,column:83},end:{line:38,column:84}},"61":{start:{line:38,column:128},end:{line:38,column:140}},"62":{start:{line:38,column:142},end:{line:38,column:255}},"63":{start:{line:38,column:168},end:{line:38,column:253}},"64":{start:{line:38,column:225},end:{line:38,column:251}},"65":{start:{line:38,column:258},end:{line:38,column:272}},"66":{start:{line:38,column:276},end:{line:38,column:315}},"67":{start:{line:41,column:16},end:{line:41,column:34}},"68":{start:{line:43,column:20},end:{line:43,column:39}},"69":{start:{line:44,column:23},end:{line:44,column:45}},"70":{start:{line:45,column:34},end:{line:45,column:43}},"71":{start:{line:47,column:37},end:{line:59,column:1}},"72":{start:{line:48,column:2},end:{line:58,column:5}},"73":{start:{line:48,column:43},end:{line:48,column:78}},"74":{start:{line:49,column:4},end:{line:57,column:7}},"75":{start:{line:50,column:6},end:{line:52,column:7}},"76":{start:{line:51,column:8},end:{line:51,column:21}},"77":{start:{line:56,column:6},end:{line:56,column:84}},"78":{start:{line:61,column:40},end:{line:76,column:1}},"79":{start:{line:62,column:15},end:{line:62,column:33}},"80":{start:{line:64,column:2},end:{line:64,column:30}},"81":{start:{line:65,column:2},end:{line:65,column:30}},"82":{start:{line:67,column:2},end:{line:73,column:3}},"83":{start:{line:72,column:4},end:{line:72,column:42}},"84":{start:{line:75,column:2},end:{line:75,column:16}},"85":{start:{line:80,column:48},end:{line:130,column:1}},"86":{start:{line:81,column:22},end:{line:87,column:3}},"87":{start:{line:89,column:2},end:{line:107,column:3}},"88":{start:{line:90,column:30},end:{line:90,column:47}},"89":{start:{line:94,column:8},end:{line:94,column:25}},"90":{start:{line:95,column:25},end:{line:95,column:93}},"91":{start:{line:97,column:4},end:{line:100,column:7}},"92":{start:{line:102,column:4},end:{line:106,column:5}},"93":{start:{line:103,column:6},end:{line:103,column:58}},"94":{start:{line:104,column:6},end:{line:104,column:88}},"95":{start:{line:105,column:6},end:{line:105,column:69}},"96":{start:{line:109,column:2},end:{line:117,column:3}},"97":{start:{line:110,column:4},end:{line:110,column:56}},"98":{start:{line:112,column:4},end:{line:116,column:5}},"99":{start:{line:113,column:6},end:{line:113,column:53}},"100":{start:{line:115,column:6},end:{line:115,column:70}},"101":{start:{line:119,column:2},end:{line:122,column:3}},"102":{start:{line:120,column:4},end:{line:120,column:56}},"103":{start:{line:121,column:4},end:{line:121,column:44}},"104":{start:{line:124,column:2},end:{line:127,column:3}},"105":{start:{line:126,column:4},end:{line:126,column:33}},"106":{start:{line:129,column:2},end:{line:129,column:21}},"107":{start:{line:133,column:2},end:{line:140,column:3}},"108":{start:{line:135,column:33},end:{line:135,column:125}},"109":{start:{line:137,column:4},end:{line:139,column:5}},"110":{start:{line:138,column:6},end:{line:138,column:100}},"111":{start:{line:151,column:4},end:{line:151,column:20}},"112":{start:{line:152,column:4},end:{line:152,column:46}},"113":{start:{line:153,column:4},end:{line:153,column:38}},"114":{start:{line:154,column:4},end:{line:154,column:46}},"115":{start:{line:155,column:4},end:{line:155,column:49}},"116":{start:{line:157,column:4},end:{line:157,column:30}},"117":{start:{line:160,column:4},end:{line:160,column:45}},"118":{start:{line:161,column:4},end:{line:161,column:36}},"119":{start:{line:162,column:4},end:{line:162,column:62}},"120":{start:{line:163,column:4},end:{line:163,column:42}},"121":{start:{line:164,column:4},end:{line:164,column:34}},"122":{start:{line:168,column:4},end:{line:168,column:30}},"123":{start:{line:172,column:4},end:{line:174,column:5}},"124":{start:{line:173,column:6},end:{line:173,column:36}},"125":{start:{line:178,column:23},end:{line:178,column:81}},"126":{start:{line:179,column:4},end:{line:202,column:7}},"127":{start:{line:183,column:22},end:{line:183,column:38}},"128":{start:{line:184,column:23},end:{line:184,column:48}},"129":{start:{line:186,column:6},end:{line:189,column:7}},"130":{start:{line:187,column:8},end:{line:187,column:38}},"131":{start:{line:188,column:8},end:{line:188,column:15}},"132":{start:{line:191,column:6},end:{line:193,column:9}},"133":{start:{line:192,column:8},end:{line:192,column:38}},"134":{start:{line:194,column:6},end:{line:196,column:9}},"135":{start:{line:195,column:8},end:{line:195,column:38}},"136":{start:{line:197,column:6},end:{line:197,column:27}},"137":{start:{line:198,column:6},end:{line:198,column:31}},"138":{start:{line:200,column:6},end:{line:200,column:36}},"139":{start:{line:201,column:6},end:{line:201,column:33}},"140":{start:{line:203,column:4},end:{line:203,column:34}},"141":{start:{line:207,column:4},end:{line:216,column:5}},"142":{start:{line:209,column:6},end:{line:209,column:25}},"143":{start:{line:210,column:6},end:{line:210,column:27}},"144":{start:{line:211,column:6},end:{line:211,column:36}},"145":{start:{line:213,column:6},end:{line:215,column:9}},"146":{start:{line:218,column:4},end:{line:218,column:16}},"147":{start:{line:222,column:4},end:{line:224,column:5}},"148":{start:{line:223,column:6},end:{line:223,column:31}},"149":{start:{line:226,column:4},end:{line:226,column:36}},"150":{start:{line:230,column:4},end:{line:230,column:197}},"151":{start:{line:230,column:37},end:{line:230,column:92}},"152":{start:{line:230,column:116},end:{line:230,column:159}},"153":{start:{line:230,column:174},end:{line:230,column:195}},"154":{start:{line:234,column:4},end:{line:242,column:7}},"155":{start:{line:234,column:37},end:{line:234,column:88}},"156":{start:{line:235,column:6},end:{line:239,column:7}},"157":{start:{line:236,column:8},end:{line:236,column:59}},"158":{start:{line:238,column:8},end:{line:238,column:58}},"159":{start:{line:238,column:40},end:{line:238,column:56}},"160":{start:{line:241,column:6},end:{line:241,column:60}},"161":{start:{line:246,column:4},end:{line:252,column:43}},"162":{start:{line:247,column:6},end:{line:249,column:19}},"163":{start:{line:251,column:6},end:{line:251,column:36}},"164":{start:{line:252,column:20},end:{line:252,column:41}},"165":{start:{line:256,column:4},end:{line:260,column:44}},"166":{start:{line:256,column:61},end:{line:260,column:6}},"167":{start:{line:260,column:21},end:{line:260,column:42}},"168":{start:{line:264,column:4},end:{line:266,column:5}},"169":{start:{line:265,column:6},end:{line:265,column:31}},"170":{start:{line:268,column:4},end:{line:274,column:5}},"171":{start:{line:269,column:6},end:{line:273,column:8}},"172":{start:{line:276,column:27},end:{line:276,column:29}},"173":{start:{line:277,column:28},end:{line:277,column:30}},"174":{start:{line:278,column:4},end:{line:305,column:7}},"175":{start:{line:279,column:20},end:{line:279,column:42}},"176":{start:{line:281,column:6},end:{line:283,column:7}},"177":{start:{line:282,column:8},end:{line:282,column:113}},"178":{start:{line:285,column:6},end:{line:287,column:7}},"179":{start:{line:286,column:8},end:{line:286,column:121}},"180":{start:{line:289,column:6},end:{line:304,column:7}},"181":{start:{line:290,column:24},end:{line:290,column:55}},"182":{start:{line:291,column:8},end:{line:291,column:37}},"183":{start:{line:292,column:8},end:{line:292,column:37}},"184":{start:{line:294,column:8},end:{line:298,column:11}},"185":{start:{line:295,column:10},end:{line:297,column:11}},"186":{start:{line:296,column:12},end:{line:296,column:127}},"187":{start:{line:299,column:8},end:{line:299,column:38}},"188":{start:{line:300,column:8},end:{line:303,column:11}},"189":{start:{line:306,column:24},end:{line:306,column:41}},"190":{start:{line:308,column:4},end:{line:310,column:5}},"191":{start:{line:309,column:6},end:{line:309,column:69}},"192":{start:{line:312,column:4},end:{line:316,column:44}},"193":{start:{line:312,column:50},end:{line:312,column:63}},"194":{start:{line:312,column:76},end:{line:312,column:100}},"195":{start:{line:312,column:127},end:{line:316,column:6}},"196":{start:{line:316,column:21},end:{line:316,column:42}},"197":{start:{line:320,column:4},end:{line:342,column:7}},"198":{start:{line:321,column:6},end:{line:333,column:13}},"199":{start:{line:322,column:8},end:{line:329,column:9}},"200":{start:{line:323,column:10},end:{line:323,column:32}},"201":{start:{line:324,column:10},end:{line:324,column:33}},"202":{start:{line:326,column:10},end:{line:328,column:11}},"203":{start:{line:327,column:12},end:{line:327,column:38}},"204":{start:{line:331,column:8},end:{line:331,column:36}},"205":{start:{line:332,column:8},end:{line:332,column:19}},"206":{start:{line:334,column:6},end:{line:338,column:10}},"207":{start:{line:334,column:63},end:{line:338,column:8}},"208":{start:{line:339,column:20},end:{line:339,column:41}},"209":{start:{line:341,column:6},end:{line:341,column:31}},"210":{start:{line:346,column:4},end:{line:346,column:53}},"211":{start:{line:347,column:24},end:{line:347,column:135}},"212":{start:{line:348,column:4},end:{line:348,column:32}},"213":{start:{line:349,column:4},end:{line:349,column:231}},"214":{start:{line:349,column:100},end:{line:349,column:124}},"215":{start:{line:349,column:151},end:{line:349,column:193}},"216":{start:{line:349,column:208},end:{line:349,column:229}},"217":{start:{line:353,column:29},end:{line:353,column:59}},"218":{start:{line:354,column:4},end:{line:354,column:74}},"219":{start:{line:358,column:4},end:{line:358,column:230}},"220":{start:{line:358,column:61},end:{line:358,column:125}},"221":{start:{line:358,column:138},end:{line:358,column:192}},"222":{start:{line:358,column:207},end:{line:358,column:228}},"223":{start:{line:364,column:4},end:{line:372,column:152}},"224":{start:{line:364,column:66},end:{line:364,column:83}},"225":{start:{line:366,column:6},end:{line:368,column:7}},"226":{start:{line:367,column:8},end:{line:367,column:15}},"227":{start:{line:370,column:6},end:{line:370,column:18}},"228":{start:{line:372,column:16},end:{line:372,column:40}},"229":{start:{line:372,column:67},end:{line:372,column:114}},"230":{start:{line:372,column:129},end:{line:372,column:150}},"231":{start:{line:376,column:4},end:{line:376,column:164}},"232":{start:{line:376,column:66},end:{line:376,column:162}},"233":{start:{line:376,column:108},end:{line:376,column:160}},"234":{start:{line:397,column:29},end:{line:403,column:6}},"235":{start:{line:398,column:6},end:{line:402,column:7}},"236":{start:{line:399,column:8},end:{line:399,column:33}},"237":{start:{line:401,column:8},end:{line:401,column:25}},"238":{start:{line:404,column:29},end:{line:406,column:5}},"239":{start:{line:407,column:4},end:{line:409,column:7}},"240":{start:{line:408,column:6},end:{line:408,column:46}},"241":{start:{line:410,column:29},end:{line:412,column:5}},"242":{start:{line:413,column:4},end:{line:419,column:7}},"243":{start:{line:414,column:6},end:{line:418,column:9}},"244":{start:{line:420,column:25},end:{line:422,column:5}},"245":{start:{line:423,column:4},end:{line:426,column:7}},"246":{start:{line:424,column:6},end:{line:424,column:42}},"247":{start:{line:425,column:6},end:{line:425,column:72}},"248":{start:{line:427,column:4},end:{line:427,column:279}},"249":{start:{line:427,column:66},end:{line:427,column:123}},"250":{start:{line:427,column:136},end:{line:427,column:160}},"251":{start:{line:427,column:187},end:{line:427,column:241}},"252":{start:{line:427,column:256},end:{line:427,column:277}},"253":{start:{line:434,column:4},end:{line:434,column:147}},"254":{start:{line:434,column:62},end:{line:434,column:109}},"255":{start:{line:434,column:124},end:{line:434,column:145}},"256":{start:{line:441,column:4},end:{line:441,column:155}},"257":{start:{line:441,column:62},end:{line:441,column:117}},"258":{start:{line:441,column:132},end:{line:441,column:153}},"259":{start:{line:448,column:4},end:{line:448,column:53}},"260":{start:{line:449,column:24},end:{line:449,column:105}},"261":{start:{line:450,column:4},end:{line:470,column:43}},"262":{start:{line:450,column:66},end:{line:450,column:121}},"263":{start:{line:451,column:6},end:{line:467,column:7}},"264":{start:{line:453,column:20},end:{line:453,column:145}},"265":{start:{line:454,column:8},end:{line:454,column:36}},"266":{start:{line:456,column:8},end:{line:464,column:9}},"267":{start:{line:457,column:26},end:{line:457,column:92}},"268":{start:{line:459,column:10},end:{line:463,column:11}},"269":{start:{line:460,column:12},end:{line:462,column:14}},"270":{start:{line:466,column:8},end:{line:466,column:18}},"271":{start:{line:469,column:6},end:{line:469,column:18}},"272":{start:{line:470,column:20},end:{line:470,column:41}},"273":{start:{line:477,column:4},end:{line:477,column:53}},"274":{start:{line:478,column:4},end:{line:491,column:7}},"275":{start:{line:479,column:25},end:{line:479,column:86}},"276":{start:{line:480,column:6},end:{line:480,column:69}},"277":{start:{line:481,column:20},end:{line:481,column:41}},"278":{start:{line:484,column:6},end:{line:486,column:7}},"279":{start:{line:485,column:8},end:{line:485,column:97}},"280":{start:{line:488,column:6},end:{line:488,column:31}},"281":{start:{line:490,column:6},end:{line:490,column:105}},"282":{start:{line:496,column:4},end:{line:496,column:53}},"283":{start:{line:497,column:24},end:{line:497,column:87}},"284":{start:{line:498,column:23},end:{line:498,column:84}},"285":{start:{line:499,column:4},end:{line:499,column:172}},"286":{start:{line:499,column:66},end:{line:499,column:134}},"287":{start:{line:499,column:149},end:{line:499,column:170}},"288":{start:{line:505,column:4},end:{line:505,column:53}},"289":{start:{line:506,column:24},end:{line:506,column:87}},"290":{start:{line:507,column:23},end:{line:507,column:84}},"291":{start:{line:508,column:4},end:{line:517,column:43}},"292":{start:{line:508,column:66},end:{line:511,column:6}},"293":{start:{line:511,column:23},end:{line:511,column:101}},"294":{start:{line:512,column:6},end:{line:514,column:7}},"295":{start:{line:513,column:8},end:{line:513,column:140}},"296":{start:{line:516,column:6},end:{line:516,column:18}},"297":{start:{line:517,column:20},end:{line:517,column:41}},"298":{start:{line:522,column:4},end:{line:522,column:53}},"299":{start:{line:523,column:24},end:{line:523,column:87}},"300":{start:{line:524,column:23},end:{line:524,column:84}},"301":{start:{line:525,column:4},end:{line:525,column:171}},"302":{start:{line:525,column:66},end:{line:525,column:133}},"303":{start:{line:525,column:148},end:{line:525,column:169}},"304":{start:{line:539,column:4},end:{line:539,column:34}},"305":{start:{line:540,column:4},end:{line:540,column:53}},"306":{start:{line:541,column:23},end:{line:541,column:84}},"307":{start:{line:543,column:22},end:{line:543,column:138}},"308":{start:{line:543,column:74},end:{line:543,column:137}},"309":{start:{line:545,column:22},end:{line:554,column:10}},"310":{start:{line:546,column:6},end:{line:551,column:7}},"311":{start:{line:547,column:8},end:{line:547,column:27}},"312":{start:{line:548,column:8},end:{line:548,column:27}},"313":{start:{line:550,column:8},end:{line:550,column:76}},"314":{start:{line:553,column:6},end:{line:553,column:18}},"315":{start:{line:559,column:4},end:{line:561,column:5}},"316":{start:{line:560,column:6},end:{line:560,column:24}},"317":{start:{line:563,column:4},end:{line:563,column:63}},"318":{start:{line:564,column:4},end:{line:580,column:43}},"319":{start:{line:564,column:79},end:{line:564,column:114}},"320":{start:{line:564,column:135},end:{line:574,column:6}},"321":{start:{line:575,column:6},end:{line:577,column:7}},"322":{start:{line:576,column:8},end:{line:576,column:23}},"323":{start:{line:579,column:6},end:{line:579,column:109}},"324":{start:{line:579,column:35},end:{line:579,column:107}},"325":{start:{line:580,column:20},end:{line:580,column:41}},"326":{start:{line:584,column:4},end:{line:584,column:53}},"327":{start:{line:585,column:33},end:{line:585,column:35}},"328":{start:{line:586,column:28},end:{line:586,column:120}},"329":{start:{line:586,column:56},end:{line:586,column:119}},"330":{start:{line:587,column:4},end:{line:589,column:7}},"331":{start:{line:588,column:6},end:{line:588,column:96}},"332":{start:{line:590,column:27},end:{line:593,column:5}},"333":{start:{line:594,column:29},end:{line:596,column:10}},"334":{start:{line:597,column:23},end:{line:599,column:10}},"335":{start:{line:600,column:35},end:{line:602,column:10}},"336":{start:{line:604,column:25},end:{line:604,column:157}},"337":{start:{line:606,column:4},end:{line:606,column:257}},"338":{start:{line:606,column:66},end:{line:606,column:219}},"339":{start:{line:606,column:99},end:{line:606,column:218}},"340":{start:{line:606,column:184},end:{line:606,column:217}},"341":{start:{line:606,column:234},end:{line:606,column:255}},"342":{start:{line:615,column:4},end:{line:615,column:53}},"343":{start:{line:616,column:33},end:{line:616,column:35}},"344":{start:{line:617,column:28},end:{line:617,column:120}},"345":{start:{line:617,column:56},end:{line:617,column:119}},"346":{start:{line:618,column:4},end:{line:620,column:7}},"347":{start:{line:619,column:6},end:{line:619,column:42}},"348":{start:{line:621,column:4},end:{line:627,column:43}},"349":{start:{line:621,column:66},end:{line:621,column:135}},"350":{start:{line:622,column:6},end:{line:624,column:7}},"351":{start:{line:623,column:8},end:{line:623,column:152}},"352":{start:{line:626,column:6},end:{line:626,column:18}},"353":{start:{line:627,column:20},end:{line:627,column:41}},"354":{start:{line:632,column:4},end:{line:634,column:44}},"355":{start:{line:632,column:66},end:{line:634,column:6}},"356":{start:{line:634,column:21},end:{line:634,column:42}},"357":{start:{line:639,column:4},end:{line:639,column:53}},"358":{start:{line:640,column:4},end:{line:640,column:63}},"359":{start:{line:641,column:4},end:{line:645,column:44}},"360":{start:{line:641,column:66},end:{line:645,column:6}},"361":{start:{line:645,column:21},end:{line:645,column:42}},"362":{start:{line:649,column:4},end:{line:649,column:53}},"363":{start:{line:650,column:27},end:{line:650,column:98}},"364":{start:{line:651,column:27},end:{line:651,column:90}},"365":{start:{line:652,column:4},end:{line:661,column:43}},"366":{start:{line:652,column:66},end:{line:652,column:164}},"367":{start:{line:653,column:6},end:{line:653,column:51}},"368":{start:{line:653,column:38},end:{line:653,column:49}},"369":{start:{line:654,column:6},end:{line:660,column:9}},"370":{start:{line:655,column:8},end:{line:657,column:9}},"371":{start:{line:656,column:10},end:{line:656,column:88}},"372":{start:{line:659,column:8},end:{line:659,column:88}},"373":{start:{line:661,column:20},end:{line:661,column:41}},"374":{start:{line:665,column:4},end:{line:665,column:34}},"375":{start:{line:666,column:25},end:{line:666,column:30}},"376":{start:{line:667,column:4},end:{line:689,column:7}},"377":{start:{line:668,column:6},end:{line:674,column:7}},"378":{start:{line:669,column:8},end:{line:669,column:75}},"379":{start:{line:671,column:8},end:{line:673,column:9}},"380":{start:{line:672,column:10},end:{line:672,column:32}},"381":{start:{line:676,column:6},end:{line:678,column:7}},"382":{start:{line:677,column:8},end:{line:677,column:70}},"383":{start:{line:680,column:6},end:{line:682,column:7}},"384":{start:{line:681,column:8},end:{line:681,column:81}},"385":{start:{line:684,column:6},end:{line:686,column:7}},"386":{start:{line:685,column:8},end:{line:685,column:86}},"387":{start:{line:688,column:6},end:{line:688,column:19}},"388":{start:{line:690,column:4},end:{line:690,column:63}},"389":{start:{line:691,column:4},end:{line:712,column:156}},"390":{start:{line:691,column:66},end:{line:696,column:6}},"391":{start:{line:697,column:6},end:{line:710,column:9}},"392":{start:{line:698,column:8},end:{line:709,column:9}},"393":{start:{line:699,column:10},end:{line:701,column:11}},"394":{start:{line:700,column:12},end:{line:700,column:50}},"395":{start:{line:703,column:10},end:{line:705,column:11}},"396":{start:{line:704,column:12},end:{line:704,column:30}},"397":{start:{line:707,column:10},end:{line:707,column:39}},"398":{start:{line:708,column:10},end:{line:708,column:28}},"399":{start:{line:711,column:6},end:{line:711,column:21}},"400":{start:{line:712,column:23},end:{line:712,column:118}},"401":{start:{line:712,column:45},end:{line:712,column:117}},"402":{start:{line:712,column:133},end:{line:712,column:154}},"403":{start:{line:735,column:4},end:{line:769,column:5}},"404":{start:{line:736,column:6},end:{line:736,column:18}},"405":{start:{line:737,column:11},end:{line:769,column:5}},"406":{start:{line:738,column:6},end:{line:738,column:76}},"407":{start:{line:738,column:35},end:{line:738,column:74}},"408":{start:{line:739,column:11},end:{line:769,column:5}},"409":{start:{line:740,column:26},end:{line:740,column:28}},"410":{start:{line:742,column:6},end:{line:766,column:7}},"411":{start:{line:743,column:8},end:{line:754,column:9}},"412":{start:{line:744,column:10},end:{line:749,column:11}},"413":{start:{line:746,column:12},end:{line:746,column:57}},"414":{start:{line:748,column:12},end:{line:748,column:98}},"415":{start:{line:750,column:15},end:{line:754,column:9}},"416":{start:{line:751,column:10},end:{line:751,column:68}},"417":{start:{line:753,column:10},end:{line:753,column:81}},"418":{start:{line:756,column:8},end:{line:765,column:9}},"419":{start:{line:757,column:10},end:{line:757,column:50}},"420":{start:{line:758,column:10},end:{line:758,column:36}},"421":{start:{line:759,column:15},end:{line:765,column:9}},"422":{start:{line:760,column:10},end:{line:760,column:58}},"423":{start:{line:761,column:10},end:{line:761,column:36}},"424":{start:{line:762,column:15},end:{line:765,column:9}},"425":{start:{line:763,column:10},end:{line:763,column:58}},"426":{start:{line:764,column:10},end:{line:764,column:36}},"427":{start:{line:768,column:6},end:{line:768,column:25}},"428":{start:{line:771,column:4},end:{line:771,column:20}},"429":{start:{line:779,column:24},end:{line:779,column:26}},"430":{start:{line:781,column:4},end:{line:798,column:5}},"431":{start:{line:782,column:6},end:{line:786,column:7}},"432":{start:{line:783,column:8},end:{line:783,column:53}},"433":{start:{line:785,column:8},end:{line:785,column:79}},"434":{start:{line:788,column:6},end:{line:797,column:7}},"435":{start:{line:789,column:8},end:{line:789,column:48}},"436":{start:{line:790,column:8},end:{line:790,column:34}},"437":{start:{line:791,column:13},end:{line:797,column:7}},"438":{start:{line:792,column:8},end:{line:792,column:56}},"439":{start:{line:793,column:8},end:{line:793,column:34}},"440":{start:{line:794,column:13},end:{line:797,column:7}},"441":{start:{line:795,column:8},end:{line:795,column:56}},"442":{start:{line:796,column:8},end:{line:796,column:34}},"443":{start:{line:800,column:4},end:{line:800,column:23}},"444":{start:{line:809,column:4},end:{line:829,column:5}},"445":{start:{line:810,column:6},end:{line:810,column:81}},"446":{start:{line:810,column:35},end:{line:810,column:79}},"447":{start:{line:811,column:11},end:{line:829,column:5}},"448":{start:{line:812,column:26},end:{line:812,column:28}},"449":{start:{line:814,column:6},end:{line:816,column:7}},"450":{start:{line:815,column:8},end:{line:815,column:84}},"451":{start:{line:818,column:6},end:{line:818,column:25}},"452":{start:{line:819,column:11},end:{line:829,column:5}},"453":{start:{line:820,column:20},end:{line:820,column:41}},"454":{start:{line:822,column:6},end:{line:828,column:7}},"455":{start:{line:823,column:8},end:{line:823,column:30}},"456":{start:{line:824,column:13},end:{line:828,column:7}},"457":{start:{line:825,column:8},end:{line:825,column:30}},"458":{start:{line:826,column:13},end:{line:828,column:7}},"459":{start:{line:827,column:8},end:{line:827,column:30}},"460":{start:{line:831,column:4},end:{line:831,column:20}},"461":{start:{line:839,column:4},end:{line:841,column:5}},"462":{start:{line:840,column:6},end:{line:840,column:29}},"463":{start:{line:843,column:24},end:{line:843,column:26}},"464":{start:{line:845,column:4},end:{line:847,column:5}},"465":{start:{line:846,column:6},end:{line:846,column:61}},"466":{start:{line:849,column:4},end:{line:849,column:23}},"467":{start:{line:853,column:4},end:{line:855,column:5}},"468":{start:{line:854,column:6},end:{line:854,column:52}},"469":{start:{line:857,column:4},end:{line:885,column:5}},"470":{start:{line:859,column:8},end:{line:859,column:48}},"471":{start:{line:860,column:8},end:{line:860,column:14}},"472":{start:{line:863,column:8},end:{line:863,column:58}},"473":{start:{line:864,column:8},end:{line:864,column:14}},"474":{start:{line:867,column:8},end:{line:867,column:50}},"475":{start:{line:868,column:8},end:{line:868,column:14}},"476":{start:{line:871,column:8},end:{line:871,column:60}},"477":{start:{line:872,column:8},end:{line:872,column:14}},"478":{start:{line:875,column:8},end:{line:875,column:48}},"479":{start:{line:876,column:8},end:{line:876,column:14}},"480":{start:{line:881,column:8},end:{line:881,column:14}},"481":{start:{line:884,column:8},end:{line:884,column:107}},"482":{start:{line:887,column:4},end:{line:887,column:26}},"483":{start:{line:891,column:4},end:{line:891,column:29}},"484":{start:{line:895,column:4},end:{line:895,column:150}},"485":{start:{line:895,column:66},end:{line:895,column:112}},"486":{start:{line:895,column:127},end:{line:895,column:148}},"487":{start:{line:899,column:4},end:{line:899,column:154}},"488":{start:{line:899,column:66},end:{line:899,column:116}},"489":{start:{line:899,column:131},end:{line:899,column:152}},"490":{start:{line:903,column:4},end:{line:908,column:5}},"491":{start:{line:904,column:20},end:{line:906,column:7}},"492":{start:{line:907,column:6},end:{line:907,column:48}},"493":{start:{line:910,column:4},end:{line:910,column:29}},"494":{start:{line:914,column:4},end:{line:943,column:5}},"495":{start:{line:915,column:6},end:{line:917,column:7}},"496":{start:{line:916,column:8},end:{line:916,column:17}},"497":{start:{line:919,column:30},end:{line:919,column:44}},"498":{start:{line:921,column:6},end:{line:927,column:7}},"499":{start:{line:922,column:22},end:{line:922,column:42}},"500":{start:{line:924,column:8},end:{line:926,column:9}},"501":{start:{line:925,column:10},end:{line:925,column:35}},"502":{start:{line:929,column:24},end:{line:929,column:43}},"503":{start:{line:930,column:24},end:{line:934,column:7}},"504":{start:{line:935,column:6},end:{line:942,column:9}},"505":{start:{line:936,column:8},end:{line:939,column:9}},"506":{start:{line:938,column:10},end:{line:938,column:53}},"507":{start:{line:941,column:8},end:{line:941,column:20}},"508":{start:{line:945,column:4},end:{line:945,column:29}},"509":{start:{line:949,column:4},end:{line:949,column:141}},"510":{start:{line:949,column:66},end:{line:949,column:103}},"511":{start:{line:949,column:118},end:{line:949,column:139}},"512":{start:{line:953,column:4},end:{line:953,column:148}},"513":{start:{line:953,column:66},end:{line:953,column:110}},"514":{start:{line:953,column:125},end:{line:953,column:146}},"515":{start:{line:957,column:4},end:{line:957,column:145}},"516":{start:{line:957,column:66},end:{line:957,column:107}},"517":{start:{line:957,column:122},end:{line:957,column:143}},"518":{start:{line:961,column:4},end:{line:966,column:43}},"519":{start:{line:962,column:23},end:{line:964,column:8}},"520":{start:{line:963,column:8},end:{line:963,column:58}},"521":{start:{line:965,column:6},end:{line:965,column:35}},"522":{start:{line:966,column:20},end:{line:966,column:41}},"523":{start:{line:970,column:33},end:{line:970,column:59}},"524":{start:{line:971,column:4},end:{line:971,column:44}},"525":{start:{line:972,column:4},end:{line:972,column:49}},"526":{start:{line:976,column:19},end:{line:986,column:5}},"527":{start:{line:977,column:6},end:{line:985,column:9}},"528":{start:{line:978,column:8},end:{line:980,column:9}},"529":{start:{line:979,column:10},end:{line:979,column:37}},"530":{start:{line:982,column:8},end:{line:982,column:20}},"531":{start:{line:984,column:8},end:{line:984,column:42}},"532":{start:{line:988,column:4},end:{line:988,column:21}},"533":{start:{line:992,column:4},end:{line:994,column:7}},"534":{start:{line:993,column:6},end:{line:993,column:40}},"535":{start:{line:999,column:0},end:{line:999,column:50}},"536":{start:{line:1000,column:15},end:{line:1000,column:34}},"537":{start:{line:1001,column:0},end:{line:1001,column:27}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:26,column:9},end:{line:26,column:31}},loc:{start:{line:26,column:37},end:{line:26,column:95}},line:26},"1":{name:"ownKeys",decl:{start:{line:28,column:9},end:{line:28,column:16}},loc:{start:{line:28,column:41},end:{line:28,column:345}},line:28},"2":{name:"(anonymous_2)",decl:{start:{line:28,column:210},end:{line:28,column:211}},loc:{start:{line:28,column:225},end:{line:28,column:292}},line:28},"3":{name:"_objectSpread",decl:{start:{line:30,column:9},end:{line:30,column:22}},loc:{start:{line:30,column:31},end:{line:30,column:534}},line:30},"4":{name:"(anonymous_4)",decl:{start:{line:30,column:184},end:{line:30,column:185}},loc:{start:{line:30,column:199},end:{line:30,column:245}},line:30},"5":{name:"(anonymous_5)",decl:{start:{line:30,column:411},end:{line:30,column:412}},loc:{start:{line:30,column:426},end:{line:30,column:511}},line:30},"6":{name:"_defineProperty",decl:{start:{line:32,column:9},end:{line:32,column:24}},loc:{start:{line:32,column:42},end:{line:32,column:209}},line:32},"7":{name:"_objectWithoutProperties",decl:{start:{line:34,column:9},end:{line:34,column:33}},loc:{start:{line:34,column:52},end:{line:34,column:492}},line:34},"8":{name:"_objectWithoutPropertiesLoose",decl:{start:{line:36,column:9},end:{line:36,column:38}},loc:{start:{line:36,column:57},end:{line:36,column:307}},line:36},"9":{name:"_extends",decl:{start:{line:38,column:9},end:{line:38,column:17}},loc:{start:{line:38,column:20},end:{line:38,column:317}},line:38},"10":{name:"(anonymous_10)",decl:{start:{line:38,column:50},end:{line:38,column:51}},loc:{start:{line:38,column:68},end:{line:38,column:274}},line:38},"11":{name:"(anonymous_11)",decl:{start:{line:47,column:37},end:{line:47,column:38}},loc:{start:{line:47,column:53},end:{line:59,column:1}},line:47},"12":{name:"(anonymous_12)",decl:{start:{line:48,column:37},end:{line:48,column:38}},loc:{start:{line:48,column:43},end:{line:48,column:78}},line:48},"13":{name:"(anonymous_13)",decl:{start:{line:48,column:85},end:{line:48,column:86}},loc:{start:{line:48,column:100},end:{line:58,column:3}},line:48},"14":{name:"(anonymous_14)",decl:{start:{line:49,column:30},end:{line:49,column:31}},loc:{start:{line:49,column:44},end:{line:57,column:5}},line:49},"15":{name:"(anonymous_15)",decl:{start:{line:61,column:40},end:{line:61,column:41}},loc:{start:{line:61,column:48},end:{line:76,column:1}},line:61},"16":{name:"(anonymous_16)",decl:{start:{line:80,column:48},end:{line:80,column:49}},loc:{start:{line:80,column:103},end:{line:130,column:1}},line:80},"17":{name:"validateExplainValue",decl:{start:{line:132,column:9},end:{line:132,column:29}},loc:{start:{line:132,column:39},end:{line:141,column:1}},line:132},"18":{name:"(anonymous_18)",decl:{start:{line:146,column:2},end:{line:146,column:3}},loc:{start:{line:150,column:5},end:{line:165,column:3}},line:150},"19":{name:"(anonymous_19)",decl:{start:{line:157,column:21},end:{line:157,column:22}},loc:{start:{line:157,column:27},end:{line:157,column:29}},line:157},"20":{name:"(anonymous_20)",decl:{start:{line:167,column:2},end:{line:167,column:3}},loc:{start:{line:167,column:18},end:{line:169,column:3}},line:167},"21":{name:"(anonymous_21)",decl:{start:{line:171,column:2},end:{line:171,column:3}},loc:{start:{line:171,column:12},end:{line:204,column:3}},line:171},"22":{name:"(anonymous_22)",decl:{start:{line:179,column:86},end:{line:179,column:87}},loc:{start:{line:179,column:96},end:{line:199,column:5}},line:179},"23":{name:"(anonymous_23)",decl:{start:{line:191,column:25},end:{line:191,column:26}},loc:{start:{line:191,column:31},end:{line:193,column:7}},line:191},"24":{name:"(anonymous_24)",decl:{start:{line:194,column:25},end:{line:194,column:26}},loc:{start:{line:194,column:31},end:{line:196,column:7}},line:194},"25":{name:"(anonymous_25)",decl:{start:{line:199,column:13},end:{line:199,column:14}},loc:{start:{line:199,column:20},end:{line:202,column:5}},line:199},"26":{name:"(anonymous_26)",decl:{start:{line:206,column:2},end:{line:206,column:3}},loc:{start:{line:206,column:21},end:{line:219,column:3}},line:206},"27":{name:"(anonymous_27)",decl:{start:{line:221,column:2},end:{line:221,column:3}},loc:{start:{line:221,column:19},end:{line:227,column:3}},line:221},"28":{name:"(anonymous_28)",decl:{start:{line:229,column:2},end:{line:229,column:3}},loc:{start:{line:229,column:28},end:{line:231,column:3}},line:229},"29":{name:"(anonymous_29)",decl:{start:{line:230,column:31},end:{line:230,column:32}},loc:{start:{line:230,column:37},end:{line:230,column:92}},line:230},"30":{name:"(anonymous_30)",decl:{start:{line:230,column:99},end:{line:230,column:100}},loc:{start:{line:230,column:116},end:{line:230,column:159}},line:230},"31":{name:"(anonymous_31)",decl:{start:{line:230,column:167},end:{line:230,column:168}},loc:{start:{line:230,column:174},end:{line:230,column:195}},line:230},"32":{name:"(anonymous_32)",decl:{start:{line:233,column:2},end:{line:233,column:3}},loc:{start:{line:233,column:22},end:{line:243,column:3}},line:233},"33":{name:"(anonymous_33)",decl:{start:{line:234,column:31},end:{line:234,column:32}},loc:{start:{line:234,column:37},end:{line:234,column:88}},line:234},"34":{name:"(anonymous_34)",decl:{start:{line:234,column:95},end:{line:234,column:96}},loc:{start:{line:234,column:109},end:{line:242,column:5}},line:234},"35":{name:"(anonymous_35)",decl:{start:{line:238,column:34},end:{line:238,column:35}},loc:{start:{line:238,column:40},end:{line:238,column:56}},line:238},"36":{name:"(anonymous_36)",decl:{start:{line:245,column:2},end:{line:245,column:3}},loc:{start:{line:245,column:20},end:{line:253,column:3}},line:245},"37":{name:"(anonymous_37)",decl:{start:{line:246,column:31},end:{line:246,column:32}},loc:{start:{line:246,column:37},end:{line:250,column:5}},line:246},"38":{name:"(anonymous_38)",decl:{start:{line:250,column:12},end:{line:250,column:13}},loc:{start:{line:250,column:27},end:{line:252,column:5}},line:250},"39":{name:"(anonymous_39)",decl:{start:{line:252,column:13},end:{line:252,column:14}},loc:{start:{line:252,column:20},end:{line:252,column:41}},line:252},"40":{name:"(anonymous_40)",decl:{start:{line:255,column:2},end:{line:255,column:3}},loc:{start:{line:255,column:44},end:{line:261,column:3}},line:255},"41":{name:"(anonymous_41)",decl:{start:{line:256,column:41},end:{line:256,column:42}},loc:{start:{line:256,column:61},end:{line:260,column:6}},line:256},"42":{name:"(anonymous_42)",decl:{start:{line:260,column:14},end:{line:260,column:15}},loc:{start:{line:260,column:21},end:{line:260,column:42}},line:260},"43":{name:"(anonymous_43)",decl:{start:{line:263,column:2},end:{line:263,column:3}},loc:{start:{line:263,column:88},end:{line:317,column:3}},line:263},"44":{name:"(anonymous_44)",decl:{start:{line:278,column:42},end:{line:278,column:43}},loc:{start:{line:278,column:50},end:{line:305,column:5}},line:278},"45":{name:"(anonymous_45)",decl:{start:{line:294,column:35},end:{line:294,column:36}},loc:{start:{line:294,column:42},end:{line:298,column:9}},line:294},"46":{name:"(anonymous_46)",decl:{start:{line:312,column:44},end:{line:312,column:45}},loc:{start:{line:312,column:50},end:{line:312,column:63}},line:312},"47":{name:"(anonymous_47)",decl:{start:{line:312,column:70},end:{line:312,column:71}},loc:{start:{line:312,column:76},end:{line:312,column:100}},line:312},"48":{name:"(anonymous_48)",decl:{start:{line:312,column:107},end:{line:312,column:108}},loc:{start:{line:312,column:127},end:{line:316,column:6}},line:312},"49":{name:"(anonymous_49)",decl:{start:{line:316,column:14},end:{line:316,column:15}},loc:{start:{line:316,column:21},end:{line:316,column:42}},line:316},"50":{name:"(anonymous_50)",decl:{start:{line:319,column:2},end:{line:319,column:3}},loc:{start:{line:319,column:33},end:{line:343,column:3}},line:319},"51":{name:"(anonymous_51)",decl:{start:{line:320,column:43},end:{line:320,column:44}},loc:{start:{line:320,column:54},end:{line:339,column:5}},line:320},"52":{name:"(anonymous_52)",decl:{start:{line:321,column:31},end:{line:321,column:32}},loc:{start:{line:321,column:47},end:{line:333,column:7}},line:321},"53":{name:"(anonymous_53)",decl:{start:{line:334,column:43},end:{line:334,column:44}},loc:{start:{line:334,column:63},end:{line:338,column:8}},line:334},"54":{name:"(anonymous_54)",decl:{start:{line:339,column:13},end:{line:339,column:14}},loc:{start:{line:339,column:20},end:{line:339,column:41}},line:339},"55":{name:"(anonymous_55)",decl:{start:{line:339,column:49},end:{line:339,column:50}},loc:{start:{line:339,column:55},end:{line:342,column:5}},line:339},"56":{name:"(anonymous_56)",decl:{start:{line:345,column:2},end:{line:345,column:3}},loc:{start:{line:345,column:33},end:{line:350,column:3}},line:345},"57":{name:"(anonymous_57)",decl:{start:{line:349,column:94},end:{line:349,column:95}},loc:{start:{line:349,column:100},end:{line:349,column:124}},line:349},"58":{name:"(anonymous_58)",decl:{start:{line:349,column:131},end:{line:349,column:132}},loc:{start:{line:349,column:151},end:{line:349,column:193}},line:349},"59":{name:"(anonymous_59)",decl:{start:{line:349,column:201},end:{line:349,column:202}},loc:{start:{line:349,column:208},end:{line:349,column:229}},line:349},"60":{name:"(anonymous_60)",decl:{start:{line:352,column:2},end:{line:352,column:3}},loc:{start:{line:352,column:55},end:{line:355,column:3}},line:352},"61":{name:"(anonymous_61)",decl:{start:{line:357,column:2},end:{line:357,column:3}},loc:{start:{line:357,column:50},end:{line:359,column:3}},line:357},"62":{name:"(anonymous_62)",decl:{start:{line:358,column:41},end:{line:358,column:42}},loc:{start:{line:358,column:61},end:{line:358,column:125}},line:358},"63":{name:"(anonymous_63)",decl:{start:{line:358,column:132},end:{line:358,column:133}},loc:{start:{line:358,column:138},end:{line:358,column:192}},line:358},"64":{name:"(anonymous_64)",decl:{start:{line:358,column:200},end:{line:358,column:201}},loc:{start:{line:358,column:207},end:{line:358,column:228}},line:358},"65":{name:"(anonymous_65)",decl:{start:{line:363,column:2},end:{line:363,column:3}},loc:{start:{line:363,column:25},end:{line:373,column:3}},line:363},"66":{name:"(anonymous_66)",decl:{start:{line:364,column:52},end:{line:364,column:53}},loc:{start:{line:364,column:66},end:{line:364,column:83}},line:364},"67":{name:"(anonymous_67)",decl:{start:{line:364,column:91},end:{line:364,column:92}},loc:{start:{line:364,column:100},end:{line:371,column:5}},line:364},"68":{name:"(anonymous_68)",decl:{start:{line:372,column:10},end:{line:372,column:11}},loc:{start:{line:372,column:16},end:{line:372,column:40}},line:372},"69":{name:"(anonymous_69)",decl:{start:{line:372,column:47},end:{line:372,column:48}},loc:{start:{line:372,column:67},end:{line:372,column:114}},line:372},"70":{name:"(anonymous_70)",decl:{start:{line:372,column:122},end:{line:372,column:123}},loc:{start:{line:372,column:129},end:{line:372,column:150}},line:372},"71":{name:"(anonymous_71)",decl:{start:{line:375,column:2},end:{line:375,column:3}},loc:{start:{line:375,column:25},end:{line:377,column:3}},line:375},"72":{name:"(anonymous_72)",decl:{start:{line:376,column:51},end:{line:376,column:52}},loc:{start:{line:376,column:66},end:{line:376,column:162}},line:376},"73":{name:"(anonymous_73)",decl:{start:{line:376,column:94},end:{line:376,column:95}},loc:{start:{line:376,column:108},end:{line:376,column:160}},line:376},"74":{name:"(anonymous_74)",decl:{start:{line:396,column:2},end:{line:396,column:3}},loc:{start:{line:396,column:46},end:{line:428,column:3}},line:396},"75":{name:"(anonymous_75)",decl:{start:{line:397,column:44},end:{line:397,column:45}},loc:{start:{line:397,column:57},end:{line:403,column:5}},line:397},"76":{name:"(anonymous_76)",decl:{start:{line:407,column:29},end:{line:407,column:30}},loc:{start:{line:407,column:37},end:{line:409,column:5}},line:407},"77":{name:"(anonymous_77)",decl:{start:{line:413,column:29},end:{line:413,column:30}},loc:{start:{line:413,column:37},end:{line:419,column:5}},line:413},"78":{name:"(anonymous_78)",decl:{start:{line:423,column:23},end:{line:423,column:24}},loc:{start:{line:423,column:31},end:{line:426,column:5}},line:423},"79":{name:"(anonymous_79)",decl:{start:{line:427,column:52},end:{line:427,column:53}},loc:{start:{line:427,column:66},end:{line:427,column:123}},line:427},"80":{name:"(anonymous_80)",decl:{start:{line:427,column:130},end:{line:427,column:131}},loc:{start:{line:427,column:136},end:{line:427,column:160}},line:427},"81":{name:"(anonymous_81)",decl:{start:{line:427,column:167},end:{line:427,column:168}},loc:{start:{line:427,column:187},end:{line:427,column:241}},line:427},"82":{name:"(anonymous_82)",decl:{start:{line:427,column:249},end:{line:427,column:250}},loc:{start:{line:427,column:256},end:{line:427,column:277}},line:427},"83":{name:"(anonymous_83)",decl:{start:{line:433,column:2},end:{line:433,column:3}},loc:{start:{line:433,column:18},end:{line:435,column:3}},line:433},"84":{name:"(anonymous_84)",decl:{start:{line:434,column:41},end:{line:434,column:42}},loc:{start:{line:434,column:62},end:{line:434,column:109}},line:434},"85":{name:"(anonymous_85)",decl:{start:{line:434,column:117},end:{line:434,column:118}},loc:{start:{line:434,column:124},end:{line:434,column:145}},line:434},"86":{name:"(anonymous_86)",decl:{start:{line:440,column:2},end:{line:440,column:3}},loc:{start:{line:440,column:22},end:{line:442,column:3}},line:440},"87":{name:"(anonymous_87)",decl:{start:{line:441,column:41},end:{line:441,column:42}},loc:{start:{line:441,column:62},end:{line:441,column:117}},line:441},"88":{name:"(anonymous_88)",decl:{start:{line:441,column:125},end:{line:441,column:126}},loc:{start:{line:441,column:132},end:{line:441,column:153}},line:441},"89":{name:"(anonymous_89)",decl:{start:{line:447,column:2},end:{line:447,column:3}},loc:{start:{line:447,column:64},end:{line:471,column:3}},line:447},"90":{name:"(anonymous_90)",decl:{start:{line:450,column:52},end:{line:450,column:53}},loc:{start:{line:450,column:66},end:{line:450,column:121}},line:450},"91":{name:"(anonymous_91)",decl:{start:{line:450,column:129},end:{line:450,column:130}},loc:{start:{line:450,column:138},end:{line:470,column:5}},line:450},"92":{name:"(anonymous_92)",decl:{start:{line:470,column:13},end:{line:470,column:14}},loc:{start:{line:470,column:20},end:{line:470,column:41}},line:470},"93":{name:"(anonymous_93)",decl:{start:{line:476,column:2},end:{line:476,column:3}},loc:{start:{line:476,column:71},end:{line:492,column:3}},line:476},"94":{name:"(anonymous_94)",decl:{start:{line:478,column:52},end:{line:478,column:53}},loc:{start:{line:478,column:66},end:{line:481,column:5}},line:478},"95":{name:"(anonymous_95)",decl:{start:{line:481,column:13},end:{line:481,column:14}},loc:{start:{line:481,column:20},end:{line:481,column:41}},line:481},"96":{name:"(anonymous_96)",decl:{start:{line:481,column:48},end:{line:481,column:49}},loc:{start:{line:483,column:10},end:{line:489,column:5}},line:483},"97":{name:"(anonymous_97)",decl:{start:{line:489,column:7},end:{line:489,column:8}},loc:{start:{line:489,column:13},end:{line:491,column:5}},line:489},"98":{name:"(anonymous_98)",decl:{start:{line:495,column:2},end:{line:495,column:3}},loc:{start:{line:495,column:79},end:{line:500,column:3}},line:495},"99":{name:"(anonymous_99)",decl:{start:{line:499,column:52},end:{line:499,column:53}},loc:{start:{line:499,column:66},end:{line:499,column:134}},line:499},"100":{name:"(anonymous_100)",decl:{start:{line:499,column:142},end:{line:499,column:143}},loc:{start:{line:499,column:149},end:{line:499,column:170}},line:499},"101":{name:"(anonymous_101)",decl:{start:{line:504,column:2},end:{line:504,column:3}},loc:{start:{line:504,column:75},end:{line:518,column:3}},line:504},"102":{name:"(anonymous_102)",decl:{start:{line:508,column:52},end:{line:508,column:53}},loc:{start:{line:508,column:66},end:{line:511,column:6}},line:508},"103":{name:"(anonymous_103)",decl:{start:{line:511,column:13},end:{line:511,column:14}},loc:{start:{line:511,column:23},end:{line:511,column:101}},line:511},"104":{name:"(anonymous_104)",decl:{start:{line:511,column:109},end:{line:511,column:110}},loc:{start:{line:511,column:118},end:{line:517,column:5}},line:511},"105":{name:"(anonymous_105)",decl:{start:{line:517,column:13},end:{line:517,column:14}},loc:{start:{line:517,column:20},end:{line:517,column:41}},line:517},"106":{name:"(anonymous_106)",decl:{start:{line:521,column:2},end:{line:521,column:3}},loc:{start:{line:521,column:74},end:{line:526,column:3}},line:521},"107":{name:"(anonymous_107)",decl:{start:{line:525,column:52},end:{line:525,column:53}},loc:{start:{line:525,column:66},end:{line:525,column:133}},line:525},"108":{name:"(anonymous_108)",decl:{start:{line:525,column:141},end:{line:525,column:142}},loc:{start:{line:525,column:148},end:{line:525,column:169}},line:525},"109":{name:"(anonymous_109)",decl:{start:{line:529,column:2},end:{line:529,column:3}},loc:{start:{line:538,column:5},end:{line:581,column:3}},line:538},"110":{name:"(anonymous_110)",decl:{start:{line:543,column:52},end:{line:543,column:53}},loc:{start:{line:543,column:74},end:{line:543,column:137}},line:543},"111":{name:"(anonymous_111)",decl:{start:{line:545,column:51},end:{line:545,column:52}},loc:{start:{line:545,column:66},end:{line:554,column:5}},line:545},"112":{name:"(anonymous_112)",decl:{start:{line:564,column:73},end:{line:564,column:74}},loc:{start:{line:564,column:79},end:{line:564,column:114}},line:564},"113":{name:"(anonymous_113)",decl:{start:{line:564,column:121},end:{line:564,column:122}},loc:{start:{line:564,column:135},end:{line:574,column:6}},line:564},"114":{name:"(anonymous_114)",decl:{start:{line:574,column:13},end:{line:574,column:14}},loc:{start:{line:574,column:24},end:{line:580,column:5}},line:574},"115":{name:"(anonymous_115)",decl:{start:{line:579,column:25},end:{line:579,column:26}},loc:{start:{line:579,column:35},end:{line:579,column:107}},line:579},"116":{name:"(anonymous_116)",decl:{start:{line:580,column:13},end:{line:580,column:14}},loc:{start:{line:580,column:20},end:{line:580,column:41}},line:580},"117":{name:"(anonymous_117)",decl:{start:{line:583,column:2},end:{line:583,column:3}},loc:{start:{line:583,column:95},end:{line:607,column:3}},line:583},"118":{name:"(anonymous_118)",decl:{start:{line:586,column:43},end:{line:586,column:44}},loc:{start:{line:586,column:56},end:{line:586,column:119}},line:586},"119":{name:"(anonymous_119)",decl:{start:{line:587,column:28},end:{line:587,column:29}},loc:{start:{line:587,column:41},end:{line:589,column:5}},line:587},"120":{name:"(anonymous_120)",decl:{start:{line:606,column:52},end:{line:606,column:53}},loc:{start:{line:606,column:66},end:{line:606,column:219}},line:606},"121":{name:"(anonymous_121)",decl:{start:{line:606,column:78},end:{line:606,column:79}},loc:{start:{line:606,column:99},end:{line:606,column:218}},line:606},"122":{name:"(anonymous_122)",decl:{start:{line:606,column:175},end:{line:606,column:176}},loc:{start:{line:606,column:184},end:{line:606,column:217}},line:606},"123":{name:"(anonymous_123)",decl:{start:{line:606,column:227},end:{line:606,column:228}},loc:{start:{line:606,column:234},end:{line:606,column:255}},line:606},"124":{name:"(anonymous_124)",decl:{start:{line:614,column:2},end:{line:614,column:3}},loc:{start:{line:614,column:50},end:{line:628,column:3}},line:614},"125":{name:"(anonymous_125)",decl:{start:{line:617,column:43},end:{line:617,column:44}},loc:{start:{line:617,column:56},end:{line:617,column:119}},line:617},"126":{name:"(anonymous_126)",decl:{start:{line:618,column:28},end:{line:618,column:29}},loc:{start:{line:618,column:41},end:{line:620,column:5}},line:618},"127":{name:"(anonymous_127)",decl:{start:{line:621,column:52},end:{line:621,column:53}},loc:{start:{line:621,column:66},end:{line:621,column:135}},line:621},"128":{name:"(anonymous_128)",decl:{start:{line:621,column:143},end:{line:621,column:144}},loc:{start:{line:621,column:152},end:{line:627,column:5}},line:621},"129":{name:"(anonymous_129)",decl:{start:{line:627,column:13},end:{line:627,column:14}},loc:{start:{line:627,column:20},end:{line:627,column:41}},line:627},"130":{name:"(anonymous_130)",decl:{start:{line:631,column:2},end:{line:631,column:3}},loc:{start:{line:631,column:29},end:{line:635,column:3}},line:631},"131":{name:"(anonymous_131)",decl:{start:{line:632,column:52},end:{line:632,column:53}},loc:{start:{line:632,column:66},end:{line:634,column:6}},line:632},"132":{name:"(anonymous_132)",decl:{start:{line:634,column:14},end:{line:634,column:15}},loc:{start:{line:634,column:21},end:{line:634,column:42}},line:634},"133":{name:"(anonymous_133)",decl:{start:{line:638,column:2},end:{line:638,column:3}},loc:{start:{line:638,column:56},end:{line:646,column:3}},line:638},"134":{name:"(anonymous_134)",decl:{start:{line:641,column:52},end:{line:641,column:53}},loc:{start:{line:641,column:66},end:{line:645,column:6}},line:641},"135":{name:"(anonymous_135)",decl:{start:{line:645,column:14},end:{line:645,column:15}},loc:{start:{line:645,column:21},end:{line:645,column:42}},line:645},"136":{name:"(anonymous_136)",decl:{start:{line:648,column:2},end:{line:648,column:3}},loc:{start:{line:648,column:48},end:{line:662,column:3}},line:648},"137":{name:"(anonymous_137)",decl:{start:{line:652,column:52},end:{line:652,column:53}},loc:{start:{line:652,column:66},end:{line:652,column:164}},line:652},"138":{name:"(anonymous_138)",decl:{start:{line:652,column:171},end:{line:652,column:172}},loc:{start:{line:652,column:182},end:{line:661,column:5}},line:652},"139":{name:"(anonymous_139)",decl:{start:{line:653,column:31},end:{line:653,column:32}},loc:{start:{line:653,column:38},end:{line:653,column:49}},line:653},"140":{name:"(anonymous_140)",decl:{start:{line:654,column:25},end:{line:654,column:26}},loc:{start:{line:654,column:35},end:{line:660,column:7}},line:654},"141":{name:"(anonymous_141)",decl:{start:{line:661,column:13},end:{line:661,column:14}},loc:{start:{line:661,column:20},end:{line:661,column:41}},line:661},"142":{name:"(anonymous_142)",decl:{start:{line:664,column:2},end:{line:664,column:3}},loc:{start:{line:664,column:72},end:{line:713,column:3}},line:664},"143":{name:"(anonymous_143)",decl:{start:{line:667,column:28},end:{line:667,column:29}},loc:{start:{line:667,column:37},end:{line:689,column:5}},line:667},"144":{name:"(anonymous_144)",decl:{start:{line:691,column:52},end:{line:691,column:53}},loc:{start:{line:691,column:66},end:{line:696,column:6}},line:691},"145":{name:"(anonymous_145)",decl:{start:{line:696,column:13},end:{line:696,column:14}},loc:{start:{line:696,column:24},end:{line:712,column:5}},line:696},"146":{name:"(anonymous_146)",decl:{start:{line:697,column:22},end:{line:697,column:23}},loc:{start:{line:697,column:32},end:{line:710,column:7}},line:697},"147":{name:"(anonymous_147)",decl:{start:{line:712,column:12},end:{line:712,column:13}},loc:{start:{line:712,column:23},end:{line:712,column:118}},line:712},"148":{name:"(anonymous_148)",decl:{start:{line:712,column:35},end:{line:712,column:36}},loc:{start:{line:712,column:45},end:{line:712,column:117}},line:712},"149":{name:"(anonymous_149)",decl:{start:{line:712,column:126},end:{line:712,column:127}},loc:{start:{line:712,column:133},end:{line:712,column:154}},line:712},"150":{name:"(anonymous_150)",decl:{start:{line:734,column:2},end:{line:734,column:3}},loc:{start:{line:734,column:40},end:{line:772,column:3}},line:734},"151":{name:"(anonymous_151)",decl:{start:{line:738,column:26},end:{line:738,column:27}},loc:{start:{line:738,column:35},end:{line:738,column:74}},line:738},"152":{name:"(anonymous_152)",decl:{start:{line:778,column:2},end:{line:778,column:3}},loc:{start:{line:778,column:47},end:{line:801,column:3}},line:778},"153":{name:"(anonymous_153)",decl:{start:{line:808,column:2},end:{line:808,column:3}},loc:{start:{line:808,column:45},end:{line:832,column:3}},line:808},"154":{name:"(anonymous_154)",decl:{start:{line:810,column:26},end:{line:810,column:27}},loc:{start:{line:810,column:35},end:{line:810,column:79}},line:810},"155":{name:"(anonymous_155)",decl:{start:{line:838,column:2},end:{line:838,column:3}},loc:{start:{line:838,column:24},end:{line:850,column:3}},line:838},"156":{name:"(anonymous_156)",decl:{start:{line:852,column:2},end:{line:852,column:3}},loc:{start:{line:852,column:39},end:{line:888,column:3}},line:852},"157":{name:"(anonymous_157)",decl:{start:{line:890,column:2},end:{line:890,column:3}},loc:{start:{line:890,column:26},end:{line:892,column:3}},line:890},"158":{name:"(anonymous_158)",decl:{start:{line:894,column:2},end:{line:894,column:3}},loc:{start:{line:894,column:32},end:{line:896,column:3}},line:894},"159":{name:"(anonymous_159)",decl:{start:{line:895,column:52},end:{line:895,column:53}},loc:{start:{line:895,column:66},end:{line:895,column:112}},line:895},"160":{name:"(anonymous_160)",decl:{start:{line:895,column:120},end:{line:895,column:121}},loc:{start:{line:895,column:127},end:{line:895,column:148}},line:895},"161":{name:"(anonymous_161)",decl:{start:{line:898,column:2},end:{line:898,column:3}},loc:{start:{line:898,column:36},end:{line:900,column:3}},line:898},"162":{name:"(anonymous_162)",decl:{start:{line:899,column:52},end:{line:899,column:53}},loc:{start:{line:899,column:66},end:{line:899,column:116}},line:899},"163":{name:"(anonymous_163)",decl:{start:{line:899,column:124},end:{line:899,column:125}},loc:{start:{line:899,column:131},end:{line:899,column:152}},line:899},"164":{name:"(anonymous_164)",decl:{start:{line:902,column:2},end:{line:902,column:3}},loc:{start:{line:902,column:52},end:{line:911,column:3}},line:902},"165":{name:"(anonymous_165)",decl:{start:{line:913,column:2},end:{line:913,column:3}},loc:{start:{line:913,column:54},end:{line:946,column:3}},line:913},"166":{name:"(anonymous_166)",decl:{start:{line:935,column:105},end:{line:935,column:106}},loc:{start:{line:935,column:114},end:{line:942,column:7}},line:935},"167":{name:"(anonymous_167)",decl:{start:{line:948,column:2},end:{line:948,column:3}},loc:{start:{line:948,column:24},end:{line:950,column:3}},line:948},"168":{name:"(anonymous_168)",decl:{start:{line:949,column:52},end:{line:949,column:53}},loc:{start:{line:949,column:66},end:{line:949,column:103}},line:949},"169":{name:"(anonymous_169)",decl:{start:{line:949,column:111},end:{line:949,column:112}},loc:{start:{line:949,column:118},end:{line:949,column:139}},line:949},"170":{name:"(anonymous_170)",decl:{start:{line:952,column:2},end:{line:952,column:3}},loc:{start:{line:952,column:30},end:{line:954,column:3}},line:952},"171":{name:"(anonymous_171)",decl:{start:{line:953,column:52},end:{line:953,column:53}},loc:{start:{line:953,column:66},end:{line:953,column:110}},line:953},"172":{name:"(anonymous_172)",decl:{start:{line:953,column:118},end:{line:953,column:119}},loc:{start:{line:953,column:125},end:{line:953,column:146}},line:953},"173":{name:"(anonymous_173)",decl:{start:{line:956,column:2},end:{line:956,column:3}},loc:{start:{line:956,column:28},end:{line:958,column:3}},line:956},"174":{name:"(anonymous_174)",decl:{start:{line:957,column:52},end:{line:957,column:53}},loc:{start:{line:957,column:66},end:{line:957,column:107}},line:957},"175":{name:"(anonymous_175)",decl:{start:{line:957,column:115},end:{line:957,column:116}},loc:{start:{line:957,column:122},end:{line:957,column:143}},line:957},"176":{name:"(anonymous_176)",decl:{start:{line:960,column:2},end:{line:960,column:3}},loc:{start:{line:960,column:28},end:{line:967,column:3}},line:960},"177":{name:"(anonymous_177)",decl:{start:{line:961,column:37},end:{line:961,column:38}},loc:{start:{line:961,column:48},end:{line:966,column:5}},line:961},"178":{name:"(anonymous_178)",decl:{start:{line:962,column:35},end:{line:962,column:36}},loc:{start:{line:962,column:45},end:{line:964,column:7}},line:962},"179":{name:"(anonymous_179)",decl:{start:{line:966,column:13},end:{line:966,column:14}},loc:{start:{line:966,column:20},end:{line:966,column:41}},line:966},"180":{name:"(anonymous_180)",decl:{start:{line:969,column:2},end:{line:969,column:3}},loc:{start:{line:969,column:31},end:{line:973,column:3}},line:969},"181":{name:"(anonymous_181)",decl:{start:{line:975,column:2},end:{line:975,column:3}},loc:{start:{line:975,column:51},end:{line:989,column:3}},line:975},"182":{name:"(anonymous_182)",decl:{start:{line:976,column:19},end:{line:976,column:20}},loc:{start:{line:976,column:30},end:{line:986,column:5}},line:976},"183":{name:"(anonymous_183)",decl:{start:{line:977,column:60},end:{line:977,column:61}},loc:{start:{line:977,column:69},end:{line:983,column:7}},line:977},"184":{name:"(anonymous_184)",decl:{start:{line:983,column:14},end:{line:983,column:15}},loc:{start:{line:983,column:20},end:{line:985,column:7}},line:983},"185":{name:"(anonymous_185)",decl:{start:{line:991,column:2},end:{line:991,column:3}},loc:{start:{line:991,column:50},end:{line:995,column:3}},line:991},"186":{name:"(anonymous_186)",decl:{start:{line:992,column:56},end:{line:992,column:57}},loc:{start:{line:992,column:62},end:{line:994,column:5}},line:992}},branchMap:{"0":{loc:{start:{line:26,column:46},end:{line:26,column:92}},type:"cond-expr",locations:[{start:{line:26,column:70},end:{line:26,column:73}},{start:{line:26,column:76},end:{line:26,column:92}}],line:26},"1":{loc:{start:{line:26,column:46},end:{line:26,column:67}},type:"binary-expr",locations:[{start:{line:26,column:46},end:{line:26,column:49}},{start:{line:26,column:53},end:{line:26,column:67}}],line:26},"2":{loc:{start:{line:28,column:75},end:{line:28,column:330}},type:"if",locations:[{start:{line:28,column:75},end:{line:28,column:330}},{start:{line:28,column:75},end:{line:28,column:330}}],line:28},"3":{loc:{start:{line:28,column:163},end:{line:28,column:296}},type:"if",locations:[{start:{line:28,column:163},end:{line:28,column:296}},{start:{line:28,column:163},end:{line:28,column:296}}],line:28},"4":{loc:{start:{line:30,column:91},end:{line:30,column:131}},type:"cond-expr",locations:[{start:{line:30,column:114},end:{line:30,column:126}},{start:{line:30,column:129},end:{line:30,column:131}}],line:30},"5":{loc:{start:{line:30,column:133},end:{line:30,column:515}},type:"if",locations:[{start:{line:30,column:133},end:{line:30,column:515}},{start:{line:30,column:133},end:{line:30,column:515}}],line:30},"6":{loc:{start:{line:30,column:255},end:{line:30,column:515}},type:"if",locations:[{start:{line:30,column:255},end:{line:30,column:515}},{start:{line:30,column:255},end:{line:30,column:515}}],line:30},"7":{loc:{start:{line:32,column:44},end:{line:32,column:195}},type:"if",locations:[{start:{line:32,column:44},end:{line:32,column:195}},{start:{line:32,column:44},end:{line:32,column:195}}],line:32},"8":{loc:{start:{line:34,column:54},end:{line:34,column:84}},type:"if",locations:[{start:{line:34,column:54},end:{line:34,column:84}},{start:{line:34,column:54},end:{line:34,column:84}}],line:34},"9":{loc:{start:{line:34,column:159},end:{line:34,column:475}},type:"if",locations:[{start:{line:34,column:159},end:{line:34,column:475}},{start:{line:34,column:159},end:{line:34,column:475}}],line:34},"10":{loc:{start:{line:34,column:331},end:{line:34,column:372}},type:"if",locations:[{start:{line:34,column:331},end:{line:34,column:372}},{start:{line:34,column:331},end:{line:34,column:372}}],line:34},"11":{loc:{start:{line:34,column:373},end:{line:34,column:444}},type:"if",locations:[{start:{line:34,column:373},end:{line:34,column:444}},{start:{line:34,column:373},end:{line:34,column:444}}],line:34},"12":{loc:{start:{line:36,column:59},end:{line:36,column:89}},type:"if",locations:[{start:{line:36,column:59},end:{line:36,column:89}},{start:{line:36,column:59},end:{line:36,column:89}}],line:36},"13":{loc:{start:{line:36,column:220},end:{line:36,column:261}},type:"if",locations:[{start:{line:36,column:220},end:{line:36,column:261}},{start:{line:36,column:220},end:{line:36,column:261}}],line:36},"14":{loc:{start:{line:38,column:33},end:{line:38,column:274}},type:"binary-expr",locations:[{start:{line:38,column:33},end:{line:38,column:46}},{start:{line:38,column:50},end:{line:38,column:274}}],line:38},"15":{loc:{start:{line:38,column:168},end:{line:38,column:253}},type:"if",locations:[{start:{line:38,column:168},end:{line:38,column:253}},{start:{line:38,column:168},end:{line:38,column:253}}],line:38},"16":{loc:{start:{line:50,column:6},end:{line:52,column:7}},type:"if",locations:[{start:{line:50,column:6},end:{line:52,column:7}},{start:{line:50,column:6},end:{line:52,column:7}}],line:50},"17":{loc:{start:{line:67,column:2},end:{line:73,column:3}},type:"if",locations:[{start:{line:67,column:2},end:{line:73,column:3}},{start:{line:67,column:2},end:{line:73,column:3}}],line:67},"18":{loc:{start:{line:102,column:4},end:{line:106,column:5}},type:"if",locations:[{start:{line:102,column:4},end:{line:106,column:5}},{start:{line:102,column:4},end:{line:106,column:5}}],line:102},"19":{loc:{start:{line:102,column:8},end:{line:102,column:60}},type:"binary-expr",locations:[{start:{line:102,column:8},end:{line:102,column:20}},{start:{line:102,column:24},end:{line:102,column:60}}],line:102},"20":{loc:{start:{line:103,column:30},end:{line:103,column:57}},type:"binary-expr",locations:[{start:{line:103,column:30},end:{line:103,column:51}},{start:{line:103,column:55},end:{line:103,column:57}}],line:103},"21":{loc:{start:{line:104,column:45},end:{line:104,column:87}},type:"binary-expr",locations:[{start:{line:104,column:45},end:{line:104,column:81}},{start:{line:104,column:85},end:{line:104,column:87}}],line:104},"22":{loc:{start:{line:109,column:2},end:{line:117,column:3}},type:"if",locations:[{start:{line:109,column:2},end:{line:117,column:3}},{start:{line:109,column:2},end:{line:117,column:3}}],line:109},"23":{loc:{start:{line:110,column:28},end:{line:110,column:55}},type:"binary-expr",locations:[{start:{line:110,column:28},end:{line:110,column:49}},{start:{line:110,column:53},end:{line:110,column:55}}],line:110},"24":{loc:{start:{line:112,column:4},end:{line:116,column:5}},type:"if",locations:[{start:{line:112,column:4},end:{line:116,column:5}},{start:{line:112,column:4},end:{line:116,column:5}}],line:112},"25":{loc:{start:{line:119,column:2},end:{line:122,column:3}},type:"if",locations:[{start:{line:119,column:2},end:{line:122,column:3}},{start:{line:119,column:2},end:{line:122,column:3}}],line:119},"26":{loc:{start:{line:119,column:6},end:{line:119,column:79}},type:"binary-expr",locations:[{start:{line:119,column:6},end:{line:119,column:13}},{start:{line:119,column:17},end:{line:119,column:44}},{start:{line:119,column:48},end:{line:119,column:79}}],line:119},"27":{loc:{start:{line:120,column:28},end:{line:120,column:55}},type:"binary-expr",locations:[{start:{line:120,column:28},end:{line:120,column:49}},{start:{line:120,column:53},end:{line:120,column:55}}],line:120},"28":{loc:{start:{line:124,column:2},end:{line:127,column:3}},type:"if",locations:[{start:{line:124,column:2},end:{line:127,column:3}},{start:{line:124,column:2},end:{line:127,column:3}}],line:124},"29":{loc:{start:{line:133,column:2},end:{line:140,column:3}},type:"if",locations:[{start:{line:133,column:2},end:{line:140,column:3}},{start:{line:133,column:2},end:{line:140,column:3}}],line:133},"30":{loc:{start:{line:137,column:4},end:{line:139,column:5}},type:"if",locations:[{start:{line:137,column:4},end:{line:139,column:5}},{start:{line:137,column:4},end:{line:139,column:5}}],line:137},"31":{loc:{start:{line:147,column:4},end:{line:147,column:43}},type:"default-arg",locations:[{start:{line:147,column:10},end:{line:147,column:43}}],line:147},"32":{loc:{start:{line:148,column:4},end:{line:148,column:25}},type:"default-arg",locations:[{start:{line:148,column:23},end:{line:148,column:25}}],line:148},"33":{loc:{start:{line:149,column:4},end:{line:149,column:21}},type:"default-arg",locations:[{start:{line:149,column:19},end:{line:149,column:21}}],line:149},"34":{loc:{start:{line:172,column:4},end:{line:174,column:5}},type:"if",locations:[{start:{line:172,column:4},end:{line:174,column:5}},{start:{line:172,column:4},end:{line:174,column:5}}],line:172},"35":{loc:{start:{line:186,column:6},end:{line:189,column:7}},type:"if",locations:[{start:{line:186,column:6},end:{line:189,column:7}},{start:{line:186,column:6},end:{line:189,column:7}}],line:186},"36":{loc:{start:{line:207,column:4},end:{line:216,column:5}},type:"if",locations:[{start:{line:207,column:4},end:{line:216,column:5}},{start:{line:207,column:4},end:{line:216,column:5}}],line:207},"37":{loc:{start:{line:207,column:8},end:{line:207,column:34}},type:"binary-expr",locations:[{start:{line:207,column:8},end:{line:207,column:13}},{start:{line:207,column:17},end:{line:207,column:34}}],line:207},"38":{loc:{start:{line:222,column:4},end:{line:224,column:5}},type:"if",locations:[{start:{line:222,column:4},end:{line:224,column:5}},{start:{line:222,column:4},end:{line:224,column:5}}],line:222},"39":{loc:{start:{line:235,column:6},end:{line:239,column:7}},type:"if",locations:[{start:{line:235,column:6},end:{line:239,column:7}},{start:{line:235,column:6},end:{line:239,column:7}}],line:235},"40":{loc:{start:{line:235,column:10},end:{line:235,column:49}},type:"binary-expr",locations:[{start:{line:235,column:10},end:{line:235,column:23}},{start:{line:235,column:27},end:{line:235,column:49}}],line:235},"41":{loc:{start:{line:263,column:58},end:{line:263,column:78}},type:"default-arg",locations:[{start:{line:263,column:76},end:{line:263,column:78}}],line:263},"42":{loc:{start:{line:264,column:4},end:{line:266,column:5}},type:"if",locations:[{start:{line:264,column:4},end:{line:266,column:5}},{start:{line:264,column:4},end:{line:266,column:5}}],line:264},"43":{loc:{start:{line:268,column:4},end:{line:274,column:5}},type:"if",locations:[{start:{line:268,column:4},end:{line:274,column:5}},{start:{line:268,column:4},end:{line:274,column:5}}],line:268},"44":{loc:{start:{line:281,column:6},end:{line:283,column:7}},type:"if",locations:[{start:{line:281,column:6},end:{line:283,column:7}},{start:{line:281,column:6},end:{line:283,column:7}}],line:281},"45":{loc:{start:{line:281,column:10},end:{line:281,column:58}},type:"binary-expr",locations:[{start:{line:281,column:10},end:{line:281,column:31}},{start:{line:281,column:35},end:{line:281,column:58}}],line:281},"46":{loc:{start:{line:285,column:6},end:{line:287,column:7}},type:"if",locations:[{start:{line:285,column:6},end:{line:287,column:7}},{start:{line:285,column:6},end:{line:287,column:7}}],line:285},"47":{loc:{start:{line:285,column:10},end:{line:285,column:59}},type:"binary-expr",locations:[{start:{line:285,column:10},end:{line:285,column:32}},{start:{line:285,column:36},end:{line:285,column:59}}],line:285},"48":{loc:{start:{line:289,column:6},end:{line:304,column:7}},type:"if",locations:[{start:{line:289,column:6},end:{line:304,column:7}},{start:{line:289,column:6},end:{line:304,column:7}}],line:289},"49":{loc:{start:{line:295,column:10},end:{line:297,column:11}},type:"if",locations:[{start:{line:295,column:10},end:{line:297,column:11}},{start:{line:295,column:10},end:{line:297,column:11}}],line:295},"50":{loc:{start:{line:295,column:60},end:{line:295,column:115}},type:"cond-expr",locations:[{start:{line:295,column:87},end:{line:295,column:109}},{start:{line:295,column:112},end:{line:295,column:115}}],line:295},"51":{loc:{start:{line:308,column:4},end:{line:310,column:5}},type:"if",locations:[{start:{line:308,column:4},end:{line:310,column:5}},{start:{line:308,column:4},end:{line:310,column:5}}],line:308},"52":{loc:{start:{line:322,column:8},end:{line:329,column:9}},type:"if",locations:[{start:{line:322,column:8},end:{line:329,column:9}},{start:{line:322,column:8},end:{line:329,column:9}}],line:322},"53":{loc:{start:{line:366,column:6},end:{line:368,column:7}},type:"if",locations:[{start:{line:366,column:6},end:{line:368,column:7}},{start:{line:366,column:6},end:{line:368,column:7}}],line:366},"54":{loc:{start:{line:376,column:108},end:{line:376,column:160}},type:"cond-expr",locations:[{start:{line:376,column:115},end:{line:376,column:140}},{start:{line:376,column:143},end:{line:376,column:160}}],line:376},"55":{loc:{start:{line:398,column:6},end:{line:402,column:7}},type:"if",locations:[{start:{line:398,column:6},end:{line:402,column:7}},{start:{line:398,column:6},end:{line:402,column:7}}],line:398},"56":{loc:{start:{line:451,column:6},end:{line:467,column:7}},type:"if",locations:[{start:{line:451,column:6},end:{line:467,column:7}},{start:{line:451,column:6},end:{line:467,column:7}}],line:451},"57":{loc:{start:{line:456,column:8},end:{line:464,column:9}},type:"if",locations:[{start:{line:456,column:8},end:{line:464,column:9}},{start:{line:456,column:8},end:{line:464,column:9}}],line:456},"58":{loc:{start:{line:459,column:10},end:{line:463,column:11}},type:"if",locations:[{start:{line:459,column:10},end:{line:463,column:11}},{start:{line:459,column:10},end:{line:463,column:11}}],line:459},"59":{loc:{start:{line:459,column:14},end:{line:459,column:47}},type:"binary-expr",locations:[{start:{line:459,column:14},end:{line:459,column:21}},{start:{line:459,column:25},end:{line:459,column:47}}],line:459},"60":{loc:{start:{line:484,column:6},end:{line:486,column:7}},type:"if",locations:[{start:{line:484,column:6},end:{line:486,column:7}},{start:{line:484,column:6},end:{line:486,column:7}}],line:484},"61":{loc:{start:{line:510,column:15},end:{line:510,column:48}},type:"binary-expr",locations:[{start:{line:510,column:15},end:{line:510,column:35}},{start:{line:510,column:39},end:{line:510,column:48}}],line:510},"62":{loc:{start:{line:512,column:6},end:{line:514,column:7}},type:"if",locations:[{start:{line:512,column:6},end:{line:514,column:7}},{start:{line:512,column:6},end:{line:514,column:7}}],line:512},"63":{loc:{start:{line:546,column:6},end:{line:551,column:7}},type:"if",locations:[{start:{line:546,column:6},end:{line:551,column:7}},{start:{line:546,column:6},end:{line:551,column:7}}],line:546},"64":{loc:{start:{line:559,column:4},end:{line:561,column:5}},type:"if",locations:[{start:{line:559,column:4},end:{line:561,column:5}},{start:{line:559,column:4},end:{line:561,column:5}}],line:559},"65":{loc:{start:{line:559,column:8},end:{line:559,column:30}},type:"binary-expr",locations:[{start:{line:559,column:8},end:{line:559,column:12}},{start:{line:559,column:16},end:{line:559,column:30}}],line:559},"66":{loc:{start:{line:575,column:6},end:{line:577,column:7}},type:"if",locations:[{start:{line:575,column:6},end:{line:577,column:7}},{start:{line:575,column:6},end:{line:577,column:7}}],line:575},"67":{loc:{start:{line:583,column:56},end:{line:583,column:79}},type:"default-arg",locations:[{start:{line:583,column:74},end:{line:583,column:79}}],line:583},"68":{loc:{start:{line:583,column:81},end:{line:583,column:93}},type:"default-arg",locations:[{start:{line:583,column:91},end:{line:583,column:93}}],line:583},"69":{loc:{start:{line:588,column:40},end:{line:588,column:95}},type:"cond-expr",locations:[{start:{line:588,column:74},end:{line:588,column:91}},{start:{line:588,column:94},end:{line:588,column:95}}],line:588},"70":{loc:{start:{line:594,column:29},end:{line:596,column:10}},type:"cond-expr",locations:[{start:{line:594,column:41},end:{line:596,column:5}},{start:{line:596,column:8},end:{line:596,column:10}}],line:594},"71":{loc:{start:{line:597,column:23},end:{line:599,column:10}},type:"cond-expr",locations:[{start:{line:597,column:51},end:{line:599,column:5}},{start:{line:599,column:8},end:{line:599,column:10}}],line:597},"72":{loc:{start:{line:600,column:35},end:{line:602,column:10}},type:"cond-expr",locations:[{start:{line:600,column:53},end:{line:602,column:5}},{start:{line:602,column:8},end:{line:602,column:10}}],line:600},"73":{loc:{start:{line:606,column:184},end:{line:606,column:217}},type:"cond-expr",locations:[{start:{line:606,column:192},end:{line:606,column:205}},{start:{line:606,column:208},end:{line:606,column:217}}],line:606},"74":{loc:{start:{line:622,column:6},end:{line:624,column:7}},type:"if",locations:[{start:{line:622,column:6},end:{line:624,column:7}},{start:{line:622,column:6},end:{line:624,column:7}}],line:622},"75":{loc:{start:{line:650,column:27},end:{line:650,column:98}},type:"binary-expr",locations:[{start:{line:650,column:27},end:{line:650,column:51}},{start:{line:650,column:55},end:{line:650,column:98}}],line:650},"76":{loc:{start:{line:655,column:8},end:{line:657,column:9}},type:"if",locations:[{start:{line:655,column:8},end:{line:657,column:9}},{start:{line:655,column:8},end:{line:657,column:9}}],line:655},"77":{loc:{start:{line:668,column:6},end:{line:674,column:7}},type:"if",locations:[{start:{line:668,column:6},end:{line:674,column:7}},{start:{line:668,column:6},end:{line:674,column:7}}],line:668},"78":{loc:{start:{line:671,column:8},end:{line:673,column:9}},type:"if",locations:[{start:{line:671,column:8},end:{line:673,column:9}},{start:{line:671,column:8},end:{line:673,column:9}}],line:671},"79":{loc:{start:{line:671,column:12},end:{line:671,column:109}},type:"binary-expr",locations:[{start:{line:671,column:12},end:{line:671,column:28}},{start:{line:671,column:32},end:{line:671,column:68}},{start:{line:671,column:72},end:{line:671,column:109}}],line:671},"80":{loc:{start:{line:676,column:6},end:{line:678,column:7}},type:"if",locations:[{start:{line:676,column:6},end:{line:678,column:7}},{start:{line:676,column:6},end:{line:678,column:7}}],line:676},"81":{loc:{start:{line:680,column:6},end:{line:682,column:7}},type:"if",locations:[{start:{line:680,column:6},end:{line:682,column:7}},{start:{line:680,column:6},end:{line:682,column:7}}],line:680},"82":{loc:{start:{line:684,column:6},end:{line:686,column:7}},type:"if",locations:[{start:{line:684,column:6},end:{line:686,column:7}},{start:{line:684,column:6},end:{line:686,column:7}}],line:684},"83":{loc:{start:{line:684,column:10},end:{line:684,column:48}},type:"binary-expr",locations:[{start:{line:684,column:10},end:{line:684,column:24}},{start:{line:684,column:28},end:{line:684,column:48}}],line:684},"84":{loc:{start:{line:698,column:8},end:{line:709,column:9}},type:"if",locations:[{start:{line:698,column:8},end:{line:709,column:9}},{start:{line:698,column:8},end:{line:709,column:9}}],line:698},"85":{loc:{start:{line:699,column:10},end:{line:701,column:11}},type:"if",locations:[{start:{line:699,column:10},end:{line:701,column:11}},{start:{line:699,column:10},end:{line:701,column:11}}],line:699},"86":{loc:{start:{line:699,column:14},end:{line:699,column:42}},type:"binary-expr",locations:[{start:{line:699,column:14},end:{line:699,column:28}},{start:{line:699,column:32},end:{line:699,column:42}}],line:699},"87":{loc:{start:{line:703,column:10},end:{line:705,column:11}},type:"if",locations:[{start:{line:703,column:10},end:{line:705,column:11}},{start:{line:703,column:10},end:{line:705,column:11}}],line:703},"88":{loc:{start:{line:703,column:14},end:{line:703,column:150}},type:"binary-expr",locations:[{start:{line:703,column:14},end:{line:703,column:32}},{start:{line:703,column:36},end:{line:703,column:59}},{start:{line:703,column:63},end:{line:703,column:111}},{start:{line:703,column:115},end:{line:703,column:150}}],line:703},"89":{loc:{start:{line:735,column:4},end:{line:769,column:5}},type:"if",locations:[{start:{line:735,column:4},end:{line:769,column:5}},{start:{line:735,column:4},end:{line:769,column:5}}],line:735},"90":{loc:{start:{line:737,column:11},end:{line:769,column:5}},type:"if",locations:[{start:{line:737,column:11},end:{line:769,column:5}},{start:{line:737,column:11},end:{line:769,column:5}}],line:737},"91":{loc:{start:{line:739,column:11},end:{line:769,column:5}},type:"if",locations:[{start:{line:739,column:11},end:{line:769,column:5}},{start:{line:739,column:11},end:{line:769,column:5}}],line:739},"92":{loc:{start:{line:743,column:8},end:{line:754,column:9}},type:"if",locations:[{start:{line:743,column:8},end:{line:754,column:9}},{start:{line:743,column:8},end:{line:754,column:9}}],line:743},"93":{loc:{start:{line:743,column:12},end:{line:743,column:75}},type:"binary-expr",locations:[{start:{line:743,column:12},end:{line:743,column:32}},{start:{line:743,column:36},end:{line:743,column:75}}],line:743},"94":{loc:{start:{line:744,column:10},end:{line:749,column:11}},type:"if",locations:[{start:{line:744,column:10},end:{line:749,column:11}},{start:{line:744,column:10},end:{line:749,column:11}}],line:744},"95":{loc:{start:{line:750,column:15},end:{line:754,column:9}},type:"if",locations:[{start:{line:750,column:15},end:{line:754,column:9}},{start:{line:750,column:15},end:{line:754,column:9}}],line:750},"96":{loc:{start:{line:750,column:19},end:{line:750,column:79}},type:"binary-expr",locations:[{start:{line:750,column:19},end:{line:750,column:39}},{start:{line:750,column:43},end:{line:750,column:79}}],line:750},"97":{loc:{start:{line:756,column:8},end:{line:765,column:9}},type:"if",locations:[{start:{line:756,column:8},end:{line:765,column:9}},{start:{line:756,column:8},end:{line:765,column:9}}],line:756},"98":{loc:{start:{line:759,column:15},end:{line:765,column:9}},type:"if",locations:[{start:{line:759,column:15},end:{line:765,column:9}},{start:{line:759,column:15},end:{line:765,column:9}}],line:759},"99":{loc:{start:{line:762,column:15},end:{line:765,column:9}},type:"if",locations:[{start:{line:762,column:15},end:{line:765,column:9}},{start:{line:762,column:15},end:{line:765,column:9}}],line:762},"100":{loc:{start:{line:782,column:6},end:{line:786,column:7}},type:"if",locations:[{start:{line:782,column:6},end:{line:786,column:7}},{start:{line:782,column:6},end:{line:786,column:7}}],line:782},"101":{loc:{start:{line:782,column:10},end:{line:782,column:73}},type:"binary-expr",locations:[{start:{line:782,column:10},end:{line:782,column:30}},{start:{line:782,column:34},end:{line:782,column:73}}],line:782},"102":{loc:{start:{line:788,column:6},end:{line:797,column:7}},type:"if",locations:[{start:{line:788,column:6},end:{line:797,column:7}},{start:{line:788,column:6},end:{line:797,column:7}}],line:788},"103":{loc:{start:{line:791,column:13},end:{line:797,column:7}},type:"if",locations:[{start:{line:791,column:13},end:{line:797,column:7}},{start:{line:791,column:13},end:{line:797,column:7}}],line:791},"104":{loc:{start:{line:794,column:13},end:{line:797,column:7}},type:"if",locations:[{start:{line:794,column:13},end:{line:797,column:7}},{start:{line:794,column:13},end:{line:797,column:7}}],line:794},"105":{loc:{start:{line:809,column:4},end:{line:829,column:5}},type:"if",locations:[{start:{line:809,column:4},end:{line:829,column:5}},{start:{line:809,column:4},end:{line:829,column:5}}],line:809},"106":{loc:{start:{line:811,column:11},end:{line:829,column:5}},type:"if",locations:[{start:{line:811,column:11},end:{line:829,column:5}},{start:{line:811,column:11},end:{line:829,column:5}}],line:811},"107":{loc:{start:{line:819,column:11},end:{line:829,column:5}},type:"if",locations:[{start:{line:819,column:11},end:{line:829,column:5}},{start:{line:819,column:11},end:{line:829,column:5}}],line:819},"108":{loc:{start:{line:822,column:6},end:{line:828,column:7}},type:"if",locations:[{start:{line:822,column:6},end:{line:828,column:7}},{start:{line:822,column:6},end:{line:828,column:7}}],line:822},"109":{loc:{start:{line:822,column:10},end:{line:822,column:73}},type:"binary-expr",locations:[{start:{line:822,column:10},end:{line:822,column:30}},{start:{line:822,column:34},end:{line:822,column:73}}],line:822},"110":{loc:{start:{line:824,column:13},end:{line:828,column:7}},type:"if",locations:[{start:{line:824,column:13},end:{line:828,column:7}},{start:{line:824,column:13},end:{line:828,column:7}}],line:824},"111":{loc:{start:{line:826,column:13},end:{line:828,column:7}},type:"if",locations:[{start:{line:826,column:13},end:{line:828,column:7}},{start:{line:826,column:13},end:{line:828,column:7}}],line:826},"112":{loc:{start:{line:839,column:4},end:{line:841,column:5}},type:"if",locations:[{start:{line:839,column:4},end:{line:841,column:5}},{start:{line:839,column:4},end:{line:841,column:5}}],line:839},"113":{loc:{start:{line:853,column:4},end:{line:855,column:5}},type:"if",locations:[{start:{line:853,column:4},end:{line:855,column:5}},{start:{line:853,column:4},end:{line:855,column:5}}],line:853},"114":{loc:{start:{line:857,column:4},end:{line:885,column:5}},type:"switch",locations:[{start:{line:858,column:6},end:{line:860,column:14}},{start:{line:862,column:6},end:{line:864,column:14}},{start:{line:866,column:6},end:{line:868,column:14}},{start:{line:870,column:6},end:{line:872,column:14}},{start:{line:874,column:6},end:{line:876,column:14}},{start:{line:878,column:6},end:{line:878,column:21}},{start:{line:879,column:6},end:{line:879,column:16}},{start:{line:880,column:6},end:{line:881,column:14}},{start:{line:883,column:6},end:{line:884,column:107}}],line:857},"115":{loc:{start:{line:903,column:4},end:{line:908,column:5}},type:"if",locations:[{start:{line:903,column:4},end:{line:908,column:5}},{start:{line:903,column:4},end:{line:908,column:5}}],line:903},"116":{loc:{start:{line:903,column:8},end:{line:903,column:39}},type:"binary-expr",locations:[{start:{line:903,column:8},end:{line:903,column:12}},{start:{line:903,column:16},end:{line:903,column:39}}],line:903},"117":{loc:{start:{line:915,column:6},end:{line:917,column:7}},type:"if",locations:[{start:{line:915,column:6},end:{line:917,column:7}},{start:{line:915,column:6},end:{line:917,column:7}}],line:915},"118":{loc:{start:{line:915,column:10},end:{line:915,column:54}},type:"binary-expr",locations:[{start:{line:915,column:10},end:{line:915,column:27}},{start:{line:915,column:31},end:{line:915,column:54}}],line:915},"119":{loc:{start:{line:924,column:8},end:{line:926,column:9}},type:"if",locations:[{start:{line:924,column:8},end:{line:926,column:9}},{start:{line:924,column:8},end:{line:926,column:9}}],line:924},"120":{loc:{start:{line:936,column:8},end:{line:939,column:9}},type:"if",locations:[{start:{line:936,column:8},end:{line:939,column:9}},{start:{line:936,column:8},end:{line:939,column:9}}],line:936},"121":{loc:{start:{line:978,column:8},end:{line:980,column:9}},type:"if",locations:[{start:{line:978,column:8},end:{line:980,column:9}},{start:{line:978,column:8},end:{line:980,column:9}}],line:978},"122":{loc:{start:{line:978,column:12},end:{line:978,column:84}},type:"binary-expr",locations:[{start:{line:978,column:12},end:{line:978,column:17}},{start:{line:978,column:21},end:{line:978,column:69}},{start:{line:978,column:73},end:{line:978,column:84}}],line:978}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":0,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":0,"458":0,"459":0,"460":0,"461":0,"462":0,"463":0,"464":0,"465":0,"466":0,"467":0,"468":0,"469":0,"470":0,"471":0,"472":0,"473":0,"474":0,"475":0,"476":0,"477":0,"478":0,"479":0,"480":0,"481":0,"482":0,"483":0,"484":0,"485":0,"486":0,"487":0,"488":0,"489":0,"490":0,"491":0,"492":0,"493":0,"494":0,"495":0,"496":0,"497":0,"498":0,"499":0,"500":0,"501":0,"502":0,"503":0,"504":0,"505":0,"506":0,"507":0,"508":0,"509":0,"510":0,"511":0,"512":0,"513":0,"514":0,"515":0,"516":0,"517":0,"518":0,"519":0,"520":0,"521":0,"522":0,"523":0,"524":0,"525":0,"526":0,"527":0,"528":0,"529":0,"530":0,"531":0,"532":0,"533":0,"534":0,"535":0,"536":0,"537":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0],"32":[0],"33":[0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0],"68":[0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0,0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0],"113":[0,0],"114":[0,0,0,0,0,0,0,0,0],"115":[0,0],"116":[0,0],"117":[0,0],"118":[0,0],"119":[0,0],"120":[0,0],"121":[0,0],"122":[0,0,0]},inputSourceMap:{version:3,sources:["../../../../src/Adapters/Storage/Mongo/MongoStorageAdapter.js"],names:["mongodb","require","MongoClient","ReadPreference","MongoSchemaCollectionName","storageAdapterAllCollections","mongoAdapter","connect","then","database","collections","filter","collection","namespace","match","collectionName","indexOf","_collectionPrefix","convertParseSchemaToMongoSchema","schema","fields","_rperm","_wperm","className","_hashed_password","mongoSchemaFromFieldsAndClassNameAndCLP","classLevelPermissions","indexes","mongoObject","_id","objectId","updatedAt","createdAt","_metadata","undefined","fieldName","type","targetClass","fieldOptions","MongoSchemaCollection","parseFieldTypeToMongoFieldType","Object","keys","length","fields_options","class_permissions","validateExplainValue","explain","explainAllowedValues","includes","Parse","Error","INVALID_QUERY","MongoStorageAdapter","constructor","uri","defaults","DefaultMongoURI","collectionPrefix","mongoOptions","_uri","_mongoOptions","useNewUrlParser","useUnifiedTopology","_onchange","_maxTimeMS","maxTimeMS","canSortOnJoinTables","enableSchemaHooks","watch","callback","connectionPromise","encodedUri","client","options","s","db","dbName","on","catch","err","Promise","reject","handleError","error","code","logger","handleShutdown","resolve","close","_adaptiveCollection","name","rawCollection","MongoCollection","_schemaCollection","_stream","_mongoCollection","classExists","listCollections","toArray","setClassLevelPermissions","CLPs","schemaCollection","updateSchema","$set","setIndexesWithSchemaFormat","submittedIndexes","existingIndexes","_id_","deletePromises","insertedIndexes","forEach","field","__op","promise","dropIndex","push","key","prototype","hasOwnProperty","call","replace","insertPromise","createIndexes","all","setIndexesFromMongo","getIndexes","reduce","obj","index","_fts","_ftsx","weights","createClass","insertSchema","updateFieldOptions","addFieldIfNotExists","createIndexesIfNeeded","deleteClass","drop","message","findAndDeleteSchema","deleteAllClasses","fast","map","deleteMany","deleteFields","fieldNames","mongoFormatNames","collectionUpdate","$unset","collectionFilter","$or","$exists","schemaUpdate","updateMany","getAllClasses","schemasCollection","_fetchAllSchemasFrom_SCHEMA","getClass","_fetchOneSchemaFrom_SCHEMA","createObject","object","transactionalSession","insertOne","DUPLICATE_VALUE","underlyingError","matches","Array","isArray","userInfo","duplicated_field","deleteObjectsByQuery","query","mongoWhere","result","n","OBJECT_NOT_FOUND","INTERNAL_SERVER_ERROR","updateObjectsByQuery","update","mongoUpdate","findOneAndUpdate","returnDocument","session","value","upsertOneObject","upsertOne","find","skip","limit","sort","readPreference","hint","caseInsensitive","mongoSort","_","mapKeys","mongoKeys","memo","_parseReadPreference","createTextIndexesIfNeeded","objects","ensureIndex","indexName","indexCreationRequest","mongoFieldNames","indexType","defaultOptions","background","sparse","indexNameOptions","ttlOptions","ttl","expireAfterSeconds","caseInsensitiveOptions","collation","caseInsensitiveCollation","indexOptions","createIndex","ensureUniqueness","_ensureSparseUniqueIndexInBackground","_rawFind","count","distinct","isPointerField","transformField","aggregate","pipeline","stage","$group","_parseAggregateGroupArgs","$match","_parseAggregateArgs","$project","_parseAggregateProjectArgs","$geoNear","results","split","isEmpty","returnValue","_convertToDate","substring","Date","toUpperCase","PRIMARY","PRIMARY_PREFERRED","SECONDARY","SECONDARY_PREFERRED","NEAREST","performInitialization","$text","textIndex","dropAllIndexes","dropIndexes","updateSchemaWithIndexes","classes","promises","createTransactionalSession","transactionalSection","startSession","startTransaction","commitTransactionalSession","commit","retries","commitTransaction","hasErrorLabel","endSession","abortTransactionalSession","abortTransaction"],mappings:"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",sourcesContent:["// @flow\nimport MongoCollection from './MongoCollection';\nimport MongoSchemaCollection from './MongoSchemaCollection';\nimport { StorageAdapter } from '../StorageAdapter';\nimport type { SchemaType, QueryType, StorageClass, QueryOptions } from '../StorageAdapter';\nimport { parse as parseUrl, format as formatUrl } from '../../../vendor/mongodbUrl';\nimport {\n  parseObjectToMongoObjectForCreate,\n  mongoObjectToParseObject,\n  transformKey,\n  transformWhere,\n  transformUpdate,\n  transformPointerString,\n} from './MongoTransform';\n// @flow-disable-next\nimport Parse from 'parse/node';\n// @flow-disable-next\nimport _ from 'lodash';\nimport defaults from '../../../defaults';\nimport logger from '../../../logger';\n\n// @flow-disable-next\nconst mongodb = require('mongodb');\nconst MongoClient = mongodb.MongoClient;\nconst ReadPreference = mongodb.ReadPreference;\n\nconst MongoSchemaCollectionName = '_SCHEMA';\n\nconst storageAdapterAllCollections = mongoAdapter => {\n  return mongoAdapter\n    .connect()\n    .then(() => mongoAdapter.database.collections())\n    .then(collections => {\n      return collections.filter(collection => {\n        if (collection.namespace.match(/\\.system\\./)) {\n          return false;\n        }\n        // TODO: If you have one app with a collection prefix that happens to be a prefix of another\n        // apps prefix, this will go very very badly. We should fix that somehow.\n        return collection.collectionName.indexOf(mongoAdapter._collectionPrefix) == 0;\n      });\n    });\n};\n\nconst convertParseSchemaToMongoSchema = ({ ...schema }) => {\n  delete schema.fields._rperm;\n  delete schema.fields._wperm;\n\n  if (schema.className === '_User') {\n    // Legacy mongo adapter knows about the difference between password and _hashed_password.\n    // Future database adapters will only know about _hashed_password.\n    // Note: Parse Server will bring back password with injectDefaultSchema, so we don't need\n    // to add _hashed_password back ever.\n    delete schema.fields._hashed_password;\n  }\n\n  return schema;\n};\n\n// Returns { code, error } if invalid, or { result }, an object\n// suitable for inserting into _SCHEMA collection, otherwise.\nconst mongoSchemaFromFieldsAndClassNameAndCLP = (\n  fields,\n  className,\n  classLevelPermissions,\n  indexes\n) => {\n  const mongoObject = {\n    _id: className,\n    objectId: 'string',\n    updatedAt: 'string',\n    createdAt: 'string',\n    _metadata: undefined,\n  };\n\n  for (const fieldName in fields) {\n    const { type, targetClass, ...fieldOptions } = fields[fieldName];\n    mongoObject[fieldName] = MongoSchemaCollection.parseFieldTypeToMongoFieldType({\n      type,\n      targetClass,\n    });\n    if (fieldOptions && Object.keys(fieldOptions).length > 0) {\n      mongoObject._metadata = mongoObject._metadata || {};\n      mongoObject._metadata.fields_options = mongoObject._metadata.fields_options || {};\n      mongoObject._metadata.fields_options[fieldName] = fieldOptions;\n    }\n  }\n\n  if (typeof classLevelPermissions !== 'undefined') {\n    mongoObject._metadata = mongoObject._metadata || {};\n    if (!classLevelPermissions) {\n      delete mongoObject._metadata.class_permissions;\n    } else {\n      mongoObject._metadata.class_permissions = classLevelPermissions;\n    }\n  }\n\n  if (indexes && typeof indexes === 'object' && Object.keys(indexes).length > 0) {\n    mongoObject._metadata = mongoObject._metadata || {};\n    mongoObject._metadata.indexes = indexes;\n  }\n\n  if (!mongoObject._metadata) {\n    // cleanup the unused _metadata\n    delete mongoObject._metadata;\n  }\n\n  return mongoObject;\n};\n\nfunction validateExplainValue(explain) {\n  if (explain) {\n    // The list of allowed explain values is from node-mongodb-native/lib/explain.js\n    const explainAllowedValues = [\n      'queryPlanner',\n      'queryPlannerExtended',\n      'executionStats',\n      'allPlansExecution',\n      false,\n      true,\n    ];\n    if (!explainAllowedValues.includes(explain)) {\n      throw new Parse.Error(Parse.Error.INVALID_QUERY, 'Invalid value for explain');\n    }\n  }\n}\n\nexport class MongoStorageAdapter implements StorageAdapter {\n  // Private\n  _uri: string;\n  _collectionPrefix: string;\n  _mongoOptions: Object;\n  _onchange: any;\n  _stream: any;\n  // Public\n  connectionPromise: ?Promise<any>;\n  database: any;\n  client: MongoClient;\n  _maxTimeMS: ?number;\n  canSortOnJoinTables: boolean;\n  enableSchemaHooks: boolean;\n\n  constructor({ uri = defaults.DefaultMongoURI, collectionPrefix = '', mongoOptions = {} }: any) {\n    this._uri = uri;\n    this._collectionPrefix = collectionPrefix;\n    this._mongoOptions = mongoOptions;\n    this._mongoOptions.useNewUrlParser = true;\n    this._mongoOptions.useUnifiedTopology = true;\n    this._onchange = () => {};\n\n    // MaxTimeMS is not a global MongoDB client option, it is applied per operation.\n    this._maxTimeMS = mongoOptions.maxTimeMS;\n    this.canSortOnJoinTables = true;\n    this.enableSchemaHooks = !!mongoOptions.enableSchemaHooks;\n    delete mongoOptions.enableSchemaHooks;\n    delete mongoOptions.maxTimeMS;\n  }\n\n  watch(callback: () => void): void {\n    this._onchange = callback;\n  }\n\n  connect() {\n    if (this.connectionPromise) {\n      return this.connectionPromise;\n    }\n\n    // parsing and re-formatting causes the auth value (if there) to get URI\n    // encoded\n    const encodedUri = formatUrl(parseUrl(this._uri));\n\n    this.connectionPromise = MongoClient.connect(encodedUri, this._mongoOptions)\n      .then(client => {\n        // Starting mongoDB 3.0, the MongoClient.connect don't return a DB anymore but a client\n        // Fortunately, we can get back the options and use them to select the proper DB.\n        // https://github.com/mongodb/node-mongodb-native/blob/2c35d76f08574225b8db02d7bef687123e6bb018/lib/mongo_client.js#L885\n        const options = client.s.options;\n        const database = client.db(options.dbName);\n        if (!database) {\n          delete this.connectionPromise;\n          return;\n        }\n        client.on('error', () => {\n          delete this.connectionPromise;\n        });\n        client.on('close', () => {\n          delete this.connectionPromise;\n        });\n        this.client = client;\n        this.database = database;\n      })\n      .catch(err => {\n        delete this.connectionPromise;\n        return Promise.reject(err);\n      });\n\n    return this.connectionPromise;\n  }\n\n  handleError<T>(error: ?(Error | Parse.Error)): Promise<T> {\n    if (error && error.code === 13) {\n      // Unauthorized error\n      delete this.client;\n      delete this.database;\n      delete this.connectionPromise;\n      logger.error('Received unauthorized error', { error: error });\n    }\n    throw error;\n  }\n\n  handleShutdown() {\n    if (!this.client) {\n      return Promise.resolve();\n    }\n    return this.client.close(false);\n  }\n\n  _adaptiveCollection(name: string) {\n    return this.connect()\n      .then(() => this.database.collection(this._collectionPrefix + name))\n      .then(rawCollection => new MongoCollection(rawCollection))\n      .catch(err => this.handleError(err));\n  }\n\n  _schemaCollection(): Promise<MongoSchemaCollection> {\n    return this.connect()\n      .then(() => this._adaptiveCollection(MongoSchemaCollectionName))\n      .then(collection => {\n        if (!this._stream && this.enableSchemaHooks) {\n          this._stream = collection._mongoCollection.watch();\n          this._stream.on('change', () => this._onchange());\n        }\n        return new MongoSchemaCollection(collection);\n      });\n  }\n\n  classExists(name: string) {\n    return this.connect()\n      .then(() => {\n        return this.database.listCollections({ name: this._collectionPrefix + name }).toArray();\n      })\n      .then(collections => {\n        return collections.length > 0;\n      })\n      .catch(err => this.handleError(err));\n  }\n\n  setClassLevelPermissions(className: string, CLPs: any): Promise<void> {\n    return this._schemaCollection()\n      .then(schemaCollection =>\n        schemaCollection.updateSchema(className, {\n          $set: { '_metadata.class_permissions': CLPs },\n        })\n      )\n      .catch(err => this.handleError(err));\n  }\n\n  setIndexesWithSchemaFormat(\n    className: string,\n    submittedIndexes: any,\n    existingIndexes: any = {},\n    fields: any\n  ): Promise<void> {\n    if (submittedIndexes === undefined) {\n      return Promise.resolve();\n    }\n    if (Object.keys(existingIndexes).length === 0) {\n      existingIndexes = { _id_: { _id: 1 } };\n    }\n    const deletePromises = [];\n    const insertedIndexes = [];\n    Object.keys(submittedIndexes).forEach(name => {\n      const field = submittedIndexes[name];\n      if (existingIndexes[name] && field.__op !== 'Delete') {\n        throw new Parse.Error(Parse.Error.INVALID_QUERY, `Index ${name} exists, cannot update.`);\n      }\n      if (!existingIndexes[name] && field.__op === 'Delete') {\n        throw new Parse.Error(\n          Parse.Error.INVALID_QUERY,\n          `Index ${name} does not exist, cannot delete.`\n        );\n      }\n      if (field.__op === 'Delete') {\n        const promise = this.dropIndex(className, name);\n        deletePromises.push(promise);\n        delete existingIndexes[name];\n      } else {\n        Object.keys(field).forEach(key => {\n          if (\n            !Object.prototype.hasOwnProperty.call(\n              fields,\n              key.indexOf('_p_') === 0 ? key.replace('_p_', '') : key\n            )\n          ) {\n            throw new Parse.Error(\n              Parse.Error.INVALID_QUERY,\n              `Field ${key} does not exist, cannot add index.`\n            );\n          }\n        });\n        existingIndexes[name] = field;\n        insertedIndexes.push({\n          key: field,\n          name,\n        });\n      }\n    });\n    let insertPromise = Promise.resolve();\n    if (insertedIndexes.length > 0) {\n      insertPromise = this.createIndexes(className, insertedIndexes);\n    }\n    return Promise.all(deletePromises)\n      .then(() => insertPromise)\n      .then(() => this._schemaCollection())\n      .then(schemaCollection =>\n        schemaCollection.updateSchema(className, {\n          $set: { '_metadata.indexes': existingIndexes },\n        })\n      )\n      .catch(err => this.handleError(err));\n  }\n\n  setIndexesFromMongo(className: string) {\n    return this.getIndexes(className)\n      .then(indexes => {\n        indexes = indexes.reduce((obj, index) => {\n          if (index.key._fts) {\n            delete index.key._fts;\n            delete index.key._ftsx;\n            for (const field in index.weights) {\n              index.key[field] = 'text';\n            }\n          }\n          obj[index.name] = index.key;\n          return obj;\n        }, {});\n        return this._schemaCollection().then(schemaCollection =>\n          schemaCollection.updateSchema(className, {\n            $set: { '_metadata.indexes': indexes },\n          })\n        );\n      })\n      .catch(err => this.handleError(err))\n      .catch(() => {\n        // Ignore if collection not found\n        return Promise.resolve();\n      });\n  }\n\n  createClass(className: string, schema: SchemaType): Promise<void> {\n    schema = convertParseSchemaToMongoSchema(schema);\n    const mongoObject = mongoSchemaFromFieldsAndClassNameAndCLP(\n      schema.fields,\n      className,\n      schema.classLevelPermissions,\n      schema.indexes\n    );\n    mongoObject._id = className;\n    return this.setIndexesWithSchemaFormat(className, schema.indexes, {}, schema.fields)\n      .then(() => this._schemaCollection())\n      .then(schemaCollection => schemaCollection.insertSchema(mongoObject))\n      .catch(err => this.handleError(err));\n  }\n\n  async updateFieldOptions(className: string, fieldName: string, type: any) {\n    const schemaCollection = await this._schemaCollection();\n    await schemaCollection.updateFieldOptions(className, fieldName, type);\n  }\n\n  addFieldIfNotExists(className: string, fieldName: string, type: any): Promise<void> {\n    return this._schemaCollection()\n      .then(schemaCollection => schemaCollection.addFieldIfNotExists(className, fieldName, type))\n      .then(() => this.createIndexesIfNeeded(className, fieldName, type))\n      .catch(err => this.handleError(err));\n  }\n\n  // Drops a collection. Resolves with true if it was a Parse Schema (eg. _User, Custom, etc.)\n  // and resolves with false if it wasn't (eg. a join table). Rejects if deletion was impossible.\n  deleteClass(className: string) {\n    return (\n      this._adaptiveCollection(className)\n        .then(collection => collection.drop())\n        .catch(error => {\n          // 'ns not found' means collection was already gone. Ignore deletion attempt.\n          if (error.message == 'ns not found') {\n            return;\n          }\n          throw error;\n        })\n        // We've dropped the collection, now remove the _SCHEMA document\n        .then(() => this._schemaCollection())\n        .then(schemaCollection => schemaCollection.findAndDeleteSchema(className))\n        .catch(err => this.handleError(err))\n    );\n  }\n\n  deleteAllClasses(fast: boolean) {\n    return storageAdapterAllCollections(this).then(collections =>\n      Promise.all(\n        collections.map(collection => (fast ? collection.deleteMany({}) : collection.drop()))\n      )\n    );\n  }\n\n  // Remove the column and all the data. For Relations, the _Join collection is handled\n  // specially, this function does not delete _Join columns. It should, however, indicate\n  // that the relation fields does not exist anymore. In mongo, this means removing it from\n  // the _SCHEMA collection.  There should be no actual data in the collection under the same name\n  // as the relation column, so it's fine to attempt to delete it. If the fields listed to be\n  // deleted do not exist, this function should return successfully anyways. Checking for\n  // attempts to delete non-existent fields is the responsibility of Parse Server.\n\n  // Pointer field names are passed for legacy reasons: the original mongo\n  // format stored pointer field names differently in the database, and therefore\n  // needed to know the type of the field before it could delete it. Future database\n  // adapters should ignore the pointerFieldNames argument. All the field names are in\n  // fieldNames, they show up additionally in the pointerFieldNames database for use\n  // by the mongo adapter, which deals with the legacy mongo format.\n\n  // This function is not obligated to delete fields atomically. It is given the field\n  // names in a list so that databases that are capable of deleting fields atomically\n  // may do so.\n\n  // Returns a Promise.\n  deleteFields(className: string, schema: SchemaType, fieldNames: string[]) {\n    const mongoFormatNames = fieldNames.map(fieldName => {\n      if (schema.fields[fieldName].type === 'Pointer') {\n        return `_p_${fieldName}`;\n      } else {\n        return fieldName;\n      }\n    });\n    const collectionUpdate = { $unset: {} };\n    mongoFormatNames.forEach(name => {\n      collectionUpdate['$unset'][name] = null;\n    });\n\n    const collectionFilter = { $or: [] };\n    mongoFormatNames.forEach(name => {\n      collectionFilter['$or'].push({ [name]: { $exists: true } });\n    });\n\n    const schemaUpdate = { $unset: {} };\n    fieldNames.forEach(name => {\n      schemaUpdate['$unset'][name] = null;\n      schemaUpdate['$unset'][`_metadata.fields_options.${name}`] = null;\n    });\n\n    return this._adaptiveCollection(className)\n      .then(collection => collection.updateMany(collectionFilter, collectionUpdate))\n      .then(() => this._schemaCollection())\n      .then(schemaCollection => schemaCollection.updateSchema(className, schemaUpdate))\n      .catch(err => this.handleError(err));\n  }\n\n  // Return a promise for all schemas known to this adapter, in Parse format. In case the\n  // schemas cannot be retrieved, returns a promise that rejects. Requirements for the\n  // rejection reason are TBD.\n  getAllClasses(): Promise<StorageClass[]> {\n    return this._schemaCollection()\n      .then(schemasCollection => schemasCollection._fetchAllSchemasFrom_SCHEMA())\n      .catch(err => this.handleError(err));\n  }\n\n  // Return a promise for the schema with the given name, in Parse format. If\n  // this adapter doesn't know about the schema, return a promise that rejects with\n  // undefined as the reason.\n  getClass(className: string): Promise<StorageClass> {\n    return this._schemaCollection()\n      .then(schemasCollection => schemasCollection._fetchOneSchemaFrom_SCHEMA(className))\n      .catch(err => this.handleError(err));\n  }\n\n  // TODO: As yet not particularly well specified. Creates an object. Maybe shouldn't even need the schema,\n  // and should infer from the type. Or maybe does need the schema for validations. Or maybe needs\n  // the schema only for the legacy mongo format. We'll figure that out later.\n  createObject(className: string, schema: SchemaType, object: any, transactionalSession: ?any) {\n    schema = convertParseSchemaToMongoSchema(schema);\n    const mongoObject = parseObjectToMongoObjectForCreate(className, object, schema);\n    return this._adaptiveCollection(className)\n      .then(collection => collection.insertOne(mongoObject, transactionalSession))\n      .catch(error => {\n        if (error.code === 11000) {\n          // Duplicate value\n          const err = new Parse.Error(\n            Parse.Error.DUPLICATE_VALUE,\n            'A duplicate value for a field with unique values was provided'\n          );\n          err.underlyingError = error;\n          if (error.message) {\n            const matches = error.message.match(/index:[\\sa-zA-Z0-9_\\-\\.]+\\$?([a-zA-Z_-]+)_1/);\n            if (matches && Array.isArray(matches)) {\n              err.userInfo = { duplicated_field: matches[1] };\n            }\n          }\n          throw err;\n        }\n        throw error;\n      })\n      .catch(err => this.handleError(err));\n  }\n\n  // Remove all objects that match the given Parse Query.\n  // If no objects match, reject with OBJECT_NOT_FOUND. If objects are found and deleted, resolve with undefined.\n  // If there is some other error, reject with INTERNAL_SERVER_ERROR.\n  deleteObjectsByQuery(\n    className: string,\n    schema: SchemaType,\n    query: QueryType,\n    transactionalSession: ?any\n  ) {\n    schema = convertParseSchemaToMongoSchema(schema);\n    return this._adaptiveCollection(className)\n      .then(collection => {\n        const mongoWhere = transformWhere(className, query, schema);\n        return collection.deleteMany(mongoWhere, transactionalSession);\n      })\n      .catch(err => this.handleError(err))\n      .then(\n        ({ result }) => {\n          if (result.n === 0) {\n            throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Object not found.');\n          }\n          return Promise.resolve();\n        },\n        () => {\n          throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, 'Database adapter error');\n        }\n      );\n  }\n\n  // Apply the update to all objects that match the given Parse Query.\n  updateObjectsByQuery(\n    className: string,\n    schema: SchemaType,\n    query: QueryType,\n    update: any,\n    transactionalSession: ?any\n  ) {\n    schema = convertParseSchemaToMongoSchema(schema);\n    const mongoUpdate = transformUpdate(className, update, schema);\n    const mongoWhere = transformWhere(className, query, schema);\n    return this._adaptiveCollection(className)\n      .then(collection => collection.updateMany(mongoWhere, mongoUpdate, transactionalSession))\n      .catch(err => this.handleError(err));\n  }\n\n  // Atomically finds and updates an object based on query.\n  // Return value not currently well specified.\n  findOneAndUpdate(\n    className: string,\n    schema: SchemaType,\n    query: QueryType,\n    update: any,\n    transactionalSession: ?any\n  ) {\n    schema = convertParseSchemaToMongoSchema(schema);\n    const mongoUpdate = transformUpdate(className, update, schema);\n    const mongoWhere = transformWhere(className, query, schema);\n    return this._adaptiveCollection(className)\n      .then(collection =>\n        collection._mongoCollection.findOneAndUpdate(mongoWhere, mongoUpdate, {\n          returnDocument: 'after',\n          session: transactionalSession || undefined,\n        })\n      )\n      .then(result => mongoObjectToParseObject(className, result.value, schema))\n      .catch(error => {\n        if (error.code === 11000) {\n          throw new Parse.Error(\n            Parse.Error.DUPLICATE_VALUE,\n            'A duplicate value for a field with unique values was provided'\n          );\n        }\n        throw error;\n      })\n      .catch(err => this.handleError(err));\n  }\n\n  // Hopefully we can get rid of this. It's only used for config and hooks.\n  upsertOneObject(\n    className: string,\n    schema: SchemaType,\n    query: QueryType,\n    update: any,\n    transactionalSession: ?any\n  ) {\n    schema = convertParseSchemaToMongoSchema(schema);\n    const mongoUpdate = transformUpdate(className, update, schema);\n    const mongoWhere = transformWhere(className, query, schema);\n    return this._adaptiveCollection(className)\n      .then(collection => collection.upsertOne(mongoWhere, mongoUpdate, transactionalSession))\n      .catch(err => this.handleError(err));\n  }\n\n  // Executes a find. Accepts: className, query in Parse format, and { skip, limit, sort }.\n  find(\n    className: string,\n    schema: SchemaType,\n    query: QueryType,\n    { skip, limit, sort, keys, readPreference, hint, caseInsensitive, explain }: QueryOptions\n  ): Promise<any> {\n    validateExplainValue(explain);\n    schema = convertParseSchemaToMongoSchema(schema);\n    const mongoWhere = transformWhere(className, query, schema);\n    const mongoSort = _.mapKeys(sort, (value, fieldName) =>\n      transformKey(className, fieldName, schema)\n    );\n    const mongoKeys = _.reduce(\n      keys,\n      (memo, key) => {\n        if (key === 'ACL') {\n          memo['_rperm'] = 1;\n          memo['_wperm'] = 1;\n        } else {\n          memo[transformKey(className, key, schema)] = 1;\n        }\n        return memo;\n      },\n      {}\n    );\n\n    // If we aren't requesting the `_id` field, we need to explicitly opt out\n    // of it. Doing so in parse-server is unusual, but it can allow us to\n    // optimize some queries with covering indexes.\n    if (keys && !mongoKeys._id) {\n      mongoKeys._id = 0;\n    }\n\n    readPreference = this._parseReadPreference(readPreference);\n    return this.createTextIndexesIfNeeded(className, query, schema)\n      .then(() => this._adaptiveCollection(className))\n      .then(collection =>\n        collection.find(mongoWhere, {\n          skip,\n          limit,\n          sort: mongoSort,\n          keys: mongoKeys,\n          maxTimeMS: this._maxTimeMS,\n          readPreference,\n          hint,\n          caseInsensitive,\n          explain,\n        })\n      )\n      .then(objects => {\n        if (explain) {\n          return objects;\n        }\n        return objects.map(object => mongoObjectToParseObject(className, object, schema));\n      })\n      .catch(err => this.handleError(err));\n  }\n\n  ensureIndex(\n    className: string,\n    schema: SchemaType,\n    fieldNames: string[],\n    indexName: ?string,\n    caseInsensitive: boolean = false,\n    options?: Object = {}\n  ): Promise<any> {\n    schema = convertParseSchemaToMongoSchema(schema);\n    const indexCreationRequest = {};\n    const mongoFieldNames = fieldNames.map(fieldName => transformKey(className, fieldName, schema));\n    mongoFieldNames.forEach(fieldName => {\n      indexCreationRequest[fieldName] = options.indexType !== undefined ? options.indexType : 1;\n    });\n\n    const defaultOptions: Object = { background: true, sparse: true };\n    const indexNameOptions: Object = indexName ? { name: indexName } : {};\n    const ttlOptions: Object = options.ttl !== undefined ? { expireAfterSeconds: options.ttl } : {};\n    const caseInsensitiveOptions: Object = caseInsensitive\n      ? { collation: MongoCollection.caseInsensitiveCollation() }\n      : {};\n    const indexOptions: Object = {\n      ...defaultOptions,\n      ...caseInsensitiveOptions,\n      ...indexNameOptions,\n      ...ttlOptions,\n    };\n\n    return this._adaptiveCollection(className)\n      .then(\n        collection =>\n          new Promise((resolve, reject) =>\n            collection._mongoCollection.createIndex(indexCreationRequest, indexOptions, error =>\n              error ? reject(error) : resolve()\n            )\n          )\n      )\n      .catch(err => this.handleError(err));\n  }\n\n  // Create a unique index. Unique indexes on nullable fields are not allowed. Since we don't\n  // currently know which fields are nullable and which aren't, we ignore that criteria.\n  // As such, we shouldn't expose this function to users of parse until we have an out-of-band\n  // Way of determining if a field is nullable. Undefined doesn't count against uniqueness,\n  // which is why we use sparse indexes.\n  ensureUniqueness(className: string, schema: SchemaType, fieldNames: string[]) {\n    schema = convertParseSchemaToMongoSchema(schema);\n    const indexCreationRequest = {};\n    const mongoFieldNames = fieldNames.map(fieldName => transformKey(className, fieldName, schema));\n    mongoFieldNames.forEach(fieldName => {\n      indexCreationRequest[fieldName] = 1;\n    });\n    return this._adaptiveCollection(className)\n      .then(collection => collection._ensureSparseUniqueIndexInBackground(indexCreationRequest))\n      .catch(error => {\n        if (error.code === 11000) {\n          throw new Parse.Error(\n            Parse.Error.DUPLICATE_VALUE,\n            'Tried to ensure field uniqueness for a class that already has duplicates.'\n          );\n        }\n        throw error;\n      })\n      .catch(err => this.handleError(err));\n  }\n\n  // Used in tests\n  _rawFind(className: string, query: QueryType) {\n    return this._adaptiveCollection(className)\n      .then(collection =>\n        collection.find(query, {\n          maxTimeMS: this._maxTimeMS,\n        })\n      )\n      .catch(err => this.handleError(err));\n  }\n\n  // Executes a count.\n  count(\n    className: string,\n    schema: SchemaType,\n    query: QueryType,\n    readPreference: ?string,\n    hint: ?mixed\n  ) {\n    schema = convertParseSchemaToMongoSchema(schema);\n    readPreference = this._parseReadPreference(readPreference);\n    return this._adaptiveCollection(className)\n      .then(collection =>\n        collection.count(transformWhere(className, query, schema, true), {\n          maxTimeMS: this._maxTimeMS,\n          readPreference,\n          hint,\n        })\n      )\n      .catch(err => this.handleError(err));\n  }\n\n  distinct(className: string, schema: SchemaType, query: QueryType, fieldName: string) {\n    schema = convertParseSchemaToMongoSchema(schema);\n    const isPointerField = schema.fields[fieldName] && schema.fields[fieldName].type === 'Pointer';\n    const transformField = transformKey(className, fieldName, schema);\n\n    return this._adaptiveCollection(className)\n      .then(collection =>\n        collection.distinct(transformField, transformWhere(className, query, schema))\n      )\n      .then(objects => {\n        objects = objects.filter(obj => obj != null);\n        return objects.map(object => {\n          if (isPointerField) {\n            return transformPointerString(schema, fieldName, object);\n          }\n          return mongoObjectToParseObject(className, object, schema);\n        });\n      })\n      .catch(err => this.handleError(err));\n  }\n\n  aggregate(\n    className: string,\n    schema: any,\n    pipeline: any,\n    readPreference: ?string,\n    hint: ?mixed,\n    explain?: boolean\n  ) {\n    validateExplainValue(explain);\n    let isPointerField = false;\n    pipeline = pipeline.map(stage => {\n      if (stage.$group) {\n        stage.$group = this._parseAggregateGroupArgs(schema, stage.$group);\n        if (\n          stage.$group._id &&\n          typeof stage.$group._id === 'string' &&\n          stage.$group._id.indexOf('$_p_') >= 0\n        ) {\n          isPointerField = true;\n        }\n      }\n      if (stage.$match) {\n        stage.$match = this._parseAggregateArgs(schema, stage.$match);\n      }\n      if (stage.$project) {\n        stage.$project = this._parseAggregateProjectArgs(schema, stage.$project);\n      }\n      if (stage.$geoNear && stage.$geoNear.query) {\n        stage.$geoNear.query = this._parseAggregateArgs(schema, stage.$geoNear.query);\n      }\n      return stage;\n    });\n    readPreference = this._parseReadPreference(readPreference);\n    return this._adaptiveCollection(className)\n      .then(collection =>\n        collection.aggregate(pipeline, {\n          readPreference,\n          maxTimeMS: this._maxTimeMS,\n          hint,\n          explain,\n        })\n      )\n      .then(results => {\n        results.forEach(result => {\n          if (Object.prototype.hasOwnProperty.call(result, '_id')) {\n            if (isPointerField && result._id) {\n              result._id = result._id.split('$')[1];\n            }\n            if (\n              result._id == null ||\n              result._id == undefined ||\n              (['object', 'string'].includes(typeof result._id) && _.isEmpty(result._id))\n            ) {\n              result._id = null;\n            }\n            result.objectId = result._id;\n            delete result._id;\n          }\n        });\n        return results;\n      })\n      .then(objects => objects.map(object => mongoObjectToParseObject(className, object, schema)))\n      .catch(err => this.handleError(err));\n  }\n\n  // This function will recursively traverse the pipeline and convert any Pointer or Date columns.\n  // If we detect a pointer column we will rename the column being queried for to match the column\n  // in the database. We also modify the value to what we expect the value to be in the database\n  // as well.\n  // For dates, the driver expects a Date object, but we have a string coming in. So we'll convert\n  // the string to a Date so the driver can perform the necessary comparison.\n  //\n  // The goal of this method is to look for the \"leaves\" of the pipeline and determine if it needs\n  // to be converted. The pipeline can have a few different forms. For more details, see:\n  //     https://docs.mongodb.com/manual/reference/operator/aggregation/\n  //\n  // If the pipeline is an array, it means we are probably parsing an '$and' or '$or' operator. In\n  // that case we need to loop through all of it's children to find the columns being operated on.\n  // If the pipeline is an object, then we'll loop through the keys checking to see if the key name\n  // matches one of the schema columns. If it does match a column and the column is a Pointer or\n  // a Date, then we'll convert the value as described above.\n  //\n  // As much as I hate recursion...this seemed like a good fit for it. We're essentially traversing\n  // down a tree to find a \"leaf node\" and checking to see if it needs to be converted.\n  _parseAggregateArgs(schema: any, pipeline: any): any {\n    if (pipeline === null) {\n      return null;\n    } else if (Array.isArray(pipeline)) {\n      return pipeline.map(value => this._parseAggregateArgs(schema, value));\n    } else if (typeof pipeline === 'object') {\n      const returnValue = {};\n      for (const field in pipeline) {\n        if (schema.fields[field] && schema.fields[field].type === 'Pointer') {\n          if (typeof pipeline[field] === 'object') {\n            // Pass objects down to MongoDB...this is more than likely an $exists operator.\n            returnValue[`_p_${field}`] = pipeline[field];\n          } else {\n            returnValue[`_p_${field}`] = `${schema.fields[field].targetClass}$${pipeline[field]}`;\n          }\n        } else if (schema.fields[field] && schema.fields[field].type === 'Date') {\n          returnValue[field] = this._convertToDate(pipeline[field]);\n        } else {\n          returnValue[field] = this._parseAggregateArgs(schema, pipeline[field]);\n        }\n\n        if (field === 'objectId') {\n          returnValue['_id'] = returnValue[field];\n          delete returnValue[field];\n        } else if (field === 'createdAt') {\n          returnValue['_created_at'] = returnValue[field];\n          delete returnValue[field];\n        } else if (field === 'updatedAt') {\n          returnValue['_updated_at'] = returnValue[field];\n          delete returnValue[field];\n        }\n      }\n      return returnValue;\n    }\n    return pipeline;\n  }\n\n  // This function is slightly different than the one above. Rather than trying to combine these\n  // two functions and making the code even harder to understand, I decided to split it up. The\n  // difference with this function is we are not transforming the values, only the keys of the\n  // pipeline.\n  _parseAggregateProjectArgs(schema: any, pipeline: any): any {\n    const returnValue = {};\n    for (const field in pipeline) {\n      if (schema.fields[field] && schema.fields[field].type === 'Pointer') {\n        returnValue[`_p_${field}`] = pipeline[field];\n      } else {\n        returnValue[field] = this._parseAggregateArgs(schema, pipeline[field]);\n      }\n\n      if (field === 'objectId') {\n        returnValue['_id'] = returnValue[field];\n        delete returnValue[field];\n      } else if (field === 'createdAt') {\n        returnValue['_created_at'] = returnValue[field];\n        delete returnValue[field];\n      } else if (field === 'updatedAt') {\n        returnValue['_updated_at'] = returnValue[field];\n        delete returnValue[field];\n      }\n    }\n    return returnValue;\n  }\n\n  // This function is slightly different than the two above. MongoDB $group aggregate looks like:\n  //     { $group: { _id: <expression>, <field1>: { <accumulator1> : <expression1> }, ... } }\n  // The <expression> could be a column name, prefixed with the '$' character. We'll look for\n  // these <expression> and check to see if it is a 'Pointer' or if it's one of createdAt,\n  // updatedAt or objectId and change it accordingly.\n  _parseAggregateGroupArgs(schema: any, pipeline: any): any {\n    if (Array.isArray(pipeline)) {\n      return pipeline.map(value => this._parseAggregateGroupArgs(schema, value));\n    } else if (typeof pipeline === 'object') {\n      const returnValue = {};\n      for (const field in pipeline) {\n        returnValue[field] = this._parseAggregateGroupArgs(schema, pipeline[field]);\n      }\n      return returnValue;\n    } else if (typeof pipeline === 'string') {\n      const field = pipeline.substring(1);\n      if (schema.fields[field] && schema.fields[field].type === 'Pointer') {\n        return `$_p_${field}`;\n      } else if (field == 'createdAt') {\n        return '$_created_at';\n      } else if (field == 'updatedAt') {\n        return '$_updated_at';\n      }\n    }\n    return pipeline;\n  }\n\n  // This function will attempt to convert the provided value to a Date object. Since this is part\n  // of an aggregation pipeline, the value can either be a string or it can be another object with\n  // an operator in it (like $gt, $lt, etc). Because of this I felt it was easier to make this a\n  // recursive method to traverse down to the \"leaf node\" which is going to be the string.\n  _convertToDate(value: any): any {\n    if (typeof value === 'string') {\n      return new Date(value);\n    }\n\n    const returnValue = {};\n    for (const field in value) {\n      returnValue[field] = this._convertToDate(value[field]);\n    }\n    return returnValue;\n  }\n\n  _parseReadPreference(readPreference: ?string): ?string {\n    if (readPreference) {\n      readPreference = readPreference.toUpperCase();\n    }\n    switch (readPreference) {\n      case 'PRIMARY':\n        readPreference = ReadPreference.PRIMARY;\n        break;\n      case 'PRIMARY_PREFERRED':\n        readPreference = ReadPreference.PRIMARY_PREFERRED;\n        break;\n      case 'SECONDARY':\n        readPreference = ReadPreference.SECONDARY;\n        break;\n      case 'SECONDARY_PREFERRED':\n        readPreference = ReadPreference.SECONDARY_PREFERRED;\n        break;\n      case 'NEAREST':\n        readPreference = ReadPreference.NEAREST;\n        break;\n      case undefined:\n      case null:\n      case '':\n        break;\n      default:\n        throw new Parse.Error(Parse.Error.INVALID_QUERY, 'Not supported read preference.');\n    }\n    return readPreference;\n  }\n\n  performInitialization(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  createIndex(className: string, index: any) {\n    return this._adaptiveCollection(className)\n      .then(collection => collection._mongoCollection.createIndex(index))\n      .catch(err => this.handleError(err));\n  }\n\n  createIndexes(className: string, indexes: any) {\n    return this._adaptiveCollection(className)\n      .then(collection => collection._mongoCollection.createIndexes(indexes))\n      .catch(err => this.handleError(err));\n  }\n\n  createIndexesIfNeeded(className: string, fieldName: string, type: any) {\n    if (type && type.type === 'Polygon') {\n      const index = {\n        [fieldName]: '2dsphere',\n      };\n      return this.createIndex(className, index);\n    }\n    return Promise.resolve();\n  }\n\n  createTextIndexesIfNeeded(className: string, query: QueryType, schema: any): Promise<void> {\n    for (const fieldName in query) {\n      if (!query[fieldName] || !query[fieldName].$text) {\n        continue;\n      }\n      const existingIndexes = schema.indexes;\n      for (const key in existingIndexes) {\n        const index = existingIndexes[key];\n        if (Object.prototype.hasOwnProperty.call(index, fieldName)) {\n          return Promise.resolve();\n        }\n      }\n      const indexName = `${fieldName}_text`;\n      const textIndex = {\n        [indexName]: { [fieldName]: 'text' },\n      };\n      return this.setIndexesWithSchemaFormat(\n        className,\n        textIndex,\n        existingIndexes,\n        schema.fields\n      ).catch(error => {\n        if (error.code === 85) {\n          // Index exist with different options\n          return this.setIndexesFromMongo(className);\n        }\n        throw error;\n      });\n    }\n    return Promise.resolve();\n  }\n\n  getIndexes(className: string) {\n    return this._adaptiveCollection(className)\n      .then(collection => collection._mongoCollection.indexes())\n      .catch(err => this.handleError(err));\n  }\n\n  dropIndex(className: string, index: any) {\n    return this._adaptiveCollection(className)\n      .then(collection => collection._mongoCollection.dropIndex(index))\n      .catch(err => this.handleError(err));\n  }\n\n  dropAllIndexes(className: string) {\n    return this._adaptiveCollection(className)\n      .then(collection => collection._mongoCollection.dropIndexes())\n      .catch(err => this.handleError(err));\n  }\n\n  updateSchemaWithIndexes(): Promise<any> {\n    return this.getAllClasses()\n      .then(classes => {\n        const promises = classes.map(schema => {\n          return this.setIndexesFromMongo(schema.className);\n        });\n        return Promise.all(promises);\n      })\n      .catch(err => this.handleError(err));\n  }\n\n  createTransactionalSession(): Promise<any> {\n    const transactionalSection = this.client.startSession();\n    transactionalSection.startTransaction();\n    return Promise.resolve(transactionalSection);\n  }\n\n  commitTransactionalSession(transactionalSection: any): Promise<void> {\n    const commit = retries => {\n      return transactionalSection\n        .commitTransaction()\n        .catch(error => {\n          if (error && error.hasErrorLabel('TransientTransactionError') && retries > 0) {\n            return commit(retries - 1);\n          }\n          throw error;\n        })\n        .then(() => {\n          transactionalSection.endSession();\n        });\n    };\n    return commit(5);\n  }\n\n  abortTransactionalSession(transactionalSection: any): Promise<void> {\n    return transactionalSection.abortTransaction().then(() => {\n      transactionalSection.endSession();\n    });\n  }\n}\n\nexport default MongoStorageAdapter;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"cb9fe62d9f038c6d8a9dab2f04ffd8fd07ea0c67"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_gbo8ccsw5=function(){return actualCoverage;};}return actualCoverage;}cov_gbo8ccsw5();cov_gbo8ccsw5().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_gbo8ccsw5().s[1]++;exports.default=exports.MongoStorageAdapter=void 0;var _MongoCollection=(cov_gbo8ccsw5().s[2]++,_interopRequireDefault(require("./MongoCollection")));var _MongoSchemaCollection=(cov_gbo8ccsw5().s[3]++,_interopRequireDefault(require("./MongoSchemaCollection")));var _StorageAdapter=(cov_gbo8ccsw5().s[4]++,require("../StorageAdapter"));var _mongodbUrl=(cov_gbo8ccsw5().s[5]++,require("../../../vendor/mongodbUrl"));var _MongoTransform=(cov_gbo8ccsw5().s[6]++,require("./MongoTransform"));var _node=(cov_gbo8ccsw5().s[7]++,_interopRequireDefault(require("parse/node")));var _lodash=(cov_gbo8ccsw5().s[8]++,_interopRequireDefault(require("lodash")));var _defaults=(cov_gbo8ccsw5().s[9]++,_interopRequireDefault(require("../../../defaults")));var _logger=(cov_gbo8ccsw5().s[10]++,_interopRequireDefault(require("../../../logger")));function _interopRequireDefault(obj){cov_gbo8ccsw5().f[0]++;cov_gbo8ccsw5().s[11]++;return(cov_gbo8ccsw5().b[1][0]++,obj)&&(cov_gbo8ccsw5().b[1][1]++,obj.__esModule)?(cov_gbo8ccsw5().b[0][0]++,obj):(cov_gbo8ccsw5().b[0][1]++,{default:obj});}function ownKeys(object,enumerableOnly){cov_gbo8ccsw5().f[1]++;var keys=(cov_gbo8ccsw5().s[12]++,Object.keys(object));cov_gbo8ccsw5().s[13]++;if(Object.getOwnPropertySymbols){cov_gbo8ccsw5().b[2][0]++;var symbols=(cov_gbo8ccsw5().s[14]++,Object.getOwnPropertySymbols(object));cov_gbo8ccsw5().s[15]++;if(enumerableOnly){cov_gbo8ccsw5().b[3][0]++;cov_gbo8ccsw5().s[16]++;symbols=symbols.filter(function(sym){cov_gbo8ccsw5().f[2]++;cov_gbo8ccsw5().s[17]++;return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}else{cov_gbo8ccsw5().b[3][1]++;}cov_gbo8ccsw5().s[18]++;keys.push.apply(keys,symbols);}else{cov_gbo8ccsw5().b[2][1]++;}cov_gbo8ccsw5().s[19]++;return keys;}function _objectSpread(target){cov_gbo8ccsw5().f[3]++;cov_gbo8ccsw5().s[20]++;for(var i=(cov_gbo8ccsw5().s[21]++,1);i<arguments.length;i++){var source=(cov_gbo8ccsw5().s[22]++,arguments[i]!=null?(cov_gbo8ccsw5().b[4][0]++,arguments[i]):(cov_gbo8ccsw5().b[4][1]++,{}));cov_gbo8ccsw5().s[23]++;if(i%2){cov_gbo8ccsw5().b[5][0]++;cov_gbo8ccsw5().s[24]++;ownKeys(Object(source),true).forEach(function(key){cov_gbo8ccsw5().f[4]++;cov_gbo8ccsw5().s[25]++;_defineProperty(target,key,source[key]);});}else{cov_gbo8ccsw5().b[5][1]++;cov_gbo8ccsw5().s[26]++;if(Object.getOwnPropertyDescriptors){cov_gbo8ccsw5().b[6][0]++;cov_gbo8ccsw5().s[27]++;Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{cov_gbo8ccsw5().b[6][1]++;cov_gbo8ccsw5().s[28]++;ownKeys(Object(source)).forEach(function(key){cov_gbo8ccsw5().f[5]++;cov_gbo8ccsw5().s[29]++;Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}}cov_gbo8ccsw5().s[30]++;return target;}function _defineProperty(obj,key,value){cov_gbo8ccsw5().f[6]++;cov_gbo8ccsw5().s[31]++;if(key in obj){cov_gbo8ccsw5().b[7][0]++;cov_gbo8ccsw5().s[32]++;Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{cov_gbo8ccsw5().b[7][1]++;cov_gbo8ccsw5().s[33]++;obj[key]=value;}cov_gbo8ccsw5().s[34]++;return obj;}function _objectWithoutProperties(source,excluded){cov_gbo8ccsw5().f[7]++;cov_gbo8ccsw5().s[35]++;if(source==null){cov_gbo8ccsw5().b[8][0]++;cov_gbo8ccsw5().s[36]++;return{};}else{cov_gbo8ccsw5().b[8][1]++;}var target=(cov_gbo8ccsw5().s[37]++,_objectWithoutPropertiesLoose(source,excluded));var key,i;cov_gbo8ccsw5().s[38]++;if(Object.getOwnPropertySymbols){cov_gbo8ccsw5().b[9][0]++;var sourceSymbolKeys=(cov_gbo8ccsw5().s[39]++,Object.getOwnPropertySymbols(source));cov_gbo8ccsw5().s[40]++;for(i=0;i<sourceSymbolKeys.length;i++){cov_gbo8ccsw5().s[41]++;key=sourceSymbolKeys[i];cov_gbo8ccsw5().s[42]++;if(excluded.indexOf(key)>=0){cov_gbo8ccsw5().b[10][0]++;cov_gbo8ccsw5().s[43]++;continue;}else{cov_gbo8ccsw5().b[10][1]++;}cov_gbo8ccsw5().s[44]++;if(!Object.prototype.propertyIsEnumerable.call(source,key)){cov_gbo8ccsw5().b[11][0]++;cov_gbo8ccsw5().s[45]++;continue;}else{cov_gbo8ccsw5().b[11][1]++;}cov_gbo8ccsw5().s[46]++;target[key]=source[key];}}else{cov_gbo8ccsw5().b[9][1]++;}cov_gbo8ccsw5().s[47]++;return target;}function _objectWithoutPropertiesLoose(source,excluded){cov_gbo8ccsw5().f[8]++;cov_gbo8ccsw5().s[48]++;if(source==null){cov_gbo8ccsw5().b[12][0]++;cov_gbo8ccsw5().s[49]++;return{};}else{cov_gbo8ccsw5().b[12][1]++;}var target=(cov_gbo8ccsw5().s[50]++,{});var sourceKeys=(cov_gbo8ccsw5().s[51]++,Object.keys(source));var key,i;cov_gbo8ccsw5().s[52]++;for(i=0;i<sourceKeys.length;i++){cov_gbo8ccsw5().s[53]++;key=sourceKeys[i];cov_gbo8ccsw5().s[54]++;if(excluded.indexOf(key)>=0){cov_gbo8ccsw5().b[13][0]++;cov_gbo8ccsw5().s[55]++;continue;}else{cov_gbo8ccsw5().b[13][1]++;}cov_gbo8ccsw5().s[56]++;target[key]=source[key];}cov_gbo8ccsw5().s[57]++;return target;}function _extends(){cov_gbo8ccsw5().f[9]++;cov_gbo8ccsw5().s[58]++;_extends=(cov_gbo8ccsw5().b[14][0]++,Object.assign)||(cov_gbo8ccsw5().b[14][1]++,function(target){cov_gbo8ccsw5().f[10]++;cov_gbo8ccsw5().s[59]++;for(var i=(cov_gbo8ccsw5().s[60]++,1);i<arguments.length;i++){var source=(cov_gbo8ccsw5().s[61]++,arguments[i]);cov_gbo8ccsw5().s[62]++;for(var key in source){cov_gbo8ccsw5().s[63]++;if(Object.prototype.hasOwnProperty.call(source,key)){cov_gbo8ccsw5().b[15][0]++;cov_gbo8ccsw5().s[64]++;target[key]=source[key];}else{cov_gbo8ccsw5().b[15][1]++;}}}cov_gbo8ccsw5().s[65]++;return target;});cov_gbo8ccsw5().s[66]++;return _extends.apply(this,arguments);}// -disable-next
const mongodb=(cov_gbo8ccsw5().s[67]++,require('mongodb'));const MongoClient=(cov_gbo8ccsw5().s[68]++,mongodb.MongoClient);const ReadPreference=(cov_gbo8ccsw5().s[69]++,mongodb.ReadPreference);const MongoSchemaCollectionName=(cov_gbo8ccsw5().s[70]++,'_SCHEMA');cov_gbo8ccsw5().s[71]++;const storageAdapterAllCollections=mongoAdapter=>{cov_gbo8ccsw5().f[11]++;cov_gbo8ccsw5().s[72]++;return mongoAdapter.connect().then(()=>{cov_gbo8ccsw5().f[12]++;cov_gbo8ccsw5().s[73]++;return mongoAdapter.database.collections();}).then(collections=>{cov_gbo8ccsw5().f[13]++;cov_gbo8ccsw5().s[74]++;return collections.filter(collection=>{cov_gbo8ccsw5().f[14]++;cov_gbo8ccsw5().s[75]++;if(collection.namespace.match(/\.system\./)){cov_gbo8ccsw5().b[16][0]++;cov_gbo8ccsw5().s[76]++;return false;}else{cov_gbo8ccsw5().b[16][1]++;}// TODO: If you have one app with a collection prefix that happens to be a prefix of another
// apps prefix, this will go very very badly. We should fix that somehow.
cov_gbo8ccsw5().s[77]++;return collection.collectionName.indexOf(mongoAdapter._collectionPrefix)==0;});});};cov_gbo8ccsw5().s[78]++;const convertParseSchemaToMongoSchema=_ref=>{cov_gbo8ccsw5().f[15]++;let schema=(cov_gbo8ccsw5().s[79]++,_extends({},_ref));cov_gbo8ccsw5().s[80]++;delete schema.fields._rperm;cov_gbo8ccsw5().s[81]++;delete schema.fields._wperm;cov_gbo8ccsw5().s[82]++;if(schema.className==='_User'){cov_gbo8ccsw5().b[17][0]++;cov_gbo8ccsw5().s[83]++;// Legacy mongo adapter knows about the difference between password and _hashed_password.
// Future database adapters will only know about _hashed_password.
// Note: Parse Server will bring back password with injectDefaultSchema, so we don't need
// to add _hashed_password back ever.
delete schema.fields._hashed_password;}else{cov_gbo8ccsw5().b[17][1]++;}cov_gbo8ccsw5().s[84]++;return schema;};// Returns { code, error } if invalid, or { result }, an object
// suitable for inserting into _SCHEMA collection, otherwise.
cov_gbo8ccsw5().s[85]++;const mongoSchemaFromFieldsAndClassNameAndCLP=(fields,className,classLevelPermissions,indexes)=>{cov_gbo8ccsw5().f[16]++;const mongoObject=(cov_gbo8ccsw5().s[86]++,{_id:className,objectId:'string',updatedAt:'string',createdAt:'string',_metadata:undefined});cov_gbo8ccsw5().s[87]++;for(const fieldName in fields){const _fields$fieldName=(cov_gbo8ccsw5().s[88]++,fields[fieldName]),{type,targetClass}=(cov_gbo8ccsw5().s[89]++,_fields$fieldName),fieldOptions=(cov_gbo8ccsw5().s[90]++,_objectWithoutProperties(_fields$fieldName,["type","targetClass"]));cov_gbo8ccsw5().s[91]++;mongoObject[fieldName]=_MongoSchemaCollection.default.parseFieldTypeToMongoFieldType({type,targetClass});cov_gbo8ccsw5().s[92]++;if((cov_gbo8ccsw5().b[19][0]++,fieldOptions)&&(cov_gbo8ccsw5().b[19][1]++,Object.keys(fieldOptions).length>0)){cov_gbo8ccsw5().b[18][0]++;cov_gbo8ccsw5().s[93]++;mongoObject._metadata=(cov_gbo8ccsw5().b[20][0]++,mongoObject._metadata)||(cov_gbo8ccsw5().b[20][1]++,{});cov_gbo8ccsw5().s[94]++;mongoObject._metadata.fields_options=(cov_gbo8ccsw5().b[21][0]++,mongoObject._metadata.fields_options)||(cov_gbo8ccsw5().b[21][1]++,{});cov_gbo8ccsw5().s[95]++;mongoObject._metadata.fields_options[fieldName]=fieldOptions;}else{cov_gbo8ccsw5().b[18][1]++;}}cov_gbo8ccsw5().s[96]++;if(typeof classLevelPermissions!=='undefined'){cov_gbo8ccsw5().b[22][0]++;cov_gbo8ccsw5().s[97]++;mongoObject._metadata=(cov_gbo8ccsw5().b[23][0]++,mongoObject._metadata)||(cov_gbo8ccsw5().b[23][1]++,{});cov_gbo8ccsw5().s[98]++;if(!classLevelPermissions){cov_gbo8ccsw5().b[24][0]++;cov_gbo8ccsw5().s[99]++;delete mongoObject._metadata.class_permissions;}else{cov_gbo8ccsw5().b[24][1]++;cov_gbo8ccsw5().s[100]++;mongoObject._metadata.class_permissions=classLevelPermissions;}}else{cov_gbo8ccsw5().b[22][1]++;}cov_gbo8ccsw5().s[101]++;if((cov_gbo8ccsw5().b[26][0]++,indexes)&&(cov_gbo8ccsw5().b[26][1]++,typeof indexes==='object')&&(cov_gbo8ccsw5().b[26][2]++,Object.keys(indexes).length>0)){cov_gbo8ccsw5().b[25][0]++;cov_gbo8ccsw5().s[102]++;mongoObject._metadata=(cov_gbo8ccsw5().b[27][0]++,mongoObject._metadata)||(cov_gbo8ccsw5().b[27][1]++,{});cov_gbo8ccsw5().s[103]++;mongoObject._metadata.indexes=indexes;}else{cov_gbo8ccsw5().b[25][1]++;}cov_gbo8ccsw5().s[104]++;if(!mongoObject._metadata){cov_gbo8ccsw5().b[28][0]++;cov_gbo8ccsw5().s[105]++;// cleanup the unused _metadata
delete mongoObject._metadata;}else{cov_gbo8ccsw5().b[28][1]++;}cov_gbo8ccsw5().s[106]++;return mongoObject;};function validateExplainValue(explain){cov_gbo8ccsw5().f[17]++;cov_gbo8ccsw5().s[107]++;if(explain){cov_gbo8ccsw5().b[29][0]++;// The list of allowed explain values is from node-mongodb-native/lib/explain.js
const explainAllowedValues=(cov_gbo8ccsw5().s[108]++,['queryPlanner','queryPlannerExtended','executionStats','allPlansExecution',false,true]);cov_gbo8ccsw5().s[109]++;if(!explainAllowedValues.includes(explain)){cov_gbo8ccsw5().b[30][0]++;cov_gbo8ccsw5().s[110]++;throw new _node.default.Error(_node.default.Error.INVALID_QUERY,'Invalid value for explain');}else{cov_gbo8ccsw5().b[30][1]++;}}else{cov_gbo8ccsw5().b[29][1]++;}}class MongoStorageAdapter{// Private
// Public
constructor({uri=(cov_gbo8ccsw5().b[31][0]++,_defaults.default.DefaultMongoURI),collectionPrefix=(cov_gbo8ccsw5().b[32][0]++,''),mongoOptions=(cov_gbo8ccsw5().b[33][0]++,{})}){cov_gbo8ccsw5().f[18]++;cov_gbo8ccsw5().s[111]++;this._uri=uri;cov_gbo8ccsw5().s[112]++;this._collectionPrefix=collectionPrefix;cov_gbo8ccsw5().s[113]++;this._mongoOptions=mongoOptions;cov_gbo8ccsw5().s[114]++;this._mongoOptions.useNewUrlParser=true;cov_gbo8ccsw5().s[115]++;this._mongoOptions.useUnifiedTopology=true;cov_gbo8ccsw5().s[116]++;this._onchange=()=>{cov_gbo8ccsw5().f[19]++;};// MaxTimeMS is not a global MongoDB client option, it is applied per operation.
cov_gbo8ccsw5().s[117]++;this._maxTimeMS=mongoOptions.maxTimeMS;cov_gbo8ccsw5().s[118]++;this.canSortOnJoinTables=true;cov_gbo8ccsw5().s[119]++;this.enableSchemaHooks=!!mongoOptions.enableSchemaHooks;cov_gbo8ccsw5().s[120]++;delete mongoOptions.enableSchemaHooks;cov_gbo8ccsw5().s[121]++;delete mongoOptions.maxTimeMS;}watch(callback){cov_gbo8ccsw5().f[20]++;cov_gbo8ccsw5().s[122]++;this._onchange=callback;}connect(){cov_gbo8ccsw5().f[21]++;cov_gbo8ccsw5().s[123]++;if(this.connectionPromise){cov_gbo8ccsw5().b[34][0]++;cov_gbo8ccsw5().s[124]++;return this.connectionPromise;}else{cov_gbo8ccsw5().b[34][1]++;}// parsing and re-formatting causes the auth value (if there) to get URI
// encoded
const encodedUri=(cov_gbo8ccsw5().s[125]++,(0,_mongodbUrl.format)((0,_mongodbUrl.parse)(this._uri)));cov_gbo8ccsw5().s[126]++;this.connectionPromise=MongoClient.connect(encodedUri,this._mongoOptions).then(client=>{cov_gbo8ccsw5().f[22]++;// Starting mongoDB 3.0, the MongoClient.connect don't return a DB anymore but a client
// Fortunately, we can get back the options and use them to select the proper DB.
// https://github.com/mongodb/node-mongodb-native/blob/2c35d76f08574225b8db02d7bef687123e6bb018/lib/mongo_client.js#L885
const options=(cov_gbo8ccsw5().s[127]++,client.s.options);const database=(cov_gbo8ccsw5().s[128]++,client.db(options.dbName));cov_gbo8ccsw5().s[129]++;if(!database){cov_gbo8ccsw5().b[35][0]++;cov_gbo8ccsw5().s[130]++;delete this.connectionPromise;cov_gbo8ccsw5().s[131]++;return;}else{cov_gbo8ccsw5().b[35][1]++;}cov_gbo8ccsw5().s[132]++;client.on('error',()=>{cov_gbo8ccsw5().f[23]++;cov_gbo8ccsw5().s[133]++;delete this.connectionPromise;});cov_gbo8ccsw5().s[134]++;client.on('close',()=>{cov_gbo8ccsw5().f[24]++;cov_gbo8ccsw5().s[135]++;delete this.connectionPromise;});cov_gbo8ccsw5().s[136]++;this.client=client;cov_gbo8ccsw5().s[137]++;this.database=database;}).catch(err=>{cov_gbo8ccsw5().f[25]++;cov_gbo8ccsw5().s[138]++;delete this.connectionPromise;cov_gbo8ccsw5().s[139]++;return Promise.reject(err);});cov_gbo8ccsw5().s[140]++;return this.connectionPromise;}handleError(error){cov_gbo8ccsw5().f[26]++;cov_gbo8ccsw5().s[141]++;if((cov_gbo8ccsw5().b[37][0]++,error)&&(cov_gbo8ccsw5().b[37][1]++,error.code===13)){cov_gbo8ccsw5().b[36][0]++;cov_gbo8ccsw5().s[142]++;// Unauthorized error
delete this.client;cov_gbo8ccsw5().s[143]++;delete this.database;cov_gbo8ccsw5().s[144]++;delete this.connectionPromise;cov_gbo8ccsw5().s[145]++;_logger.default.error('Received unauthorized error',{error:error});}else{cov_gbo8ccsw5().b[36][1]++;}cov_gbo8ccsw5().s[146]++;throw error;}handleShutdown(){cov_gbo8ccsw5().f[27]++;cov_gbo8ccsw5().s[147]++;if(!this.client){cov_gbo8ccsw5().b[38][0]++;cov_gbo8ccsw5().s[148]++;return Promise.resolve();}else{cov_gbo8ccsw5().b[38][1]++;}cov_gbo8ccsw5().s[149]++;return this.client.close(false);}_adaptiveCollection(name){cov_gbo8ccsw5().f[28]++;cov_gbo8ccsw5().s[150]++;return this.connect().then(()=>{cov_gbo8ccsw5().f[29]++;cov_gbo8ccsw5().s[151]++;return this.database.collection(this._collectionPrefix+name);}).then(rawCollection=>{cov_gbo8ccsw5().f[30]++;cov_gbo8ccsw5().s[152]++;return new _MongoCollection.default(rawCollection);}).catch(err=>{cov_gbo8ccsw5().f[31]++;cov_gbo8ccsw5().s[153]++;return this.handleError(err);});}_schemaCollection(){cov_gbo8ccsw5().f[32]++;cov_gbo8ccsw5().s[154]++;return this.connect().then(()=>{cov_gbo8ccsw5().f[33]++;cov_gbo8ccsw5().s[155]++;return this._adaptiveCollection(MongoSchemaCollectionName);}).then(collection=>{cov_gbo8ccsw5().f[34]++;cov_gbo8ccsw5().s[156]++;if((cov_gbo8ccsw5().b[40][0]++,!this._stream)&&(cov_gbo8ccsw5().b[40][1]++,this.enableSchemaHooks)){cov_gbo8ccsw5().b[39][0]++;cov_gbo8ccsw5().s[157]++;this._stream=collection._mongoCollection.watch();cov_gbo8ccsw5().s[158]++;this._stream.on('change',()=>{cov_gbo8ccsw5().f[35]++;cov_gbo8ccsw5().s[159]++;return this._onchange();});}else{cov_gbo8ccsw5().b[39][1]++;}cov_gbo8ccsw5().s[160]++;return new _MongoSchemaCollection.default(collection);});}classExists(name){cov_gbo8ccsw5().f[36]++;cov_gbo8ccsw5().s[161]++;return this.connect().then(()=>{cov_gbo8ccsw5().f[37]++;cov_gbo8ccsw5().s[162]++;return this.database.listCollections({name:this._collectionPrefix+name}).toArray();}).then(collections=>{cov_gbo8ccsw5().f[38]++;cov_gbo8ccsw5().s[163]++;return collections.length>0;}).catch(err=>{cov_gbo8ccsw5().f[39]++;cov_gbo8ccsw5().s[164]++;return this.handleError(err);});}setClassLevelPermissions(className,CLPs){cov_gbo8ccsw5().f[40]++;cov_gbo8ccsw5().s[165]++;return this._schemaCollection().then(schemaCollection=>{cov_gbo8ccsw5().f[41]++;cov_gbo8ccsw5().s[166]++;return schemaCollection.updateSchema(className,{$set:{'_metadata.class_permissions':CLPs}});}).catch(err=>{cov_gbo8ccsw5().f[42]++;cov_gbo8ccsw5().s[167]++;return this.handleError(err);});}setIndexesWithSchemaFormat(className,submittedIndexes,existingIndexes=(cov_gbo8ccsw5().b[41][0]++,{}),fields){cov_gbo8ccsw5().f[43]++;cov_gbo8ccsw5().s[168]++;if(submittedIndexes===undefined){cov_gbo8ccsw5().b[42][0]++;cov_gbo8ccsw5().s[169]++;return Promise.resolve();}else{cov_gbo8ccsw5().b[42][1]++;}cov_gbo8ccsw5().s[170]++;if(Object.keys(existingIndexes).length===0){cov_gbo8ccsw5().b[43][0]++;cov_gbo8ccsw5().s[171]++;existingIndexes={_id_:{_id:1}};}else{cov_gbo8ccsw5().b[43][1]++;}const deletePromises=(cov_gbo8ccsw5().s[172]++,[]);const insertedIndexes=(cov_gbo8ccsw5().s[173]++,[]);cov_gbo8ccsw5().s[174]++;Object.keys(submittedIndexes).forEach(name=>{cov_gbo8ccsw5().f[44]++;const field=(cov_gbo8ccsw5().s[175]++,submittedIndexes[name]);cov_gbo8ccsw5().s[176]++;if((cov_gbo8ccsw5().b[45][0]++,existingIndexes[name])&&(cov_gbo8ccsw5().b[45][1]++,field.__op!=='Delete')){cov_gbo8ccsw5().b[44][0]++;cov_gbo8ccsw5().s[177]++;throw new _node.default.Error(_node.default.Error.INVALID_QUERY,`Index ${name} exists, cannot update.`);}else{cov_gbo8ccsw5().b[44][1]++;}cov_gbo8ccsw5().s[178]++;if((cov_gbo8ccsw5().b[47][0]++,!existingIndexes[name])&&(cov_gbo8ccsw5().b[47][1]++,field.__op==='Delete')){cov_gbo8ccsw5().b[46][0]++;cov_gbo8ccsw5().s[179]++;throw new _node.default.Error(_node.default.Error.INVALID_QUERY,`Index ${name} does not exist, cannot delete.`);}else{cov_gbo8ccsw5().b[46][1]++;}cov_gbo8ccsw5().s[180]++;if(field.__op==='Delete'){cov_gbo8ccsw5().b[48][0]++;const promise=(cov_gbo8ccsw5().s[181]++,this.dropIndex(className,name));cov_gbo8ccsw5().s[182]++;deletePromises.push(promise);cov_gbo8ccsw5().s[183]++;delete existingIndexes[name];}else{cov_gbo8ccsw5().b[48][1]++;cov_gbo8ccsw5().s[184]++;Object.keys(field).forEach(key=>{cov_gbo8ccsw5().f[45]++;cov_gbo8ccsw5().s[185]++;if(!Object.prototype.hasOwnProperty.call(fields,key.indexOf('_p_')===0?(cov_gbo8ccsw5().b[50][0]++,key.replace('_p_','')):(cov_gbo8ccsw5().b[50][1]++,key))){cov_gbo8ccsw5().b[49][0]++;cov_gbo8ccsw5().s[186]++;throw new _node.default.Error(_node.default.Error.INVALID_QUERY,`Field ${key} does not exist, cannot add index.`);}else{cov_gbo8ccsw5().b[49][1]++;}});cov_gbo8ccsw5().s[187]++;existingIndexes[name]=field;cov_gbo8ccsw5().s[188]++;insertedIndexes.push({key:field,name});}});let insertPromise=(cov_gbo8ccsw5().s[189]++,Promise.resolve());cov_gbo8ccsw5().s[190]++;if(insertedIndexes.length>0){cov_gbo8ccsw5().b[51][0]++;cov_gbo8ccsw5().s[191]++;insertPromise=this.createIndexes(className,insertedIndexes);}else{cov_gbo8ccsw5().b[51][1]++;}cov_gbo8ccsw5().s[192]++;return Promise.all(deletePromises).then(()=>{cov_gbo8ccsw5().f[46]++;cov_gbo8ccsw5().s[193]++;return insertPromise;}).then(()=>{cov_gbo8ccsw5().f[47]++;cov_gbo8ccsw5().s[194]++;return this._schemaCollection();}).then(schemaCollection=>{cov_gbo8ccsw5().f[48]++;cov_gbo8ccsw5().s[195]++;return schemaCollection.updateSchema(className,{$set:{'_metadata.indexes':existingIndexes}});}).catch(err=>{cov_gbo8ccsw5().f[49]++;cov_gbo8ccsw5().s[196]++;return this.handleError(err);});}setIndexesFromMongo(className){cov_gbo8ccsw5().f[50]++;cov_gbo8ccsw5().s[197]++;return this.getIndexes(className).then(indexes=>{cov_gbo8ccsw5().f[51]++;cov_gbo8ccsw5().s[198]++;indexes=indexes.reduce((obj,index)=>{cov_gbo8ccsw5().f[52]++;cov_gbo8ccsw5().s[199]++;if(index.key._fts){cov_gbo8ccsw5().b[52][0]++;cov_gbo8ccsw5().s[200]++;delete index.key._fts;cov_gbo8ccsw5().s[201]++;delete index.key._ftsx;cov_gbo8ccsw5().s[202]++;for(const field in index.weights){cov_gbo8ccsw5().s[203]++;index.key[field]='text';}}else{cov_gbo8ccsw5().b[52][1]++;}cov_gbo8ccsw5().s[204]++;obj[index.name]=index.key;cov_gbo8ccsw5().s[205]++;return obj;},{});cov_gbo8ccsw5().s[206]++;return this._schemaCollection().then(schemaCollection=>{cov_gbo8ccsw5().f[53]++;cov_gbo8ccsw5().s[207]++;return schemaCollection.updateSchema(className,{$set:{'_metadata.indexes':indexes}});});}).catch(err=>{cov_gbo8ccsw5().f[54]++;cov_gbo8ccsw5().s[208]++;return this.handleError(err);}).catch(()=>{cov_gbo8ccsw5().f[55]++;cov_gbo8ccsw5().s[209]++;// Ignore if collection not found
return Promise.resolve();});}createClass(className,schema){cov_gbo8ccsw5().f[56]++;cov_gbo8ccsw5().s[210]++;schema=convertParseSchemaToMongoSchema(schema);const mongoObject=(cov_gbo8ccsw5().s[211]++,mongoSchemaFromFieldsAndClassNameAndCLP(schema.fields,className,schema.classLevelPermissions,schema.indexes));cov_gbo8ccsw5().s[212]++;mongoObject._id=className;cov_gbo8ccsw5().s[213]++;return this.setIndexesWithSchemaFormat(className,schema.indexes,{},schema.fields).then(()=>{cov_gbo8ccsw5().f[57]++;cov_gbo8ccsw5().s[214]++;return this._schemaCollection();}).then(schemaCollection=>{cov_gbo8ccsw5().f[58]++;cov_gbo8ccsw5().s[215]++;return schemaCollection.insertSchema(mongoObject);}).catch(err=>{cov_gbo8ccsw5().f[59]++;cov_gbo8ccsw5().s[216]++;return this.handleError(err);});}async updateFieldOptions(className,fieldName,type){cov_gbo8ccsw5().f[60]++;const schemaCollection=(cov_gbo8ccsw5().s[217]++,await this._schemaCollection());cov_gbo8ccsw5().s[218]++;await schemaCollection.updateFieldOptions(className,fieldName,type);}addFieldIfNotExists(className,fieldName,type){cov_gbo8ccsw5().f[61]++;cov_gbo8ccsw5().s[219]++;return this._schemaCollection().then(schemaCollection=>{cov_gbo8ccsw5().f[62]++;cov_gbo8ccsw5().s[220]++;return schemaCollection.addFieldIfNotExists(className,fieldName,type);}).then(()=>{cov_gbo8ccsw5().f[63]++;cov_gbo8ccsw5().s[221]++;return this.createIndexesIfNeeded(className,fieldName,type);}).catch(err=>{cov_gbo8ccsw5().f[64]++;cov_gbo8ccsw5().s[222]++;return this.handleError(err);});}// Drops a collection. Resolves with true if it was a Parse Schema (eg. _User, Custom, etc.)
// and resolves with false if it wasn't (eg. a join table). Rejects if deletion was impossible.
deleteClass(className){cov_gbo8ccsw5().f[65]++;cov_gbo8ccsw5().s[223]++;return this._adaptiveCollection(className).then(collection=>{cov_gbo8ccsw5().f[66]++;cov_gbo8ccsw5().s[224]++;return collection.drop();}).catch(error=>{cov_gbo8ccsw5().f[67]++;cov_gbo8ccsw5().s[225]++;// 'ns not found' means collection was already gone. Ignore deletion attempt.
if(error.message=='ns not found'){cov_gbo8ccsw5().b[53][0]++;cov_gbo8ccsw5().s[226]++;return;}else{cov_gbo8ccsw5().b[53][1]++;}cov_gbo8ccsw5().s[227]++;throw error;})// We've dropped the collection, now remove the _SCHEMA document
.then(()=>{cov_gbo8ccsw5().f[68]++;cov_gbo8ccsw5().s[228]++;return this._schemaCollection();}).then(schemaCollection=>{cov_gbo8ccsw5().f[69]++;cov_gbo8ccsw5().s[229]++;return schemaCollection.findAndDeleteSchema(className);}).catch(err=>{cov_gbo8ccsw5().f[70]++;cov_gbo8ccsw5().s[230]++;return this.handleError(err);});}deleteAllClasses(fast){cov_gbo8ccsw5().f[71]++;cov_gbo8ccsw5().s[231]++;return storageAdapterAllCollections(this).then(collections=>{cov_gbo8ccsw5().f[72]++;cov_gbo8ccsw5().s[232]++;return Promise.all(collections.map(collection=>{cov_gbo8ccsw5().f[73]++;cov_gbo8ccsw5().s[233]++;return fast?(cov_gbo8ccsw5().b[54][0]++,collection.deleteMany({})):(cov_gbo8ccsw5().b[54][1]++,collection.drop());}));});}// Remove the column and all the data. For Relations, the _Join collection is handled
// specially, this function does not delete _Join columns. It should, however, indicate
// that the relation fields does not exist anymore. In mongo, this means removing it from
// the _SCHEMA collection.  There should be no actual data in the collection under the same name
// as the relation column, so it's fine to attempt to delete it. If the fields listed to be
// deleted do not exist, this function should return successfully anyways. Checking for
// attempts to delete non-existent fields is the responsibility of Parse Server.
// Pointer field names are passed for legacy reasons: the original mongo
// format stored pointer field names differently in the database, and therefore
// needed to know the type of the field before it could delete it. Future database
// adapters should ignore the pointerFieldNames argument. All the field names are in
// fieldNames, they show up additionally in the pointerFieldNames database for use
// by the mongo adapter, which deals with the legacy mongo format.
// This function is not obligated to delete fields atomically. It is given the field
// names in a list so that databases that are capable of deleting fields atomically
// may do so.
// Returns a Promise.
deleteFields(className,schema,fieldNames){cov_gbo8ccsw5().f[74]++;const mongoFormatNames=(cov_gbo8ccsw5().s[234]++,fieldNames.map(fieldName=>{cov_gbo8ccsw5().f[75]++;cov_gbo8ccsw5().s[235]++;if(schema.fields[fieldName].type==='Pointer'){cov_gbo8ccsw5().b[55][0]++;cov_gbo8ccsw5().s[236]++;return`_p_${fieldName}`;}else{cov_gbo8ccsw5().b[55][1]++;cov_gbo8ccsw5().s[237]++;return fieldName;}}));const collectionUpdate=(cov_gbo8ccsw5().s[238]++,{$unset:{}});cov_gbo8ccsw5().s[239]++;mongoFormatNames.forEach(name=>{cov_gbo8ccsw5().f[76]++;cov_gbo8ccsw5().s[240]++;collectionUpdate['$unset'][name]=null;});const collectionFilter=(cov_gbo8ccsw5().s[241]++,{$or:[]});cov_gbo8ccsw5().s[242]++;mongoFormatNames.forEach(name=>{cov_gbo8ccsw5().f[77]++;cov_gbo8ccsw5().s[243]++;collectionFilter['$or'].push({[name]:{$exists:true}});});const schemaUpdate=(cov_gbo8ccsw5().s[244]++,{$unset:{}});cov_gbo8ccsw5().s[245]++;fieldNames.forEach(name=>{cov_gbo8ccsw5().f[78]++;cov_gbo8ccsw5().s[246]++;schemaUpdate['$unset'][name]=null;cov_gbo8ccsw5().s[247]++;schemaUpdate['$unset'][`_metadata.fields_options.${name}`]=null;});cov_gbo8ccsw5().s[248]++;return this._adaptiveCollection(className).then(collection=>{cov_gbo8ccsw5().f[79]++;cov_gbo8ccsw5().s[249]++;return collection.updateMany(collectionFilter,collectionUpdate);}).then(()=>{cov_gbo8ccsw5().f[80]++;cov_gbo8ccsw5().s[250]++;return this._schemaCollection();}).then(schemaCollection=>{cov_gbo8ccsw5().f[81]++;cov_gbo8ccsw5().s[251]++;return schemaCollection.updateSchema(className,schemaUpdate);}).catch(err=>{cov_gbo8ccsw5().f[82]++;cov_gbo8ccsw5().s[252]++;return this.handleError(err);});}// Return a promise for all schemas known to this adapter, in Parse format. In case the
// schemas cannot be retrieved, returns a promise that rejects. Requirements for the
// rejection reason are TBD.
getAllClasses(){cov_gbo8ccsw5().f[83]++;cov_gbo8ccsw5().s[253]++;return this._schemaCollection().then(schemasCollection=>{cov_gbo8ccsw5().f[84]++;cov_gbo8ccsw5().s[254]++;return schemasCollection._fetchAllSchemasFrom_SCHEMA();}).catch(err=>{cov_gbo8ccsw5().f[85]++;cov_gbo8ccsw5().s[255]++;return this.handleError(err);});}// Return a promise for the schema with the given name, in Parse format. If
// this adapter doesn't know about the schema, return a promise that rejects with
// undefined as the reason.
getClass(className){cov_gbo8ccsw5().f[86]++;cov_gbo8ccsw5().s[256]++;return this._schemaCollection().then(schemasCollection=>{cov_gbo8ccsw5().f[87]++;cov_gbo8ccsw5().s[257]++;return schemasCollection._fetchOneSchemaFrom_SCHEMA(className);}).catch(err=>{cov_gbo8ccsw5().f[88]++;cov_gbo8ccsw5().s[258]++;return this.handleError(err);});}// TODO: As yet not particularly well specified. Creates an object. Maybe shouldn't even need the schema,
// and should infer from the type. Or maybe does need the schema for validations. Or maybe needs
// the schema only for the legacy mongo format. We'll figure that out later.
createObject(className,schema,object,transactionalSession){cov_gbo8ccsw5().f[89]++;cov_gbo8ccsw5().s[259]++;schema=convertParseSchemaToMongoSchema(schema);const mongoObject=(cov_gbo8ccsw5().s[260]++,(0,_MongoTransform.parseObjectToMongoObjectForCreate)(className,object,schema));cov_gbo8ccsw5().s[261]++;return this._adaptiveCollection(className).then(collection=>{cov_gbo8ccsw5().f[90]++;cov_gbo8ccsw5().s[262]++;return collection.insertOne(mongoObject,transactionalSession);}).catch(error=>{cov_gbo8ccsw5().f[91]++;cov_gbo8ccsw5().s[263]++;if(error.code===11000){cov_gbo8ccsw5().b[56][0]++;// Duplicate value
const err=(cov_gbo8ccsw5().s[264]++,new _node.default.Error(_node.default.Error.DUPLICATE_VALUE,'A duplicate value for a field with unique values was provided'));cov_gbo8ccsw5().s[265]++;err.underlyingError=error;cov_gbo8ccsw5().s[266]++;if(error.message){cov_gbo8ccsw5().b[57][0]++;const matches=(cov_gbo8ccsw5().s[267]++,error.message.match(/index:[\sa-zA-Z0-9_\-\.]+\$?([a-zA-Z_-]+)_1/));cov_gbo8ccsw5().s[268]++;if((cov_gbo8ccsw5().b[59][0]++,matches)&&(cov_gbo8ccsw5().b[59][1]++,Array.isArray(matches))){cov_gbo8ccsw5().b[58][0]++;cov_gbo8ccsw5().s[269]++;err.userInfo={duplicated_field:matches[1]};}else{cov_gbo8ccsw5().b[58][1]++;}}else{cov_gbo8ccsw5().b[57][1]++;}cov_gbo8ccsw5().s[270]++;throw err;}else{cov_gbo8ccsw5().b[56][1]++;}cov_gbo8ccsw5().s[271]++;throw error;}).catch(err=>{cov_gbo8ccsw5().f[92]++;cov_gbo8ccsw5().s[272]++;return this.handleError(err);});}// Remove all objects that match the given Parse Query.
// If no objects match, reject with OBJECT_NOT_FOUND. If objects are found and deleted, resolve with undefined.
// If there is some other error, reject with INTERNAL_SERVER_ERROR.
deleteObjectsByQuery(className,schema,query,transactionalSession){cov_gbo8ccsw5().f[93]++;cov_gbo8ccsw5().s[273]++;schema=convertParseSchemaToMongoSchema(schema);cov_gbo8ccsw5().s[274]++;return this._adaptiveCollection(className).then(collection=>{cov_gbo8ccsw5().f[94]++;const mongoWhere=(cov_gbo8ccsw5().s[275]++,(0,_MongoTransform.transformWhere)(className,query,schema));cov_gbo8ccsw5().s[276]++;return collection.deleteMany(mongoWhere,transactionalSession);}).catch(err=>{cov_gbo8ccsw5().f[95]++;cov_gbo8ccsw5().s[277]++;return this.handleError(err);}).then(({result})=>{cov_gbo8ccsw5().f[96]++;cov_gbo8ccsw5().s[278]++;if(result.n===0){cov_gbo8ccsw5().b[60][0]++;cov_gbo8ccsw5().s[279]++;throw new _node.default.Error(_node.default.Error.OBJECT_NOT_FOUND,'Object not found.');}else{cov_gbo8ccsw5().b[60][1]++;}cov_gbo8ccsw5().s[280]++;return Promise.resolve();},()=>{cov_gbo8ccsw5().f[97]++;cov_gbo8ccsw5().s[281]++;throw new _node.default.Error(_node.default.Error.INTERNAL_SERVER_ERROR,'Database adapter error');});}// Apply the update to all objects that match the given Parse Query.
updateObjectsByQuery(className,schema,query,update,transactionalSession){cov_gbo8ccsw5().f[98]++;cov_gbo8ccsw5().s[282]++;schema=convertParseSchemaToMongoSchema(schema);const mongoUpdate=(cov_gbo8ccsw5().s[283]++,(0,_MongoTransform.transformUpdate)(className,update,schema));const mongoWhere=(cov_gbo8ccsw5().s[284]++,(0,_MongoTransform.transformWhere)(className,query,schema));cov_gbo8ccsw5().s[285]++;return this._adaptiveCollection(className).then(collection=>{cov_gbo8ccsw5().f[99]++;cov_gbo8ccsw5().s[286]++;return collection.updateMany(mongoWhere,mongoUpdate,transactionalSession);}).catch(err=>{cov_gbo8ccsw5().f[100]++;cov_gbo8ccsw5().s[287]++;return this.handleError(err);});}// Atomically finds and updates an object based on query.
// Return value not currently well specified.
findOneAndUpdate(className,schema,query,update,transactionalSession){cov_gbo8ccsw5().f[101]++;cov_gbo8ccsw5().s[288]++;schema=convertParseSchemaToMongoSchema(schema);const mongoUpdate=(cov_gbo8ccsw5().s[289]++,(0,_MongoTransform.transformUpdate)(className,update,schema));const mongoWhere=(cov_gbo8ccsw5().s[290]++,(0,_MongoTransform.transformWhere)(className,query,schema));cov_gbo8ccsw5().s[291]++;return this._adaptiveCollection(className).then(collection=>{cov_gbo8ccsw5().f[102]++;cov_gbo8ccsw5().s[292]++;return collection._mongoCollection.findOneAndUpdate(mongoWhere,mongoUpdate,{returnDocument:'after',session:(cov_gbo8ccsw5().b[61][0]++,transactionalSession)||(cov_gbo8ccsw5().b[61][1]++,undefined)});}).then(result=>{cov_gbo8ccsw5().f[103]++;cov_gbo8ccsw5().s[293]++;return(0,_MongoTransform.mongoObjectToParseObject)(className,result.value,schema);}).catch(error=>{cov_gbo8ccsw5().f[104]++;cov_gbo8ccsw5().s[294]++;if(error.code===11000){cov_gbo8ccsw5().b[62][0]++;cov_gbo8ccsw5().s[295]++;throw new _node.default.Error(_node.default.Error.DUPLICATE_VALUE,'A duplicate value for a field with unique values was provided');}else{cov_gbo8ccsw5().b[62][1]++;}cov_gbo8ccsw5().s[296]++;throw error;}).catch(err=>{cov_gbo8ccsw5().f[105]++;cov_gbo8ccsw5().s[297]++;return this.handleError(err);});}// Hopefully we can get rid of this. It's only used for config and hooks.
upsertOneObject(className,schema,query,update,transactionalSession){cov_gbo8ccsw5().f[106]++;cov_gbo8ccsw5().s[298]++;schema=convertParseSchemaToMongoSchema(schema);const mongoUpdate=(cov_gbo8ccsw5().s[299]++,(0,_MongoTransform.transformUpdate)(className,update,schema));const mongoWhere=(cov_gbo8ccsw5().s[300]++,(0,_MongoTransform.transformWhere)(className,query,schema));cov_gbo8ccsw5().s[301]++;return this._adaptiveCollection(className).then(collection=>{cov_gbo8ccsw5().f[107]++;cov_gbo8ccsw5().s[302]++;return collection.upsertOne(mongoWhere,mongoUpdate,transactionalSession);}).catch(err=>{cov_gbo8ccsw5().f[108]++;cov_gbo8ccsw5().s[303]++;return this.handleError(err);});}// Executes a find. Accepts: className, query in Parse format, and { skip, limit, sort }.
find(className,schema,query,{skip,limit,sort,keys,readPreference,hint,caseInsensitive,explain}){cov_gbo8ccsw5().f[109]++;cov_gbo8ccsw5().s[304]++;validateExplainValue(explain);cov_gbo8ccsw5().s[305]++;schema=convertParseSchemaToMongoSchema(schema);const mongoWhere=(cov_gbo8ccsw5().s[306]++,(0,_MongoTransform.transformWhere)(className,query,schema));const mongoSort=(cov_gbo8ccsw5().s[307]++,_lodash.default.mapKeys(sort,(value,fieldName)=>{cov_gbo8ccsw5().f[110]++;cov_gbo8ccsw5().s[308]++;return(0,_MongoTransform.transformKey)(className,fieldName,schema);}));const mongoKeys=(cov_gbo8ccsw5().s[309]++,_lodash.default.reduce(keys,(memo,key)=>{cov_gbo8ccsw5().f[111]++;cov_gbo8ccsw5().s[310]++;if(key==='ACL'){cov_gbo8ccsw5().b[63][0]++;cov_gbo8ccsw5().s[311]++;memo['_rperm']=1;cov_gbo8ccsw5().s[312]++;memo['_wperm']=1;}else{cov_gbo8ccsw5().b[63][1]++;cov_gbo8ccsw5().s[313]++;memo[(0,_MongoTransform.transformKey)(className,key,schema)]=1;}cov_gbo8ccsw5().s[314]++;return memo;},{}));// If we aren't requesting the `_id` field, we need to explicitly opt out
// of it. Doing so in parse-server is unusual, but it can allow us to
// optimize some queries with covering indexes.
cov_gbo8ccsw5().s[315]++;if((cov_gbo8ccsw5().b[65][0]++,keys)&&(cov_gbo8ccsw5().b[65][1]++,!mongoKeys._id)){cov_gbo8ccsw5().b[64][0]++;cov_gbo8ccsw5().s[316]++;mongoKeys._id=0;}else{cov_gbo8ccsw5().b[64][1]++;}cov_gbo8ccsw5().s[317]++;readPreference=this._parseReadPreference(readPreference);cov_gbo8ccsw5().s[318]++;return this.createTextIndexesIfNeeded(className,query,schema).then(()=>{cov_gbo8ccsw5().f[112]++;cov_gbo8ccsw5().s[319]++;return this._adaptiveCollection(className);}).then(collection=>{cov_gbo8ccsw5().f[113]++;cov_gbo8ccsw5().s[320]++;return collection.find(mongoWhere,{skip,limit,sort:mongoSort,keys:mongoKeys,maxTimeMS:this._maxTimeMS,readPreference,hint,caseInsensitive,explain});}).then(objects=>{cov_gbo8ccsw5().f[114]++;cov_gbo8ccsw5().s[321]++;if(explain){cov_gbo8ccsw5().b[66][0]++;cov_gbo8ccsw5().s[322]++;return objects;}else{cov_gbo8ccsw5().b[66][1]++;}cov_gbo8ccsw5().s[323]++;return objects.map(object=>{cov_gbo8ccsw5().f[115]++;cov_gbo8ccsw5().s[324]++;return(0,_MongoTransform.mongoObjectToParseObject)(className,object,schema);});}).catch(err=>{cov_gbo8ccsw5().f[116]++;cov_gbo8ccsw5().s[325]++;return this.handleError(err);});}ensureIndex(className,schema,fieldNames,indexName,caseInsensitive=(cov_gbo8ccsw5().b[67][0]++,false),options=(cov_gbo8ccsw5().b[68][0]++,{})){cov_gbo8ccsw5().f[117]++;cov_gbo8ccsw5().s[326]++;schema=convertParseSchemaToMongoSchema(schema);const indexCreationRequest=(cov_gbo8ccsw5().s[327]++,{});const mongoFieldNames=(cov_gbo8ccsw5().s[328]++,fieldNames.map(fieldName=>{cov_gbo8ccsw5().f[118]++;cov_gbo8ccsw5().s[329]++;return(0,_MongoTransform.transformKey)(className,fieldName,schema);}));cov_gbo8ccsw5().s[330]++;mongoFieldNames.forEach(fieldName=>{cov_gbo8ccsw5().f[119]++;cov_gbo8ccsw5().s[331]++;indexCreationRequest[fieldName]=options.indexType!==undefined?(cov_gbo8ccsw5().b[69][0]++,options.indexType):(cov_gbo8ccsw5().b[69][1]++,1);});const defaultOptions=(cov_gbo8ccsw5().s[332]++,{background:true,sparse:true});const indexNameOptions=(cov_gbo8ccsw5().s[333]++,indexName?(cov_gbo8ccsw5().b[70][0]++,{name:indexName}):(cov_gbo8ccsw5().b[70][1]++,{}));const ttlOptions=(cov_gbo8ccsw5().s[334]++,options.ttl!==undefined?(cov_gbo8ccsw5().b[71][0]++,{expireAfterSeconds:options.ttl}):(cov_gbo8ccsw5().b[71][1]++,{}));const caseInsensitiveOptions=(cov_gbo8ccsw5().s[335]++,caseInsensitive?(cov_gbo8ccsw5().b[72][0]++,{collation:_MongoCollection.default.caseInsensitiveCollation()}):(cov_gbo8ccsw5().b[72][1]++,{}));const indexOptions=(cov_gbo8ccsw5().s[336]++,_objectSpread(_objectSpread(_objectSpread(_objectSpread({},defaultOptions),caseInsensitiveOptions),indexNameOptions),ttlOptions));cov_gbo8ccsw5().s[337]++;return this._adaptiveCollection(className).then(collection=>{cov_gbo8ccsw5().f[120]++;cov_gbo8ccsw5().s[338]++;return new Promise((resolve,reject)=>{cov_gbo8ccsw5().f[121]++;cov_gbo8ccsw5().s[339]++;return collection._mongoCollection.createIndex(indexCreationRequest,indexOptions,error=>{cov_gbo8ccsw5().f[122]++;cov_gbo8ccsw5().s[340]++;return error?(cov_gbo8ccsw5().b[73][0]++,reject(error)):(cov_gbo8ccsw5().b[73][1]++,resolve());});});}).catch(err=>{cov_gbo8ccsw5().f[123]++;cov_gbo8ccsw5().s[341]++;return this.handleError(err);});}// Create a unique index. Unique indexes on nullable fields are not allowed. Since we don't
// currently know which fields are nullable and which aren't, we ignore that criteria.
// As such, we shouldn't expose this function to users of parse until we have an out-of-band
// Way of determining if a field is nullable. Undefined doesn't count against uniqueness,
// which is why we use sparse indexes.
ensureUniqueness(className,schema,fieldNames){cov_gbo8ccsw5().f[124]++;cov_gbo8ccsw5().s[342]++;schema=convertParseSchemaToMongoSchema(schema);const indexCreationRequest=(cov_gbo8ccsw5().s[343]++,{});const mongoFieldNames=(cov_gbo8ccsw5().s[344]++,fieldNames.map(fieldName=>{cov_gbo8ccsw5().f[125]++;cov_gbo8ccsw5().s[345]++;return(0,_MongoTransform.transformKey)(className,fieldName,schema);}));cov_gbo8ccsw5().s[346]++;mongoFieldNames.forEach(fieldName=>{cov_gbo8ccsw5().f[126]++;cov_gbo8ccsw5().s[347]++;indexCreationRequest[fieldName]=1;});cov_gbo8ccsw5().s[348]++;return this._adaptiveCollection(className).then(collection=>{cov_gbo8ccsw5().f[127]++;cov_gbo8ccsw5().s[349]++;return collection._ensureSparseUniqueIndexInBackground(indexCreationRequest);}).catch(error=>{cov_gbo8ccsw5().f[128]++;cov_gbo8ccsw5().s[350]++;if(error.code===11000){cov_gbo8ccsw5().b[74][0]++;cov_gbo8ccsw5().s[351]++;throw new _node.default.Error(_node.default.Error.DUPLICATE_VALUE,'Tried to ensure field uniqueness for a class that already has duplicates.');}else{cov_gbo8ccsw5().b[74][1]++;}cov_gbo8ccsw5().s[352]++;throw error;}).catch(err=>{cov_gbo8ccsw5().f[129]++;cov_gbo8ccsw5().s[353]++;return this.handleError(err);});}// Used in tests
_rawFind(className,query){cov_gbo8ccsw5().f[130]++;cov_gbo8ccsw5().s[354]++;return this._adaptiveCollection(className).then(collection=>{cov_gbo8ccsw5().f[131]++;cov_gbo8ccsw5().s[355]++;return collection.find(query,{maxTimeMS:this._maxTimeMS});}).catch(err=>{cov_gbo8ccsw5().f[132]++;cov_gbo8ccsw5().s[356]++;return this.handleError(err);});}// Executes a count.
count(className,schema,query,readPreference,hint){cov_gbo8ccsw5().f[133]++;cov_gbo8ccsw5().s[357]++;schema=convertParseSchemaToMongoSchema(schema);cov_gbo8ccsw5().s[358]++;readPreference=this._parseReadPreference(readPreference);cov_gbo8ccsw5().s[359]++;return this._adaptiveCollection(className).then(collection=>{cov_gbo8ccsw5().f[134]++;cov_gbo8ccsw5().s[360]++;return collection.count((0,_MongoTransform.transformWhere)(className,query,schema,true),{maxTimeMS:this._maxTimeMS,readPreference,hint});}).catch(err=>{cov_gbo8ccsw5().f[135]++;cov_gbo8ccsw5().s[361]++;return this.handleError(err);});}distinct(className,schema,query,fieldName){cov_gbo8ccsw5().f[136]++;cov_gbo8ccsw5().s[362]++;schema=convertParseSchemaToMongoSchema(schema);const isPointerField=(cov_gbo8ccsw5().s[363]++,(cov_gbo8ccsw5().b[75][0]++,schema.fields[fieldName])&&(cov_gbo8ccsw5().b[75][1]++,schema.fields[fieldName].type==='Pointer'));const transformField=(cov_gbo8ccsw5().s[364]++,(0,_MongoTransform.transformKey)(className,fieldName,schema));cov_gbo8ccsw5().s[365]++;return this._adaptiveCollection(className).then(collection=>{cov_gbo8ccsw5().f[137]++;cov_gbo8ccsw5().s[366]++;return collection.distinct(transformField,(0,_MongoTransform.transformWhere)(className,query,schema));}).then(objects=>{cov_gbo8ccsw5().f[138]++;cov_gbo8ccsw5().s[367]++;objects=objects.filter(obj=>{cov_gbo8ccsw5().f[139]++;cov_gbo8ccsw5().s[368]++;return obj!=null;});cov_gbo8ccsw5().s[369]++;return objects.map(object=>{cov_gbo8ccsw5().f[140]++;cov_gbo8ccsw5().s[370]++;if(isPointerField){cov_gbo8ccsw5().b[76][0]++;cov_gbo8ccsw5().s[371]++;return(0,_MongoTransform.transformPointerString)(schema,fieldName,object);}else{cov_gbo8ccsw5().b[76][1]++;}cov_gbo8ccsw5().s[372]++;return(0,_MongoTransform.mongoObjectToParseObject)(className,object,schema);});}).catch(err=>{cov_gbo8ccsw5().f[141]++;cov_gbo8ccsw5().s[373]++;return this.handleError(err);});}aggregate(className,schema,pipeline,readPreference,hint,explain){cov_gbo8ccsw5().f[142]++;cov_gbo8ccsw5().s[374]++;validateExplainValue(explain);let isPointerField=(cov_gbo8ccsw5().s[375]++,false);cov_gbo8ccsw5().s[376]++;pipeline=pipeline.map(stage=>{cov_gbo8ccsw5().f[143]++;cov_gbo8ccsw5().s[377]++;if(stage.$group){cov_gbo8ccsw5().b[77][0]++;cov_gbo8ccsw5().s[378]++;stage.$group=this._parseAggregateGroupArgs(schema,stage.$group);cov_gbo8ccsw5().s[379]++;if((cov_gbo8ccsw5().b[79][0]++,stage.$group._id)&&(cov_gbo8ccsw5().b[79][1]++,typeof stage.$group._id==='string')&&(cov_gbo8ccsw5().b[79][2]++,stage.$group._id.indexOf('$_p_')>=0)){cov_gbo8ccsw5().b[78][0]++;cov_gbo8ccsw5().s[380]++;isPointerField=true;}else{cov_gbo8ccsw5().b[78][1]++;}}else{cov_gbo8ccsw5().b[77][1]++;}cov_gbo8ccsw5().s[381]++;if(stage.$match){cov_gbo8ccsw5().b[80][0]++;cov_gbo8ccsw5().s[382]++;stage.$match=this._parseAggregateArgs(schema,stage.$match);}else{cov_gbo8ccsw5().b[80][1]++;}cov_gbo8ccsw5().s[383]++;if(stage.$project){cov_gbo8ccsw5().b[81][0]++;cov_gbo8ccsw5().s[384]++;stage.$project=this._parseAggregateProjectArgs(schema,stage.$project);}else{cov_gbo8ccsw5().b[81][1]++;}cov_gbo8ccsw5().s[385]++;if((cov_gbo8ccsw5().b[83][0]++,stage.$geoNear)&&(cov_gbo8ccsw5().b[83][1]++,stage.$geoNear.query)){cov_gbo8ccsw5().b[82][0]++;cov_gbo8ccsw5().s[386]++;stage.$geoNear.query=this._parseAggregateArgs(schema,stage.$geoNear.query);}else{cov_gbo8ccsw5().b[82][1]++;}cov_gbo8ccsw5().s[387]++;return stage;});cov_gbo8ccsw5().s[388]++;readPreference=this._parseReadPreference(readPreference);cov_gbo8ccsw5().s[389]++;return this._adaptiveCollection(className).then(collection=>{cov_gbo8ccsw5().f[144]++;cov_gbo8ccsw5().s[390]++;return collection.aggregate(pipeline,{readPreference,maxTimeMS:this._maxTimeMS,hint,explain});}).then(results=>{cov_gbo8ccsw5().f[145]++;cov_gbo8ccsw5().s[391]++;results.forEach(result=>{cov_gbo8ccsw5().f[146]++;cov_gbo8ccsw5().s[392]++;if(Object.prototype.hasOwnProperty.call(result,'_id')){cov_gbo8ccsw5().b[84][0]++;cov_gbo8ccsw5().s[393]++;if((cov_gbo8ccsw5().b[86][0]++,isPointerField)&&(cov_gbo8ccsw5().b[86][1]++,result._id)){cov_gbo8ccsw5().b[85][0]++;cov_gbo8ccsw5().s[394]++;result._id=result._id.split('$')[1];}else{cov_gbo8ccsw5().b[85][1]++;}cov_gbo8ccsw5().s[395]++;if((cov_gbo8ccsw5().b[88][0]++,result._id==null)||(cov_gbo8ccsw5().b[88][1]++,result._id==undefined)||(cov_gbo8ccsw5().b[88][2]++,['object','string'].includes(typeof result._id))&&(cov_gbo8ccsw5().b[88][3]++,_lodash.default.isEmpty(result._id))){cov_gbo8ccsw5().b[87][0]++;cov_gbo8ccsw5().s[396]++;result._id=null;}else{cov_gbo8ccsw5().b[87][1]++;}cov_gbo8ccsw5().s[397]++;result.objectId=result._id;cov_gbo8ccsw5().s[398]++;delete result._id;}else{cov_gbo8ccsw5().b[84][1]++;}});cov_gbo8ccsw5().s[399]++;return results;}).then(objects=>{cov_gbo8ccsw5().f[147]++;cov_gbo8ccsw5().s[400]++;return objects.map(object=>{cov_gbo8ccsw5().f[148]++;cov_gbo8ccsw5().s[401]++;return(0,_MongoTransform.mongoObjectToParseObject)(className,object,schema);});}).catch(err=>{cov_gbo8ccsw5().f[149]++;cov_gbo8ccsw5().s[402]++;return this.handleError(err);});}// This function will recursively traverse the pipeline and convert any Pointer or Date columns.
// If we detect a pointer column we will rename the column being queried for to match the column
// in the database. We also modify the value to what we expect the value to be in the database
// as well.
// For dates, the driver expects a Date object, but we have a string coming in. So we'll convert
// the string to a Date so the driver can perform the necessary comparison.
//
// The goal of this method is to look for the "leaves" of the pipeline and determine if it needs
// to be converted. The pipeline can have a few different forms. For more details, see:
//     https://docs.mongodb.com/manual/reference/operator/aggregation/
//
// If the pipeline is an array, it means we are probably parsing an '$and' or '$or' operator. In
// that case we need to loop through all of it's children to find the columns being operated on.
// If the pipeline is an object, then we'll loop through the keys checking to see if the key name
// matches one of the schema columns. If it does match a column and the column is a Pointer or
// a Date, then we'll convert the value as described above.
//
// As much as I hate recursion...this seemed like a good fit for it. We're essentially traversing
// down a tree to find a "leaf node" and checking to see if it needs to be converted.
_parseAggregateArgs(schema,pipeline){cov_gbo8ccsw5().f[150]++;cov_gbo8ccsw5().s[403]++;if(pipeline===null){cov_gbo8ccsw5().b[89][0]++;cov_gbo8ccsw5().s[404]++;return null;}else{cov_gbo8ccsw5().b[89][1]++;cov_gbo8ccsw5().s[405]++;if(Array.isArray(pipeline)){cov_gbo8ccsw5().b[90][0]++;cov_gbo8ccsw5().s[406]++;return pipeline.map(value=>{cov_gbo8ccsw5().f[151]++;cov_gbo8ccsw5().s[407]++;return this._parseAggregateArgs(schema,value);});}else{cov_gbo8ccsw5().b[90][1]++;cov_gbo8ccsw5().s[408]++;if(typeof pipeline==='object'){cov_gbo8ccsw5().b[91][0]++;const returnValue=(cov_gbo8ccsw5().s[409]++,{});cov_gbo8ccsw5().s[410]++;for(const field in pipeline){cov_gbo8ccsw5().s[411]++;if((cov_gbo8ccsw5().b[93][0]++,schema.fields[field])&&(cov_gbo8ccsw5().b[93][1]++,schema.fields[field].type==='Pointer')){cov_gbo8ccsw5().b[92][0]++;cov_gbo8ccsw5().s[412]++;if(typeof pipeline[field]==='object'){cov_gbo8ccsw5().b[94][0]++;cov_gbo8ccsw5().s[413]++;// Pass objects down to MongoDB...this is more than likely an $exists operator.
returnValue[`_p_${field}`]=pipeline[field];}else{cov_gbo8ccsw5().b[94][1]++;cov_gbo8ccsw5().s[414]++;returnValue[`_p_${field}`]=`${schema.fields[field].targetClass}$${pipeline[field]}`;}}else{cov_gbo8ccsw5().b[92][1]++;cov_gbo8ccsw5().s[415]++;if((cov_gbo8ccsw5().b[96][0]++,schema.fields[field])&&(cov_gbo8ccsw5().b[96][1]++,schema.fields[field].type==='Date')){cov_gbo8ccsw5().b[95][0]++;cov_gbo8ccsw5().s[416]++;returnValue[field]=this._convertToDate(pipeline[field]);}else{cov_gbo8ccsw5().b[95][1]++;cov_gbo8ccsw5().s[417]++;returnValue[field]=this._parseAggregateArgs(schema,pipeline[field]);}}cov_gbo8ccsw5().s[418]++;if(field==='objectId'){cov_gbo8ccsw5().b[97][0]++;cov_gbo8ccsw5().s[419]++;returnValue['_id']=returnValue[field];cov_gbo8ccsw5().s[420]++;delete returnValue[field];}else{cov_gbo8ccsw5().b[97][1]++;cov_gbo8ccsw5().s[421]++;if(field==='createdAt'){cov_gbo8ccsw5().b[98][0]++;cov_gbo8ccsw5().s[422]++;returnValue['_created_at']=returnValue[field];cov_gbo8ccsw5().s[423]++;delete returnValue[field];}else{cov_gbo8ccsw5().b[98][1]++;cov_gbo8ccsw5().s[424]++;if(field==='updatedAt'){cov_gbo8ccsw5().b[99][0]++;cov_gbo8ccsw5().s[425]++;returnValue['_updated_at']=returnValue[field];cov_gbo8ccsw5().s[426]++;delete returnValue[field];}else{cov_gbo8ccsw5().b[99][1]++;}}}}cov_gbo8ccsw5().s[427]++;return returnValue;}else{cov_gbo8ccsw5().b[91][1]++;}}}cov_gbo8ccsw5().s[428]++;return pipeline;}// This function is slightly different than the one above. Rather than trying to combine these
// two functions and making the code even harder to understand, I decided to split it up. The
// difference with this function is we are not transforming the values, only the keys of the
// pipeline.
_parseAggregateProjectArgs(schema,pipeline){cov_gbo8ccsw5().f[152]++;const returnValue=(cov_gbo8ccsw5().s[429]++,{});cov_gbo8ccsw5().s[430]++;for(const field in pipeline){cov_gbo8ccsw5().s[431]++;if((cov_gbo8ccsw5().b[101][0]++,schema.fields[field])&&(cov_gbo8ccsw5().b[101][1]++,schema.fields[field].type==='Pointer')){cov_gbo8ccsw5().b[100][0]++;cov_gbo8ccsw5().s[432]++;returnValue[`_p_${field}`]=pipeline[field];}else{cov_gbo8ccsw5().b[100][1]++;cov_gbo8ccsw5().s[433]++;returnValue[field]=this._parseAggregateArgs(schema,pipeline[field]);}cov_gbo8ccsw5().s[434]++;if(field==='objectId'){cov_gbo8ccsw5().b[102][0]++;cov_gbo8ccsw5().s[435]++;returnValue['_id']=returnValue[field];cov_gbo8ccsw5().s[436]++;delete returnValue[field];}else{cov_gbo8ccsw5().b[102][1]++;cov_gbo8ccsw5().s[437]++;if(field==='createdAt'){cov_gbo8ccsw5().b[103][0]++;cov_gbo8ccsw5().s[438]++;returnValue['_created_at']=returnValue[field];cov_gbo8ccsw5().s[439]++;delete returnValue[field];}else{cov_gbo8ccsw5().b[103][1]++;cov_gbo8ccsw5().s[440]++;if(field==='updatedAt'){cov_gbo8ccsw5().b[104][0]++;cov_gbo8ccsw5().s[441]++;returnValue['_updated_at']=returnValue[field];cov_gbo8ccsw5().s[442]++;delete returnValue[field];}else{cov_gbo8ccsw5().b[104][1]++;}}}}cov_gbo8ccsw5().s[443]++;return returnValue;}// This function is slightly different than the two above. MongoDB $group aggregate looks like:
//     { $group: { _id: <expression>, <field1>: { <accumulator1> : <expression1> }, ... } }
// The <expression> could be a column name, prefixed with the '$' character. We'll look for
// these <expression> and check to see if it is a 'Pointer' or if it's one of createdAt,
// updatedAt or objectId and change it accordingly.
_parseAggregateGroupArgs(schema,pipeline){cov_gbo8ccsw5().f[153]++;cov_gbo8ccsw5().s[444]++;if(Array.isArray(pipeline)){cov_gbo8ccsw5().b[105][0]++;cov_gbo8ccsw5().s[445]++;return pipeline.map(value=>{cov_gbo8ccsw5().f[154]++;cov_gbo8ccsw5().s[446]++;return this._parseAggregateGroupArgs(schema,value);});}else{cov_gbo8ccsw5().b[105][1]++;cov_gbo8ccsw5().s[447]++;if(typeof pipeline==='object'){cov_gbo8ccsw5().b[106][0]++;const returnValue=(cov_gbo8ccsw5().s[448]++,{});cov_gbo8ccsw5().s[449]++;for(const field in pipeline){cov_gbo8ccsw5().s[450]++;returnValue[field]=this._parseAggregateGroupArgs(schema,pipeline[field]);}cov_gbo8ccsw5().s[451]++;return returnValue;}else{cov_gbo8ccsw5().b[106][1]++;cov_gbo8ccsw5().s[452]++;if(typeof pipeline==='string'){cov_gbo8ccsw5().b[107][0]++;const field=(cov_gbo8ccsw5().s[453]++,pipeline.substring(1));cov_gbo8ccsw5().s[454]++;if((cov_gbo8ccsw5().b[109][0]++,schema.fields[field])&&(cov_gbo8ccsw5().b[109][1]++,schema.fields[field].type==='Pointer')){cov_gbo8ccsw5().b[108][0]++;cov_gbo8ccsw5().s[455]++;return`$_p_${field}`;}else{cov_gbo8ccsw5().b[108][1]++;cov_gbo8ccsw5().s[456]++;if(field=='createdAt'){cov_gbo8ccsw5().b[110][0]++;cov_gbo8ccsw5().s[457]++;return'$_created_at';}else{cov_gbo8ccsw5().b[110][1]++;cov_gbo8ccsw5().s[458]++;if(field=='updatedAt'){cov_gbo8ccsw5().b[111][0]++;cov_gbo8ccsw5().s[459]++;return'$_updated_at';}else{cov_gbo8ccsw5().b[111][1]++;}}}}else{cov_gbo8ccsw5().b[107][1]++;}}}cov_gbo8ccsw5().s[460]++;return pipeline;}// This function will attempt to convert the provided value to a Date object. Since this is part
// of an aggregation pipeline, the value can either be a string or it can be another object with
// an operator in it (like $gt, $lt, etc). Because of this I felt it was easier to make this a
// recursive method to traverse down to the "leaf node" which is going to be the string.
_convertToDate(value){cov_gbo8ccsw5().f[155]++;cov_gbo8ccsw5().s[461]++;if(typeof value==='string'){cov_gbo8ccsw5().b[112][0]++;cov_gbo8ccsw5().s[462]++;return new Date(value);}else{cov_gbo8ccsw5().b[112][1]++;}const returnValue=(cov_gbo8ccsw5().s[463]++,{});cov_gbo8ccsw5().s[464]++;for(const field in value){cov_gbo8ccsw5().s[465]++;returnValue[field]=this._convertToDate(value[field]);}cov_gbo8ccsw5().s[466]++;return returnValue;}_parseReadPreference(readPreference){cov_gbo8ccsw5().f[156]++;cov_gbo8ccsw5().s[467]++;if(readPreference){cov_gbo8ccsw5().b[113][0]++;cov_gbo8ccsw5().s[468]++;readPreference=readPreference.toUpperCase();}else{cov_gbo8ccsw5().b[113][1]++;}cov_gbo8ccsw5().s[469]++;switch(readPreference){case'PRIMARY':cov_gbo8ccsw5().b[114][0]++;cov_gbo8ccsw5().s[470]++;readPreference=ReadPreference.PRIMARY;cov_gbo8ccsw5().s[471]++;break;case'PRIMARY_PREFERRED':cov_gbo8ccsw5().b[114][1]++;cov_gbo8ccsw5().s[472]++;readPreference=ReadPreference.PRIMARY_PREFERRED;cov_gbo8ccsw5().s[473]++;break;case'SECONDARY':cov_gbo8ccsw5().b[114][2]++;cov_gbo8ccsw5().s[474]++;readPreference=ReadPreference.SECONDARY;cov_gbo8ccsw5().s[475]++;break;case'SECONDARY_PREFERRED':cov_gbo8ccsw5().b[114][3]++;cov_gbo8ccsw5().s[476]++;readPreference=ReadPreference.SECONDARY_PREFERRED;cov_gbo8ccsw5().s[477]++;break;case'NEAREST':cov_gbo8ccsw5().b[114][4]++;cov_gbo8ccsw5().s[478]++;readPreference=ReadPreference.NEAREST;cov_gbo8ccsw5().s[479]++;break;case undefined:cov_gbo8ccsw5().b[114][5]++;case null:cov_gbo8ccsw5().b[114][6]++;case'':cov_gbo8ccsw5().b[114][7]++;cov_gbo8ccsw5().s[480]++;break;default:cov_gbo8ccsw5().b[114][8]++;cov_gbo8ccsw5().s[481]++;throw new _node.default.Error(_node.default.Error.INVALID_QUERY,'Not supported read preference.');}cov_gbo8ccsw5().s[482]++;return readPreference;}performInitialization(){cov_gbo8ccsw5().f[157]++;cov_gbo8ccsw5().s[483]++;return Promise.resolve();}createIndex(className,index){cov_gbo8ccsw5().f[158]++;cov_gbo8ccsw5().s[484]++;return this._adaptiveCollection(className).then(collection=>{cov_gbo8ccsw5().f[159]++;cov_gbo8ccsw5().s[485]++;return collection._mongoCollection.createIndex(index);}).catch(err=>{cov_gbo8ccsw5().f[160]++;cov_gbo8ccsw5().s[486]++;return this.handleError(err);});}createIndexes(className,indexes){cov_gbo8ccsw5().f[161]++;cov_gbo8ccsw5().s[487]++;return this._adaptiveCollection(className).then(collection=>{cov_gbo8ccsw5().f[162]++;cov_gbo8ccsw5().s[488]++;return collection._mongoCollection.createIndexes(indexes);}).catch(err=>{cov_gbo8ccsw5().f[163]++;cov_gbo8ccsw5().s[489]++;return this.handleError(err);});}createIndexesIfNeeded(className,fieldName,type){cov_gbo8ccsw5().f[164]++;cov_gbo8ccsw5().s[490]++;if((cov_gbo8ccsw5().b[116][0]++,type)&&(cov_gbo8ccsw5().b[116][1]++,type.type==='Polygon')){cov_gbo8ccsw5().b[115][0]++;const index=(cov_gbo8ccsw5().s[491]++,{[fieldName]:'2dsphere'});cov_gbo8ccsw5().s[492]++;return this.createIndex(className,index);}else{cov_gbo8ccsw5().b[115][1]++;}cov_gbo8ccsw5().s[493]++;return Promise.resolve();}createTextIndexesIfNeeded(className,query,schema){cov_gbo8ccsw5().f[165]++;cov_gbo8ccsw5().s[494]++;for(const fieldName in query){cov_gbo8ccsw5().s[495]++;if((cov_gbo8ccsw5().b[118][0]++,!query[fieldName])||(cov_gbo8ccsw5().b[118][1]++,!query[fieldName].$text)){cov_gbo8ccsw5().b[117][0]++;cov_gbo8ccsw5().s[496]++;continue;}else{cov_gbo8ccsw5().b[117][1]++;}const existingIndexes=(cov_gbo8ccsw5().s[497]++,schema.indexes);cov_gbo8ccsw5().s[498]++;for(const key in existingIndexes){const index=(cov_gbo8ccsw5().s[499]++,existingIndexes[key]);cov_gbo8ccsw5().s[500]++;if(Object.prototype.hasOwnProperty.call(index,fieldName)){cov_gbo8ccsw5().b[119][0]++;cov_gbo8ccsw5().s[501]++;return Promise.resolve();}else{cov_gbo8ccsw5().b[119][1]++;}}const indexName=(cov_gbo8ccsw5().s[502]++,`${fieldName}_text`);const textIndex=(cov_gbo8ccsw5().s[503]++,{[indexName]:{[fieldName]:'text'}});cov_gbo8ccsw5().s[504]++;return this.setIndexesWithSchemaFormat(className,textIndex,existingIndexes,schema.fields).catch(error=>{cov_gbo8ccsw5().f[166]++;cov_gbo8ccsw5().s[505]++;if(error.code===85){cov_gbo8ccsw5().b[120][0]++;cov_gbo8ccsw5().s[506]++;// Index exist with different options
return this.setIndexesFromMongo(className);}else{cov_gbo8ccsw5().b[120][1]++;}cov_gbo8ccsw5().s[507]++;throw error;});}cov_gbo8ccsw5().s[508]++;return Promise.resolve();}getIndexes(className){cov_gbo8ccsw5().f[167]++;cov_gbo8ccsw5().s[509]++;return this._adaptiveCollection(className).then(collection=>{cov_gbo8ccsw5().f[168]++;cov_gbo8ccsw5().s[510]++;return collection._mongoCollection.indexes();}).catch(err=>{cov_gbo8ccsw5().f[169]++;cov_gbo8ccsw5().s[511]++;return this.handleError(err);});}dropIndex(className,index){cov_gbo8ccsw5().f[170]++;cov_gbo8ccsw5().s[512]++;return this._adaptiveCollection(className).then(collection=>{cov_gbo8ccsw5().f[171]++;cov_gbo8ccsw5().s[513]++;return collection._mongoCollection.dropIndex(index);}).catch(err=>{cov_gbo8ccsw5().f[172]++;cov_gbo8ccsw5().s[514]++;return this.handleError(err);});}dropAllIndexes(className){cov_gbo8ccsw5().f[173]++;cov_gbo8ccsw5().s[515]++;return this._adaptiveCollection(className).then(collection=>{cov_gbo8ccsw5().f[174]++;cov_gbo8ccsw5().s[516]++;return collection._mongoCollection.dropIndexes();}).catch(err=>{cov_gbo8ccsw5().f[175]++;cov_gbo8ccsw5().s[517]++;return this.handleError(err);});}updateSchemaWithIndexes(){cov_gbo8ccsw5().f[176]++;cov_gbo8ccsw5().s[518]++;return this.getAllClasses().then(classes=>{cov_gbo8ccsw5().f[177]++;const promises=(cov_gbo8ccsw5().s[519]++,classes.map(schema=>{cov_gbo8ccsw5().f[178]++;cov_gbo8ccsw5().s[520]++;return this.setIndexesFromMongo(schema.className);}));cov_gbo8ccsw5().s[521]++;return Promise.all(promises);}).catch(err=>{cov_gbo8ccsw5().f[179]++;cov_gbo8ccsw5().s[522]++;return this.handleError(err);});}createTransactionalSession(){cov_gbo8ccsw5().f[180]++;const transactionalSection=(cov_gbo8ccsw5().s[523]++,this.client.startSession());cov_gbo8ccsw5().s[524]++;transactionalSection.startTransaction();cov_gbo8ccsw5().s[525]++;return Promise.resolve(transactionalSection);}commitTransactionalSession(transactionalSection){cov_gbo8ccsw5().f[181]++;cov_gbo8ccsw5().s[526]++;const commit=retries=>{cov_gbo8ccsw5().f[182]++;cov_gbo8ccsw5().s[527]++;return transactionalSection.commitTransaction().catch(error=>{cov_gbo8ccsw5().f[183]++;cov_gbo8ccsw5().s[528]++;if((cov_gbo8ccsw5().b[122][0]++,error)&&(cov_gbo8ccsw5().b[122][1]++,error.hasErrorLabel('TransientTransactionError'))&&(cov_gbo8ccsw5().b[122][2]++,retries>0)){cov_gbo8ccsw5().b[121][0]++;cov_gbo8ccsw5().s[529]++;return commit(retries-1);}else{cov_gbo8ccsw5().b[121][1]++;}cov_gbo8ccsw5().s[530]++;throw error;}).then(()=>{cov_gbo8ccsw5().f[184]++;cov_gbo8ccsw5().s[531]++;transactionalSection.endSession();});};cov_gbo8ccsw5().s[532]++;return commit(5);}abortTransactionalSession(transactionalSection){cov_gbo8ccsw5().f[185]++;cov_gbo8ccsw5().s[533]++;return transactionalSection.abortTransaction().then(()=>{cov_gbo8ccsw5().f[186]++;cov_gbo8ccsw5().s[534]++;transactionalSection.endSession();});}}cov_gbo8ccsw5().s[535]++;exports.MongoStorageAdapter=MongoStorageAdapter;var _default=(cov_gbo8ccsw5().s[536]++,MongoStorageAdapter);cov_gbo8ccsw5().s[537]++;exports.default=_default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,