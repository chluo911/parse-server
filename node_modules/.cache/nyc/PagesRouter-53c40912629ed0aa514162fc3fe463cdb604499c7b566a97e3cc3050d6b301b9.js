"use strict";function cov_nn2vsrgv5(){var path="/parse-server/lib/Routers/PagesRouter.js";var hash="1012fe62c1946631b9dbcce21264e99e572df5b1";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Routers/PagesRouter.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:47}},"2":{start:{line:8,column:21},end:{line:8,column:72}},"3":{start:{line:10,column:14},end:{line:10,column:58}},"4":{start:{line:12,column:15},end:{line:12,column:57}},"5":{start:{line:14,column:12},end:{line:14,column:51}},"6":{start:{line:16,column:10},end:{line:16,column:23}},"7":{start:{line:18,column:12},end:{line:18,column:33}},"8":{start:{line:20,column:13},end:{line:20,column:56}},"9":{start:{line:22,column:16},end:{line:22,column:59}},"10":{start:{line:24,column:12},end:{line:24,column:54}},"11":{start:{line:26,column:39},end:{line:26,column:93}},"12":{start:{line:29,column:14},end:{line:62,column:2}},"13":{start:{line:64,column:19},end:{line:72,column:2}},"14":{start:{line:74,column:30},end:{line:74,column:51}},"15":{start:{line:76,column:15},end:{line:79,column:2}},"16":{start:{line:87,column:4},end:{line:87,column:12}},"17":{start:{line:89,column:4},end:{line:89,column:29}},"18":{start:{line:90,column:4},end:{line:90,column:76}},"19":{start:{line:91,column:4},end:{line:91,column:135}},"20":{start:{line:92,column:4},end:{line:92,column:28}},"21":{start:{line:93,column:4},end:{line:93,column:28}},"22":{start:{line:94,column:4},end:{line:94,column:29}},"23":{start:{line:95,column:4},end:{line:95,column:28}},"24":{start:{line:99,column:19},end:{line:99,column:29}},"25":{start:{line:103,column:8},end:{line:103,column:17}},"26":{start:{line:104,column:18},end:{line:104,column:91}},"27":{start:{line:106,column:4},end:{line:108,column:5}},"28":{start:{line:107,column:6},end:{line:107,column:28}},"29":{start:{line:110,column:4},end:{line:112,column:5}},"30":{start:{line:111,column:6},end:{line:111,column:68}},"31":{start:{line:114,column:27},end:{line:114,column:48}},"32":{start:{line:115,column:4},end:{line:125,column:7}},"33":{start:{line:116,column:21},end:{line:118,column:7}},"34":{start:{line:119,column:6},end:{line:119,column:72}},"35":{start:{line:121,column:21},end:{line:123,column:7}},"36":{start:{line:124,column:6},end:{line:124,column:76}},"37":{start:{line:129,column:19},end:{line:129,column:29}},"38":{start:{line:130,column:21},end:{line:130,column:38}},"39":{start:{line:132,column:4},end:{line:134,column:5}},"40":{start:{line:133,column:6},end:{line:133,column:28}},"41":{start:{line:136,column:4},end:{line:138,column:5}},"42":{start:{line:137,column:6},end:{line:137,column:68}},"43":{start:{line:140,column:27},end:{line:140,column:48}},"44":{start:{line:141,column:4},end:{line:145,column:7}},"45":{start:{line:142,column:6},end:{line:142,column:68}},"46":{start:{line:144,column:6},end:{line:144,column:65}},"47":{start:{line:149,column:19},end:{line:149,column:29}},"48":{start:{line:150,column:19},end:{line:156,column:5}},"49":{start:{line:157,column:4},end:{line:157,column:59}},"50":{start:{line:161,column:19},end:{line:161,column:29}},"51":{start:{line:163,column:4},end:{line:165,column:5}},"52":{start:{line:164,column:6},end:{line:164,column:28}},"53":{start:{line:170,column:8},end:{line:170,column:17}},"54":{start:{line:171,column:18},end:{line:171,column:91}},"55":{start:{line:173,column:4},end:{line:175,column:5}},"56":{start:{line:174,column:6},end:{line:174,column:64}},"57":{start:{line:177,column:4},end:{line:190,column:7}},"58":{start:{line:178,column:21},end:{line:183,column:7}},"59":{start:{line:184,column:6},end:{line:184,column:61}},"60":{start:{line:186,column:21},end:{line:188,column:7}},"61":{start:{line:189,column:6},end:{line:189,column:72}},"62":{start:{line:194,column:19},end:{line:194,column:29}},"63":{start:{line:196,column:4},end:{line:198,column:5}},"64":{start:{line:197,column:6},end:{line:197,column:28}},"65":{start:{line:204,column:8},end:{line:204,column:16}},"66":{start:{line:205,column:18},end:{line:205,column:91}},"67":{start:{line:207,column:4},end:{line:209,column:5}},"68":{start:{line:208,column:6},end:{line:208,column:64}},"69":{start:{line:211,column:4},end:{line:213,column:5}},"70":{start:{line:212,column:6},end:{line:212,column:90}},"71":{start:{line:215,column:4},end:{line:217,column:5}},"72":{start:{line:216,column:6},end:{line:216,column:82}},"73":{start:{line:219,column:4},end:{line:221,column:5}},"74":{start:{line:220,column:6},end:{line:220,column:90}},"75":{start:{line:223,column:4},end:{line:257,column:7}},"76":{start:{line:224,column:6},end:{line:226,column:9}},"77":{start:{line:228,column:6},end:{line:231,column:9}},"78":{start:{line:233,column:6},end:{line:244,column:7}},"79":{start:{line:234,column:8},end:{line:239,column:9}},"80":{start:{line:235,column:10},end:{line:238,column:13}},"81":{start:{line:241,column:8},end:{line:243,column:9}},"82":{start:{line:242,column:10},end:{line:242,column:86}},"83":{start:{line:246,column:20},end:{line:254,column:7}},"84":{start:{line:255,column:19},end:{line:255,column:84}},"85":{start:{line:256,column:6},end:{line:256,column:52}},"86":{start:{line:277,column:19},end:{line:277,column:29}},"87":{start:{line:279,column:21},end:{line:279,column:121}},"88":{start:{line:281,column:26},end:{line:281,column:55}},"89":{start:{line:283,column:4},end:{line:285,column:5}},"90":{start:{line:284,column:6},end:{line:284,column:29}},"91":{start:{line:287,column:4},end:{line:287,column:50}},"92":{start:{line:291,column:19},end:{line:291,column:38}},"93":{start:{line:292,column:4},end:{line:292,column:39}},"94":{start:{line:294,column:24},end:{line:294,column:40}},"95":{start:{line:295,column:24},end:{line:295,column:57}},"96":{start:{line:296,column:23},end:{line:296,column:79}},"97":{start:{line:298,column:22},end:{line:298,column:54}},"98":{start:{line:300,column:4},end:{line:302,column:5}},"99":{start:{line:301,column:6},end:{line:301,column:54}},"100":{start:{line:305,column:23},end:{line:305,column:25}},"101":{start:{line:307,column:4},end:{line:309,column:5}},"102":{start:{line:308,column:6},end:{line:308,column:62}},"103":{start:{line:312,column:4},end:{line:319,column:5}},"104":{start:{line:313,column:6},end:{line:316,column:168}},"105":{start:{line:316,column:12},end:{line:316,column:166}},"106":{start:{line:318,column:6},end:{line:318,column:121}},"107":{start:{line:331,column:25},end:{line:331,column:38}},"108":{start:{line:333,column:25},end:{line:333,column:76}},"109":{start:{line:336,column:4},end:{line:338,column:5}},"110":{start:{line:337,column:6},end:{line:337,column:45}},"111":{start:{line:341,column:19},end:{line:341,column:52}},"112":{start:{line:342,column:19},end:{line:342,column:38}},"113":{start:{line:344,column:4},end:{line:346,column:5}},"114":{start:{line:345,column:6},end:{line:345,column:29}},"115":{start:{line:349,column:25},end:{line:349,column:65}},"116":{start:{line:350,column:4},end:{line:350,column:65}},"117":{start:{line:384,column:4},end:{line:386,column:5}},"118":{start:{line:385,column:6},end:{line:385,column:16}},"119":{start:{line:389,column:4},end:{line:389,column:67}},"120":{start:{line:391,column:21},end:{line:391,column:41}},"121":{start:{line:392,column:21},end:{line:392,column:155}},"122":{start:{line:393,column:24},end:{line:393,column:50}},"123":{start:{line:394,column:4},end:{line:394,column:23}},"124":{start:{line:409,column:4},end:{line:411,column:5}},"125":{start:{line:410,column:6},end:{line:410,column:16}},"126":{start:{line:414,column:23},end:{line:414,column:54}},"127":{start:{line:417,column:4},end:{line:417,column:48}},"128":{start:{line:418,column:4},end:{line:418,column:66}},"129":{start:{line:419,column:4},end:{line:419,column:44}},"130":{start:{line:420,column:4},end:{line:420,column:24}},"131":{start:{line:437,column:4},end:{line:441,column:5}},"132":{start:{line:438,column:6},end:{line:438,column:39}},"133":{start:{line:440,column:6},end:{line:440,column:29}},"134":{start:{line:444,column:29},end:{line:444,column:243}},"135":{start:{line:446,column:4},end:{line:448,column:5}},"136":{start:{line:447,column:6},end:{line:447,column:52}},"137":{start:{line:451,column:28},end:{line:451,column:79}},"138":{start:{line:452,column:34},end:{line:452,column:76}},"139":{start:{line:453,column:4},end:{line:453,column:65}},"140":{start:{line:456,column:20},end:{line:462,column:10}},"141":{start:{line:457,column:6},end:{line:459,column:7}},"142":{start:{line:458,column:8},end:{line:458,column:66}},"143":{start:{line:461,column:6},end:{line:461,column:15}},"144":{start:{line:463,column:4},end:{line:466,column:6}},"145":{start:{line:479,column:4},end:{line:483,column:5}},"146":{start:{line:480,column:6},end:{line:480,column:39}},"147":{start:{line:482,column:6},end:{line:482,column:29}},"148":{start:{line:485,column:4},end:{line:487,column:6}},"149":{start:{line:507,column:27},end:{line:507,column:60}},"150":{start:{line:510,column:4},end:{line:512,column:5}},"151":{start:{line:511,column:6},end:{line:511,column:43}},"152":{start:{line:514,column:4},end:{line:514,column:64}},"153":{start:{line:522,column:4},end:{line:524,column:5}},"154":{start:{line:523,column:6},end:{line:523,column:13}},"155":{start:{line:526,column:4},end:{line:532,column:5}},"156":{start:{line:527,column:19},end:{line:527,column:94}},"157":{start:{line:529,column:6},end:{line:529,column:33}},"158":{start:{line:531,column:6},end:{line:531,column:41}},"159":{start:{line:544,column:4},end:{line:548,column:11}},"160":{start:{line:558,column:19},end:{line:558,column:201}},"161":{start:{line:559,column:4},end:{line:559,column:18}},"162":{start:{line:572,column:4},end:{line:578,column:11}},"163":{start:{line:573,column:6},end:{line:575,column:7}},"164":{start:{line:574,column:8},end:{line:574,column:23}},"165":{start:{line:577,column:6},end:{line:577,column:15}},"166":{start:{line:580,column:21},end:{line:580,column:33}},"167":{start:{line:581,column:4},end:{line:581,column:79}},"168":{start:{line:581,column:40},end:{line:581,column:77}},"169":{start:{line:582,column:27},end:{line:582,column:46}},"170":{start:{line:585,column:20},end:{line:591,column:10}},"171":{start:{line:586,column:6},end:{line:588,column:7}},"172":{start:{line:587,column:8},end:{line:587,column:66}},"173":{start:{line:590,column:6},end:{line:590,column:15}},"174":{start:{line:592,column:4},end:{line:596,column:6}},"175":{start:{line:600,column:4},end:{line:600,column:52}},"176":{start:{line:604,column:14},end:{line:604,column:29}},"177":{start:{line:605,column:4},end:{line:605,column:40}},"178":{start:{line:606,column:4},end:{line:606,column:36}},"179":{start:{line:607,column:4},end:{line:607,column:52}},"180":{start:{line:608,column:4},end:{line:608,column:16}},"181":{start:{line:609,column:4},end:{line:609,column:15}},"182":{start:{line:613,column:4},end:{line:616,column:6}},"183":{start:{line:620,column:18},end:{line:620,column:29}},"184":{start:{line:621,column:4},end:{line:621,column:23}},"185":{start:{line:622,column:4},end:{line:622,column:35}},"186":{start:{line:623,column:4},end:{line:623,column:16}},"187":{start:{line:635,column:4},end:{line:635,column:74}},"188":{start:{line:637,column:4},end:{line:639,column:5}},"189":{start:{line:638,column:6},end:{line:638,column:28}},"190":{start:{line:641,column:4},end:{line:641,column:29}},"191":{start:{line:645,column:4},end:{line:649,column:7}},"192":{start:{line:646,column:6},end:{line:646,column:26}},"193":{start:{line:648,column:6},end:{line:648,column:35}},"194":{start:{line:650,column:4},end:{line:654,column:7}},"195":{start:{line:651,column:6},end:{line:651,column:26}},"196":{start:{line:653,column:6},end:{line:653,column:47}},"197":{start:{line:655,column:4},end:{line:659,column:7}},"198":{start:{line:656,column:6},end:{line:656,column:26}},"199":{start:{line:658,column:6},end:{line:658,column:37}},"200":{start:{line:660,column:4},end:{line:664,column:7}},"201":{start:{line:661,column:6},end:{line:661,column:26}},"202":{start:{line:663,column:6},end:{line:663,column:37}},"203":{start:{line:665,column:4},end:{line:669,column:7}},"204":{start:{line:666,column:6},end:{line:666,column:26}},"205":{start:{line:668,column:6},end:{line:668,column:44}},"206":{start:{line:673,column:4},end:{line:693,column:5}},"207":{start:{line:674,column:6},end:{line:692,column:9}},"208":{start:{line:675,column:8},end:{line:675,column:28}},"209":{start:{line:680,column:12},end:{line:680,column:44}},"210":{start:{line:682,column:8},end:{line:684,column:9}},"211":{start:{line:683,column:10},end:{line:683,column:33}},"212":{start:{line:687,column:21},end:{line:690,column:10}},"213":{start:{line:691,column:8},end:{line:691,column:54}},"214":{start:{line:697,column:4},end:{line:701,column:7}},"215":{start:{line:698,column:6},end:{line:698,column:32}},"216":{start:{line:700,column:6},end:{line:700,column:35}},"217":{start:{line:705,column:19},end:{line:705,column:44}},"218":{start:{line:707,column:4},end:{line:707,column:43}},"219":{start:{line:708,column:4},end:{line:708,column:18}},"220":{start:{line:713,column:0},end:{line:713,column:34}},"221":{start:{line:714,column:15},end:{line:714,column:26}},"222":{start:{line:715,column:0},end:{line:715,column:27}},"223":{start:{line:716,column:0},end:{line:721,column:2}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:26,column:9},end:{line:26,column:31}},loc:{start:{line:26,column:37},end:{line:26,column:95}},line:26},"1":{name:"(anonymous_1)",decl:{start:{line:86,column:2},end:{line:86,column:3}},loc:{start:{line:86,column:26},end:{line:96,column:3}},line:86},"2":{name:"(anonymous_2)",decl:{start:{line:98,column:2},end:{line:98,column:3}},loc:{start:{line:98,column:19},end:{line:126,column:3}},line:98},"3":{name:"(anonymous_3)",decl:{start:{line:115,column:60},end:{line:115,column:61}},loc:{start:{line:115,column:66},end:{line:120,column:5}},line:115},"4":{name:"(anonymous_4)",decl:{start:{line:120,column:7},end:{line:120,column:8}},loc:{start:{line:120,column:13},end:{line:125,column:5}},line:120},"5":{name:"(anonymous_5)",decl:{start:{line:128,column:2},end:{line:128,column:3}},loc:{start:{line:128,column:31},end:{line:146,column:3}},line:128},"6":{name:"(anonymous_6)",decl:{start:{line:141,column:65},end:{line:141,column:66}},loc:{start:{line:141,column:71},end:{line:143,column:5}},line:141},"7":{name:"(anonymous_7)",decl:{start:{line:143,column:7},end:{line:143,column:8}},loc:{start:{line:143,column:13},end:{line:145,column:5}},line:143},"8":{name:"(anonymous_8)",decl:{start:{line:148,column:2},end:{line:148,column:3}},loc:{start:{line:148,column:21},end:{line:158,column:3}},line:148},"9":{name:"(anonymous_9)",decl:{start:{line:160,column:2},end:{line:160,column:3}},loc:{start:{line:160,column:28},end:{line:191,column:3}},line:160},"10":{name:"(anonymous_10)",decl:{start:{line:177,column:79},end:{line:177,column:80}},loc:{start:{line:177,column:85},end:{line:185,column:5}},line:177},"11":{name:"(anonymous_11)",decl:{start:{line:185,column:7},end:{line:185,column:8}},loc:{start:{line:185,column:13},end:{line:190,column:5}},line:185},"12":{name:"(anonymous_12)",decl:{start:{line:193,column:2},end:{line:193,column:3}},loc:{start:{line:193,column:21},end:{line:258,column:3}},line:193},"13":{name:"(anonymous_13)",decl:{start:{line:223,column:84},end:{line:223,column:85}},loc:{start:{line:223,column:90},end:{line:227,column:5}},line:223},"14":{name:"(anonymous_14)",decl:{start:{line:227,column:7},end:{line:227,column:8}},loc:{start:{line:227,column:14},end:{line:232,column:5}},line:227},"15":{name:"(anonymous_15)",decl:{start:{line:232,column:12},end:{line:232,column:13}},loc:{start:{line:232,column:22},end:{line:257,column:5}},line:232},"16":{name:"(anonymous_16)",decl:{start:{line:276,column:2},end:{line:276,column:3}},loc:{start:{line:276,column:49},end:{line:320,column:3}},line:276},"17":{name:"(anonymous_17)",decl:{start:{line:313,column:71},end:{line:313,column:72}},loc:{start:{line:316,column:12},end:{line:316,column:166}},line:316},"18":{name:"(anonymous_18)",decl:{start:{line:329,column:2},end:{line:329,column:3}},loc:{start:{line:329,column:19},end:{line:351,column:3}},line:329},"19":{name:"(anonymous_19)",decl:{start:{line:382,column:2},end:{line:382,column:3}},loc:{start:{line:382,column:29},end:{line:395,column:3}},line:382},"20":{name:"(anonymous_20)",decl:{start:{line:407,column:2},end:{line:407,column:3}},loc:{start:{line:407,column:43},end:{line:421,column:3}},line:407},"21":{name:"(anonymous_21)",decl:{start:{line:433,column:2},end:{line:433,column:3}},loc:{start:{line:433,column:59},end:{line:467,column:3}},line:433},"22":{name:"(anonymous_22)",decl:{start:{line:456,column:50},end:{line:456,column:51}},loc:{start:{line:456,column:60},end:{line:462,column:5}},line:456},"23":{name:"(anonymous_23)",decl:{start:{line:475,column:2},end:{line:475,column:3}},loc:{start:{line:475,column:27},end:{line:488,column:3}},line:475},"24":{name:"(anonymous_24)",decl:{start:{line:502,column:2},end:{line:502,column:3}},loc:{start:{line:502,column:27},end:{line:515,column:3}},line:502},"25":{name:"(anonymous_25)",decl:{start:{line:521,column:2},end:{line:521,column:3}},loc:{start:{line:521,column:21},end:{line:533,column:3}},line:521},"26":{name:"(anonymous_26)",decl:{start:{line:543,column:2},end:{line:543,column:3}},loc:{start:{line:543,column:27},end:{line:549,column:3}},line:543},"27":{name:"(anonymous_27)",decl:{start:{line:557,column:2},end:{line:557,column:3}},loc:{start:{line:557,column:17},end:{line:560,column:3}},line:557},"28":{name:"(anonymous_28)",decl:{start:{line:570,column:2},end:{line:570,column:3}},loc:{start:{line:570,column:38},end:{line:597,column:3}},line:570},"29":{name:"(anonymous_29)",decl:{start:{line:572,column:43},end:{line:572,column:44}},loc:{start:{line:572,column:53},end:{line:578,column:5}},line:572},"30":{name:"(anonymous_30)",decl:{start:{line:581,column:35},end:{line:581,column:36}},loc:{start:{line:581,column:40},end:{line:581,column:77}},line:581},"31":{name:"(anonymous_31)",decl:{start:{line:585,column:50},end:{line:585,column:51}},loc:{start:{line:585,column:60},end:{line:591,column:5}},line:585},"32":{name:"(anonymous_32)",decl:{start:{line:599,column:2},end:{line:599,column:3}},loc:{start:{line:599,column:24},end:{line:601,column:3}},line:599},"33":{name:"(anonymous_33)",decl:{start:{line:603,column:2},end:{line:603,column:3}},loc:{start:{line:603,column:48},end:{line:610,column:3}},line:603},"34":{name:"(anonymous_34)",decl:{start:{line:612,column:2},end:{line:612,column:3}},loc:{start:{line:612,column:13},end:{line:617,column:3}},line:612},"35":{name:"(anonymous_35)",decl:{start:{line:619,column:2},end:{line:619,column:3}},loc:{start:{line:619,column:19},end:{line:624,column:3}},line:619},"36":{name:"(anonymous_36)",decl:{start:{line:634,column:2},end:{line:634,column:3}},loc:{start:{line:634,column:41},end:{line:642,column:3}},line:634},"37":{name:"(anonymous_37)",decl:{start:{line:644,column:2},end:{line:644,column:3}},loc:{start:{line:644,column:21},end:{line:670,column:3}},line:644},"38":{name:"(anonymous_38)",decl:{start:{line:645,column:68},end:{line:645,column:69}},loc:{start:{line:645,column:75},end:{line:647,column:5}},line:645},"39":{name:"(anonymous_39)",decl:{start:{line:647,column:7},end:{line:647,column:8}},loc:{start:{line:647,column:14},end:{line:649,column:5}},line:647},"40":{name:"(anonymous_40)",decl:{start:{line:650,column:82},end:{line:650,column:83}},loc:{start:{line:650,column:89},end:{line:652,column:5}},line:650},"41":{name:"(anonymous_41)",decl:{start:{line:652,column:7},end:{line:652,column:8}},loc:{start:{line:652,column:14},end:{line:654,column:5}},line:652},"42":{name:"(anonymous_42)",decl:{start:{line:655,column:64},end:{line:655,column:65}},loc:{start:{line:655,column:71},end:{line:657,column:5}},line:655},"43":{name:"(anonymous_43)",decl:{start:{line:657,column:7},end:{line:657,column:8}},loc:{start:{line:657,column:14},end:{line:659,column:5}},line:657},"44":{name:"(anonymous_44)",decl:{start:{line:660,column:79},end:{line:660,column:80}},loc:{start:{line:660,column:86},end:{line:662,column:5}},line:660},"45":{name:"(anonymous_45)",decl:{start:{line:662,column:7},end:{line:662,column:8}},loc:{start:{line:662,column:14},end:{line:664,column:5}},line:662},"46":{name:"(anonymous_46)",decl:{start:{line:665,column:78},end:{line:665,column:79}},loc:{start:{line:665,column:85},end:{line:667,column:5}},line:665},"47":{name:"(anonymous_47)",decl:{start:{line:667,column:7},end:{line:667,column:8}},loc:{start:{line:667,column:14},end:{line:669,column:5}},line:667},"48":{name:"(anonymous_48)",decl:{start:{line:672,column:2},end:{line:672,column:3}},loc:{start:{line:672,column:22},end:{line:694,column:3}},line:672},"49":{name:"(anonymous_49)",decl:{start:{line:674,column:78},end:{line:674,column:79}},loc:{start:{line:674,column:85},end:{line:676,column:7}},line:674},"50":{name:"(anonymous_50)",decl:{start:{line:676,column:9},end:{line:676,column:10}},loc:{start:{line:676,column:22},end:{line:692,column:7}},line:676},"51":{name:"(anonymous_51)",decl:{start:{line:696,column:2},end:{line:696,column:3}},loc:{start:{line:696,column:21},end:{line:702,column:3}},line:696},"52":{name:"(anonymous_52)",decl:{start:{line:697,column:53},end:{line:697,column:54}},loc:{start:{line:697,column:60},end:{line:699,column:5}},line:697},"53":{name:"(anonymous_53)",decl:{start:{line:699,column:7},end:{line:699,column:8}},loc:{start:{line:699,column:14},end:{line:701,column:5}},line:699},"54":{name:"(anonymous_54)",decl:{start:{line:704,column:2},end:{line:704,column:3}},loc:{start:{line:704,column:18},end:{line:709,column:3}},line:704}},branchMap:{"0":{loc:{start:{line:26,column:46},end:{line:26,column:92}},type:"cond-expr",locations:[{start:{line:26,column:70},end:{line:26,column:73}},{start:{line:26,column:76},end:{line:26,column:92}}],line:26},"1":{loc:{start:{line:26,column:46},end:{line:26,column:67}},type:"binary-expr",locations:[{start:{line:26,column:46},end:{line:26,column:49}},{start:{line:26,column:53},end:{line:26,column:67}}],line:26},"2":{loc:{start:{line:86,column:14},end:{line:86,column:24}},type:"default-arg",locations:[{start:{line:86,column:22},end:{line:86,column:24}}],line:86},"3":{loc:{start:{line:90,column:25},end:{line:90,column:75}},type:"cond-expr",locations:[{start:{line:90,column:47},end:{line:90,column:66}},{start:{line:90,column:69},end:{line:90,column:75}}],line:90},"4":{loc:{start:{line:91,column:21},end:{line:91,column:134}},type:"cond-expr",locations:[{start:{line:91,column:39},end:{line:91,column:83}},{start:{line:91,column:86},end:{line:91,column:134}}],line:91},"5":{loc:{start:{line:104,column:18},end:{line:104,column:91}},type:"cond-expr",locations:[{start:{line:104,column:61},end:{line:104,column:80}},{start:{line:104,column:83},end:{line:104,column:91}}],line:104},"6":{loc:{start:{line:104,column:18},end:{line:104,column:58}},type:"binary-expr",locations:[{start:{line:104,column:18},end:{line:104,column:26}},{start:{line:104,column:30},end:{line:104,column:58}}],line:104},"7":{loc:{start:{line:106,column:4},end:{line:108,column:5}},type:"if",locations:[{start:{line:106,column:4},end:{line:108,column:5}},{start:{line:106,column:4},end:{line:108,column:5}}],line:106},"8":{loc:{start:{line:110,column:4},end:{line:112,column:5}},type:"if",locations:[{start:{line:110,column:4},end:{line:112,column:5}},{start:{line:110,column:4},end:{line:112,column:5}}],line:110},"9":{loc:{start:{line:110,column:8},end:{line:110,column:27}},type:"binary-expr",locations:[{start:{line:110,column:8},end:{line:110,column:14}},{start:{line:110,column:18},end:{line:110,column:27}}],line:110},"10":{loc:{start:{line:132,column:4},end:{line:134,column:5}},type:"if",locations:[{start:{line:132,column:4},end:{line:134,column:5}},{start:{line:132,column:4},end:{line:134,column:5}}],line:132},"11":{loc:{start:{line:136,column:4},end:{line:138,column:5}},type:"if",locations:[{start:{line:136,column:4},end:{line:138,column:5}},{start:{line:136,column:4},end:{line:138,column:5}}],line:136},"12":{loc:{start:{line:163,column:4},end:{line:165,column:5}},type:"if",locations:[{start:{line:163,column:4},end:{line:165,column:5}},{start:{line:163,column:4},end:{line:165,column:5}}],line:163},"13":{loc:{start:{line:171,column:18},end:{line:171,column:91}},type:"cond-expr",locations:[{start:{line:171,column:61},end:{line:171,column:80}},{start:{line:171,column:83},end:{line:171,column:91}}],line:171},"14":{loc:{start:{line:171,column:18},end:{line:171,column:58}},type:"binary-expr",locations:[{start:{line:171,column:18},end:{line:171,column:26}},{start:{line:171,column:30},end:{line:171,column:58}}],line:171},"15":{loc:{start:{line:173,column:4},end:{line:175,column:5}},type:"if",locations:[{start:{line:173,column:4},end:{line:175,column:5}},{start:{line:173,column:4},end:{line:175,column:5}}],line:173},"16":{loc:{start:{line:173,column:8},end:{line:173,column:27}},type:"binary-expr",locations:[{start:{line:173,column:8},end:{line:173,column:17}},{start:{line:173,column:21},end:{line:173,column:27}}],line:173},"17":{loc:{start:{line:196,column:4},end:{line:198,column:5}},type:"if",locations:[{start:{line:196,column:4},end:{line:198,column:5}},{start:{line:196,column:4},end:{line:198,column:5}}],line:196},"18":{loc:{start:{line:205,column:18},end:{line:205,column:91}},type:"cond-expr",locations:[{start:{line:205,column:61},end:{line:205,column:80}},{start:{line:205,column:83},end:{line:205,column:91}}],line:205},"19":{loc:{start:{line:205,column:18},end:{line:205,column:58}},type:"binary-expr",locations:[{start:{line:205,column:18},end:{line:205,column:26}},{start:{line:205,column:30},end:{line:205,column:58}}],line:205},"20":{loc:{start:{line:207,column:4},end:{line:209,column:5}},type:"if",locations:[{start:{line:207,column:4},end:{line:209,column:5}},{start:{line:207,column:4},end:{line:209,column:5}}],line:207},"21":{loc:{start:{line:207,column:8},end:{line:207,column:67}},type:"binary-expr",locations:[{start:{line:207,column:9},end:{line:207,column:18}},{start:{line:207,column:22},end:{line:207,column:28}},{start:{line:207,column:32},end:{line:207,column:45}},{start:{line:207,column:50},end:{line:207,column:67}}],line:207},"22":{loc:{start:{line:211,column:4},end:{line:213,column:5}},type:"if",locations:[{start:{line:211,column:4},end:{line:213,column:5}},{start:{line:211,column:4},end:{line:213,column:5}}],line:211},"23":{loc:{start:{line:215,column:4},end:{line:217,column:5}},type:"if",locations:[{start:{line:215,column:4},end:{line:217,column:5}},{start:{line:215,column:4},end:{line:217,column:5}}],line:215},"24":{loc:{start:{line:219,column:4},end:{line:221,column:5}},type:"if",locations:[{start:{line:219,column:4},end:{line:221,column:5}},{start:{line:219,column:4},end:{line:221,column:5}}],line:219},"25":{loc:{start:{line:233,column:6},end:{line:244,column:7}},type:"if",locations:[{start:{line:233,column:6},end:{line:244,column:7}},{start:{line:233,column:6},end:{line:244,column:7}}],line:233},"26":{loc:{start:{line:234,column:8},end:{line:239,column:9}},type:"if",locations:[{start:{line:234,column:8},end:{line:239,column:9}},{start:{line:234,column:8},end:{line:239,column:9}}],line:234},"27":{loc:{start:{line:241,column:8},end:{line:243,column:9}},type:"if",locations:[{start:{line:241,column:8},end:{line:243,column:9}},{start:{line:241,column:8},end:{line:243,column:9}}],line:241},"28":{loc:{start:{line:246,column:20},end:{line:254,column:7}},type:"cond-expr",locations:[{start:{line:246,column:37},end:{line:248,column:7}},{start:{line:248,column:10},end:{line:254,column:7}}],line:246},"29":{loc:{start:{line:255,column:19},end:{line:255,column:84}},type:"cond-expr",locations:[{start:{line:255,column:36},end:{line:255,column:62}},{start:{line:255,column:65},end:{line:255,column:84}}],line:255},"30":{loc:{start:{line:276,column:22},end:{line:276,column:33}},type:"default-arg",locations:[{start:{line:276,column:31},end:{line:276,column:33}}],line:276},"31":{loc:{start:{line:279,column:21},end:{line:279,column:121}},type:"cond-expr",locations:[{start:{line:279,column:50},end:{line:279,column:54}},{start:{line:279,column:57},end:{line:279,column:121}}],line:279},"32":{loc:{start:{line:279,column:57},end:{line:279,column:121}},type:"cond-expr",locations:[{start:{line:279,column:86},end:{line:279,column:98}},{start:{line:279,column:101},end:{line:279,column:121}}],line:279},"33":{loc:{start:{line:283,column:4},end:{line:285,column:5}},type:"if",locations:[{start:{line:283,column:4},end:{line:285,column:5}},{start:{line:283,column:4},end:{line:285,column:5}}],line:283},"34":{loc:{start:{line:300,column:4},end:{line:302,column:5}},type:"if",locations:[{start:{line:300,column:4},end:{line:302,column:5}},{start:{line:300,column:4},end:{line:302,column:5}}],line:300},"35":{loc:{start:{line:300,column:8},end:{line:300,column:54}},type:"binary-expr",locations:[{start:{line:300,column:8},end:{line:300,column:17}},{start:{line:300,column:21},end:{line:300,column:54}}],line:300},"36":{loc:{start:{line:307,column:4},end:{line:309,column:5}},type:"if",locations:[{start:{line:307,column:4},end:{line:309,column:5}},{start:{line:307,column:4},end:{line:309,column:5}}],line:307},"37":{loc:{start:{line:307,column:8},end:{line:307,column:76}},type:"binary-expr",locations:[{start:{line:307,column:8},end:{line:307,column:39}},{start:{line:307,column:43},end:{line:307,column:76}}],line:307},"38":{loc:{start:{line:312,column:4},end:{line:319,column:5}},type:"if",locations:[{start:{line:312,column:4},end:{line:319,column:5}},{start:{line:312,column:4},end:{line:319,column:5}}],line:312},"39":{loc:{start:{line:312,column:8},end:{line:312,column:49}},type:"binary-expr",locations:[{start:{line:312,column:8},end:{line:312,column:39}},{start:{line:312,column:43},end:{line:312,column:49}}],line:312},"40":{loc:{start:{line:316,column:12},end:{line:316,column:166}},type:"cond-expr",locations:[{start:{line:316,column:23},end:{line:316,column:118}},{start:{line:316,column:121},end:{line:316,column:166}}],line:316},"41":{loc:{start:{line:318,column:13},end:{line:318,column:120}},type:"cond-expr",locations:[{start:{line:318,column:24},end:{line:318,column:65}},{start:{line:318,column:68},end:{line:318,column:120}}],line:318},"42":{loc:{start:{line:336,column:4},end:{line:338,column:5}},type:"if",locations:[{start:{line:336,column:4},end:{line:338,column:5}},{start:{line:336,column:4},end:{line:338,column:5}}],line:336},"43":{loc:{start:{line:336,column:8},end:{line:336,column:56}},type:"binary-expr",locations:[{start:{line:336,column:8},end:{line:336,column:21}},{start:{line:336,column:25},end:{line:336,column:56}}],line:336},"44":{loc:{start:{line:344,column:4},end:{line:346,column:5}},type:"if",locations:[{start:{line:344,column:4},end:{line:346,column:5}},{start:{line:344,column:4},end:{line:346,column:5}}],line:344},"45":{loc:{start:{line:384,column:4},end:{line:386,column:5}},type:"if",locations:[{start:{line:384,column:4},end:{line:386,column:5}},{start:{line:384,column:4},end:{line:386,column:5}}],line:384},"46":{loc:{start:{line:389,column:13},end:{line:389,column:66}},type:"binary-expr",locations:[{start:{line:389,column:13},end:{line:389,column:19}},{start:{line:389,column:23},end:{line:389,column:66}}],line:389},"47":{loc:{start:{line:392,column:21},end:{line:392,column:155}},type:"binary-expr",locations:[{start:{line:392,column:21},end:{line:392,column:48}},{start:{line:392,column:52},end:{line:392,column:81}},{start:{line:392,column:85},end:{line:392,column:149}},{start:{line:392,column:153},end:{line:392,column:155}}],line:392},"48":{loc:{start:{line:393,column:24},end:{line:393,column:50}},type:"binary-expr",locations:[{start:{line:393,column:24},end:{line:393,column:44}},{start:{line:393,column:48},end:{line:393,column:50}}],line:393},"49":{loc:{start:{line:407,column:30},end:{line:407,column:41}},type:"default-arg",locations:[{start:{line:407,column:39},end:{line:407,column:41}}],line:407},"50":{loc:{start:{line:409,column:4},end:{line:411,column:5}},type:"if",locations:[{start:{line:409,column:4},end:{line:411,column:5}},{start:{line:409,column:4},end:{line:411,column:5}}],line:409},"51":{loc:{start:{line:409,column:8},end:{line:409,column:86}},type:"binary-expr",locations:[{start:{line:409,column:8},end:{line:409,column:44}},{start:{line:409,column:48},end:{line:409,column:86}}],line:409},"52":{loc:{start:{line:433,column:27},end:{line:433,column:38}},type:"default-arg",locations:[{start:{line:433,column:36},end:{line:433,column:38}}],line:433},"53":{loc:{start:{line:433,column:40},end:{line:433,column:57}},type:"default-arg",locations:[{start:{line:433,column:55},end:{line:433,column:57}}],line:433},"54":{loc:{start:{line:444,column:29},end:{line:444,column:243}},type:"cond-expr",locations:[{start:{line:444,column:83},end:{line:444,column:120}},{start:{line:444,column:123},end:{line:444,column:243}}],line:444},"55":{loc:{start:{line:444,column:123},end:{line:444,column:243}},type:"cond-expr",locations:[{start:{line:444,column:209},end:{line:444,column:238}},{start:{line:444,column:241},end:{line:444,column:243}}],line:444},"56":{loc:{start:{line:446,column:4},end:{line:448,column:5}},type:"if",locations:[{start:{line:446,column:4},end:{line:448,column:5}},{start:{line:446,column:4},end:{line:448,column:5}}],line:446},"57":{loc:{start:{line:457,column:6},end:{line:459,column:7}},type:"if",locations:[{start:{line:457,column:6},end:{line:459,column:7}},{start:{line:457,column:6},end:{line:459,column:7}}],line:457},"58":{loc:{start:{line:510,column:4},end:{line:512,column:5}},type:"if",locations:[{start:{line:510,column:4},end:{line:512,column:5}},{start:{line:510,column:4},end:{line:512,column:5}}],line:510},"59":{loc:{start:{line:522,column:4},end:{line:524,column:5}},type:"if",locations:[{start:{line:522,column:4},end:{line:524,column:5}},{start:{line:522,column:4},end:{line:524,column:5}}],line:522},"60":{loc:{start:{line:544,column:11},end:{line:548,column:10}},type:"cond-expr",locations:[{start:{line:544,column:20},end:{line:548,column:5}},{start:{line:548,column:8},end:{line:548,column:10}}],line:544},"61":{loc:{start:{line:558,column:19},end:{line:558,column:201}},type:"binary-expr",locations:[{start:{line:558,column:19},end:{line:558,column:55}},{start:{line:558,column:59},end:{line:558,column:94}},{start:{line:558,column:98},end:{line:558,column:135}},{start:{line:558,column:139},end:{line:558,column:201}}],line:558},"62":{loc:{start:{line:558,column:20},end:{line:558,column:35}},type:"binary-expr",locations:[{start:{line:558,column:20},end:{line:558,column:29}},{start:{line:558,column:33},end:{line:558,column:35}}],line:558},"63":{loc:{start:{line:558,column:60},end:{line:558,column:74}},type:"binary-expr",locations:[{start:{line:558,column:60},end:{line:558,column:68}},{start:{line:558,column:72},end:{line:558,column:74}}],line:558},"64":{loc:{start:{line:558,column:99},end:{line:558,column:115}},type:"binary-expr",locations:[{start:{line:558,column:99},end:{line:558,column:109}},{start:{line:558,column:113},end:{line:558,column:115}}],line:558},"65":{loc:{start:{line:558,column:140},end:{line:558,column:157}},type:"binary-expr",locations:[{start:{line:558,column:140},end:{line:558,column:151}},{start:{line:558,column:155},end:{line:558,column:157}}],line:558},"66":{loc:{start:{line:573,column:6},end:{line:575,column:7}},type:"if",locations:[{start:{line:573,column:6},end:{line:575,column:7}},{start:{line:573,column:6},end:{line:575,column:7}}],line:573},"67":{loc:{start:{line:586,column:6},end:{line:588,column:7}},type:"if",locations:[{start:{line:586,column:6},end:{line:588,column:7}},{start:{line:586,column:6},end:{line:588,column:7}}],line:586},"68":{loc:{start:{line:605,column:11},end:{line:605,column:39}},type:"cond-expr",locations:[{start:{line:605,column:31},end:{line:605,column:33}},{start:{line:605,column:36},end:{line:605,column:39}}],line:605},"69":{loc:{start:{line:607,column:11},end:{line:607,column:51}},type:"cond-expr",locations:[{start:{line:607,column:34},end:{line:607,column:36}},{start:{line:607,column:39},end:{line:607,column:51}}],line:607},"70":{loc:{start:{line:634,column:17},end:{line:634,column:39}},type:"default-arg",locations:[{start:{line:634,column:34},end:{line:634,column:39}}],line:634},"71":{loc:{start:{line:635,column:37},end:{line:635,column:72}},type:"binary-expr",locations:[{start:{line:635,column:37},end:{line:635,column:53}},{start:{line:635,column:57},end:{line:635,column:72}}],line:635},"72":{loc:{start:{line:637,column:4},end:{line:639,column:5}},type:"if",locations:[{start:{line:637,column:4},end:{line:639,column:5}},{start:{line:637,column:4},end:{line:639,column:5}}],line:637},"73":{loc:{start:{line:637,column:8},end:{line:637,column:38}},type:"binary-expr",locations:[{start:{line:637,column:8},end:{line:637,column:19}},{start:{line:637,column:23},end:{line:637,column:38}}],line:637},"74":{loc:{start:{line:673,column:24},end:{line:673,column:59}},type:"binary-expr",locations:[{start:{line:673,column:24},end:{line:673,column:53}},{start:{line:673,column:57},end:{line:673,column:59}}],line:673},"75":{loc:{start:{line:679,column:10},end:{line:679,column:20}},type:"default-arg",locations:[{start:{line:679,column:18},end:{line:679,column:20}}],line:679},"76":{loc:{start:{line:680,column:12},end:{line:680,column:44}},type:"binary-expr",locations:[{start:{line:680,column:13},end:{line:680,column:37}},{start:{line:680,column:42},end:{line:680,column:44}}],line:680},"77":{loc:{start:{line:682,column:8},end:{line:684,column:9}},type:"if",locations:[{start:{line:682,column:8},end:{line:684,column:9}},{start:{line:682,column:8},end:{line:684,column:9}}],line:682}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0},b:{"0":[0,0],"1":[0,0],"2":[0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0,0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0,0,0],"48":[0,0],"49":[0],"50":[0,0],"51":[0,0],"52":[0],"53":[0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0,0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0],"76":[0,0],"77":[0,0]},inputSourceMap:{version:3,sources:["../../src/Routers/PagesRouter.js"],names:["pages","Object","freeze","passwordReset","Page","id","defaultFile","passwordResetSuccess","passwordResetLinkInvalid","emailVerificationSuccess","emailVerificationSendFail","emailVerificationSendSuccess","emailVerificationLinkInvalid","emailVerificationLinkExpired","pageParams","appName","appId","token","username","error","locale","publicServerUrl","pageParamHeaderPrefix","errors","jsonFailedFileLoading","fileOutsideAllowedScope","PagesRouter","PromiseRouter","constructor","pagesConfig","pagesEndpoint","pagesPath","path","resolve","__dirname","loadJsonResource","mountPagesRoutes","mountCustomRoutes","mountStaticRoute","verifyEmail","req","config","rawToken","query","toString","invalidRequest","goToPage","userController","then","params","resendVerificationEmail","body","publicServerURL","requestResetPassword","checkResetTokenValidity","applicationId","resetPassword","new_password","xhr","Parse","Error","USERNAME_MISSING","OTHER_CAUSE","PASSWORD_MISSING","updatePassword","Promise","success","err","result","status","response","page","responseType","redirect","forceRedirect","undefined","method","defaultParams","getDefaultParams","values","includes","notFound","assign","getLocale","defaultPath","defaultPagePath","defaultUrl","composePageUrl","customUrl","customUrls","Utils","isPath","redirectResponse","placeholders","enableLocalization","localizationJsonPath","getJsonPlaceholders","getLocalizedPath","subdir","pageResponse","staticRoute","relativePath","absolutePath","endsWith","fileResponse","getJsonTranslation","jsonParameters","localizationFallbackLocale","language","split","resource","translation","JSON","stringify","mustache","render","parse","data","readFile","e","configPlaceholders","prototype","call","allPlaceholders","paramsAndPlaceholders","headers","entries","reduce","m","p","toLowerCase","text","filePath","normalizedPath","normalize","startsWith","fs","json","require","url","location","URL","forEach","searchParams","set","locationString","file","join","message","setConfig","failGracefully","Config","get","route","customRoutes","handler","expressRouter","router","express","Router","use","module","exports"],mappings:"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",sourcesContent:["import PromiseRouter from '../PromiseRouter';\nimport Config from '../Config';\nimport express from 'express';\nimport path from 'path';\nimport { promises as fs } from 'fs';\nimport { Parse } from 'parse/node';\nimport Utils from '../Utils';\nimport mustache from 'mustache';\nimport Page from '../Page';\n\n// All pages with custom page key for reference and file name\nconst pages = Object.freeze({\n  passwordReset: new Page({ id: 'passwordReset', defaultFile: 'password_reset.html' }),\n  passwordResetSuccess: new Page({\n    id: 'passwordResetSuccess',\n    defaultFile: 'password_reset_success.html',\n  }),\n  passwordResetLinkInvalid: new Page({\n    id: 'passwordResetLinkInvalid',\n    defaultFile: 'password_reset_link_invalid.html',\n  }),\n  emailVerificationSuccess: new Page({\n    id: 'emailVerificationSuccess',\n    defaultFile: 'email_verification_success.html',\n  }),\n  emailVerificationSendFail: new Page({\n    id: 'emailVerificationSendFail',\n    defaultFile: 'email_verification_send_fail.html',\n  }),\n  emailVerificationSendSuccess: new Page({\n    id: 'emailVerificationSendSuccess',\n    defaultFile: 'email_verification_send_success.html',\n  }),\n  emailVerificationLinkInvalid: new Page({\n    id: 'emailVerificationLinkInvalid',\n    defaultFile: 'email_verification_link_invalid.html',\n  }),\n  emailVerificationLinkExpired: new Page({\n    id: 'emailVerificationLinkExpired',\n    defaultFile: 'email_verification_link_expired.html',\n  }),\n});\n\n// All page parameters for reference to be used as template placeholders or query params\nconst pageParams = Object.freeze({\n  appName: 'appName',\n  appId: 'appId',\n  token: 'token',\n  username: 'username',\n  error: 'error',\n  locale: 'locale',\n  publicServerUrl: 'publicServerUrl',\n});\n\n// The header prefix to add page params as response headers\nconst pageParamHeaderPrefix = 'x-parse-page-param-';\n\n// The errors being thrown\nconst errors = Object.freeze({\n  jsonFailedFileLoading: 'failed to load JSON file',\n  fileOutsideAllowedScope: 'not allowed to read file outside of pages directory',\n});\n\nexport class PagesRouter extends PromiseRouter {\n  /**\n   * Constructs a PagesRouter.\n   * @param {Object} pages The pages options from the Parse Server configuration.\n   */\n  constructor(pages = {}) {\n    super();\n\n    // Set instance properties\n    this.pagesConfig = pages;\n    this.pagesEndpoint = pages.pagesEndpoint ? pages.pagesEndpoint : 'apps';\n    this.pagesPath = pages.pagesPath\n      ? path.resolve('./', pages.pagesPath)\n      : path.resolve(__dirname, '../../public');\n    this.loadJsonResource();\n    this.mountPagesRoutes();\n    this.mountCustomRoutes();\n    this.mountStaticRoute();\n  }\n\n  verifyEmail(req) {\n    const config = req.config;\n    const { username, token: rawToken } = req.query;\n    const token = rawToken && typeof rawToken !== 'string' ? rawToken.toString() : rawToken;\n\n    if (!config) {\n      this.invalidRequest();\n    }\n\n    if (!token || !username) {\n      return this.goToPage(req, pages.emailVerificationLinkInvalid);\n    }\n\n    const userController = config.userController;\n    return userController.verifyEmail(username, token).then(\n      () => {\n        const params = {\n          [pageParams.username]: username,\n        };\n        return this.goToPage(req, pages.emailVerificationSuccess, params);\n      },\n      () => {\n        const params = {\n          [pageParams.username]: username,\n        };\n        return this.goToPage(req, pages.emailVerificationLinkExpired, params);\n      }\n    );\n  }\n\n  resendVerificationEmail(req) {\n    const config = req.config;\n    const username = req.body.username;\n\n    if (!config) {\n      this.invalidRequest();\n    }\n\n    if (!username) {\n      return this.goToPage(req, pages.emailVerificationLinkInvalid);\n    }\n\n    const userController = config.userController;\n\n    return userController.resendVerificationEmail(username).then(\n      () => {\n        return this.goToPage(req, pages.emailVerificationSendSuccess);\n      },\n      () => {\n        return this.goToPage(req, pages.emailVerificationSendFail);\n      }\n    );\n  }\n\n  passwordReset(req) {\n    const config = req.config;\n    const params = {\n      [pageParams.appId]: req.params.appId,\n      [pageParams.appName]: config.appName,\n      [pageParams.token]: req.query.token,\n      [pageParams.username]: req.query.username,\n      [pageParams.publicServerUrl]: config.publicServerURL,\n    };\n    return this.goToPage(req, pages.passwordReset, params);\n  }\n\n  requestResetPassword(req) {\n    const config = req.config;\n\n    if (!config) {\n      this.invalidRequest();\n    }\n\n    const { username, token: rawToken } = req.query;\n    const token = rawToken && typeof rawToken !== 'string' ? rawToken.toString() : rawToken;\n\n    if (!username || !token) {\n      return this.goToPage(req, pages.passwordResetLinkInvalid);\n    }\n\n    return config.userController.checkResetTokenValidity(username, token).then(\n      () => {\n        const params = {\n          [pageParams.token]: token,\n          [pageParams.username]: username,\n          [pageParams.appId]: config.applicationId,\n          [pageParams.appName]: config.appName,\n        };\n        return this.goToPage(req, pages.passwordReset, params);\n      },\n      () => {\n        const params = {\n          [pageParams.username]: username,\n        };\n        return this.goToPage(req, pages.passwordResetLinkInvalid, params);\n      }\n    );\n  }\n\n  resetPassword(req) {\n    const config = req.config;\n\n    if (!config) {\n      this.invalidRequest();\n    }\n\n    const { username, new_password, token: rawToken } = req.body;\n    const token = rawToken && typeof rawToken !== 'string' ? rawToken.toString() : rawToken;\n\n    if ((!username || !token || !new_password) && req.xhr === false) {\n      return this.goToPage(req, pages.passwordResetLinkInvalid);\n    }\n\n    if (!username) {\n      throw new Parse.Error(Parse.Error.USERNAME_MISSING, 'Missing username');\n    }\n\n    if (!token) {\n      throw new Parse.Error(Parse.Error.OTHER_CAUSE, 'Missing token');\n    }\n\n    if (!new_password) {\n      throw new Parse.Error(Parse.Error.PASSWORD_MISSING, 'Missing password');\n    }\n\n    return config.userController\n      .updatePassword(username, token, new_password)\n      .then(\n        () => {\n          return Promise.resolve({\n            success: true,\n          });\n        },\n        err => {\n          return Promise.resolve({\n            success: false,\n            err,\n          });\n        }\n      )\n      .then(result => {\n        if (req.xhr) {\n          if (result.success) {\n            return Promise.resolve({\n              status: 200,\n              response: 'Password successfully reset',\n            });\n          }\n          if (result.err) {\n            throw new Parse.Error(Parse.Error.OTHER_CAUSE, `${result.err}`);\n          }\n        }\n\n        const query = result.success\n          ? {\n            [pageParams.username]: username,\n          }\n          : {\n            [pageParams.username]: username,\n            [pageParams.token]: token,\n            [pageParams.appId]: config.applicationId,\n            [pageParams.error]: result.err,\n            [pageParams.appName]: config.appName,\n          };\n        const page = result.success ? pages.passwordResetSuccess : pages.passwordReset;\n\n        return this.goToPage(req, page, query, false);\n      });\n  }\n\n  /**\n   * Returns page content if the page is a local file or returns a\n   * redirect to a custom page.\n   * @param {Object} req The express request.\n   * @param {Page} page The page to go to.\n   * @param {Object} [params={}] The query parameters to attach to the URL in case of\n   * HTTP redirect responses for POST requests, or the placeholders to fill into\n   * the response content in case of HTTP content responses for GET requests.\n   * @param {Boolean} [responseType] Is true if a redirect response should be forced,\n   * false if a content response should be forced, undefined if the response type\n   * should depend on the request type by default:\n   * - GET request -> content response\n   * - POST request -> redirect response (PRG pattern)\n   * @returns {Promise<Object>} The PromiseRouter response.\n   */\n  goToPage(req, page, params = {}, responseType) {\n    const config = req.config;\n\n    // Determine redirect either by force, response setting or request method\n    const redirect = config.pages.forceRedirect\n      ? true\n      : responseType !== undefined\n        ? responseType\n        : req.method == 'POST';\n\n    // Include default parameters\n    const defaultParams = this.getDefaultParams(config);\n    if (Object.values(defaultParams).includes(undefined)) {\n      return this.notFound();\n    }\n    params = Object.assign(params, defaultParams);\n\n    // Add locale to params to ensure it is passed on with every request;\n    // that means, once a locale is set, it is passed on to any follow-up page,\n    // e.g. request_password_reset -> password_reset -> password_reset_success\n    const locale = this.getLocale(req);\n    params[pageParams.locale] = locale;\n\n    // Compose paths and URLs\n    const defaultFile = page.defaultFile;\n    const defaultPath = this.defaultPagePath(defaultFile);\n    const defaultUrl = this.composePageUrl(defaultFile, config.publicServerURL);\n\n    // If custom URL is set redirect to it without localization\n    const customUrl = config.pages.customUrls[page.id];\n    if (customUrl && !Utils.isPath(customUrl)) {\n      return this.redirectResponse(customUrl, params);\n    }\n\n    // Get JSON placeholders\n    let placeholders = {};\n    if (config.pages.enableLocalization && config.pages.localizationJsonPath) {\n      placeholders = this.getJsonPlaceholders(locale, params);\n    }\n\n    // Send response\n    if (config.pages.enableLocalization && locale) {\n      return Utils.getLocalizedPath(defaultPath, locale).then(({ path, subdir }) =>\n        redirect\n          ? this.redirectResponse(\n            this.composePageUrl(defaultFile, config.publicServerURL, subdir),\n            params\n          )\n          : this.pageResponse(path, params, placeholders)\n      );\n    } else {\n      return redirect\n        ? this.redirectResponse(defaultUrl, params)\n        : this.pageResponse(defaultPath, params, placeholders);\n    }\n  }\n\n  /**\n   * Serves a request to a static resource and localizes the resource if it\n   * is a HTML file.\n   * @param {Object} req The request object.\n   * @returns {Promise<Object>} The response.\n   */\n  staticRoute(req) {\n    // Get requested path\n    const relativePath = req.params[0];\n\n    // Resolve requested path to absolute path\n    const absolutePath = path.resolve(this.pagesPath, relativePath);\n\n    // If the requested file is not a HTML file send its raw content\n    if (!absolutePath || !absolutePath.endsWith('.html')) {\n      return this.fileResponse(absolutePath);\n    }\n\n    // Get parameters\n    const params = this.getDefaultParams(req.config);\n    const locale = this.getLocale(req);\n    if (locale) {\n      params.locale = locale;\n    }\n\n    // Get JSON placeholders\n    const placeholders = this.getJsonPlaceholders(locale, params);\n\n    return this.pageResponse(absolutePath, params, placeholders);\n  }\n\n  /**\n   * Returns a translation from the JSON resource for a given locale. The JSON\n   * resource is parsed according to i18next syntax.\n   *\n   * Example JSON content:\n   * ```js\n   *  {\n   *    \"en\": {               // resource for language `en` (English)\n   *      \"translation\": {\n   *        \"greeting\": \"Hello!\"\n   *      }\n   *    },\n   *    \"de\": {               // resource for language `de` (German)\n   *      \"translation\": {\n   *        \"greeting\": \"Hallo!\"\n   *      }\n   *    }\n   *    \"de-CH\": {            // resource for locale `de-CH` (Swiss German)\n   *      \"translation\": {\n   *        \"greeting\": \"Gr\xFCezi!\"\n   *      }\n   *    }\n   *  }\n   * ```\n   * @param {String} locale The locale to translate to.\n   * @returns {Object} The translation or an empty object if no matching\n   * translation was found.\n   */\n  getJsonTranslation(locale) {\n    // If there is no JSON resource\n    if (this.jsonParameters === undefined) {\n      return {};\n    }\n\n    // If locale is not set use the fallback locale\n    locale = locale || this.pagesConfig.localizationFallbackLocale;\n\n    // Get matching translation by locale, language or fallback locale\n    const language = locale.split('-')[0];\n    const resource =\n      this.jsonParameters[locale] ||\n      this.jsonParameters[language] ||\n      this.jsonParameters[this.pagesConfig.localizationFallbackLocale] ||\n      {};\n    const translation = resource.translation || {};\n    return translation;\n  }\n\n  /**\n   * Returns a translation from the JSON resource for a given locale with\n   * placeholders filled in by given parameters.\n   * @param {String} locale The locale to translate to.\n   * @param {Object} params The parameters to fill into any placeholders\n   * within the translations.\n   * @returns {Object} The translation or an empty object if no matching\n   * translation was found.\n   */\n  getJsonPlaceholders(locale, params = {}) {\n    // If localization is disabled or there is no JSON resource\n    if (!this.pagesConfig.enableLocalization || !this.pagesConfig.localizationJsonPath) {\n      return {};\n    }\n\n    // Get JSON placeholders\n    let placeholders = this.getJsonTranslation(locale);\n\n    // Fill in any placeholders in the translation; this allows a translation\n    // to contain default placeholders like {{appName}} which are filled here\n    placeholders = JSON.stringify(placeholders);\n    placeholders = mustache.render(placeholders, params);\n    placeholders = JSON.parse(placeholders);\n\n    return placeholders;\n  }\n\n  /**\n   * Creates a response with file content.\n   * @param {String} path The path of the file to return.\n   * @param {Object} [params={}] The parameters to be included in the response\n   * header. These will also be used to fill placeholders.\n   * @param {Object} [placeholders={}] The placeholders to fill in the content.\n   * These will not be included in the response header.\n   * @returns {Object} The Promise Router response.\n   */\n  async pageResponse(path, params = {}, placeholders = {}) {\n    // Get file content\n    let data;\n    try {\n      data = await this.readFile(path);\n    } catch (e) {\n      return this.notFound();\n    }\n\n    // Get config placeholders; can be an object, a function or an async function\n    let configPlaceholders =\n      typeof this.pagesConfig.placeholders === 'function'\n        ? this.pagesConfig.placeholders(params)\n        : Object.prototype.toString.call(this.pagesConfig.placeholders) === '[object Object]'\n          ? this.pagesConfig.placeholders\n          : {};\n    if (configPlaceholders instanceof Promise) {\n      configPlaceholders = await configPlaceholders;\n    }\n\n    // Fill placeholders\n    const allPlaceholders = Object.assign({}, configPlaceholders, placeholders);\n    const paramsAndPlaceholders = Object.assign({}, params, allPlaceholders);\n    data = mustache.render(data, paramsAndPlaceholders);\n\n    // Add placeholders in header to allow parsing for programmatic use\n    // of response, instead of having to parse the HTML content.\n    const headers = Object.entries(params).reduce((m, p) => {\n      if (p[1] !== undefined) {\n        m[`${pageParamHeaderPrefix}${p[0].toLowerCase()}`] = p[1];\n      }\n      return m;\n    }, {});\n\n    return { text: data, headers: headers };\n  }\n\n  /**\n   * Creates a response with file content.\n   * @param {String} path The path of the file to return.\n   * @returns {Object} The PromiseRouter response.\n   */\n  async fileResponse(path) {\n    // Get file content\n    let data;\n    try {\n      data = await this.readFile(path);\n    } catch (e) {\n      return this.notFound();\n    }\n\n    return { text: data };\n  }\n\n  /**\n   * Reads and returns the content of a file at a given path. File reading to\n   * serve content on the static route is only allowed from the pages\n   * directory on downwards.\n   * -----------------------------------------------------------------------\n   * **WARNING:** All file reads in the PagesRouter must be executed by this\n   * wrapper because it also detects and prevents common exploits.\n   * -----------------------------------------------------------------------\n   * @param {String} filePath The path to the file to read.\n   * @returns {Promise<String>} The file content.\n   */\n  async readFile(filePath) {\n    // Normalize path to prevent it from containing any directory changing\n    // UNIX patterns which could expose the whole file system, e.g.\n    // `http://example.com/parse/apps/../file.txt` requests a file outside\n    // of the pages directory scope.\n    const normalizedPath = path.normalize(filePath);\n\n    // Abort if the path is outside of the path directory scope\n    if (!normalizedPath.startsWith(this.pagesPath)) {\n      throw errors.fileOutsideAllowedScope;\n    }\n\n    return await fs.readFile(normalizedPath, 'utf-8');\n  }\n\n  /**\n   * Loads a language resource JSON file that is used for translations.\n   */\n  loadJsonResource() {\n    if (this.pagesConfig.localizationJsonPath === undefined) {\n      return;\n    }\n    try {\n      const json = require(path.resolve('./', this.pagesConfig.localizationJsonPath));\n      this.jsonParameters = json;\n    } catch (e) {\n      throw errors.jsonFailedFileLoading;\n    }\n  }\n\n  /**\n   * Extracts and returns the page default parameters from the Parse Server\n   * configuration. These parameters are made accessible in every page served\n   * by this router.\n   * @param {Object} config The Parse Server configuration.\n   * @returns {Object} The default parameters.\n   */\n  getDefaultParams(config) {\n    return config\n      ? {\n        [pageParams.appId]: config.appId,\n        [pageParams.appName]: config.appName,\n        [pageParams.publicServerUrl]: config.publicServerURL,\n      }\n      : {};\n  }\n\n  /**\n   * Extracts and returns the locale from an express request.\n   * @param {Object} req The express request.\n   * @returns {String|undefined} The locale, or undefined if no locale was set.\n   */\n  getLocale(req) {\n    const locale =\n      (req.query || {})[pageParams.locale] ||\n      (req.body || {})[pageParams.locale] ||\n      (req.params || {})[pageParams.locale] ||\n      (req.headers || {})[pageParamHeaderPrefix + pageParams.locale];\n    return locale;\n  }\n\n  /**\n   * Creates a response with http redirect.\n   * @param {Object} req The express request.\n   * @param {String} path The path of the file to return.\n   * @param {Object} params The query parameters to include.\n   * @returns {Object} The Promise Router response.\n   */\n  async redirectResponse(url, params) {\n    // Remove any parameters with undefined value\n    params = Object.entries(params).reduce((m, p) => {\n      if (p[1] !== undefined) {\n        m[p[0]] = p[1];\n      }\n      return m;\n    }, {});\n\n    // Compose URL with parameters in query\n    const location = new URL(url);\n    Object.entries(params).forEach(p => location.searchParams.set(p[0], p[1]));\n    const locationString = location.toString();\n\n    // Add parameters to header to allow parsing for programmatic use\n    // of response, instead of having to parse the HTML content.\n    const headers = Object.entries(params).reduce((m, p) => {\n      if (p[1] !== undefined) {\n        m[`${pageParamHeaderPrefix}${p[0].toLowerCase()}`] = p[1];\n      }\n      return m;\n    }, {});\n\n    return {\n      status: 303,\n      location: locationString,\n      headers: headers,\n    };\n  }\n\n  defaultPagePath(file) {\n    return path.join(this.pagesPath, file);\n  }\n\n  composePageUrl(file, publicServerUrl, locale) {\n    let url = publicServerUrl;\n    url += url.endsWith('/') ? '' : '/';\n    url += this.pagesEndpoint + '/';\n    url += locale === undefined ? '' : locale + '/';\n    url += file;\n    return url;\n  }\n\n  notFound() {\n    return {\n      text: 'Not found.',\n      status: 404,\n    };\n  }\n\n  invalidRequest() {\n    const error = new Error();\n    error.status = 403;\n    error.message = 'unauthorized';\n    throw error;\n  }\n\n  /**\n   * Sets the Parse Server configuration in the request object to make it\n   * easily accessible throughtout request processing.\n   * @param {Object} req The request.\n   * @param {Boolean} failGracefully Is true if failing to set the config should\n   * not result in an invalid request response. Default is `false`.\n   */\n  setConfig(req, failGracefully = false) {\n    req.config = Config.get(req.params.appId || req.query.appId);\n    if (!req.config && !failGracefully) {\n      this.invalidRequest();\n    }\n    return Promise.resolve();\n  }\n\n  mountPagesRoutes() {\n    this.route(\n      'GET',\n      `/${this.pagesEndpoint}/:appId/verify_email`,\n      req => {\n        this.setConfig(req);\n      },\n      req => {\n        return this.verifyEmail(req);\n      }\n    );\n\n    this.route(\n      'POST',\n      `/${this.pagesEndpoint}/:appId/resend_verification_email`,\n      req => {\n        this.setConfig(req);\n      },\n      req => {\n        return this.resendVerificationEmail(req);\n      }\n    );\n\n    this.route(\n      'GET',\n      `/${this.pagesEndpoint}/choose_password`,\n      req => {\n        this.setConfig(req);\n      },\n      req => {\n        return this.passwordReset(req);\n      }\n    );\n\n    this.route(\n      'POST',\n      `/${this.pagesEndpoint}/:appId/request_password_reset`,\n      req => {\n        this.setConfig(req);\n      },\n      req => {\n        return this.resetPassword(req);\n      }\n    );\n\n    this.route(\n      'GET',\n      `/${this.pagesEndpoint}/:appId/request_password_reset`,\n      req => {\n        this.setConfig(req);\n      },\n      req => {\n        return this.requestResetPassword(req);\n      }\n    );\n  }\n\n  mountCustomRoutes() {\n    for (const route of this.pagesConfig.customRoutes || []) {\n      this.route(\n        route.method,\n        `/${this.pagesEndpoint}/:appId/${route.path}`,\n        req => {\n          this.setConfig(req);\n        },\n        async req => {\n          const { file, query = {} } = (await route.handler(req)) || {};\n\n          // If route handler did not return a page send 404 response\n          if (!file) {\n            return this.notFound();\n          }\n\n          // Send page response\n          const page = new Page({ id: file, defaultFile: file });\n          return this.goToPage(req, page, query, false);\n        }\n      );\n    }\n  }\n\n  mountStaticRoute() {\n    this.route(\n      'GET',\n      `/${this.pagesEndpoint}/(*)?`,\n      req => {\n        this.setConfig(req, true);\n      },\n      req => {\n        return this.staticRoute(req);\n      }\n    );\n  }\n\n  expressRouter() {\n    const router = express.Router();\n    router.use('/', super.expressRouter());\n    return router;\n  }\n}\n\nexport default PagesRouter;\nmodule.exports = {\n  PagesRouter,\n  pageParamHeaderPrefix,\n  pageParams,\n  pages,\n};\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"1012fe62c1946631b9dbcce21264e99e572df5b1"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_nn2vsrgv5=function(){return actualCoverage;};}return actualCoverage;}cov_nn2vsrgv5();cov_nn2vsrgv5().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_nn2vsrgv5().s[1]++;exports.default=exports.PagesRouter=void 0;var _PromiseRouter=(cov_nn2vsrgv5().s[2]++,_interopRequireDefault(require("../PromiseRouter")));var _Config=(cov_nn2vsrgv5().s[3]++,_interopRequireDefault(require("../Config")));var _express=(cov_nn2vsrgv5().s[4]++,_interopRequireDefault(require("express")));var _path=(cov_nn2vsrgv5().s[5]++,_interopRequireDefault(require("path")));var _fs=(cov_nn2vsrgv5().s[6]++,require("fs"));var _node=(cov_nn2vsrgv5().s[7]++,require("parse/node"));var _Utils=(cov_nn2vsrgv5().s[8]++,_interopRequireDefault(require("../Utils")));var _mustache=(cov_nn2vsrgv5().s[9]++,_interopRequireDefault(require("mustache")));var _Page=(cov_nn2vsrgv5().s[10]++,_interopRequireDefault(require("../Page")));function _interopRequireDefault(obj){cov_nn2vsrgv5().f[0]++;cov_nn2vsrgv5().s[11]++;return(cov_nn2vsrgv5().b[1][0]++,obj)&&(cov_nn2vsrgv5().b[1][1]++,obj.__esModule)?(cov_nn2vsrgv5().b[0][0]++,obj):(cov_nn2vsrgv5().b[0][1]++,{default:obj});}// All pages with custom page key for reference and file name
const pages=(cov_nn2vsrgv5().s[12]++,Object.freeze({passwordReset:new _Page.default({id:'passwordReset',defaultFile:'password_reset.html'}),passwordResetSuccess:new _Page.default({id:'passwordResetSuccess',defaultFile:'password_reset_success.html'}),passwordResetLinkInvalid:new _Page.default({id:'passwordResetLinkInvalid',defaultFile:'password_reset_link_invalid.html'}),emailVerificationSuccess:new _Page.default({id:'emailVerificationSuccess',defaultFile:'email_verification_success.html'}),emailVerificationSendFail:new _Page.default({id:'emailVerificationSendFail',defaultFile:'email_verification_send_fail.html'}),emailVerificationSendSuccess:new _Page.default({id:'emailVerificationSendSuccess',defaultFile:'email_verification_send_success.html'}),emailVerificationLinkInvalid:new _Page.default({id:'emailVerificationLinkInvalid',defaultFile:'email_verification_link_invalid.html'}),emailVerificationLinkExpired:new _Page.default({id:'emailVerificationLinkExpired',defaultFile:'email_verification_link_expired.html'})}));// All page parameters for reference to be used as template placeholders or query params
const pageParams=(cov_nn2vsrgv5().s[13]++,Object.freeze({appName:'appName',appId:'appId',token:'token',username:'username',error:'error',locale:'locale',publicServerUrl:'publicServerUrl'}));// The header prefix to add page params as response headers
const pageParamHeaderPrefix=(cov_nn2vsrgv5().s[14]++,'x-parse-page-param-');// The errors being thrown
const errors=(cov_nn2vsrgv5().s[15]++,Object.freeze({jsonFailedFileLoading:'failed to load JSON file',fileOutsideAllowedScope:'not allowed to read file outside of pages directory'}));class PagesRouter extends(_PromiseRouter.default){/**
   * Constructs a PagesRouter.
   * @param {Object} pages The pages options from the Parse Server configuration.
   */constructor(pages=(cov_nn2vsrgv5().b[2][0]++,{})){cov_nn2vsrgv5().f[1]++;cov_nn2vsrgv5().s[16]++;super();// Set instance properties
cov_nn2vsrgv5().s[17]++;this.pagesConfig=pages;cov_nn2vsrgv5().s[18]++;this.pagesEndpoint=pages.pagesEndpoint?(cov_nn2vsrgv5().b[3][0]++,pages.pagesEndpoint):(cov_nn2vsrgv5().b[3][1]++,'apps');cov_nn2vsrgv5().s[19]++;this.pagesPath=pages.pagesPath?(cov_nn2vsrgv5().b[4][0]++,_path.default.resolve('./',pages.pagesPath)):(cov_nn2vsrgv5().b[4][1]++,_path.default.resolve(__dirname,'../../public'));cov_nn2vsrgv5().s[20]++;this.loadJsonResource();cov_nn2vsrgv5().s[21]++;this.mountPagesRoutes();cov_nn2vsrgv5().s[22]++;this.mountCustomRoutes();cov_nn2vsrgv5().s[23]++;this.mountStaticRoute();}verifyEmail(req){cov_nn2vsrgv5().f[2]++;const config=(cov_nn2vsrgv5().s[24]++,req.config);const{username,token:rawToken}=(cov_nn2vsrgv5().s[25]++,req.query);const token=(cov_nn2vsrgv5().s[26]++,(cov_nn2vsrgv5().b[6][0]++,rawToken)&&(cov_nn2vsrgv5().b[6][1]++,typeof rawToken!=='string')?(cov_nn2vsrgv5().b[5][0]++,rawToken.toString()):(cov_nn2vsrgv5().b[5][1]++,rawToken));cov_nn2vsrgv5().s[27]++;if(!config){cov_nn2vsrgv5().b[7][0]++;cov_nn2vsrgv5().s[28]++;this.invalidRequest();}else{cov_nn2vsrgv5().b[7][1]++;}cov_nn2vsrgv5().s[29]++;if((cov_nn2vsrgv5().b[9][0]++,!token)||(cov_nn2vsrgv5().b[9][1]++,!username)){cov_nn2vsrgv5().b[8][0]++;cov_nn2vsrgv5().s[30]++;return this.goToPage(req,pages.emailVerificationLinkInvalid);}else{cov_nn2vsrgv5().b[8][1]++;}const userController=(cov_nn2vsrgv5().s[31]++,config.userController);cov_nn2vsrgv5().s[32]++;return userController.verifyEmail(username,token).then(()=>{cov_nn2vsrgv5().f[3]++;const params=(cov_nn2vsrgv5().s[33]++,{[pageParams.username]:username});cov_nn2vsrgv5().s[34]++;return this.goToPage(req,pages.emailVerificationSuccess,params);},()=>{cov_nn2vsrgv5().f[4]++;const params=(cov_nn2vsrgv5().s[35]++,{[pageParams.username]:username});cov_nn2vsrgv5().s[36]++;return this.goToPage(req,pages.emailVerificationLinkExpired,params);});}resendVerificationEmail(req){cov_nn2vsrgv5().f[5]++;const config=(cov_nn2vsrgv5().s[37]++,req.config);const username=(cov_nn2vsrgv5().s[38]++,req.body.username);cov_nn2vsrgv5().s[39]++;if(!config){cov_nn2vsrgv5().b[10][0]++;cov_nn2vsrgv5().s[40]++;this.invalidRequest();}else{cov_nn2vsrgv5().b[10][1]++;}cov_nn2vsrgv5().s[41]++;if(!username){cov_nn2vsrgv5().b[11][0]++;cov_nn2vsrgv5().s[42]++;return this.goToPage(req,pages.emailVerificationLinkInvalid);}else{cov_nn2vsrgv5().b[11][1]++;}const userController=(cov_nn2vsrgv5().s[43]++,config.userController);cov_nn2vsrgv5().s[44]++;return userController.resendVerificationEmail(username).then(()=>{cov_nn2vsrgv5().f[6]++;cov_nn2vsrgv5().s[45]++;return this.goToPage(req,pages.emailVerificationSendSuccess);},()=>{cov_nn2vsrgv5().f[7]++;cov_nn2vsrgv5().s[46]++;return this.goToPage(req,pages.emailVerificationSendFail);});}passwordReset(req){cov_nn2vsrgv5().f[8]++;const config=(cov_nn2vsrgv5().s[47]++,req.config);const params=(cov_nn2vsrgv5().s[48]++,{[pageParams.appId]:req.params.appId,[pageParams.appName]:config.appName,[pageParams.token]:req.query.token,[pageParams.username]:req.query.username,[pageParams.publicServerUrl]:config.publicServerURL});cov_nn2vsrgv5().s[49]++;return this.goToPage(req,pages.passwordReset,params);}requestResetPassword(req){cov_nn2vsrgv5().f[9]++;const config=(cov_nn2vsrgv5().s[50]++,req.config);cov_nn2vsrgv5().s[51]++;if(!config){cov_nn2vsrgv5().b[12][0]++;cov_nn2vsrgv5().s[52]++;this.invalidRequest();}else{cov_nn2vsrgv5().b[12][1]++;}const{username,token:rawToken}=(cov_nn2vsrgv5().s[53]++,req.query);const token=(cov_nn2vsrgv5().s[54]++,(cov_nn2vsrgv5().b[14][0]++,rawToken)&&(cov_nn2vsrgv5().b[14][1]++,typeof rawToken!=='string')?(cov_nn2vsrgv5().b[13][0]++,rawToken.toString()):(cov_nn2vsrgv5().b[13][1]++,rawToken));cov_nn2vsrgv5().s[55]++;if((cov_nn2vsrgv5().b[16][0]++,!username)||(cov_nn2vsrgv5().b[16][1]++,!token)){cov_nn2vsrgv5().b[15][0]++;cov_nn2vsrgv5().s[56]++;return this.goToPage(req,pages.passwordResetLinkInvalid);}else{cov_nn2vsrgv5().b[15][1]++;}cov_nn2vsrgv5().s[57]++;return config.userController.checkResetTokenValidity(username,token).then(()=>{cov_nn2vsrgv5().f[10]++;const params=(cov_nn2vsrgv5().s[58]++,{[pageParams.token]:token,[pageParams.username]:username,[pageParams.appId]:config.applicationId,[pageParams.appName]:config.appName});cov_nn2vsrgv5().s[59]++;return this.goToPage(req,pages.passwordReset,params);},()=>{cov_nn2vsrgv5().f[11]++;const params=(cov_nn2vsrgv5().s[60]++,{[pageParams.username]:username});cov_nn2vsrgv5().s[61]++;return this.goToPage(req,pages.passwordResetLinkInvalid,params);});}resetPassword(req){cov_nn2vsrgv5().f[12]++;const config=(cov_nn2vsrgv5().s[62]++,req.config);cov_nn2vsrgv5().s[63]++;if(!config){cov_nn2vsrgv5().b[17][0]++;cov_nn2vsrgv5().s[64]++;this.invalidRequest();}else{cov_nn2vsrgv5().b[17][1]++;}const{username,new_password,token:rawToken}=(cov_nn2vsrgv5().s[65]++,req.body);const token=(cov_nn2vsrgv5().s[66]++,(cov_nn2vsrgv5().b[19][0]++,rawToken)&&(cov_nn2vsrgv5().b[19][1]++,typeof rawToken!=='string')?(cov_nn2vsrgv5().b[18][0]++,rawToken.toString()):(cov_nn2vsrgv5().b[18][1]++,rawToken));cov_nn2vsrgv5().s[67]++;if(((cov_nn2vsrgv5().b[21][0]++,!username)||(cov_nn2vsrgv5().b[21][1]++,!token)||(cov_nn2vsrgv5().b[21][2]++,!new_password))&&(cov_nn2vsrgv5().b[21][3]++,req.xhr===false)){cov_nn2vsrgv5().b[20][0]++;cov_nn2vsrgv5().s[68]++;return this.goToPage(req,pages.passwordResetLinkInvalid);}else{cov_nn2vsrgv5().b[20][1]++;}cov_nn2vsrgv5().s[69]++;if(!username){cov_nn2vsrgv5().b[22][0]++;cov_nn2vsrgv5().s[70]++;throw new _node.Parse.Error(_node.Parse.Error.USERNAME_MISSING,'Missing username');}else{cov_nn2vsrgv5().b[22][1]++;}cov_nn2vsrgv5().s[71]++;if(!token){cov_nn2vsrgv5().b[23][0]++;cov_nn2vsrgv5().s[72]++;throw new _node.Parse.Error(_node.Parse.Error.OTHER_CAUSE,'Missing token');}else{cov_nn2vsrgv5().b[23][1]++;}cov_nn2vsrgv5().s[73]++;if(!new_password){cov_nn2vsrgv5().b[24][0]++;cov_nn2vsrgv5().s[74]++;throw new _node.Parse.Error(_node.Parse.Error.PASSWORD_MISSING,'Missing password');}else{cov_nn2vsrgv5().b[24][1]++;}cov_nn2vsrgv5().s[75]++;return config.userController.updatePassword(username,token,new_password).then(()=>{cov_nn2vsrgv5().f[13]++;cov_nn2vsrgv5().s[76]++;return Promise.resolve({success:true});},err=>{cov_nn2vsrgv5().f[14]++;cov_nn2vsrgv5().s[77]++;return Promise.resolve({success:false,err});}).then(result=>{cov_nn2vsrgv5().f[15]++;cov_nn2vsrgv5().s[78]++;if(req.xhr){cov_nn2vsrgv5().b[25][0]++;cov_nn2vsrgv5().s[79]++;if(result.success){cov_nn2vsrgv5().b[26][0]++;cov_nn2vsrgv5().s[80]++;return Promise.resolve({status:200,response:'Password successfully reset'});}else{cov_nn2vsrgv5().b[26][1]++;}cov_nn2vsrgv5().s[81]++;if(result.err){cov_nn2vsrgv5().b[27][0]++;cov_nn2vsrgv5().s[82]++;throw new _node.Parse.Error(_node.Parse.Error.OTHER_CAUSE,`${result.err}`);}else{cov_nn2vsrgv5().b[27][1]++;}}else{cov_nn2vsrgv5().b[25][1]++;}const query=(cov_nn2vsrgv5().s[83]++,result.success?(cov_nn2vsrgv5().b[28][0]++,{[pageParams.username]:username}):(cov_nn2vsrgv5().b[28][1]++,{[pageParams.username]:username,[pageParams.token]:token,[pageParams.appId]:config.applicationId,[pageParams.error]:result.err,[pageParams.appName]:config.appName}));const page=(cov_nn2vsrgv5().s[84]++,result.success?(cov_nn2vsrgv5().b[29][0]++,pages.passwordResetSuccess):(cov_nn2vsrgv5().b[29][1]++,pages.passwordReset));cov_nn2vsrgv5().s[85]++;return this.goToPage(req,page,query,false);});}/**
   * Returns page content if the page is a local file or returns a
   * redirect to a custom page.
   * @param {Object} req The express request.
   * @param {Page} page The page to go to.
   * @param {Object} [params={}] The query parameters to attach to the URL in case of
   * HTTP redirect responses for POST requests, or the placeholders to fill into
   * the response content in case of HTTP content responses for GET requests.
   * @param {Boolean} [responseType] Is true if a redirect response should be forced,
   * false if a content response should be forced, undefined if the response type
   * should depend on the request type by default:
   * - GET request -> content response
   * - POST request -> redirect response (PRG pattern)
   * @returns {Promise<Object>} The PromiseRouter response.
   */goToPage(req,page,params=(cov_nn2vsrgv5().b[30][0]++,{}),responseType){cov_nn2vsrgv5().f[16]++;const config=(cov_nn2vsrgv5().s[86]++,req.config);// Determine redirect either by force, response setting or request method
const redirect=(cov_nn2vsrgv5().s[87]++,config.pages.forceRedirect?(cov_nn2vsrgv5().b[31][0]++,true):(cov_nn2vsrgv5().b[31][1]++,responseType!==undefined?(cov_nn2vsrgv5().b[32][0]++,responseType):(cov_nn2vsrgv5().b[32][1]++,req.method=='POST')));// Include default parameters
const defaultParams=(cov_nn2vsrgv5().s[88]++,this.getDefaultParams(config));cov_nn2vsrgv5().s[89]++;if(Object.values(defaultParams).includes(undefined)){cov_nn2vsrgv5().b[33][0]++;cov_nn2vsrgv5().s[90]++;return this.notFound();}else{cov_nn2vsrgv5().b[33][1]++;}cov_nn2vsrgv5().s[91]++;params=Object.assign(params,defaultParams);// Add locale to params to ensure it is passed on with every request;
// that means, once a locale is set, it is passed on to any follow-up page,
// e.g. request_password_reset -> password_reset -> password_reset_success
const locale=(cov_nn2vsrgv5().s[92]++,this.getLocale(req));cov_nn2vsrgv5().s[93]++;params[pageParams.locale]=locale;// Compose paths and URLs
const defaultFile=(cov_nn2vsrgv5().s[94]++,page.defaultFile);const defaultPath=(cov_nn2vsrgv5().s[95]++,this.defaultPagePath(defaultFile));const defaultUrl=(cov_nn2vsrgv5().s[96]++,this.composePageUrl(defaultFile,config.publicServerURL));// If custom URL is set redirect to it without localization
const customUrl=(cov_nn2vsrgv5().s[97]++,config.pages.customUrls[page.id]);cov_nn2vsrgv5().s[98]++;if((cov_nn2vsrgv5().b[35][0]++,customUrl)&&(cov_nn2vsrgv5().b[35][1]++,!_Utils.default.isPath(customUrl))){cov_nn2vsrgv5().b[34][0]++;cov_nn2vsrgv5().s[99]++;return this.redirectResponse(customUrl,params);}else{cov_nn2vsrgv5().b[34][1]++;}// Get JSON placeholders
let placeholders=(cov_nn2vsrgv5().s[100]++,{});cov_nn2vsrgv5().s[101]++;if((cov_nn2vsrgv5().b[37][0]++,config.pages.enableLocalization)&&(cov_nn2vsrgv5().b[37][1]++,config.pages.localizationJsonPath)){cov_nn2vsrgv5().b[36][0]++;cov_nn2vsrgv5().s[102]++;placeholders=this.getJsonPlaceholders(locale,params);}else{cov_nn2vsrgv5().b[36][1]++;}// Send response
cov_nn2vsrgv5().s[103]++;if((cov_nn2vsrgv5().b[39][0]++,config.pages.enableLocalization)&&(cov_nn2vsrgv5().b[39][1]++,locale)){cov_nn2vsrgv5().b[38][0]++;cov_nn2vsrgv5().s[104]++;return _Utils.default.getLocalizedPath(defaultPath,locale).then(({path,subdir})=>{cov_nn2vsrgv5().f[17]++;cov_nn2vsrgv5().s[105]++;return redirect?(cov_nn2vsrgv5().b[40][0]++,this.redirectResponse(this.composePageUrl(defaultFile,config.publicServerURL,subdir),params)):(cov_nn2vsrgv5().b[40][1]++,this.pageResponse(path,params,placeholders));});}else{cov_nn2vsrgv5().b[38][1]++;cov_nn2vsrgv5().s[106]++;return redirect?(cov_nn2vsrgv5().b[41][0]++,this.redirectResponse(defaultUrl,params)):(cov_nn2vsrgv5().b[41][1]++,this.pageResponse(defaultPath,params,placeholders));}}/**
   * Serves a request to a static resource and localizes the resource if it
   * is a HTML file.
   * @param {Object} req The request object.
   * @returns {Promise<Object>} The response.
   */staticRoute(req){cov_nn2vsrgv5().f[18]++;// Get requested path
const relativePath=(cov_nn2vsrgv5().s[107]++,req.params[0]);// Resolve requested path to absolute path
const absolutePath=(cov_nn2vsrgv5().s[108]++,_path.default.resolve(this.pagesPath,relativePath));// If the requested file is not a HTML file send its raw content
cov_nn2vsrgv5().s[109]++;if((cov_nn2vsrgv5().b[43][0]++,!absolutePath)||(cov_nn2vsrgv5().b[43][1]++,!absolutePath.endsWith('.html'))){cov_nn2vsrgv5().b[42][0]++;cov_nn2vsrgv5().s[110]++;return this.fileResponse(absolutePath);}else{cov_nn2vsrgv5().b[42][1]++;}// Get parameters
const params=(cov_nn2vsrgv5().s[111]++,this.getDefaultParams(req.config));const locale=(cov_nn2vsrgv5().s[112]++,this.getLocale(req));cov_nn2vsrgv5().s[113]++;if(locale){cov_nn2vsrgv5().b[44][0]++;cov_nn2vsrgv5().s[114]++;params.locale=locale;}else{cov_nn2vsrgv5().b[44][1]++;}// Get JSON placeholders
const placeholders=(cov_nn2vsrgv5().s[115]++,this.getJsonPlaceholders(locale,params));cov_nn2vsrgv5().s[116]++;return this.pageResponse(absolutePath,params,placeholders);}/**
   * Returns a translation from the JSON resource for a given locale. The JSON
   * resource is parsed according to i18next syntax.
   *
   * Example JSON content:
   * ```js
   *  {
   *    "en": {               // resource for language `en` (English)
   *      "translation": {
   *        "greeting": "Hello!"
   *      }
   *    },
   *    "de": {               // resource for language `de` (German)
   *      "translation": {
   *        "greeting": "Hallo!"
   *      }
   *    }
   *    "de-CH": {            // resource for locale `de-CH` (Swiss German)
   *      "translation": {
   *        "greeting": "Grüezi!"
   *      }
   *    }
   *  }
   * ```
   * @param {String} locale The locale to translate to.
   * @returns {Object} The translation or an empty object if no matching
   * translation was found.
   */getJsonTranslation(locale){cov_nn2vsrgv5().f[19]++;cov_nn2vsrgv5().s[117]++;// If there is no JSON resource
if(this.jsonParameters===undefined){cov_nn2vsrgv5().b[45][0]++;cov_nn2vsrgv5().s[118]++;return{};}else{cov_nn2vsrgv5().b[45][1]++;}// If locale is not set use the fallback locale
cov_nn2vsrgv5().s[119]++;locale=(cov_nn2vsrgv5().b[46][0]++,locale)||(cov_nn2vsrgv5().b[46][1]++,this.pagesConfig.localizationFallbackLocale);// Get matching translation by locale, language or fallback locale
const language=(cov_nn2vsrgv5().s[120]++,locale.split('-')[0]);const resource=(cov_nn2vsrgv5().s[121]++,(cov_nn2vsrgv5().b[47][0]++,this.jsonParameters[locale])||(cov_nn2vsrgv5().b[47][1]++,this.jsonParameters[language])||(cov_nn2vsrgv5().b[47][2]++,this.jsonParameters[this.pagesConfig.localizationFallbackLocale])||(cov_nn2vsrgv5().b[47][3]++,{}));const translation=(cov_nn2vsrgv5().s[122]++,(cov_nn2vsrgv5().b[48][0]++,resource.translation)||(cov_nn2vsrgv5().b[48][1]++,{}));cov_nn2vsrgv5().s[123]++;return translation;}/**
   * Returns a translation from the JSON resource for a given locale with
   * placeholders filled in by given parameters.
   * @param {String} locale The locale to translate to.
   * @param {Object} params The parameters to fill into any placeholders
   * within the translations.
   * @returns {Object} The translation or an empty object if no matching
   * translation was found.
   */getJsonPlaceholders(locale,params=(cov_nn2vsrgv5().b[49][0]++,{})){cov_nn2vsrgv5().f[20]++;cov_nn2vsrgv5().s[124]++;// If localization is disabled or there is no JSON resource
if((cov_nn2vsrgv5().b[51][0]++,!this.pagesConfig.enableLocalization)||(cov_nn2vsrgv5().b[51][1]++,!this.pagesConfig.localizationJsonPath)){cov_nn2vsrgv5().b[50][0]++;cov_nn2vsrgv5().s[125]++;return{};}else{cov_nn2vsrgv5().b[50][1]++;}// Get JSON placeholders
let placeholders=(cov_nn2vsrgv5().s[126]++,this.getJsonTranslation(locale));// Fill in any placeholders in the translation; this allows a translation
// to contain default placeholders like {{appName}} which are filled here
cov_nn2vsrgv5().s[127]++;placeholders=JSON.stringify(placeholders);cov_nn2vsrgv5().s[128]++;placeholders=_mustache.default.render(placeholders,params);cov_nn2vsrgv5().s[129]++;placeholders=JSON.parse(placeholders);cov_nn2vsrgv5().s[130]++;return placeholders;}/**
   * Creates a response with file content.
   * @param {String} path The path of the file to return.
   * @param {Object} [params={}] The parameters to be included in the response
   * header. These will also be used to fill placeholders.
   * @param {Object} [placeholders={}] The placeholders to fill in the content.
   * These will not be included in the response header.
   * @returns {Object} The Promise Router response.
   */async pageResponse(path,params=(cov_nn2vsrgv5().b[52][0]++,{}),placeholders=(cov_nn2vsrgv5().b[53][0]++,{})){cov_nn2vsrgv5().f[21]++;// Get file content
let data;cov_nn2vsrgv5().s[131]++;try{cov_nn2vsrgv5().s[132]++;data=await this.readFile(path);}catch(e){cov_nn2vsrgv5().s[133]++;return this.notFound();}// Get config placeholders; can be an object, a function or an async function
let configPlaceholders=(cov_nn2vsrgv5().s[134]++,typeof this.pagesConfig.placeholders==='function'?(cov_nn2vsrgv5().b[54][0]++,this.pagesConfig.placeholders(params)):(cov_nn2vsrgv5().b[54][1]++,Object.prototype.toString.call(this.pagesConfig.placeholders)==='[object Object]'?(cov_nn2vsrgv5().b[55][0]++,this.pagesConfig.placeholders):(cov_nn2vsrgv5().b[55][1]++,{})));cov_nn2vsrgv5().s[135]++;if(configPlaceholders instanceof Promise){cov_nn2vsrgv5().b[56][0]++;cov_nn2vsrgv5().s[136]++;configPlaceholders=await configPlaceholders;}else{cov_nn2vsrgv5().b[56][1]++;}// Fill placeholders
const allPlaceholders=(cov_nn2vsrgv5().s[137]++,Object.assign({},configPlaceholders,placeholders));const paramsAndPlaceholders=(cov_nn2vsrgv5().s[138]++,Object.assign({},params,allPlaceholders));cov_nn2vsrgv5().s[139]++;data=_mustache.default.render(data,paramsAndPlaceholders);// Add placeholders in header to allow parsing for programmatic use
// of response, instead of having to parse the HTML content.
const headers=(cov_nn2vsrgv5().s[140]++,Object.entries(params).reduce((m,p)=>{cov_nn2vsrgv5().f[22]++;cov_nn2vsrgv5().s[141]++;if(p[1]!==undefined){cov_nn2vsrgv5().b[57][0]++;cov_nn2vsrgv5().s[142]++;m[`${pageParamHeaderPrefix}${p[0].toLowerCase()}`]=p[1];}else{cov_nn2vsrgv5().b[57][1]++;}cov_nn2vsrgv5().s[143]++;return m;},{}));cov_nn2vsrgv5().s[144]++;return{text:data,headers:headers};}/**
   * Creates a response with file content.
   * @param {String} path The path of the file to return.
   * @returns {Object} The PromiseRouter response.
   */async fileResponse(path){cov_nn2vsrgv5().f[23]++;// Get file content
let data;cov_nn2vsrgv5().s[145]++;try{cov_nn2vsrgv5().s[146]++;data=await this.readFile(path);}catch(e){cov_nn2vsrgv5().s[147]++;return this.notFound();}cov_nn2vsrgv5().s[148]++;return{text:data};}/**
   * Reads and returns the content of a file at a given path. File reading to
   * serve content on the static route is only allowed from the pages
   * directory on downwards.
   * -----------------------------------------------------------------------
   * **WARNING:** All file reads in the PagesRouter must be executed by this
   * wrapper because it also detects and prevents common exploits.
   * -----------------------------------------------------------------------
   * @param {String} filePath The path to the file to read.
   * @returns {Promise<String>} The file content.
   */async readFile(filePath){cov_nn2vsrgv5().f[24]++;// Normalize path to prevent it from containing any directory changing
// UNIX patterns which could expose the whole file system, e.g.
// `http://example.com/parse/apps/../file.txt` requests a file outside
// of the pages directory scope.
const normalizedPath=(cov_nn2vsrgv5().s[149]++,_path.default.normalize(filePath));// Abort if the path is outside of the path directory scope
cov_nn2vsrgv5().s[150]++;if(!normalizedPath.startsWith(this.pagesPath)){cov_nn2vsrgv5().b[58][0]++;cov_nn2vsrgv5().s[151]++;throw errors.fileOutsideAllowedScope;}else{cov_nn2vsrgv5().b[58][1]++;}cov_nn2vsrgv5().s[152]++;return await _fs.promises.readFile(normalizedPath,'utf-8');}/**
   * Loads a language resource JSON file that is used for translations.
   */loadJsonResource(){cov_nn2vsrgv5().f[25]++;cov_nn2vsrgv5().s[153]++;if(this.pagesConfig.localizationJsonPath===undefined){cov_nn2vsrgv5().b[59][0]++;cov_nn2vsrgv5().s[154]++;return;}else{cov_nn2vsrgv5().b[59][1]++;}cov_nn2vsrgv5().s[155]++;try{const json=(cov_nn2vsrgv5().s[156]++,require(_path.default.resolve('./',this.pagesConfig.localizationJsonPath)));cov_nn2vsrgv5().s[157]++;this.jsonParameters=json;}catch(e){cov_nn2vsrgv5().s[158]++;throw errors.jsonFailedFileLoading;}}/**
   * Extracts and returns the page default parameters from the Parse Server
   * configuration. These parameters are made accessible in every page served
   * by this router.
   * @param {Object} config The Parse Server configuration.
   * @returns {Object} The default parameters.
   */getDefaultParams(config){cov_nn2vsrgv5().f[26]++;cov_nn2vsrgv5().s[159]++;return config?(cov_nn2vsrgv5().b[60][0]++,{[pageParams.appId]:config.appId,[pageParams.appName]:config.appName,[pageParams.publicServerUrl]:config.publicServerURL}):(cov_nn2vsrgv5().b[60][1]++,{});}/**
   * Extracts and returns the locale from an express request.
   * @param {Object} req The express request.
   * @returns {String|undefined} The locale, or undefined if no locale was set.
   */getLocale(req){cov_nn2vsrgv5().f[27]++;const locale=(cov_nn2vsrgv5().s[160]++,(cov_nn2vsrgv5().b[61][0]++,((cov_nn2vsrgv5().b[62][0]++,req.query)||(cov_nn2vsrgv5().b[62][1]++,{}))[pageParams.locale])||(cov_nn2vsrgv5().b[61][1]++,((cov_nn2vsrgv5().b[63][0]++,req.body)||(cov_nn2vsrgv5().b[63][1]++,{}))[pageParams.locale])||(cov_nn2vsrgv5().b[61][2]++,((cov_nn2vsrgv5().b[64][0]++,req.params)||(cov_nn2vsrgv5().b[64][1]++,{}))[pageParams.locale])||(cov_nn2vsrgv5().b[61][3]++,((cov_nn2vsrgv5().b[65][0]++,req.headers)||(cov_nn2vsrgv5().b[65][1]++,{}))[pageParamHeaderPrefix+pageParams.locale]));cov_nn2vsrgv5().s[161]++;return locale;}/**
   * Creates a response with http redirect.
   * @param {Object} req The express request.
   * @param {String} path The path of the file to return.
   * @param {Object} params The query parameters to include.
   * @returns {Object} The Promise Router response.
   */async redirectResponse(url,params){cov_nn2vsrgv5().f[28]++;cov_nn2vsrgv5().s[162]++;// Remove any parameters with undefined value
params=Object.entries(params).reduce((m,p)=>{cov_nn2vsrgv5().f[29]++;cov_nn2vsrgv5().s[163]++;if(p[1]!==undefined){cov_nn2vsrgv5().b[66][0]++;cov_nn2vsrgv5().s[164]++;m[p[0]]=p[1];}else{cov_nn2vsrgv5().b[66][1]++;}cov_nn2vsrgv5().s[165]++;return m;},{});// Compose URL with parameters in query
const location=(cov_nn2vsrgv5().s[166]++,new URL(url));cov_nn2vsrgv5().s[167]++;Object.entries(params).forEach(p=>{cov_nn2vsrgv5().f[30]++;cov_nn2vsrgv5().s[168]++;return location.searchParams.set(p[0],p[1]);});const locationString=(cov_nn2vsrgv5().s[169]++,location.toString());// Add parameters to header to allow parsing for programmatic use
// of response, instead of having to parse the HTML content.
const headers=(cov_nn2vsrgv5().s[170]++,Object.entries(params).reduce((m,p)=>{cov_nn2vsrgv5().f[31]++;cov_nn2vsrgv5().s[171]++;if(p[1]!==undefined){cov_nn2vsrgv5().b[67][0]++;cov_nn2vsrgv5().s[172]++;m[`${pageParamHeaderPrefix}${p[0].toLowerCase()}`]=p[1];}else{cov_nn2vsrgv5().b[67][1]++;}cov_nn2vsrgv5().s[173]++;return m;},{}));cov_nn2vsrgv5().s[174]++;return{status:303,location:locationString,headers:headers};}defaultPagePath(file){cov_nn2vsrgv5().f[32]++;cov_nn2vsrgv5().s[175]++;return _path.default.join(this.pagesPath,file);}composePageUrl(file,publicServerUrl,locale){cov_nn2vsrgv5().f[33]++;let url=(cov_nn2vsrgv5().s[176]++,publicServerUrl);cov_nn2vsrgv5().s[177]++;url+=url.endsWith('/')?(cov_nn2vsrgv5().b[68][0]++,''):(cov_nn2vsrgv5().b[68][1]++,'/');cov_nn2vsrgv5().s[178]++;url+=this.pagesEndpoint+'/';cov_nn2vsrgv5().s[179]++;url+=locale===undefined?(cov_nn2vsrgv5().b[69][0]++,''):(cov_nn2vsrgv5().b[69][1]++,locale+'/');cov_nn2vsrgv5().s[180]++;url+=file;cov_nn2vsrgv5().s[181]++;return url;}notFound(){cov_nn2vsrgv5().f[34]++;cov_nn2vsrgv5().s[182]++;return{text:'Not found.',status:404};}invalidRequest(){cov_nn2vsrgv5().f[35]++;const error=(cov_nn2vsrgv5().s[183]++,new Error());cov_nn2vsrgv5().s[184]++;error.status=403;cov_nn2vsrgv5().s[185]++;error.message='unauthorized';cov_nn2vsrgv5().s[186]++;throw error;}/**
   * Sets the Parse Server configuration in the request object to make it
   * easily accessible throughtout request processing.
   * @param {Object} req The request.
   * @param {Boolean} failGracefully Is true if failing to set the config should
   * not result in an invalid request response. Default is `false`.
   */setConfig(req,failGracefully=(cov_nn2vsrgv5().b[70][0]++,false)){cov_nn2vsrgv5().f[36]++;cov_nn2vsrgv5().s[187]++;req.config=_Config.default.get((cov_nn2vsrgv5().b[71][0]++,req.params.appId)||(cov_nn2vsrgv5().b[71][1]++,req.query.appId));cov_nn2vsrgv5().s[188]++;if((cov_nn2vsrgv5().b[73][0]++,!req.config)&&(cov_nn2vsrgv5().b[73][1]++,!failGracefully)){cov_nn2vsrgv5().b[72][0]++;cov_nn2vsrgv5().s[189]++;this.invalidRequest();}else{cov_nn2vsrgv5().b[72][1]++;}cov_nn2vsrgv5().s[190]++;return Promise.resolve();}mountPagesRoutes(){cov_nn2vsrgv5().f[37]++;cov_nn2vsrgv5().s[191]++;this.route('GET',`/${this.pagesEndpoint}/:appId/verify_email`,req=>{cov_nn2vsrgv5().f[38]++;cov_nn2vsrgv5().s[192]++;this.setConfig(req);},req=>{cov_nn2vsrgv5().f[39]++;cov_nn2vsrgv5().s[193]++;return this.verifyEmail(req);});cov_nn2vsrgv5().s[194]++;this.route('POST',`/${this.pagesEndpoint}/:appId/resend_verification_email`,req=>{cov_nn2vsrgv5().f[40]++;cov_nn2vsrgv5().s[195]++;this.setConfig(req);},req=>{cov_nn2vsrgv5().f[41]++;cov_nn2vsrgv5().s[196]++;return this.resendVerificationEmail(req);});cov_nn2vsrgv5().s[197]++;this.route('GET',`/${this.pagesEndpoint}/choose_password`,req=>{cov_nn2vsrgv5().f[42]++;cov_nn2vsrgv5().s[198]++;this.setConfig(req);},req=>{cov_nn2vsrgv5().f[43]++;cov_nn2vsrgv5().s[199]++;return this.passwordReset(req);});cov_nn2vsrgv5().s[200]++;this.route('POST',`/${this.pagesEndpoint}/:appId/request_password_reset`,req=>{cov_nn2vsrgv5().f[44]++;cov_nn2vsrgv5().s[201]++;this.setConfig(req);},req=>{cov_nn2vsrgv5().f[45]++;cov_nn2vsrgv5().s[202]++;return this.resetPassword(req);});cov_nn2vsrgv5().s[203]++;this.route('GET',`/${this.pagesEndpoint}/:appId/request_password_reset`,req=>{cov_nn2vsrgv5().f[46]++;cov_nn2vsrgv5().s[204]++;this.setConfig(req);},req=>{cov_nn2vsrgv5().f[47]++;cov_nn2vsrgv5().s[205]++;return this.requestResetPassword(req);});}mountCustomRoutes(){cov_nn2vsrgv5().f[48]++;cov_nn2vsrgv5().s[206]++;for(const route of(cov_nn2vsrgv5().b[74][0]++,this.pagesConfig.customRoutes)||(cov_nn2vsrgv5().b[74][1]++,[])){cov_nn2vsrgv5().s[207]++;this.route(route.method,`/${this.pagesEndpoint}/:appId/${route.path}`,req=>{cov_nn2vsrgv5().f[49]++;cov_nn2vsrgv5().s[208]++;this.setConfig(req);},async req=>{cov_nn2vsrgv5().f[50]++;const{file,query=(cov_nn2vsrgv5().b[75][0]++,{})}=(cov_nn2vsrgv5().s[209]++,(cov_nn2vsrgv5().b[76][0]++,await route.handler(req))||(cov_nn2vsrgv5().b[76][1]++,{}));// If route handler did not return a page send 404 response
cov_nn2vsrgv5().s[210]++;if(!file){cov_nn2vsrgv5().b[77][0]++;cov_nn2vsrgv5().s[211]++;return this.notFound();}else{cov_nn2vsrgv5().b[77][1]++;}// Send page response
const page=(cov_nn2vsrgv5().s[212]++,new _Page.default({id:file,defaultFile:file}));cov_nn2vsrgv5().s[213]++;return this.goToPage(req,page,query,false);});}}mountStaticRoute(){cov_nn2vsrgv5().f[51]++;cov_nn2vsrgv5().s[214]++;this.route('GET',`/${this.pagesEndpoint}/(*)?`,req=>{cov_nn2vsrgv5().f[52]++;cov_nn2vsrgv5().s[215]++;this.setConfig(req,true);},req=>{cov_nn2vsrgv5().f[53]++;cov_nn2vsrgv5().s[216]++;return this.staticRoute(req);});}expressRouter(){cov_nn2vsrgv5().f[54]++;const router=(cov_nn2vsrgv5().s[217]++,_express.default.Router());cov_nn2vsrgv5().s[218]++;router.use('/',super.expressRouter());cov_nn2vsrgv5().s[219]++;return router;}}cov_nn2vsrgv5().s[220]++;exports.PagesRouter=PagesRouter;var _default=(cov_nn2vsrgv5().s[221]++,PagesRouter);cov_nn2vsrgv5().s[222]++;exports.default=_default;cov_nn2vsrgv5().s[223]++;module.exports={PagesRouter,pageParamHeaderPrefix,pageParams,pages};//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,