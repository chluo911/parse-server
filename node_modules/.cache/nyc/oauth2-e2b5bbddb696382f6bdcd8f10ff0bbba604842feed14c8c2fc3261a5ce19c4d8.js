"use strict";/*
 * This auth adapter is based on the OAuth 2.0 Token Introspection specification.
 * See RFC 7662 for details (https://tools.ietf.org/html/rfc7662).
 * It's purpose is to validate OAuth2 access tokens using the OAuth2 provider's
 * token introspection endpoint (if implemented by the provider).
 *
 * The adapter accepts the following config parameters:
 *
 * 1. "tokenIntrospectionEndpointUrl" (string, required)
 *      The URL of the token introspection endpoint of the OAuth2 provider that
 *      issued the access token to the client that is to be validated.
 *
 * 2. "useridField" (string, optional)
 *      The name of the field in the token introspection response that contains
 *      the userid. If specified, it will be used to verify the value of the "id"
 *      field in the "authData" JSON that is coming from the client.
 *      This can be the "aud" (i.e. audience), the "sub" (i.e. subject) or the
 *      "username" field in the introspection response, but since only the
 *      "active" field is required and all other reponse fields are optional
 *      in the RFC, it has to be optional in this adapter as well.
 *      Default: - (undefined)
 *
 * 3. "appidField" (string, optional)
 *      The name of the field in the token introspection response that contains
 *      the appId of the client. If specified, it will be used to verify it's
 *      value against the set of appIds in the adapter config. The concept of
 *      appIds comes from the two major social login providers
 *      (Google and Facebook). They have not yet implemented the token
 *      introspection endpoint, but the concept can be valid for any OAuth2
 *      provider.
 *      Default: - (undefined)
 *
 * 4. "appIds" (array of strings, required if appidField is defined)
 *      A set of appIds that are used to restrict accepted access tokens based
 *      on a specific field's value in the token introspection response.
 *      Default: - (undefined)
 *
 * 5. "authorizationHeader" (string, optional)
 *      The value of the "Authorization" HTTP header in requests sent to the
 *      introspection endpoint. It must contain the raw value.
 *      Thus if HTTP Basic authorization is to be used, it must contain the
 *      "Basic" string, followed by whitespace, then by the base64 encoded
 *      version of the concatenated <username> + ":" + <password> string.
 *      Eg. "Basic dXNlcm5hbWU6cGFzc3dvcmQ="
 *
 * The adapter expects requests with the following authData JSON:
 *
 * {
 *   "someadapter": {
 *     "id": "user's OAuth2 provider-specific id as a string",
 *     "access_token": "an authorized OAuth2 access token for the user",
 *   }
 * }
 */function cov_1v7phfd2ts(){var path="/parse-server/lib/Adapters/Auth/oauth2.js";var hash="ab914274877d48b54f6de9bf7ce353de59bab493";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Adapters/Auth/oauth2.js",statementMap:{"0":{start:{line:57,column:14},end:{line:57,column:41}},"1":{start:{line:59,column:12},end:{line:59,column:26}},"2":{start:{line:61,column:20},end:{line:61,column:42}},"3":{start:{line:63,column:21},end:{line:63,column:46}},"4":{start:{line:65,column:23},end:{line:65,column:70}},"5":{start:{line:66,column:29},end:{line:66,column:141}},"6":{start:{line:67,column:23},end:{line:67,column:104}},"7":{start:{line:68,column:20},end:{line:68,column:92}},"8":{start:{line:71,column:2},end:{line:75,column:5}},"9":{start:{line:72,column:4},end:{line:74,column:5}},"10":{start:{line:73,column:6},end:{line:73,column:74}},"11":{start:{line:79,column:2},end:{line:81,column:3}},"12":{start:{line:80,column:4},end:{line:80,column:29}},"13":{start:{line:83,column:2},end:{line:85,column:3}},"14":{start:{line:84,column:4},end:{line:84,column:72}},"15":{start:{line:87,column:2},end:{line:107,column:5}},"16":{start:{line:88,column:4},end:{line:90,column:5}},"17":{start:{line:89,column:6},end:{line:89,column:74}},"18":{start:{line:92,column:23},end:{line:92,column:41}},"19":{start:{line:94,column:4},end:{line:96,column:5}},"20":{start:{line:95,column:6},end:{line:95,column:80}},"21":{start:{line:98,column:26},end:{line:98,column:46}},"22":{start:{line:100,column:4},end:{line:106,column:5}},"23":{start:{line:101,column:6},end:{line:101,column:13}},"24":{start:{line:102,column:11},end:{line:106,column:5}},"25":{start:{line:102,column:75},end:{line:102,column:97}},"26":{start:{line:103,column:6},end:{line:103,column:13}},"27":{start:{line:105,column:6},end:{line:105,column:80}},"28":{start:{line:112,column:2},end:{line:114,column:3}},"29":{start:{line:113,column:4},end:{line:113,column:69}},"30":{start:{line:116,column:20},end:{line:116,column:68}},"31":{start:{line:117,column:19},end:{line:119,column:4}},"32":{start:{line:120,column:18},end:{line:123,column:3}},"33":{start:{line:125,column:2},end:{line:127,column:3}},"34":{start:{line:126,column:4},end:{line:126,column:59}},"35":{start:{line:129,column:22},end:{line:134,column:3}},"36":{start:{line:135,column:2},end:{line:135,column:53}},"37":{start:{line:138,column:0},end:{line:141,column:2}}},fnMap:{"0":{name:"validateAuthData",decl:{start:{line:70,column:9},end:{line:70,column:25}},loc:{start:{line:70,column:45},end:{line:76,column:1}},line:70},"1":{name:"(anonymous_1)",decl:{start:{line:71,column:63},end:{line:71,column:64}},loc:{start:{line:71,column:75},end:{line:75,column:3}},line:71},"2":{name:"validateAppId",decl:{start:{line:78,column:9},end:{line:78,column:22}},loc:{start:{line:78,column:50},end:{line:108,column:1}},line:78},"3":{name:"(anonymous_3)",decl:{start:{line:87,column:63},end:{line:87,column:64}},loc:{start:{line:87,column:75},end:{line:107,column:3}},line:87},"4":{name:"(anonymous_4)",decl:{start:{line:102,column:66},end:{line:102,column:67}},loc:{start:{line:102,column:75},end:{line:102,column:97}},line:102},"5":{name:"requestTokenInfo",decl:{start:{line:111,column:9},end:{line:111,column:25}},loc:{start:{line:111,column:49},end:{line:136,column:1}},line:111}},branchMap:{"0":{loc:{start:{line:72,column:4},end:{line:74,column:5}},type:"if",locations:[{start:{line:72,column:4},end:{line:74,column:5}},{start:{line:72,column:4},end:{line:74,column:5}}],line:72},"1":{loc:{start:{line:72,column:8},end:{line:72,column:109}},type:"binary-expr",locations:[{start:{line:72,column:8},end:{line:72,column:17}},{start:{line:72,column:21},end:{line:72,column:37}},{start:{line:72,column:41},end:{line:72,column:60}},{start:{line:72,column:64},end:{line:72,column:109}}],line:72},"2":{loc:{start:{line:79,column:2},end:{line:81,column:3}},type:"if",locations:[{start:{line:79,column:2},end:{line:81,column:3}},{start:{line:79,column:2},end:{line:81,column:3}}],line:79},"3":{loc:{start:{line:79,column:6},end:{line:79,column:37}},type:"binary-expr",locations:[{start:{line:79,column:6},end:{line:79,column:14}},{start:{line:79,column:18},end:{line:79,column:37}}],line:79},"4":{loc:{start:{line:83,column:2},end:{line:85,column:3}},type:"if",locations:[{start:{line:83,column:2},end:{line:85,column:3}},{start:{line:83,column:2},end:{line:85,column:3}}],line:83},"5":{loc:{start:{line:83,column:6},end:{line:83,column:36}},type:"binary-expr",locations:[{start:{line:83,column:6},end:{line:83,column:13}},{start:{line:83,column:17},end:{line:83,column:36}}],line:83},"6":{loc:{start:{line:88,column:4},end:{line:90,column:5}},type:"if",locations:[{start:{line:88,column:4},end:{line:90,column:5}},{start:{line:88,column:4},end:{line:90,column:5}}],line:88},"7":{loc:{start:{line:88,column:8},end:{line:88,column:37}},type:"binary-expr",locations:[{start:{line:88,column:8},end:{line:88,column:17}},{start:{line:88,column:21},end:{line:88,column:37}}],line:88},"8":{loc:{start:{line:94,column:4},end:{line:96,column:5}},type:"if",locations:[{start:{line:94,column:4},end:{line:96,column:5}},{start:{line:94,column:4},end:{line:96,column:5}}],line:94},"9":{loc:{start:{line:100,column:4},end:{line:106,column:5}},type:"if",locations:[{start:{line:100,column:4},end:{line:106,column:5}},{start:{line:100,column:4},end:{line:106,column:5}}],line:100},"10":{loc:{start:{line:100,column:8},end:{line:100,column:71}},type:"binary-expr",locations:[{start:{line:100,column:8},end:{line:100,column:37}},{start:{line:100,column:41},end:{line:100,column:71}}],line:100},"11":{loc:{start:{line:102,column:11},end:{line:106,column:5}},type:"if",locations:[{start:{line:102,column:11},end:{line:106,column:5}},{start:{line:102,column:11},end:{line:106,column:5}}],line:102},"12":{loc:{start:{line:102,column:15},end:{line:102,column:98}},type:"binary-expr",locations:[{start:{line:102,column:15},end:{line:102,column:43}},{start:{line:102,column:47},end:{line:102,column:98}}],line:102},"13":{loc:{start:{line:112,column:2},end:{line:114,column:3}},type:"if",locations:[{start:{line:112,column:2},end:{line:114,column:3}},{start:{line:112,column:2},end:{line:114,column:3}}],line:112},"14":{loc:{start:{line:112,column:6},end:{line:112,column:56}},type:"binary-expr",locations:[{start:{line:112,column:6},end:{line:112,column:14}},{start:{line:112,column:18},end:{line:112,column:56}}],line:112},"15":{loc:{start:{line:125,column:2},end:{line:127,column:3}},type:"if",locations:[{start:{line:125,column:2},end:{line:127,column:3}},{start:{line:125,column:2},end:{line:127,column:3}}],line:125}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},inputSourceMap:{version:3,sources:["../../../src/Adapters/Auth/oauth2.js"],names:["Parse","require","url","querystring","httpsRequest","INVALID_ACCESS","INVALID_ACCESS_APPID","MISSING_APPIDS","MISSING_URL","validateAuthData","authData","options","requestTokenInfo","access_token","then","response","active","useridField","id","Error","OBJECT_NOT_FOUND","validateAppId","appIds","appidField","Promise","resolve","length","responseValue","Array","isArray","includes","some","appId","tokenIntrospectionEndpointUrl","parsedUrl","parse","postData","stringify","token","headers","Buffer","byteLength","authorizationHeader","postOptions","hostname","path","pathname","method","request","module","exports"],mappings:"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",sourcesContent:["/*\n * This auth adapter is based on the OAuth 2.0 Token Introspection specification.\n * See RFC 7662 for details (https://tools.ietf.org/html/rfc7662).\n * It's purpose is to validate OAuth2 access tokens using the OAuth2 provider's\n * token introspection endpoint (if implemented by the provider).\n *\n * The adapter accepts the following config parameters:\n *\n * 1. \"tokenIntrospectionEndpointUrl\" (string, required)\n *      The URL of the token introspection endpoint of the OAuth2 provider that\n *      issued the access token to the client that is to be validated.\n *\n * 2. \"useridField\" (string, optional)\n *      The name of the field in the token introspection response that contains\n *      the userid. If specified, it will be used to verify the value of the \"id\"\n *      field in the \"authData\" JSON that is coming from the client.\n *      This can be the \"aud\" (i.e. audience), the \"sub\" (i.e. subject) or the\n *      \"username\" field in the introspection response, but since only the\n *      \"active\" field is required and all other reponse fields are optional\n *      in the RFC, it has to be optional in this adapter as well.\n *      Default: - (undefined)\n *\n * 3. \"appidField\" (string, optional)\n *      The name of the field in the token introspection response that contains\n *      the appId of the client. If specified, it will be used to verify it's\n *      value against the set of appIds in the adapter config. The concept of\n *      appIds comes from the two major social login providers\n *      (Google and Facebook). They have not yet implemented the token\n *      introspection endpoint, but the concept can be valid for any OAuth2\n *      provider.\n *      Default: - (undefined)\n *\n * 4. \"appIds\" (array of strings, required if appidField is defined)\n *      A set of appIds that are used to restrict accepted access tokens based\n *      on a specific field's value in the token introspection response.\n *      Default: - (undefined)\n *\n * 5. \"authorizationHeader\" (string, optional)\n *      The value of the \"Authorization\" HTTP header in requests sent to the\n *      introspection endpoint. It must contain the raw value.\n *      Thus if HTTP Basic authorization is to be used, it must contain the\n *      \"Basic\" string, followed by whitespace, then by the base64 encoded\n *      version of the concatenated <username> + \":\" + <password> string.\n *      Eg. \"Basic dXNlcm5hbWU6cGFzc3dvcmQ=\"\n *\n * The adapter expects requests with the following authData JSON:\n *\n * {\n *   \"someadapter\": {\n *     \"id\": \"user's OAuth2 provider-specific id as a string\",\n *     \"access_token\": \"an authorized OAuth2 access token for the user\",\n *   }\n * }\n */\n\nconst Parse = require('parse/node').Parse;\nconst url = require('url');\nconst querystring = require('querystring');\nconst httpsRequest = require('./httpsRequest');\n\nconst INVALID_ACCESS = 'OAuth2 access token is invalid for this user.';\nconst INVALID_ACCESS_APPID =\n  \"OAuth2: the access_token's appID is empty or is not in the list of permitted appIDs in the auth configuration.\";\nconst MISSING_APPIDS =\n  'OAuth2 configuration is missing the client app IDs (\"appIds\" config parameter).';\nconst MISSING_URL = 'OAuth2 token introspection endpoint URL is missing from configuration!';\n\n// Returns a promise that fulfills if this user id is valid.\nfunction validateAuthData(authData, options) {\n  return requestTokenInfo(options, authData.access_token).then(response => {\n    if (\n      !response ||\n      !response.active ||\n      (options.useridField && authData.id !== response[options.useridField])\n    ) {\n      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, INVALID_ACCESS);\n    }\n  });\n}\n\nfunction validateAppId(appIds, authData, options) {\n  if (!options || !options.appidField) {\n    return Promise.resolve();\n  }\n  if (!appIds || appIds.length === 0) {\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, MISSING_APPIDS);\n  }\n  return requestTokenInfo(options, authData.access_token).then(response => {\n    if (!response || !response.active) {\n      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, INVALID_ACCESS);\n    }\n    const appidField = options.appidField;\n    if (!response[appidField]) {\n      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, INVALID_ACCESS_APPID);\n    }\n    const responseValue = response[appidField];\n    if (!Array.isArray(responseValue) && appIds.includes(responseValue)) {\n      return;\n    } else if (\n      Array.isArray(responseValue) &&\n      responseValue.some(appId => appIds.includes(appId))\n    ) {\n      return;\n    } else {\n      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, INVALID_ACCESS_APPID);\n    }\n  });\n}\n\n// A promise wrapper for requests to the OAuth2 token introspection endpoint.\nfunction requestTokenInfo(options, access_token) {\n  if (!options || !options.tokenIntrospectionEndpointUrl) {\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, MISSING_URL);\n  }\n  const parsedUrl = url.parse(options.tokenIntrospectionEndpointUrl);\n  const postData = querystring.stringify({\n    token: access_token,\n  });\n  const headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Content-Length': Buffer.byteLength(postData),\n  };\n  if (options.authorizationHeader) {\n    headers['Authorization'] = options.authorizationHeader;\n  }\n  const postOptions = {\n    hostname: parsedUrl.hostname,\n    path: parsedUrl.pathname,\n    method: 'POST',\n    headers: headers,\n  };\n  return httpsRequest.request(postOptions, postData);\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData,\n};\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ab914274877d48b54f6de9bf7ce353de59bab493"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1v7phfd2ts=function(){return actualCoverage;};}return actualCoverage;}cov_1v7phfd2ts();const Parse=(cov_1v7phfd2ts().s[0]++,require('parse/node').Parse);const url=(cov_1v7phfd2ts().s[1]++,require('url'));const querystring=(cov_1v7phfd2ts().s[2]++,require('querystring'));const httpsRequest=(cov_1v7phfd2ts().s[3]++,require('./httpsRequest'));const INVALID_ACCESS=(cov_1v7phfd2ts().s[4]++,'OAuth2 access token is invalid for this user.');const INVALID_ACCESS_APPID=(cov_1v7phfd2ts().s[5]++,"OAuth2: the access_token's appID is empty or is not in the list of permitted appIDs in the auth configuration.");const MISSING_APPIDS=(cov_1v7phfd2ts().s[6]++,'OAuth2 configuration is missing the client app IDs ("appIds" config parameter).');const MISSING_URL=(cov_1v7phfd2ts().s[7]++,'OAuth2 token introspection endpoint URL is missing from configuration!');// Returns a promise that fulfills if this user id is valid.
function validateAuthData(authData,options){cov_1v7phfd2ts().f[0]++;cov_1v7phfd2ts().s[8]++;return requestTokenInfo(options,authData.access_token).then(response=>{cov_1v7phfd2ts().f[1]++;cov_1v7phfd2ts().s[9]++;if((cov_1v7phfd2ts().b[1][0]++,!response)||(cov_1v7phfd2ts().b[1][1]++,!response.active)||(cov_1v7phfd2ts().b[1][2]++,options.useridField)&&(cov_1v7phfd2ts().b[1][3]++,authData.id!==response[options.useridField])){cov_1v7phfd2ts().b[0][0]++;cov_1v7phfd2ts().s[10]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,INVALID_ACCESS);}else{cov_1v7phfd2ts().b[0][1]++;}});}function validateAppId(appIds,authData,options){cov_1v7phfd2ts().f[2]++;cov_1v7phfd2ts().s[11]++;if((cov_1v7phfd2ts().b[3][0]++,!options)||(cov_1v7phfd2ts().b[3][1]++,!options.appidField)){cov_1v7phfd2ts().b[2][0]++;cov_1v7phfd2ts().s[12]++;return Promise.resolve();}else{cov_1v7phfd2ts().b[2][1]++;}cov_1v7phfd2ts().s[13]++;if((cov_1v7phfd2ts().b[5][0]++,!appIds)||(cov_1v7phfd2ts().b[5][1]++,appIds.length===0)){cov_1v7phfd2ts().b[4][0]++;cov_1v7phfd2ts().s[14]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,MISSING_APPIDS);}else{cov_1v7phfd2ts().b[4][1]++;}cov_1v7phfd2ts().s[15]++;return requestTokenInfo(options,authData.access_token).then(response=>{cov_1v7phfd2ts().f[3]++;cov_1v7phfd2ts().s[16]++;if((cov_1v7phfd2ts().b[7][0]++,!response)||(cov_1v7phfd2ts().b[7][1]++,!response.active)){cov_1v7phfd2ts().b[6][0]++;cov_1v7phfd2ts().s[17]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,INVALID_ACCESS);}else{cov_1v7phfd2ts().b[6][1]++;}const appidField=(cov_1v7phfd2ts().s[18]++,options.appidField);cov_1v7phfd2ts().s[19]++;if(!response[appidField]){cov_1v7phfd2ts().b[8][0]++;cov_1v7phfd2ts().s[20]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,INVALID_ACCESS_APPID);}else{cov_1v7phfd2ts().b[8][1]++;}const responseValue=(cov_1v7phfd2ts().s[21]++,response[appidField]);cov_1v7phfd2ts().s[22]++;if((cov_1v7phfd2ts().b[10][0]++,!Array.isArray(responseValue))&&(cov_1v7phfd2ts().b[10][1]++,appIds.includes(responseValue))){cov_1v7phfd2ts().b[9][0]++;cov_1v7phfd2ts().s[23]++;return;}else{cov_1v7phfd2ts().b[9][1]++;cov_1v7phfd2ts().s[24]++;if((cov_1v7phfd2ts().b[12][0]++,Array.isArray(responseValue))&&(cov_1v7phfd2ts().b[12][1]++,responseValue.some(appId=>{cov_1v7phfd2ts().f[4]++;cov_1v7phfd2ts().s[25]++;return appIds.includes(appId);}))){cov_1v7phfd2ts().b[11][0]++;cov_1v7phfd2ts().s[26]++;return;}else{cov_1v7phfd2ts().b[11][1]++;cov_1v7phfd2ts().s[27]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,INVALID_ACCESS_APPID);}}});}// A promise wrapper for requests to the OAuth2 token introspection endpoint.
function requestTokenInfo(options,access_token){cov_1v7phfd2ts().f[5]++;cov_1v7phfd2ts().s[28]++;if((cov_1v7phfd2ts().b[14][0]++,!options)||(cov_1v7phfd2ts().b[14][1]++,!options.tokenIntrospectionEndpointUrl)){cov_1v7phfd2ts().b[13][0]++;cov_1v7phfd2ts().s[29]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,MISSING_URL);}else{cov_1v7phfd2ts().b[13][1]++;}const parsedUrl=(cov_1v7phfd2ts().s[30]++,url.parse(options.tokenIntrospectionEndpointUrl));const postData=(cov_1v7phfd2ts().s[31]++,querystring.stringify({token:access_token}));const headers=(cov_1v7phfd2ts().s[32]++,{'Content-Type':'application/x-www-form-urlencoded','Content-Length':Buffer.byteLength(postData)});cov_1v7phfd2ts().s[33]++;if(options.authorizationHeader){cov_1v7phfd2ts().b[15][0]++;cov_1v7phfd2ts().s[34]++;headers['Authorization']=options.authorizationHeader;}else{cov_1v7phfd2ts().b[15][1]++;}const postOptions=(cov_1v7phfd2ts().s[35]++,{hostname:parsedUrl.hostname,path:parsedUrl.pathname,method:'POST',headers:headers});cov_1v7phfd2ts().s[36]++;return httpsRequest.request(postOptions,postData);}cov_1v7phfd2ts().s[37]++;module.exports={validateAppId:validateAppId,validateAuthData:validateAuthData};//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,