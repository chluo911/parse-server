"use strict";function cov_2n1zsnsk4b(){var path="/parse-server/lib/ParseServer.js";var hash="67ae2c48166a0c294bf349981d117bbd8aa7293e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/ParseServer.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:25}},"2":{start:{line:8,column:15},end:{line:8,column:35}},"3":{start:{line:10,column:16},end:{line:10,column:61}},"4":{start:{line:12,column:14},end:{line:12,column:58}},"5":{start:{line:14,column:14},end:{line:14,column:57}},"6":{start:{line:16,column:21},end:{line:16,column:71}},"7":{start:{line:18,column:25},end:{line:18,column:79}},"8":{start:{line:20,column:23},end:{line:20,column:59}},"9":{start:{line:22,column:21},end:{line:22,column:55}},"10":{start:{line:24,column:22},end:{line:24,column:57}},"11":{start:{line:26,column:19},end:{line:26,column:51}},"12":{start:{line:28,column:23},end:{line:28,column:59}},"13":{start:{line:30,column:26},end:{line:30,column:65}},"14":{start:{line:32,column:21},end:{line:32,column:55}},"15":{start:{line:34,column:19},end:{line:34,column:51}},"16":{start:{line:36,column:27},end:{line:36,column:67}},"17":{start:{line:38,column:27},end:{line:38,column:67}},"18":{start:{line:40,column:18},end:{line:40,column:49}},"19":{start:{line:42,column:28},end:{line:42,column:71}},"20":{start:{line:44,column:19},end:{line:44,column:51}},"21":{start:{line:46,column:23},end:{line:46,column:59}},"22":{start:{line:48,column:18},end:{line:48,column:49}},"23":{start:{line:50,column:23},end:{line:50,column:59}},"24":{start:{line:52,column:19},end:{line:52,column:51}},"25":{start:{line:54,column:21},end:{line:54,column:55}},"26":{start:{line:56,column:22},end:{line:56,column:57}},"27":{start:{line:58,column:19},end:{line:58,column:51}},"28":{start:{line:60,column:19},end:{line:60,column:51}},"29":{start:{line:62,column:23},end:{line:62,column:59}},"30":{start:{line:64,column:23},end:{line:64,column:59}},"31":{start:{line:66,column:33},end:{line:66,column:71}},"32":{start:{line:68,column:18},end:{line:68,column:67}},"33":{start:{line:70,column:26},end:{line:70,column:65}},"34":{start:{line:72,column:22},end:{line:72,column:57}},"35":{start:{line:74,column:19},end:{line:74,column:76}},"36":{start:{line:76,column:18},end:{line:76,column:76}},"37":{start:{line:78,column:22},end:{line:78,column:66}},"38":{start:{line:80,column:49},end:{line:80,column:96}},"39":{start:{line:80,column:84},end:{line:80,column:96}},"40":{start:{line:80,column:121},end:{line:80,column:134}},"41":{start:{line:80,column:159},end:{line:80,column:172}},"42":{start:{line:80,column:174},end:{line:80,column:309}},"43":{start:{line:80,column:234},end:{line:80,column:292}},"44":{start:{line:82,column:53},end:{line:82,column:111}},"45":{start:{line:82,column:98},end:{line:82,column:109}},"46":{start:{line:82,column:112},end:{line:82,column:214}},"47":{start:{line:82,column:188},end:{line:82,column:212}},"48":{start:{line:82,column:227},end:{line:82,column:264}},"49":{start:{line:82,column:266},end:{line:82,column:321}},"50":{start:{line:82,column:297},end:{line:82,column:319}},"51":{start:{line:82,column:335},end:{line:82,column:337}},"52":{start:{line:82,column:367},end:{line:82,column:423}},"53":{start:{line:82,column:425},end:{line:82,column:726}},"54":{start:{line:82,column:448},end:{line:82,column:724}},"55":{start:{line:82,column:534},end:{line:82,column:606}},"56":{start:{line:82,column:608},end:{line:82,column:722}},"57":{start:{line:82,column:646},end:{line:82,column:687}},"58":{start:{line:82,column:697},end:{line:82,column:720}},"59":{start:{line:82,column:727},end:{line:82,column:748}},"60":{start:{line:82,column:749},end:{line:82,column:787}},"61":{start:{line:82,column:762},end:{line:82,column:785}},"62":{start:{line:82,column:788},end:{line:82,column:802}},"63":{start:{line:84,column:39},end:{line:84,column:93}},"64":{start:{line:87,column:12},end:{line:87,column:30}},"65":{start:{line:88,column:17},end:{line:88,column:39}},"66":{start:{line:89,column:14},end:{line:89,column:32}},"67":{start:{line:90,column:18},end:{line:90,column:42}},"68":{start:{line:91,column:12},end:{line:91,column:39}},"69":{start:{line:94,column:4},end:{line:94,column:22}},"70":{start:{line:95,column:11},end:{line:95,column:26}},"71":{start:{line:96,column:9},end:{line:96,column:22}},"72":{start:{line:99,column:0},end:{line:99,column:16}},"73":{start:{line:109,column:4},end:{line:109,column:56}},"74":{start:{line:112,column:4},end:{line:112,column:28}},"75":{start:{line:122,column:8},end:{line:122,column:15}},"76":{start:{line:124,column:4},end:{line:124,column:66}},"77":{start:{line:125,column:4},end:{line:125,column:32}},"78":{start:{line:126,column:27},end:{line:126,column:62}},"79":{start:{line:131,column:8},end:{line:131,column:22}},"80":{start:{line:132,column:4},end:{line:132,column:82}},"81":{start:{line:133,column:4},end:{line:133,column:40}},"82":{start:{line:135,column:4},end:{line:150,column:7}},"83":{start:{line:135,column:58},end:{line:135,column:80}},"84":{start:{line:136,column:6},end:{line:138,column:7}},"85":{start:{line:137,column:8},end:{line:137,column:80}},"86":{start:{line:140,column:6},end:{line:142,column:7}},"87":{start:{line:141,column:8},end:{line:141,column:30}},"88":{start:{line:144,column:6},end:{line:149,column:7}},"89":{start:{line:145,column:8},end:{line:145,column:35}},"90":{start:{line:147,column:8},end:{line:147,column:29}},"91":{start:{line:148,column:8},end:{line:148,column:24}},"92":{start:{line:152,column:4},end:{line:162,column:5}},"93":{start:{line:153,column:6},end:{line:153,column:22}},"94":{start:{line:155,column:6},end:{line:161,column:7}},"95":{start:{line:156,column:8},end:{line:156,column:21}},"96":{start:{line:157,column:13},end:{line:161,column:7}},"97":{start:{line:158,column:8},end:{line:158,column:52}},"98":{start:{line:160,column:8},end:{line:160,column:71}},"99":{start:{line:164,column:4},end:{line:166,column:5}},"100":{start:{line:165,column:6},end:{line:165,column:55}},"101":{start:{line:170,column:4},end:{line:172,column:5}},"102":{start:{line:171,column:6},end:{line:171,column:47}},"103":{start:{line:174,column:4},end:{line:174,column:21}},"104":{start:{line:178,column:21},end:{line:178,column:23}},"105":{start:{line:181,column:8},end:{line:181,column:38}},"106":{start:{line:183,column:4},end:{line:185,column:5}},"107":{start:{line:184,column:6},end:{line:184,column:54}},"108":{start:{line:189,column:8},end:{line:189,column:35}},"109":{start:{line:191,column:4},end:{line:193,column:5}},"110":{start:{line:192,column:6},end:{line:192,column:50}},"111":{start:{line:197,column:8},end:{line:197,column:35}},"112":{start:{line:199,column:4},end:{line:201,column:5}},"113":{start:{line:200,column:6},end:{line:200,column:51}},"114":{start:{line:203,column:4},end:{line:207,column:7}},"115":{start:{line:204,column:6},end:{line:206,column:7}},"116":{start:{line:205,column:8},end:{line:205,column:42}},"117":{start:{line:221,column:8},end:{line:221,column:15}},"118":{start:{line:224,column:14},end:{line:224,column:23}},"119":{start:{line:226,column:4},end:{line:226,column:49}},"120":{start:{line:228,column:4},end:{line:230,column:8}},"121":{start:{line:231,column:4},end:{line:235,column:7}},"122":{start:{line:232,column:6},end:{line:234,column:9}},"123":{start:{line:236,column:4},end:{line:238,column:139}},"124":{start:{line:239,column:4},end:{line:242,column:8}},"125":{start:{line:243,column:4},end:{line:243,column:45}},"126":{start:{line:244,column:4},end:{line:244,column:44}},"127":{start:{line:245,column:22},end:{line:247,column:6}},"128":{start:{line:248,column:4},end:{line:248,column:39}},"129":{start:{line:249,column:4},end:{line:249,column:43}},"130":{start:{line:251,column:4},end:{line:270,column:5}},"131":{start:{line:272,column:4},end:{line:274,column:5}},"132":{start:{line:273,column:6},end:{line:273,column:119}},"133":{start:{line:276,column:4},end:{line:276,column:15}},"134":{start:{line:282,column:20},end:{line:282,column:772}},"135":{start:{line:283,column:19},end:{line:285,column:10}},"136":{start:{line:284,column:6},end:{line:284,column:40}},"137":{start:{line:286,column:22},end:{line:286,column:63}},"138":{start:{line:287,column:4},end:{line:287,column:31}},"139":{start:{line:288,column:4},end:{line:288,column:21}},"140":{start:{line:299,column:16},end:{line:299,column:25}},"141":{start:{line:301,column:4},end:{line:311,column:5}},"142":{start:{line:304,column:6},end:{line:308,column:7}},"143":{start:{line:305,column:8},end:{line:305,column:78}},"144":{start:{line:307,column:8},end:{line:307,column:40}},"145":{start:{line:310,column:6},end:{line:310,column:26}},"146":{start:{line:313,column:4},end:{line:313,column:41}},"147":{start:{line:315,column:4},end:{line:337,column:5}},"148":{start:{line:316,column:34},end:{line:316,column:43}},"149":{start:{line:318,column:6},end:{line:322,column:7}},"150":{start:{line:319,column:8},end:{line:319,column:86}},"151":{start:{line:320,column:13},end:{line:322,column:7}},"152":{start:{line:321,column:8},end:{line:321,column:54}},"153":{start:{line:324,column:33},end:{line:328,column:8}},"154":{start:{line:330,column:6},end:{line:332,column:7}},"155":{start:{line:331,column:8},end:{line:331,column:45}},"156":{start:{line:334,column:6},end:{line:336,column:7}},"157":{start:{line:335,column:8},end:{line:335,column:48}},"158":{start:{line:339,column:19},end:{line:339,column:67}},"159":{start:{line:340,column:4},end:{line:340,column:25}},"160":{start:{line:342,column:4},end:{line:344,column:5}},"161":{start:{line:343,column:6},end:{line:343,column:112}},"162":{start:{line:352,column:4},end:{line:352,column:26}},"163":{start:{line:353,column:4},end:{line:353,column:16}},"164":{start:{line:364,column:24},end:{line:364,column:48}},"165":{start:{line:365,column:4},end:{line:365,column:48}},"166":{start:{line:378,column:4},end:{line:382,column:5}},"167":{start:{line:379,column:16},end:{line:379,column:25}},"168":{start:{line:380,column:6},end:{line:380,column:53}},"169":{start:{line:381,column:6},end:{line:381,column:37}},"170":{start:{line:384,column:4},end:{line:384,column:87}},"171":{start:{line:389,column:4},end:{line:411,column:5}},"172":{start:{line:390,column:22},end:{line:390,column:42}},"173":{start:{line:392,column:6},end:{line:410,column:9}},"174":{start:{line:394,column:27},end:{line:394,column:35}},"175":{start:{line:395,column:21},end:{line:395,column:42}},"176":{start:{line:397,column:8},end:{line:409,column:9}},"177":{start:{line:399,column:10},end:{line:399,column:141}},"178":{start:{line:402,column:10},end:{line:404,column:11}},"179":{start:{line:403,column:12},end:{line:403,column:28}},"180":{start:{line:406,column:10},end:{line:408,column:11}},"181":{start:{line:407,column:12},end:{line:407,column:27}},"182":{start:{line:417,column:21},end:{line:417,column:56}},"183":{start:{line:419,column:2},end:{line:419,column:41}},"184":{start:{line:420,column:2},end:{line:420,column:23}},"185":{start:{line:424,column:2},end:{line:428,column:5}},"186":{start:{line:425,column:4},end:{line:427,column:5}},"187":{start:{line:426,column:6},end:{line:426,column:44}},"188":{start:{line:430,column:2},end:{line:432,column:3}},"189":{start:{line:431,column:4},end:{line:431,column:79}},"190":{start:{line:435,column:2},end:{line:441,column:3}},"191":{start:{line:436,column:18},end:{line:436,column:49}},"192":{start:{line:438,column:4},end:{line:440,column:5}},"193":{start:{line:439,column:6},end:{line:439,column:114}},"194":{start:{line:444,column:2},end:{line:461,column:3}},"195":{start:{line:446,column:4},end:{line:446,column:182}},"196":{start:{line:449,column:32},end:{line:449,column:143}},"197":{start:{line:454,column:4},end:{line:458,column:5}},"198":{start:{line:455,column:6},end:{line:457,column:34}},"199":{start:{line:460,column:4},end:{line:460,column:140}},"200":{start:{line:464,column:2},end:{line:475,column:5}},"201":{start:{line:465,column:16},end:{line:465,column:42}},"202":{start:{line:467,column:4},end:{line:474,column:5}},"203":{start:{line:468,column:6},end:{line:468,column:72}},"204":{start:{line:470,column:6},end:{line:473,column:9}},"205":{start:{line:471,column:20},end:{line:471,column:115}},"206":{start:{line:472,column:8},end:{line:472,column:56}},"207":{start:{line:476,column:2},end:{line:476,column:128}},"208":{start:{line:517,column:15},end:{line:517,column:26}},"209":{start:{line:518,column:0},end:{line:518,column:27}}},fnMap:{"0":{name:"_getRequireWildcardCache",decl:{start:{line:80,column:9},end:{line:80,column:33}},loc:{start:{line:80,column:47},end:{line:80,column:311}},line:80},"1":{name:"(anonymous_1)",decl:{start:{line:80,column:209},end:{line:80,column:210}},loc:{start:{line:80,column:232},end:{line:80,column:294}},line:80},"2":{name:"_interopRequireWildcard",decl:{start:{line:82,column:9},end:{line:82,column:32}},loc:{start:{line:82,column:51},end:{line:82,column:804}},line:82},"3":{name:"_interopRequireDefault",decl:{start:{line:84,column:9},end:{line:84,column:31}},loc:{start:{line:84,column:37},end:{line:84,column:95}},line:84},"4":{name:"(anonymous_4)",decl:{start:{line:107,column:2},end:{line:107,column:3}},loc:{start:{line:107,column:23},end:{line:167,column:3}},line:107},"5":{name:"(anonymous_5)",decl:{start:{line:135,column:52},end:{line:135,column:53}},loc:{start:{line:135,column:58},end:{line:135,column:80}},line:135},"6":{name:"(anonymous_6)",decl:{start:{line:135,column:87},end:{line:135,column:88}},loc:{start:{line:135,column:99},end:{line:143,column:5}},line:135},"7":{name:"(anonymous_7)",decl:{start:{line:143,column:13},end:{line:143,column:14}},loc:{start:{line:143,column:22},end:{line:150,column:5}},line:143},"8":{name:"(anonymous_8)",decl:{start:{line:169,column:2},end:{line:169,column:3}},loc:{start:{line:169,column:12},end:{line:175,column:3}},line:169},"9":{name:"(anonymous_9)",decl:{start:{line:177,column:2},end:{line:177,column:3}},loc:{start:{line:177,column:19},end:{line:208,column:3}},line:177},"10":{name:"(anonymous_10)",decl:{start:{line:203,column:82},end:{line:203,column:83}},loc:{start:{line:203,column:88},end:{line:207,column:5}},line:203},"11":{name:"(anonymous_11)",decl:{start:{line:215,column:2},end:{line:215,column:3}},loc:{start:{line:215,column:22},end:{line:277,column:3}},line:215},"12":{name:"(anonymous_12)",decl:{start:{line:231,column:23},end:{line:231,column:24}},loc:{start:{line:231,column:43},end:{line:235,column:5}},line:231},"13":{name:"(anonymous_13)",decl:{start:{line:279,column:2},end:{line:279,column:3}},loc:{start:{line:281,column:5},end:{line:289,column:3}},line:281},"14":{name:"(anonymous_14)",decl:{start:{line:283,column:34},end:{line:283,column:35}},loc:{start:{line:283,column:52},end:{line:285,column:5}},line:283},"15":{name:"(anonymous_15)",decl:{start:{line:298,column:2},end:{line:298,column:3}},loc:{start:{line:298,column:27},end:{line:354,column:3}},line:298},"16":{name:"(anonymous_16)",decl:{start:{line:363,column:2},end:{line:363,column:3}},loc:{start:{line:363,column:34},end:{line:366,column:3}},line:363},"17":{name:"(anonymous_17)",decl:{start:{line:377,column:2},end:{line:377,column:3}},loc:{start:{line:377,column:60},end:{line:385,column:3}},line:377},"18":{name:"(anonymous_18)",decl:{start:{line:387,column:2},end:{line:387,column:3}},loc:{start:{line:387,column:35},end:{line:412,column:3}},line:387},"19":{name:"(anonymous_19)",decl:{start:{line:394,column:15},end:{line:394,column:16}},loc:{start:{line:394,column:27},end:{line:394,column:35}},line:394},"20":{name:"(anonymous_20)",decl:{start:{line:394,column:42},end:{line:394,column:43}},loc:{start:{line:394,column:54},end:{line:410,column:7}},line:394},"21":{name:"addParseCloud",decl:{start:{line:416,column:9},end:{line:416,column:22}},loc:{start:{line:416,column:25},end:{line:421,column:1}},line:416},"22":{name:"injectDefaults",decl:{start:{line:423,column:9},end:{line:423,column:23}},loc:{start:{line:423,column:33},end:{line:477,column:1}},line:423},"23":{name:"(anonymous_23)",decl:{start:{line:424,column:41},end:{line:424,column:42}},loc:{start:{line:424,column:48},end:{line:428,column:3}},line:424},"24":{name:"(anonymous_24)",decl:{start:{line:464,column:57},end:{line:464,column:58}},loc:{start:{line:464,column:62},end:{line:475,column:3}},line:464},"25":{name:"(anonymous_25)",decl:{start:{line:470,column:64},end:{line:470,column:65}},loc:{start:{line:470,column:69},end:{line:473,column:7}},line:470}},branchMap:{"0":{loc:{start:{line:80,column:49},end:{line:80,column:96}},type:"if",locations:[{start:{line:80,column:49},end:{line:80,column:96}},{start:{line:80,column:49},end:{line:80,column:96}}],line:80},"1":{loc:{start:{line:80,column:241},end:{line:80,column:291}},type:"cond-expr",locations:[{start:{line:80,column:255},end:{line:80,column:271}},{start:{line:80,column:274},end:{line:80,column:291}}],line:80},"2":{loc:{start:{line:82,column:53},end:{line:82,column:111}},type:"if",locations:[{start:{line:82,column:53},end:{line:82,column:111}},{start:{line:82,column:53},end:{line:82,column:111}}],line:82},"3":{loc:{start:{line:82,column:57},end:{line:82,column:94}},type:"binary-expr",locations:[{start:{line:82,column:57},end:{line:82,column:69}},{start:{line:82,column:73},end:{line:82,column:76}},{start:{line:82,column:80},end:{line:82,column:94}}],line:82},"4":{loc:{start:{line:82,column:112},end:{line:82,column:214}},type:"if",locations:[{start:{line:82,column:112},end:{line:82,column:214}},{start:{line:82,column:112},end:{line:82,column:214}}],line:82},"5":{loc:{start:{line:82,column:116},end:{line:82,column:184}},type:"binary-expr",locations:[{start:{line:82,column:116},end:{line:82,column:128}},{start:{line:82,column:132},end:{line:82,column:155}},{start:{line:82,column:159},end:{line:82,column:184}}],line:82},"6":{loc:{start:{line:82,column:266},end:{line:82,column:321}},type:"if",locations:[{start:{line:82,column:266},end:{line:82,column:321}},{start:{line:82,column:266},end:{line:82,column:321}}],line:82},"7":{loc:{start:{line:82,column:270},end:{line:82,column:293}},type:"binary-expr",locations:[{start:{line:82,column:270},end:{line:82,column:275}},{start:{line:82,column:279},end:{line:82,column:293}}],line:82},"8":{loc:{start:{line:82,column:367},end:{line:82,column:423}},type:"binary-expr",locations:[{start:{line:82,column:367},end:{line:82,column:388}},{start:{line:82,column:392},end:{line:82,column:423}}],line:82},"9":{loc:{start:{line:82,column:448},end:{line:82,column:724}},type:"if",locations:[{start:{line:82,column:448},end:{line:82,column:724}},{start:{line:82,column:448},end:{line:82,column:724}}],line:82},"10":{loc:{start:{line:82,column:452},end:{line:82,column:519}},type:"binary-expr",locations:[{start:{line:82,column:452},end:{line:82,column:469}},{start:{line:82,column:473},end:{line:82,column:519}}],line:82},"11":{loc:{start:{line:82,column:534},end:{line:82,column:606}},type:"cond-expr",locations:[{start:{line:82,column:558},end:{line:82,column:599}},{start:{line:82,column:602},end:{line:82,column:606}}],line:82},"12":{loc:{start:{line:82,column:608},end:{line:82,column:722}},type:"if",locations:[{start:{line:82,column:608},end:{line:82,column:722}},{start:{line:82,column:608},end:{line:82,column:722}}],line:82},"13":{loc:{start:{line:82,column:612},end:{line:82,column:642}},type:"binary-expr",locations:[{start:{line:82,column:612},end:{line:82,column:616}},{start:{line:82,column:621},end:{line:82,column:629}},{start:{line:82,column:633},end:{line:82,column:641}}],line:82},"14":{loc:{start:{line:82,column:749},end:{line:82,column:787}},type:"if",locations:[{start:{line:82,column:749},end:{line:82,column:787}},{start:{line:82,column:749},end:{line:82,column:787}}],line:82},"15":{loc:{start:{line:84,column:46},end:{line:84,column:92}},type:"cond-expr",locations:[{start:{line:84,column:70},end:{line:84,column:73}},{start:{line:84,column:76},end:{line:84,column:92}}],line:84},"16":{loc:{start:{line:84,column:46},end:{line:84,column:67}},type:"binary-expr",locations:[{start:{line:84,column:46},end:{line:84,column:49}},{start:{line:84,column:53},end:{line:84,column:67}}],line:84},"17":{loc:{start:{line:114,column:6},end:{line:114,column:75}},type:"default-arg",locations:[{start:{line:114,column:14},end:{line:114,column:75}}],line:114},"18":{loc:{start:{line:115,column:6},end:{line:115,column:82}},type:"default-arg",locations:[{start:{line:115,column:18},end:{line:115,column:82}}],line:115},"19":{loc:{start:{line:119,column:6},end:{line:119,column:82}},type:"default-arg",locations:[{start:{line:119,column:18},end:{line:119,column:82}}],line:119},"20":{loc:{start:{line:124,column:28},end:{line:124,column:53}},type:"binary-expr",locations:[{start:{line:124,column:28},end:{line:124,column:41}},{start:{line:124,column:45},end:{line:124,column:53}}],line:124},"21":{loc:{start:{line:136,column:6},end:{line:138,column:7}},type:"if",locations:[{start:{line:136,column:6},end:{line:138,column:7}},{start:{line:136,column:6},end:{line:138,column:7}}],line:136},"22":{loc:{start:{line:140,column:6},end:{line:142,column:7}},type:"if",locations:[{start:{line:140,column:6},end:{line:142,column:7}},{start:{line:140,column:6},end:{line:142,column:7}}],line:140},"23":{loc:{start:{line:144,column:6},end:{line:149,column:7}},type:"if",locations:[{start:{line:144,column:6},end:{line:149,column:7}},{start:{line:144,column:6},end:{line:149,column:7}}],line:144},"24":{loc:{start:{line:152,column:4},end:{line:162,column:5}},type:"if",locations:[{start:{line:152,column:4},end:{line:162,column:5}},{start:{line:152,column:4},end:{line:162,column:5}}],line:152},"25":{loc:{start:{line:155,column:6},end:{line:161,column:7}},type:"if",locations:[{start:{line:155,column:6},end:{line:161,column:7}},{start:{line:155,column:6},end:{line:161,column:7}}],line:155},"26":{loc:{start:{line:157,column:13},end:{line:161,column:7}},type:"if",locations:[{start:{line:157,column:13},end:{line:161,column:7}},{start:{line:157,column:13},end:{line:161,column:7}}],line:157},"27":{loc:{start:{line:164,column:4},end:{line:166,column:5}},type:"if",locations:[{start:{line:164,column:4},end:{line:166,column:5}},{start:{line:164,column:4},end:{line:166,column:5}}],line:164},"28":{loc:{start:{line:164,column:8},end:{line:164,column:67}},type:"binary-expr",locations:[{start:{line:164,column:8},end:{line:164,column:16}},{start:{line:164,column:20},end:{line:164,column:40}},{start:{line:164,column:44},end:{line:164,column:67}}],line:164},"29":{loc:{start:{line:170,column:4},end:{line:172,column:5}},type:"if",locations:[{start:{line:170,column:4},end:{line:172,column:5}},{start:{line:170,column:4},end:{line:172,column:5}}],line:170},"30":{loc:{start:{line:183,column:4},end:{line:185,column:5}},type:"if",locations:[{start:{line:183,column:4},end:{line:185,column:5}},{start:{line:183,column:4},end:{line:185,column:5}}],line:183},"31":{loc:{start:{line:183,column:8},end:{line:183,column:79}},type:"binary-expr",locations:[{start:{line:183,column:8},end:{line:183,column:23}},{start:{line:183,column:27},end:{line:183,column:79}}],line:183},"32":{loc:{start:{line:191,column:4},end:{line:193,column:5}},type:"if",locations:[{start:{line:191,column:4},end:{line:193,column:5}},{start:{line:191,column:4},end:{line:193,column:5}}],line:191},"33":{loc:{start:{line:191,column:8},end:{line:191,column:71}},type:"binary-expr",locations:[{start:{line:191,column:8},end:{line:191,column:19}},{start:{line:191,column:23},end:{line:191,column:71}}],line:191},"34":{loc:{start:{line:199,column:4},end:{line:201,column:5}},type:"if",locations:[{start:{line:199,column:4},end:{line:201,column:5}},{start:{line:199,column:4},end:{line:201,column:5}}],line:199},"35":{loc:{start:{line:199,column:8},end:{line:199,column:73}},type:"binary-expr",locations:[{start:{line:199,column:8},end:{line:199,column:20}},{start:{line:199,column:24},end:{line:199,column:73}}],line:199},"36":{loc:{start:{line:203,column:12},end:{line:203,column:75}},type:"cond-expr",locations:[{start:{line:203,column:34},end:{line:203,column:55}},{start:{line:203,column:58},end:{line:203,column:75}}],line:203},"37":{loc:{start:{line:204,column:6},end:{line:206,column:7}},type:"if",locations:[{start:{line:204,column:6},end:{line:206,column:7}},{start:{line:204,column:6},end:{line:206,column:7}}],line:204},"38":{loc:{start:{line:217,column:6},end:{line:217,column:28}},type:"default-arg",locations:[{start:{line:217,column:22},end:{line:217,column:28}}],line:217},"39":{loc:{start:{line:238,column:8},end:{line:238,column:137}},type:"cond-expr",locations:[{start:{line:238,column:29},end:{line:238,column:80}},{start:{line:238,column:83},end:{line:238,column:137}}],line:238},"40":{loc:{start:{line:251,column:4},end:{line:270,column:5}},type:"if",locations:[{start:{line:251,column:4},end:{line:270,column:5}},{start:{line:251,column:4},end:{line:270,column:5}}],line:251},"41":{loc:{start:{line:272,column:4},end:{line:274,column:5}},type:"if",locations:[{start:{line:272,column:4},end:{line:274,column:5}},{start:{line:272,column:4},end:{line:274,column:5}}],line:272},"42":{loc:{start:{line:272,column:8},end:{line:272,column:90}},type:"binary-expr",locations:[{start:{line:272,column:8},end:{line:272,column:74}},{start:{line:272,column:78},end:{line:272,column:90}}],line:272},"43":{loc:{start:{line:301,column:4},end:{line:311,column:5}},type:"if",locations:[{start:{line:301,column:4},end:{line:311,column:5}},{start:{line:301,column:4},end:{line:311,column:5}}],line:301},"44":{loc:{start:{line:304,column:6},end:{line:308,column:7}},type:"if",locations:[{start:{line:304,column:6},end:{line:308,column:7}},{start:{line:304,column:6},end:{line:308,column:7}}],line:304},"45":{loc:{start:{line:315,column:4},end:{line:337,column:5}},type:"if",locations:[{start:{line:315,column:4},end:{line:337,column:5}},{start:{line:315,column:4},end:{line:337,column:5}}],line:315},"46":{loc:{start:{line:315,column:8},end:{line:315,column:73}},type:"binary-expr",locations:[{start:{line:315,column:8},end:{line:315,column:37}},{start:{line:315,column:41},end:{line:315,column:73}}],line:315},"47":{loc:{start:{line:318,column:6},end:{line:322,column:7}},type:"if",locations:[{start:{line:318,column:6},end:{line:322,column:7}},{start:{line:318,column:6},end:{line:322,column:7}}],line:318},"48":{loc:{start:{line:320,column:13},end:{line:322,column:7}},type:"if",locations:[{start:{line:320,column:13},end:{line:322,column:7}},{start:{line:320,column:13},end:{line:322,column:7}}],line:320},"49":{loc:{start:{line:320,column:17},end:{line:320,column:105}},type:"binary-expr",locations:[{start:{line:320,column:17},end:{line:320,column:58}},{start:{line:320,column:62},end:{line:320,column:105}}],line:320},"50":{loc:{start:{line:330,column:6},end:{line:332,column:7}},type:"if",locations:[{start:{line:330,column:6},end:{line:332,column:7}},{start:{line:330,column:6},end:{line:332,column:7}}],line:330},"51":{loc:{start:{line:334,column:6},end:{line:336,column:7}},type:"if",locations:[{start:{line:334,column:6},end:{line:336,column:7}},{start:{line:334,column:6},end:{line:336,column:7}}],line:334},"52":{loc:{start:{line:342,column:4},end:{line:344,column:5}},type:"if",locations:[{start:{line:342,column:4},end:{line:344,column:5}},{start:{line:342,column:4},end:{line:344,column:5}}],line:342},"53":{loc:{start:{line:342,column:8},end:{line:342,column:70}},type:"binary-expr",locations:[{start:{line:342,column:8},end:{line:342,column:36}},{start:{line:342,column:40},end:{line:342,column:70}}],line:342},"54":{loc:{start:{line:378,column:4},end:{line:382,column:5}},type:"if",locations:[{start:{line:378,column:4},end:{line:382,column:5}},{start:{line:378,column:4},end:{line:382,column:5}}],line:378},"55":{loc:{start:{line:378,column:8},end:{line:378,column:44}},type:"binary-expr",locations:[{start:{line:378,column:8},end:{line:378,column:19}},{start:{line:378,column:23},end:{line:378,column:29}},{start:{line:378,column:33},end:{line:378,column:44}}],line:378},"56":{loc:{start:{line:389,column:4},end:{line:411,column:5}},type:"if",locations:[{start:{line:389,column:4},end:{line:411,column:5}},{start:{line:389,column:4},end:{line:411,column:5}}],line:389},"57":{loc:{start:{line:395,column:21},end:{line:395,column:42}},type:"binary-expr",locations:[{start:{line:395,column:21},end:{line:395,column:34}},{start:{line:395,column:38},end:{line:395,column:42}}],line:395},"58":{loc:{start:{line:397,column:8},end:{line:409,column:9}},type:"if",locations:[{start:{line:397,column:8},end:{line:409,column:9}},{start:{line:397,column:8},end:{line:409,column:9}}],line:397},"59":{loc:{start:{line:397,column:12},end:{line:397,column:76}},type:"binary-expr",locations:[{start:{line:397,column:12},end:{line:397,column:35}},{start:{line:397,column:39},end:{line:397,column:44}},{start:{line:397,column:48},end:{line:397,column:52}},{start:{line:397,column:56},end:{line:397,column:76}}],line:397},"60":{loc:{start:{line:402,column:10},end:{line:404,column:11}},type:"if",locations:[{start:{line:402,column:10},end:{line:404,column:11}},{start:{line:402,column:10},end:{line:404,column:11}}],line:402},"61":{loc:{start:{line:406,column:10},end:{line:408,column:11}},type:"if",locations:[{start:{line:406,column:10},end:{line:408,column:11}},{start:{line:406,column:10},end:{line:408,column:11}}],line:406},"62":{loc:{start:{line:425,column:4},end:{line:427,column:5}},type:"if",locations:[{start:{line:425,column:4},end:{line:427,column:5}},{start:{line:425,column:4},end:{line:427,column:5}}],line:425},"63":{loc:{start:{line:430,column:2},end:{line:432,column:3}},type:"if",locations:[{start:{line:430,column:2},end:{line:432,column:3}},{start:{line:430,column:2},end:{line:432,column:3}}],line:430},"64":{loc:{start:{line:435,column:2},end:{line:441,column:3}},type:"if",locations:[{start:{line:435,column:2},end:{line:441,column:3}},{start:{line:435,column:2},end:{line:441,column:3}}],line:435},"65":{loc:{start:{line:438,column:4},end:{line:440,column:5}},type:"if",locations:[{start:{line:438,column:4},end:{line:440,column:5}},{start:{line:438,column:4},end:{line:440,column:5}}],line:438},"66":{loc:{start:{line:444,column:2},end:{line:461,column:3}},type:"if",locations:[{start:{line:444,column:2},end:{line:461,column:3}},{start:{line:444,column:2},end:{line:461,column:3}}],line:444},"67":{loc:{start:{line:446,column:4},end:{line:446,column:181}},type:"binary-expr",locations:[{start:{line:446,column:4},end:{line:446,column:24}},{start:{line:446,column:28},end:{line:446,column:181}}],line:446},"68":{loc:{start:{line:449,column:56},end:{line:449,column:99}},type:"binary-expr",locations:[{start:{line:449,column:56},end:{line:449,column:93}},{start:{line:449,column:97},end:{line:449,column:99}}],line:449},"69":{loc:{start:{line:449,column:106},end:{line:449,column:139}},type:"binary-expr",locations:[{start:{line:449,column:106},end:{line:449,column:133}},{start:{line:449,column:137},end:{line:449,column:139}}],line:449},"70":{loc:{start:{line:454,column:4},end:{line:458,column:5}},type:"if",locations:[{start:{line:454,column:4},end:{line:458,column:5}},{start:{line:454,column:4},end:{line:458,column:5}}],line:454},"71":{loc:{start:{line:460,column:68},end:{line:460,column:111}},type:"binary-expr",locations:[{start:{line:460,column:68},end:{line:460,column:105}},{start:{line:460,column:109},end:{line:460,column:111}}],line:460},"72":{loc:{start:{line:467,column:4},end:{line:474,column:5}},type:"if",locations:[{start:{line:467,column:4},end:{line:474,column:5}},{start:{line:467,column:4},end:{line:474,column:5}}],line:467},"73":{loc:{start:{line:471,column:33},end:{line:471,column:68}},type:"binary-expr",locations:[{start:{line:471,column:33},end:{line:471,column:62}},{start:{line:471,column:66},end:{line:471,column:68}}],line:471}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0],"18":[0],"19":[0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0,0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0]},inputSourceMap:{version:3,sources:["../src/ParseServer.js"],names:["batch","require","bodyParser","express","middlewares","Parse","parse","path","fs","addParseCloud","ParseServer","constructor","options","Deprecator","scanParseServerOptions","injectDefaults","appId","masterKey","cloud","security","javascriptKey","serverURL","serverStartComplete","schema","initialize","allControllers","controllers","getControllers","loggerController","databaseController","hooksController","config","Config","put","Object","assign","logging","setLogger","performInitialization","then","load","DefinedSchemas","execute","catch","error","console","process","exit","resolve","cwd","enableCheck","enableCheckLog","CheckRunner","run","app","_app","handleShutdown","promises","adapter","databaseAdapter","push","fileAdapter","filesController","cacheAdapter","cacheController","length","Promise","all","serverCloseComplete","maxUploadSize","directAccess","pages","api","use","allowCrossDomain","FilesRouter","expressRouter","req","res","json","status","urlencoded","extended","enableRouter","PagesRouter","PublicAPIRouter","type","limit","allowMethodOverride","handleParseHeaders","appRouter","promiseRouter","handleParseErrors","env","TESTING","on","err","code","stderr","write","port","verifyServerUrl","PARSE_SERVER_ENABLE_EXPERIMENTAL_DIRECT_ACCESS","CoreManager","setRESTController","routers","ClassesRouter","UsersRouter","SessionsRouter","RolesRouter","AnalyticsRouter","InstallationsRouter","FunctionsRouter","SchemasRouter","PushRouter","LogsRouter","IAPValidationRouter","FeaturesRouter","GlobalConfigRouter","GraphQLRouter","PurgeRouter","HooksRouter","CloudCodeRouter","AudiencesRouter","AggregateRouter","SecurityRouter","routes","reduce","memo","router","concat","PromiseRouter","mountOnto","start","callback","middleware","mountPath","mountGraphQL","mountPlayground","graphQLCustomTypeDefs","undefined","graphQLSchema","readFileSync","parseGraphQLServer","ParseGraphQLServer","graphQLPath","playgroundPath","applyGraphQL","applyPlayground","server","listen","host","startLiveQueryServer","liveQueryServerOptions","liveQueryServer","createLiveQueryServer","configureListeners","expressApp","parseServer","httpServer","createServer","ParseLiveQueryServer","request","url","replace","response","data","warn","ParseCloud","Cloud","global","keys","defaults","forEach","key","prototype","hasOwnProperty","call","regex","match","userSensitiveFields","Array","from","Set","protectedFields","_User","c","cur","r","unq","masterKeyIps","sockets","socket","socketId","remoteAddress","remotePort","destroyAliveConnections","destroy","e","stdout","close"],mappings:"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",sourcesContent:["// ParseServer - open-source compatible API Server for Parse apps\n\nvar batch = require('./batch'),\n  bodyParser = require('body-parser'),\n  express = require('express'),\n  middlewares = require('./middlewares'),\n  Parse = require('parse/node').Parse,\n  { parse } = require('graphql'),\n  path = require('path'),\n  fs = require('fs');\n\nimport { ParseServerOptions, LiveQueryServerOptions } from './Options';\nimport defaults from './defaults';\nimport * as logging from './logger';\nimport Config from './Config';\nimport PromiseRouter from './PromiseRouter';\nimport requiredParameter from './requiredParameter';\nimport { AnalyticsRouter } from './Routers/AnalyticsRouter';\nimport { ClassesRouter } from './Routers/ClassesRouter';\nimport { FeaturesRouter } from './Routers/FeaturesRouter';\nimport { FilesRouter } from './Routers/FilesRouter';\nimport { FunctionsRouter } from './Routers/FunctionsRouter';\nimport { GlobalConfigRouter } from './Routers/GlobalConfigRouter';\nimport { GraphQLRouter } from './Routers/GraphQLRouter';\nimport { HooksRouter } from './Routers/HooksRouter';\nimport { IAPValidationRouter } from './Routers/IAPValidationRouter';\nimport { InstallationsRouter } from './Routers/InstallationsRouter';\nimport { LogsRouter } from './Routers/LogsRouter';\nimport { ParseLiveQueryServer } from './LiveQuery/ParseLiveQueryServer';\nimport { PagesRouter } from './Routers/PagesRouter';\nimport { PublicAPIRouter } from './Routers/PublicAPIRouter';\nimport { PushRouter } from './Routers/PushRouter';\nimport { CloudCodeRouter } from './Routers/CloudCodeRouter';\nimport { RolesRouter } from './Routers/RolesRouter';\nimport { SchemasRouter } from './Routers/SchemasRouter';\nimport { SessionsRouter } from './Routers/SessionsRouter';\nimport { UsersRouter } from './Routers/UsersRouter';\nimport { PurgeRouter } from './Routers/PurgeRouter';\nimport { AudiencesRouter } from './Routers/AudiencesRouter';\nimport { AggregateRouter } from './Routers/AggregateRouter';\nimport { ParseServerRESTController } from './ParseServerRESTController';\nimport * as controllers from './Controllers';\nimport { ParseGraphQLServer } from './GraphQL/ParseGraphQLServer';\nimport { SecurityRouter } from './Routers/SecurityRouter';\nimport CheckRunner from './Security/CheckRunner';\nimport Deprecator from './Deprecator/Deprecator';\nimport { DefinedSchemas } from './SchemaMigrations/DefinedSchemas';\n\n// Mutate the Parse object to add the Cloud Code handlers\naddParseCloud();\n\n// ParseServer works like a constructor of an express app.\n// https://parseplatform.org/parse-server/api/master/ParseServerOptions.html\nclass ParseServer {\n  /**\n   * @constructor\n   * @param {ParseServerOptions} options the parse server initialization options\n   */\n  constructor(options: ParseServerOptions) {\n    // Scan for deprecated Parse Server options\n    Deprecator.scanParseServerOptions(options);\n    // Set option defaults\n    injectDefaults(options);\n    const {\n      appId = requiredParameter('You must provide an appId!'),\n      masterKey = requiredParameter('You must provide a masterKey!'),\n      cloud,\n      security,\n      javascriptKey,\n      serverURL = requiredParameter('You must provide a serverURL!'),\n      serverStartComplete,\n      schema,\n    } = options;\n    // Initialize the node client SDK automatically\n    Parse.initialize(appId, javascriptKey || 'unused', masterKey);\n    Parse.serverURL = serverURL;\n\n    const allControllers = controllers.getControllers(options);\n\n    const { loggerController, databaseController, hooksController } = allControllers;\n    this.config = Config.put(Object.assign({}, options, allControllers));\n\n    logging.setLogger(loggerController);\n\n    // Note: Tests will start to fail if any validation happens after this is called.\n    databaseController\n      .performInitialization()\n      .then(() => hooksController.load())\n      .then(async () => {\n        if (schema) {\n          await new DefinedSchemas(schema, this.config).execute();\n        }\n        if (serverStartComplete) {\n          serverStartComplete();\n        }\n      })\n      .catch(error => {\n        if (serverStartComplete) {\n          serverStartComplete(error);\n        } else {\n          console.error(error);\n          process.exit(1);\n        }\n      });\n\n    if (cloud) {\n      addParseCloud();\n      if (typeof cloud === 'function') {\n        cloud(Parse);\n      } else if (typeof cloud === 'string') {\n        require(path.resolve(process.cwd(), cloud));\n      } else {\n        throw \"argument 'cloud' must either be a string or a function\";\n      }\n    }\n\n    if (security && security.enableCheck && security.enableCheckLog) {\n      new CheckRunner(options.security).run();\n    }\n  }\n\n  get app() {\n    if (!this._app) {\n      this._app = ParseServer.app(this.config);\n    }\n    return this._app;\n  }\n\n  handleShutdown() {\n    const promises = [];\n    const { adapter: databaseAdapter } = this.config.databaseController;\n    if (databaseAdapter && typeof databaseAdapter.handleShutdown === 'function') {\n      promises.push(databaseAdapter.handleShutdown());\n    }\n    const { adapter: fileAdapter } = this.config.filesController;\n    if (fileAdapter && typeof fileAdapter.handleShutdown === 'function') {\n      promises.push(fileAdapter.handleShutdown());\n    }\n    const { adapter: cacheAdapter } = this.config.cacheController;\n    if (cacheAdapter && typeof cacheAdapter.handleShutdown === 'function') {\n      promises.push(cacheAdapter.handleShutdown());\n    }\n    return (promises.length > 0 ? Promise.all(promises) : Promise.resolve()).then(() => {\n      if (this.config.serverCloseComplete) {\n        this.config.serverCloseComplete();\n      }\n    });\n  }\n\n  /**\n   * @static\n   * Create an express app for the parse server\n   * @param {Object} options let you specify the maxUploadSize when creating the express app  */\n  static app(options) {\n    const { maxUploadSize = '20mb', appId, directAccess, pages } = options;\n    // This app serves the Parse API directly.\n    // It's the equivalent of https://api.parse.com/1 in the hosted Parse API.\n    var api = express();\n    //api.use(\"/apps\", express.static(__dirname + \"/public\"));\n    api.use(middlewares.allowCrossDomain(appId));\n    // File handling needs to be before default middlewares are applied\n    api.use(\n      '/',\n      new FilesRouter().expressRouter({\n        maxUploadSize: maxUploadSize,\n      })\n    );\n\n    api.use('/health', function (req, res) {\n      res.json({\n        status: 'ok',\n      });\n    });\n\n    api.use(\n      '/',\n      bodyParser.urlencoded({ extended: false }),\n      pages.enableRouter\n        ? new PagesRouter(pages).expressRouter()\n        : new PublicAPIRouter().expressRouter()\n    );\n\n    api.use(bodyParser.json({ type: '*/*', limit: maxUploadSize }));\n    api.use(middlewares.allowMethodOverride);\n    api.use(middlewares.handleParseHeaders);\n\n    const appRouter = ParseServer.promiseRouter({ appId });\n    api.use(appRouter.expressRouter());\n\n    api.use(middlewares.handleParseErrors);\n\n    // run the following when not testing\n    if (!process.env.TESTING) {\n      //This causes tests to spew some useless warnings, so disable in test\n      /* istanbul ignore next */\n      process.on('uncaughtException', err => {\n        if (err.code === 'EADDRINUSE') {\n          // user-friendly message for this common error\n          process.stderr.write(`Unable to listen on port ${err.port}. The port is already in use.`);\n          process.exit(0);\n        } else {\n          throw err;\n        }\n      });\n      // verify the server url after a 'mount' event is received\n      /* istanbul ignore next */\n      api.on('mount', function () {\n        ParseServer.verifyServerUrl();\n      });\n    }\n    if (process.env.PARSE_SERVER_ENABLE_EXPERIMENTAL_DIRECT_ACCESS === '1' || directAccess) {\n      Parse.CoreManager.setRESTController(ParseServerRESTController(appId, appRouter));\n    }\n    return api;\n  }\n\n  static promiseRouter({ appId }) {\n    const routers = [\n      new ClassesRouter(),\n      new UsersRouter(),\n      new SessionsRouter(),\n      new RolesRouter(),\n      new AnalyticsRouter(),\n      new InstallationsRouter(),\n      new FunctionsRouter(),\n      new SchemasRouter(),\n      new PushRouter(),\n      new LogsRouter(),\n      new IAPValidationRouter(),\n      new FeaturesRouter(),\n      new GlobalConfigRouter(),\n      new GraphQLRouter(),\n      new PurgeRouter(),\n      new HooksRouter(),\n      new CloudCodeRouter(),\n      new AudiencesRouter(),\n      new AggregateRouter(),\n      new SecurityRouter(),\n    ];\n\n    const routes = routers.reduce((memo, router) => {\n      return memo.concat(router.routes);\n    }, []);\n\n    const appRouter = new PromiseRouter(routes, appId);\n\n    batch.mountOnto(appRouter);\n    return appRouter;\n  }\n\n  /**\n   * starts the parse server's express app\n   * @param {ParseServerOptions} options to use to start the server\n   * @param {Function} callback called when the server has started\n   * @returns {ParseServer} the parse server instance\n   */\n  start(options: ParseServerOptions, callback: ?() => void) {\n    const app = express();\n    if (options.middleware) {\n      let middleware;\n      if (typeof options.middleware == 'string') {\n        middleware = require(path.resolve(process.cwd(), options.middleware));\n      } else {\n        middleware = options.middleware; // use as-is let express fail\n      }\n      app.use(middleware);\n    }\n\n    app.use(options.mountPath, this.app);\n\n    if (options.mountGraphQL === true || options.mountPlayground === true) {\n      let graphQLCustomTypeDefs = undefined;\n      if (typeof options.graphQLSchema === 'string') {\n        graphQLCustomTypeDefs = parse(fs.readFileSync(options.graphQLSchema, 'utf8'));\n      } else if (\n        typeof options.graphQLSchema === 'object' ||\n        typeof options.graphQLSchema === 'function'\n      ) {\n        graphQLCustomTypeDefs = options.graphQLSchema;\n      }\n\n      const parseGraphQLServer = new ParseGraphQLServer(this, {\n        graphQLPath: options.graphQLPath,\n        playgroundPath: options.playgroundPath,\n        graphQLCustomTypeDefs,\n      });\n\n      if (options.mountGraphQL) {\n        parseGraphQLServer.applyGraphQL(app);\n      }\n\n      if (options.mountPlayground) {\n        parseGraphQLServer.applyPlayground(app);\n      }\n    }\n\n    const server = app.listen(options.port, options.host, callback);\n    this.server = server;\n\n    if (options.startLiveQueryServer || options.liveQueryServerOptions) {\n      this.liveQueryServer = ParseServer.createLiveQueryServer(\n        server,\n        options.liveQueryServerOptions,\n        options\n      );\n    }\n    /* istanbul ignore next */\n    if (!process.env.TESTING) {\n      configureListeners(this);\n    }\n    this.expressApp = app;\n    return this;\n  }\n\n  /**\n   * Creates a new ParseServer and starts it.\n   * @param {ParseServerOptions} options used to start the server\n   * @param {Function} callback called when the server has started\n   * @returns {ParseServer} the parse server instance\n   */\n  static start(options: ParseServerOptions, callback: ?() => void) {\n    const parseServer = new ParseServer(options);\n    return parseServer.start(options, callback);\n  }\n\n  /**\n   * Helper method to create a liveQuery server\n   * @static\n   * @param {Server} httpServer an optional http server to pass\n   * @param {LiveQueryServerOptions} config options for the liveQueryServer\n   * @param {ParseServerOptions} options options for the ParseServer\n   * @returns {ParseLiveQueryServer} the live query server instance\n   */\n  static createLiveQueryServer(\n    httpServer,\n    config: LiveQueryServerOptions,\n    options: ParseServerOptions\n  ) {\n    if (!httpServer || (config && config.port)) {\n      var app = express();\n      httpServer = require('http').createServer(app);\n      httpServer.listen(config.port);\n    }\n    return new ParseLiveQueryServer(httpServer, config, options);\n  }\n\n  static verifyServerUrl(callback) {\n    // perform a health check on the serverURL value\n    if (Parse.serverURL) {\n      const request = require('./request');\n      request({ url: Parse.serverURL.replace(/\\/$/, '') + '/health' })\n        .catch(response => response)\n        .then(response => {\n          const json = response.data || null;\n          if (response.status !== 200 || !json || (json && json.status !== 'ok')) {\n            /* eslint-disable no-console */\n            console.warn(\n              `\\nWARNING, Unable to connect to '${Parse.serverURL}'.` +\n                ` Cloud code and push notifications may be unavailable!\\n`\n            );\n            /* eslint-enable no-console */\n            if (callback) {\n              callback(false);\n            }\n          } else {\n            if (callback) {\n              callback(true);\n            }\n          }\n        });\n    }\n  }\n}\n\nfunction addParseCloud() {\n  const ParseCloud = require('./cloud-code/Parse.Cloud');\n  Object.assign(Parse.Cloud, ParseCloud);\n  global.Parse = Parse;\n}\n\nfunction injectDefaults(options: ParseServerOptions) {\n  Object.keys(defaults).forEach(key => {\n    if (!Object.prototype.hasOwnProperty.call(options, key)) {\n      options[key] = defaults[key];\n    }\n  });\n\n  if (!Object.prototype.hasOwnProperty.call(options, 'serverURL')) {\n    options.serverURL = `http://localhost:${options.port}${options.mountPath}`;\n  }\n\n  // Reserved Characters\n  if (options.appId) {\n    const regex = /[!#$%'()*+&/:;=?@[\\]{}^,|<>]/g;\n    if (options.appId.match(regex)) {\n      console.warn(\n        `\\nWARNING, appId that contains special characters can cause issues while using with urls.\\n`\n      );\n    }\n  }\n\n  // Backwards compatibility\n  if (options.userSensitiveFields) {\n    /* eslint-disable no-console */\n    !process.env.TESTING &&\n      console.warn(\n        `\\nDEPRECATED: userSensitiveFields has been replaced by protectedFields allowing the ability to protect fields in all classes with CLP. \\n`\n      );\n    /* eslint-enable no-console */\n\n    const userSensitiveFields = Array.from(\n      new Set([...(defaults.userSensitiveFields || []), ...(options.userSensitiveFields || [])])\n    );\n\n    // If the options.protectedFields is unset,\n    // it'll be assigned the default above.\n    // Here, protect against the case where protectedFields\n    // is set, but doesn't have _User.\n    if (!('_User' in options.protectedFields)) {\n      options.protectedFields = Object.assign({ _User: [] }, options.protectedFields);\n    }\n\n    options.protectedFields['_User']['*'] = Array.from(\n      new Set([...(options.protectedFields['_User']['*'] || []), ...userSensitiveFields])\n    );\n  }\n\n  // Merge protectedFields options with defaults.\n  Object.keys(defaults.protectedFields).forEach(c => {\n    const cur = options.protectedFields[c];\n    if (!cur) {\n      options.protectedFields[c] = defaults.protectedFields[c];\n    } else {\n      Object.keys(defaults.protectedFields[c]).forEach(r => {\n        const unq = new Set([\n          ...(options.protectedFields[c][r] || []),\n          ...defaults.protectedFields[c][r],\n        ]);\n        options.protectedFields[c][r] = Array.from(unq);\n      });\n    }\n  });\n\n  options.masterKeyIps = Array.from(\n    new Set(options.masterKeyIps.concat(defaults.masterKeyIps, options.masterKeyIps))\n  );\n}\n\n// Those can't be tested as it requires a subprocess\n/* istanbul ignore next */\nfunction configureListeners(parseServer) {\n  const server = parseServer.server;\n  const sockets = {};\n  /* Currently, express doesn't shut down immediately after receiving SIGINT/SIGTERM if it has client connections that haven't timed out. (This is a known issue with node - https://github.com/nodejs/node/issues/2642)\n    This function, along with `destroyAliveConnections()`, intend to fix this behavior such that parse server will close all open connections and initiate the shutdown process as soon as it receives a SIGINT/SIGTERM signal. */\n  server.on('connection', socket => {\n    const socketId = socket.remoteAddress + ':' + socket.remotePort;\n    sockets[socketId] = socket;\n    socket.on('close', () => {\n      delete sockets[socketId];\n    });\n  });\n\n  const destroyAliveConnections = function () {\n    for (const socketId in sockets) {\n      try {\n        sockets[socketId].destroy();\n      } catch (e) {\n        /* */\n      }\n    }\n  };\n\n  const handleShutdown = function () {\n    process.stdout.write('Termination signal received. Shutting down.');\n    destroyAliveConnections();\n    server.close();\n    parseServer.handleShutdown();\n  };\n  process.on('SIGTERM', handleShutdown);\n  process.on('SIGINT', handleShutdown);\n}\n\nexport default ParseServer;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"67ae2c48166a0c294bf349981d117bbd8aa7293e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2n1zsnsk4b=function(){return actualCoverage;};}return actualCoverage;}cov_2n1zsnsk4b();cov_2n1zsnsk4b().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2n1zsnsk4b().s[1]++;exports.default=void 0;var _Options=(cov_2n1zsnsk4b().s[2]++,require("./Options"));var _defaults=(cov_2n1zsnsk4b().s[3]++,_interopRequireDefault(require("./defaults")));var logging=(cov_2n1zsnsk4b().s[4]++,_interopRequireWildcard(require("./logger")));var _Config=(cov_2n1zsnsk4b().s[5]++,_interopRequireDefault(require("./Config")));var _PromiseRouter=(cov_2n1zsnsk4b().s[6]++,_interopRequireDefault(require("./PromiseRouter")));var _requiredParameter=(cov_2n1zsnsk4b().s[7]++,_interopRequireDefault(require("./requiredParameter")));var _AnalyticsRouter=(cov_2n1zsnsk4b().s[8]++,require("./Routers/AnalyticsRouter"));var _ClassesRouter=(cov_2n1zsnsk4b().s[9]++,require("./Routers/ClassesRouter"));var _FeaturesRouter=(cov_2n1zsnsk4b().s[10]++,require("./Routers/FeaturesRouter"));var _FilesRouter=(cov_2n1zsnsk4b().s[11]++,require("./Routers/FilesRouter"));var _FunctionsRouter=(cov_2n1zsnsk4b().s[12]++,require("./Routers/FunctionsRouter"));var _GlobalConfigRouter=(cov_2n1zsnsk4b().s[13]++,require("./Routers/GlobalConfigRouter"));var _GraphQLRouter=(cov_2n1zsnsk4b().s[14]++,require("./Routers/GraphQLRouter"));var _HooksRouter=(cov_2n1zsnsk4b().s[15]++,require("./Routers/HooksRouter"));var _IAPValidationRouter=(cov_2n1zsnsk4b().s[16]++,require("./Routers/IAPValidationRouter"));var _InstallationsRouter=(cov_2n1zsnsk4b().s[17]++,require("./Routers/InstallationsRouter"));var _LogsRouter=(cov_2n1zsnsk4b().s[18]++,require("./Routers/LogsRouter"));var _ParseLiveQueryServer=(cov_2n1zsnsk4b().s[19]++,require("./LiveQuery/ParseLiveQueryServer"));var _PagesRouter=(cov_2n1zsnsk4b().s[20]++,require("./Routers/PagesRouter"));var _PublicAPIRouter=(cov_2n1zsnsk4b().s[21]++,require("./Routers/PublicAPIRouter"));var _PushRouter=(cov_2n1zsnsk4b().s[22]++,require("./Routers/PushRouter"));var _CloudCodeRouter=(cov_2n1zsnsk4b().s[23]++,require("./Routers/CloudCodeRouter"));var _RolesRouter=(cov_2n1zsnsk4b().s[24]++,require("./Routers/RolesRouter"));var _SchemasRouter=(cov_2n1zsnsk4b().s[25]++,require("./Routers/SchemasRouter"));var _SessionsRouter=(cov_2n1zsnsk4b().s[26]++,require("./Routers/SessionsRouter"));var _UsersRouter=(cov_2n1zsnsk4b().s[27]++,require("./Routers/UsersRouter"));var _PurgeRouter=(cov_2n1zsnsk4b().s[28]++,require("./Routers/PurgeRouter"));var _AudiencesRouter=(cov_2n1zsnsk4b().s[29]++,require("./Routers/AudiencesRouter"));var _AggregateRouter=(cov_2n1zsnsk4b().s[30]++,require("./Routers/AggregateRouter"));var _ParseServerRESTController=(cov_2n1zsnsk4b().s[31]++,require("./ParseServerRESTController"));var controllers=(cov_2n1zsnsk4b().s[32]++,_interopRequireWildcard(require("./Controllers")));var _ParseGraphQLServer=(cov_2n1zsnsk4b().s[33]++,require("./GraphQL/ParseGraphQLServer"));var _SecurityRouter=(cov_2n1zsnsk4b().s[34]++,require("./Routers/SecurityRouter"));var _CheckRunner=(cov_2n1zsnsk4b().s[35]++,_interopRequireDefault(require("./Security/CheckRunner")));var _Deprecator=(cov_2n1zsnsk4b().s[36]++,_interopRequireDefault(require("./Deprecator/Deprecator")));var _DefinedSchemas=(cov_2n1zsnsk4b().s[37]++,require("./SchemaMigrations/DefinedSchemas"));function _getRequireWildcardCache(nodeInterop){cov_2n1zsnsk4b().f[0]++;cov_2n1zsnsk4b().s[38]++;if(typeof WeakMap!=="function"){cov_2n1zsnsk4b().b[0][0]++;cov_2n1zsnsk4b().s[39]++;return null;}else{cov_2n1zsnsk4b().b[0][1]++;}var cacheBabelInterop=(cov_2n1zsnsk4b().s[40]++,new WeakMap());var cacheNodeInterop=(cov_2n1zsnsk4b().s[41]++,new WeakMap());cov_2n1zsnsk4b().s[42]++;return(_getRequireWildcardCache=function(nodeInterop){cov_2n1zsnsk4b().f[1]++;cov_2n1zsnsk4b().s[43]++;return nodeInterop?(cov_2n1zsnsk4b().b[1][0]++,cacheNodeInterop):(cov_2n1zsnsk4b().b[1][1]++,cacheBabelInterop);})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){cov_2n1zsnsk4b().f[2]++;cov_2n1zsnsk4b().s[44]++;if((cov_2n1zsnsk4b().b[3][0]++,!nodeInterop)&&(cov_2n1zsnsk4b().b[3][1]++,obj)&&(cov_2n1zsnsk4b().b[3][2]++,obj.__esModule)){cov_2n1zsnsk4b().b[2][0]++;cov_2n1zsnsk4b().s[45]++;return obj;}else{cov_2n1zsnsk4b().b[2][1]++;}cov_2n1zsnsk4b().s[46]++;if((cov_2n1zsnsk4b().b[5][0]++,obj===null)||(cov_2n1zsnsk4b().b[5][1]++,typeof obj!=="object")&&(cov_2n1zsnsk4b().b[5][2]++,typeof obj!=="function")){cov_2n1zsnsk4b().b[4][0]++;cov_2n1zsnsk4b().s[47]++;return{default:obj};}else{cov_2n1zsnsk4b().b[4][1]++;}var cache=(cov_2n1zsnsk4b().s[48]++,_getRequireWildcardCache(nodeInterop));cov_2n1zsnsk4b().s[49]++;if((cov_2n1zsnsk4b().b[7][0]++,cache)&&(cov_2n1zsnsk4b().b[7][1]++,cache.has(obj))){cov_2n1zsnsk4b().b[6][0]++;cov_2n1zsnsk4b().s[50]++;return cache.get(obj);}else{cov_2n1zsnsk4b().b[6][1]++;}var newObj=(cov_2n1zsnsk4b().s[51]++,{});var hasPropertyDescriptor=(cov_2n1zsnsk4b().s[52]++,(cov_2n1zsnsk4b().b[8][0]++,Object.defineProperty)&&(cov_2n1zsnsk4b().b[8][1]++,Object.getOwnPropertyDescriptor));cov_2n1zsnsk4b().s[53]++;for(var key in obj){cov_2n1zsnsk4b().s[54]++;if((cov_2n1zsnsk4b().b[10][0]++,key!=="default")&&(cov_2n1zsnsk4b().b[10][1]++,Object.prototype.hasOwnProperty.call(obj,key))){cov_2n1zsnsk4b().b[9][0]++;var desc=(cov_2n1zsnsk4b().s[55]++,hasPropertyDescriptor?(cov_2n1zsnsk4b().b[11][0]++,Object.getOwnPropertyDescriptor(obj,key)):(cov_2n1zsnsk4b().b[11][1]++,null));cov_2n1zsnsk4b().s[56]++;if((cov_2n1zsnsk4b().b[13][0]++,desc)&&((cov_2n1zsnsk4b().b[13][1]++,desc.get)||(cov_2n1zsnsk4b().b[13][2]++,desc.set))){cov_2n1zsnsk4b().b[12][0]++;cov_2n1zsnsk4b().s[57]++;Object.defineProperty(newObj,key,desc);}else{cov_2n1zsnsk4b().b[12][1]++;cov_2n1zsnsk4b().s[58]++;newObj[key]=obj[key];}}else{cov_2n1zsnsk4b().b[9][1]++;}}cov_2n1zsnsk4b().s[59]++;newObj.default=obj;cov_2n1zsnsk4b().s[60]++;if(cache){cov_2n1zsnsk4b().b[14][0]++;cov_2n1zsnsk4b().s[61]++;cache.set(obj,newObj);}else{cov_2n1zsnsk4b().b[14][1]++;}cov_2n1zsnsk4b().s[62]++;return newObj;}function _interopRequireDefault(obj){cov_2n1zsnsk4b().f[3]++;cov_2n1zsnsk4b().s[63]++;return(cov_2n1zsnsk4b().b[16][0]++,obj)&&(cov_2n1zsnsk4b().b[16][1]++,obj.__esModule)?(cov_2n1zsnsk4b().b[15][0]++,obj):(cov_2n1zsnsk4b().b[15][1]++,{default:obj});}// ParseServer - open-source compatible API Server for Parse apps
var batch=(cov_2n1zsnsk4b().s[64]++,require('./batch')),bodyParser=(cov_2n1zsnsk4b().s[65]++,require('body-parser')),express=(cov_2n1zsnsk4b().s[66]++,require('express')),middlewares=(cov_2n1zsnsk4b().s[67]++,require('./middlewares')),Parse=(cov_2n1zsnsk4b().s[68]++,require('parse/node').Parse),{parse}=(cov_2n1zsnsk4b().s[69]++,require('graphql')),path=(cov_2n1zsnsk4b().s[70]++,require('path')),fs=(cov_2n1zsnsk4b().s[71]++,require('fs'));// Mutate the Parse object to add the Cloud Code handlers
cov_2n1zsnsk4b().s[72]++;addParseCloud();// ParseServer works like a constructor of an express app.
// https://parseplatform.org/parse-server/api/master/ParseServerOptions.html
class ParseServer{/**
   * @constructor
   * @param {ParseServerOptions} options the parse server initialization options
   */constructor(options){cov_2n1zsnsk4b().f[4]++;cov_2n1zsnsk4b().s[73]++;// Scan for deprecated Parse Server options
_Deprecator.default.scanParseServerOptions(options);// Set option defaults
cov_2n1zsnsk4b().s[74]++;injectDefaults(options);const{appId=(cov_2n1zsnsk4b().b[17][0]++,(0,_requiredParameter.default)('You must provide an appId!')),masterKey=(cov_2n1zsnsk4b().b[18][0]++,(0,_requiredParameter.default)('You must provide a masterKey!')),cloud,security,javascriptKey,serverURL=(cov_2n1zsnsk4b().b[19][0]++,(0,_requiredParameter.default)('You must provide a serverURL!')),serverStartComplete,schema}=(cov_2n1zsnsk4b().s[75]++,options);// Initialize the node client SDK automatically
cov_2n1zsnsk4b().s[76]++;Parse.initialize(appId,(cov_2n1zsnsk4b().b[20][0]++,javascriptKey)||(cov_2n1zsnsk4b().b[20][1]++,'unused'),masterKey);cov_2n1zsnsk4b().s[77]++;Parse.serverURL=serverURL;const allControllers=(cov_2n1zsnsk4b().s[78]++,controllers.getControllers(options));const{loggerController,databaseController,hooksController}=(cov_2n1zsnsk4b().s[79]++,allControllers);cov_2n1zsnsk4b().s[80]++;this.config=_Config.default.put(Object.assign({},options,allControllers));cov_2n1zsnsk4b().s[81]++;logging.setLogger(loggerController);// Note: Tests will start to fail if any validation happens after this is called.
cov_2n1zsnsk4b().s[82]++;databaseController.performInitialization().then(()=>{cov_2n1zsnsk4b().f[5]++;cov_2n1zsnsk4b().s[83]++;return hooksController.load();}).then(async()=>{cov_2n1zsnsk4b().f[6]++;cov_2n1zsnsk4b().s[84]++;if(schema){cov_2n1zsnsk4b().b[21][0]++;cov_2n1zsnsk4b().s[85]++;await new _DefinedSchemas.DefinedSchemas(schema,this.config).execute();}else{cov_2n1zsnsk4b().b[21][1]++;}cov_2n1zsnsk4b().s[86]++;if(serverStartComplete){cov_2n1zsnsk4b().b[22][0]++;cov_2n1zsnsk4b().s[87]++;serverStartComplete();}else{cov_2n1zsnsk4b().b[22][1]++;}}).catch(error=>{cov_2n1zsnsk4b().f[7]++;cov_2n1zsnsk4b().s[88]++;if(serverStartComplete){cov_2n1zsnsk4b().b[23][0]++;cov_2n1zsnsk4b().s[89]++;serverStartComplete(error);}else{cov_2n1zsnsk4b().b[23][1]++;cov_2n1zsnsk4b().s[90]++;console.error(error);cov_2n1zsnsk4b().s[91]++;process.exit(1);}});cov_2n1zsnsk4b().s[92]++;if(cloud){cov_2n1zsnsk4b().b[24][0]++;cov_2n1zsnsk4b().s[93]++;addParseCloud();cov_2n1zsnsk4b().s[94]++;if(typeof cloud==='function'){cov_2n1zsnsk4b().b[25][0]++;cov_2n1zsnsk4b().s[95]++;cloud(Parse);}else{cov_2n1zsnsk4b().b[25][1]++;cov_2n1zsnsk4b().s[96]++;if(typeof cloud==='string'){cov_2n1zsnsk4b().b[26][0]++;cov_2n1zsnsk4b().s[97]++;require(path.resolve(process.cwd(),cloud));}else{cov_2n1zsnsk4b().b[26][1]++;cov_2n1zsnsk4b().s[98]++;throw"argument 'cloud' must either be a string or a function";}}}else{cov_2n1zsnsk4b().b[24][1]++;}cov_2n1zsnsk4b().s[99]++;if((cov_2n1zsnsk4b().b[28][0]++,security)&&(cov_2n1zsnsk4b().b[28][1]++,security.enableCheck)&&(cov_2n1zsnsk4b().b[28][2]++,security.enableCheckLog)){cov_2n1zsnsk4b().b[27][0]++;cov_2n1zsnsk4b().s[100]++;new _CheckRunner.default(options.security).run();}else{cov_2n1zsnsk4b().b[27][1]++;}}get app(){cov_2n1zsnsk4b().f[8]++;cov_2n1zsnsk4b().s[101]++;if(!this._app){cov_2n1zsnsk4b().b[29][0]++;cov_2n1zsnsk4b().s[102]++;this._app=ParseServer.app(this.config);}else{cov_2n1zsnsk4b().b[29][1]++;}cov_2n1zsnsk4b().s[103]++;return this._app;}handleShutdown(){cov_2n1zsnsk4b().f[9]++;const promises=(cov_2n1zsnsk4b().s[104]++,[]);const{adapter:databaseAdapter}=(cov_2n1zsnsk4b().s[105]++,this.config.databaseController);cov_2n1zsnsk4b().s[106]++;if((cov_2n1zsnsk4b().b[31][0]++,databaseAdapter)&&(cov_2n1zsnsk4b().b[31][1]++,typeof databaseAdapter.handleShutdown==='function')){cov_2n1zsnsk4b().b[30][0]++;cov_2n1zsnsk4b().s[107]++;promises.push(databaseAdapter.handleShutdown());}else{cov_2n1zsnsk4b().b[30][1]++;}const{adapter:fileAdapter}=(cov_2n1zsnsk4b().s[108]++,this.config.filesController);cov_2n1zsnsk4b().s[109]++;if((cov_2n1zsnsk4b().b[33][0]++,fileAdapter)&&(cov_2n1zsnsk4b().b[33][1]++,typeof fileAdapter.handleShutdown==='function')){cov_2n1zsnsk4b().b[32][0]++;cov_2n1zsnsk4b().s[110]++;promises.push(fileAdapter.handleShutdown());}else{cov_2n1zsnsk4b().b[32][1]++;}const{adapter:cacheAdapter}=(cov_2n1zsnsk4b().s[111]++,this.config.cacheController);cov_2n1zsnsk4b().s[112]++;if((cov_2n1zsnsk4b().b[35][0]++,cacheAdapter)&&(cov_2n1zsnsk4b().b[35][1]++,typeof cacheAdapter.handleShutdown==='function')){cov_2n1zsnsk4b().b[34][0]++;cov_2n1zsnsk4b().s[113]++;promises.push(cacheAdapter.handleShutdown());}else{cov_2n1zsnsk4b().b[34][1]++;}cov_2n1zsnsk4b().s[114]++;return(promises.length>0?(cov_2n1zsnsk4b().b[36][0]++,Promise.all(promises)):(cov_2n1zsnsk4b().b[36][1]++,Promise.resolve())).then(()=>{cov_2n1zsnsk4b().f[10]++;cov_2n1zsnsk4b().s[115]++;if(this.config.serverCloseComplete){cov_2n1zsnsk4b().b[37][0]++;cov_2n1zsnsk4b().s[116]++;this.config.serverCloseComplete();}else{cov_2n1zsnsk4b().b[37][1]++;}});}/**
   * @static
   * Create an express app for the parse server
   * @param {Object} options let you specify the maxUploadSize when creating the express app  */static app(options){cov_2n1zsnsk4b().f[11]++;const{maxUploadSize=(cov_2n1zsnsk4b().b[38][0]++,'20mb'),appId,directAccess,pages}=(cov_2n1zsnsk4b().s[117]++,options);// This app serves the Parse API directly.
// It's the equivalent of https://api.parse.com/1 in the hosted Parse API.
var api=(cov_2n1zsnsk4b().s[118]++,express());//api.use("/apps", express.static(__dirname + "/public"));
cov_2n1zsnsk4b().s[119]++;api.use(middlewares.allowCrossDomain(appId));// File handling needs to be before default middlewares are applied
cov_2n1zsnsk4b().s[120]++;api.use('/',new _FilesRouter.FilesRouter().expressRouter({maxUploadSize:maxUploadSize}));cov_2n1zsnsk4b().s[121]++;api.use('/health',function(req,res){cov_2n1zsnsk4b().f[12]++;cov_2n1zsnsk4b().s[122]++;res.json({status:'ok'});});cov_2n1zsnsk4b().s[123]++;api.use('/',bodyParser.urlencoded({extended:false}),pages.enableRouter?(cov_2n1zsnsk4b().b[39][0]++,new _PagesRouter.PagesRouter(pages).expressRouter()):(cov_2n1zsnsk4b().b[39][1]++,new _PublicAPIRouter.PublicAPIRouter().expressRouter()));cov_2n1zsnsk4b().s[124]++;api.use(bodyParser.json({type:'*/*',limit:maxUploadSize}));cov_2n1zsnsk4b().s[125]++;api.use(middlewares.allowMethodOverride);cov_2n1zsnsk4b().s[126]++;api.use(middlewares.handleParseHeaders);const appRouter=(cov_2n1zsnsk4b().s[127]++,ParseServer.promiseRouter({appId}));cov_2n1zsnsk4b().s[128]++;api.use(appRouter.expressRouter());cov_2n1zsnsk4b().s[129]++;api.use(middlewares.handleParseErrors);// run the following when not testing
cov_2n1zsnsk4b().s[130]++;if(!process.env.TESTING){cov_2n1zsnsk4b().b[40][0]++;//This causes tests to spew some useless warnings, so disable in test
/* istanbul ignore next */process.on('uncaughtException',err=>{if(err.code==='EADDRINUSE'){// user-friendly message for this common error
process.stderr.write(`Unable to listen on port ${err.port}. The port is already in use.`);process.exit(0);}else{throw err;}});// verify the server url after a 'mount' event is received
/* istanbul ignore next */api.on('mount',function(){ParseServer.verifyServerUrl();});}else{cov_2n1zsnsk4b().b[40][1]++;}cov_2n1zsnsk4b().s[131]++;if((cov_2n1zsnsk4b().b[42][0]++,process.env.PARSE_SERVER_ENABLE_EXPERIMENTAL_DIRECT_ACCESS==='1')||(cov_2n1zsnsk4b().b[42][1]++,directAccess)){cov_2n1zsnsk4b().b[41][0]++;cov_2n1zsnsk4b().s[132]++;Parse.CoreManager.setRESTController((0,_ParseServerRESTController.ParseServerRESTController)(appId,appRouter));}else{cov_2n1zsnsk4b().b[41][1]++;}cov_2n1zsnsk4b().s[133]++;return api;}static promiseRouter({appId}){cov_2n1zsnsk4b().f[13]++;const routers=(cov_2n1zsnsk4b().s[134]++,[new _ClassesRouter.ClassesRouter(),new _UsersRouter.UsersRouter(),new _SessionsRouter.SessionsRouter(),new _RolesRouter.RolesRouter(),new _AnalyticsRouter.AnalyticsRouter(),new _InstallationsRouter.InstallationsRouter(),new _FunctionsRouter.FunctionsRouter(),new _SchemasRouter.SchemasRouter(),new _PushRouter.PushRouter(),new _LogsRouter.LogsRouter(),new _IAPValidationRouter.IAPValidationRouter(),new _FeaturesRouter.FeaturesRouter(),new _GlobalConfigRouter.GlobalConfigRouter(),new _GraphQLRouter.GraphQLRouter(),new _PurgeRouter.PurgeRouter(),new _HooksRouter.HooksRouter(),new _CloudCodeRouter.CloudCodeRouter(),new _AudiencesRouter.AudiencesRouter(),new _AggregateRouter.AggregateRouter(),new _SecurityRouter.SecurityRouter()]);const routes=(cov_2n1zsnsk4b().s[135]++,routers.reduce((memo,router)=>{cov_2n1zsnsk4b().f[14]++;cov_2n1zsnsk4b().s[136]++;return memo.concat(router.routes);},[]));const appRouter=(cov_2n1zsnsk4b().s[137]++,new _PromiseRouter.default(routes,appId));cov_2n1zsnsk4b().s[138]++;batch.mountOnto(appRouter);cov_2n1zsnsk4b().s[139]++;return appRouter;}/**
   * starts the parse server's express app
   * @param {ParseServerOptions} options to use to start the server
   * @param {Function} callback called when the server has started
   * @returns {ParseServer} the parse server instance
   */start(options,callback){cov_2n1zsnsk4b().f[15]++;const app=(cov_2n1zsnsk4b().s[140]++,express());cov_2n1zsnsk4b().s[141]++;if(options.middleware){cov_2n1zsnsk4b().b[43][0]++;let middleware;cov_2n1zsnsk4b().s[142]++;if(typeof options.middleware=='string'){cov_2n1zsnsk4b().b[44][0]++;cov_2n1zsnsk4b().s[143]++;middleware=require(path.resolve(process.cwd(),options.middleware));}else{cov_2n1zsnsk4b().b[44][1]++;cov_2n1zsnsk4b().s[144]++;middleware=options.middleware;// use as-is let express fail
}cov_2n1zsnsk4b().s[145]++;app.use(middleware);}else{cov_2n1zsnsk4b().b[43][1]++;}cov_2n1zsnsk4b().s[146]++;app.use(options.mountPath,this.app);cov_2n1zsnsk4b().s[147]++;if((cov_2n1zsnsk4b().b[46][0]++,options.mountGraphQL===true)||(cov_2n1zsnsk4b().b[46][1]++,options.mountPlayground===true)){cov_2n1zsnsk4b().b[45][0]++;let graphQLCustomTypeDefs=(cov_2n1zsnsk4b().s[148]++,undefined);cov_2n1zsnsk4b().s[149]++;if(typeof options.graphQLSchema==='string'){cov_2n1zsnsk4b().b[47][0]++;cov_2n1zsnsk4b().s[150]++;graphQLCustomTypeDefs=parse(fs.readFileSync(options.graphQLSchema,'utf8'));}else{cov_2n1zsnsk4b().b[47][1]++;cov_2n1zsnsk4b().s[151]++;if((cov_2n1zsnsk4b().b[49][0]++,typeof options.graphQLSchema==='object')||(cov_2n1zsnsk4b().b[49][1]++,typeof options.graphQLSchema==='function')){cov_2n1zsnsk4b().b[48][0]++;cov_2n1zsnsk4b().s[152]++;graphQLCustomTypeDefs=options.graphQLSchema;}else{cov_2n1zsnsk4b().b[48][1]++;}}const parseGraphQLServer=(cov_2n1zsnsk4b().s[153]++,new _ParseGraphQLServer.ParseGraphQLServer(this,{graphQLPath:options.graphQLPath,playgroundPath:options.playgroundPath,graphQLCustomTypeDefs}));cov_2n1zsnsk4b().s[154]++;if(options.mountGraphQL){cov_2n1zsnsk4b().b[50][0]++;cov_2n1zsnsk4b().s[155]++;parseGraphQLServer.applyGraphQL(app);}else{cov_2n1zsnsk4b().b[50][1]++;}cov_2n1zsnsk4b().s[156]++;if(options.mountPlayground){cov_2n1zsnsk4b().b[51][0]++;cov_2n1zsnsk4b().s[157]++;parseGraphQLServer.applyPlayground(app);}else{cov_2n1zsnsk4b().b[51][1]++;}}else{cov_2n1zsnsk4b().b[45][1]++;}const server=(cov_2n1zsnsk4b().s[158]++,app.listen(options.port,options.host,callback));cov_2n1zsnsk4b().s[159]++;this.server=server;cov_2n1zsnsk4b().s[160]++;if((cov_2n1zsnsk4b().b[53][0]++,options.startLiveQueryServer)||(cov_2n1zsnsk4b().b[53][1]++,options.liveQueryServerOptions)){cov_2n1zsnsk4b().b[52][0]++;cov_2n1zsnsk4b().s[161]++;this.liveQueryServer=ParseServer.createLiveQueryServer(server,options.liveQueryServerOptions,options);}else{cov_2n1zsnsk4b().b[52][1]++;}/* istanbul ignore next */if(!process.env.TESTING){configureListeners(this);}cov_2n1zsnsk4b().s[162]++;this.expressApp=app;cov_2n1zsnsk4b().s[163]++;return this;}/**
   * Creates a new ParseServer and starts it.
   * @param {ParseServerOptions} options used to start the server
   * @param {Function} callback called when the server has started
   * @returns {ParseServer} the parse server instance
   */static start(options,callback){cov_2n1zsnsk4b().f[16]++;const parseServer=(cov_2n1zsnsk4b().s[164]++,new ParseServer(options));cov_2n1zsnsk4b().s[165]++;return parseServer.start(options,callback);}/**
   * Helper method to create a liveQuery server
   * @static
   * @param {Server} httpServer an optional http server to pass
   * @param {LiveQueryServerOptions} config options for the liveQueryServer
   * @param {ParseServerOptions} options options for the ParseServer
   * @returns {ParseLiveQueryServer} the live query server instance
   */static createLiveQueryServer(httpServer,config,options){cov_2n1zsnsk4b().f[17]++;cov_2n1zsnsk4b().s[166]++;if((cov_2n1zsnsk4b().b[55][0]++,!httpServer)||(cov_2n1zsnsk4b().b[55][1]++,config)&&(cov_2n1zsnsk4b().b[55][2]++,config.port)){cov_2n1zsnsk4b().b[54][0]++;var app=(cov_2n1zsnsk4b().s[167]++,express());cov_2n1zsnsk4b().s[168]++;httpServer=require('http').createServer(app);cov_2n1zsnsk4b().s[169]++;httpServer.listen(config.port);}else{cov_2n1zsnsk4b().b[54][1]++;}cov_2n1zsnsk4b().s[170]++;return new _ParseLiveQueryServer.ParseLiveQueryServer(httpServer,config,options);}static verifyServerUrl(callback){cov_2n1zsnsk4b().f[18]++;cov_2n1zsnsk4b().s[171]++;// perform a health check on the serverURL value
if(Parse.serverURL){cov_2n1zsnsk4b().b[56][0]++;const request=(cov_2n1zsnsk4b().s[172]++,require('./request'));cov_2n1zsnsk4b().s[173]++;request({url:Parse.serverURL.replace(/\/$/,'')+'/health'}).catch(response=>{cov_2n1zsnsk4b().f[19]++;cov_2n1zsnsk4b().s[174]++;return response;}).then(response=>{cov_2n1zsnsk4b().f[20]++;const json=(cov_2n1zsnsk4b().s[175]++,(cov_2n1zsnsk4b().b[57][0]++,response.data)||(cov_2n1zsnsk4b().b[57][1]++,null));cov_2n1zsnsk4b().s[176]++;if((cov_2n1zsnsk4b().b[59][0]++,response.status!==200)||(cov_2n1zsnsk4b().b[59][1]++,!json)||(cov_2n1zsnsk4b().b[59][2]++,json)&&(cov_2n1zsnsk4b().b[59][3]++,json.status!=='ok')){cov_2n1zsnsk4b().b[58][0]++;cov_2n1zsnsk4b().s[177]++;/* eslint-disable no-console */console.warn(`\nWARNING, Unable to connect to '${Parse.serverURL}'.`+` Cloud code and push notifications may be unavailable!\n`);/* eslint-enable no-console */cov_2n1zsnsk4b().s[178]++;if(callback){cov_2n1zsnsk4b().b[60][0]++;cov_2n1zsnsk4b().s[179]++;callback(false);}else{cov_2n1zsnsk4b().b[60][1]++;}}else{cov_2n1zsnsk4b().b[58][1]++;cov_2n1zsnsk4b().s[180]++;if(callback){cov_2n1zsnsk4b().b[61][0]++;cov_2n1zsnsk4b().s[181]++;callback(true);}else{cov_2n1zsnsk4b().b[61][1]++;}}});}else{cov_2n1zsnsk4b().b[56][1]++;}}}function addParseCloud(){cov_2n1zsnsk4b().f[21]++;const ParseCloud=(cov_2n1zsnsk4b().s[182]++,require('./cloud-code/Parse.Cloud'));cov_2n1zsnsk4b().s[183]++;Object.assign(Parse.Cloud,ParseCloud);cov_2n1zsnsk4b().s[184]++;global.Parse=Parse;}function injectDefaults(options){cov_2n1zsnsk4b().f[22]++;cov_2n1zsnsk4b().s[185]++;Object.keys(_defaults.default).forEach(key=>{cov_2n1zsnsk4b().f[23]++;cov_2n1zsnsk4b().s[186]++;if(!Object.prototype.hasOwnProperty.call(options,key)){cov_2n1zsnsk4b().b[62][0]++;cov_2n1zsnsk4b().s[187]++;options[key]=_defaults.default[key];}else{cov_2n1zsnsk4b().b[62][1]++;}});cov_2n1zsnsk4b().s[188]++;if(!Object.prototype.hasOwnProperty.call(options,'serverURL')){cov_2n1zsnsk4b().b[63][0]++;cov_2n1zsnsk4b().s[189]++;options.serverURL=`http://localhost:${options.port}${options.mountPath}`;}else{cov_2n1zsnsk4b().b[63][1]++;}// Reserved Characters
cov_2n1zsnsk4b().s[190]++;if(options.appId){cov_2n1zsnsk4b().b[64][0]++;const regex=(cov_2n1zsnsk4b().s[191]++,/[!#$%'()*+&/:;=?@[\]{}^,|<>]/g);cov_2n1zsnsk4b().s[192]++;if(options.appId.match(regex)){cov_2n1zsnsk4b().b[65][0]++;cov_2n1zsnsk4b().s[193]++;console.warn(`\nWARNING, appId that contains special characters can cause issues while using with urls.\n`);}else{cov_2n1zsnsk4b().b[65][1]++;}}else{cov_2n1zsnsk4b().b[64][1]++;}// Backwards compatibility
cov_2n1zsnsk4b().s[194]++;if(options.userSensitiveFields){cov_2n1zsnsk4b().b[66][0]++;cov_2n1zsnsk4b().s[195]++;/* eslint-disable no-console */(cov_2n1zsnsk4b().b[67][0]++,!process.env.TESTING)&&(cov_2n1zsnsk4b().b[67][1]++,console.warn(`\nDEPRECATED: userSensitiveFields has been replaced by protectedFields allowing the ability to protect fields in all classes with CLP. \n`));/* eslint-enable no-console */const userSensitiveFields=(cov_2n1zsnsk4b().s[196]++,Array.from(new Set([...((cov_2n1zsnsk4b().b[68][0]++,_defaults.default.userSensitiveFields)||(cov_2n1zsnsk4b().b[68][1]++,[])),...((cov_2n1zsnsk4b().b[69][0]++,options.userSensitiveFields)||(cov_2n1zsnsk4b().b[69][1]++,[]))])));// If the options.protectedFields is unset,
// it'll be assigned the default above.
// Here, protect against the case where protectedFields
// is set, but doesn't have _User.
cov_2n1zsnsk4b().s[197]++;if(!('_User'in options.protectedFields)){cov_2n1zsnsk4b().b[70][0]++;cov_2n1zsnsk4b().s[198]++;options.protectedFields=Object.assign({_User:[]},options.protectedFields);}else{cov_2n1zsnsk4b().b[70][1]++;}cov_2n1zsnsk4b().s[199]++;options.protectedFields['_User']['*']=Array.from(new Set([...((cov_2n1zsnsk4b().b[71][0]++,options.protectedFields['_User']['*'])||(cov_2n1zsnsk4b().b[71][1]++,[])),...userSensitiveFields]));}else{cov_2n1zsnsk4b().b[66][1]++;}// Merge protectedFields options with defaults.
cov_2n1zsnsk4b().s[200]++;Object.keys(_defaults.default.protectedFields).forEach(c=>{cov_2n1zsnsk4b().f[24]++;const cur=(cov_2n1zsnsk4b().s[201]++,options.protectedFields[c]);cov_2n1zsnsk4b().s[202]++;if(!cur){cov_2n1zsnsk4b().b[72][0]++;cov_2n1zsnsk4b().s[203]++;options.protectedFields[c]=_defaults.default.protectedFields[c];}else{cov_2n1zsnsk4b().b[72][1]++;cov_2n1zsnsk4b().s[204]++;Object.keys(_defaults.default.protectedFields[c]).forEach(r=>{cov_2n1zsnsk4b().f[25]++;const unq=(cov_2n1zsnsk4b().s[205]++,new Set([...((cov_2n1zsnsk4b().b[73][0]++,options.protectedFields[c][r])||(cov_2n1zsnsk4b().b[73][1]++,[])),..._defaults.default.protectedFields[c][r]]));cov_2n1zsnsk4b().s[206]++;options.protectedFields[c][r]=Array.from(unq);});}});cov_2n1zsnsk4b().s[207]++;options.masterKeyIps=Array.from(new Set(options.masterKeyIps.concat(_defaults.default.masterKeyIps,options.masterKeyIps)));}// Those can't be tested as it requires a subprocess
/* istanbul ignore next */function configureListeners(parseServer){const server=parseServer.server;const sockets={};/* Currently, express doesn't shut down immediately after receiving SIGINT/SIGTERM if it has client connections that haven't timed out. (This is a known issue with node - https://github.com/nodejs/node/issues/2642)
    This function, along with `destroyAliveConnections()`, intend to fix this behavior such that parse server will close all open connections and initiate the shutdown process as soon as it receives a SIGINT/SIGTERM signal. */server.on('connection',socket=>{const socketId=socket.remoteAddress+':'+socket.remotePort;sockets[socketId]=socket;socket.on('close',()=>{delete sockets[socketId];});});const destroyAliveConnections=function(){for(const socketId in sockets){try{sockets[socketId].destroy();}catch(e){/* */}}};const handleShutdown=function(){process.stdout.write('Termination signal received. Shutting down.');destroyAliveConnections();server.close();parseServer.handleShutdown();};process.on('SIGTERM',handleShutdown);process.on('SIGINT',handleShutdown);}var _default=(cov_2n1zsnsk4b().s[208]++,ParseServer);cov_2n1zsnsk4b().s[209]++;exports.default=_default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,