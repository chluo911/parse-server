{"version":3,"sources":["../../src/SchemaMigrations/Migrations.js"],"names":["CLP","allow","perms","out","perm","ops","Object","entries","op","makeSchema","className","schema"],"mappings":";;;;;;;;AAiDA;AAsBO,MAAMA,GAAN,CAAU;AACH,SAALC,KAAK,CAACC,KAAD,EAAkD;AAC5D,UAAMC,GAAG,GAAG,EAAZ;;AAEA,SAAK,MAAM,CAACC,IAAD,EAAOC,GAAP,CAAX,IAA0BC,MAAM,CAACC,OAAP,CAAeL,KAAf,CAA1B,EAAiD;AAC/C;AACA,WAAK,MAAMM,EAAX,IAAiBH,GAAjB,EAAsB;AACpBF,QAAAA,GAAG,CAACK,EAAD,CAAH,GAAUL,GAAG,CAACK,EAAD,CAAH,IAAW,EAArB;AACAL,QAAAA,GAAG,CAACK,EAAD,CAAH,CAAQJ,IAAR,IAAgB,IAAhB;AACD;AACF;;AAED,WAAOD,GAAP;AACD;;AAbc;;;;AAgBV,SAASM,UAAT,CAAoBC,SAApB,EAA8CC,MAA9C,EAA8E;AACnF;AACA;AACA;AACAA,EAAAA,MAAM,CAACD,SAAP,GAAmBA,SAAnB;AAEA,SAAOC,MAAP;AACD","sourcesContent":["// @flow\n\nexport type FieldValueType =\n  | 'String'\n  | 'Boolean'\n  | 'File'\n  | 'Number'\n  | 'Relation'\n  | 'Pointer'\n  | 'Date'\n  | 'GeoPoint'\n  | 'Polygon'\n  | 'Array'\n  | 'Object'\n  | 'ACL';\n\nexport interface FieldType {\n  type: FieldValueType;\n  required?: boolean;\n  defaultValue?: mixed;\n  targetClass?: string;\n}\n\ntype ClassNameType = '_User' | '_Role' | string;\n\nexport interface ProtectedFieldsInterface {\n  [key: string]: string[];\n}\n\nexport interface IndexInterface {\n  [key: string]: number;\n}\n\nexport interface IndexesInterface {\n  [key: string]: IndexInterface;\n}\n\nexport interface SchemaOptions {\n  definitions: JSONSchema[];\n  strict: ?boolean;\n  deleteExtraFields: ?boolean;\n  recreateModifiedFields: ?boolean;\n  lockSchemas: ?boolean;\n  /* Callback when server has started and before running schemas migration operations if schemas key provided */\n  beforeMigration: ?() => void | Promise<void>;\n  afterMigration: ?() => void | Promise<void>;\n}\n\nexport type CLPOperation = 'find' | 'count' | 'get' | 'update' | 'create' | 'delete';\n// @Typescript 4.1+ // type CLPPermission = 'requiresAuthentication' | '*' |  `user:${string}` | `role:${string}`\n\ntype CLPValue = { [key: string]: boolean };\ntype CLPData = { [key: string]: CLPOperation[] };\ntype CLPInterface = { [key: string]: CLPValue };\n\nexport interface JSONSchema {\n  className: ClassNameType;\n  fields?: { [key: string]: FieldType };\n  indexes?: IndexesInterface;\n  classLevelPermissions?: {\n    find?: CLPValue,\n    count?: CLPValue,\n    get?: CLPValue,\n    update?: CLPValue,\n    create?: CLPValue,\n    delete?: CLPValue,\n    addField?: CLPValue,\n    protectedFields?: ProtectedFieldsInterface,\n  };\n}\n\nexport class CLP {\n  static allow(perms: { [key: string]: CLPData }): CLPInterface {\n    const out = {};\n\n    for (const [perm, ops] of Object.entries(perms)) {\n      // @flow-disable-next Property `@@iterator` is missing in mixed [1] but exists in `$Iterable` [2].\n      for (const op of ops) {\n        out[op] = out[op] || {};\n        out[op][perm] = true;\n      }\n    }\n\n    return out;\n  }\n}\n\nexport function makeSchema(className: ClassNameType, schema: JSONSchema): JSONSchema {\n  // This function solve two things:\n  // 1. It provides auto-completion to the users who are implementing schemas\n  // 2. It allows forward-compatible point in order to allow future changes to the internal structure of JSONSchema without affecting all the users\n  schema.className = className;\n\n  return schema;\n}\n"]}