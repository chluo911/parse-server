"use strict";// Helper functions for accessing the Janrain Capture API.
function cov_22q1q8p9kb(){var path="/parse-server/lib/Adapters/Auth/janraincapture.js";var hash="d5d3eee10ee9c0e2ec6cf3619bb8ddb0b7f8e08d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Adapters/Auth/janraincapture.js",statementMap:{"0":{start:{line:4,column:12},end:{line:4,column:39}},"1":{start:{line:6,column:18},end:{line:6,column:40}},"2":{start:{line:8,column:21},end:{line:8,column:46}},"3":{start:{line:12,column:2},end:{line:20,column:5}},"4":{start:{line:15,column:4},end:{line:17,column:5}},"5":{start:{line:16,column:6},end:{line:16,column:13}},"6":{start:{line:19,column:4},end:{line:19,column:106}},"7":{start:{line:26,column:2},end:{line:26,column:27}},"8":{start:{line:31,column:26},end:{line:35,column:4}},"9":{start:{line:36,column:2},end:{line:39,column:5}},"10":{start:{line:42,column:0},end:{line:45,column:2}}},fnMap:{"0":{name:"validateAuthData",decl:{start:{line:11,column:9},end:{line:11,column:25}},loc:{start:{line:11,column:45},end:{line:21,column:1}},line:11},"1":{name:"(anonymous_1)",decl:{start:{line:12,column:75},end:{line:12,column:76}},loc:{start:{line:12,column:83},end:{line:20,column:3}},line:12},"2":{name:"validateAppId",decl:{start:{line:24,column:9},end:{line:24,column:22}},loc:{start:{line:24,column:25},end:{line:27,column:1}},line:24},"3":{name:"request",decl:{start:{line:30,column:9},end:{line:30,column:16}},loc:{start:{line:30,column:37},end:{line:40,column:1}},line:30}},branchMap:{"0":{loc:{start:{line:15,column:4},end:{line:17,column:5}},type:"if",locations:[{start:{line:15,column:4},end:{line:17,column:5}},{start:{line:15,column:4},end:{line:17,column:5}}],line:15},"1":{loc:{start:{line:15,column:8},end:{line:15,column:63}},type:"binary-expr",locations:[{start:{line:15,column:8},end:{line:15,column:12}},{start:{line:15,column:16},end:{line:15,column:33}},{start:{line:15,column:37},end:{line:15,column:63}}],line:15}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0,0]},inputSourceMap:{version:3,sources:["../../../src/Adapters/Auth/janraincapture.js"],names:["Parse","require","querystring","httpsRequest","validateAuthData","authData","options","request","janrain_capture_host","access_token","then","data","stat","result","id","Error","OBJECT_NOT_FOUND","validateAppId","Promise","resolve","host","query_string_data","stringify","attribute_name","get","path","module","exports"],mappings:";;AAAA;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBD,KAAlC;;AACA,IAAIE,WAAW,GAAGD,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,gBAAD,CAA5B,C,CAEA;;;AACA,SAASG,gBAAT,CAA0BC,QAA1B,EAAoCC,OAApC,EAA6C;AAC3C,SAAOC,OAAO,CAACD,OAAO,CAACE,oBAAT,EAA+BH,QAAQ,CAACI,YAAxC,CAAP,CAA6DC,IAA7D,CAAkEC,IAAI,IAAI;AAC/E;AACA;AACA,QAAIA,IAAI,IAAIA,IAAI,CAACC,IAAL,IAAa,IAArB,IAA6BD,IAAI,CAACE,MAAL,IAAeR,QAAQ,CAACS,EAAzD,EAA6D;AAC3D;AACD;;AACD,UAAM,IAAId,KAAK,CAACe,KAAV,CACJf,KAAK,CAACe,KAAN,CAAYC,gBADR,EAEJ,gDAFI,CAAN;AAID,GAVM,CAAP;AAWD,C,CAED;;;AACA,SAASC,aAAT,GAAyB;AACvB;AACA,SAAOC,OAAO,CAACC,OAAR,EAAP;AACD,C,CAED;;;AACA,SAASZ,OAAT,CAAiBa,IAAjB,EAAuBX,YAAvB,EAAqC;AACnC,MAAIY,iBAAiB,GAAGnB,WAAW,CAACoB,SAAZ,CAAsB;AAC5Cb,IAAAA,YAAY,EAAEA,YAD8B;AAE5Cc,IAAAA,cAAc,EAAE,MAF4B,CAEpB;;AAFoB,GAAtB,CAAxB;AAKA,SAAOpB,YAAY,CAACqB,GAAb,CAAiB;AAAEJ,IAAAA,IAAI,EAAEA,IAAR;AAAcK,IAAAA,IAAI,EAAE,aAAaJ;AAAjC,GAAjB,CAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiB;AACfV,EAAAA,aAAa,EAAEA,aADA;AAEfb,EAAAA,gBAAgB,EAAEA;AAFH,CAAjB",sourcesContent:["// Helper functions for accessing the Janrain Capture API.\nvar Parse = require('parse/node').Parse;\nvar querystring = require('querystring');\nconst httpsRequest = require('./httpsRequest');\n\n// Returns a promise that fulfills iff this user id is valid.\nfunction validateAuthData(authData, options) {\n  return request(options.janrain_capture_host, authData.access_token).then(data => {\n    //successful response will have a \"stat\" (status) of 'ok' and a result node that stores the uuid, because that's all we asked for\n    //see: https://docs.janrain.com/api/registration/entity/#entity\n    if (data && data.stat == 'ok' && data.result == authData.id) {\n      return;\n    }\n    throw new Parse.Error(\n      Parse.Error.OBJECT_NOT_FOUND,\n      'Janrain capture auth is invalid for this user.'\n    );\n  });\n}\n\n// Returns a promise that fulfills iff this app id is valid.\nfunction validateAppId() {\n  //no-op\n  return Promise.resolve();\n}\n\n// A promisey wrapper for api requests\nfunction request(host, access_token) {\n  var query_string_data = querystring.stringify({\n    access_token: access_token,\n    attribute_name: 'uuid', // we only need to pull the uuid for this access token to make sure it matches\n  });\n\n  return httpsRequest.get({ host: host, path: '/entity?' + query_string_data });\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData,\n};\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d5d3eee10ee9c0e2ec6cf3619bb8ddb0b7f8e08d"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_22q1q8p9kb=function(){return actualCoverage;};}return actualCoverage;}cov_22q1q8p9kb();var Parse=(cov_22q1q8p9kb().s[0]++,require('parse/node').Parse);var querystring=(cov_22q1q8p9kb().s[1]++,require('querystring'));const httpsRequest=(cov_22q1q8p9kb().s[2]++,require('./httpsRequest'));// Returns a promise that fulfills iff this user id is valid.
function validateAuthData(authData,options){cov_22q1q8p9kb().f[0]++;cov_22q1q8p9kb().s[3]++;return request(options.janrain_capture_host,authData.access_token).then(data=>{cov_22q1q8p9kb().f[1]++;cov_22q1q8p9kb().s[4]++;//successful response will have a "stat" (status) of 'ok' and a result node that stores the uuid, because that's all we asked for
//see: https://docs.janrain.com/api/registration/entity/#entity
if((cov_22q1q8p9kb().b[1][0]++,data)&&(cov_22q1q8p9kb().b[1][1]++,data.stat=='ok')&&(cov_22q1q8p9kb().b[1][2]++,data.result==authData.id)){cov_22q1q8p9kb().b[0][0]++;cov_22q1q8p9kb().s[5]++;return;}else{cov_22q1q8p9kb().b[0][1]++;}cov_22q1q8p9kb().s[6]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,'Janrain capture auth is invalid for this user.');});}// Returns a promise that fulfills iff this app id is valid.
function validateAppId(){cov_22q1q8p9kb().f[2]++;cov_22q1q8p9kb().s[7]++;//no-op
return Promise.resolve();}// A promisey wrapper for api requests
function request(host,access_token){cov_22q1q8p9kb().f[3]++;var query_string_data=(cov_22q1q8p9kb().s[8]++,querystring.stringify({access_token:access_token,attribute_name:'uuid'// we only need to pull the uuid for this access token to make sure it matches
}));cov_22q1q8p9kb().s[9]++;return httpsRequest.get({host:host,path:'/entity?'+query_string_data});}cov_22q1q8p9kb().s[10]++;module.exports={validateAppId:validateAppId,validateAuthData:validateAuthData};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2phbnJhaW5jYXB0dXJlLmpzIl0sIm5hbWVzIjpbIlBhcnNlIiwicmVxdWlyZSIsInF1ZXJ5c3RyaW5nIiwiaHR0cHNSZXF1ZXN0IiwidmFsaWRhdGVBdXRoRGF0YSIsImF1dGhEYXRhIiwib3B0aW9ucyIsInJlcXVlc3QiLCJqYW5yYWluX2NhcHR1cmVfaG9zdCIsImFjY2Vzc190b2tlbiIsInRoZW4iLCJkYXRhIiwic3RhdCIsInJlc3VsdCIsImlkIiwiRXJyb3IiLCJPQkpFQ1RfTk9UX0ZPVU5EIiwidmFsaWRhdGVBcHBJZCIsIlByb21pc2UiLCJyZXNvbHZlIiwiaG9zdCIsInF1ZXJ5X3N0cmluZ19kYXRhIiwic3RyaW5naWZ5IiwiYXR0cmlidXRlX25hbWUiLCJnZXQiLCJwYXRoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBLElBQUlBLEtBQUssR0FBR0MsT0FBTyxDQUFDLFlBQUQsQ0FBUCxDQUFzQkQsS0FBbEM7O0FBQ0EsSUFBSUUsV0FBVyxHQUFHRCxPQUFPLENBQUMsYUFBRCxDQUF6Qjs7QUFDQSxNQUFNRSxZQUFZLEdBQUdGLE9BQU8sQ0FBQyxnQkFBRCxDQUE1QixDLENBRUE7OztBQUNBLFNBQVNHLGdCQUFULENBQTBCQyxRQUExQixFQUFvQ0MsT0FBcEMsRUFBNkM7QUFDM0MsU0FBT0MsT0FBTyxDQUFDRCxPQUFPLENBQUNFLG9CQUFULEVBQStCSCxRQUFRLENBQUNJLFlBQXhDLENBQVAsQ0FBNkRDLElBQTdELENBQWtFQyxJQUFJLElBQUk7QUFDL0U7QUFDQTtBQUNBLFFBQUlBLElBQUksSUFBSUEsSUFBSSxDQUFDQyxJQUFMLElBQWEsSUFBckIsSUFBNkJELElBQUksQ0FBQ0UsTUFBTCxJQUFlUixRQUFRLENBQUNTLEVBQXpELEVBQTZEO0FBQzNEO0FBQ0Q7O0FBQ0QsVUFBTSxJQUFJZCxLQUFLLENBQUNlLEtBQVYsQ0FDSmYsS0FBSyxDQUFDZSxLQUFOLENBQVlDLGdCQURSLEVBRUosZ0RBRkksQ0FBTjtBQUlELEdBVk0sQ0FBUDtBQVdELEMsQ0FFRDs7O0FBQ0EsU0FBU0MsYUFBVCxHQUF5QjtBQUN2QjtBQUNBLFNBQU9DLE9BQU8sQ0FBQ0MsT0FBUixFQUFQO0FBQ0QsQyxDQUVEOzs7QUFDQSxTQUFTWixPQUFULENBQWlCYSxJQUFqQixFQUF1QlgsWUFBdkIsRUFBcUM7QUFDbkMsTUFBSVksaUJBQWlCLEdBQUduQixXQUFXLENBQUNvQixTQUFaLENBQXNCO0FBQzVDYixJQUFBQSxZQUFZLEVBQUVBLFlBRDhCO0FBRTVDYyxJQUFBQSxjQUFjLEVBQUUsTUFGNEIsQ0FFcEI7O0FBRm9CLEdBQXRCLENBQXhCO0FBS0EsU0FBT3BCLFlBQVksQ0FBQ3FCLEdBQWIsQ0FBaUI7QUFBRUosSUFBQUEsSUFBSSxFQUFFQSxJQUFSO0FBQWNLLElBQUFBLElBQUksRUFBRSxhQUFhSjtBQUFqQyxHQUFqQixDQUFQO0FBQ0Q7O0FBRURLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmVixFQUFBQSxhQUFhLEVBQUVBLGFBREE7QUFFZmIsRUFBQUEsZ0JBQWdCLEVBQUVBO0FBRkgsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBIZWxwZXIgZnVuY3Rpb25zIGZvciBhY2Nlc3NpbmcgdGhlIEphbnJhaW4gQ2FwdHVyZSBBUEkuXG52YXIgUGFyc2UgPSByZXF1aXJlKCdwYXJzZS9ub2RlJykuUGFyc2U7XG52YXIgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpO1xuY29uc3QgaHR0cHNSZXF1ZXN0ID0gcmVxdWlyZSgnLi9odHRwc1JlcXVlc3QnKTtcblxuLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCBmdWxmaWxscyBpZmYgdGhpcyB1c2VyIGlkIGlzIHZhbGlkLlxuZnVuY3Rpb24gdmFsaWRhdGVBdXRoRGF0YShhdXRoRGF0YSwgb3B0aW9ucykge1xuICByZXR1cm4gcmVxdWVzdChvcHRpb25zLmphbnJhaW5fY2FwdHVyZV9ob3N0LCBhdXRoRGF0YS5hY2Nlc3NfdG9rZW4pLnRoZW4oZGF0YSA9PiB7XG4gICAgLy9zdWNjZXNzZnVsIHJlc3BvbnNlIHdpbGwgaGF2ZSBhIFwic3RhdFwiIChzdGF0dXMpIG9mICdvaycgYW5kIGEgcmVzdWx0IG5vZGUgdGhhdCBzdG9yZXMgdGhlIHV1aWQsIGJlY2F1c2UgdGhhdCdzIGFsbCB3ZSBhc2tlZCBmb3JcbiAgICAvL3NlZTogaHR0cHM6Ly9kb2NzLmphbnJhaW4uY29tL2FwaS9yZWdpc3RyYXRpb24vZW50aXR5LyNlbnRpdHlcbiAgICBpZiAoZGF0YSAmJiBkYXRhLnN0YXQgPT0gJ29rJyAmJiBkYXRhLnJlc3VsdCA9PSBhdXRoRGF0YS5pZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICBQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELFxuICAgICAgJ0phbnJhaW4gY2FwdHVyZSBhdXRoIGlzIGludmFsaWQgZm9yIHRoaXMgdXNlci4nXG4gICAgKTtcbiAgfSk7XG59XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgaWZmIHRoaXMgYXBwIGlkIGlzIHZhbGlkLlxuZnVuY3Rpb24gdmFsaWRhdGVBcHBJZCgpIHtcbiAgLy9uby1vcFxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59XG5cbi8vIEEgcHJvbWlzZXkgd3JhcHBlciBmb3IgYXBpIHJlcXVlc3RzXG5mdW5jdGlvbiByZXF1ZXN0KGhvc3QsIGFjY2Vzc190b2tlbikge1xuICB2YXIgcXVlcnlfc3RyaW5nX2RhdGEgPSBxdWVyeXN0cmluZy5zdHJpbmdpZnkoe1xuICAgIGFjY2Vzc190b2tlbjogYWNjZXNzX3Rva2VuLFxuICAgIGF0dHJpYnV0ZV9uYW1lOiAndXVpZCcsIC8vIHdlIG9ubHkgbmVlZCB0byBwdWxsIHRoZSB1dWlkIGZvciB0aGlzIGFjY2VzcyB0b2tlbiB0byBtYWtlIHN1cmUgaXQgbWF0Y2hlc1xuICB9KTtcblxuICByZXR1cm4gaHR0cHNSZXF1ZXN0LmdldCh7IGhvc3Q6IGhvc3QsIHBhdGg6ICcvZW50aXR5PycgKyBxdWVyeV9zdHJpbmdfZGF0YSB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHZhbGlkYXRlQXBwSWQ6IHZhbGlkYXRlQXBwSWQsXG4gIHZhbGlkYXRlQXV0aERhdGE6IHZhbGlkYXRlQXV0aERhdGEsXG59O1xuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2phbnJhaW5jYXB0dXJlLmpzIl0sIm5hbWVzIjpbIlBhcnNlIiwicmVxdWlyZSIsInF1ZXJ5c3RyaW5nIiwiaHR0cHNSZXF1ZXN0Iiwib3B0aW9ucyIsImF1dGhEYXRhIiwiZGF0YSIsIlByb21pc2UiLCJxdWVyeV9zdHJpbmdfZGF0YSIsImFjY2Vzc190b2tlbiIsImF0dHJpYnV0ZV9uYW1lIiwiaG9zdCIsInBhdGgiLCJtb2R1bGUiLCJ2YWxpZGF0ZUFwcElkIiwidmFsaWRhdGVBdXRoRGF0YSJdLCJtYXBwaW5ncyI6ImFBQUE7cWxLQVdNOzJGQVZOLEdBQUlBLENBQUFBLEtBQUssMEJBQUdDLE9BQU8sQ0FBUEEsWUFBTyxDQUFQQSxDQUFaLEtBQVMsQ0FBVCxDQUNBLEdBQUlDLENBQUFBLFdBQVcsMEJBQUdELE9BQU8sQ0FBekIsYUFBeUIsQ0FBVixDQUFmLENBQ0EsS0FBTUUsQ0FBQUEsWUFBWSwwQkFBR0YsT0FBTyxDQUE1QixnQkFBNEIsQ0FBVixDQUFsQixDQUVBO0FBQ0EsUUFBQSxDQUFBLGdCQUFBLENBQUEsUUFBQSxDQUFBLE9BQUEsQ0FBNkMsaURBQzNDLE1BQU8sQ0FBQSxPQUFPLENBQUNHLE9BQU8sQ0FBUixvQkFBQSxDQUErQkMsUUFBUSxDQUE5QyxZQUFPLENBQVAsQ0FBQSxJQUFBLENBQWtFQyxJQUFJLEVBQUksaURBQy9FO0FBQ0E7QUFDQSxHQUFJQSw0QkFBQUEsSUFBSSwrQkFBSUEsSUFBSSxDQUFKQSxJQUFBQSxFQUFSQSxJQUFJLENBQUpBLDhCQUE2QkEsSUFBSSxDQUFKQSxNQUFBQSxFQUFlRCxRQUFRLENBQXhELEVBQUlDLENBQUosQ0FBNkQsb0RBQzNELE9BQ0QsQ0FGRCxpQ0FIK0Usd0JBTS9FLEtBQU0sSUFBSU4sQ0FBQUEsS0FBSyxDQUFULEtBQUEsQ0FDSkEsS0FBSyxDQUFMQSxLQUFBQSxDQURJLGdCQUFBLENBQU4sZ0RBQU0sQ0FBTixDQU5GLENBQU8sQ0FBUCxDLENBYUY7QUFDQSxRQUFBLENBQUEsYUFBQSxFQUF5QixpREFDdkI7QUFDQSxNQUFPTyxDQUFBQSxPQUFPLENBQWQsT0FBT0EsRUFBUCxDLENBR0Y7QUFDQSxRQUFBLENBQUEsT0FBQSxDQUFBLElBQUEsQ0FBQSxZQUFBLENBQXFDLHlCQUNuQyxHQUFJQyxDQUFBQSxpQkFBaUIsMEJBQUcsV0FBVyxDQUFYLFNBQUEsQ0FBc0IsQ0FDNUNDLFlBQVksQ0FEZ0MsWUFBQSxDQUU1Q0MsY0FBYyxDQUY4QixNQUVwQjtBQUZvQixDQUF0QixDQUFILENBQXJCLENBRG1DLHdCQU1uQyxNQUFPLENBQUEsWUFBWSxDQUFaLEdBQUEsQ0FBaUIsQ0FBRUMsSUFBSSxDQUFOLElBQUEsQ0FBY0MsSUFBSSxDQUFFLFdBQWFKLGlCQUFqQyxDQUFqQixDQUFQLENBQ0QsQyx5QkFFREssTUFBTSxDQUFOQSxPQUFBQSxDQUFpQixDQUNmQyxhQUFhLENBREUsYUFBQSxDQUVmQyxnQkFBZ0IsQ0FBRUEsZ0JBRkgsQ0FBakJGLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBIZWxwZXIgZnVuY3Rpb25zIGZvciBhY2Nlc3NpbmcgdGhlIEphbnJhaW4gQ2FwdHVyZSBBUEkuXG52YXIgUGFyc2UgPSByZXF1aXJlKCdwYXJzZS9ub2RlJykuUGFyc2U7XG52YXIgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpO1xuY29uc3QgaHR0cHNSZXF1ZXN0ID0gcmVxdWlyZSgnLi9odHRwc1JlcXVlc3QnKTtcblxuLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCBmdWxmaWxscyBpZmYgdGhpcyB1c2VyIGlkIGlzIHZhbGlkLlxuZnVuY3Rpb24gdmFsaWRhdGVBdXRoRGF0YShhdXRoRGF0YSwgb3B0aW9ucykge1xuICByZXR1cm4gcmVxdWVzdChvcHRpb25zLmphbnJhaW5fY2FwdHVyZV9ob3N0LCBhdXRoRGF0YS5hY2Nlc3NfdG9rZW4pLnRoZW4oZGF0YSA9PiB7XG4gICAgLy9zdWNjZXNzZnVsIHJlc3BvbnNlIHdpbGwgaGF2ZSBhIFwic3RhdFwiIChzdGF0dXMpIG9mICdvaycgYW5kIGEgcmVzdWx0IG5vZGUgdGhhdCBzdG9yZXMgdGhlIHV1aWQsIGJlY2F1c2UgdGhhdCdzIGFsbCB3ZSBhc2tlZCBmb3JcbiAgICAvL3NlZTogaHR0cHM6Ly9kb2NzLmphbnJhaW4uY29tL2FwaS9yZWdpc3RyYXRpb24vZW50aXR5LyNlbnRpdHlcbiAgICBpZiAoZGF0YSAmJiBkYXRhLnN0YXQgPT0gJ29rJyAmJiBkYXRhLnJlc3VsdCA9PSBhdXRoRGF0YS5pZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICBQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELFxuICAgICAgJ0phbnJhaW4gY2FwdHVyZSBhdXRoIGlzIGludmFsaWQgZm9yIHRoaXMgdXNlci4nXG4gICAgKTtcbiAgfSk7XG59XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgaWZmIHRoaXMgYXBwIGlkIGlzIHZhbGlkLlxuZnVuY3Rpb24gdmFsaWRhdGVBcHBJZCgpIHtcbiAgLy9uby1vcFxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59XG5cbi8vIEEgcHJvbWlzZXkgd3JhcHBlciBmb3IgYXBpIHJlcXVlc3RzXG5mdW5jdGlvbiByZXF1ZXN0KGhvc3QsIGFjY2Vzc190b2tlbikge1xuICB2YXIgcXVlcnlfc3RyaW5nX2RhdGEgPSBxdWVyeXN0cmluZy5zdHJpbmdpZnkoe1xuICAgIGFjY2Vzc190b2tlbjogYWNjZXNzX3Rva2VuLFxuICAgIGF0dHJpYnV0ZV9uYW1lOiAndXVpZCcsIC8vIHdlIG9ubHkgbmVlZCB0byBwdWxsIHRoZSB1dWlkIGZvciB0aGlzIGFjY2VzcyB0b2tlbiB0byBtYWtlIHN1cmUgaXQgbWF0Y2hlc1xuICB9KTtcblxuICByZXR1cm4gaHR0cHNSZXF1ZXN0LmdldCh7IGhvc3Q6IGhvc3QsIHBhdGg6ICcvZW50aXR5PycgKyBxdWVyeV9zdHJpbmdfZGF0YSB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHZhbGlkYXRlQXBwSWQ6IHZhbGlkYXRlQXBwSWQsXG4gIHZhbGlkYXRlQXV0aERhdGE6IHZhbGlkYXRlQXV0aERhdGEsXG59O1xuIl19