"use strict";// Helper functions for accessing the Janrain Engage API.
function cov_jwdhtegzl(){var path="/parse-server/lib/Adapters/Auth/janrainengage.js";var hash="c4ce842074559dc45b5e2245ac2d3c66463ec673";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Adapters/Auth/janrainengage.js",statementMap:{"0":{start:{line:4,column:19},end:{line:4,column:44}},"1":{start:{line:6,column:12},end:{line:6,column:39}},"2":{start:{line:8,column:18},end:{line:8,column:40}},"3":{start:{line:12,column:2},end:{line:20,column:5}},"4":{start:{line:15,column:4},end:{line:17,column:5}},"5":{start:{line:16,column:6},end:{line:16,column:13}},"6":{start:{line:19,column:4},end:{line:19,column:105}},"7":{start:{line:26,column:2},end:{line:26,column:27}},"8":{start:{line:31,column:18},end:{line:35,column:4}},"9":{start:{line:36,column:21},end:{line:44,column:3}},"10":{start:{line:45,column:2},end:{line:45,column:55}},"11":{start:{line:48,column:0},end:{line:51,column:2}}},fnMap:{"0":{name:"validateAuthData",decl:{start:{line:11,column:9},end:{line:11,column:25}},loc:{start:{line:11,column:45},end:{line:21,column:1}},line:11},"1":{name:"(anonymous_1)",decl:{start:{line:12,column:63},end:{line:12,column:64}},loc:{start:{line:12,column:71},end:{line:20,column:3}},line:12},"2":{name:"validateAppId",decl:{start:{line:24,column:9},end:{line:24,column:22}},loc:{start:{line:24,column:25},end:{line:27,column:1}},line:24},"3":{name:"apiRequest",decl:{start:{line:30,column:9},end:{line:30,column:19}},loc:{start:{line:30,column:41},end:{line:46,column:1}},line:30}},branchMap:{"0":{loc:{start:{line:15,column:4},end:{line:17,column:5}},type:"if",locations:[{start:{line:15,column:4},end:{line:17,column:5}},{start:{line:15,column:4},end:{line:17,column:5}}],line:15},"1":{loc:{start:{line:15,column:8},end:{line:15,column:75}},type:"binary-expr",locations:[{start:{line:15,column:8},end:{line:15,column:12}},{start:{line:15,column:16},end:{line:15,column:33}},{start:{line:15,column:37},end:{line:15,column:75}}],line:15}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0,0]},inputSourceMap:{version:3,sources:["../../../src/Adapters/Auth/janrainengage.js"],names:["httpsRequest","require","Parse","querystring","validateAuthData","authData","options","apiRequest","api_key","auth_token","then","data","stat","profile","identifier","id","Error","OBJECT_NOT_FOUND","validateAppId","Promise","resolve","post_data","stringify","token","apiKey","format","post_options","host","path","method","headers","length","request","module","exports"],mappings:";;AAAA;AACA,IAAIA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAAP,CAAsBC,KAAlC;;AACA,IAAIC,WAAW,GAAGF,OAAO,CAAC,aAAD,CAAzB,C,CAEA;;;AACA,SAASG,gBAAT,CAA0BC,QAA1B,EAAoCC,OAApC,EAA6C;AAC3C,SAAOC,UAAU,CAACD,OAAO,CAACE,OAAT,EAAkBH,QAAQ,CAACI,UAA3B,CAAV,CAAiDC,IAAjD,CAAsDC,IAAI,IAAI;AACnE;AACA;AACA,QAAIA,IAAI,IAAIA,IAAI,CAACC,IAAL,IAAa,IAArB,IAA6BD,IAAI,CAACE,OAAL,CAAaC,UAAb,IAA2BT,QAAQ,CAACU,EAArE,EAAyE;AACvE;AACD;;AACD,UAAM,IAAIb,KAAK,CAACc,KAAV,CACJd,KAAK,CAACc,KAAN,CAAYC,gBADR,EAEJ,+CAFI,CAAN;AAID,GAVM,CAAP;AAWD,C,CAED;;;AACA,SAASC,aAAT,GAAyB;AACvB;AACA,SAAOC,OAAO,CAACC,OAAR,EAAP;AACD,C,CAED;;;AACA,SAASb,UAAT,CAAoBC,OAApB,EAA6BC,UAA7B,EAAyC;AACvC,MAAIY,SAAS,GAAGlB,WAAW,CAACmB,SAAZ,CAAsB;AACpCC,IAAAA,KAAK,EAAEd,UAD6B;AAEpCe,IAAAA,MAAM,EAAEhB,OAF4B;AAGpCiB,IAAAA,MAAM,EAAE;AAH4B,GAAtB,CAAhB;AAMA,MAAIC,YAAY,GAAG;AACjBC,IAAAA,IAAI,EAAE,YADW;AAEjBC,IAAAA,IAAI,EAAE,mBAFW;AAGjBC,IAAAA,MAAM,EAAE,MAHS;AAIjBC,IAAAA,OAAO,EAAE;AACP,sBAAgB,mCADT;AAEP,wBAAkBT,SAAS,CAACU;AAFrB;AAJQ,GAAnB;AAUA,SAAO/B,YAAY,CAACgC,OAAb,CAAqBN,YAArB,EAAmCL,SAAnC,CAAP;AACD;;AAEDY,MAAM,CAACC,OAAP,GAAiB;AACfhB,EAAAA,aAAa,EAAEA,aADA;AAEfd,EAAAA,gBAAgB,EAAEA;AAFH,CAAjB",sourcesContent:["// Helper functions for accessing the Janrain Engage API.\nvar httpsRequest = require('./httpsRequest');\nvar Parse = require('parse/node').Parse;\nvar querystring = require('querystring');\n\n// Returns a promise that fulfills iff this user id is valid.\nfunction validateAuthData(authData, options) {\n  return apiRequest(options.api_key, authData.auth_token).then(data => {\n    //successful response will have a \"stat\" (status) of 'ok' and a profile node with an identifier\n    //see: http://developers.janrain.com/overview/social-login/identity-providers/user-profile-data/#normalized-user-profile-data\n    if (data && data.stat == 'ok' && data.profile.identifier == authData.id) {\n      return;\n    }\n    throw new Parse.Error(\n      Parse.Error.OBJECT_NOT_FOUND,\n      'Janrain engage auth is invalid for this user.'\n    );\n  });\n}\n\n// Returns a promise that fulfills iff this app id is valid.\nfunction validateAppId() {\n  //no-op\n  return Promise.resolve();\n}\n\n// A promisey wrapper for api requests\nfunction apiRequest(api_key, auth_token) {\n  var post_data = querystring.stringify({\n    token: auth_token,\n    apiKey: api_key,\n    format: 'json',\n  });\n\n  var post_options = {\n    host: 'rpxnow.com',\n    path: '/api/v2/auth_info',\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Content-Length': post_data.length,\n    },\n  };\n\n  return httpsRequest.request(post_options, post_data);\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData,\n};\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"c4ce842074559dc45b5e2245ac2d3c66463ec673"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_jwdhtegzl=function(){return actualCoverage;};}return actualCoverage;}cov_jwdhtegzl();var httpsRequest=(cov_jwdhtegzl().s[0]++,require('./httpsRequest'));var Parse=(cov_jwdhtegzl().s[1]++,require('parse/node').Parse);var querystring=(cov_jwdhtegzl().s[2]++,require('querystring'));// Returns a promise that fulfills iff this user id is valid.
function validateAuthData(authData,options){cov_jwdhtegzl().f[0]++;cov_jwdhtegzl().s[3]++;return apiRequest(options.api_key,authData.auth_token).then(data=>{cov_jwdhtegzl().f[1]++;cov_jwdhtegzl().s[4]++;//successful response will have a "stat" (status) of 'ok' and a profile node with an identifier
//see: http://developers.janrain.com/overview/social-login/identity-providers/user-profile-data/#normalized-user-profile-data
if((cov_jwdhtegzl().b[1][0]++,data)&&(cov_jwdhtegzl().b[1][1]++,data.stat=='ok')&&(cov_jwdhtegzl().b[1][2]++,data.profile.identifier==authData.id)){cov_jwdhtegzl().b[0][0]++;cov_jwdhtegzl().s[5]++;return;}else{cov_jwdhtegzl().b[0][1]++;}cov_jwdhtegzl().s[6]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,'Janrain engage auth is invalid for this user.');});}// Returns a promise that fulfills iff this app id is valid.
function validateAppId(){cov_jwdhtegzl().f[2]++;cov_jwdhtegzl().s[7]++;//no-op
return Promise.resolve();}// A promisey wrapper for api requests
function apiRequest(api_key,auth_token){cov_jwdhtegzl().f[3]++;var post_data=(cov_jwdhtegzl().s[8]++,querystring.stringify({token:auth_token,apiKey:api_key,format:'json'}));var post_options=(cov_jwdhtegzl().s[9]++,{host:'rpxnow.com',path:'/api/v2/auth_info',method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded','Content-Length':post_data.length}});cov_jwdhtegzl().s[10]++;return httpsRequest.request(post_options,post_data);}cov_jwdhtegzl().s[11]++;module.exports={validateAppId:validateAppId,validateAuthData:validateAuthData};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2phbnJhaW5lbmdhZ2UuanMiXSwibmFtZXMiOlsiaHR0cHNSZXF1ZXN0IiwicmVxdWlyZSIsIlBhcnNlIiwicXVlcnlzdHJpbmciLCJ2YWxpZGF0ZUF1dGhEYXRhIiwiYXV0aERhdGEiLCJvcHRpb25zIiwiYXBpUmVxdWVzdCIsImFwaV9rZXkiLCJhdXRoX3Rva2VuIiwidGhlbiIsImRhdGEiLCJzdGF0IiwicHJvZmlsZSIsImlkZW50aWZpZXIiLCJpZCIsIkVycm9yIiwiT0JKRUNUX05PVF9GT1VORCIsInZhbGlkYXRlQXBwSWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInBvc3RfZGF0YSIsInN0cmluZ2lmeSIsInRva2VuIiwiYXBpS2V5IiwiZm9ybWF0IiwicG9zdF9vcHRpb25zIiwiaG9zdCIsInBhdGgiLCJtZXRob2QiLCJoZWFkZXJzIiwibGVuZ3RoIiwicmVxdWVzdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSxJQUFJQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxnQkFBRCxDQUExQjs7QUFDQSxJQUFJQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxZQUFELENBQVAsQ0FBc0JDLEtBQWxDOztBQUNBLElBQUlDLFdBQVcsR0FBR0YsT0FBTyxDQUFDLGFBQUQsQ0FBekIsQyxDQUVBOzs7QUFDQSxTQUFTRyxnQkFBVCxDQUEwQkMsUUFBMUIsRUFBb0NDLE9BQXBDLEVBQTZDO0FBQzNDLFNBQU9DLFVBQVUsQ0FBQ0QsT0FBTyxDQUFDRSxPQUFULEVBQWtCSCxRQUFRLENBQUNJLFVBQTNCLENBQVYsQ0FBaURDLElBQWpELENBQXNEQyxJQUFJLElBQUk7QUFDbkU7QUFDQTtBQUNBLFFBQUlBLElBQUksSUFBSUEsSUFBSSxDQUFDQyxJQUFMLElBQWEsSUFBckIsSUFBNkJELElBQUksQ0FBQ0UsT0FBTCxDQUFhQyxVQUFiLElBQTJCVCxRQUFRLENBQUNVLEVBQXJFLEVBQXlFO0FBQ3ZFO0FBQ0Q7O0FBQ0QsVUFBTSxJQUFJYixLQUFLLENBQUNjLEtBQVYsQ0FDSmQsS0FBSyxDQUFDYyxLQUFOLENBQVlDLGdCQURSLEVBRUosK0NBRkksQ0FBTjtBQUlELEdBVk0sQ0FBUDtBQVdELEMsQ0FFRDs7O0FBQ0EsU0FBU0MsYUFBVCxHQUF5QjtBQUN2QjtBQUNBLFNBQU9DLE9BQU8sQ0FBQ0MsT0FBUixFQUFQO0FBQ0QsQyxDQUVEOzs7QUFDQSxTQUFTYixVQUFULENBQW9CQyxPQUFwQixFQUE2QkMsVUFBN0IsRUFBeUM7QUFDdkMsTUFBSVksU0FBUyxHQUFHbEIsV0FBVyxDQUFDbUIsU0FBWixDQUFzQjtBQUNwQ0MsSUFBQUEsS0FBSyxFQUFFZCxVQUQ2QjtBQUVwQ2UsSUFBQUEsTUFBTSxFQUFFaEIsT0FGNEI7QUFHcENpQixJQUFBQSxNQUFNLEVBQUU7QUFINEIsR0FBdEIsQ0FBaEI7QUFNQSxNQUFJQyxZQUFZLEdBQUc7QUFDakJDLElBQUFBLElBQUksRUFBRSxZQURXO0FBRWpCQyxJQUFBQSxJQUFJLEVBQUUsbUJBRlc7QUFHakJDLElBQUFBLE1BQU0sRUFBRSxNQUhTO0FBSWpCQyxJQUFBQSxPQUFPLEVBQUU7QUFDUCxzQkFBZ0IsbUNBRFQ7QUFFUCx3QkFBa0JULFNBQVMsQ0FBQ1U7QUFGckI7QUFKUSxHQUFuQjtBQVVBLFNBQU8vQixZQUFZLENBQUNnQyxPQUFiLENBQXFCTixZQUFyQixFQUFtQ0wsU0FBbkMsQ0FBUDtBQUNEOztBQUVEWSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZmhCLEVBQUFBLGFBQWEsRUFBRUEsYUFEQTtBQUVmZCxFQUFBQSxnQkFBZ0IsRUFBRUE7QUFGSCxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIGFjY2Vzc2luZyB0aGUgSmFucmFpbiBFbmdhZ2UgQVBJLlxudmFyIGh0dHBzUmVxdWVzdCA9IHJlcXVpcmUoJy4vaHR0cHNSZXF1ZXN0Jyk7XG52YXIgUGFyc2UgPSByZXF1aXJlKCdwYXJzZS9ub2RlJykuUGFyc2U7XG52YXIgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpO1xuXG4vLyBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGZ1bGZpbGxzIGlmZiB0aGlzIHVzZXIgaWQgaXMgdmFsaWQuXG5mdW5jdGlvbiB2YWxpZGF0ZUF1dGhEYXRhKGF1dGhEYXRhLCBvcHRpb25zKSB7XG4gIHJldHVybiBhcGlSZXF1ZXN0KG9wdGlvbnMuYXBpX2tleSwgYXV0aERhdGEuYXV0aF90b2tlbikudGhlbihkYXRhID0+IHtcbiAgICAvL3N1Y2Nlc3NmdWwgcmVzcG9uc2Ugd2lsbCBoYXZlIGEgXCJzdGF0XCIgKHN0YXR1cykgb2YgJ29rJyBhbmQgYSBwcm9maWxlIG5vZGUgd2l0aCBhbiBpZGVudGlmaWVyXG4gICAgLy9zZWU6IGh0dHA6Ly9kZXZlbG9wZXJzLmphbnJhaW4uY29tL292ZXJ2aWV3L3NvY2lhbC1sb2dpbi9pZGVudGl0eS1wcm92aWRlcnMvdXNlci1wcm9maWxlLWRhdGEvI25vcm1hbGl6ZWQtdXNlci1wcm9maWxlLWRhdGFcbiAgICBpZiAoZGF0YSAmJiBkYXRhLnN0YXQgPT0gJ29rJyAmJiBkYXRhLnByb2ZpbGUuaWRlbnRpZmllciA9PSBhdXRoRGF0YS5pZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICBQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELFxuICAgICAgJ0phbnJhaW4gZW5nYWdlIGF1dGggaXMgaW52YWxpZCBmb3IgdGhpcyB1c2VyLidcbiAgICApO1xuICB9KTtcbn1cblxuLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCBmdWxmaWxscyBpZmYgdGhpcyBhcHAgaWQgaXMgdmFsaWQuXG5mdW5jdGlvbiB2YWxpZGF0ZUFwcElkKCkge1xuICAvL25vLW9wXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn1cblxuLy8gQSBwcm9taXNleSB3cmFwcGVyIGZvciBhcGkgcmVxdWVzdHNcbmZ1bmN0aW9uIGFwaVJlcXVlc3QoYXBpX2tleSwgYXV0aF90b2tlbikge1xuICB2YXIgcG9zdF9kYXRhID0gcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHtcbiAgICB0b2tlbjogYXV0aF90b2tlbixcbiAgICBhcGlLZXk6IGFwaV9rZXksXG4gICAgZm9ybWF0OiAnanNvbicsXG4gIH0pO1xuXG4gIHZhciBwb3N0X29wdGlvbnMgPSB7XG4gICAgaG9zdDogJ3JweG5vdy5jb20nLFxuICAgIHBhdGg6ICcvYXBpL3YyL2F1dGhfaW5mbycsXG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgaGVhZGVyczoge1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogcG9zdF9kYXRhLmxlbmd0aCxcbiAgICB9LFxuICB9O1xuXG4gIHJldHVybiBodHRwc1JlcXVlc3QucmVxdWVzdChwb3N0X29wdGlvbnMsIHBvc3RfZGF0YSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB2YWxpZGF0ZUFwcElkOiB2YWxpZGF0ZUFwcElkLFxuICB2YWxpZGF0ZUF1dGhEYXRhOiB2YWxpZGF0ZUF1dGhEYXRhLFxufTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2phbnJhaW5lbmdhZ2UuanMiXSwibmFtZXMiOlsiaHR0cHNSZXF1ZXN0IiwicmVxdWlyZSIsIlBhcnNlIiwicXVlcnlzdHJpbmciLCJvcHRpb25zIiwiYXV0aERhdGEiLCJkYXRhIiwiUHJvbWlzZSIsInBvc3RfZGF0YSIsInRva2VuIiwiYXBpS2V5IiwiZm9ybWF0IiwicG9zdF9vcHRpb25zIiwiaG9zdCIsInBhdGgiLCJtZXRob2QiLCJoZWFkZXJzIiwibGVuZ3RoIiwibW9kdWxlIiwidmFsaWRhdGVBcHBJZCIsInZhbGlkYXRlQXV0aERhdGEiXSwibWFwcGluZ3MiOiJhQUFBOzZnTEFXTTt5RkFWTixHQUFJQSxDQUFBQSxZQUFZLHlCQUFHQyxPQUFPLENBQTFCLGdCQUEwQixDQUFWLENBQWhCLENBQ0EsR0FBSUMsQ0FBQUEsS0FBSyx5QkFBR0QsT0FBTyxDQUFQQSxZQUFPLENBQVBBLENBQVosS0FBUyxDQUFULENBQ0EsR0FBSUUsQ0FBQUEsV0FBVyx5QkFBR0YsT0FBTyxDQUF6QixhQUF5QixDQUFWLENBQWYsQ0FFQTtBQUNBLFFBQUEsQ0FBQSxnQkFBQSxDQUFBLFFBQUEsQ0FBQSxPQUFBLENBQTZDLCtDQUMzQyxNQUFPLENBQUEsVUFBVSxDQUFDRyxPQUFPLENBQVIsT0FBQSxDQUFrQkMsUUFBUSxDQUFwQyxVQUFVLENBQVYsQ0FBQSxJQUFBLENBQXNEQyxJQUFJLEVBQUksK0NBQ25FO0FBQ0E7QUFDQSxHQUFJQSwyQkFBQUEsSUFBSSw4QkFBSUEsSUFBSSxDQUFKQSxJQUFBQSxFQUFSQSxJQUFJLENBQUpBLDZCQUE2QkEsSUFBSSxDQUFKQSxPQUFBQSxDQUFBQSxVQUFBQSxFQUEyQkQsUUFBUSxDQUFwRSxFQUFJQyxDQUFKLENBQXlFLGtEQUN2RSxPQUNELENBRkQsZ0NBSG1FLHVCQU1uRSxLQUFNLElBQUlKLENBQUFBLEtBQUssQ0FBVCxLQUFBLENBQ0pBLEtBQUssQ0FBTEEsS0FBQUEsQ0FESSxnQkFBQSxDQUFOLCtDQUFNLENBQU4sQ0FORixDQUFPLENBQVAsQyxDQWFGO0FBQ0EsUUFBQSxDQUFBLGFBQUEsRUFBeUIsK0NBQ3ZCO0FBQ0EsTUFBT0ssQ0FBQUEsT0FBTyxDQUFkLE9BQU9BLEVBQVAsQyxDQUdGO0FBQ0EsUUFBQSxDQUFBLFVBQUEsQ0FBQSxPQUFBLENBQUEsVUFBQSxDQUF5Qyx3QkFDdkMsR0FBSUMsQ0FBQUEsU0FBUyx5QkFBRyxXQUFXLENBQVgsU0FBQSxDQUFzQixDQUNwQ0MsS0FBSyxDQUQrQixVQUFBLENBRXBDQyxNQUFNLENBRjhCLE9BQUEsQ0FHcENDLE1BQU0sQ0FBRSxNQUg0QixDQUF0QixDQUFILENBQWIsQ0FNQSxHQUFJQyxDQUFBQSxZQUFZLHlCQUFHLENBQ2pCQyxJQUFJLENBRGEsWUFBQSxDQUVqQkMsSUFBSSxDQUZhLG1CQUFBLENBR2pCQyxNQUFNLENBSFcsTUFBQSxDQUlqQkMsT0FBTyxDQUFFLENBQ1AsZUFETyxtQ0FBQSxDQUVQLGlCQUFrQlIsU0FBUyxDQUFDUyxNQUZyQixDQUpRLENBQUgsQ0FBaEIsQ0FQdUMsd0JBaUJ2QyxNQUFPakIsQ0FBQUEsWUFBWSxDQUFaQSxPQUFBQSxDQUFBQSxZQUFBQSxDQUFQLFNBQU9BLENBQVAsQ0FDRCxDLHdCQUVEa0IsTUFBTSxDQUFOQSxPQUFBQSxDQUFpQixDQUNmQyxhQUFhLENBREUsYUFBQSxDQUVmQyxnQkFBZ0IsQ0FBRUEsZ0JBRkgsQ0FBakJGLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBIZWxwZXIgZnVuY3Rpb25zIGZvciBhY2Nlc3NpbmcgdGhlIEphbnJhaW4gRW5nYWdlIEFQSS5cbnZhciBodHRwc1JlcXVlc3QgPSByZXF1aXJlKCcuL2h0dHBzUmVxdWVzdCcpO1xudmFyIFBhcnNlID0gcmVxdWlyZSgncGFyc2Uvbm9kZScpLlBhcnNlO1xudmFyIHF1ZXJ5c3RyaW5nID0gcmVxdWlyZSgncXVlcnlzdHJpbmcnKTtcblxuLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCBmdWxmaWxscyBpZmYgdGhpcyB1c2VyIGlkIGlzIHZhbGlkLlxuZnVuY3Rpb24gdmFsaWRhdGVBdXRoRGF0YShhdXRoRGF0YSwgb3B0aW9ucykge1xuICByZXR1cm4gYXBpUmVxdWVzdChvcHRpb25zLmFwaV9rZXksIGF1dGhEYXRhLmF1dGhfdG9rZW4pLnRoZW4oZGF0YSA9PiB7XG4gICAgLy9zdWNjZXNzZnVsIHJlc3BvbnNlIHdpbGwgaGF2ZSBhIFwic3RhdFwiIChzdGF0dXMpIG9mICdvaycgYW5kIGEgcHJvZmlsZSBub2RlIHdpdGggYW4gaWRlbnRpZmllclxuICAgIC8vc2VlOiBodHRwOi8vZGV2ZWxvcGVycy5qYW5yYWluLmNvbS9vdmVydmlldy9zb2NpYWwtbG9naW4vaWRlbnRpdHktcHJvdmlkZXJzL3VzZXItcHJvZmlsZS1kYXRhLyNub3JtYWxpemVkLXVzZXItcHJvZmlsZS1kYXRhXG4gICAgaWYgKGRhdGEgJiYgZGF0YS5zdGF0ID09ICdvaycgJiYgZGF0YS5wcm9maWxlLmlkZW50aWZpZXIgPT0gYXV0aERhdGEuaWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCxcbiAgICAgICdKYW5yYWluIGVuZ2FnZSBhdXRoIGlzIGludmFsaWQgZm9yIHRoaXMgdXNlci4nXG4gICAgKTtcbiAgfSk7XG59XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgaWZmIHRoaXMgYXBwIGlkIGlzIHZhbGlkLlxuZnVuY3Rpb24gdmFsaWRhdGVBcHBJZCgpIHtcbiAgLy9uby1vcFxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59XG5cbi8vIEEgcHJvbWlzZXkgd3JhcHBlciBmb3IgYXBpIHJlcXVlc3RzXG5mdW5jdGlvbiBhcGlSZXF1ZXN0KGFwaV9rZXksIGF1dGhfdG9rZW4pIHtcbiAgdmFyIHBvc3RfZGF0YSA9IHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeSh7XG4gICAgdG9rZW46IGF1dGhfdG9rZW4sXG4gICAgYXBpS2V5OiBhcGlfa2V5LFxuICAgIGZvcm1hdDogJ2pzb24nLFxuICB9KTtcblxuICB2YXIgcG9zdF9vcHRpb25zID0ge1xuICAgIGhvc3Q6ICdycHhub3cuY29tJyxcbiAgICBwYXRoOiAnL2FwaS92Mi9hdXRoX2luZm8nLFxuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAgICdDb250ZW50LUxlbmd0aCc6IHBvc3RfZGF0YS5sZW5ndGgsXG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gaHR0cHNSZXF1ZXN0LnJlcXVlc3QocG9zdF9vcHRpb25zLCBwb3N0X2RhdGEpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdmFsaWRhdGVBcHBJZDogdmFsaWRhdGVBcHBJZCxcbiAgdmFsaWRhdGVBdXRoRGF0YTogdmFsaWRhdGVBdXRoRGF0YSxcbn07XG4iXX0=