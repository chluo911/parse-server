"use strict";function cov_1u2jw8m4nd(){var path="/parse-server/lib/Controllers/LoggerController.js";var hash="15b967e16ffe65b7a5bbe7a1ad5911ca29fcd3d8";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Controllers/LoggerController.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:90}},"2":{start:{line:8,column:12},end:{line:8,column:33}},"3":{start:{line:10,column:27},end:{line:10,column:83}},"4":{start:{line:12,column:21},end:{line:12,column:64}},"5":{start:{line:14,column:11},end:{line:14,column:49}},"6":{start:{line:16,column:39},end:{line:16,column:93}},"7":{start:{line:18,column:30},end:{line:18,column:49}},"8":{start:{line:19,column:35},end:{line:19,column:39}},"9":{start:{line:20,column:25},end:{line:20,column:42}},"10":{start:{line:21,column:17},end:{line:24,column:1}},"11":{start:{line:25,column:0},end:{line:25,column:28}},"12":{start:{line:26,column:17},end:{line:29,column:1}},"13":{start:{line:30,column:0},end:{line:30,column:28}},"14":{start:{line:31,column:18},end:{line:31,column:72}},"15":{start:{line:37,column:4},end:{line:37,column:35}},"16":{start:{line:38,column:16},end:{line:38,column:22}},"17":{start:{line:40,column:4},end:{line:42,column:5}},"18":{start:{line:41,column:6},end:{line:41,column:24}},"19":{start:{line:44,column:4},end:{line:46,column:5}},"20":{start:{line:45,column:6},end:{line:45,column:31}},"21":{start:{line:48,column:18},end:{line:48,column:42}},"22":{start:{line:50,column:4},end:{line:55,column:7}},"23":{start:{line:51,column:6},end:{line:54,column:7}},"24":{start:{line:53,column:8},end:{line:53,column:31}},"25":{start:{line:59,column:19},end:{line:59,column:54}},"26":{start:{line:61,column:18},end:{line:61,column:30}},"27":{start:{line:62,column:25},end:{line:62,column:28}},"28":{start:{line:64,column:4},end:{line:72,column:5}},"29":{start:{line:65,column:6},end:{line:71,column:7}},"30":{start:{line:67,column:8},end:{line:67,column:55}},"31":{start:{line:70,column:8},end:{line:70,column:55}},"32":{start:{line:75,column:4},end:{line:75,column:49}},"33":{start:{line:77,column:4},end:{line:77,column:44}},"34":{start:{line:81,column:4},end:{line:127,column:7}},"35":{start:{line:82,column:6},end:{line:84,column:7}},"36":{start:{line:83,column:8},end:{line:83,column:17}},"37":{start:{line:86,column:6},end:{line:88,column:7}},"38":{start:{line:87,column:8},end:{line:87,column:68}},"39":{start:{line:92,column:6},end:{line:106,column:7}},"40":{start:{line:94,column:8},end:{line:105,column:9}},"41":{start:{line:95,column:10},end:{line:95,column:47}},"42":{start:{line:96,column:15},end:{line:105,column:9}},"43":{start:{line:98,column:10},end:{line:104,column:13}},"44":{start:{line:99,column:12},end:{line:101,column:13}},"45":{start:{line:100,column:14},end:{line:100,column:49}},"46":{start:{line:103,column:12},end:{line:103,column:24}},"47":{start:{line:108,column:6},end:{line:115,column:7}},"48":{start:{line:109,column:8},end:{line:114,column:9}},"49":{start:{line:110,column:10},end:{line:113,column:11}},"50":{start:{line:111,column:12},end:{line:111,column:37}},"51":{start:{line:112,column:12},end:{line:112,column:18}},"52":{start:{line:117,column:6},end:{line:124,column:7}},"53":{start:{line:118,column:8},end:{line:123,column:9}},"54":{start:{line:119,column:10},end:{line:122,column:11}},"55":{start:{line:120,column:12},end:{line:120,column:39}},"56":{start:{line:121,column:12},end:{line:121,column:18}},"57":{start:{line:126,column:6},end:{line:126,column:15}},"58":{start:{line:132,column:4},end:{line:132,column:41}},"59":{start:{line:133,column:4},end:{line:139,column:8}},"60":{start:{line:134,column:6},end:{line:136,column:7}},"61":{start:{line:135,column:8},end:{line:135,column:21}},"62":{start:{line:138,column:6},end:{line:138,column:17}},"63":{start:{line:140,column:4},end:{line:140,column:47}},"64":{start:{line:144,column:4},end:{line:144,column:39}},"65":{start:{line:148,column:4},end:{line:148,column:40}},"66":{start:{line:152,column:4},end:{line:152,column:39}},"67":{start:{line:156,column:4},end:{line:156,column:42}},"68":{start:{line:160,column:4},end:{line:160,column:40}},"69":{start:{line:164,column:4},end:{line:164,column:40}},"70":{start:{line:173,column:4},end:{line:181,column:7}},"71":{start:{line:174,column:30},end:{line:174,column:59}},"72":{start:{line:175,column:6},end:{line:175,column:66}},"73":{start:{line:189,column:4},end:{line:194,column:7}},"74":{start:{line:190,column:34},end:{line:190,column:65}},"75":{start:{line:191,column:6},end:{line:191,column:72}},"76":{start:{line:199,column:4},end:{line:201,column:5}},"77":{start:{line:200,column:6},end:{line:200,column:18}},"78":{start:{line:203,column:4},end:{line:203,column:26}},"79":{start:{line:205,column:4},end:{line:207,column:5}},"80":{start:{line:206,column:6},end:{line:206,column:18}},"81":{start:{line:209,column:4},end:{line:209,column:16}},"82":{start:{line:213,column:4},end:{line:216,column:5}},"83":{start:{line:214,column:24},end:{line:214,column:90}},"84":{start:{line:215,column:6},end:{line:215,column:23}},"85":{start:{line:218,column:4},end:{line:218,column:18}},"86":{start:{line:222,column:17},end:{line:222,column:113}},"87":{start:{line:223,column:18},end:{line:223,column:77}},"88":{start:{line:224,column:17},end:{line:224,column:43}},"89":{start:{line:225,column:18},end:{line:225,column:54}},"90":{start:{line:226,column:18},end:{line:226,column:48}},"91":{start:{line:227,column:4},end:{line:233,column:6}},"92":{start:{line:244,column:4},end:{line:246,column:5}},"93":{start:{line:245,column:6},end:{line:245,column:107}},"94":{start:{line:248,column:4},end:{line:250,column:5}},"95":{start:{line:249,column:6},end:{line:249,column:124}},"96":{start:{line:252,column:4},end:{line:252,column:53}},"97":{start:{line:253,column:4},end:{line:253,column:39}},"98":{start:{line:257,column:4},end:{line:257,column:40}},"99":{start:{line:262,column:0},end:{line:262,column:44}},"100":{start:{line:263,column:15},end:{line:263,column:31}},"101":{start:{line:264,column:0},end:{line:264,column:27}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:16,column:9},end:{line:16,column:31}},loc:{start:{line:16,column:37},end:{line:16,column:95}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:34,column:2},end:{line:34,column:3}},loc:{start:{line:36,column:5},end:{line:56,column:3}},line:36},"2":{name:"(anonymous_2)",decl:{start:{line:50,column:22},end:{line:50,column:23}},loc:{start:{line:50,column:45},end:{line:55,column:5}},line:50},"3":{name:"(anonymous_3)",decl:{start:{line:53,column:22},end:{line:53,column:23}},loc:{start:{line:53,column:28},end:{line:53,column:30}},line:53},"4":{name:"(anonymous_4)",decl:{start:{line:58,column:2},end:{line:58,column:3}},loc:{start:{line:58,column:30},end:{line:78,column:3}},line:58},"5":{name:"(anonymous_5)",decl:{start:{line:80,column:2},end:{line:80,column:3}},loc:{start:{line:80,column:26},end:{line:128,column:3}},line:80},"6":{name:"(anonymous_6)",decl:{start:{line:81,column:24},end:{line:81,column:25}},loc:{start:{line:81,column:29},end:{line:127,column:5}},line:81},"7":{name:"(anonymous_7)",decl:{start:{line:98,column:28},end:{line:98,column:29}},loc:{start:{line:98,column:36},end:{line:104,column:11}},line:98},"8":{name:"(anonymous_8)",decl:{start:{line:130,column:2},end:{line:130,column:3}},loc:{start:{line:130,column:19},end:{line:141,column:3}},line:130},"9":{name:"(anonymous_9)",decl:{start:{line:133,column:37},end:{line:133,column:38}},loc:{start:{line:133,column:44},end:{line:139,column:5}},line:133},"10":{name:"(anonymous_10)",decl:{start:{line:143,column:2},end:{line:143,column:3}},loc:{start:{line:143,column:9},end:{line:145,column:3}},line:143},"11":{name:"(anonymous_11)",decl:{start:{line:147,column:2},end:{line:147,column:3}},loc:{start:{line:147,column:10},end:{line:149,column:3}},line:147},"12":{name:"(anonymous_12)",decl:{start:{line:151,column:2},end:{line:151,column:3}},loc:{start:{line:151,column:9},end:{line:153,column:3}},line:151},"13":{name:"(anonymous_13)",decl:{start:{line:155,column:2},end:{line:155,column:3}},loc:{start:{line:155,column:12},end:{line:157,column:3}},line:155},"14":{name:"(anonymous_14)",decl:{start:{line:159,column:2},end:{line:159,column:3}},loc:{start:{line:159,column:10},end:{line:161,column:3}},line:159},"15":{name:"(anonymous_15)",decl:{start:{line:163,column:2},end:{line:163,column:3}},loc:{start:{line:163,column:10},end:{line:165,column:3}},line:163},"16":{name:"(anonymous_16)",decl:{start:{line:167,column:2},end:{line:167,column:3}},loc:{start:{line:172,column:5},end:{line:182,column:3}},line:172},"17":{name:"(anonymous_17)",decl:{start:{line:173,column:17},end:{line:173,column:18}},loc:{start:{line:173,column:23},end:{line:176,column:5}},line:173},"18":{name:"(anonymous_18)",decl:{start:{line:184,column:2},end:{line:184,column:3}},loc:{start:{line:188,column:5},end:{line:195,column:3}},line:188},"19":{name:"(anonymous_19)",decl:{start:{line:189,column:17},end:{line:189,column:18}},loc:{start:{line:189,column:23},end:{line:192,column:5}},line:189},"20":{name:"(anonymous_20)",decl:{start:{line:198,column:2},end:{line:198,column:3}},loc:{start:{line:198,column:29},end:{line:210,column:3}},line:198},"21":{name:"(anonymous_21)",decl:{start:{line:212,column:2},end:{line:212,column:3}},loc:{start:{line:212,column:29},end:{line:219,column:3}},line:212},"22":{name:"(anonymous_22)",decl:{start:{line:221,column:2},end:{line:221,column:3}},loc:{start:{line:221,column:36},end:{line:234,column:3}},line:221},"23":{name:"(anonymous_23)",decl:{start:{line:243,column:2},end:{line:243,column:3}},loc:{start:{line:243,column:24},end:{line:254,column:3}},line:243},"24":{name:"(anonymous_24)",decl:{start:{line:256,column:2},end:{line:256,column:3}},loc:{start:{line:256,column:24},end:{line:258,column:3}},line:256}},branchMap:{"0":{loc:{start:{line:16,column:46},end:{line:16,column:92}},type:"cond-expr",locations:[{start:{line:16,column:70},end:{line:16,column:73}},{start:{line:16,column:76},end:{line:16,column:92}}],line:16},"1":{loc:{start:{line:16,column:46},end:{line:16,column:67}},type:"binary-expr",locations:[{start:{line:16,column:46},end:{line:16,column:49}},{start:{line:16,column:53},end:{line:16,column:67}}],line:16},"2":{loc:{start:{line:34,column:30},end:{line:36,column:3}},type:"default-arg",locations:[{start:{line:34,column:40},end:{line:36,column:3}}],line:34},"3":{loc:{start:{line:40,column:4},end:{line:42,column:5}},type:"if",locations:[{start:{line:40,column:4},end:{line:42,column:5}},{start:{line:40,column:4},end:{line:42,column:5}}],line:40},"4":{loc:{start:{line:44,column:4},end:{line:46,column:5}},type:"if",locations:[{start:{line:44,column:4},end:{line:46,column:5}},{start:{line:44,column:4},end:{line:46,column:5}}],line:44},"5":{loc:{start:{line:51,column:6},end:{line:54,column:7}},type:"if",locations:[{start:{line:51,column:6},end:{line:54,column:7}},{start:{line:51,column:6},end:{line:54,column:7}}],line:51},"6":{loc:{start:{line:65,column:6},end:{line:71,column:7}},type:"if",locations:[{start:{line:65,column:6},end:{line:71,column:7}},{start:{line:65,column:6},end:{line:71,column:7}}],line:65},"7":{loc:{start:{line:82,column:6},end:{line:84,column:7}},type:"if",locations:[{start:{line:82,column:6},end:{line:84,column:7}},{start:{line:82,column:6},end:{line:84,column:7}}],line:82},"8":{loc:{start:{line:86,column:6},end:{line:88,column:7}},type:"if",locations:[{start:{line:86,column:6},end:{line:88,column:7}},{start:{line:86,column:6},end:{line:88,column:7}}],line:86},"9":{loc:{start:{line:92,column:6},end:{line:106,column:7}},type:"if",locations:[{start:{line:92,column:6},end:{line:106,column:7}},{start:{line:92,column:6},end:{line:106,column:7}}],line:92},"10":{loc:{start:{line:94,column:8},end:{line:105,column:9}},type:"if",locations:[{start:{line:94,column:8},end:{line:105,column:9}},{start:{line:94,column:8},end:{line:105,column:9}}],line:94},"11":{loc:{start:{line:96,column:15},end:{line:105,column:9}},type:"if",locations:[{start:{line:96,column:15},end:{line:105,column:9}},{start:{line:96,column:15},end:{line:105,column:9}}],line:96},"12":{loc:{start:{line:99,column:12},end:{line:101,column:13}},type:"if",locations:[{start:{line:99,column:12},end:{line:101,column:13}},{start:{line:99,column:12},end:{line:101,column:13}}],line:99},"13":{loc:{start:{line:108,column:6},end:{line:115,column:7}},type:"if",locations:[{start:{line:108,column:6},end:{line:115,column:7}},{start:{line:108,column:6},end:{line:115,column:7}}],line:108},"14":{loc:{start:{line:110,column:10},end:{line:113,column:11}},type:"if",locations:[{start:{line:110,column:10},end:{line:113,column:11}},{start:{line:110,column:10},end:{line:113,column:11}}],line:110},"15":{loc:{start:{line:117,column:6},end:{line:124,column:7}},type:"if",locations:[{start:{line:117,column:6},end:{line:124,column:7}},{start:{line:117,column:6},end:{line:124,column:7}}],line:117},"16":{loc:{start:{line:119,column:10},end:{line:122,column:11}},type:"if",locations:[{start:{line:119,column:10},end:{line:122,column:11}},{start:{line:119,column:10},end:{line:122,column:11}}],line:119},"17":{loc:{start:{line:134,column:6},end:{line:136,column:7}},type:"if",locations:[{start:{line:134,column:6},end:{line:136,column:7}},{start:{line:134,column:6},end:{line:136,column:7}}],line:134},"18":{loc:{start:{line:199,column:4},end:{line:201,column:5}},type:"if",locations:[{start:{line:199,column:4},end:{line:201,column:5}},{start:{line:199,column:4},end:{line:201,column:5}}],line:199},"19":{loc:{start:{line:205,column:4},end:{line:207,column:5}},type:"if",locations:[{start:{line:205,column:4},end:{line:207,column:5}},{start:{line:205,column:4},end:{line:207,column:5}}],line:205},"20":{loc:{start:{line:213,column:4},end:{line:216,column:5}},type:"if",locations:[{start:{line:213,column:4},end:{line:216,column:5}},{start:{line:213,column:4},end:{line:216,column:5}}],line:213},"21":{loc:{start:{line:213,column:8},end:{line:213,column:60}},type:"binary-expr",locations:[{start:{line:213,column:8},end:{line:213,column:14}},{start:{line:213,column:18},end:{line:213,column:60}}],line:213},"22":{loc:{start:{line:221,column:22},end:{line:221,column:34}},type:"default-arg",locations:[{start:{line:221,column:32},end:{line:221,column:34}}],line:221},"23":{loc:{start:{line:222,column:17},end:{line:222,column:113}},type:"binary-expr",locations:[{start:{line:222,column:17},end:{line:222,column:61}},{start:{line:222,column:65},end:{line:222,column:113}}],line:222},"24":{loc:{start:{line:223,column:18},end:{line:223,column:77}},type:"binary-expr",locations:[{start:{line:223,column:18},end:{line:223,column:63}},{start:{line:223,column:67},end:{line:223,column:77}}],line:223},"25":{loc:{start:{line:224,column:17},end:{line:224,column:43}},type:"binary-expr",locations:[{start:{line:224,column:17},end:{line:224,column:37}},{start:{line:224,column:41},end:{line:224,column:43}}],line:224},"26":{loc:{start:{line:225,column:18},end:{line:225,column:54}},type:"binary-expr",locations:[{start:{line:225,column:18},end:{line:225,column:31}},{start:{line:225,column:35},end:{line:225,column:54}}],line:225},"27":{loc:{start:{line:226,column:18},end:{line:226,column:48}},type:"binary-expr",locations:[{start:{line:226,column:18},end:{line:226,column:31}},{start:{line:226,column:35},end:{line:226,column:48}}],line:226},"28":{loc:{start:{line:243,column:10},end:{line:243,column:22}},type:"default-arg",locations:[{start:{line:243,column:20},end:{line:243,column:22}}],line:243},"29":{loc:{start:{line:244,column:4},end:{line:246,column:5}},type:"if",locations:[{start:{line:244,column:4},end:{line:246,column:5}},{start:{line:244,column:4},end:{line:246,column:5}}],line:244},"30":{loc:{start:{line:248,column:4},end:{line:250,column:5}},type:"if",locations:[{start:{line:248,column:4},end:{line:250,column:5}},{start:{line:248,column:4},end:{line:250,column:5}}],line:248}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},b:{"0":[0,0],"1":[0,0],"2":[0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0],"29":[0,0],"30":[0,0]},inputSourceMap:{version:3,sources:["../../src/Controllers/LoggerController.js"],names:["MILLISECONDS_IN_A_DAY","LOG_STRING_TRUNCATE_LENGTH","truncationMarker","LogLevel","INFO","ERROR","LogOrder","DESCENDING","ASCENDING","logLevels","LoggerController","AdaptableController","constructor","adapter","appId","options","logLevel","level","verbose","index","indexOf","forEach","levelIndex","maskSensitiveUrl","urlString","urlObj","url","parse","query","sanitizedQuery","key","slice","pathname","maskSensitive","argArray","map","e","replace","Array","isArray","item","body","Object","keys","params","log","args","concat","arg","apply","info","arguments","error","warn","debug","silly","logRequest","method","headers","stringifiedBody","JSON","stringify","logResponse","result","stringifiedResponse","validDateTime","date","Date","isNaN","getTime","truncateLogMessage","string","length","truncated","substring","parseOptions","from","now","until","size","Number","order","getLogs","Parse","Error","PUSH_MISCONFIGURED","expectedAdapterType","LoggerAdapter"],mappings:"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",sourcesContent:["import { Parse } from 'parse/node';\nimport AdaptableController from './AdaptableController';\nimport { LoggerAdapter } from '../Adapters/Logger/LoggerAdapter';\nimport url from 'url';\n\nconst MILLISECONDS_IN_A_DAY = 24 * 60 * 60 * 1000;\nconst LOG_STRING_TRUNCATE_LENGTH = 1000;\nconst truncationMarker = '... (truncated)';\n\nexport const LogLevel = {\n  INFO: 'info',\n  ERROR: 'error',\n};\n\nexport const LogOrder = {\n  DESCENDING: 'desc',\n  ASCENDING: 'asc',\n};\n\nconst logLevels = ['error', 'warn', 'info', 'debug', 'verbose', 'silly'];\n\nexport class LoggerController extends AdaptableController {\n  constructor(adapter, appId, options = { logLevel: 'info' }) {\n    super(adapter, appId, options);\n    let level = 'info';\n    if (options.verbose) {\n      level = 'verbose';\n    }\n    if (options.logLevel) {\n      level = options.logLevel;\n    }\n    const index = logLevels.indexOf(level); // info by default\n    logLevels.forEach((level, levelIndex) => {\n      if (levelIndex > index) {\n        // silence the levels that are > maxIndex\n        this[level] = () => {};\n      }\n    });\n  }\n\n  maskSensitiveUrl(urlString) {\n    const urlObj = url.parse(urlString, true);\n    const query = urlObj.query;\n    let sanitizedQuery = '?';\n\n    for (const key in query) {\n      if (key !== 'password') {\n        // normal value\n        sanitizedQuery += key + '=' + query[key] + '&';\n      } else {\n        // password value, redact it\n        sanitizedQuery += key + '=' + '********' + '&';\n      }\n    }\n\n    // trim last character, ? or &\n    sanitizedQuery = sanitizedQuery.slice(0, -1);\n\n    // return original path name with sanitized params attached\n    return urlObj.pathname + sanitizedQuery;\n  }\n\n  maskSensitive(argArray) {\n    return argArray.map(e => {\n      if (!e) {\n        return e;\n      }\n\n      if (typeof e === 'string') {\n        return e.replace(/(password\".?:.?\")[^\"]*\"/g, '$1********\"');\n      }\n      // else it is an object...\n\n      // check the url\n      if (e.url) {\n        // for strings\n        if (typeof e.url === 'string') {\n          e.url = this.maskSensitiveUrl(e.url);\n        } else if (Array.isArray(e.url)) {\n          // for strings in array\n          e.url = e.url.map(item => {\n            if (typeof item === 'string') {\n              return this.maskSensitiveUrl(item);\n            }\n\n            return item;\n          });\n        }\n      }\n\n      if (e.body) {\n        for (const key of Object.keys(e.body)) {\n          if (key === 'password') {\n            e.body[key] = '********';\n            break;\n          }\n        }\n      }\n\n      if (e.params) {\n        for (const key of Object.keys(e.params)) {\n          if (key === 'password') {\n            e.params[key] = '********';\n            break;\n          }\n        }\n      }\n\n      return e;\n    });\n  }\n\n  log(level, args) {\n    // make the passed in arguments object an array with the spread operator\n    args = this.maskSensitive([...args]);\n    args = [].concat(\n      level,\n      args.map(arg => {\n        if (typeof arg === 'function') {\n          return arg();\n        }\n        return arg;\n      })\n    );\n    this.adapter.log.apply(this.adapter, args);\n  }\n\n  info() {\n    return this.log('info', arguments);\n  }\n\n  error() {\n    return this.log('error', arguments);\n  }\n\n  warn() {\n    return this.log('warn', arguments);\n  }\n\n  verbose() {\n    return this.log('verbose', arguments);\n  }\n\n  debug() {\n    return this.log('debug', arguments);\n  }\n\n  silly() {\n    return this.log('silly', arguments);\n  }\n\n  logRequest({ method, url, headers, body }) {\n    this.verbose(\n      () => {\n        const stringifiedBody = JSON.stringify(body, null, 2);\n        return `REQUEST for [${method}] ${url}: ${stringifiedBody}`;\n      },\n      {\n        method,\n        url,\n        headers,\n        body,\n      }\n    );\n  }\n\n  logResponse({ method, url, result }) {\n    this.verbose(\n      () => {\n        const stringifiedResponse = JSON.stringify(result, null, 2);\n        return `RESPONSE from [${method}] ${url}: ${stringifiedResponse}`;\n      },\n      { result: result }\n    );\n  }\n  // check that date input is valid\n  static validDateTime(date) {\n    if (!date) {\n      return null;\n    }\n    date = new Date(date);\n\n    if (!isNaN(date.getTime())) {\n      return date;\n    }\n\n    return null;\n  }\n\n  truncateLogMessage(string) {\n    if (string && string.length > LOG_STRING_TRUNCATE_LENGTH) {\n      const truncated = string.substring(0, LOG_STRING_TRUNCATE_LENGTH) + truncationMarker;\n      return truncated;\n    }\n\n    return string;\n  }\n\n  static parseOptions(options = {}) {\n    const from =\n      LoggerController.validDateTime(options.from) ||\n      new Date(Date.now() - 7 * MILLISECONDS_IN_A_DAY);\n    const until = LoggerController.validDateTime(options.until) || new Date();\n    const size = Number(options.size) || 10;\n    const order = options.order || LogOrder.DESCENDING;\n    const level = options.level || LogLevel.INFO;\n\n    return {\n      from,\n      until,\n      size,\n      order,\n      level,\n    };\n  }\n\n  // Returns a promise for a {response} object.\n  // query params:\n  // level (optional) Level of logging you want to query for (info || error)\n  // from (optional) Start time for the search. Defaults to 1 week ago.\n  // until (optional) End time for the search. Defaults to current time.\n  // order (optional) Direction of results returned, either \u201Casc\u201D or \u201Cdesc\u201D. Defaults to \u201Cdesc\u201D.\n  // size (optional) Number of rows returned by search. Defaults to 10\n  getLogs(options = {}) {\n    if (!this.adapter) {\n      throw new Parse.Error(Parse.Error.PUSH_MISCONFIGURED, 'Logger adapter is not available');\n    }\n    if (typeof this.adapter.query !== 'function') {\n      throw new Parse.Error(\n        Parse.Error.PUSH_MISCONFIGURED,\n        'Querying logs is not supported with this adapter'\n      );\n    }\n    options = LoggerController.parseOptions(options);\n    return this.adapter.query(options);\n  }\n\n  expectedAdapterType() {\n    return LoggerAdapter;\n  }\n}\n\nexport default LoggerController;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"15b967e16ffe65b7a5bbe7a1ad5911ca29fcd3d8"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1u2jw8m4nd=function(){return actualCoverage;};}return actualCoverage;}cov_1u2jw8m4nd();cov_1u2jw8m4nd().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1u2jw8m4nd().s[1]++;exports.default=exports.LoggerController=exports.LogOrder=exports.LogLevel=void 0;var _node=(cov_1u2jw8m4nd().s[2]++,require("parse/node"));var _AdaptableController=(cov_1u2jw8m4nd().s[3]++,_interopRequireDefault(require("./AdaptableController")));var _LoggerAdapter=(cov_1u2jw8m4nd().s[4]++,require("../Adapters/Logger/LoggerAdapter"));var _url=(cov_1u2jw8m4nd().s[5]++,_interopRequireDefault(require("url")));function _interopRequireDefault(obj){cov_1u2jw8m4nd().f[0]++;cov_1u2jw8m4nd().s[6]++;return(cov_1u2jw8m4nd().b[1][0]++,obj)&&(cov_1u2jw8m4nd().b[1][1]++,obj.__esModule)?(cov_1u2jw8m4nd().b[0][0]++,obj):(cov_1u2jw8m4nd().b[0][1]++,{default:obj});}const MILLISECONDS_IN_A_DAY=(cov_1u2jw8m4nd().s[7]++,24*60*60*1000);const LOG_STRING_TRUNCATE_LENGTH=(cov_1u2jw8m4nd().s[8]++,1000);const truncationMarker=(cov_1u2jw8m4nd().s[9]++,'... (truncated)');const LogLevel=(cov_1u2jw8m4nd().s[10]++,{INFO:'info',ERROR:'error'});cov_1u2jw8m4nd().s[11]++;exports.LogLevel=LogLevel;const LogOrder=(cov_1u2jw8m4nd().s[12]++,{DESCENDING:'desc',ASCENDING:'asc'});cov_1u2jw8m4nd().s[13]++;exports.LogOrder=LogOrder;const logLevels=(cov_1u2jw8m4nd().s[14]++,['error','warn','info','debug','verbose','silly']);class LoggerController extends(_AdaptableController.default){constructor(adapter,appId,options=(cov_1u2jw8m4nd().b[2][0]++,{logLevel:'info'})){cov_1u2jw8m4nd().f[1]++;cov_1u2jw8m4nd().s[15]++;super(adapter,appId,options);let level=(cov_1u2jw8m4nd().s[16]++,'info');cov_1u2jw8m4nd().s[17]++;if(options.verbose){cov_1u2jw8m4nd().b[3][0]++;cov_1u2jw8m4nd().s[18]++;level='verbose';}else{cov_1u2jw8m4nd().b[3][1]++;}cov_1u2jw8m4nd().s[19]++;if(options.logLevel){cov_1u2jw8m4nd().b[4][0]++;cov_1u2jw8m4nd().s[20]++;level=options.logLevel;}else{cov_1u2jw8m4nd().b[4][1]++;}const index=(cov_1u2jw8m4nd().s[21]++,logLevels.indexOf(level));// info by default
cov_1u2jw8m4nd().s[22]++;logLevels.forEach((level,levelIndex)=>{cov_1u2jw8m4nd().f[2]++;cov_1u2jw8m4nd().s[23]++;if(levelIndex>index){cov_1u2jw8m4nd().b[5][0]++;cov_1u2jw8m4nd().s[24]++;// silence the levels that are > maxIndex
this[level]=()=>{cov_1u2jw8m4nd().f[3]++;};}else{cov_1u2jw8m4nd().b[5][1]++;}});}maskSensitiveUrl(urlString){cov_1u2jw8m4nd().f[4]++;const urlObj=(cov_1u2jw8m4nd().s[25]++,_url.default.parse(urlString,true));const query=(cov_1u2jw8m4nd().s[26]++,urlObj.query);let sanitizedQuery=(cov_1u2jw8m4nd().s[27]++,'?');cov_1u2jw8m4nd().s[28]++;for(const key in query){cov_1u2jw8m4nd().s[29]++;if(key!=='password'){cov_1u2jw8m4nd().b[6][0]++;cov_1u2jw8m4nd().s[30]++;// normal value
sanitizedQuery+=key+'='+query[key]+'&';}else{cov_1u2jw8m4nd().b[6][1]++;cov_1u2jw8m4nd().s[31]++;// password value, redact it
sanitizedQuery+=key+'='+'********'+'&';}}// trim last character, ? or &
cov_1u2jw8m4nd().s[32]++;sanitizedQuery=sanitizedQuery.slice(0,-1);// return original path name with sanitized params attached
cov_1u2jw8m4nd().s[33]++;return urlObj.pathname+sanitizedQuery;}maskSensitive(argArray){cov_1u2jw8m4nd().f[5]++;cov_1u2jw8m4nd().s[34]++;return argArray.map(e=>{cov_1u2jw8m4nd().f[6]++;cov_1u2jw8m4nd().s[35]++;if(!e){cov_1u2jw8m4nd().b[7][0]++;cov_1u2jw8m4nd().s[36]++;return e;}else{cov_1u2jw8m4nd().b[7][1]++;}cov_1u2jw8m4nd().s[37]++;if(typeof e==='string'){cov_1u2jw8m4nd().b[8][0]++;cov_1u2jw8m4nd().s[38]++;return e.replace(/(password".?:.?")[^"]*"/g,'$1********"');}else{cov_1u2jw8m4nd().b[8][1]++;}// else it is an object...
// check the url
cov_1u2jw8m4nd().s[39]++;if(e.url){cov_1u2jw8m4nd().b[9][0]++;cov_1u2jw8m4nd().s[40]++;// for strings
if(typeof e.url==='string'){cov_1u2jw8m4nd().b[10][0]++;cov_1u2jw8m4nd().s[41]++;e.url=this.maskSensitiveUrl(e.url);}else{cov_1u2jw8m4nd().b[10][1]++;cov_1u2jw8m4nd().s[42]++;if(Array.isArray(e.url)){cov_1u2jw8m4nd().b[11][0]++;cov_1u2jw8m4nd().s[43]++;// for strings in array
e.url=e.url.map(item=>{cov_1u2jw8m4nd().f[7]++;cov_1u2jw8m4nd().s[44]++;if(typeof item==='string'){cov_1u2jw8m4nd().b[12][0]++;cov_1u2jw8m4nd().s[45]++;return this.maskSensitiveUrl(item);}else{cov_1u2jw8m4nd().b[12][1]++;}cov_1u2jw8m4nd().s[46]++;return item;});}else{cov_1u2jw8m4nd().b[11][1]++;}}}else{cov_1u2jw8m4nd().b[9][1]++;}cov_1u2jw8m4nd().s[47]++;if(e.body){cov_1u2jw8m4nd().b[13][0]++;cov_1u2jw8m4nd().s[48]++;for(const key of Object.keys(e.body)){cov_1u2jw8m4nd().s[49]++;if(key==='password'){cov_1u2jw8m4nd().b[14][0]++;cov_1u2jw8m4nd().s[50]++;e.body[key]='********';cov_1u2jw8m4nd().s[51]++;break;}else{cov_1u2jw8m4nd().b[14][1]++;}}}else{cov_1u2jw8m4nd().b[13][1]++;}cov_1u2jw8m4nd().s[52]++;if(e.params){cov_1u2jw8m4nd().b[15][0]++;cov_1u2jw8m4nd().s[53]++;for(const key of Object.keys(e.params)){cov_1u2jw8m4nd().s[54]++;if(key==='password'){cov_1u2jw8m4nd().b[16][0]++;cov_1u2jw8m4nd().s[55]++;e.params[key]='********';cov_1u2jw8m4nd().s[56]++;break;}else{cov_1u2jw8m4nd().b[16][1]++;}}}else{cov_1u2jw8m4nd().b[15][1]++;}cov_1u2jw8m4nd().s[57]++;return e;});}log(level,args){cov_1u2jw8m4nd().f[8]++;cov_1u2jw8m4nd().s[58]++;// make the passed in arguments object an array with the spread operator
args=this.maskSensitive([...args]);cov_1u2jw8m4nd().s[59]++;args=[].concat(level,args.map(arg=>{cov_1u2jw8m4nd().f[9]++;cov_1u2jw8m4nd().s[60]++;if(typeof arg==='function'){cov_1u2jw8m4nd().b[17][0]++;cov_1u2jw8m4nd().s[61]++;return arg();}else{cov_1u2jw8m4nd().b[17][1]++;}cov_1u2jw8m4nd().s[62]++;return arg;}));cov_1u2jw8m4nd().s[63]++;this.adapter.log.apply(this.adapter,args);}info(){cov_1u2jw8m4nd().f[10]++;cov_1u2jw8m4nd().s[64]++;return this.log('info',arguments);}error(){cov_1u2jw8m4nd().f[11]++;cov_1u2jw8m4nd().s[65]++;return this.log('error',arguments);}warn(){cov_1u2jw8m4nd().f[12]++;cov_1u2jw8m4nd().s[66]++;return this.log('warn',arguments);}verbose(){cov_1u2jw8m4nd().f[13]++;cov_1u2jw8m4nd().s[67]++;return this.log('verbose',arguments);}debug(){cov_1u2jw8m4nd().f[14]++;cov_1u2jw8m4nd().s[68]++;return this.log('debug',arguments);}silly(){cov_1u2jw8m4nd().f[15]++;cov_1u2jw8m4nd().s[69]++;return this.log('silly',arguments);}logRequest({method,url,headers,body}){cov_1u2jw8m4nd().f[16]++;cov_1u2jw8m4nd().s[70]++;this.verbose(()=>{cov_1u2jw8m4nd().f[17]++;const stringifiedBody=(cov_1u2jw8m4nd().s[71]++,JSON.stringify(body,null,2));cov_1u2jw8m4nd().s[72]++;return`REQUEST for [${method}] ${url}: ${stringifiedBody}`;},{method,url,headers,body});}logResponse({method,url,result}){cov_1u2jw8m4nd().f[18]++;cov_1u2jw8m4nd().s[73]++;this.verbose(()=>{cov_1u2jw8m4nd().f[19]++;const stringifiedResponse=(cov_1u2jw8m4nd().s[74]++,JSON.stringify(result,null,2));cov_1u2jw8m4nd().s[75]++;return`RESPONSE from [${method}] ${url}: ${stringifiedResponse}`;},{result:result});}// check that date input is valid
static validDateTime(date){cov_1u2jw8m4nd().f[20]++;cov_1u2jw8m4nd().s[76]++;if(!date){cov_1u2jw8m4nd().b[18][0]++;cov_1u2jw8m4nd().s[77]++;return null;}else{cov_1u2jw8m4nd().b[18][1]++;}cov_1u2jw8m4nd().s[78]++;date=new Date(date);cov_1u2jw8m4nd().s[79]++;if(!isNaN(date.getTime())){cov_1u2jw8m4nd().b[19][0]++;cov_1u2jw8m4nd().s[80]++;return date;}else{cov_1u2jw8m4nd().b[19][1]++;}cov_1u2jw8m4nd().s[81]++;return null;}truncateLogMessage(string){cov_1u2jw8m4nd().f[21]++;cov_1u2jw8m4nd().s[82]++;if((cov_1u2jw8m4nd().b[21][0]++,string)&&(cov_1u2jw8m4nd().b[21][1]++,string.length>LOG_STRING_TRUNCATE_LENGTH)){cov_1u2jw8m4nd().b[20][0]++;const truncated=(cov_1u2jw8m4nd().s[83]++,string.substring(0,LOG_STRING_TRUNCATE_LENGTH)+truncationMarker);cov_1u2jw8m4nd().s[84]++;return truncated;}else{cov_1u2jw8m4nd().b[20][1]++;}cov_1u2jw8m4nd().s[85]++;return string;}static parseOptions(options=(cov_1u2jw8m4nd().b[22][0]++,{})){cov_1u2jw8m4nd().f[22]++;const from=(cov_1u2jw8m4nd().s[86]++,(cov_1u2jw8m4nd().b[23][0]++,LoggerController.validDateTime(options.from))||(cov_1u2jw8m4nd().b[23][1]++,new Date(Date.now()-7*MILLISECONDS_IN_A_DAY)));const until=(cov_1u2jw8m4nd().s[87]++,(cov_1u2jw8m4nd().b[24][0]++,LoggerController.validDateTime(options.until))||(cov_1u2jw8m4nd().b[24][1]++,new Date()));const size=(cov_1u2jw8m4nd().s[88]++,(cov_1u2jw8m4nd().b[25][0]++,Number(options.size))||(cov_1u2jw8m4nd().b[25][1]++,10));const order=(cov_1u2jw8m4nd().s[89]++,(cov_1u2jw8m4nd().b[26][0]++,options.order)||(cov_1u2jw8m4nd().b[26][1]++,LogOrder.DESCENDING));const level=(cov_1u2jw8m4nd().s[90]++,(cov_1u2jw8m4nd().b[27][0]++,options.level)||(cov_1u2jw8m4nd().b[27][1]++,LogLevel.INFO));cov_1u2jw8m4nd().s[91]++;return{from,until,size,order,level};}// Returns a promise for a {response} object.
// query params:
// level (optional) Level of logging you want to query for (info || error)
// from (optional) Start time for the search. Defaults to 1 week ago.
// until (optional) End time for the search. Defaults to current time.
// order (optional) Direction of results returned, either “asc” or “desc”. Defaults to “desc”.
// size (optional) Number of rows returned by search. Defaults to 10
getLogs(options=(cov_1u2jw8m4nd().b[28][0]++,{})){cov_1u2jw8m4nd().f[23]++;cov_1u2jw8m4nd().s[92]++;if(!this.adapter){cov_1u2jw8m4nd().b[29][0]++;cov_1u2jw8m4nd().s[93]++;throw new _node.Parse.Error(_node.Parse.Error.PUSH_MISCONFIGURED,'Logger adapter is not available');}else{cov_1u2jw8m4nd().b[29][1]++;}cov_1u2jw8m4nd().s[94]++;if(typeof this.adapter.query!=='function'){cov_1u2jw8m4nd().b[30][0]++;cov_1u2jw8m4nd().s[95]++;throw new _node.Parse.Error(_node.Parse.Error.PUSH_MISCONFIGURED,'Querying logs is not supported with this adapter');}else{cov_1u2jw8m4nd().b[30][1]++;}cov_1u2jw8m4nd().s[96]++;options=LoggerController.parseOptions(options);cov_1u2jw8m4nd().s[97]++;return this.adapter.query(options);}expectedAdapterType(){cov_1u2jw8m4nd().f[24]++;cov_1u2jw8m4nd().s[98]++;return _LoggerAdapter.LoggerAdapter;}}cov_1u2jw8m4nd().s[99]++;exports.LoggerController=LoggerController;var _default=(cov_1u2jw8m4nd().s[100]++,LoggerController);cov_1u2jw8m4nd().s[101]++;exports.default=_default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db250cm9sbGVycy9Mb2dnZXJDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbIk1JTExJU0VDT05EU19JTl9BX0RBWSIsIkxPR19TVFJJTkdfVFJVTkNBVEVfTEVOR1RIIiwidHJ1bmNhdGlvbk1hcmtlciIsIkxvZ0xldmVsIiwiSU5GTyIsIkVSUk9SIiwiTG9nT3JkZXIiLCJERVNDRU5ESU5HIiwiQVNDRU5ESU5HIiwibG9nTGV2ZWxzIiwiTG9nZ2VyQ29udHJvbGxlciIsIkFkYXB0YWJsZUNvbnRyb2xsZXIiLCJjb25zdHJ1Y3RvciIsImFkYXB0ZXIiLCJhcHBJZCIsIm9wdGlvbnMiLCJsb2dMZXZlbCIsImxldmVsIiwidmVyYm9zZSIsImluZGV4IiwiaW5kZXhPZiIsImZvckVhY2giLCJsZXZlbEluZGV4IiwibWFza1NlbnNpdGl2ZVVybCIsInVybFN0cmluZyIsInVybE9iaiIsInVybCIsInBhcnNlIiwicXVlcnkiLCJzYW5pdGl6ZWRRdWVyeSIsImtleSIsInNsaWNlIiwicGF0aG5hbWUiLCJtYXNrU2Vuc2l0aXZlIiwiYXJnQXJyYXkiLCJtYXAiLCJlIiwicmVwbGFjZSIsIkFycmF5IiwiaXNBcnJheSIsIml0ZW0iLCJib2R5IiwiT2JqZWN0Iiwia2V5cyIsInBhcmFtcyIsImxvZyIsImFyZ3MiLCJjb25jYXQiLCJhcmciLCJhcHBseSIsImluZm8iLCJhcmd1bWVudHMiLCJlcnJvciIsIndhcm4iLCJkZWJ1ZyIsInNpbGx5IiwibG9nUmVxdWVzdCIsIm1ldGhvZCIsImhlYWRlcnMiLCJzdHJpbmdpZmllZEJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwibG9nUmVzcG9uc2UiLCJyZXN1bHQiLCJzdHJpbmdpZmllZFJlc3BvbnNlIiwidmFsaWREYXRlVGltZSIsImRhdGUiLCJEYXRlIiwiaXNOYU4iLCJnZXRUaW1lIiwidHJ1bmNhdGVMb2dNZXNzYWdlIiwic3RyaW5nIiwibGVuZ3RoIiwidHJ1bmNhdGVkIiwic3Vic3RyaW5nIiwicGFyc2VPcHRpb25zIiwiZnJvbSIsIm5vdyIsInVudGlsIiwic2l6ZSIsIk51bWJlciIsIm9yZGVyIiwiZ2V0TG9ncyIsIlBhcnNlIiwiRXJyb3IiLCJQVVNIX01JU0NPTkZJR1VSRUQiLCJleHBlY3RlZEFkYXB0ZXJUeXBlIiwiTG9nZ2VyQWRhcHRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEscUJBQXFCLEdBQUcsS0FBSyxFQUFMLEdBQVUsRUFBVixHQUFlLElBQTdDO0FBQ0EsTUFBTUMsMEJBQTBCLEdBQUcsSUFBbkM7QUFDQSxNQUFNQyxnQkFBZ0IsR0FBRyxpQkFBekI7QUFFTyxNQUFNQyxRQUFRLEdBQUc7QUFDdEJDLEVBQUFBLElBQUksRUFBRSxNQURnQjtBQUV0QkMsRUFBQUEsS0FBSyxFQUFFO0FBRmUsQ0FBakI7O0FBS0EsTUFBTUMsUUFBUSxHQUFHO0FBQ3RCQyxFQUFBQSxVQUFVLEVBQUUsTUFEVTtBQUV0QkMsRUFBQUEsU0FBUyxFQUFFO0FBRlcsQ0FBakI7O0FBS1AsTUFBTUMsU0FBUyxHQUFHLENBQUMsT0FBRCxFQUFVLE1BQVYsRUFBa0IsTUFBbEIsRUFBMEIsT0FBMUIsRUFBbUMsU0FBbkMsRUFBOEMsT0FBOUMsQ0FBbEI7O0FBRU8sTUFBTUMsZ0JBQU4sU0FBK0JDLDRCQUEvQixDQUFtRDtBQUN4REMsRUFBQUEsV0FBVyxDQUFDQyxPQUFELEVBQVVDLEtBQVYsRUFBaUJDLE9BQU8sR0FBRztBQUFFQyxJQUFBQSxRQUFRLEVBQUU7QUFBWixHQUEzQixFQUFpRDtBQUMxRCxVQUFNSCxPQUFOLEVBQWVDLEtBQWYsRUFBc0JDLE9BQXRCO0FBQ0EsUUFBSUUsS0FBSyxHQUFHLE1BQVo7O0FBQ0EsUUFBSUYsT0FBTyxDQUFDRyxPQUFaLEVBQXFCO0FBQ25CRCxNQUFBQSxLQUFLLEdBQUcsU0FBUjtBQUNEOztBQUNELFFBQUlGLE9BQU8sQ0FBQ0MsUUFBWixFQUFzQjtBQUNwQkMsTUFBQUEsS0FBSyxHQUFHRixPQUFPLENBQUND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SztBQUtMaEUsTUFBQUE7QUFMSyxLQUFQO0FBT0QsR0FqTXVELENBbU14RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FpRSxFQUFBQSxPQUFPLENBQUNuRSxPQUFPLEdBQUcsRUFBWCxFQUFlO0FBQ3BCLFFBQUksQ0FBQyxLQUFLRixPQUFWLEVBQW1CO0FBQ2pCLFlBQU0sSUFBSXNFLFlBQU1DLEtBQVYsQ0FBZ0JELFlBQU1DLEtBQU4sQ0FBWUMsa0JBQTVCLEVBQWdELGlDQUFoRCxDQUFOO0FBQ0Q7O0FBQ0QsUUFBSSxPQUFPLEtBQUt4RSxPQUFMLENBQWFlLEtBQXBCLEtBQThCLFVBQWxDLEVBQThDO0FBQzVDLFlBQU0sSUFBSXVELFlBQU1DLEtBQVYsQ0FDSkQsWUFBTUMsS0FBTixDQUFZQyxrQkFEUixFQUVKLGtEQUZJLENBQU47QUFJRDs7QUFDRHRFLElBQUFBLE9BQU8sR0FBR0wsZ0JBQWdCLENBQUNpRSxZQUFqQixDQUE4QjVELE9BQTlCLENBQVY7QUFDQSxXQUFPLEtBQUtGLE9BQUwsQ0FBYWUsS0FBYixDQUFtQmIsT0FBbkIsQ0FBUDtBQUNEOztBQUVEdUUsRUFBQUEsbUJBQW1CLEdBQUc7QUFDcEIsV0FBT0MsNEJBQVA7QUFDRDs7QUExTnVEOzs7ZUE2TjNDN0UsZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXJzZSB9IGZyb20gJ3BhcnNlL25vZGUnO1xuaW1wb3J0IEFkYXB0YWJsZUNvbnRyb2xsZXIgZnJvbSAnLi9BZGFwdGFibGVDb250cm9sbGVyJztcbmltcG9ydCB7IExvZ2dlckFkYXB0ZXIgfSBmcm9tICcuLi9BZGFwdGVycy9Mb2dnZXIvTG9nZ2VyQWRhcHRlcic7XG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XG5cbmNvbnN0IE1JTExJU0VDT05EU19JTl9BX0RBWSA9IDI0ICogNjAgKiA2MCAqIDEwMDA7XG5jb25zdCBMT0dfU1RSSU5HX1RSVU5DQVRFX0xFTkdUSCA9IDEwMDA7XG5jb25zdCB0cnVuY2F0aW9uTWFya2VyID0gJy4uLiAodHJ1bmNhdGVkKSc7XG5cbmV4cG9ydCBjb25zdCBMb2dMZXZlbCA9IHtcbiAgSU5GTzogJ2luZm8nLFxuICBFUlJPUjogJ2Vycm9yJyxcbn07XG5cbmV4cG9ydCBjb25zdCBMb2dPcmRlciA9IHtcbiAgREVTQ0VORElORzogJ2Rlc2MnLFxuICBBU0NFTkRJTkc6ICdhc2MnLFxufTtcblxuY29uc3QgbG9nTGV2ZWxzID0gWydlcnJvcicsICd3YXJuJywgJ2luZm8nLCAnZGVidWcnLCAndmVyYm9zZScsICdzaWxseSddO1xuXG5leHBvcnQgY2xhc3MgTG9nZ2VyQ29udHJvbGxlciBleHRlbmRzIEFkYXB0YWJsZUNvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcihhZGFwdGVyLCBhcHBJZCwgb3B0aW9ucyA9IHsgbG9nTGV2ZWw6ICdpbmZvJyB9KSB7XG4gICAgc3VwZXIoYWRhcHRlciwgYXBwSWQsIG9wdGlvbnMpO1xuICAgIGxldCBsZXZlbCA9ICdpbmZvJztcbiAgICBpZiAob3B0aW9ucy52ZXJib3NlKSB7XG4gICAgICBsZXZlbCA9ICd2ZXJib3NlJztcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMubG9nTGV2ZWwpIHtcbiAgICAgIGxldmVsID0gb3B0aW9ucy5sb2dMZXZlbDtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSBsb2dMZXZlbHMuaW5kZXhPZihsZXZlbCk7IC8vIGluZm8gYnkgZGVmYXVsdFxuICAgIGxvZ0xldmVscy5mb3JFYWNoKChsZXZlbCwgbGV2ZWxJbmRleCkgPT4ge1xuICAgICAgaWYgKGxldmVsSW5kZXggPiBpbmRleCkge1xuICAgICAgICAvLyBzaWxlbmNlIHRoZSBsZXZlbHMgdGhhdCBhcmUgPiBtYXhJbmRleFxuICAgICAgICB0aGlzW2xldmVsXSA9ICgpID0+IHt9O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbWFza1NlbnNpdGl2ZVVybCh1cmxTdHJpbmcpIHtcbiAgICBjb25zdCB1cmxPYmogPSB1cmwucGFyc2UodXJsU3RyaW5nLCB0cnVlKTtcbiAgICBjb25zdCBxdWVyeSA9IHVybE9iai5xdWVyeTtcbiAgICBsZXQgc2FuaXRpemVkUXVlcnkgPSAnPyc7XG5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBxdWVyeSkge1xuICAgICAgaWYgKGtleSAhPT0gJ3Bhc3N3b3JkJykge1xuICAgICAgICAvLyBub3JtYWwgdmFsdWVcbiAgICAgICAgc2FuaXRpemVkUXVlcnkgKz0ga2V5ICsgJz0nICsgcXVlcnlba2V5XSArICcmJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHBhc3N3b3JkIHZhbHVlLCByZWRhY3QgaXRcbiAgICAgICAgc2FuaXRpemVkUXVlcnkgKz0ga2V5ICsgJz0nICsgJyoqKioqKioqJyArICcmJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB0cmltIGxhc3QgY2hhcmFjdGVyLCA/IG9yICZcbiAgICBzYW5pdGl6ZWRRdWVyeSA9IHNhbml0aXplZFF1ZXJ5LnNsaWNlKDAsIC0xKTtcblxuICAgIC8vIHJldHVybiBvcmlnaW5hbCBwYXRoIG5hbWUgd2l0aCBzYW5pdGl6ZWQgcGFyYW1zIGF0dGFjaGVkXG4gICAgcmV0dXJuIHVybE9iai5wYXRobmFtZSArIHNhbml0aXplZFF1ZXJ5O1xuICB9XG5cbiAgbWFza1NlbnNpdGl2ZShhcmdBcnJheSkge1xuICAgIHJldHVybiBhcmdBcnJheS5tYXAoZSA9PiB7XG4gICAgICBpZiAoIWUpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGUucmVwbGFjZSgvKHBhc3N3b3JkXCIuPzouP1wiKVteXCJdKlwiL2csICckMSoqKioqKioqXCInKTtcbiAgICAgIH1cbiAgICAgIC8vIGVsc2UgaXQgaXMgYW4gb2JqZWN0Li4uXG5cbiAgICAgIC8vIGNoZWNrIHRoZSB1cmxcbiAgICAgIGlmIChlLnVybCkge1xuICAgICAgICAvLyBmb3Igc3RyaW5nc1xuICAgICAgICBpZiAodHlwZW9mIGUudXJsID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGUudXJsID0gdGhpcy5tYXNrU2Vuc2l0aXZlVXJsKGUudXJsKTtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGUudXJsKSkge1xuICAgICAgICAgIC8vIGZvciBzdHJpbmdzIGluIGFycmF5XG4gICAgICAgICAgZS51cmwgPSBlLnVybC5tYXAoaXRlbSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLm1hc2tTZW5zaXRpdmVVcmwoaXRlbSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlLmJvZHkpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoZS5ib2R5KSkge1xuICAgICAgICAgIGlmIChrZXkgPT09ICdwYXNzd29yZCcpIHtcbiAgICAgICAgICAgIGUuYm9keVtrZXldID0gJyoqKioqKioqJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZS5wYXJhbXMpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoZS5wYXJhbXMpKSB7XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3Bhc3N3b3JkJykge1xuICAgICAgICAgICAgZS5wYXJhbXNba2V5XSA9ICcqKioqKioqKic7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGU7XG4gICAgfSk7XG4gIH1cblxuICBsb2cobGV2ZWwsIGFyZ3MpIHtcbiAgICAvLyBtYWtlIHRoZSBwYXNzZWQgaW4gYXJndW1lbnRzIG9iamVjdCBhbiBhcnJheSB3aXRoIHRoZSBzcHJlYWQgb3BlcmF0b3JcbiAgICBhcmdzID0gdGhpcy5tYXNrU2Vuc2l0aXZlKFsuLi5hcmdzXSk7XG4gICAgYXJncyA9IFtdLmNvbmNhdChcbiAgICAgIGxldmVsLFxuICAgICAgYXJncy5tYXAoYXJnID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYXJnKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyZztcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLmFkYXB0ZXIubG9nLmFwcGx5KHRoaXMuYWRhcHRlciwgYXJncyk7XG4gIH1cblxuICBpbmZvKCkge1xuICAgIHJldHVybiB0aGlzLmxvZygnaW5mbycsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBlcnJvcigpIHtcbiAgICByZXR1cm4gdGhpcy5sb2coJ2Vycm9yJywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHdhcm4oKSB7XG4gICAgcmV0dXJuIHRoaXMubG9nKCd3YXJuJywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHZlcmJvc2UoKSB7XG4gICAgcmV0dXJuIHRoaXMubG9nKCd2ZXJib3NlJywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGRlYnVnKCkge1xuICAgIHJldHVybiB0aGlzLmxvZygnZGVidWcnLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgc2lsbHkoKSB7XG4gICAgcmV0dXJuIHRoaXMubG9nKCdzaWxseScsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBsb2dSZXF1ZXN0KHsgbWV0aG9kLCB1cmwsIGhlYWRlcnMsIGJvZHkgfSkge1xuICAgIHRoaXMudmVyYm9zZShcbiAgICAgICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3RyaW5naWZpZWRCb2R5ID0gSlNPTi5zdHJpbmdpZnkoYm9keSwgbnVsbCwgMik7XG4gICAgICAgIHJldHVybiBgUkVRVUVTVCBmb3IgWyR7bWV0aG9kfV0gJHt1cmx9OiAke3N0cmluZ2lmaWVkQm9keX1gO1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICB1cmwsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICAgIGJvZHksXG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIGxvZ1Jlc3BvbnNlKHsgbWV0aG9kLCB1cmwsIHJlc3VsdCB9KSB7XG4gICAgdGhpcy52ZXJib3NlKFxuICAgICAgKCkgPT4ge1xuICAgICAgICBjb25zdCBzdHJpbmdpZmllZFJlc3BvbnNlID0gSlNPTi5zdHJpbmdpZnkocmVzdWx0LCBudWxsLCAyKTtcbiAgICAgICAgcmV0dXJuIGBSRVNQT05TRSBmcm9tIFske21ldGhvZH1dICR7dXJsfTogJHtzdHJpbmdpZmllZFJlc3BvbnNlfWA7XG4gICAgICB9LFxuICAgICAgeyByZXN1bHQ6IHJlc3VsdCB9XG4gICAgKTtcbiAgfVxuICAvLyBjaGVjayB0aGF0IGRhdGUgaW5wdXQgaXMgdmFsaWRcbiAgc3RhdGljIHZhbGlkRGF0ZVRpbWUoZGF0ZSkge1xuICAgIGlmICghZGF0ZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlKTtcblxuICAgIGlmICghaXNOYU4oZGF0ZS5nZXRUaW1lKCkpKSB7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHRydW5jYXRlTG9nTWVzc2FnZShzdHJpbmcpIHtcbiAgICBpZiAoc3RyaW5nICYmIHN0cmluZy5sZW5ndGggPiBMT0dfU1RSSU5HX1RSVU5DQVRFX0xFTkdUSCkge1xuICAgICAgY29uc3QgdHJ1bmNhdGVkID0gc3RyaW5nLnN1YnN0cmluZygwLCBMT0dfU1RSSU5HX1RSVU5DQVRFX0xFTkdUSCkgKyB0cnVuY2F0aW9uTWFya2VyO1xuICAgICAgcmV0dXJuIHRydW5jYXRlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5nO1xuICB9XG5cbiAgc3RhdGljIHBhcnNlT3B0aW9ucyhvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBmcm9tID1cbiAgICAgIExvZ2dlckNvbnRyb2xsZXIudmFsaWREYXRlVGltZShvcHRpb25zLmZyb20pIHx8XG4gICAgICBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNyAqIE1JTExJU0VDT05EU19JTl9BX0RBWSk7XG4gICAgY29uc3QgdW50aWwgPSBMb2dnZXJDb250cm9sbGVyLnZhbGlkRGF0ZVRpbWUob3B0aW9ucy51bnRpbCkgfHwgbmV3IERhdGUoKTtcbiAgICBjb25zdCBzaXplID0gTnVtYmVyKG9wdGlvbnMuc2l6ZSkgfHwgMTA7XG4gICAgY29uc3Qgb3JkZXIgPSBvcHRpb25zLm9yZGVyIHx8IExvZ09yZGVyLkRFU0NFTkRJTkc7XG4gICAgY29uc3QgbGV2ZWwgPSBvcHRpb25zLmxldmVsIHx8IExvZ0xldmVsLklORk87XG5cbiAgICByZXR1cm4ge1xuICAgICAgZnJvbSxcbiAgICAgIHVudGlsLFxuICAgICAgc2l6ZSxcbiAgICAgIG9yZGVyLFxuICAgICAgbGV2ZWwsXG4gICAgfTtcbiAgfVxuXG4gIC8vIFJldHVybnMgYSBwcm9taXNlIGZvciBhIHtyZXNwb25zZX0gb2JqZWN0LlxuICAvLyBxdWVyeSBwYXJhbXM6XG4gIC8vIGxldmVsIChvcHRpb25hbCkgTGV2ZWwgb2YgbG9nZ2luZyB5b3Ugd2FudCB0byBxdWVyeSBmb3IgKGluZm8gfHwgZXJyb3IpXG4gIC8vIGZyb20gKG9wdGlvbmFsKSBTdGFydCB0aW1lIGZvciB0aGUgc2VhcmNoLiBEZWZhdWx0cyB0byAxIHdlZWsgYWdvLlxuICAvLyB1bnRpbCAob3B0aW9uYWwpIEVuZCB0aW1lIGZvciB0aGUgc2VhcmNoLiBEZWZhdWx0cyB0byBjdXJyZW50IHRpbWUuXG4gIC8vIG9yZGVyIChvcHRpb25hbCkgRGlyZWN0aW9uIG9mIHJlc3VsdHMgcmV0dXJuZWQsIGVpdGhlciDigJxhc2PigJ0gb3Ig4oCcZGVzY+KAnS4gRGVmYXVsdHMgdG8g4oCcZGVzY+KAnS5cbiAgLy8gc2l6ZSAob3B0aW9uYWwpIE51bWJlciBvZiByb3dzIHJldHVybmVkIGJ5IHNlYXJjaC4gRGVmYXVsdHMgdG8gMTBcbiAgZ2V0TG9ncyhvcHRpb25zID0ge30pIHtcbiAgICBpZiAoIXRoaXMuYWRhcHRlcikge1xuICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLlBVU0hfTUlTQ09ORklHVVJFRCwgJ0xvZ2dlciBhZGFwdGVyIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0aGlzLmFkYXB0ZXIucXVlcnkgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgUGFyc2UuRXJyb3IuUFVTSF9NSVNDT05GSUdVUkVELFxuICAgICAgICAnUXVlcnlpbmcgbG9ncyBpcyBub3Qgc3VwcG9ydGVkIHdpdGggdGhpcyBhZGFwdGVyJ1xuICAgICAgKTtcbiAgICB9XG4gICAgb3B0aW9ucyA9IExvZ2dlckNvbnRyb2xsZXIucGFyc2VPcHRpb25zKG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIucXVlcnkob3B0aW9ucyk7XG4gIH1cblxuICBleHBlY3RlZEFkYXB0ZXJUeXBlKCkge1xuICAgIHJldHVybiBMb2dnZXJBZGFwdGVyO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvZ2dlckNvbnRyb2xsZXI7XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,