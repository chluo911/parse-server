{"version":3,"sources":["../../../src/Security/CheckGroups/CheckGroupServerConfig.js"],"names":["CheckGroupServerConfig","CheckGroup","setName","setChecks","config","Config","get","Parse","applicationId","Check","title","warning","solution","check","masterKey","hasUpperCase","test","hasLowerCase","hasNumbers","hasNonAlphasNumerics","length","security","enableCheckLog","allowClientClassCreation","enforcePrivateUsers","module","exports"],"mappings":";;AAIA;;AACA;;AACA;;AACA;;;;AAPA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA,MAAMA,sBAAN,SAAqCC,mBAArC,CAAgD;AAC9CC,EAAAA,OAAO,GAAG;AACR,WAAO,4BAAP;AACD;;AACDC,EAAAA,SAAS,GAAG;AACV,UAAMC,MAAM,GAAGC,gBAAOC,GAAP,CAAWC,cAAMC,aAAjB,CAAf;;AACA,WAAO,CACL,IAAIC,YAAJ,CAAU;AACRC,MAAAA,KAAK,EAAE,mBADC;AAERC,MAAAA,OAAO,EAAE,gFAFD;AAGRC,MAAAA,QAAQ,EACN,uIAJM;AAKRC,MAAAA,KAAK,EAAE,MAAM;AACX,cAAMC,SAAS,GAAGV,MAAM,CAACU,SAAzB;AACA,cAAMC,YAAY,GAAG,QAAQC,IAAR,CAAaF,SAAb,CAArB;AACA,cAAMG,YAAY,GAAG,QAAQD,IAAR,CAAaF,SAAb,CAArB;AACA,cAAMI,UAAU,GAAG,KAAKF,IAAL,CAAUF,SAAV,CAAnB;AACA,cAAMK,oBAAoB,GAAG,KAAKH,IAAL,CAAUF,SAAV,CAA7B,CALW,CAMX;;AACA,YAAIA,SAAS,CAACM,MAAV,GAAmB,EAAvB,EAA2B;AACzB,gBAAM,CAAN;AACD,SATU,CAUX;;;AACA,YAAIL,YAAY,GAAGE,YAAf,GAA8BC,UAA9B,GAA2CC,oBAA3C,GAAkE,CAAtE,EAAyE;AACvE,gBAAM,CAAN;AACD;AACF;AAnBO,KAAV,CADK,EAsBL,IAAIV,YAAJ,CAAU;AACRC,MAAAA,KAAK,EAAE,uBADC;AAERC,MAAAA,OAAO,EACL,mFAHM;AAIRC,MAAAA,QAAQ,EAAE,wEAJF;AAKRC,MAAAA,KAAK,EAAE,MAAM;AACX,YAAIT,MAAM,CAACiB,QAAP,IAAmBjB,MAAM,CAACiB,QAAP,CAAgBC,cAAvC,EAAuD;AACrD,gBAAM,CAAN;AACD;AACF;AATO,KAAV,CAtBK,EAiCL,IAAIb,YAAJ,CAAU;AACRC,MAAAA,KAAK,EAAE,gCADC;AAERC,MAAAA,OAAO,EACL,yFAHM;AAIRC,MAAAA,QAAQ,EAAE,yEAJF;AAKRC,MAAAA,KAAK,EAAE,MAAM;AACX,YAAIT,MAAM,CAACmB,wBAAP,IAAmCnB,MAAM,CAACmB,wBAAP,IAAmC,IAA1E,EAAgF;AAC9E,gBAAM,CAAN;AACD;AACF;AATO,KAAV,CAjCK,EA4CL,IAAId,YAAJ,CAAU;AACRC,MAAAA,KAAK,EAAE,yCADC;AAERC,MAAAA,OAAO,EACL,kIAHM;AAIRC,MAAAA,QAAQ,EAAE,mEAJF;AAKRC,MAAAA,KAAK,EAAE,MAAM;AACX,YAAI,CAACT,MAAM,CAACoB,mBAAZ,EAAiC;AAC/B,gBAAM,CAAN;AACD;AACF;AATO,KAAV,CA5CK,CAAP;AAwDD;;AA9D6C;;AAiEhDC,MAAM,CAACC,OAAP,GAAiB1B,sBAAjB","sourcesContent":["/**\n * @module SecurityCheck\n */\n\nimport { Check } from '../Check';\nimport CheckGroup from '../CheckGroup';\nimport Config from '../../Config';\nimport Parse from 'parse/node';\n\n/**\n * The security checks group for Parse Server configuration.\n * Checks common Parse Server parameters such as access keys.\n */\nclass CheckGroupServerConfig extends CheckGroup {\n  setName() {\n    return 'Parse Server Configuration';\n  }\n  setChecks() {\n    const config = Config.get(Parse.applicationId);\n    return [\n      new Check({\n        title: 'Secure master key',\n        warning: 'The Parse Server master key is insecure and vulnerable to brute force attacks.',\n        solution:\n          'Choose a longer and/or more complex master key with a combination of upper- and lowercase characters, numbers and special characters.',\n        check: () => {\n          const masterKey = config.masterKey;\n          const hasUpperCase = /[A-Z]/.test(masterKey);\n          const hasLowerCase = /[a-z]/.test(masterKey);\n          const hasNumbers = /\\d/.test(masterKey);\n          const hasNonAlphasNumerics = /\\W/.test(masterKey);\n          // Ensure length\n          if (masterKey.length < 14) {\n            throw 1;\n          }\n          // Ensure at least 3 out of 4 requirements passed\n          if (hasUpperCase + hasLowerCase + hasNumbers + hasNonAlphasNumerics < 3) {\n            throw 1;\n          }\n        },\n      }),\n      new Check({\n        title: 'Security log disabled',\n        warning:\n          'Security checks in logs may expose vulnerabilities to anyone with access to logs.',\n        solution: \"Change Parse Server configuration to 'security.enableCheckLog: false'.\",\n        check: () => {\n          if (config.security && config.security.enableCheckLog) {\n            throw 1;\n          }\n        },\n      }),\n      new Check({\n        title: 'Client class creation disabled',\n        warning:\n          'Attackers are allowed to create new classes without restriction and flood the database.',\n        solution: \"Change Parse Server configuration to 'allowClientClassCreation: false'.\",\n        check: () => {\n          if (config.allowClientClassCreation || config.allowClientClassCreation == null) {\n            throw 1;\n          }\n        },\n      }),\n      new Check({\n        title: 'Users are created without public access',\n        warning:\n          'Users with public read access are exposed to anyone who knows their object IDs, or to anyone who can query the Parse.User class.',\n        solution: \"Change Parse Server configuration to 'enforcePrivateUsers: true'.\",\n        check: () => {\n          if (!config.enforcePrivateUsers) {\n            throw 1;\n          }\n        },\n      }),\n    ];\n  }\n}\n\nmodule.exports = CheckGroupServerConfig;\n"]}