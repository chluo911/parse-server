"use strict";function cov_23ocpr4y7e(){var path="/parse-server/lib/Security/CheckGroups/CheckGroupServerConfig.js";var hash="11061db513f4142ed74928ec43e70618495f13ed";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Security/CheckGroups/CheckGroupServerConfig.js",statementMap:{"0":{start:{line:3,column:13},end:{line:3,column:32}},"1":{start:{line:5,column:18},end:{line:5,column:66}},"2":{start:{line:7,column:14},end:{line:7,column:61}},"3":{start:{line:9,column:12},end:{line:9,column:57}},"4":{start:{line:11,column:39},end:{line:11,column:93}},"5":{start:{line:23,column:4},end:{line:23,column:40}},"6":{start:{line:27,column:19},end:{line:27,column:67}},"7":{start:{line:29,column:4},end:{line:76,column:8}},"8":{start:{line:34,column:26},end:{line:34,column:42}},"9":{start:{line:35,column:29},end:{line:35,column:52}},"10":{start:{line:36,column:29},end:{line:36,column:52}},"11":{start:{line:37,column:27},end:{line:37,column:47}},"12":{start:{line:38,column:37},end:{line:38,column:57}},"13":{start:{line:40,column:8},end:{line:42,column:9}},"14":{start:{line:41,column:10},end:{line:41,column:18}},"15":{start:{line:45,column:8},end:{line:47,column:9}},"16":{start:{line:46,column:10},end:{line:46,column:18}},"17":{start:{line:54,column:8},end:{line:56,column:9}},"18":{start:{line:55,column:10},end:{line:55,column:18}},"19":{start:{line:63,column:8},end:{line:65,column:9}},"20":{start:{line:64,column:10},end:{line:64,column:18}},"21":{start:{line:72,column:8},end:{line:74,column:9}},"22":{start:{line:73,column:10},end:{line:73,column:18}},"23":{start:{line:81,column:0},end:{line:81,column:40}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:11,column:9},end:{line:11,column:31}},loc:{start:{line:11,column:37},end:{line:11,column:95}},line:11},"1":{name:"(anonymous_1)",decl:{start:{line:22,column:2},end:{line:22,column:3}},loc:{start:{line:22,column:12},end:{line:24,column:3}},line:22},"2":{name:"(anonymous_2)",decl:{start:{line:26,column:2},end:{line:26,column:3}},loc:{start:{line:26,column:14},end:{line:77,column:3}},line:26},"3":{name:"(anonymous_3)",decl:{start:{line:33,column:13},end:{line:33,column:14}},loc:{start:{line:33,column:19},end:{line:48,column:7}},line:33},"4":{name:"(anonymous_4)",decl:{start:{line:53,column:13},end:{line:53,column:14}},loc:{start:{line:53,column:19},end:{line:57,column:7}},line:53},"5":{name:"(anonymous_5)",decl:{start:{line:62,column:13},end:{line:62,column:14}},loc:{start:{line:62,column:19},end:{line:66,column:7}},line:62},"6":{name:"(anonymous_6)",decl:{start:{line:71,column:13},end:{line:71,column:14}},loc:{start:{line:71,column:19},end:{line:75,column:7}},line:71}},branchMap:{"0":{loc:{start:{line:11,column:46},end:{line:11,column:92}},type:"cond-expr",locations:[{start:{line:11,column:70},end:{line:11,column:73}},{start:{line:11,column:76},end:{line:11,column:92}}],line:11},"1":{loc:{start:{line:11,column:46},end:{line:11,column:67}},type:"binary-expr",locations:[{start:{line:11,column:46},end:{line:11,column:49}},{start:{line:11,column:53},end:{line:11,column:67}}],line:11},"2":{loc:{start:{line:40,column:8},end:{line:42,column:9}},type:"if",locations:[{start:{line:40,column:8},end:{line:42,column:9}},{start:{line:40,column:8},end:{line:42,column:9}}],line:40},"3":{loc:{start:{line:45,column:8},end:{line:47,column:9}},type:"if",locations:[{start:{line:45,column:8},end:{line:47,column:9}},{start:{line:45,column:8},end:{line:47,column:9}}],line:45},"4":{loc:{start:{line:54,column:8},end:{line:56,column:9}},type:"if",locations:[{start:{line:54,column:8},end:{line:56,column:9}},{start:{line:54,column:8},end:{line:56,column:9}}],line:54},"5":{loc:{start:{line:54,column:12},end:{line:54,column:61}},type:"binary-expr",locations:[{start:{line:54,column:12},end:{line:54,column:27}},{start:{line:54,column:31},end:{line:54,column:61}}],line:54},"6":{loc:{start:{line:63,column:8},end:{line:65,column:9}},type:"if",locations:[{start:{line:63,column:8},end:{line:65,column:9}},{start:{line:63,column:8},end:{line:65,column:9}}],line:63},"7":{loc:{start:{line:63,column:12},end:{line:63,column:86}},type:"binary-expr",locations:[{start:{line:63,column:12},end:{line:63,column:43}},{start:{line:63,column:47},end:{line:63,column:86}}],line:63},"8":{loc:{start:{line:72,column:8},end:{line:74,column:9}},type:"if",locations:[{start:{line:72,column:8},end:{line:74,column:9}},{start:{line:72,column:8},end:{line:74,column:9}}],line:72}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},inputSourceMap:{version:3,sources:["../../../src/Security/CheckGroups/CheckGroupServerConfig.js"],names:["CheckGroupServerConfig","CheckGroup","setName","setChecks","config","Config","get","Parse","applicationId","Check","title","warning","solution","check","masterKey","hasUpperCase","test","hasLowerCase","hasNumbers","hasNonAlphasNumerics","length","security","enableCheckLog","allowClientClassCreation","enforcePrivateUsers","module","exports"],mappings:";;AAIA;;AACA;;AACA;;AACA;;;;AAPA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA,MAAMA,sBAAN,SAAqCC,mBAArC,CAAgD;AAC9CC,EAAAA,OAAO,GAAG;AACR,WAAO,4BAAP;AACD;;AACDC,EAAAA,SAAS,GAAG;AACV,UAAMC,MAAM,GAAGC,gBAAOC,GAAP,CAAWC,cAAMC,aAAjB,CAAf;;AACA,WAAO,CACL,IAAIC,YAAJ,CAAU;AACRC,MAAAA,KAAK,EAAE,mBADC;AAERC,MAAAA,OAAO,EAAE,gFAFD;AAGRC,MAAAA,QAAQ,EACN,uIAJM;AAKRC,MAAAA,KAAK,EAAE,MAAM;AACX,cAAMC,SAAS,GAAGV,MAAM,CAACU,SAAzB;AACA,cAAMC,YAAY,GAAG,QAAQC,IAAR,CAAaF,SAAb,CAArB;AACA,cAAMG,YAAY,GAAG,QAAQD,IAAR,CAAaF,SAAb,CAArB;AACA,cAAMI,UAAU,GAAG,KAAKF,IAAL,CAAUF,SAAV,CAAnB;AACA,cAAMK,oBAAoB,GAAG,KAAKH,IAAL,CAAUF,SAAV,CAA7B,CALW,CAMX;;AACA,YAAIA,SAAS,CAACM,MAAV,GAAmB,EAAvB,EAA2B;AACzB,gBAAM,CAAN;AACD,SATU,CAUX;;;AACA,YAAIL,YAAY,GAAGE,YAAf,GAA8BC,UAA9B,GAA2CC,oBAA3C,GAAkE,CAAtE,EAAyE;AACvE,gBAAM,CAAN;AACD;AACF;AAnBO,KAAV,CADK,EAsBL,IAAIV,YAAJ,CAAU;AACRC,MAAAA,KAAK,EAAE,uBADC;AAERC,MAAAA,OAAO,EACL,mFAHM;AAIRC,MAAAA,QAAQ,EAAE,wEAJF;AAKRC,MAAAA,KAAK,EAAE,MAAM;AACX,YAAIT,MAAM,CAACiB,QAAP,IAAmBjB,MAAM,CAACiB,QAAP,CAAgBC,cAAvC,EAAuD;AACrD,gBAAM,CAAN;AACD;AACF;AATO,KAAV,CAtBK,EAiCL,IAAIb,YAAJ,CAAU;AACRC,MAAAA,KAAK,EAAE,gCADC;AAERC,MAAAA,OAAO,EACL,yFAHM;AAIRC,MAAAA,QAAQ,EAAE,yEAJF;AAKRC,MAAAA,KAAK,EAAE,MAAM;AACX,YAAIT,MAAM,CAACmB,wBAAP,IAAmCnB,MAAM,CAACmB,wBAAP,IAAmC,IAA1E,EAAgF;AAC9E,gBAAM,CAAN;AACD;AACF;AATO,KAAV,CAjCK,EA4CL,IAAId,YAAJ,CAAU;AACRC,MAAAA,KAAK,EAAE,yCADC;AAERC,MAAAA,OAAO,EACL,kIAHM;AAIRC,MAAAA,QAAQ,EAAE,mEAJF;AAKRC,MAAAA,KAAK,EAAE,MAAM;AACX,YAAI,CAACT,MAAM,CAACoB,mBAAZ,EAAiC;AAC/B,gBAAM,CAAN;AACD;AACF;AATO,KAAV,CA5CK,CAAP;AAwDD;;AA9D6C;;AAiEhDC,MAAM,CAACC,OAAP,GAAiB1B,sBAAjB",sourcesContent:["/**\n * @module SecurityCheck\n */\n\nimport { Check } from '../Check';\nimport CheckGroup from '../CheckGroup';\nimport Config from '../../Config';\nimport Parse from 'parse/node';\n\n/**\n * The security checks group for Parse Server configuration.\n * Checks common Parse Server parameters such as access keys.\n */\nclass CheckGroupServerConfig extends CheckGroup {\n  setName() {\n    return 'Parse Server Configuration';\n  }\n  setChecks() {\n    const config = Config.get(Parse.applicationId);\n    return [\n      new Check({\n        title: 'Secure master key',\n        warning: 'The Parse Server master key is insecure and vulnerable to brute force attacks.',\n        solution:\n          'Choose a longer and/or more complex master key with a combination of upper- and lowercase characters, numbers and special characters.',\n        check: () => {\n          const masterKey = config.masterKey;\n          const hasUpperCase = /[A-Z]/.test(masterKey);\n          const hasLowerCase = /[a-z]/.test(masterKey);\n          const hasNumbers = /\\d/.test(masterKey);\n          const hasNonAlphasNumerics = /\\W/.test(masterKey);\n          // Ensure length\n          if (masterKey.length < 14) {\n            throw 1;\n          }\n          // Ensure at least 3 out of 4 requirements passed\n          if (hasUpperCase + hasLowerCase + hasNumbers + hasNonAlphasNumerics < 3) {\n            throw 1;\n          }\n        },\n      }),\n      new Check({\n        title: 'Security log disabled',\n        warning:\n          'Security checks in logs may expose vulnerabilities to anyone with access to logs.',\n        solution: \"Change Parse Server configuration to 'security.enableCheckLog: false'.\",\n        check: () => {\n          if (config.security && config.security.enableCheckLog) {\n            throw 1;\n          }\n        },\n      }),\n      new Check({\n        title: 'Client class creation disabled',\n        warning:\n          'Attackers are allowed to create new classes without restriction and flood the database.',\n        solution: \"Change Parse Server configuration to 'allowClientClassCreation: false'.\",\n        check: () => {\n          if (config.allowClientClassCreation || config.allowClientClassCreation == null) {\n            throw 1;\n          }\n        },\n      }),\n      new Check({\n        title: 'Users are created without public access',\n        warning:\n          'Users with public read access are exposed to anyone who knows their object IDs, or to anyone who can query the Parse.User class.',\n        solution: \"Change Parse Server configuration to 'enforcePrivateUsers: true'.\",\n        check: () => {\n          if (!config.enforcePrivateUsers) {\n            throw 1;\n          }\n        },\n      }),\n    ];\n  }\n}\n\nmodule.exports = CheckGroupServerConfig;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"11061db513f4142ed74928ec43e70618495f13ed"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_23ocpr4y7e=function(){return actualCoverage;};}return actualCoverage;}cov_23ocpr4y7e();var _Check=(cov_23ocpr4y7e().s[0]++,require("../Check"));var _CheckGroup=(cov_23ocpr4y7e().s[1]++,_interopRequireDefault(require("../CheckGroup")));var _Config=(cov_23ocpr4y7e().s[2]++,_interopRequireDefault(require("../../Config")));var _node=(cov_23ocpr4y7e().s[3]++,_interopRequireDefault(require("parse/node")));function _interopRequireDefault(obj){cov_23ocpr4y7e().f[0]++;cov_23ocpr4y7e().s[4]++;return(cov_23ocpr4y7e().b[1][0]++,obj)&&(cov_23ocpr4y7e().b[1][1]++,obj.__esModule)?(cov_23ocpr4y7e().b[0][0]++,obj):(cov_23ocpr4y7e().b[0][1]++,{default:obj});}/**
 * @module SecurityCheck
 */ /**
 * The security checks group for Parse Server configuration.
 * Checks common Parse Server parameters such as access keys.
 */class CheckGroupServerConfig extends(_CheckGroup.default){setName(){cov_23ocpr4y7e().f[1]++;cov_23ocpr4y7e().s[5]++;return'Parse Server Configuration';}setChecks(){cov_23ocpr4y7e().f[2]++;const config=(cov_23ocpr4y7e().s[6]++,_Config.default.get(_node.default.applicationId));cov_23ocpr4y7e().s[7]++;return[new _Check.Check({title:'Secure master key',warning:'The Parse Server master key is insecure and vulnerable to brute force attacks.',solution:'Choose a longer and/or more complex master key with a combination of upper- and lowercase characters, numbers and special characters.',check:()=>{cov_23ocpr4y7e().f[3]++;const masterKey=(cov_23ocpr4y7e().s[8]++,config.masterKey);const hasUpperCase=(cov_23ocpr4y7e().s[9]++,/[A-Z]/.test(masterKey));const hasLowerCase=(cov_23ocpr4y7e().s[10]++,/[a-z]/.test(masterKey));const hasNumbers=(cov_23ocpr4y7e().s[11]++,/\d/.test(masterKey));const hasNonAlphasNumerics=(cov_23ocpr4y7e().s[12]++,/\W/.test(masterKey));// Ensure length
cov_23ocpr4y7e().s[13]++;if(masterKey.length<14){cov_23ocpr4y7e().b[2][0]++;cov_23ocpr4y7e().s[14]++;throw 1;}else{cov_23ocpr4y7e().b[2][1]++;}// Ensure at least 3 out of 4 requirements passed
cov_23ocpr4y7e().s[15]++;if(hasUpperCase+hasLowerCase+hasNumbers+hasNonAlphasNumerics<3){cov_23ocpr4y7e().b[3][0]++;cov_23ocpr4y7e().s[16]++;throw 1;}else{cov_23ocpr4y7e().b[3][1]++;}}}),new _Check.Check({title:'Security log disabled',warning:'Security checks in logs may expose vulnerabilities to anyone with access to logs.',solution:"Change Parse Server configuration to 'security.enableCheckLog: false'.",check:()=>{cov_23ocpr4y7e().f[4]++;cov_23ocpr4y7e().s[17]++;if((cov_23ocpr4y7e().b[5][0]++,config.security)&&(cov_23ocpr4y7e().b[5][1]++,config.security.enableCheckLog)){cov_23ocpr4y7e().b[4][0]++;cov_23ocpr4y7e().s[18]++;throw 1;}else{cov_23ocpr4y7e().b[4][1]++;}}}),new _Check.Check({title:'Client class creation disabled',warning:'Attackers are allowed to create new classes without restriction and flood the database.',solution:"Change Parse Server configuration to 'allowClientClassCreation: false'.",check:()=>{cov_23ocpr4y7e().f[5]++;cov_23ocpr4y7e().s[19]++;if((cov_23ocpr4y7e().b[7][0]++,config.allowClientClassCreation)||(cov_23ocpr4y7e().b[7][1]++,config.allowClientClassCreation==null)){cov_23ocpr4y7e().b[6][0]++;cov_23ocpr4y7e().s[20]++;throw 1;}else{cov_23ocpr4y7e().b[6][1]++;}}}),new _Check.Check({title:'Users are created without public access',warning:'Users with public read access are exposed to anyone who knows their object IDs, or to anyone who can query the Parse.User class.',solution:"Change Parse Server configuration to 'enforcePrivateUsers: true'.",check:()=>{cov_23ocpr4y7e().f[6]++;cov_23ocpr4y7e().s[21]++;if(!config.enforcePrivateUsers){cov_23ocpr4y7e().b[8][0]++;cov_23ocpr4y7e().s[22]++;throw 1;}else{cov_23ocpr4y7e().b[8][1]++;}}})];}}cov_23ocpr4y7e().s[23]++;module.exports=CheckGroupServerConfig;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9TZWN1cml0eS9DaGVja0dyb3Vwcy9DaGVja0dyb3VwU2VydmVyQ29uZmlnLmpzIl0sIm5hbWVzIjpbIkNoZWNrR3JvdXBTZXJ2ZXJDb25maWciLCJDaGVja0dyb3VwIiwic2V0TmFtZSIsInNldENoZWNrcyIsImNvbmZpZyIsIkNvbmZpZyIsImdldCIsIlBhcnNlIiwiYXBwbGljYXRpb25JZCIsIkNoZWNrIiwidGl0bGUiLCJ3YXJuaW5nIiwic29sdXRpb24iLCJjaGVjayIsIm1hc3RlcktleSIsImhhc1VwcGVyQ2FzZSIsInRlc3QiLCJoYXNMb3dlckNhc2UiLCJoYXNOdW1iZXJzIiwiaGFzTm9uQWxwaGFzTnVtZXJpY3MiLCJsZW5ndGgiLCJzZWN1cml0eSIsImVuYWJsZUNoZWNrTG9nIiwiYWxsb3dDbGllbnRDbGFzc0NyZWF0aW9uIiwiZW5mb3JjZVByaXZhdGVVc2VycyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBSUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFQQTtBQUNBO0FBQ0E7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxzQkFBTixTQUFxQ0MsbUJBQXJDLENBQWdEO0FBQzlDQyxFQUFBQSxPQUFPLEdBQUc7QUFDUixXQUFPLDRCQUFQO0FBQ0Q7O0FBQ0RDLEVBQUFBLFNBQVMsR0FBRztBQUNWLFVBQU1DLE1BQU0sR0FBR0MsZ0JBQU9DLEdBQVAsQ0FBV0MsY0FBTUMsYUFBakIsQ0FBZjs7QUFDQSxXQUFPLENBQ0wsSUFBSUMsWUFBSixDQUFVO0FBQ1JDLE1BQUFBLEtBQUssRUFBRSxtQkFEQztBQUVSQyxNQUFBQSxPQUFPLEVBQUUsZ0ZBRkQ7QUFHUkMsTUFBQUEsUUFBUSxFQUNOLHVJQUpNO0FBS1JDLE1BQUFBLEtBQUssRUFBRSxNQUFNO0FBQ1gsY0FBTUMsU0FBUyxHQUFHVixNQUFNLENBQUNVLFNBQXpCO0FBQ0EsY0FBTUMsWUFBWSxHQUFHLFFBQVFDLElBQVIsQ0FBYUYsU0FBYixDQUFyQjtBQUNBLGNBQU1HLFlBQVksR0FBRyxRQUFRRCxJQUFSLENBQWFGLFNBQWIsQ0FBckI7QUFDQSxjQUFNSSxVQUFVLEdBQUcsS0FBS0YsSUFBTCxDQUFVRixTQUFWLENBQW5CO0FBQ0EsY0FBTUssb0JBQW9CLEdBQUcsS0FBS0gsSUFBTCxDQUFVRixTQUFWLENBQTdCLENBTFcsQ0FNWDs7QUFDQSxZQUFJQSxTQUFTLENBQUNNLE1BQVYsR0FBbUIsRUFBdkIsRUFBMkI7QUFDekIsZ0JBQU0sQ0FBTjtBQUNELFNBVFUsQ0FVWDs7O0FBQ0EsWUFBSUwsWUFBWSxHQUFHRSxZQUFmLEdBQThCQyxVQUE5QixHQUEyQ0Msb0JBQTNDLEdBQWtFLENBQXRFLEVBQXlFO0FBQ3ZFLGdCQUFNLENBQU47QUFDRDtBQUNGO0FBbkJPLEtBQVYsQ0FESyxFQXNCTCxJQUFJVixZQUFKLENBQVU7QUFDUkMsTUFBQUEsS0FBSyxFQUFFLHVCQURDO0FBRVJDLE1BQUFBLE9BQU8sRUFDTCxtRkFITTtBQUlSQyxNQUFBQSxRQUFRLEVBQUUsd0VBSkY7QUFLUkMsTUFBQUEsS0FBSyxFQUFFLE1BQU07QUFDWCxZQUFJVCxNQUFNLENBQUNpQixRQUFQLElBQW1CakIsTUFBTSxDQUFDaUIsUUFBUCxDQUFnQkMsY0FBdkMsRUFBdUQ7QUFDckQsZ0JBQU0sQ0FBTjtBQUNEO0FBQ0Y7QUFUTyxLQUFWLENBdEJLLEVBaUNMLElBQUliLFlBQUosQ0FBVTtBQUNSQyxNQUFBQSxLQUFLLEVBQUUsZ0NBREM7QUFFUkMsTUFBQUEsT0FBTyxFQUNMLHlGQUhNO0FBSVJDLE1BQUFBLFFBQVEsRUFBRSx5RUFKRjtBQUtSQyxNQUFBQSxLQUFLLEVBQUUsTUFBTTtBQUNYLFlBQUlULE1BQU0sQ0FBQ21CLHdCQUFQLElBQW1DbkIsTUFBTSxDQUFDbUIsd0JBQVAsSUFBbUMsSUFBMUUsRUFBZ0Y7QUFDOUUsZ0JBQU0sQ0FBTjtBQUNEO0FBQ0Y7QUFUTyxLQUFWLENBakNLLEVBNENMLElBQUlkLFlBQUosQ0FBVTtBQUNSQyxNQUFBQSxLQUFLLEVBQUUseUNBREM7QUFFUkMsTUFBQUEsT0FBTyxFQUNMLGtJQUhNO0FBSVJDLE1BQUFBLFFBQVEsRUFBRSxtRUFKRjtBQUtSQyxNQUFBQSxLQUFLLEVBQUUsTUFBTTtBQUNYLFlBQUksQ0FBQ1QsTUFBTSxDQUFDb0IsbUJBQVosRUFBaUM7QUFDL0IsZ0JBQU0sQ0FBTjtBQUNEO0FBQ0Y7QUFUTyxLQUFWLENBNUNLLENBQVA7QUF3REQ7O0FBOUQ2Qzs7QUFpRWhEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIxQixzQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgU2VjdXJpdHlDaGVja1xuICovXG5cbmltcG9ydCB7IENoZWNrIH0gZnJvbSAnLi4vQ2hlY2snO1xuaW1wb3J0IENoZWNrR3JvdXAgZnJvbSAnLi4vQ2hlY2tHcm91cCc7XG5pbXBvcnQgQ29uZmlnIGZyb20gJy4uLy4uL0NvbmZpZyc7XG5pbXBvcnQgUGFyc2UgZnJvbSAncGFyc2Uvbm9kZSc7XG5cbi8qKlxuICogVGhlIHNlY3VyaXR5IGNoZWNrcyBncm91cCBmb3IgUGFyc2UgU2VydmVyIGNvbmZpZ3VyYXRpb24uXG4gKiBDaGVja3MgY29tbW9uIFBhcnNlIFNlcnZlciBwYXJhbWV0ZXJzIHN1Y2ggYXMgYWNjZXNzIGtleXMuXG4gKi9cbmNsYXNzIENoZWNrR3JvdXBTZXJ2ZXJDb25maWcgZXh0ZW5kcyBDaGVja0dyb3VwIHtcbiAgc2V0TmFtZSgpIHtcbiAgICByZXR1cm4gJ1BhcnNlIFNlcnZlciBDb25maWd1cmF0aW9uJztcbiAgfVxuICBzZXRDaGVja3MoKSB7XG4gICAgY29uc3QgY29uZmlnID0gQ29uZmlnLmdldChQYXJzZS5hcHBsaWNhdGlvbklkKTtcbiAgICByZXR1cm4gW1xuICAgICAgbmV3IENoZWNrKHtcbiAgICAgICAgdGl0bGU6ICdTZWN1cmUgbWFzdGVyIGtleScsXG4gICAgICAgIHdhcm5pbmc6ICdUaGUgUGFyc2UgU2VydmVyIG1hc3RlciBrZXkgaXMgaW5zZWN1cmUgYW5kIHZ1bG5lcmFibGUgdG8gYnJ1dGUgZm9yY2UgYXR0YWNrcy4nLFxuICAgICAgICBzb2x1dGlvbjpcbiAgICAgICAgICAnQ2hvb3NlIGEgbG9uZ2VyIGFuZC9vciBtb3JlIGNvbXBsZXggbWFzdGVyIGtleSB3aXRoIGEgY29tYmluYXRpb24gb2YgdXBwZXItIGFuZCBsb3dlcmNhc2UgY2hhcmFjdGVycywgbnVtYmVycyBhbmQgc3BlY2lhbCBjaGFyYWN0ZXJzLicsXG4gICAgICAgIGNoZWNrOiAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgbWFzdGVyS2V5ID0gY29uZmlnLm1hc3RlcktleTtcbiAgICAgICAgICBjb25zdCBoYXNVcHBlckNhc2UgPSAvW0EtWl0vLnRlc3QobWFzdGVyS2V5KTtcbiAgICAgICAgICBjb25zdCBoYXNMb3dlckNhc2UgPSAvW2Etel0vLnRlc3QobWFzdGVyS2V5KTtcbiAgICAgICAgICBjb25zdCBoYXNOdW1iZXJzID0gL1xcZC8udGVzdChtYXN0ZXJLZXkpO1xuICAgICAgICAgIGNvbnN0IGhhc05vbkFscGhhc051bWVyaWNzID0gL1xcVy8udGVzdChtYXN0ZXJLZXkpO1xuICAgICAgICAgIC8vIEVuc3VyZSBsZW5ndGhcbiAgICAgICAgICBpZiAobWFzdGVyS2V5Lmxlbmd0aCA8IDE0KSB7XG4gICAgICAgICAgICB0aHJvdyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBFbnN1cmUgYXQgbGVhc3QgMyBvdXQgb2YgNCByZXF1aXJlbWVudHMgcGFzc2VkXG4gICAgICAgICAgaWYgKGhhc1VwcGVyQ2FzZSArIGhhc0xvd2VyQ2FzZSArIGhhc051bWJlcnMgKyBoYXNOb25BbHBoYXNOdW1lcmljcyA8IDMpIHtcbiAgICAgICAgICAgIHRocm93IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgICBuZXcgQ2hlY2soe1xuICAgICAgICB0aXRsZTogJ1NlY3VyaXR5IGxvZyBkaXNhYmxlZCcsXG4gICAgICAgIHdhcm5pbmc6XG4gICAgICAgICAgJ1NlY3VyaXR5IGNoZWNrcyBpbiBsb2dzIG1heSBleHBvc2UgdnVsbmVyYWJpbGl0aWVzIHRvIGFueW9uZSB3aXRoIGFjY2VzcyB0byBsb2dzLicsXG4gICAgICAgIHNvbHV0aW9uOiBcIkNoYW5nZSBQYXJzZSBTZXJ2ZXIgY29uZmlndXJhdGlvbiB0byAnc2VjdXJpdHkuZW5hYmxlQ2hlY2tMb2c6IGZhbHNlJy5cIixcbiAgICAgICAgY2hlY2s6ICgpID0+IHtcbiAgICAgICAgICBpZiAoY29uZmlnLnNlY3VyaXR5ICYmIGNvbmZpZy5zZWN1cml0eS5lbmFibGVDaGVja0xvZykge1xuICAgICAgICAgICAgdGhyb3cgMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICAgIG5ldyBDaGVjayh7XG4gICAgICAgIHRpdGxlOiAnQ2xpZW50IGNsYXNzIGNyZWF0aW9uIGRpc2FibGVkJyxcbiAgICAgICAgd2FybmluZzpcbiAgICAgICAgICAnQXR0YWNrZXJzIGFyZSBhbGxvd2VkIHRvIGNyZWF0ZSBuZXcgY2xhc3NlcyB3aXRob3V0IHJlc3RyaWN0aW9uIGFuZCBmbG9vZCB0aGUgZGF0YWJhc2UuJyxcbiAgICAgICAgc29sdXRpb246IFwiQ2hhbmdlIFBhcnNlIFNlcnZlciBjb25maWd1cmF0aW9uIHRvICdhbGxvd0NsaWVudENsYXNzQ3JlYXRpb246IGZhbHNlJy5cIixcbiAgICAgICAgY2hlY2s6ICgpID0+IHtcbiAgICAgICAgICBpZiAoY29uZmlnLmFsbG93Q2xpZW50Q2xhc3NDcmVhdGlvbiB8fCBjb25maWcuYWxsb3dDbGllbnRDbGFzc0NyZWF0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgICBuZXcgQ2hlY2soe1xuICAgICAgICB0aXRsZTogJ1VzZXJzIGFyZSBjcmVhdGVkIHdpdGhvdXQgcHVibGljIGFjY2VzcycsXG4gICAgICAgIHdhcm5pbmc6XG4gICAgICAgICAgJ1VzZXJzIHdpdGggcHVibGljIHJlYWQgYWNjZXNzIGFyZSBleHBvc2VkIHRvIGFueW9uZSB3aG8ga25vd3MgdGhlaXIgb2JqZWN0IElEcywgb3IgdG8gYW55b25lIHdobyBjYW4gcXVlcnkgdGhlIFBhcnNlLlVzZXIgY2xhc3MuJyxcbiAgICAgICAgc29sdXRpb246IFwiQ2hhbmdlIFBhcnNlIFNlcnZlciBjb25maWd1cmF0aW9uIHRvICdlbmZvcmNlUHJpdmF0ZVVzZXJzOiB0cnVlJy5cIixcbiAgICAgICAgY2hlY2s6ICgpID0+IHtcbiAgICAgICAgICBpZiAoIWNvbmZpZy5lbmZvcmNlUHJpdmF0ZVVzZXJzKSB7XG4gICAgICAgICAgICB0aHJvdyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgIF07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDaGVja0dyb3VwU2VydmVyQ29uZmlnO1xuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9TZWN1cml0eS9DaGVja0dyb3Vwcy9DaGVja0dyb3VwU2VydmVyQ29uZmlnLmpzIl0sIm5hbWVzIjpbIkNoZWNrR3JvdXAiLCJzZXROYW1lIiwic2V0Q2hlY2tzIiwiY29uZmlnIiwiQ29uZmlnIiwiUGFyc2UiLCJDaGVjayIsInRpdGxlIiwid2FybmluZyIsInNvbHV0aW9uIiwiY2hlY2siLCJtYXN0ZXJLZXkiLCJoYXNVcHBlckNhc2UiLCJoYXNMb3dlckNhc2UiLCJoYXNOdW1iZXJzIiwiaGFzTm9uQWxwaGFzTnVtZXJpY3MiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiI7MkZBSUEsR0FBQSxDQUFBLE1BQUEsMEJBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBLENBQ0EsR0FBQSxDQUFBLFdBQUEsMEJBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBLENBQUEsQ0FBQSxDQUNBLEdBQUEsQ0FBQSxPQUFBLDBCQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQSxDQUFBLENBQUEsQ0FDQSxHQUFBLENBQUEsS0FBQSwwQkFBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxZQUFBLENBQUEsQ0FBQSxDQUFBLEMsc1BBUEE7QUFDQTtBQUNBLEcsQ0FPQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLEtBQUEsQ0FBQSxzQkFBQSxTQUFxQ0EsV0FBQUEsQ0FBckMsT0FBQSxDQUFnRCxDQUM5Q0MsT0FBTyxFQUFHLGlEQUNSLE1BQUEsNEJBQUEsQ0FDRCxDQUNEQyxTQUFTLEVBQUcseUJBQ1YsS0FBTUMsQ0FBQUEsTUFBTSwwQkFBR0MsT0FBQUEsQ0FBQUEsT0FBQUEsQ0FBQUEsR0FBQUEsQ0FBV0MsS0FBQUEsQ0FBQUEsT0FBQUEsQ0FBMUIsYUFBZUQsQ0FBSCxDQUFaLENBRFUsd0JBRVYsTUFBTyxDQUNMLEdBQUlFLENBQUFBLE1BQUFBLENBQUosS0FBQSxDQUFVLENBQ1JDLEtBQUssQ0FERyxtQkFBQSxDQUVSQyxPQUFPLENBRkMsZ0ZBQUEsQ0FHUkMsUUFBUSxDQUhBLHVJQUFBLENBS1JDLEtBQUssQ0FBRSxJQUFNLHlCQUNYLEtBQU1DLENBQUFBLFNBQVMsMEJBQUdSLE1BQU0sQ0FBeEIsU0FBZSxDQUFmLENBQ0EsS0FBTVMsQ0FBQUEsWUFBWSwwQkFBRyxRQUFBLElBQUEsQ0FBckIsU0FBcUIsQ0FBSCxDQUFsQixDQUNBLEtBQU1DLENBQUFBLFlBQVksMkJBQUcsUUFBQSxJQUFBLENBQXJCLFNBQXFCLENBQUgsQ0FBbEIsQ0FDQSxLQUFNQyxDQUFBQSxVQUFVLDJCQUFHLEtBQUEsSUFBQSxDQUFuQixTQUFtQixDQUFILENBQWhCLENBQ0EsS0FBTUMsQ0FBQUEsb0JBQW9CLDJCQUFHLEtBQUEsSUFBQSxDQUxsQixTQUtrQixDQUFILENBQTFCLENBQ0E7QUFOVyx5QkFPWCxHQUFJSixTQUFTLENBQVRBLE1BQUFBLENBQUosRUFBQSxDQUEyQixxREFDekIsS0FBQSxFQUFBLENBUlMsQ0FPWCxpQ0FHQTtBQVZXLHlCQVdYLEdBQUlDLFlBQVksQ0FBWkEsWUFBQUEsQ0FBQUEsVUFBQUEsQ0FBQUEsb0JBQUFBLENBQUosQ0FBQSxDQUF5RSxxREFDdkUsS0FBQSxFQUFBLENBQ0QsQ0FGRCxpQ0FHRCxDQW5CTyxDQUFWLENBREssQ0FzQkwsR0FBSU4sQ0FBQUEsTUFBQUEsQ0FBSixLQUFBLENBQVUsQ0FDUkMsS0FBSyxDQURHLHVCQUFBLENBRVJDLE9BQU8sQ0FGQyxtRkFBQSxDQUlSQyxRQUFRLENBSkEsd0VBQUEsQ0FLUkMsS0FBSyxDQUFFLElBQU0sa0RBQ1gsR0FBSVAsNEJBQUFBLE1BQU0sQ0FBTkEsUUFBQUEsK0JBQW1CQSxNQUFNLENBQU5BLFFBQUFBLENBQXZCLGNBQUlBLENBQUosQ0FBdUQscURBQ3JELEtBQUEsRUFBQSxDQUNELENBRkQsaUNBR0QsQ0FUTyxDQUFWLENBdEJLLENBaUNMLEdBQUlHLENBQUFBLE1BQUFBLENBQUosS0FBQSxDQUFVLENBQ1JDLEtBQUssQ0FERyxnQ0FBQSxDQUVSQyxPQUFPLENBRkMseUZBQUEsQ0FJUkMsUUFBUSxDQUpBLHlFQUFBLENBS1JDLEtBQUssQ0FBRSxJQUFNLGtEQUNYLEdBQUlQLDRCQUFBQSxNQUFNLENBQU5BLHdCQUFBQSwrQkFBbUNBLE1BQU0sQ0FBTkEsd0JBQUFBLEVBQXZDLElBQUlBLENBQUosQ0FBZ0YscURBQzlFLEtBQUEsRUFBQSxDQUNELENBRkQsaUNBR0QsQ0FUTyxDQUFWLENBakNLLENBNENMLEdBQUlHLENBQUFBLE1BQUFBLENBQUosS0FBQSxDQUFVLENBQ1JDLEtBQUssQ0FERyx5Q0FBQSxDQUVSQyxPQUFPLENBRkMsa0lBQUEsQ0FJUkMsUUFBUSxDQUpBLG1FQUFBLENBS1JDLEtBQUssQ0FBRSxJQUFNLGtEQUNYLEdBQUksQ0FBQ1AsTUFBTSxDQUFYLG1CQUFBLENBQWlDLHFEQUMvQixLQUFBLEVBQUEsQ0FDRCxDQUZELGlDQUdELENBVE8sQ0FBVixDQTVDSyxDQUFQLENBd0RELENBOUQ2QyxDLHlCQWlFaERhLE1BQU0sQ0FBTkEsT0FBQUEsQ0FBQUEsc0JBQUFBLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgU2VjdXJpdHlDaGVja1xuICovXG5cbmltcG9ydCB7IENoZWNrIH0gZnJvbSAnLi4vQ2hlY2snO1xuaW1wb3J0IENoZWNrR3JvdXAgZnJvbSAnLi4vQ2hlY2tHcm91cCc7XG5pbXBvcnQgQ29uZmlnIGZyb20gJy4uLy4uL0NvbmZpZyc7XG5pbXBvcnQgUGFyc2UgZnJvbSAncGFyc2Uvbm9kZSc7XG5cbi8qKlxuICogVGhlIHNlY3VyaXR5IGNoZWNrcyBncm91cCBmb3IgUGFyc2UgU2VydmVyIGNvbmZpZ3VyYXRpb24uXG4gKiBDaGVja3MgY29tbW9uIFBhcnNlIFNlcnZlciBwYXJhbWV0ZXJzIHN1Y2ggYXMgYWNjZXNzIGtleXMuXG4gKi9cbmNsYXNzIENoZWNrR3JvdXBTZXJ2ZXJDb25maWcgZXh0ZW5kcyBDaGVja0dyb3VwIHtcbiAgc2V0TmFtZSgpIHtcbiAgICByZXR1cm4gJ1BhcnNlIFNlcnZlciBDb25maWd1cmF0aW9uJztcbiAgfVxuICBzZXRDaGVja3MoKSB7XG4gICAgY29uc3QgY29uZmlnID0gQ29uZmlnLmdldChQYXJzZS5hcHBsaWNhdGlvbklkKTtcbiAgICByZXR1cm4gW1xuICAgICAgbmV3IENoZWNrKHtcbiAgICAgICAgdGl0bGU6ICdTZWN1cmUgbWFzdGVyIGtleScsXG4gICAgICAgIHdhcm5pbmc6ICdUaGUgUGFyc2UgU2VydmVyIG1hc3RlciBrZXkgaXMgaW5zZWN1cmUgYW5kIHZ1bG5lcmFibGUgdG8gYnJ1dGUgZm9yY2UgYXR0YWNrcy4nLFxuICAgICAgICBzb2x1dGlvbjpcbiAgICAgICAgICAnQ2hvb3NlIGEgbG9uZ2VyIGFuZC9vciBtb3JlIGNvbXBsZXggbWFzdGVyIGtleSB3aXRoIGEgY29tYmluYXRpb24gb2YgdXBwZXItIGFuZCBsb3dlcmNhc2UgY2hhcmFjdGVycywgbnVtYmVycyBhbmQgc3BlY2lhbCBjaGFyYWN0ZXJzLicsXG4gICAgICAgIGNoZWNrOiAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgbWFzdGVyS2V5ID0gY29uZmlnLm1hc3RlcktleTtcbiAgICAgICAgICBjb25zdCBoYXNVcHBlckNhc2UgPSAvW0EtWl0vLnRlc3QobWFzdGVyS2V5KTtcbiAgICAgICAgICBjb25zdCBoYXNMb3dlckNhc2UgPSAvW2Etel0vLnRlc3QobWFzdGVyS2V5KTtcbiAgICAgICAgICBjb25zdCBoYXNOdW1iZXJzID0gL1xcZC8udGVzdChtYXN0ZXJLZXkpO1xuICAgICAgICAgIGNvbnN0IGhhc05vbkFscGhhc051bWVyaWNzID0gL1xcVy8udGVzdChtYXN0ZXJLZXkpO1xuICAgICAgICAgIC8vIEVuc3VyZSBsZW5ndGhcbiAgICAgICAgICBpZiAobWFzdGVyS2V5Lmxlbmd0aCA8IDE0KSB7XG4gICAgICAgICAgICB0aHJvdyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBFbnN1cmUgYXQgbGVhc3QgMyBvdXQgb2YgNCByZXF1aXJlbWVudHMgcGFzc2VkXG4gICAgICAgICAgaWYgKGhhc1VwcGVyQ2FzZSArIGhhc0xvd2VyQ2FzZSArIGhhc051bWJlcnMgKyBoYXNOb25BbHBoYXNOdW1lcmljcyA8IDMpIHtcbiAgICAgICAgICAgIHRocm93IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgICBuZXcgQ2hlY2soe1xuICAgICAgICB0aXRsZTogJ1NlY3VyaXR5IGxvZyBkaXNhYmxlZCcsXG4gICAgICAgIHdhcm5pbmc6XG4gICAgICAgICAgJ1NlY3VyaXR5IGNoZWNrcyBpbiBsb2dzIG1heSBleHBvc2UgdnVsbmVyYWJpbGl0aWVzIHRvIGFueW9uZSB3aXRoIGFjY2VzcyB0byBsb2dzLicsXG4gICAgICAgIHNvbHV0aW9uOiBcIkNoYW5nZSBQYXJzZSBTZXJ2ZXIgY29uZmlndXJhdGlvbiB0byAnc2VjdXJpdHkuZW5hYmxlQ2hlY2tMb2c6IGZhbHNlJy5cIixcbiAgICAgICAgY2hlY2s6ICgpID0+IHtcbiAgICAgICAgICBpZiAoY29uZmlnLnNlY3VyaXR5ICYmIGNvbmZpZy5zZWN1cml0eS5lbmFibGVDaGVja0xvZykge1xuICAgICAgICAgICAgdGhyb3cgMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICAgIG5ldyBDaGVjayh7XG4gICAgICAgIHRpdGxlOiAnQ2xpZW50IGNsYXNzIGNyZWF0aW9uIGRpc2FibGVkJyxcbiAgICAgICAgd2FybmluZzpcbiAgICAgICAgICAnQXR0YWNrZXJzIGFyZSBhbGxvd2VkIHRvIGNyZWF0ZSBuZXcgY2xhc3NlcyB3aXRob3V0IHJlc3RyaWN0aW9uIGFuZCBmbG9vZCB0aGUgZGF0YWJhc2UuJyxcbiAgICAgICAgc29sdXRpb246IFwiQ2hhbmdlIFBhcnNlIFNlcnZlciBjb25maWd1cmF0aW9uIHRvICdhbGxvd0NsaWVudENsYXNzQ3JlYXRpb246IGZhbHNlJy5cIixcbiAgICAgICAgY2hlY2s6ICgpID0+IHtcbiAgICAgICAgICBpZiAoY29uZmlnLmFsbG93Q2xpZW50Q2xhc3NDcmVhdGlvbiB8fCBjb25maWcuYWxsb3dDbGllbnRDbGFzc0NyZWF0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgICBuZXcgQ2hlY2soe1xuICAgICAgICB0aXRsZTogJ1VzZXJzIGFyZSBjcmVhdGVkIHdpdGhvdXQgcHVibGljIGFjY2VzcycsXG4gICAgICAgIHdhcm5pbmc6XG4gICAgICAgICAgJ1VzZXJzIHdpdGggcHVibGljIHJlYWQgYWNjZXNzIGFyZSBleHBvc2VkIHRvIGFueW9uZSB3aG8ga25vd3MgdGhlaXIgb2JqZWN0IElEcywgb3IgdG8gYW55b25lIHdobyBjYW4gcXVlcnkgdGhlIFBhcnNlLlVzZXIgY2xhc3MuJyxcbiAgICAgICAgc29sdXRpb246IFwiQ2hhbmdlIFBhcnNlIFNlcnZlciBjb25maWd1cmF0aW9uIHRvICdlbmZvcmNlUHJpdmF0ZVVzZXJzOiB0cnVlJy5cIixcbiAgICAgICAgY2hlY2s6ICgpID0+IHtcbiAgICAgICAgICBpZiAoIWNvbmZpZy5lbmZvcmNlUHJpdmF0ZVVzZXJzKSB7XG4gICAgICAgICAgICB0aHJvdyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgIF07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDaGVja0dyb3VwU2VydmVyQ29uZmlnO1xuIl19