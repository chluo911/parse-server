"use strict";function cov_4atoiojl7(){var path="/parse-server/lib/Deprecator/Deprecator.js";var hash="3261e7978d7d4c193ad5e006d4a525aecc3ea0a2";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Deprecator/Deprecator.js",statementMap:{"0":{start:{line:3,column:14},end:{line:3,column:58}},"1":{start:{line:5,column:20},end:{line:5,column:69}},"2":{start:{line:7,column:39},end:{line:7,column:93}},"3":{start:{line:22,column:4},end:{line:35,column:5}},"4":{start:{line:24,column:23},end:{line:24,column:43}},"5":{start:{line:25,column:24},end:{line:25,column:45}},"6":{start:{line:26,column:31},end:{line:26,column:59}},"7":{start:{line:28,column:6},end:{line:34,column:7}},"8":{start:{line:29,column:8},end:{line:33,column:11}},"9":{start:{line:66,column:4},end:{line:66,column:36}},"10":{start:{line:75,column:4},end:{line:75,column:33}},"11":{start:{line:92,column:17},end:{line:92,column:102}},"12":{start:{line:93,column:4},end:{line:93,column:45}},"13":{start:{line:95,column:4},end:{line:95,column:33}},"14":{start:{line:120,column:17},end:{line:120,column:57}},"15":{start:{line:121,column:16},end:{line:121,column:46}},"16":{start:{line:122,column:22},end:{line:122,column:125}},"17":{start:{line:124,column:17},end:{line:124,column:73}},"18":{start:{line:125,column:4},end:{line:125,column:96}},"19":{start:{line:126,column:4},end:{line:126,column:106}},"20":{start:{line:127,column:4},end:{line:127,column:45}},"21":{start:{line:129,column:4},end:{line:129,column:33}},"22":{start:{line:134,column:0},end:{line:134,column:28}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:7,column:9},end:{line:7,column:31}},loc:{start:{line:7,column:37},end:{line:7,column:95}},line:7},"1":{name:"(anonymous_1)",decl:{start:{line:20,column:2},end:{line:20,column:3}},loc:{start:{line:20,column:41},end:{line:36,column:3}},line:20},"2":{name:"(anonymous_2)",decl:{start:{line:65,column:2},end:{line:65,column:3}},loc:{start:{line:65,column:40},end:{line:67,column:3}},line:65},"3":{name:"(anonymous_3)",decl:{start:{line:74,column:2},end:{line:74,column:3}},loc:{start:{line:74,column:28},end:{line:76,column:3}},line:74},"4":{name:"(anonymous_4)",decl:{start:{line:87,column:2},end:{line:87,column:3}},loc:{start:{line:90,column:5},end:{line:96,column:3}},line:90},"5":{name:"(anonymous_5)",decl:{start:{line:113,column:2},end:{line:113,column:3}},loc:{start:{line:119,column:5},end:{line:130,column:3}},line:119}},branchMap:{"0":{loc:{start:{line:7,column:46},end:{line:7,column:92}},type:"cond-expr",locations:[{start:{line:7,column:70},end:{line:7,column:73}},{start:{line:7,column:76},end:{line:7,column:92}}],line:7},"1":{loc:{start:{line:7,column:46},end:{line:7,column:67}},type:"binary-expr",locations:[{start:{line:7,column:46},end:{line:7,column:49}},{start:{line:7,column:53},end:{line:7,column:67}}],line:7},"2":{loc:{start:{line:28,column:6},end:{line:34,column:7}},type:"if",locations:[{start:{line:28,column:6},end:{line:34,column:7}},{start:{line:28,column:6},end:{line:34,column:7}}],line:28},"3":{loc:{start:{line:28,column:10},end:{line:28,column:64}},type:"binary-expr",locations:[{start:{line:28,column:10},end:{line:28,column:34}},{start:{line:28,column:38},end:{line:28,column:64}}],line:28},"4":{loc:{start:{line:93,column:14},end:{line:93,column:44}},type:"cond-expr",locations:[{start:{line:93,column:25},end:{line:93,column:39}},{start:{line:93,column:42},end:{line:93,column:44}}],line:93},"5":{loc:{start:{line:120,column:17},end:{line:120,column:57}},type:"cond-expr",locations:[{start:{line:120,column:29},end:{line:120,column:37}},{start:{line:120,column:40},end:{line:120,column:57}}],line:120},"6":{loc:{start:{line:121,column:16},end:{line:121,column:46}},type:"cond-expr",locations:[{start:{line:121,column:28},end:{line:121,column:37}},{start:{line:121,column:40},end:{line:121,column:46}}],line:121},"7":{loc:{start:{line:122,column:22},end:{line:122,column:125}},type:"cond-expr",locations:[{start:{line:122,column:45},end:{line:122,column:54}},{start:{line:122,column:57},end:{line:122,column:125}}],line:122},"8":{loc:{start:{line:122,column:57},end:{line:122,column:125}},type:"cond-expr",locations:[{start:{line:122,column:83},end:{line:122,column:113}},{start:{line:122,column:116},end:{line:122,column:125}}],line:122},"9":{loc:{start:{line:125,column:14},end:{line:125,column:95}},type:"cond-expr",locations:[{start:{line:125,column:29},end:{line:125,column:90}},{start:{line:125,column:93},end:{line:125,column:95}}],line:125},"10":{loc:{start:{line:126,column:14},end:{line:126,column:105}},type:"cond-expr",locations:[{start:{line:126,column:33},end:{line:126,column:100}},{start:{line:126,column:103},end:{line:126,column:105}}],line:126},"11":{loc:{start:{line:127,column:14},end:{line:127,column:44}},type:"cond-expr",locations:[{start:{line:127,column:25},end:{line:127,column:39}},{start:{line:127,column:42},end:{line:127,column:44}}],line:127}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},inputSourceMap:{version:3,sources:["../../src/Deprecator/Deprecator.js"],names:["Deprecator","scanParseServerOptions","options","deprecation","_getDeprecations","solution","optionKey","changeNewDefault","_logOption","logRuntimeDeprecation","_logGeneric","Deprecations","usage","output","logger","warn","envKey","changeNewKey","type","key","keyAction","undefined","length","module","exports"],mappings:";;AAAA;;AACA;;;;AAEA;AACA;AACA;AACA,MAAMA,UAAN,CAAiB;AACf;AACF;AACA;AACA;AACA;AACA;AACA;AAC+B,SAAtBC,sBAAsB,CAACC,OAAD,EAAU;AACrC;AACA,SAAK,MAAMC,WAAX,IAA0BH,UAAU,CAACI,gBAAX,EAA1B,EAAyD;AACvD;AACA,YAAMC,QAAQ,GAAGF,WAAW,CAACE,QAA7B;AACA,YAAMC,SAAS,GAAGH,WAAW,CAACG,SAA9B;AACA,YAAMC,gBAAgB,GAAGJ,WAAW,CAACI,gBAArC,CAJuD,CAMvD;;AACA,UAAIA,gBAAgB,IAAI,IAApB,IAA4BL,OAAO,CAACI,SAAD,CAAP,IAAsB,IAAtD,EAA4D;AAC1DN,QAAAA,UAAU,CAACQ,UAAX,CAAsB;AAAEF,UAAAA,SAAF;AAAaC,UAAAA,gBAAb;AAA+BF,UAAAA;AAA/B,SAAtB;AACD;AACF;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC8B,SAArBI,qBAAqB,CAACP,OAAD,EAAU;AACpCF,IAAAA,UAAU,CAACU,WAAX,CAAuBR,OAAvB;AACD;AAED;AACF;AACA;AACA;;;AACyB,SAAhBE,gBAAgB,GAAG;AACxB,WAAOO,qBAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACoB,SAAXD,WAAW,CAAC;AAAEE,IAAAA,KAAF;AAASP,IAAAA;AAAT,GAAD,EAAsB;AACtC;AACA,QAAIQ,MAAM,GAAI,uBAAsBD,KAAM,yDAA1C;AACAC,IAAAA,MAAM,IAAIR,QAAQ,GAAI,IAAGA,QAAS,EAAhB,GAAoB,EAAtC;;AACAS,oBAAOC,IAAP,CAAYF,MAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACmB,SAAVL,UAAU,CAAC;AAAEF,IAAAA,SAAF;AAAaU,IAAAA,MAAb;AAAqBC,IAAAA,YAArB;AAAmCV,IAAAA,gBAAnC;AAAqDF,IAAAA;AAArD,GAAD,EAAkE;AACjF,UAAMa,IAAI,GAAGZ,SAAS,GAAG,QAAH,GAAc,iBAApC;AACA,UAAMa,GAAG,GAAGb,SAAS,GAAGA,SAAH,GAAeU,MAApC;AACA,UAAMI,SAAS,GACbH,YAAY,IAAI,IAAhB,GACII,SADJ,GAEIJ,YAAY,CAACK,MAAb,GAAsB,CAAtB,GACG,eAAcL,YAAa,GAD9B,GAEG,SALT,CAHiF,CAUjF;;AACA,QAAIJ,MAAM,GAAI,wCAAuCK,IAAK,KAAIC,GAAI,IAAlE;AACAN,IAAAA,MAAM,IAAII,YAAY,GAAI,6BAA4BG,SAAU,uBAA1C,GAAmE,EAAzF;AACAP,IAAAA,MAAM,IAAIN,gBAAgB,GACrB,2BAA0BA,gBAAiB,wBADtB,GAEtB,EAFJ;AAGAM,IAAAA,MAAM,IAAIR,QAAQ,GAAI,IAAGA,QAAS,EAAhB,GAAoB,EAAtC;;AACAS,oBAAOC,IAAP,CAAYF,MAAZ;AACD;;AA5Gc;;AA+GjBU,MAAM,CAACC,OAAP,GAAiBxB,UAAjB",sourcesContent:["import logger from '../logger';\nimport Deprecations from './Deprecations';\n\n/**\n * The deprecator class.\n */\nclass Deprecator {\n  /**\n   * Scans the Parse Server for deprecated options.\n   * This needs to be called before setting option defaults, otherwise it\n   * becomes indistinguishable whether an option has been set manually or\n   * by default.\n   * @param {any} options The Parse Server options.\n   */\n  static scanParseServerOptions(options) {\n    // Scan for deprecations\n    for (const deprecation of Deprecator._getDeprecations()) {\n      // Get deprecation properties\n      const solution = deprecation.solution;\n      const optionKey = deprecation.optionKey;\n      const changeNewDefault = deprecation.changeNewDefault;\n\n      // If default will change, only throw a warning if option is not set\n      if (changeNewDefault != null && options[optionKey] == null) {\n        Deprecator._logOption({ optionKey, changeNewDefault, solution });\n      }\n    }\n  }\n\n  /**\n   * Logs a deprecation warning for a parameter that can only be determined dynamically\n   * during runtime.\n   *\n   * Note: Do not use this to log deprecations of Parse Server options, but add such\n   * deprecations to `Deprecations.js` instead. See the contribution docs for more\n   * details.\n   *\n   * For consistency, the deprecation warning is composed of the following parts:\n   *\n   * > DeprecationWarning: `usage` is deprecated and will be removed in a future version.\n   * `solution`.\n   *\n   * - `usage`: The deprecated usage.\n   * - `solution`: The instruction to resolve this deprecation warning.\n   *\n   * For example:\n   * > DeprecationWarning: `Prefixing field names with dollar sign ($) in aggregation query`\n   * is deprecated and will be removed in a future version. `Reference field names without\n   * dollar sign prefix.`\n   *\n   * @param {Object} options The deprecation options.\n   * @param {String} options.usage The usage that is deprecated.\n   * @param {String} [options.solution] The instruction to resolve this deprecation warning.\n   * Optional. It is recommended to add an instruction for the convenience of the developer.\n   */\n  static logRuntimeDeprecation(options) {\n    Deprecator._logGeneric(options);\n  }\n\n  /**\n   * Returns the deprecation definitions.\n   * @returns {Array<Object>} The deprecations.\n   */\n  static _getDeprecations() {\n    return Deprecations;\n  }\n\n  /**\n   * Logs a generic deprecation warning.\n   *\n   * @param {Object} options The deprecation options.\n   * @param {String} options.usage The usage that is deprecated.\n   * @param {String} [options.solution] The instruction to resolve this deprecation warning.\n   * Optional. It is recommended to add an instruction for the convenience of the developer.\n   */\n  static _logGeneric({ usage, solution }) {\n    // Compose message\n    let output = `DeprecationWarning: ${usage} is deprecated and will be removed in a future version.`;\n    output += solution ? ` ${solution}` : '';\n    logger.warn(output);\n  }\n\n  /**\n   * Logs a deprecation warning for a Parse Server option.\n   *\n   * @param {String} optionKey The option key incl. its path, e.g. `security.enableCheck`.\n   * @param {String} envKey The environment key, e.g. `PARSE_SERVER_SECURITY`.\n   * @param {String} changeNewKey Set the new key name if the current key will be replaced,\n   * or set to an empty string if the current key will be removed without replacement.\n   * @param {String} changeNewDefault Set the new default value if the key's default value\n   * will change in a future version.\n   * @param {String} [solution] The instruction to resolve this deprecation warning. This\n   * message must not include the warning that the parameter is deprecated, that is\n   * automatically added to the message. It should only contain the instruction on how\n   * to resolve this warning.\n   */\n  static _logOption({ optionKey, envKey, changeNewKey, changeNewDefault, solution }) {\n    const type = optionKey ? 'option' : 'environment key';\n    const key = optionKey ? optionKey : envKey;\n    const keyAction =\n      changeNewKey == null\n        ? undefined\n        : changeNewKey.length > 0\n          ? `renamed to '${changeNewKey}'`\n          : `removed`;\n\n    // Compose message\n    let output = `DeprecationWarning: The Parse Server ${type} '${key}' `;\n    output += changeNewKey ? `is deprecated and will be ${keyAction} in a future version.` : '';\n    output += changeNewDefault\n      ? `default will change to '${changeNewDefault}' in a future version.`\n      : '';\n    output += solution ? ` ${solution}` : '';\n    logger.warn(output);\n  }\n}\n\nmodule.exports = Deprecator;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"3261e7978d7d4c193ad5e006d4a525aecc3ea0a2"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_4atoiojl7=function(){return actualCoverage;};}return actualCoverage;}cov_4atoiojl7();var _logger=(cov_4atoiojl7().s[0]++,_interopRequireDefault(require("../logger")));var _Deprecations=(cov_4atoiojl7().s[1]++,_interopRequireDefault(require("./Deprecations")));function _interopRequireDefault(obj){cov_4atoiojl7().f[0]++;cov_4atoiojl7().s[2]++;return(cov_4atoiojl7().b[1][0]++,obj)&&(cov_4atoiojl7().b[1][1]++,obj.__esModule)?(cov_4atoiojl7().b[0][0]++,obj):(cov_4atoiojl7().b[0][1]++,{default:obj});}/**
 * The deprecator class.
 */class Deprecator{/**
   * Scans the Parse Server for deprecated options.
   * This needs to be called before setting option defaults, otherwise it
   * becomes indistinguishable whether an option has been set manually or
   * by default.
   * @param {any} options The Parse Server options.
   */static scanParseServerOptions(options){cov_4atoiojl7().f[1]++;cov_4atoiojl7().s[3]++;// Scan for deprecations
for(const deprecation of Deprecator._getDeprecations()){// Get deprecation properties
const solution=(cov_4atoiojl7().s[4]++,deprecation.solution);const optionKey=(cov_4atoiojl7().s[5]++,deprecation.optionKey);const changeNewDefault=(cov_4atoiojl7().s[6]++,deprecation.changeNewDefault);// If default will change, only throw a warning if option is not set
cov_4atoiojl7().s[7]++;if((cov_4atoiojl7().b[3][0]++,changeNewDefault!=null)&&(cov_4atoiojl7().b[3][1]++,options[optionKey]==null)){cov_4atoiojl7().b[2][0]++;cov_4atoiojl7().s[8]++;Deprecator._logOption({optionKey,changeNewDefault,solution});}else{cov_4atoiojl7().b[2][1]++;}}}/**
   * Logs a deprecation warning for a parameter that can only be determined dynamically
   * during runtime.
   *
   * Note: Do not use this to log deprecations of Parse Server options, but add such
   * deprecations to `Deprecations.js` instead. See the contribution docs for more
   * details.
   *
   * For consistency, the deprecation warning is composed of the following parts:
   *
   * > DeprecationWarning: `usage` is deprecated and will be removed in a future version.
   * `solution`.
   *
   * - `usage`: The deprecated usage.
   * - `solution`: The instruction to resolve this deprecation warning.
   *
   * For example:
   * > DeprecationWarning: `Prefixing field names with dollar sign ($) in aggregation query`
   * is deprecated and will be removed in a future version. `Reference field names without
   * dollar sign prefix.`
   *
   * @param {Object} options The deprecation options.
   * @param {String} options.usage The usage that is deprecated.
   * @param {String} [options.solution] The instruction to resolve this deprecation warning.
   * Optional. It is recommended to add an instruction for the convenience of the developer.
   */static logRuntimeDeprecation(options){cov_4atoiojl7().f[2]++;cov_4atoiojl7().s[9]++;Deprecator._logGeneric(options);}/**
   * Returns the deprecation definitions.
   * @returns {Array<Object>} The deprecations.
   */static _getDeprecations(){cov_4atoiojl7().f[3]++;cov_4atoiojl7().s[10]++;return _Deprecations.default;}/**
   * Logs a generic deprecation warning.
   *
   * @param {Object} options The deprecation options.
   * @param {String} options.usage The usage that is deprecated.
   * @param {String} [options.solution] The instruction to resolve this deprecation warning.
   * Optional. It is recommended to add an instruction for the convenience of the developer.
   */static _logGeneric({usage,solution}){cov_4atoiojl7().f[4]++;// Compose message
let output=(cov_4atoiojl7().s[11]++,`DeprecationWarning: ${usage} is deprecated and will be removed in a future version.`);cov_4atoiojl7().s[12]++;output+=solution?(cov_4atoiojl7().b[4][0]++,` ${solution}`):(cov_4atoiojl7().b[4][1]++,'');cov_4atoiojl7().s[13]++;_logger.default.warn(output);}/**
   * Logs a deprecation warning for a Parse Server option.
   *
   * @param {String} optionKey The option key incl. its path, e.g. `security.enableCheck`.
   * @param {String} envKey The environment key, e.g. `PARSE_SERVER_SECURITY`.
   * @param {String} changeNewKey Set the new key name if the current key will be replaced,
   * or set to an empty string if the current key will be removed without replacement.
   * @param {String} changeNewDefault Set the new default value if the key's default value
   * will change in a future version.
   * @param {String} [solution] The instruction to resolve this deprecation warning. This
   * message must not include the warning that the parameter is deprecated, that is
   * automatically added to the message. It should only contain the instruction on how
   * to resolve this warning.
   */static _logOption({optionKey,envKey,changeNewKey,changeNewDefault,solution}){cov_4atoiojl7().f[5]++;const type=(cov_4atoiojl7().s[14]++,optionKey?(cov_4atoiojl7().b[5][0]++,'option'):(cov_4atoiojl7().b[5][1]++,'environment key'));const key=(cov_4atoiojl7().s[15]++,optionKey?(cov_4atoiojl7().b[6][0]++,optionKey):(cov_4atoiojl7().b[6][1]++,envKey));const keyAction=(cov_4atoiojl7().s[16]++,changeNewKey==null?(cov_4atoiojl7().b[7][0]++,undefined):(cov_4atoiojl7().b[7][1]++,changeNewKey.length>0?(cov_4atoiojl7().b[8][0]++,`renamed to '${changeNewKey}'`):(cov_4atoiojl7().b[8][1]++,`removed`)));// Compose message
let output=(cov_4atoiojl7().s[17]++,`DeprecationWarning: The Parse Server ${type} '${key}' `);cov_4atoiojl7().s[18]++;output+=changeNewKey?(cov_4atoiojl7().b[9][0]++,`is deprecated and will be ${keyAction} in a future version.`):(cov_4atoiojl7().b[9][1]++,'');cov_4atoiojl7().s[19]++;output+=changeNewDefault?(cov_4atoiojl7().b[10][0]++,`default will change to '${changeNewDefault}' in a future version.`):(cov_4atoiojl7().b[10][1]++,'');cov_4atoiojl7().s[20]++;output+=solution?(cov_4atoiojl7().b[11][0]++,` ${solution}`):(cov_4atoiojl7().b[11][1]++,'');cov_4atoiojl7().s[21]++;_logger.default.warn(output);}}cov_4atoiojl7().s[22]++;module.exports=Deprecator;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,