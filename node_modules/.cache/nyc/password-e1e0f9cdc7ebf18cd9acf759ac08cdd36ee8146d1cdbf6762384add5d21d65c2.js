"use strict";// Tools for encrypting and decrypting passwords.
// Basically promise-friendly wrappers for bcrypt.
function cov_25z66gcuzf(){var path="/parse-server/lib/password.js";var hash="f37b5bbde0f423882efd06b9e9e3c82724faf98a";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/password.js",statementMap:{"0":{start:{line:5,column:13},end:{line:5,column:32}},"1":{start:{line:7,column:0},end:{line:16,column:1}},"2":{start:{line:8,column:18},end:{line:8,column:44}},"3":{start:{line:10,column:2},end:{line:13,column:4}},"4":{start:{line:20,column:2},end:{line:20,column:35}},"5":{start:{line:27,column:2},end:{line:29,column:3}},"6":{start:{line:28,column:4},end:{line:28,column:34}},"7":{start:{line:31,column:2},end:{line:31,column:50}},"8":{start:{line:34,column:0},end:{line:37,column:2}}},fnMap:{"0":{name:"hash",decl:{start:{line:19,column:9},end:{line:19,column:13}},loc:{start:{line:19,column:24},end:{line:21,column:1}},line:19},"1":{name:"compare",decl:{start:{line:25,column:9},end:{line:25,column:16}},loc:{start:{line:25,column:43},end:{line:32,column:1}},line:25}},branchMap:{"0":{loc:{start:{line:27,column:2},end:{line:29,column:3}},type:"if",locations:[{start:{line:27,column:2},end:{line:29,column:3}},{start:{line:27,column:2},end:{line:29,column:3}}],line:27},"1":{loc:{start:{line:27,column:6},end:{line:27,column:34}},type:"binary-expr",locations:[{start:{line:27,column:6},end:{line:27,column:15}},{start:{line:27,column:19},end:{line:27,column:34}}],line:27}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,sources:["../src/password.js"],names:["bcrypt","require","_bcrypt","hash","compare","verify","e","password","hashedPassword","Promise","resolve","module","exports"],mappings:";;AAAA;AACA;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AAEA,IAAI;AACF,QAAMC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAAvB;;AACAD,EAAAA,MAAM,GAAG;AACPG,IAAAA,IAAI,EAAED,OAAO,CAACC,IADP;AAEPC,IAAAA,OAAO,EAAEF,OAAO,CAACG;AAFV,GAAT;AAID,CAND,CAME,OAAOC,CAAP,EAAU;AACV;AACD,C,CAED;;;AACA,SAASH,IAAT,CAAcI,QAAd,EAAwB;AACtB,SAAOP,MAAM,CAACG,IAAP,CAAYI,QAAZ,EAAsB,EAAtB,CAAP;AACD,C,CAED;AACA;;;AACA,SAASH,OAAT,CAAiBG,QAAjB,EAA2BC,cAA3B,EAA2C;AACzC;AACA,MAAI,CAACD,QAAD,IAAa,CAACC,cAAlB,EAAkC;AAChC,WAAOC,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;AACD;;AACD,SAAOV,MAAM,CAACI,OAAP,CAAeG,QAAf,EAAyBC,cAAzB,CAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;AACfT,EAAAA,IAAI,EAAEA,IADS;AAEfC,EAAAA,OAAO,EAAEA;AAFM,CAAjB",sourcesContent:["// Tools for encrypting and decrypting passwords.\n// Basically promise-friendly wrappers for bcrypt.\nvar bcrypt = require('bcryptjs');\n\ntry {\n  const _bcrypt = require('@node-rs/bcrypt');\n  bcrypt = {\n    hash: _bcrypt.hash,\n    compare: _bcrypt.verify,\n  };\n} catch (e) {\n  /* */\n}\n\n// Returns a promise for a hashed password string.\nfunction hash(password) {\n  return bcrypt.hash(password, 10);\n}\n\n// Returns a promise for whether this password compares to equal this\n// hashed password.\nfunction compare(password, hashedPassword) {\n  // Cannot bcrypt compare when one is undefined\n  if (!password || !hashedPassword) {\n    return Promise.resolve(false);\n  }\n  return bcrypt.compare(password, hashedPassword);\n}\n\nmodule.exports = {\n  hash: hash,\n  compare: compare,\n};\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f37b5bbde0f423882efd06b9e9e3c82724faf98a"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_25z66gcuzf=function(){return actualCoverage;};}return actualCoverage;}cov_25z66gcuzf();var bcrypt=(cov_25z66gcuzf().s[0]++,require('bcryptjs'));cov_25z66gcuzf().s[1]++;try{const _bcrypt=(cov_25z66gcuzf().s[2]++,require('@node-rs/bcrypt'));cov_25z66gcuzf().s[3]++;bcrypt={hash:_bcrypt.hash,compare:_bcrypt.verify};}catch(e){/* */}// Returns a promise for a hashed password string.
function hash(password){cov_25z66gcuzf().f[0]++;cov_25z66gcuzf().s[4]++;return bcrypt.hash(password,10);}// Returns a promise for whether this password compares to equal this
// hashed password.
function compare(password,hashedPassword){cov_25z66gcuzf().f[1]++;cov_25z66gcuzf().s[5]++;// Cannot bcrypt compare when one is undefined
if((cov_25z66gcuzf().b[1][0]++,!password)||(cov_25z66gcuzf().b[1][1]++,!hashedPassword)){cov_25z66gcuzf().b[0][0]++;cov_25z66gcuzf().s[6]++;return Promise.resolve(false);}else{cov_25z66gcuzf().b[0][1]++;}cov_25z66gcuzf().s[7]++;return bcrypt.compare(password,hashedPassword);}cov_25z66gcuzf().s[8]++;module.exports={hash:hash,compare:compare};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXNzd29yZC5qcyJdLCJuYW1lcyI6WyJiY3J5cHQiLCJyZXF1aXJlIiwiX2JjcnlwdCIsImhhc2giLCJjb21wYXJlIiwidmVyaWZ5IiwiZSIsInBhc3N3b3JkIiwiaGFzaGVkUGFzc3dvcmQiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBLElBQUlBLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBcEI7O0FBRUEsSUFBSTtBQUNGLFFBQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLGlCQUFELENBQXZCOztBQUNBRCxFQUFBQSxNQUFNLEdBQUc7QUFDUEcsSUFBQUEsSUFBSSxFQUFFRCxPQUFPLENBQUNDLElBRFA7QUFFUEMsSUFBQUEsT0FBTyxFQUFFRixPQUFPLENBQUNHO0FBRlYsR0FBVDtBQUlELENBTkQsQ0FNRSxPQUFPQyxDQUFQLEVBQVU7QUFDVjtBQUNELEMsQ0FFRDs7O0FBQ0EsU0FBU0gsSUFBVCxDQUFjSSxRQUFkLEVBQXdCO0FBQ3RCLFNBQU9QLE1BQU0sQ0FBQ0csSUFBUCxDQUFZSSxRQUFaLEVBQXNCLEVBQXRCLENBQVA7QUFDRCxDLENBRUQ7QUFDQTs7O0FBQ0EsU0FBU0gsT0FBVCxDQUFpQkcsUUFBakIsRUFBMkJDLGNBQTNCLEVBQTJDO0FBQ3pDO0FBQ0EsTUFBSSxDQUFDRCxRQUFELElBQWEsQ0FBQ0MsY0FBbEIsRUFBa0M7QUFDaEMsV0FBT0MsT0FBTyxDQUFDQyxPQUFSLENBQWdCLEtBQWhCLENBQVA7QUFDRDs7QUFDRCxTQUFPVixNQUFNLENBQUNJLE9BQVAsQ0FBZUcsUUFBZixFQUF5QkMsY0FBekIsQ0FBUDtBQUNEOztBQUVERyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZlQsRUFBQUEsSUFBSSxFQUFFQSxJQURTO0FBRWZDLEVBQUFBLE9BQU8sRUFBRUE7QUFGTSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRvb2xzIGZvciBlbmNyeXB0aW5nIGFuZCBkZWNyeXB0aW5nIHBhc3N3b3Jkcy5cbi8vIEJhc2ljYWxseSBwcm9taXNlLWZyaWVuZGx5IHdyYXBwZXJzIGZvciBiY3J5cHQuXG52YXIgYmNyeXB0ID0gcmVxdWlyZSgnYmNyeXB0anMnKTtcblxudHJ5IHtcbiAgY29uc3QgX2JjcnlwdCA9IHJlcXVpcmUoJ0Bub2RlLXJzL2JjcnlwdCcpO1xuICBiY3J5cHQgPSB7XG4gICAgaGFzaDogX2JjcnlwdC5oYXNoLFxuICAgIGNvbXBhcmU6IF9iY3J5cHQudmVyaWZ5LFxuICB9O1xufSBjYXRjaCAoZSkge1xuICAvKiAqL1xufVxuXG4vLyBSZXR1cm5zIGEgcHJvbWlzZSBmb3IgYSBoYXNoZWQgcGFzc3dvcmQgc3RyaW5nLlxuZnVuY3Rpb24gaGFzaChwYXNzd29yZCkge1xuICByZXR1cm4gYmNyeXB0Lmhhc2gocGFzc3dvcmQsIDEwKTtcbn1cblxuLy8gUmV0dXJucyBhIHByb21pc2UgZm9yIHdoZXRoZXIgdGhpcyBwYXNzd29yZCBjb21wYXJlcyB0byBlcXVhbCB0aGlzXG4vLyBoYXNoZWQgcGFzc3dvcmQuXG5mdW5jdGlvbiBjb21wYXJlKHBhc3N3b3JkLCBoYXNoZWRQYXNzd29yZCkge1xuICAvLyBDYW5ub3QgYmNyeXB0IGNvbXBhcmUgd2hlbiBvbmUgaXMgdW5kZWZpbmVkXG4gIGlmICghcGFzc3dvcmQgfHwgIWhhc2hlZFBhc3N3b3JkKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG4gIH1cbiAgcmV0dXJuIGJjcnlwdC5jb21wYXJlKHBhc3N3b3JkLCBoYXNoZWRQYXNzd29yZCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBoYXNoOiBoYXNoLFxuICBjb21wYXJlOiBjb21wYXJlLFxufTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXNzd29yZC5qcyJdLCJuYW1lcyI6WyJiY3J5cHQiLCJyZXF1aXJlIiwiX2JjcnlwdCIsImhhc2giLCJjb21wYXJlIiwidmVyaWZ5IiwiUHJvbWlzZSIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6ImFBQUE7QUFDQTtzNkdBYUE7MkZBWkEsR0FBSUEsQ0FBQUEsTUFBTSwwQkFBR0MsT0FBTyxDQUFwQixVQUFvQixDQUFWLENBQVYsQyx3QkFFQSxHQUFJLENBQ0YsS0FBTUMsQ0FBQUEsT0FBTywwQkFBR0QsT0FBTyxDQUF2QixpQkFBdUIsQ0FBVixDQUFiLENBREUsd0JBRUZELE1BQU0sQ0FBRyxDQUNQRyxJQUFJLENBQUVELE9BQU8sQ0FETixJQUFBLENBRVBFLE9BQU8sQ0FBRUYsT0FBTyxDQUFDRyxNQUZWLENBQVRMLENBRkYsQ0FNRSxNQUFBLENBQUEsQ0FBVSxDQUNWLEssQ0FHRjtBQUNBLFFBQUEsQ0FBQSxJQUFBLENBQUEsUUFBQSxDQUF3QixpREFDdEIsTUFBT0EsQ0FBQUEsTUFBTSxDQUFOQSxJQUFBQSxDQUFBQSxRQUFBQSxDQUFQLEVBQU9BLENBQVAsQyxDQUdGO0FBQ0E7QUFDQSxRQUFBLENBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQSxjQUFBLENBQTJDLGlEQUN6QztBQUNBLEdBQUksNkJBQUEsUUFBQSwrQkFBYSxDQUFqQixjQUFJLENBQUosQ0FBa0Msb0RBQ2hDLE1BQU9NLENBQUFBLE9BQU8sQ0FBUEEsT0FBQUEsQ0FBUCxLQUFPQSxDQUFQLENBQ0QsQ0FGRCxpQ0FGeUMsd0JBS3pDLE1BQU9OLENBQUFBLE1BQU0sQ0FBTkEsT0FBQUEsQ0FBQUEsUUFBQUEsQ0FBUCxjQUFPQSxDQUFQLENBQ0QsQyx3QkFFRE8sTUFBTSxDQUFOQSxPQUFBQSxDQUFpQixDQUNmSixJQUFJLENBRFcsSUFBQSxDQUVmQyxPQUFPLENBQUVBLE9BRk0sQ0FBakJHLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUb29scyBmb3IgZW5jcnlwdGluZyBhbmQgZGVjcnlwdGluZyBwYXNzd29yZHMuXG4vLyBCYXNpY2FsbHkgcHJvbWlzZS1mcmllbmRseSB3cmFwcGVycyBmb3IgYmNyeXB0LlxudmFyIGJjcnlwdCA9IHJlcXVpcmUoJ2JjcnlwdGpzJyk7XG5cbnRyeSB7XG4gIGNvbnN0IF9iY3J5cHQgPSByZXF1aXJlKCdAbm9kZS1ycy9iY3J5cHQnKTtcbiAgYmNyeXB0ID0ge1xuICAgIGhhc2g6IF9iY3J5cHQuaGFzaCxcbiAgICBjb21wYXJlOiBfYmNyeXB0LnZlcmlmeSxcbiAgfTtcbn0gY2F0Y2ggKGUpIHtcbiAgLyogKi9cbn1cblxuLy8gUmV0dXJucyBhIHByb21pc2UgZm9yIGEgaGFzaGVkIHBhc3N3b3JkIHN0cmluZy5cbmZ1bmN0aW9uIGhhc2gocGFzc3dvcmQpIHtcbiAgcmV0dXJuIGJjcnlwdC5oYXNoKHBhc3N3b3JkLCAxMCk7XG59XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIGZvciB3aGV0aGVyIHRoaXMgcGFzc3dvcmQgY29tcGFyZXMgdG8gZXF1YWwgdGhpc1xuLy8gaGFzaGVkIHBhc3N3b3JkLlxuZnVuY3Rpb24gY29tcGFyZShwYXNzd29yZCwgaGFzaGVkUGFzc3dvcmQpIHtcbiAgLy8gQ2Fubm90IGJjcnlwdCBjb21wYXJlIHdoZW4gb25lIGlzIHVuZGVmaW5lZFxuICBpZiAoIXBhc3N3b3JkIHx8ICFoYXNoZWRQYXNzd29yZCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICB9XG4gIHJldHVybiBiY3J5cHQuY29tcGFyZShwYXNzd29yZCwgaGFzaGVkUGFzc3dvcmQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaGFzaDogaGFzaCxcbiAgY29tcGFyZTogY29tcGFyZSxcbn07XG4iXX0=