"use strict";function cov_xkppwlddb(){var path="/parse-server/lib/GraphQL/loaders/schemaMutations.js";var hash="2b587335b09ffff544cba90f92fddadbc698eb2c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/GraphQL/loaders/schemaMutations.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:22}},"2":{start:{line:8,column:12},end:{line:8,column:57}},"3":{start:{line:10,column:15},end:{line:10,column:33}},"4":{start:{line:12,column:16},end:{line:12,column:59}},"5":{start:{line:14,column:20},end:{line:14,column:44}},"6":{start:{line:16,column:18},end:{line:16,column:67}},"7":{start:{line:18,column:20},end:{line:18,column:59}},"8":{start:{line:20,column:25},end:{line:20,column:56}},"9":{start:{line:22,column:21},end:{line:22,column:47}},"10":{start:{line:24,column:49},end:{line:24,column:96}},"11":{start:{line:24,column:84},end:{line:24,column:96}},"12":{start:{line:24,column:121},end:{line:24,column:134}},"13":{start:{line:24,column:159},end:{line:24,column:172}},"14":{start:{line:24,column:174},end:{line:24,column:309}},"15":{start:{line:24,column:234},end:{line:24,column:292}},"16":{start:{line:26,column:53},end:{line:26,column:111}},"17":{start:{line:26,column:98},end:{line:26,column:109}},"18":{start:{line:26,column:112},end:{line:26,column:214}},"19":{start:{line:26,column:188},end:{line:26,column:212}},"20":{start:{line:26,column:227},end:{line:26,column:264}},"21":{start:{line:26,column:266},end:{line:26,column:321}},"22":{start:{line:26,column:297},end:{line:26,column:319}},"23":{start:{line:26,column:335},end:{line:26,column:337}},"24":{start:{line:26,column:367},end:{line:26,column:423}},"25":{start:{line:26,column:425},end:{line:26,column:726}},"26":{start:{line:26,column:448},end:{line:26,column:724}},"27":{start:{line:26,column:534},end:{line:26,column:606}},"28":{start:{line:26,column:608},end:{line:26,column:722}},"29":{start:{line:26,column:646},end:{line:26,column:687}},"30":{start:{line:26,column:697},end:{line:26,column:720}},"31":{start:{line:26,column:727},end:{line:26,column:748}},"32":{start:{line:26,column:749},end:{line:26,column:787}},"33":{start:{line:26,column:762},end:{line:26,column:785}},"34":{start:{line:26,column:788},end:{line:26,column:802}},"35":{start:{line:28,column:39},end:{line:28,column:93}},"36":{start:{line:30,column:13},end:{line:178,column:1}},"37":{start:{line:31,column:30},end:{line:77,column:4}},"38":{start:{line:48,column:6},end:{line:75,column:7}},"39":{start:{line:52,column:12},end:{line:52,column:40}},"40":{start:{line:56,column:12},end:{line:56,column:19}},"41":{start:{line:57,column:8},end:{line:57,column:61}},"42":{start:{line:59,column:8},end:{line:61,column:9}},"43":{start:{line:60,column:10},end:{line:60,column:138}},"44":{start:{line:63,column:23},end:{line:65,column:10}},"45":{start:{line:66,column:27},end:{line:66,column:116}},"46":{start:{line:67,column:8},end:{line:72,column:10}},"47":{start:{line:74,column:8},end:{line:74,column:42}},"48":{start:{line:78,column:2},end:{line:78,column:92}},"49":{start:{line:79,column:2},end:{line:79,column:74}},"50":{start:{line:80,column:2},end:{line:80,column:88}},"51":{start:{line:81,column:30},end:{line:128,column:4}},"52":{start:{line:98,column:6},end:{line:126,column:7}},"53":{start:{line:102,column:12},end:{line:102,column:40}},"54":{start:{line:106,column:12},end:{line:106,column:19}},"55":{start:{line:107,column:8},end:{line:107,column:61}},"56":{start:{line:109,column:8},end:{line:111,column:9}},"57":{start:{line:110,column:10},end:{line:110,column:138}},"58":{start:{line:113,column:23},end:{line:115,column:10}},"59":{start:{line:116,column:35},end:{line:116,column:83}},"60":{start:{line:117,column:27},end:{line:117,column:174}},"61":{start:{line:118,column:8},end:{line:123,column:10}},"62":{start:{line:125,column:8},end:{line:125,column:42}},"63":{start:{line:129,column:2},end:{line:129,column:92}},"64":{start:{line:130,column:2},end:{line:130,column:74}},"65":{start:{line:131,column:2},end:{line:131,column:88}},"66":{start:{line:132,column:30},end:{line:174,column:4}},"67":{start:{line:145,column:6},end:{line:172,column:7}},"68":{start:{line:148,column:12},end:{line:148,column:40}},"69":{start:{line:152,column:12},end:{line:152,column:19}},"70":{start:{line:153,column:8},end:{line:153,column:61}},"71":{start:{line:155,column:8},end:{line:157,column:9}},"72":{start:{line:156,column:10},end:{line:156,column:138}},"73":{start:{line:159,column:23},end:{line:161,column:10}},"74":{start:{line:162,column:35},end:{line:162,column:83}},"75":{start:{line:163,column:8},end:{line:163,column:49}},"76":{start:{line:164,column:8},end:{line:169,column:10}},"77":{start:{line:171,column:8},end:{line:171,column:42}},"78":{start:{line:175,column:2},end:{line:175,column:92}},"79":{start:{line:176,column:2},end:{line:176,column:74}},"80":{start:{line:177,column:2},end:{line:177,column:88}},"81":{start:{line:180,column:0},end:{line:180,column:20}}},fnMap:{"0":{name:"_getRequireWildcardCache",decl:{start:{line:24,column:9},end:{line:24,column:33}},loc:{start:{line:24,column:47},end:{line:24,column:311}},line:24},"1":{name:"(anonymous_1)",decl:{start:{line:24,column:209},end:{line:24,column:210}},loc:{start:{line:24,column:232},end:{line:24,column:294}},line:24},"2":{name:"_interopRequireWildcard",decl:{start:{line:26,column:9},end:{line:26,column:32}},loc:{start:{line:26,column:51},end:{line:26,column:804}},line:26},"3":{name:"_interopRequireDefault",decl:{start:{line:28,column:9},end:{line:28,column:31}},loc:{start:{line:28,column:37},end:{line:28,column:95}},line:28},"4":{name:"(anonymous_4)",decl:{start:{line:30,column:13},end:{line:30,column:14}},loc:{start:{line:30,column:35},end:{line:178,column:1}},line:30},"5":{name:"(anonymous_5)",decl:{start:{line:47,column:25},end:{line:47,column:26}},loc:{start:{line:47,column:50},end:{line:76,column:5}},line:47},"6":{name:"(anonymous_6)",decl:{start:{line:97,column:25},end:{line:97,column:26}},loc:{start:{line:97,column:50},end:{line:127,column:5}},line:97},"7":{name:"(anonymous_7)",decl:{start:{line:144,column:25},end:{line:144,column:26}},loc:{start:{line:144,column:50},end:{line:173,column:5}},line:144}},branchMap:{"0":{loc:{start:{line:24,column:49},end:{line:24,column:96}},type:"if",locations:[{start:{line:24,column:49},end:{line:24,column:96}},{start:{line:24,column:49},end:{line:24,column:96}}],line:24},"1":{loc:{start:{line:24,column:241},end:{line:24,column:291}},type:"cond-expr",locations:[{start:{line:24,column:255},end:{line:24,column:271}},{start:{line:24,column:274},end:{line:24,column:291}}],line:24},"2":{loc:{start:{line:26,column:53},end:{line:26,column:111}},type:"if",locations:[{start:{line:26,column:53},end:{line:26,column:111}},{start:{line:26,column:53},end:{line:26,column:111}}],line:26},"3":{loc:{start:{line:26,column:57},end:{line:26,column:94}},type:"binary-expr",locations:[{start:{line:26,column:57},end:{line:26,column:69}},{start:{line:26,column:73},end:{line:26,column:76}},{start:{line:26,column:80},end:{line:26,column:94}}],line:26},"4":{loc:{start:{line:26,column:112},end:{line:26,column:214}},type:"if",locations:[{start:{line:26,column:112},end:{line:26,column:214}},{start:{line:26,column:112},end:{line:26,column:214}}],line:26},"5":{loc:{start:{line:26,column:116},end:{line:26,column:184}},type:"binary-expr",locations:[{start:{line:26,column:116},end:{line:26,column:128}},{start:{line:26,column:132},end:{line:26,column:155}},{start:{line:26,column:159},end:{line:26,column:184}}],line:26},"6":{loc:{start:{line:26,column:266},end:{line:26,column:321}},type:"if",locations:[{start:{line:26,column:266},end:{line:26,column:321}},{start:{line:26,column:266},end:{line:26,column:321}}],line:26},"7":{loc:{start:{line:26,column:270},end:{line:26,column:293}},type:"binary-expr",locations:[{start:{line:26,column:270},end:{line:26,column:275}},{start:{line:26,column:279},end:{line:26,column:293}}],line:26},"8":{loc:{start:{line:26,column:367},end:{line:26,column:423}},type:"binary-expr",locations:[{start:{line:26,column:367},end:{line:26,column:388}},{start:{line:26,column:392},end:{line:26,column:423}}],line:26},"9":{loc:{start:{line:26,column:448},end:{line:26,column:724}},type:"if",locations:[{start:{line:26,column:448},end:{line:26,column:724}},{start:{line:26,column:448},end:{line:26,column:724}}],line:26},"10":{loc:{start:{line:26,column:452},end:{line:26,column:519}},type:"binary-expr",locations:[{start:{line:26,column:452},end:{line:26,column:469}},{start:{line:26,column:473},end:{line:26,column:519}}],line:26},"11":{loc:{start:{line:26,column:534},end:{line:26,column:606}},type:"cond-expr",locations:[{start:{line:26,column:558},end:{line:26,column:599}},{start:{line:26,column:602},end:{line:26,column:606}}],line:26},"12":{loc:{start:{line:26,column:608},end:{line:26,column:722}},type:"if",locations:[{start:{line:26,column:608},end:{line:26,column:722}},{start:{line:26,column:608},end:{line:26,column:722}}],line:26},"13":{loc:{start:{line:26,column:612},end:{line:26,column:642}},type:"binary-expr",locations:[{start:{line:26,column:612},end:{line:26,column:616}},{start:{line:26,column:621},end:{line:26,column:629}},{start:{line:26,column:633},end:{line:26,column:641}}],line:26},"14":{loc:{start:{line:26,column:749},end:{line:26,column:787}},type:"if",locations:[{start:{line:26,column:749},end:{line:26,column:787}},{start:{line:26,column:749},end:{line:26,column:787}}],line:26},"15":{loc:{start:{line:28,column:46},end:{line:28,column:92}},type:"cond-expr",locations:[{start:{line:28,column:70},end:{line:28,column:73}},{start:{line:28,column:76},end:{line:28,column:92}}],line:28},"16":{loc:{start:{line:28,column:46},end:{line:28,column:67}},type:"binary-expr",locations:[{start:{line:28,column:46},end:{line:28,column:49}},{start:{line:28,column:53},end:{line:28,column:67}}],line:28},"17":{loc:{start:{line:59,column:8},end:{line:61,column:9}},type:"if",locations:[{start:{line:59,column:8},end:{line:61,column:9}},{start:{line:59,column:8},end:{line:61,column:9}}],line:59},"18":{loc:{start:{line:109,column:8},end:{line:111,column:9}},type:"if",locations:[{start:{line:109,column:8},end:{line:111,column:9}},{start:{line:109,column:8},end:{line:111,column:9}}],line:109},"19":{loc:{start:{line:155,column:8},end:{line:157,column:9}},type:"if",locations:[{start:{line:155,column:8},end:{line:157,column:9}},{start:{line:155,column:8},end:{line:157,column:9}}],line:155}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0]},inputSourceMap:{version:3,sources:["../../../src/GraphQL/loaders/schemaMutations.js"],names:["load","parseGraphQLSchema","createClassMutation","name","description","inputFields","schemaTypes","CLASS_NAME_ATT","schemaFields","type","SCHEMA_FIELDS_INPUT","outputFields","class","GraphQLNonNull","CLASS","mutateAndGetPayload","args","context","config","auth","isReadOnly","Parse","Error","OPERATION_FORBIDDEN","schema","database","loadSchema","clearCache","parseClass","addClassIfNotExists","className","fields","e","handleError","addGraphQLType","input","ofType","addGraphQLMutation","updateClassMutation","existingParseClass","updateClass","undefined","deleteClassMutation","deleteSchema"],mappings:"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",sourcesContent:["import Parse from 'parse/node';\nimport { GraphQLNonNull } from 'graphql';\nimport deepcopy from 'deepcopy';\nimport { mutationWithClientMutationId } from 'graphql-relay';\nimport * as schemaTypes from './schemaTypes';\nimport { transformToParse, transformToGraphQL } from '../transformers/schemaFields';\nimport { enforceMasterKeyAccess } from '../parseGraphQLUtils';\nimport { getClass } from './schemaQueries';\n\nconst load = parseGraphQLSchema => {\n  const createClassMutation = mutationWithClientMutationId({\n    name: 'CreateClass',\n    description:\n      'The createClass mutation can be used to create the schema for a new object class.',\n    inputFields: {\n      name: schemaTypes.CLASS_NAME_ATT,\n      schemaFields: {\n        description: \"These are the schema's fields of the object class.\",\n        type: schemaTypes.SCHEMA_FIELDS_INPUT,\n      },\n    },\n    outputFields: {\n      class: {\n        description: 'This is the created class.',\n        type: new GraphQLNonNull(schemaTypes.CLASS),\n      },\n    },\n    mutateAndGetPayload: async (args, context) => {\n      try {\n        const { name, schemaFields } = deepcopy(args);\n        const { config, auth } = context;\n\n        enforceMasterKeyAccess(auth);\n\n        if (auth.isReadOnly) {\n          throw new Parse.Error(\n            Parse.Error.OPERATION_FORBIDDEN,\n            \"read-only masterKey isn't allowed to create a schema.\"\n          );\n        }\n\n        const schema = await config.database.loadSchema({ clearCache: true });\n        const parseClass = await schema.addClassIfNotExists(name, transformToParse(schemaFields));\n        return {\n          class: {\n            name: parseClass.className,\n            schemaFields: transformToGraphQL(parseClass.fields),\n          },\n        };\n      } catch (e) {\n        parseGraphQLSchema.handleError(e);\n      }\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(createClassMutation.args.input.type.ofType, true, true);\n  parseGraphQLSchema.addGraphQLType(createClassMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation('createClass', createClassMutation, true, true);\n\n  const updateClassMutation = mutationWithClientMutationId({\n    name: 'UpdateClass',\n    description:\n      'The updateClass mutation can be used to update the schema for an existing object class.',\n    inputFields: {\n      name: schemaTypes.CLASS_NAME_ATT,\n      schemaFields: {\n        description: \"These are the schema's fields of the object class.\",\n        type: schemaTypes.SCHEMA_FIELDS_INPUT,\n      },\n    },\n    outputFields: {\n      class: {\n        description: 'This is the updated class.',\n        type: new GraphQLNonNull(schemaTypes.CLASS),\n      },\n    },\n    mutateAndGetPayload: async (args, context) => {\n      try {\n        const { name, schemaFields } = deepcopy(args);\n        const { config, auth } = context;\n\n        enforceMasterKeyAccess(auth);\n\n        if (auth.isReadOnly) {\n          throw new Parse.Error(\n            Parse.Error.OPERATION_FORBIDDEN,\n            \"read-only masterKey isn't allowed to update a schema.\"\n          );\n        }\n\n        const schema = await config.database.loadSchema({ clearCache: true });\n        const existingParseClass = await getClass(name, schema);\n        const parseClass = await schema.updateClass(\n          name,\n          transformToParse(schemaFields, existingParseClass.fields),\n          undefined,\n          undefined,\n          config.database\n        );\n        return {\n          class: {\n            name: parseClass.className,\n            schemaFields: transformToGraphQL(parseClass.fields),\n          },\n        };\n      } catch (e) {\n        parseGraphQLSchema.handleError(e);\n      }\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(updateClassMutation.args.input.type.ofType, true, true);\n  parseGraphQLSchema.addGraphQLType(updateClassMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation('updateClass', updateClassMutation, true, true);\n\n  const deleteClassMutation = mutationWithClientMutationId({\n    name: 'DeleteClass',\n    description: 'The deleteClass mutation can be used to delete an existing object class.',\n    inputFields: {\n      name: schemaTypes.CLASS_NAME_ATT,\n    },\n    outputFields: {\n      class: {\n        description: 'This is the deleted class.',\n        type: new GraphQLNonNull(schemaTypes.CLASS),\n      },\n    },\n    mutateAndGetPayload: async (args, context) => {\n      try {\n        const { name } = deepcopy(args);\n        const { config, auth } = context;\n\n        enforceMasterKeyAccess(auth);\n\n        if (auth.isReadOnly) {\n          throw new Parse.Error(\n            Parse.Error.OPERATION_FORBIDDEN,\n            \"read-only masterKey isn't allowed to delete a schema.\"\n          );\n        }\n\n        const schema = await config.database.loadSchema({ clearCache: true });\n        const existingParseClass = await getClass(name, schema);\n        await config.database.deleteSchema(name);\n        return {\n          class: {\n            name: existingParseClass.className,\n            schemaFields: transformToGraphQL(existingParseClass.fields),\n          },\n        };\n      } catch (e) {\n        parseGraphQLSchema.handleError(e);\n      }\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(deleteClassMutation.args.input.type.ofType, true, true);\n  parseGraphQLSchema.addGraphQLType(deleteClassMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation('deleteClass', deleteClassMutation, true, true);\n};\n\nexport { load };\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"2b587335b09ffff544cba90f92fddadbc698eb2c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_xkppwlddb=function(){return actualCoverage;};}return actualCoverage;}cov_xkppwlddb();cov_xkppwlddb().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_xkppwlddb().s[1]++;exports.load=void 0;var _node=(cov_xkppwlddb().s[2]++,_interopRequireDefault(require("parse/node")));var _graphql=(cov_xkppwlddb().s[3]++,require("graphql"));var _deepcopy=(cov_xkppwlddb().s[4]++,_interopRequireDefault(require("deepcopy")));var _graphqlRelay=(cov_xkppwlddb().s[5]++,require("graphql-relay"));var schemaTypes=(cov_xkppwlddb().s[6]++,_interopRequireWildcard(require("./schemaTypes")));var _schemaFields=(cov_xkppwlddb().s[7]++,require("../transformers/schemaFields"));var _parseGraphQLUtils=(cov_xkppwlddb().s[8]++,require("../parseGraphQLUtils"));var _schemaQueries=(cov_xkppwlddb().s[9]++,require("./schemaQueries"));function _getRequireWildcardCache(nodeInterop){cov_xkppwlddb().f[0]++;cov_xkppwlddb().s[10]++;if(typeof WeakMap!=="function"){cov_xkppwlddb().b[0][0]++;cov_xkppwlddb().s[11]++;return null;}else{cov_xkppwlddb().b[0][1]++;}var cacheBabelInterop=(cov_xkppwlddb().s[12]++,new WeakMap());var cacheNodeInterop=(cov_xkppwlddb().s[13]++,new WeakMap());cov_xkppwlddb().s[14]++;return(_getRequireWildcardCache=function(nodeInterop){cov_xkppwlddb().f[1]++;cov_xkppwlddb().s[15]++;return nodeInterop?(cov_xkppwlddb().b[1][0]++,cacheNodeInterop):(cov_xkppwlddb().b[1][1]++,cacheBabelInterop);})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){cov_xkppwlddb().f[2]++;cov_xkppwlddb().s[16]++;if((cov_xkppwlddb().b[3][0]++,!nodeInterop)&&(cov_xkppwlddb().b[3][1]++,obj)&&(cov_xkppwlddb().b[3][2]++,obj.__esModule)){cov_xkppwlddb().b[2][0]++;cov_xkppwlddb().s[17]++;return obj;}else{cov_xkppwlddb().b[2][1]++;}cov_xkppwlddb().s[18]++;if((cov_xkppwlddb().b[5][0]++,obj===null)||(cov_xkppwlddb().b[5][1]++,typeof obj!=="object")&&(cov_xkppwlddb().b[5][2]++,typeof obj!=="function")){cov_xkppwlddb().b[4][0]++;cov_xkppwlddb().s[19]++;return{default:obj};}else{cov_xkppwlddb().b[4][1]++;}var cache=(cov_xkppwlddb().s[20]++,_getRequireWildcardCache(nodeInterop));cov_xkppwlddb().s[21]++;if((cov_xkppwlddb().b[7][0]++,cache)&&(cov_xkppwlddb().b[7][1]++,cache.has(obj))){cov_xkppwlddb().b[6][0]++;cov_xkppwlddb().s[22]++;return cache.get(obj);}else{cov_xkppwlddb().b[6][1]++;}var newObj=(cov_xkppwlddb().s[23]++,{});var hasPropertyDescriptor=(cov_xkppwlddb().s[24]++,(cov_xkppwlddb().b[8][0]++,Object.defineProperty)&&(cov_xkppwlddb().b[8][1]++,Object.getOwnPropertyDescriptor));cov_xkppwlddb().s[25]++;for(var key in obj){cov_xkppwlddb().s[26]++;if((cov_xkppwlddb().b[10][0]++,key!=="default")&&(cov_xkppwlddb().b[10][1]++,Object.prototype.hasOwnProperty.call(obj,key))){cov_xkppwlddb().b[9][0]++;var desc=(cov_xkppwlddb().s[27]++,hasPropertyDescriptor?(cov_xkppwlddb().b[11][0]++,Object.getOwnPropertyDescriptor(obj,key)):(cov_xkppwlddb().b[11][1]++,null));cov_xkppwlddb().s[28]++;if((cov_xkppwlddb().b[13][0]++,desc)&&((cov_xkppwlddb().b[13][1]++,desc.get)||(cov_xkppwlddb().b[13][2]++,desc.set))){cov_xkppwlddb().b[12][0]++;cov_xkppwlddb().s[29]++;Object.defineProperty(newObj,key,desc);}else{cov_xkppwlddb().b[12][1]++;cov_xkppwlddb().s[30]++;newObj[key]=obj[key];}}else{cov_xkppwlddb().b[9][1]++;}}cov_xkppwlddb().s[31]++;newObj.default=obj;cov_xkppwlddb().s[32]++;if(cache){cov_xkppwlddb().b[14][0]++;cov_xkppwlddb().s[33]++;cache.set(obj,newObj);}else{cov_xkppwlddb().b[14][1]++;}cov_xkppwlddb().s[34]++;return newObj;}function _interopRequireDefault(obj){cov_xkppwlddb().f[3]++;cov_xkppwlddb().s[35]++;return(cov_xkppwlddb().b[16][0]++,obj)&&(cov_xkppwlddb().b[16][1]++,obj.__esModule)?(cov_xkppwlddb().b[15][0]++,obj):(cov_xkppwlddb().b[15][1]++,{default:obj});}cov_xkppwlddb().s[36]++;const load=parseGraphQLSchema=>{cov_xkppwlddb().f[4]++;const createClassMutation=(cov_xkppwlddb().s[37]++,(0,_graphqlRelay.mutationWithClientMutationId)({name:'CreateClass',description:'The createClass mutation can be used to create the schema for a new object class.',inputFields:{name:schemaTypes.CLASS_NAME_ATT,schemaFields:{description:"These are the schema's fields of the object class.",type:schemaTypes.SCHEMA_FIELDS_INPUT}},outputFields:{class:{description:'This is the created class.',type:new _graphql.GraphQLNonNull(schemaTypes.CLASS)}},mutateAndGetPayload:async(args,context)=>{cov_xkppwlddb().f[5]++;cov_xkppwlddb().s[38]++;try{const{name,schemaFields}=(cov_xkppwlddb().s[39]++,(0,_deepcopy.default)(args));const{config,auth}=(cov_xkppwlddb().s[40]++,context);cov_xkppwlddb().s[41]++;(0,_parseGraphQLUtils.enforceMasterKeyAccess)(auth);cov_xkppwlddb().s[42]++;if(auth.isReadOnly){cov_xkppwlddb().b[17][0]++;cov_xkppwlddb().s[43]++;throw new _node.default.Error(_node.default.Error.OPERATION_FORBIDDEN,"read-only masterKey isn't allowed to create a schema.");}else{cov_xkppwlddb().b[17][1]++;}const schema=(cov_xkppwlddb().s[44]++,await config.database.loadSchema({clearCache:true}));const parseClass=(cov_xkppwlddb().s[45]++,await schema.addClassIfNotExists(name,(0,_schemaFields.transformToParse)(schemaFields)));cov_xkppwlddb().s[46]++;return{class:{name:parseClass.className,schemaFields:(0,_schemaFields.transformToGraphQL)(parseClass.fields)}};}catch(e){cov_xkppwlddb().s[47]++;parseGraphQLSchema.handleError(e);}}}));cov_xkppwlddb().s[48]++;parseGraphQLSchema.addGraphQLType(createClassMutation.args.input.type.ofType,true,true);cov_xkppwlddb().s[49]++;parseGraphQLSchema.addGraphQLType(createClassMutation.type,true,true);cov_xkppwlddb().s[50]++;parseGraphQLSchema.addGraphQLMutation('createClass',createClassMutation,true,true);const updateClassMutation=(cov_xkppwlddb().s[51]++,(0,_graphqlRelay.mutationWithClientMutationId)({name:'UpdateClass',description:'The updateClass mutation can be used to update the schema for an existing object class.',inputFields:{name:schemaTypes.CLASS_NAME_ATT,schemaFields:{description:"These are the schema's fields of the object class.",type:schemaTypes.SCHEMA_FIELDS_INPUT}},outputFields:{class:{description:'This is the updated class.',type:new _graphql.GraphQLNonNull(schemaTypes.CLASS)}},mutateAndGetPayload:async(args,context)=>{cov_xkppwlddb().f[6]++;cov_xkppwlddb().s[52]++;try{const{name,schemaFields}=(cov_xkppwlddb().s[53]++,(0,_deepcopy.default)(args));const{config,auth}=(cov_xkppwlddb().s[54]++,context);cov_xkppwlddb().s[55]++;(0,_parseGraphQLUtils.enforceMasterKeyAccess)(auth);cov_xkppwlddb().s[56]++;if(auth.isReadOnly){cov_xkppwlddb().b[18][0]++;cov_xkppwlddb().s[57]++;throw new _node.default.Error(_node.default.Error.OPERATION_FORBIDDEN,"read-only masterKey isn't allowed to update a schema.");}else{cov_xkppwlddb().b[18][1]++;}const schema=(cov_xkppwlddb().s[58]++,await config.database.loadSchema({clearCache:true}));const existingParseClass=(cov_xkppwlddb().s[59]++,await(0,_schemaQueries.getClass)(name,schema));const parseClass=(cov_xkppwlddb().s[60]++,await schema.updateClass(name,(0,_schemaFields.transformToParse)(schemaFields,existingParseClass.fields),undefined,undefined,config.database));cov_xkppwlddb().s[61]++;return{class:{name:parseClass.className,schemaFields:(0,_schemaFields.transformToGraphQL)(parseClass.fields)}};}catch(e){cov_xkppwlddb().s[62]++;parseGraphQLSchema.handleError(e);}}}));cov_xkppwlddb().s[63]++;parseGraphQLSchema.addGraphQLType(updateClassMutation.args.input.type.ofType,true,true);cov_xkppwlddb().s[64]++;parseGraphQLSchema.addGraphQLType(updateClassMutation.type,true,true);cov_xkppwlddb().s[65]++;parseGraphQLSchema.addGraphQLMutation('updateClass',updateClassMutation,true,true);const deleteClassMutation=(cov_xkppwlddb().s[66]++,(0,_graphqlRelay.mutationWithClientMutationId)({name:'DeleteClass',description:'The deleteClass mutation can be used to delete an existing object class.',inputFields:{name:schemaTypes.CLASS_NAME_ATT},outputFields:{class:{description:'This is the deleted class.',type:new _graphql.GraphQLNonNull(schemaTypes.CLASS)}},mutateAndGetPayload:async(args,context)=>{cov_xkppwlddb().f[7]++;cov_xkppwlddb().s[67]++;try{const{name}=(cov_xkppwlddb().s[68]++,(0,_deepcopy.default)(args));const{config,auth}=(cov_xkppwlddb().s[69]++,context);cov_xkppwlddb().s[70]++;(0,_parseGraphQLUtils.enforceMasterKeyAccess)(auth);cov_xkppwlddb().s[71]++;if(auth.isReadOnly){cov_xkppwlddb().b[19][0]++;cov_xkppwlddb().s[72]++;throw new _node.default.Error(_node.default.Error.OPERATION_FORBIDDEN,"read-only masterKey isn't allowed to delete a schema.");}else{cov_xkppwlddb().b[19][1]++;}const schema=(cov_xkppwlddb().s[73]++,await config.database.loadSchema({clearCache:true}));const existingParseClass=(cov_xkppwlddb().s[74]++,await(0,_schemaQueries.getClass)(name,schema));cov_xkppwlddb().s[75]++;await config.database.deleteSchema(name);cov_xkppwlddb().s[76]++;return{class:{name:existingParseClass.className,schemaFields:(0,_schemaFields.transformToGraphQL)(existingParseClass.fields)}};}catch(e){cov_xkppwlddb().s[77]++;parseGraphQLSchema.handleError(e);}}}));cov_xkppwlddb().s[78]++;parseGraphQLSchema.addGraphQLType(deleteClassMutation.args.input.type.ofType,true,true);cov_xkppwlddb().s[79]++;parseGraphQLSchema.addGraphQLType(deleteClassMutation.type,true,true);cov_xkppwlddb().s[80]++;parseGraphQLSchema.addGraphQLMutation('deleteClass',deleteClassMutation,true,true);};cov_xkppwlddb().s[81]++;exports.load=load;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,