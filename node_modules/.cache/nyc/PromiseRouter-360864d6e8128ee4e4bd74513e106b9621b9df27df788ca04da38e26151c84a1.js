"use strict";function cov_2iyeuaqzwx(){var path="/parse-server/lib/PromiseRouter.js";var hash="904b25408b3a13b4bcbd659416634f08ac77413b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/PromiseRouter.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:25}},"2":{start:{line:8,column:12},end:{line:8,column:57}},"3":{start:{line:10,column:15},end:{line:10,column:57}},"4":{start:{line:12,column:14},end:{line:12,column:57}},"5":{start:{line:14,column:12},end:{line:14,column:27}},"6":{start:{line:16,column:39},end:{line:16,column:93}},"7":{start:{line:24,column:14},end:{line:24,column:49}},"8":{start:{line:27,column:2},end:{line:37,column:3}},"9":{start:{line:28,column:4},end:{line:30,column:5}},"10":{start:{line:29,column:6},end:{line:29,column:19}},"11":{start:{line:31,column:9},end:{line:37,column:3}},"12":{start:{line:32,column:4},end:{line:34,column:5}},"13":{start:{line:33,column:6},end:{line:33,column:19}},"14":{start:{line:36,column:4},end:{line:36,column:17}},"15":{start:{line:51,column:4},end:{line:51,column:25}},"16":{start:{line:52,column:4},end:{line:52,column:23}},"17":{start:{line:53,column:4},end:{line:53,column:23}},"18":{start:{line:62,column:4},end:{line:64,column:5}},"19":{start:{line:63,column:6},end:{line:63,column:30}},"20":{start:{line:68,column:4},end:{line:77,column:5}},"21":{start:{line:73,column:8},end:{line:73,column:14}},"22":{start:{line:76,column:8},end:{line:76,column:47}},"23":{start:{line:79,column:18},end:{line:79,column:29}},"24":{start:{line:81,column:4},end:{line:89,column:5}},"25":{start:{line:82,column:6},end:{line:88,column:8}},"26":{start:{line:83,column:8},end:{line:87,column:30}},"27":{start:{line:84,column:10},end:{line:86,column:13}},"28":{start:{line:85,column:12},end:{line:85,column:32}},"29":{start:{line:91,column:4},end:{line:96,column:7}},"30":{start:{line:104,column:4},end:{line:122,column:5}},"31":{start:{line:105,column:6},end:{line:107,column:7}},"32":{start:{line:106,column:8},end:{line:106,column:17}},"33":{start:{line:109,column:20},end:{line:109,column:77}},"34":{start:{line:110,column:20},end:{line:110,column:37}},"35":{start:{line:112,column:6},end:{line:121,column:7}},"36":{start:{line:113,column:23},end:{line:113,column:35}},"37":{start:{line:114,column:8},end:{line:116,column:11}},"38":{start:{line:115,column:10},end:{line:115,column:60}},"39":{start:{line:117,column:8},end:{line:120,column:10}},"40":{start:{line:127,column:4},end:{line:131,column:7}},"41":{start:{line:128,column:21},end:{line:128,column:47}},"42":{start:{line:129,column:22},end:{line:129,column:67}},"43":{start:{line:130,column:6},end:{line:130,column:63}},"44":{start:{line:132,column:4},end:{line:132,column:22}},"45":{start:{line:136,column:4},end:{line:136,column:53}},"46":{start:{line:140,column:16},end:{line:140,column:40}},"47":{start:{line:142,column:4},end:{line:144,column:5}},"48":{start:{line:143,column:6},end:{line:143,column:109}},"49":{start:{line:146,column:4},end:{line:146,column:34}},"50":{start:{line:147,column:4},end:{line:149,column:7}},"51":{start:{line:148,column:6},end:{line:148,column:51}},"52":{start:{line:158,column:0},end:{line:158,column:32}},"53":{start:{line:161,column:2},end:{line:229,column:4}},"54":{start:{line:162,column:4},end:{line:228,column:5}},"55":{start:{line:163,column:18},end:{line:163,column:39}},"56":{start:{line:164,column:19},end:{line:164,column:46}},"57":{start:{line:165,column:21},end:{line:165,column:31}},"58":{start:{line:166,column:22},end:{line:166,column:33}},"59":{start:{line:168,column:6},end:{line:173,column:9}},"60":{start:{line:175,column:6},end:{line:221,column:9}},"61":{start:{line:176,column:8},end:{line:180,column:9}},"62":{start:{line:177,column:10},end:{line:177,column:98}},"63":{start:{line:179,column:10},end:{line:179,column:46}},"64":{start:{line:182,column:8},end:{line:186,column:11}},"65":{start:{line:188,column:21},end:{line:188,column:41}},"66":{start:{line:189,column:8},end:{line:189,column:27}},"67":{start:{line:191,column:8},end:{line:195,column:9}},"68":{start:{line:192,column:10},end:{line:194,column:13}},"69":{start:{line:193,column:12},end:{line:193,column:52}},"70":{start:{line:197,column:8},end:{line:200,column:9}},"71":{start:{line:198,column:10},end:{line:198,column:32}},"72":{start:{line:199,column:10},end:{line:199,column:17}},"73":{start:{line:202,column:8},end:{line:210,column:9}},"74":{start:{line:203,column:10},end:{line:203,column:47}},"75":{start:{line:206,column:10},end:{line:209,column:11}},"76":{start:{line:207,column:12},end:{line:207,column:65}},"77":{start:{line:208,column:12},end:{line:208,column:19}},"78":{start:{line:212,column:8},end:{line:212,column:34}},"79":{start:{line:214,column:8},end:{line:214,column:20}},"80":{start:{line:216,column:8},end:{line:218,column:11}},"81":{start:{line:220,column:8},end:{line:220,column:16}},"82":{start:{line:223,column:6},end:{line:225,column:9}},"83":{start:{line:227,column:6},end:{line:227,column:14}},"84":{start:{line:233,column:16},end:{line:233,column:42}},"85":{start:{line:234,column:24},end:{line:234,column:122}},"86":{start:{line:236,column:2},end:{line:238,column:3}},"87":{start:{line:237,column:4},end:{line:237,column:56}},"88":{start:{line:240,column:2},end:{line:240,column:17}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:16,column:9},end:{line:16,column:31}},loc:{start:{line:16,column:37},end:{line:16,column:95}},line:16},"1":{name:"validateParameter",decl:{start:{line:26,column:9},end:{line:26,column:26}},loc:{start:{line:26,column:39},end:{line:38,column:1}},line:26},"2":{name:"(anonymous_2)",decl:{start:{line:50,column:2},end:{line:50,column:3}},loc:{start:{line:50,column:34},end:{line:54,column:3}},line:50},"3":{name:"(anonymous_3)",decl:{start:{line:58,column:2},end:{line:58,column:3}},loc:{start:{line:58,column:16},end:{line:58,column:18}},line:58},"4":{name:"(anonymous_4)",decl:{start:{line:61,column:2},end:{line:61,column:3}},loc:{start:{line:61,column:16},end:{line:65,column:3}},line:61},"5":{name:"(anonymous_5)",decl:{start:{line:67,column:2},end:{line:67,column:3}},loc:{start:{line:67,column:35},end:{line:97,column:3}},line:67},"6":{name:"(anonymous_6)",decl:{start:{line:82,column:16},end:{line:82,column:17}},loc:{start:{line:82,column:31},end:{line:88,column:7}},line:82},"7":{name:"(anonymous_7)",decl:{start:{line:83,column:31},end:{line:83,column:32}},loc:{start:{line:83,column:53},end:{line:87,column:9}},line:83},"8":{name:"(anonymous_8)",decl:{start:{line:84,column:30},end:{line:84,column:31}},loc:{start:{line:84,column:36},end:{line:86,column:11}},line:84},"9":{name:"(anonymous_9)",decl:{start:{line:103,column:2},end:{line:103,column:3}},loc:{start:{line:103,column:22},end:{line:123,column:3}},line:103},"10":{name:"(anonymous_10)",decl:{start:{line:114,column:36},end:{line:114,column:37}},loc:{start:{line:114,column:43},end:{line:116,column:9}},line:114},"11":{name:"(anonymous_11)",decl:{start:{line:126,column:2},end:{line:126,column:3}},loc:{start:{line:126,column:24},end:{line:133,column:3}},line:126},"12":{name:"(anonymous_12)",decl:{start:{line:127,column:24},end:{line:127,column:25}},loc:{start:{line:127,column:33},end:{line:131,column:5}},line:127},"13":{name:"(anonymous_13)",decl:{start:{line:135,column:2},end:{line:135,column:3}},loc:{start:{line:135,column:18},end:{line:137,column:3}},line:135},"14":{name:"(anonymous_14)",decl:{start:{line:139,column:2},end:{line:139,column:3}},loc:{start:{line:139,column:41},end:{line:150,column:3}},line:139},"15":{name:"(anonymous_15)",decl:{start:{line:147,column:23},end:{line:147,column:24}},loc:{start:{line:147,column:44},end:{line:149,column:5}},line:147},"16":{name:"makeExpressHandler",decl:{start:{line:160,column:9},end:{line:160,column:27}},loc:{start:{line:160,column:51},end:{line:230,column:1}},line:160},"17":{name:"(anonymous_17)",decl:{start:{line:161,column:9},end:{line:161,column:10}},loc:{start:{line:161,column:35},end:{line:229,column:3}},line:161},"18":{name:"(anonymous_18)",decl:{start:{line:175,column:31},end:{line:175,column:32}},loc:{start:{line:175,column:41},end:{line:213,column:7}},line:175},"19":{name:"(anonymous_19)",decl:{start:{line:192,column:46},end:{line:192,column:47}},loc:{start:{line:192,column:56},end:{line:194,column:11}},line:192},"20":{name:"(anonymous_20)",decl:{start:{line:213,column:9},end:{line:213,column:10}},loc:{start:{line:213,column:18},end:{line:215,column:7}},line:213},"21":{name:"(anonymous_21)",decl:{start:{line:215,column:15},end:{line:215,column:16}},loc:{start:{line:215,column:20},end:{line:221,column:7}},line:215},"22":{name:"maskSensitiveUrl",decl:{start:{line:232,column:9},end:{line:232,column:25}},loc:{start:{line:232,column:31},end:{line:241,column:1}},line:232}},branchMap:{"0":{loc:{start:{line:16,column:46},end:{line:16,column:92}},type:"cond-expr",locations:[{start:{line:16,column:70},end:{line:16,column:73}},{start:{line:16,column:76},end:{line:16,column:92}}],line:16},"1":{loc:{start:{line:16,column:46},end:{line:16,column:67}},type:"binary-expr",locations:[{start:{line:16,column:46},end:{line:16,column:49}},{start:{line:16,column:53},end:{line:16,column:67}}],line:16},"2":{loc:{start:{line:27,column:2},end:{line:37,column:3}},type:"if",locations:[{start:{line:27,column:2},end:{line:37,column:3}},{start:{line:27,column:2},end:{line:37,column:3}}],line:27},"3":{loc:{start:{line:28,column:4},end:{line:30,column:5}},type:"if",locations:[{start:{line:28,column:4},end:{line:30,column:5}},{start:{line:28,column:4},end:{line:30,column:5}}],line:28},"4":{loc:{start:{line:31,column:9},end:{line:37,column:3}},type:"if",locations:[{start:{line:31,column:9},end:{line:37,column:3}},{start:{line:31,column:9},end:{line:37,column:3}}],line:31},"5":{loc:{start:{line:32,column:4},end:{line:34,column:5}},type:"if",locations:[{start:{line:32,column:4},end:{line:34,column:5}},{start:{line:32,column:4},end:{line:34,column:5}}],line:32},"6":{loc:{start:{line:50,column:14},end:{line:50,column:25}},type:"default-arg",locations:[{start:{line:50,column:23},end:{line:50,column:25}}],line:50},"7":{loc:{start:{line:68,column:4},end:{line:77,column:5}},type:"switch",locations:[{start:{line:69,column:6},end:{line:69,column:18}},{start:{line:70,column:6},end:{line:70,column:17}},{start:{line:71,column:6},end:{line:71,column:17}},{start:{line:72,column:6},end:{line:73,column:14}},{start:{line:75,column:6},end:{line:76,column:47}}],line:68},"8":{loc:{start:{line:81,column:4},end:{line:89,column:5}},type:"if",locations:[{start:{line:81,column:4},end:{line:89,column:5}},{start:{line:81,column:4},end:{line:89,column:5}}],line:81},"9":{loc:{start:{line:105,column:6},end:{line:107,column:7}},type:"if",locations:[{start:{line:105,column:6},end:{line:107,column:7}},{start:{line:105,column:6},end:{line:107,column:7}}],line:105},"10":{loc:{start:{line:109,column:20},end:{line:109,column:77}},type:"binary-expr",locations:[{start:{line:109,column:20},end:{line:109,column:31}},{start:{line:109,column:35},end:{line:109,column:77}}],line:109},"11":{loc:{start:{line:112,column:6},end:{line:121,column:7}},type:"if",locations:[{start:{line:112,column:6},end:{line:121,column:7}},{start:{line:112,column:6},end:{line:121,column:7}}],line:112},"12":{loc:{start:{line:142,column:4},end:{line:144,column:5}},type:"if",locations:[{start:{line:142,column:4},end:{line:144,column:5}},{start:{line:142,column:4},end:{line:144,column:5}}],line:142},"13":{loc:{start:{line:176,column:8},end:{line:180,column:9}},type:"if",locations:[{start:{line:176,column:8},end:{line:180,column:9}},{start:{line:176,column:8},end:{line:180,column:9}}],line:176},"14":{loc:{start:{line:176,column:12},end:{line:176,column:64}},type:"binary-expr",locations:[{start:{line:176,column:12},end:{line:176,column:28}},{start:{line:176,column:32},end:{line:176,column:48}},{start:{line:176,column:52},end:{line:176,column:64}}],line:176},"15":{loc:{start:{line:188,column:21},end:{line:188,column:41}},type:"binary-expr",locations:[{start:{line:188,column:21},end:{line:188,column:34}},{start:{line:188,column:38},end:{line:188,column:41}}],line:188},"16":{loc:{start:{line:191,column:8},end:{line:195,column:9}},type:"if",locations:[{start:{line:191,column:8},end:{line:195,column:9}},{start:{line:191,column:8},end:{line:195,column:9}}],line:191},"17":{loc:{start:{line:197,column:8},end:{line:200,column:9}},type:"if",locations:[{start:{line:197,column:8},end:{line:200,column:9}},{start:{line:197,column:8},end:{line:200,column:9}}],line:197},"18":{loc:{start:{line:202,column:8},end:{line:210,column:9}},type:"if",locations:[{start:{line:202,column:8},end:{line:210,column:9}},{start:{line:202,column:8},end:{line:210,column:9}}],line:202},"19":{loc:{start:{line:206,column:10},end:{line:209,column:11}},type:"if",locations:[{start:{line:206,column:10},end:{line:209,column:11}},{start:{line:206,column:10},end:{line:209,column:11}}],line:206},"20":{loc:{start:{line:234,column:24},end:{line:234,column:122}},type:"binary-expr",locations:[{start:{line:234,column:24},end:{line:234,column:44}},{start:{line:234,column:48},end:{line:234,column:82}},{start:{line:234,column:86},end:{line:234,column:122}}],line:234},"21":{loc:{start:{line:236,column:2},end:{line:238,column:3}},type:"if",locations:[{start:{line:236,column:2},end:{line:238,column:3}},{start:{line:236,column:2},end:{line:238,column:3}}],line:236}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0],"7":[0,0,0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0,0],"21":[0,0]},inputSourceMap:{version:3,sources:["../src/PromiseRouter.js"],names:["Layer","require","validateParameter","key","value","match","PromiseRouter","constructor","routes","appId","mountRoutes","merge","router","route","push","method","path","handlers","handler","length","req","reduce","promise","then","Promise","resolve","layer","params","Object","keys","forEach","mountOnto","expressApp","toLowerCase","makeExpressHandler","call","expressRouter","express","Router","tryRouteRequest","request","Parse","Error","INVALID_JSON","reject","promiseHandler","res","next","url","maskSensitiveUrl","body","assign","headers","log","logRequest","result","response","location","text","error","logResponse","status","header","set","send","json","catch","e","maskUrl","originalUrl","toString","shouldMaskUrl","includes"],mappings:"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",sourcesContent:["// A router that is based on promises rather than req/res/next.\n// This is intended to replace the use of express.Router to handle\n// subsections of the API surface.\n// This will make it easier to have methods like 'batch' that\n// themselves use our routing information, without disturbing express\n// components that external developers may be modifying.\n\nimport Parse from 'parse/node';\nimport express from 'express';\nimport log from './logger';\nimport { inspect } from 'util';\nconst Layer = require('express/lib/router/layer');\n\nfunction validateParameter(key, value) {\n  if (key == 'className') {\n    if (value.match(/_?[A-Za-z][A-Za-z_0-9]*/)) {\n      return value;\n    }\n  } else if (key == 'objectId') {\n    if (value.match(/[A-Za-z0-9]+/)) {\n      return value;\n    }\n  } else {\n    return value;\n  }\n}\n\nexport default class PromiseRouter {\n  // Each entry should be an object with:\n  // path: the path to route, in express format\n  // method: the HTTP method that this route handles.\n  //   Must be one of: POST, GET, PUT, DELETE\n  // handler: a function that takes request, and returns a promise.\n  //   Successful handlers should resolve to an object with fields:\n  //     status: optional. the http status code. defaults to 200\n  //     response: a json object with the content of the response\n  //     location: optional. a location header\n  constructor(routes = [], appId) {\n    this.routes = routes;\n    this.appId = appId;\n    this.mountRoutes();\n  }\n\n  // Leave the opportunity to\n  // subclasses to mount their routes by overriding\n  mountRoutes() {}\n\n  // Merge the routes into this one\n  merge(router) {\n    for (var route of router.routes) {\n      this.routes.push(route);\n    }\n  }\n\n  route(method, path, ...handlers) {\n    switch (method) {\n      case 'POST':\n      case 'GET':\n      case 'PUT':\n      case 'DELETE':\n        break;\n      default:\n        throw 'cannot route method: ' + method;\n    }\n\n    let handler = handlers[0];\n\n    if (handlers.length > 1) {\n      handler = function (req) {\n        return handlers.reduce((promise, handler) => {\n          return promise.then(() => {\n            return handler(req);\n          });\n        }, Promise.resolve());\n      };\n    }\n\n    this.routes.push({\n      path: path,\n      method: method,\n      handler: handler,\n      layer: new Layer(path, null, handler),\n    });\n  }\n\n  // Returns an object with:\n  //   handler: the handler that should deal with this request\n  //   params: any :-params that got parsed from the path\n  // Returns undefined if there is no match.\n  match(method, path) {\n    for (var route of this.routes) {\n      if (route.method != method) {\n        continue;\n      }\n      const layer = route.layer || new Layer(route.path, null, route.handler);\n      const match = layer.match(path);\n      if (match) {\n        const params = layer.params;\n        Object.keys(params).forEach(key => {\n          params[key] = validateParameter(key, params[key]);\n        });\n        return { params: params, handler: route.handler };\n      }\n    }\n  }\n\n  // Mount the routes on this router onto an express app (or express router)\n  mountOnto(expressApp) {\n    this.routes.forEach(route => {\n      const method = route.method.toLowerCase();\n      const handler = makeExpressHandler(this.appId, route.handler);\n      expressApp[method].call(expressApp, route.path, handler);\n    });\n    return expressApp;\n  }\n\n  expressRouter() {\n    return this.mountOnto(express.Router());\n  }\n\n  tryRouteRequest(method, path, request) {\n    var match = this.match(method, path);\n    if (!match) {\n      throw new Parse.Error(Parse.Error.INVALID_JSON, 'cannot route ' + method + ' ' + path);\n    }\n    request.params = match.params;\n    return new Promise((resolve, reject) => {\n      match.handler(request).then(resolve, reject);\n    });\n  }\n}\n\n// A helper function to make an express handler out of a a promise\n// handler.\n// Express handlers should never throw; if a promise handler throws we\n// just treat it like it resolved to an error.\nfunction makeExpressHandler(appId, promiseHandler) {\n  return function (req, res, next) {\n    try {\n      const url = maskSensitiveUrl(req);\n      const body = Object.assign({}, req.body);\n      const method = req.method;\n      const headers = req.headers;\n      log.logRequest({\n        method,\n        url,\n        headers,\n        body,\n      });\n      promiseHandler(req)\n        .then(\n          result => {\n            if (!result.response && !result.location && !result.text) {\n              log.error('the handler did not include a \"response\" or a \"location\" field');\n              throw 'control should not get here';\n            }\n\n            log.logResponse({ method, url, result });\n\n            var status = result.status || 200;\n            res.status(status);\n\n            if (result.headers) {\n              Object.keys(result.headers).forEach(header => {\n                res.set(header, result.headers[header]);\n              });\n            }\n\n            if (result.text) {\n              res.send(result.text);\n              return;\n            }\n\n            if (result.location) {\n              res.set('Location', result.location);\n              // Override the default expressjs response\n              // as it double encodes %encoded chars in URL\n              if (!result.response) {\n                res.send('Found. Redirecting to ' + result.location);\n                return;\n              }\n            }\n            res.json(result.response);\n          },\n          error => {\n            next(error);\n          }\n        )\n        .catch(e => {\n          log.error(`Error generating response. ${inspect(e)}`, { error: e });\n          next(e);\n        });\n    } catch (e) {\n      log.error(`Error handling request: ${inspect(e)}`, { error: e });\n      next(e);\n    }\n  };\n}\n\nfunction maskSensitiveUrl(req) {\n  let maskUrl = req.originalUrl.toString();\n  const shouldMaskUrl =\n    req.method === 'GET' &&\n    req.originalUrl.includes('/login') &&\n    !req.originalUrl.includes('classes');\n  if (shouldMaskUrl) {\n    maskUrl = log.maskSensitiveUrl(maskUrl);\n  }\n  return maskUrl;\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"904b25408b3a13b4bcbd659416634f08ac77413b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2iyeuaqzwx=function(){return actualCoverage;};}return actualCoverage;}cov_2iyeuaqzwx();cov_2iyeuaqzwx().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2iyeuaqzwx().s[1]++;exports.default=void 0;var _node=(cov_2iyeuaqzwx().s[2]++,_interopRequireDefault(require("parse/node")));var _express=(cov_2iyeuaqzwx().s[3]++,_interopRequireDefault(require("express")));var _logger=(cov_2iyeuaqzwx().s[4]++,_interopRequireDefault(require("./logger")));var _util=(cov_2iyeuaqzwx().s[5]++,require("util"));function _interopRequireDefault(obj){cov_2iyeuaqzwx().f[0]++;cov_2iyeuaqzwx().s[6]++;return(cov_2iyeuaqzwx().b[1][0]++,obj)&&(cov_2iyeuaqzwx().b[1][1]++,obj.__esModule)?(cov_2iyeuaqzwx().b[0][0]++,obj):(cov_2iyeuaqzwx().b[0][1]++,{default:obj});}// A router that is based on promises rather than req/res/next.
// This is intended to replace the use of express.Router to handle
// subsections of the API surface.
// This will make it easier to have methods like 'batch' that
// themselves use our routing information, without disturbing express
// components that external developers may be modifying.
const Layer=(cov_2iyeuaqzwx().s[7]++,require('express/lib/router/layer'));function validateParameter(key,value){cov_2iyeuaqzwx().f[1]++;cov_2iyeuaqzwx().s[8]++;if(key=='className'){cov_2iyeuaqzwx().b[2][0]++;cov_2iyeuaqzwx().s[9]++;if(value.match(/_?[A-Za-z][A-Za-z_0-9]*/)){cov_2iyeuaqzwx().b[3][0]++;cov_2iyeuaqzwx().s[10]++;return value;}else{cov_2iyeuaqzwx().b[3][1]++;}}else{cov_2iyeuaqzwx().b[2][1]++;cov_2iyeuaqzwx().s[11]++;if(key=='objectId'){cov_2iyeuaqzwx().b[4][0]++;cov_2iyeuaqzwx().s[12]++;if(value.match(/[A-Za-z0-9]+/)){cov_2iyeuaqzwx().b[5][0]++;cov_2iyeuaqzwx().s[13]++;return value;}else{cov_2iyeuaqzwx().b[5][1]++;}}else{cov_2iyeuaqzwx().b[4][1]++;cov_2iyeuaqzwx().s[14]++;return value;}}}class PromiseRouter{// Each entry should be an object with:
// path: the path to route, in express format
// method: the HTTP method that this route handles.
//   Must be one of: POST, GET, PUT, DELETE
// handler: a function that takes request, and returns a promise.
//   Successful handlers should resolve to an object with fields:
//     status: optional. the http status code. defaults to 200
//     response: a json object with the content of the response
//     location: optional. a location header
constructor(routes=(cov_2iyeuaqzwx().b[6][0]++,[]),appId){cov_2iyeuaqzwx().f[2]++;cov_2iyeuaqzwx().s[15]++;this.routes=routes;cov_2iyeuaqzwx().s[16]++;this.appId=appId;cov_2iyeuaqzwx().s[17]++;this.mountRoutes();}// Leave the opportunity to
// subclasses to mount their routes by overriding
mountRoutes(){cov_2iyeuaqzwx().f[3]++;}// Merge the routes into this one
merge(router){cov_2iyeuaqzwx().f[4]++;cov_2iyeuaqzwx().s[18]++;for(var route of router.routes){cov_2iyeuaqzwx().s[19]++;this.routes.push(route);}}route(method,path,...handlers){cov_2iyeuaqzwx().f[5]++;cov_2iyeuaqzwx().s[20]++;switch(method){case'POST':cov_2iyeuaqzwx().b[7][0]++;case'GET':cov_2iyeuaqzwx().b[7][1]++;case'PUT':cov_2iyeuaqzwx().b[7][2]++;case'DELETE':cov_2iyeuaqzwx().b[7][3]++;cov_2iyeuaqzwx().s[21]++;break;default:cov_2iyeuaqzwx().b[7][4]++;cov_2iyeuaqzwx().s[22]++;throw'cannot route method: '+method;}let handler=(cov_2iyeuaqzwx().s[23]++,handlers[0]);cov_2iyeuaqzwx().s[24]++;if(handlers.length>1){cov_2iyeuaqzwx().b[8][0]++;cov_2iyeuaqzwx().s[25]++;handler=function(req){cov_2iyeuaqzwx().f[6]++;cov_2iyeuaqzwx().s[26]++;return handlers.reduce((promise,handler)=>{cov_2iyeuaqzwx().f[7]++;cov_2iyeuaqzwx().s[27]++;return promise.then(()=>{cov_2iyeuaqzwx().f[8]++;cov_2iyeuaqzwx().s[28]++;return handler(req);});},Promise.resolve());};}else{cov_2iyeuaqzwx().b[8][1]++;}cov_2iyeuaqzwx().s[29]++;this.routes.push({path:path,method:method,handler:handler,layer:new Layer(path,null,handler)});}// Returns an object with:
//   handler: the handler that should deal with this request
//   params: any :-params that got parsed from the path
// Returns undefined if there is no match.
match(method,path){cov_2iyeuaqzwx().f[9]++;cov_2iyeuaqzwx().s[30]++;for(var route of this.routes){cov_2iyeuaqzwx().s[31]++;if(route.method!=method){cov_2iyeuaqzwx().b[9][0]++;cov_2iyeuaqzwx().s[32]++;continue;}else{cov_2iyeuaqzwx().b[9][1]++;}const layer=(cov_2iyeuaqzwx().s[33]++,(cov_2iyeuaqzwx().b[10][0]++,route.layer)||(cov_2iyeuaqzwx().b[10][1]++,new Layer(route.path,null,route.handler)));const match=(cov_2iyeuaqzwx().s[34]++,layer.match(path));cov_2iyeuaqzwx().s[35]++;if(match){cov_2iyeuaqzwx().b[11][0]++;const params=(cov_2iyeuaqzwx().s[36]++,layer.params);cov_2iyeuaqzwx().s[37]++;Object.keys(params).forEach(key=>{cov_2iyeuaqzwx().f[10]++;cov_2iyeuaqzwx().s[38]++;params[key]=validateParameter(key,params[key]);});cov_2iyeuaqzwx().s[39]++;return{params:params,handler:route.handler};}else{cov_2iyeuaqzwx().b[11][1]++;}}}// Mount the routes on this router onto an express app (or express router)
mountOnto(expressApp){cov_2iyeuaqzwx().f[11]++;cov_2iyeuaqzwx().s[40]++;this.routes.forEach(route=>{cov_2iyeuaqzwx().f[12]++;const method=(cov_2iyeuaqzwx().s[41]++,route.method.toLowerCase());const handler=(cov_2iyeuaqzwx().s[42]++,makeExpressHandler(this.appId,route.handler));cov_2iyeuaqzwx().s[43]++;expressApp[method].call(expressApp,route.path,handler);});cov_2iyeuaqzwx().s[44]++;return expressApp;}expressRouter(){cov_2iyeuaqzwx().f[13]++;cov_2iyeuaqzwx().s[45]++;return this.mountOnto(_express.default.Router());}tryRouteRequest(method,path,request){cov_2iyeuaqzwx().f[14]++;var match=(cov_2iyeuaqzwx().s[46]++,this.match(method,path));cov_2iyeuaqzwx().s[47]++;if(!match){cov_2iyeuaqzwx().b[12][0]++;cov_2iyeuaqzwx().s[48]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,'cannot route '+method+' '+path);}else{cov_2iyeuaqzwx().b[12][1]++;}cov_2iyeuaqzwx().s[49]++;request.params=match.params;cov_2iyeuaqzwx().s[50]++;return new Promise((resolve,reject)=>{cov_2iyeuaqzwx().f[15]++;cov_2iyeuaqzwx().s[51]++;match.handler(request).then(resolve,reject);});}}// A helper function to make an express handler out of a a promise
// handler.
// Express handlers should never throw; if a promise handler throws we
// just treat it like it resolved to an error.
cov_2iyeuaqzwx().s[52]++;exports.default=PromiseRouter;function makeExpressHandler(appId,promiseHandler){cov_2iyeuaqzwx().f[16]++;cov_2iyeuaqzwx().s[53]++;return function(req,res,next){cov_2iyeuaqzwx().f[17]++;cov_2iyeuaqzwx().s[54]++;try{const url=(cov_2iyeuaqzwx().s[55]++,maskSensitiveUrl(req));const body=(cov_2iyeuaqzwx().s[56]++,Object.assign({},req.body));const method=(cov_2iyeuaqzwx().s[57]++,req.method);const headers=(cov_2iyeuaqzwx().s[58]++,req.headers);cov_2iyeuaqzwx().s[59]++;_logger.default.logRequest({method,url,headers,body});cov_2iyeuaqzwx().s[60]++;promiseHandler(req).then(result=>{cov_2iyeuaqzwx().f[18]++;cov_2iyeuaqzwx().s[61]++;if((cov_2iyeuaqzwx().b[14][0]++,!result.response)&&(cov_2iyeuaqzwx().b[14][1]++,!result.location)&&(cov_2iyeuaqzwx().b[14][2]++,!result.text)){cov_2iyeuaqzwx().b[13][0]++;cov_2iyeuaqzwx().s[62]++;_logger.default.error('the handler did not include a "response" or a "location" field');cov_2iyeuaqzwx().s[63]++;throw'control should not get here';}else{cov_2iyeuaqzwx().b[13][1]++;}cov_2iyeuaqzwx().s[64]++;_logger.default.logResponse({method,url,result});var status=(cov_2iyeuaqzwx().s[65]++,(cov_2iyeuaqzwx().b[15][0]++,result.status)||(cov_2iyeuaqzwx().b[15][1]++,200));cov_2iyeuaqzwx().s[66]++;res.status(status);cov_2iyeuaqzwx().s[67]++;if(result.headers){cov_2iyeuaqzwx().b[16][0]++;cov_2iyeuaqzwx().s[68]++;Object.keys(result.headers).forEach(header=>{cov_2iyeuaqzwx().f[19]++;cov_2iyeuaqzwx().s[69]++;res.set(header,result.headers[header]);});}else{cov_2iyeuaqzwx().b[16][1]++;}cov_2iyeuaqzwx().s[70]++;if(result.text){cov_2iyeuaqzwx().b[17][0]++;cov_2iyeuaqzwx().s[71]++;res.send(result.text);cov_2iyeuaqzwx().s[72]++;return;}else{cov_2iyeuaqzwx().b[17][1]++;}cov_2iyeuaqzwx().s[73]++;if(result.location){cov_2iyeuaqzwx().b[18][0]++;cov_2iyeuaqzwx().s[74]++;res.set('Location',result.location);// Override the default expressjs response
// as it double encodes %encoded chars in URL
cov_2iyeuaqzwx().s[75]++;if(!result.response){cov_2iyeuaqzwx().b[19][0]++;cov_2iyeuaqzwx().s[76]++;res.send('Found. Redirecting to '+result.location);cov_2iyeuaqzwx().s[77]++;return;}else{cov_2iyeuaqzwx().b[19][1]++;}}else{cov_2iyeuaqzwx().b[18][1]++;}cov_2iyeuaqzwx().s[78]++;res.json(result.response);},error=>{cov_2iyeuaqzwx().f[20]++;cov_2iyeuaqzwx().s[79]++;next(error);}).catch(e=>{cov_2iyeuaqzwx().f[21]++;cov_2iyeuaqzwx().s[80]++;_logger.default.error(`Error generating response. ${(0,_util.inspect)(e)}`,{error:e});cov_2iyeuaqzwx().s[81]++;next(e);});}catch(e){cov_2iyeuaqzwx().s[82]++;_logger.default.error(`Error handling request: ${(0,_util.inspect)(e)}`,{error:e});cov_2iyeuaqzwx().s[83]++;next(e);}};}function maskSensitiveUrl(req){cov_2iyeuaqzwx().f[22]++;let maskUrl=(cov_2iyeuaqzwx().s[84]++,req.originalUrl.toString());const shouldMaskUrl=(cov_2iyeuaqzwx().s[85]++,(cov_2iyeuaqzwx().b[20][0]++,req.method==='GET')&&(cov_2iyeuaqzwx().b[20][1]++,req.originalUrl.includes('/login'))&&(cov_2iyeuaqzwx().b[20][2]++,!req.originalUrl.includes('classes')));cov_2iyeuaqzwx().s[86]++;if(shouldMaskUrl){cov_2iyeuaqzwx().b[21][0]++;cov_2iyeuaqzwx().s[87]++;maskUrl=_logger.default.maskSensitiveUrl(maskUrl);}else{cov_2iyeuaqzwx().b[21][1]++;}cov_2iyeuaqzwx().s[88]++;return maskUrl;}//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,