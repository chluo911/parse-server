"use strict";function cov_1uxmp08xd6(){var path="/parse-server/lib/Routers/UsersRouter.js";var hash="93662b72fd1810435f91d0de2057b1a01b54375c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Routers/UsersRouter.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:47}},"2":{start:{line:8,column:12},end:{line:8,column:57}},"3":{start:{line:10,column:14},end:{line:10,column:58}},"4":{start:{line:12,column:22},end:{line:12,column:74}},"5":{start:{line:14,column:21},end:{line:14,column:71}},"6":{start:{line:16,column:12},end:{line:16,column:54}},"7":{start:{line:18,column:12},end:{line:18,column:54}},"8":{start:{line:20,column:16},end:{line:20,column:62}},"9":{start:{line:22,column:16},end:{line:22,column:38}},"10":{start:{line:24,column:19},end:{line:24,column:44}},"11":{start:{line:26,column:17},end:{line:26,column:64}},"12":{start:{line:28,column:39},end:{line:28,column:93}},"13":{start:{line:30,column:54},end:{line:30,column:73}},"14":{start:{line:30,column:75},end:{line:30,column:330}},"15":{start:{line:30,column:125},end:{line:30,column:161}},"16":{start:{line:30,column:163},end:{line:30,column:296}},"17":{start:{line:30,column:185},end:{line:30,column:294}},"18":{start:{line:30,column:227},end:{line:30,column:290}},"19":{start:{line:30,column:297},end:{line:30,column:328}},"20":{start:{line:30,column:331},end:{line:30,column:343}},"21":{start:{line:32,column:33},end:{line:32,column:517}},"22":{start:{line:32,column:46},end:{line:32,column:47}},"23":{start:{line:32,column:91},end:{line:32,column:131}},"24":{start:{line:32,column:133},end:{line:32,column:515}},"25":{start:{line:32,column:146},end:{line:32,column:247}},"26":{start:{line:32,column:201},end:{line:32,column:243}},"27":{start:{line:32,column:255},end:{line:32,column:515}},"28":{start:{line:32,column:295},end:{line:32,column:369}},"29":{start:{line:32,column:379},end:{line:32,column:513}},"30":{start:{line:32,column:428},end:{line:32,column:509}},"31":{start:{line:32,column:518},end:{line:32,column:532}},"32":{start:{line:34,column:44},end:{line:34,column:195}},"33":{start:{line:34,column:62},end:{line:34,column:166}},"34":{start:{line:34,column:176},end:{line:34,column:193}},"35":{start:{line:34,column:196},end:{line:34,column:207}},"36":{start:{line:38,column:4},end:{line:38,column:19}},"37":{start:{line:47,column:4},end:{line:54,column:5}},"38":{start:{line:48,column:6},end:{line:53,column:7}},"39":{start:{line:50,column:8},end:{line:52,column:9}},"40":{start:{line:51,column:10},end:{line:51,column:26}},"41":{start:{line:64,column:4},end:{line:64,column:25}},"42":{start:{line:67,column:4},end:{line:77,column:5}},"43":{start:{line:68,column:6},end:{line:72,column:9}},"44":{start:{line:69,column:8},end:{line:71,column:9}},"45":{start:{line:70,column:10},end:{line:70,column:41}},"46":{start:{line:74,column:6},end:{line:76,column:7}},"47":{start:{line:75,column:8},end:{line:75,column:29}},"48":{start:{line:88,column:4},end:{line:178,column:7}},"49":{start:{line:90,column:20},end:{line:90,column:28}},"50":{start:{line:92,column:6},end:{line:94,column:7}},"51":{start:{line:93,column:8},end:{line:93,column:28}},"52":{start:{line:100,column:10},end:{line:100,column:17}},"53":{start:{line:102,column:6},end:{line:104,column:7}},"54":{start:{line:103,column:8},end:{line:103,column:107}},"55":{start:{line:106,column:6},end:{line:108,column:7}},"56":{start:{line:107,column:8},end:{line:107,column:101}},"57":{start:{line:110,column:6},end:{line:112,column:7}},"58":{start:{line:111,column:8},end:{line:111,column:106}},"59":{start:{line:115,column:28},end:{line:115,column:33}},"60":{start:{line:118,column:6},end:{line:135,column:7}},"61":{start:{line:119,column:8},end:{line:122,column:10}},"62":{start:{line:123,column:13},end:{line:135,column:7}},"63":{start:{line:124,column:8},end:{line:126,column:10}},"64":{start:{line:128,column:8},end:{line:134,column:10}},"65":{start:{line:137,column:6},end:{line:177,column:9}},"66":{start:{line:138,column:8},end:{line:140,column:9}},"67":{start:{line:139,column:10},end:{line:139,column:108}},"68":{start:{line:142,column:8},end:{line:148,column:9}},"69":{start:{line:144,column:10},end:{line:144,column:143}},"70":{start:{line:145,column:10},end:{line:145,column:71}},"71":{start:{line:145,column:40},end:{line:145,column:66}},"72":{start:{line:147,column:10},end:{line:147,column:28}},"73":{start:{line:150,column:8},end:{line:150,column:66}},"74":{start:{line:152,column:8},end:{line:152,column:34}},"75":{start:{line:153,column:37},end:{line:153,column:82}},"76":{start:{line:154,column:8},end:{line:154,column:72}},"77":{start:{line:156,column:8},end:{line:158,column:9}},"78":{start:{line:157,column:10},end:{line:157,column:108}},"79":{start:{line:164,column:8},end:{line:166,column:9}},"80":{start:{line:165,column:10},end:{line:165,column:108}},"81":{start:{line:168,column:8},end:{line:170,column:9}},"82":{start:{line:169,column:10},end:{line:169,column:108}},"83":{start:{line:172,column:8},end:{line:172,column:37}},"84":{start:{line:174,column:8},end:{line:174,column:29}},"85":{start:{line:176,column:8},end:{line:176,column:29}},"86":{start:{line:182,column:4},end:{line:184,column:5}},"87":{start:{line:183,column:6},end:{line:183,column:104}},"88":{start:{line:186,column:25},end:{line:186,column:46}},"89":{start:{line:187,column:4},end:{line:204,column:7}},"90":{start:{line:192,column:6},end:{line:203,column:7}},"91":{start:{line:193,column:8},end:{line:193,column:106}},"92":{start:{line:195,column:21},end:{line:195,column:45}},"93":{start:{line:197,column:8},end:{line:197,column:41}},"94":{start:{line:199,column:8},end:{line:199,column:49}},"95":{start:{line:200,column:8},end:{line:202,column:10}},"96":{start:{line:208,column:17},end:{line:208,column:61}},"97":{start:{line:210,column:4},end:{line:233,column:5}},"98":{start:{line:211,column:22},end:{line:211,column:47}},"99":{start:{line:213,column:6},end:{line:232,column:7}},"100":{start:{line:216,column:8},end:{line:216,column:31}},"101":{start:{line:217,column:8},end:{line:221,column:11}},"102":{start:{line:224,column:8},end:{line:226,column:9}},"103":{start:{line:225,column:10},end:{line:225,column:46}},"104":{start:{line:229,column:26},end:{line:229,column:109}},"105":{start:{line:230,column:8},end:{line:231,column:136}},"106":{start:{line:231,column:10},end:{line:231,column:136}},"107":{start:{line:236,column:4},end:{line:236,column:45}},"108":{start:{line:237,column:4},end:{line:237,column:69}},"109":{start:{line:239,column:4},end:{line:241,column:33}},"110":{start:{line:246,column:8},end:{line:253,column:6}},"111":{start:{line:255,column:4},end:{line:255,column:49}},"112":{start:{line:256,column:4},end:{line:256,column:26}},"113":{start:{line:258,column:27},end:{line:260,column:13}},"114":{start:{line:262,column:4},end:{line:264,column:42}},"115":{start:{line:265,column:4},end:{line:267,column:6}},"116":{start:{line:286,column:4},end:{line:288,column:5}},"117":{start:{line:287,column:6},end:{line:287,column:103}},"118":{start:{line:290,column:19},end:{line:290,column:54}},"119":{start:{line:292,column:4},end:{line:294,column:5}},"120":{start:{line:293,column:6},end:{line:293,column:119}},"121":{start:{line:296,column:25},end:{line:298,column:6}},"122":{start:{line:299,column:17},end:{line:299,column:32}},"123":{start:{line:301,column:4},end:{line:303,column:5}},"124":{start:{line:302,column:6},end:{line:302,column:92}},"125":{start:{line:305,column:4},end:{line:305,column:33}},"126":{start:{line:310,column:8},end:{line:317,column:6}},"127":{start:{line:319,column:4},end:{line:319,column:49}},"128":{start:{line:320,column:4},end:{line:320,column:26}},"129":{start:{line:321,column:4},end:{line:323,column:6}},"130":{start:{line:327,column:4},end:{line:335,column:7}},"131":{start:{line:329,column:6},end:{line:329,column:47}},"132":{start:{line:330,column:6},end:{line:332,column:8}},"133":{start:{line:334,column:6},end:{line:334,column:18}},"134":{start:{line:339,column:20},end:{line:341,column:5}},"135":{start:{line:343,column:4},end:{line:357,column:5}},"136":{start:{line:344,column:6},end:{line:356,column:9}},"137":{start:{line:347,column:8},end:{line:353,column:9}},"138":{start:{line:348,column:10},end:{line:352,column:13}},"139":{start:{line:349,column:12},end:{line:349,column:65}},"140":{start:{line:351,column:12},end:{line:351,column:44}},"141":{start:{line:355,column:8},end:{line:355,column:40}},"142":{start:{line:359,column:4},end:{line:359,column:36}},"143":{start:{line:364,column:4},end:{line:366,column:36}},"144":{start:{line:370,column:4},end:{line:385,column:5}},"145":{start:{line:371,column:6},end:{line:377,column:9}},"146":{start:{line:379,column:6},end:{line:384,column:7}},"147":{start:{line:381,column:8},end:{line:381,column:200}},"148":{start:{line:383,column:8},end:{line:383,column:16}},"149":{start:{line:389,column:4},end:{line:389,column:37}},"150":{start:{line:393,column:8},end:{line:393,column:16}},"151":{start:{line:395,column:4},end:{line:397,column:5}},"152":{start:{line:396,column:6},end:{line:396,column:100}},"153":{start:{line:399,column:4},end:{line:401,column:5}},"154":{start:{line:400,column:6},end:{line:400,column:120}},"155":{start:{line:403,column:27},end:{line:403,column:52}},"156":{start:{line:404,column:4},end:{line:418,column:7}},"157":{start:{line:405,column:6},end:{line:407,column:9}},"158":{start:{line:409,column:6},end:{line:417,column:7}},"159":{start:{line:412,column:8},end:{line:414,column:11}},"160":{start:{line:416,column:8},end:{line:416,column:18}},"161":{start:{line:422,column:4},end:{line:422,column:37}},"162":{start:{line:426,column:8},end:{line:426,column:16}},"163":{start:{line:428,column:4},end:{line:430,column:5}},"164":{start:{line:429,column:6},end:{line:429,column:100}},"165":{start:{line:432,column:4},end:{line:434,column:5}},"166":{start:{line:433,column:6},end:{line:433,column:120}},"167":{start:{line:436,column:4},end:{line:458,column:7}},"168":{start:{line:439,column:6},end:{line:441,column:7}},"169":{start:{line:440,column:8},end:{line:440,column:112}},"170":{start:{line:443,column:19},end:{line:443,column:29}},"171":{start:{line:445,column:6},end:{line:445,column:27}},"172":{start:{line:447,column:6},end:{line:449,column:7}},"173":{start:{line:448,column:8},end:{line:448,column:110}},"174":{start:{line:451,column:29},end:{line:451,column:54}},"175":{start:{line:452,column:6},end:{line:457,column:9}},"176":{start:{line:453,column:8},end:{line:453,column:51}},"177":{start:{line:454,column:8},end:{line:456,column:10}},"178":{start:{line:462,column:4},end:{line:464,column:7}},"179":{start:{line:463,column:6},end:{line:463,column:34}},"180":{start:{line:465,column:4},end:{line:467,column:7}},"181":{start:{line:466,column:6},end:{line:466,column:36}},"182":{start:{line:468,column:4},end:{line:470,column:7}},"183":{start:{line:469,column:6},end:{line:469,column:32}},"184":{start:{line:471,column:4},end:{line:473,column:7}},"185":{start:{line:472,column:6},end:{line:472,column:33}},"186":{start:{line:474,column:4},end:{line:476,column:7}},"187":{start:{line:475,column:6},end:{line:475,column:36}},"188":{start:{line:477,column:4},end:{line:479,column:7}},"189":{start:{line:478,column:6},end:{line:478,column:36}},"190":{start:{line:480,column:4},end:{line:482,column:7}},"191":{start:{line:481,column:6},end:{line:481,column:35}},"192":{start:{line:483,column:4},end:{line:485,column:7}},"193":{start:{line:484,column:6},end:{line:484,column:35}},"194":{start:{line:486,column:4},end:{line:488,column:7}},"195":{start:{line:487,column:6},end:{line:487,column:37}},"196":{start:{line:489,column:4},end:{line:491,column:7}},"197":{start:{line:490,column:6},end:{line:490,column:36}},"198":{start:{line:492,column:4},end:{line:494,column:7}},"199":{start:{line:493,column:6},end:{line:493,column:42}},"200":{start:{line:495,column:4},end:{line:497,column:7}},"201":{start:{line:496,column:6},end:{line:496,column:54}},"202":{start:{line:498,column:4},end:{line:500,column:7}},"203":{start:{line:499,column:6},end:{line:499,column:44}},"204":{start:{line:505,column:0},end:{line:505,column:34}},"205":{start:{line:506,column:15},end:{line:506,column:26}},"206":{start:{line:507,column:0},end:{line:507,column:27}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:28,column:9},end:{line:28,column:31}},loc:{start:{line:28,column:37},end:{line:28,column:95}},line:28},"1":{name:"ownKeys",decl:{start:{line:30,column:9},end:{line:30,column:16}},loc:{start:{line:30,column:41},end:{line:30,column:345}},line:30},"2":{name:"(anonymous_2)",decl:{start:{line:30,column:210},end:{line:30,column:211}},loc:{start:{line:30,column:225},end:{line:30,column:292}},line:30},"3":{name:"_objectSpread",decl:{start:{line:32,column:9},end:{line:32,column:22}},loc:{start:{line:32,column:31},end:{line:32,column:534}},line:32},"4":{name:"(anonymous_4)",decl:{start:{line:32,column:184},end:{line:32,column:185}},loc:{start:{line:32,column:199},end:{line:32,column:245}},line:32},"5":{name:"(anonymous_5)",decl:{start:{line:32,column:411},end:{line:32,column:412}},loc:{start:{line:32,column:426},end:{line:32,column:511}},line:32},"6":{name:"_defineProperty",decl:{start:{line:34,column:9},end:{line:34,column:24}},loc:{start:{line:34,column:42},end:{line:34,column:209}},line:34},"7":{name:"(anonymous_7)",decl:{start:{line:37,column:2},end:{line:37,column:3}},loc:{start:{line:37,column:14},end:{line:39,column:3}},line:37},"8":{name:"(anonymous_8)",decl:{start:{line:46,column:2},end:{line:46,column:3}},loc:{start:{line:46,column:37},end:{line:55,column:3}},line:46},"9":{name:"(anonymous_9)",decl:{start:{line:63,column:2},end:{line:63,column:3}},loc:{start:{line:63,column:26},end:{line:78,column:3}},line:63},"10":{name:"(anonymous_10)",decl:{start:{line:68,column:41},end:{line:68,column:42}},loc:{start:{line:68,column:53},end:{line:72,column:7}},line:68},"11":{name:"(anonymous_11)",decl:{start:{line:87,column:2},end:{line:87,column:3}},loc:{start:{line:87,column:36},end:{line:179,column:3}},line:87},"12":{name:"(anonymous_12)",decl:{start:{line:88,column:23},end:{line:88,column:24}},loc:{start:{line:88,column:44},end:{line:178,column:5}},line:88},"13":{name:"(anonymous_13)",decl:{start:{line:137,column:59},end:{line:137,column:60}},loc:{start:{line:137,column:70},end:{line:151,column:7}},line:137},"14":{name:"(anonymous_14)",decl:{start:{line:145,column:32},end:{line:145,column:33}},loc:{start:{line:145,column:40},end:{line:145,column:66}},line:145},"15":{name:"(anonymous_15)",decl:{start:{line:151,column:14},end:{line:151,column:15}},loc:{start:{line:151,column:25},end:{line:155,column:7}},line:151},"16":{name:"(anonymous_16)",decl:{start:{line:155,column:14},end:{line:155,column:15}},loc:{start:{line:155,column:20},end:{line:175,column:7}},line:155},"17":{name:"(anonymous_17)",decl:{start:{line:175,column:15},end:{line:175,column:16}},loc:{start:{line:175,column:24},end:{line:177,column:7}},line:175},"18":{name:"(anonymous_18)",decl:{start:{line:181,column:2},end:{line:181,column:3}},loc:{start:{line:181,column:16},end:{line:205,column:3}},line:181},"19":{name:"(anonymous_19)",decl:{start:{line:191,column:50},end:{line:191,column:51}},loc:{start:{line:191,column:62},end:{line:204,column:5}},line:191},"20":{name:"(anonymous_20)",decl:{start:{line:207,column:2},end:{line:207,column:3}},loc:{start:{line:207,column:25},end:{line:268,column:3}},line:207},"21":{name:"(anonymous_21)",decl:{start:{line:285,column:2},end:{line:285,column:3}},loc:{start:{line:285,column:27},end:{line:324,column:3}},line:285},"22":{name:"(anonymous_22)",decl:{start:{line:326,column:2},end:{line:326,column:3}},loc:{start:{line:326,column:28},end:{line:336,column:3}},line:326},"23":{name:"(anonymous_23)",decl:{start:{line:327,column:55},end:{line:327,column:56}},loc:{start:{line:327,column:63},end:{line:333,column:5}},line:327},"24":{name:"(anonymous_24)",decl:{start:{line:333,column:13},end:{line:333,column:14}},loc:{start:{line:333,column:22},end:{line:335,column:5}},line:333},"25":{name:"(anonymous_25)",decl:{start:{line:338,column:2},end:{line:338,column:3}},loc:{start:{line:338,column:20},end:{line:360,column:3}},line:338},"26":{name:"(anonymous_26)",decl:{start:{line:346,column:63},end:{line:346,column:64}},loc:{start:{line:346,column:74},end:{line:356,column:7}},line:346},"27":{name:"(anonymous_27)",decl:{start:{line:348,column:145},end:{line:348,column:146}},loc:{start:{line:348,column:151},end:{line:352,column:11}},line:348},"28":{name:"(anonymous_28)",decl:{start:{line:362,column:2},end:{line:362,column:3}},loc:{start:{line:362,column:39},end:{line:367,column:3}},line:362},"29":{name:"(anonymous_29)",decl:{start:{line:369,column:2},end:{line:369,column:3}},loc:{start:{line:369,column:30},end:{line:386,column:3}},line:369},"30":{name:"(anonymous_30)",decl:{start:{line:388,column:2},end:{line:388,column:3}},loc:{start:{line:388,column:26},end:{line:419,column:3}},line:388},"31":{name:"(anonymous_31)",decl:{start:{line:404,column:61},end:{line:404,column:62}},loc:{start:{line:404,column:67},end:{line:408,column:5}},line:404},"32":{name:"(anonymous_32)",decl:{start:{line:408,column:7},end:{line:408,column:8}},loc:{start:{line:408,column:14},end:{line:418,column:5}},line:408},"33":{name:"(anonymous_33)",decl:{start:{line:421,column:2},end:{line:421,column:3}},loc:{start:{line:421,column:38},end:{line:459,column:3}},line:421},"34":{name:"(anonymous_34)",decl:{start:{line:438,column:12},end:{line:438,column:13}},loc:{start:{line:438,column:23},end:{line:458,column:5}},line:438},"35":{name:"(anonymous_35)",decl:{start:{line:452,column:66},end:{line:452,column:67}},loc:{start:{line:452,column:72},end:{line:457,column:7}},line:452},"36":{name:"(anonymous_36)",decl:{start:{line:461,column:2},end:{line:461,column:3}},loc:{start:{line:461,column:16},end:{line:501,column:3}},line:461},"37":{name:"(anonymous_37)",decl:{start:{line:462,column:32},end:{line:462,column:33}},loc:{start:{line:462,column:39},end:{line:464,column:5}},line:462},"38":{name:"(anonymous_38)",decl:{start:{line:465,column:72},end:{line:465,column:73}},loc:{start:{line:465,column:79},end:{line:467,column:5}},line:465},"39":{name:"(anonymous_39)",decl:{start:{line:468,column:35},end:{line:468,column:36}},loc:{start:{line:468,column:42},end:{line:470,column:5}},line:468},"40":{name:"(anonymous_40)",decl:{start:{line:471,column:42},end:{line:471,column:43}},loc:{start:{line:471,column:49},end:{line:473,column:5}},line:471},"41":{name:"(anonymous_41)",decl:{start:{line:474,column:81},end:{line:474,column:82}},loc:{start:{line:474,column:88},end:{line:476,column:5}},line:474},"42":{name:"(anonymous_42)",decl:{start:{line:477,column:45},end:{line:477,column:46}},loc:{start:{line:477,column:52},end:{line:479,column:5}},line:477},"43":{name:"(anonymous_43)",decl:{start:{line:480,column:32},end:{line:480,column:33}},loc:{start:{line:480,column:39},end:{line:482,column:5}},line:480},"44":{name:"(anonymous_44)",decl:{start:{line:483,column:33},end:{line:483,column:34}},loc:{start:{line:483,column:40},end:{line:485,column:5}},line:483},"45":{name:"(anonymous_45)",decl:{start:{line:486,column:35},end:{line:486,column:36}},loc:{start:{line:486,column:42},end:{line:488,column:5}},line:486},"46":{name:"(anonymous_46)",decl:{start:{line:489,column:34},end:{line:489,column:35}},loc:{start:{line:489,column:41},end:{line:491,column:5}},line:489},"47":{name:"(anonymous_47)",decl:{start:{line:492,column:48},end:{line:492,column:49}},loc:{start:{line:492,column:55},end:{line:494,column:5}},line:492},"48":{name:"(anonymous_48)",decl:{start:{line:495,column:52},end:{line:495,column:53}},loc:{start:{line:495,column:59},end:{line:497,column:5}},line:495},"49":{name:"(anonymous_49)",decl:{start:{line:498,column:41},end:{line:498,column:42}},loc:{start:{line:498,column:48},end:{line:500,column:5}},line:498}},branchMap:{"0":{loc:{start:{line:28,column:46},end:{line:28,column:92}},type:"cond-expr",locations:[{start:{line:28,column:70},end:{line:28,column:73}},{start:{line:28,column:76},end:{line:28,column:92}}],line:28},"1":{loc:{start:{line:28,column:46},end:{line:28,column:67}},type:"binary-expr",locations:[{start:{line:28,column:46},end:{line:28,column:49}},{start:{line:28,column:53},end:{line:28,column:67}}],line:28},"2":{loc:{start:{line:30,column:75},end:{line:30,column:330}},type:"if",locations:[{start:{line:30,column:75},end:{line:30,column:330}},{start:{line:30,column:75},end:{line:30,column:330}}],line:30},"3":{loc:{start:{line:30,column:163},end:{line:30,column:296}},type:"if",locations:[{start:{line:30,column:163},end:{line:30,column:296}},{start:{line:30,column:163},end:{line:30,column:296}}],line:30},"4":{loc:{start:{line:32,column:91},end:{line:32,column:131}},type:"cond-expr",locations:[{start:{line:32,column:114},end:{line:32,column:126}},{start:{line:32,column:129},end:{line:32,column:131}}],line:32},"5":{loc:{start:{line:32,column:133},end:{line:32,column:515}},type:"if",locations:[{start:{line:32,column:133},end:{line:32,column:515}},{start:{line:32,column:133},end:{line:32,column:515}}],line:32},"6":{loc:{start:{line:32,column:255},end:{line:32,column:515}},type:"if",locations:[{start:{line:32,column:255},end:{line:32,column:515}},{start:{line:32,column:255},end:{line:32,column:515}}],line:32},"7":{loc:{start:{line:34,column:44},end:{line:34,column:195}},type:"if",locations:[{start:{line:34,column:44},end:{line:34,column:195}},{start:{line:34,column:44},end:{line:34,column:195}}],line:34},"8":{loc:{start:{line:48,column:6},end:{line:53,column:7}},type:"if",locations:[{start:{line:48,column:6},end:{line:53,column:7}},{start:{line:48,column:6},end:{line:53,column:7}}],line:48},"9":{loc:{start:{line:50,column:8},end:{line:52,column:9}},type:"if",locations:[{start:{line:50,column:8},end:{line:52,column:9}},{start:{line:50,column:8},end:{line:52,column:9}}],line:50},"10":{loc:{start:{line:50,column:12},end:{line:50,column:68}},type:"binary-expr",locations:[{start:{line:50,column:12},end:{line:50,column:28}},{start:{line:50,column:32},end:{line:50,column:68}}],line:50},"11":{loc:{start:{line:67,column:4},end:{line:77,column:5}},type:"if",locations:[{start:{line:67,column:4},end:{line:77,column:5}},{start:{line:67,column:4},end:{line:77,column:5}}],line:67},"12":{loc:{start:{line:69,column:8},end:{line:71,column:9}},type:"if",locations:[{start:{line:69,column:8},end:{line:71,column:9}},{start:{line:69,column:8},end:{line:71,column:9}}],line:69},"13":{loc:{start:{line:74,column:6},end:{line:76,column:7}},type:"if",locations:[{start:{line:74,column:6},end:{line:76,column:7}},{start:{line:74,column:6},end:{line:76,column:7}}],line:74},"14":{loc:{start:{line:92,column:6},end:{line:94,column:7}},type:"if",locations:[{start:{line:92,column:6},end:{line:94,column:7}},{start:{line:92,column:6},end:{line:94,column:7}}],line:92},"15":{loc:{start:{line:92,column:10},end:{line:92,column:112}},type:"binary-expr",locations:[{start:{line:92,column:10},end:{line:92,column:27}},{start:{line:92,column:31},end:{line:92,column:40}},{start:{line:92,column:44},end:{line:92,column:62}},{start:{line:92,column:66},end:{line:92,column:80}},{start:{line:92,column:84},end:{line:92,column:93}},{start:{line:92,column:97},end:{line:92,column:112}}],line:92},"16":{loc:{start:{line:102,column:6},end:{line:104,column:7}},type:"if",locations:[{start:{line:102,column:6},end:{line:104,column:7}},{start:{line:102,column:6},end:{line:104,column:7}}],line:102},"17":{loc:{start:{line:102,column:10},end:{line:102,column:29}},type:"binary-expr",locations:[{start:{line:102,column:10},end:{line:102,column:19}},{start:{line:102,column:23},end:{line:102,column:29}}],line:102},"18":{loc:{start:{line:106,column:6},end:{line:108,column:7}},type:"if",locations:[{start:{line:106,column:6},end:{line:108,column:7}},{start:{line:106,column:6},end:{line:108,column:7}}],line:106},"19":{loc:{start:{line:110,column:6},end:{line:112,column:7}},type:"if",locations:[{start:{line:110,column:6},end:{line:112,column:7}},{start:{line:110,column:6},end:{line:112,column:7}}],line:110},"20":{loc:{start:{line:110,column:10},end:{line:110,column:120}},type:"binary-expr",locations:[{start:{line:110,column:10},end:{line:110,column:38}},{start:{line:110,column:42},end:{line:110,column:47}},{start:{line:110,column:51},end:{line:110,column:76}},{start:{line:110,column:80},end:{line:110,column:88}},{start:{line:110,column:92},end:{line:110,column:120}}],line:110},"21":{loc:{start:{line:118,column:6},end:{line:135,column:7}},type:"if",locations:[{start:{line:118,column:6},end:{line:135,column:7}},{start:{line:118,column:6},end:{line:135,column:7}}],line:118},"22":{loc:{start:{line:118,column:10},end:{line:118,column:27}},type:"binary-expr",locations:[{start:{line:118,column:10},end:{line:118,column:15}},{start:{line:118,column:19},end:{line:118,column:27}}],line:118},"23":{loc:{start:{line:123,column:13},end:{line:135,column:7}},type:"if",locations:[{start:{line:123,column:13},end:{line:135,column:7}},{start:{line:123,column:13},end:{line:135,column:7}}],line:123},"24":{loc:{start:{line:138,column:8},end:{line:140,column:9}},type:"if",locations:[{start:{line:138,column:8},end:{line:140,column:9}},{start:{line:138,column:8},end:{line:140,column:9}}],line:138},"25":{loc:{start:{line:142,column:8},end:{line:148,column:9}},type:"if",locations:[{start:{line:142,column:8},end:{line:148,column:9}},{start:{line:142,column:8},end:{line:148,column:9}}],line:142},"26":{loc:{start:{line:156,column:8},end:{line:158,column:9}},type:"if",locations:[{start:{line:156,column:8},end:{line:158,column:9}},{start:{line:156,column:8},end:{line:158,column:9}}],line:156},"27":{loc:{start:{line:164,column:8},end:{line:166,column:9}},type:"if",locations:[{start:{line:164,column:8},end:{line:166,column:9}},{start:{line:164,column:8},end:{line:166,column:9}}],line:164},"28":{loc:{start:{line:164,column:12},end:{line:164,column:79}},type:"binary-expr",locations:[{start:{line:164,column:12},end:{line:164,column:30}},{start:{line:164,column:34},end:{line:164,column:42}},{start:{line:164,column:46},end:{line:164,column:79}}],line:164},"29":{loc:{start:{line:168,column:8},end:{line:170,column:9}},type:"if",locations:[{start:{line:168,column:8},end:{line:170,column:9}},{start:{line:168,column:8},end:{line:170,column:9}}],line:168},"30":{loc:{start:{line:168,column:12},end:{line:168,column:108}},type:"binary-expr",locations:[{start:{line:168,column:12},end:{line:168,column:39}},{start:{line:168,column:43},end:{line:168,column:85}},{start:{line:168,column:89},end:{line:168,column:108}}],line:168},"31":{loc:{start:{line:182,column:4},end:{line:184,column:5}},type:"if",locations:[{start:{line:182,column:4},end:{line:184,column:5}},{start:{line:182,column:4},end:{line:184,column:5}}],line:182},"32":{loc:{start:{line:182,column:8},end:{line:182,column:43}},type:"binary-expr",locations:[{start:{line:182,column:8},end:{line:182,column:17}},{start:{line:182,column:21},end:{line:182,column:43}}],line:182},"33":{loc:{start:{line:192,column:6},end:{line:203,column:7}},type:"if",locations:[{start:{line:192,column:6},end:{line:203,column:7}},{start:{line:192,column:6},end:{line:203,column:7}}],line:192},"34":{loc:{start:{line:192,column:10},end:{line:192,column:88}},type:"binary-expr",locations:[{start:{line:192,column:10},end:{line:192,column:27}},{start:{line:192,column:31},end:{line:192,column:59}},{start:{line:192,column:63},end:{line:192,column:88}}],line:192},"35":{loc:{start:{line:210,column:4},end:{line:233,column:5}},type:"if",locations:[{start:{line:210,column:4},end:{line:233,column:5}},{start:{line:210,column:4},end:{line:233,column:5}}],line:210},"36":{loc:{start:{line:210,column:8},end:{line:210,column:77}},type:"binary-expr",locations:[{start:{line:210,column:8},end:{line:210,column:33}},{start:{line:210,column:37},end:{line:210,column:77}}],line:210},"37":{loc:{start:{line:213,column:6},end:{line:232,column:7}},type:"if",locations:[{start:{line:213,column:6},end:{line:232,column:7}},{start:{line:213,column:6},end:{line:232,column:7}}],line:213},"38":{loc:{start:{line:224,column:8},end:{line:226,column:9}},type:"if",locations:[{start:{line:224,column:8},end:{line:226,column:9}},{start:{line:224,column:8},end:{line:226,column:9}}],line:224},"39":{loc:{start:{line:230,column:8},end:{line:231,column:136}},type:"if",locations:[{start:{line:230,column:8},end:{line:231,column:136}},{start:{line:230,column:8},end:{line:231,column:136}}],line:230},"40":{loc:{start:{line:286,column:4},end:{line:288,column:5}},type:"if",locations:[{start:{line:286,column:4},end:{line:288,column:5}},{start:{line:286,column:4},end:{line:288,column:5}}],line:286},"41":{loc:{start:{line:290,column:19},end:{line:290,column:54}},type:"binary-expr",locations:[{start:{line:290,column:19},end:{line:290,column:34}},{start:{line:290,column:38},end:{line:290,column:54}}],line:290},"42":{loc:{start:{line:292,column:4},end:{line:294,column:5}},type:"if",locations:[{start:{line:292,column:4},end:{line:294,column:5}},{start:{line:292,column:4},end:{line:294,column:5}}],line:292},"43":{loc:{start:{line:301,column:4},end:{line:303,column:5}},type:"if",locations:[{start:{line:301,column:4},end:{line:303,column:5}},{start:{line:301,column:4},end:{line:303,column:5}}],line:301},"44":{loc:{start:{line:343,column:4},end:{line:357,column:5}},type:"if",locations:[{start:{line:343,column:4},end:{line:357,column:5}},{start:{line:343,column:4},end:{line:357,column:5}}],line:343},"45":{loc:{start:{line:343,column:8},end:{line:343,column:41}},type:"binary-expr",locations:[{start:{line:343,column:8},end:{line:343,column:16}},{start:{line:343,column:20},end:{line:343,column:41}}],line:343},"46":{loc:{start:{line:347,column:8},end:{line:353,column:9}},type:"if",locations:[{start:{line:347,column:8},end:{line:353,column:9}},{start:{line:347,column:8},end:{line:353,column:9}}],line:347},"47":{loc:{start:{line:347,column:12},end:{line:347,column:53}},type:"binary-expr",locations:[{start:{line:347,column:12},end:{line:347,column:27}},{start:{line:347,column:31},end:{line:347,column:53}}],line:347},"48":{loc:{start:{line:379,column:6},end:{line:384,column:7}},type:"if",locations:[{start:{line:379,column:6},end:{line:384,column:7}},{start:{line:379,column:6},end:{line:384,column:7}}],line:379},"49":{loc:{start:{line:395,column:4},end:{line:397,column:5}},type:"if",locations:[{start:{line:395,column:4},end:{line:397,column:5}},{start:{line:395,column:4},end:{line:397,column:5}}],line:395},"50":{loc:{start:{line:399,column:4},end:{line:401,column:5}},type:"if",locations:[{start:{line:399,column:4},end:{line:401,column:5}},{start:{line:399,column:4},end:{line:401,column:5}}],line:399},"51":{loc:{start:{line:409,column:6},end:{line:417,column:7}},type:"if",locations:[{start:{line:409,column:6},end:{line:417,column:7}},{start:{line:409,column:6},end:{line:417,column:7}}],line:409},"52":{loc:{start:{line:428,column:4},end:{line:430,column:5}},type:"if",locations:[{start:{line:428,column:4},end:{line:430,column:5}},{start:{line:428,column:4},end:{line:430,column:5}}],line:428},"53":{loc:{start:{line:432,column:4},end:{line:434,column:5}},type:"if",locations:[{start:{line:432,column:4},end:{line:434,column:5}},{start:{line:432,column:4},end:{line:434,column:5}}],line:432},"54":{loc:{start:{line:439,column:6},end:{line:441,column:7}},type:"if",locations:[{start:{line:439,column:6},end:{line:441,column:7}},{start:{line:439,column:6},end:{line:441,column:7}}],line:439},"55":{loc:{start:{line:439,column:10},end:{line:439,column:47}},type:"binary-expr",locations:[{start:{line:439,column:10},end:{line:439,column:25}},{start:{line:439,column:29},end:{line:439,column:47}}],line:439},"56":{loc:{start:{line:447,column:6},end:{line:449,column:7}},type:"if",locations:[{start:{line:447,column:6},end:{line:449,column:7}},{start:{line:447,column:6},end:{line:449,column:7}}],line:447}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0,0,0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0,0,0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0,0],"29":[0,0],"30":[0,0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0]},inputSourceMap:{version:3,sources:["../../src/Routers/UsersRouter.js"],names:["UsersRouter","ClassesRouter","className","removeHiddenProperties","obj","key","Object","prototype","hasOwnProperty","call","test","_sanitizeAuthData","user","password","authData","keys","forEach","provider","length","_authenticateUserFromRequest","req","Promise","resolve","reject","payload","body","username","query","email","Parse","Error","USERNAME_MISSING","PASSWORD_MISSING","OBJECT_NOT_FOUND","isValidPassword","$or","config","database","find","then","results","loggerController","warn","filter","passwordCrypto","compare","correct","accountLockoutPolicy","AccountLockout","handleLoginAttempt","auth","isMaster","ACL","verifyUserEmails","preventLoginWithUnverifiedEmail","emailVerified","EMAIL_NOT_FOUND","catch","error","handleMe","info","sessionToken","INVALID_SESSION_TOKEN","rest","Auth","master","include","clientSDK","context","response","handleLogIn","passwordPolicy","maxPasswordAge","changedAt","_password_changed_at","Date","update","_encode","__type","iso","expiresAt","getTime","filesController","expandFilesInObject","TriggerTypes","beforeLogin","User","fromJSON","assign","sessionData","createSession","RestWrite","userId","objectId","createdWith","action","authProvider","installationId","afterLoginUser","afterLogin","handleLogInAs","OPERATION_FORBIDDEN","INVALID_VALUE","queryResults","handleVerifyPassword","handleLogOut","success","undefined","records","del","_runAfterLogoutTrigger","session","afterLogout","Session","_throwOnBadEmailConfig","Config","validateEmailConfiguration","emailAdapter","userController","adapter","appName","publicServerURL","emailVerifyTokenValidityDuration","emailVerifyTokenReuseIfValid","e","INTERNAL_SERVER_ERROR","handleResetRequest","EMAIL_MISSING","INVALID_EMAIL_ADDRESS","sendPasswordResetEmail","err","code","handleVerificationEmailRequest","OTHER_CAUSE","regenerateEmailVerifyToken","sendVerificationEmail","mountRoutes","route","handleFind","promiseEnsureIdempotency","handleCreate","handleGet","handleUpdate","handleDelete"],mappings:"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",sourcesContent:["// These methods handle the User-related routes.\n\nimport Parse from 'parse/node';\nimport Config from '../Config';\nimport AccountLockout from '../AccountLockout';\nimport ClassesRouter from './ClassesRouter';\nimport rest from '../rest';\nimport Auth from '../Auth';\nimport passwordCrypto from '../password';\nimport { maybeRunTrigger, Types as TriggerTypes } from '../triggers';\nimport { promiseEnsureIdempotency } from '../middlewares';\nimport RestWrite from '../RestWrite';\n\nexport class UsersRouter extends ClassesRouter {\n  className() {\n    return '_User';\n  }\n\n  /**\n   * Removes all \"_\" prefixed properties from an object, except \"__type\"\n   * @param {Object} obj An object.\n   */\n  static removeHiddenProperties(obj) {\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        // Regexp comes from Parse.Object.prototype.validate\n        if (key !== '__type' && !/^[A-Za-z][0-9A-Za-z_]*$/.test(key)) {\n          delete obj[key];\n        }\n      }\n    }\n  }\n\n  /**\n   * After retrieving a user directly from the database, we need to remove the\n   * password from the object (for security), and fix an issue some SDKs have\n   * with null values\n   */\n  _sanitizeAuthData(user) {\n    delete user.password;\n\n    // Sometimes the authData still has null on that keys\n    // https://github.com/parse-community/parse-server/issues/935\n    if (user.authData) {\n      Object.keys(user.authData).forEach(provider => {\n        if (user.authData[provider] === null) {\n          delete user.authData[provider];\n        }\n      });\n      if (Object.keys(user.authData).length == 0) {\n        delete user.authData;\n      }\n    }\n  }\n\n  /**\n   * Validates a password request in login and verifyPassword\n   * @param {Object} req The request\n   * @returns {Object} User object\n   * @private\n   */\n  _authenticateUserFromRequest(req) {\n    return new Promise((resolve, reject) => {\n      // Use query parameters instead if provided in url\n      let payload = req.body;\n      if (\n        (!payload.username && req.query && req.query.username) ||\n        (!payload.email && req.query && req.query.email)\n      ) {\n        payload = req.query;\n      }\n      const { username, email, password } = payload;\n\n      // TODO: use the right error codes / descriptions.\n      if (!username && !email) {\n        throw new Parse.Error(Parse.Error.USERNAME_MISSING, 'username/email is required.');\n      }\n      if (!password) {\n        throw new Parse.Error(Parse.Error.PASSWORD_MISSING, 'password is required.');\n      }\n      if (\n        typeof password !== 'string' ||\n        (email && typeof email !== 'string') ||\n        (username && typeof username !== 'string')\n      ) {\n        throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid username/password.');\n      }\n\n      let user;\n      let isValidPassword = false;\n      let query;\n      if (email && username) {\n        query = { email, username };\n      } else if (email) {\n        query = { email };\n      } else {\n        query = { $or: [{ username }, { email: username }] };\n      }\n      return req.config.database\n        .find('_User', query)\n        .then(results => {\n          if (!results.length) {\n            throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid username/password.');\n          }\n\n          if (results.length > 1) {\n            // corner case where user1 has username == user2 email\n            req.config.loggerController.warn(\n              \"There is a user which email is the same as another user's username, logging in based on username\"\n            );\n            user = results.filter(user => user.username === username)[0];\n          } else {\n            user = results[0];\n          }\n\n          return passwordCrypto.compare(password, user.password);\n        })\n        .then(correct => {\n          isValidPassword = correct;\n          const accountLockoutPolicy = new AccountLockout(user, req.config);\n          return accountLockoutPolicy.handleLoginAttempt(isValidPassword);\n        })\n        .then(() => {\n          if (!isValidPassword) {\n            throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid username/password.');\n          }\n          // Ensure the user isn't locked out\n          // A locked out user won't be able to login\n          // To lock a user out, just set the ACL to `masterKey` only  ({}).\n          // Empty ACL is OK\n          if (!req.auth.isMaster && user.ACL && Object.keys(user.ACL).length == 0) {\n            throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid username/password.');\n          }\n          if (\n            req.config.verifyUserEmails &&\n            req.config.preventLoginWithUnverifiedEmail &&\n            !user.emailVerified\n          ) {\n            throw new Parse.Error(Parse.Error.EMAIL_NOT_FOUND, 'User email is not verified.');\n          }\n\n          this._sanitizeAuthData(user);\n\n          return resolve(user);\n        })\n        .catch(error => {\n          return reject(error);\n        });\n    });\n  }\n\n  handleMe(req) {\n    if (!req.info || !req.info.sessionToken) {\n      throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Invalid session token');\n    }\n    const sessionToken = req.info.sessionToken;\n    return rest\n      .find(\n        req.config,\n        Auth.master(req.config),\n        '_Session',\n        { sessionToken },\n        { include: 'user' },\n        req.info.clientSDK,\n        req.info.context\n      )\n      .then(response => {\n        if (!response.results || response.results.length == 0 || !response.results[0].user) {\n          throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Invalid session token');\n        } else {\n          const user = response.results[0].user;\n          // Send token back on the login, because SDKs expect that.\n          user.sessionToken = sessionToken;\n\n          // Remove hidden properties.\n          UsersRouter.removeHiddenProperties(user);\n\n          return { response: user };\n        }\n      });\n  }\n\n  async handleLogIn(req) {\n    const user = await this._authenticateUserFromRequest(req);\n\n    // handle password expiry policy\n    if (req.config.passwordPolicy && req.config.passwordPolicy.maxPasswordAge) {\n      let changedAt = user._password_changed_at;\n\n      if (!changedAt) {\n        // password was created before expiry policy was enabled.\n        // simply update _User object so that it will start enforcing from now\n        changedAt = new Date();\n        req.config.database.update(\n          '_User',\n          { username: user.username },\n          { _password_changed_at: Parse._encode(changedAt) }\n        );\n      } else {\n        // check whether the password has expired\n        if (changedAt.__type == 'Date') {\n          changedAt = new Date(changedAt.iso);\n        }\n        // Calculate the expiry time.\n        const expiresAt = new Date(\n          changedAt.getTime() + 86400000 * req.config.passwordPolicy.maxPasswordAge\n        );\n        if (expiresAt < new Date())\n          // fail of current time is past password expiry time\n          throw new Parse.Error(\n            Parse.Error.OBJECT_NOT_FOUND,\n            'Your password has expired. Please reset your password.'\n          );\n      }\n    }\n\n    // Remove hidden properties.\n    UsersRouter.removeHiddenProperties(user);\n\n    req.config.filesController.expandFilesInObject(req.config, user);\n\n    // Before login trigger; throws if failure\n    await maybeRunTrigger(\n      TriggerTypes.beforeLogin,\n      req.auth,\n      Parse.User.fromJSON(Object.assign({ className: '_User' }, user)),\n      null,\n      req.config\n    );\n\n    const { sessionData, createSession } = RestWrite.createSession(req.config, {\n      userId: user.objectId,\n      createdWith: {\n        action: 'login',\n        authProvider: 'password',\n      },\n      installationId: req.info.installationId,\n    });\n\n    user.sessionToken = sessionData.sessionToken;\n\n    await createSession();\n\n    const afterLoginUser = Parse.User.fromJSON(Object.assign({ className: '_User' }, user));\n    maybeRunTrigger(\n      TriggerTypes.afterLogin,\n      { ...req.auth, user: afterLoginUser },\n      afterLoginUser,\n      null,\n      req.config\n    );\n\n    return { response: user };\n  }\n\n  /**\n   * This allows master-key clients to create user sessions without access to\n   * user credentials. This enables systems that can authenticate access another\n   * way (API key, app administrators) to act on a user's behalf.\n   *\n   * We create a new session rather than looking for an existing session; we\n   * want this to work in situations where the user is logged out on all\n   * devices, since this can be used by automated systems acting on the user's\n   * behalf.\n   *\n   * For the moment, we're omitting event hooks and lockout checks, since\n   * immediate use cases suggest /loginAs could be used for semantically\n   * different reasons from /login\n   */\n  async handleLogInAs(req) {\n    if (!req.auth.isMaster) {\n      throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, 'master key is required');\n    }\n\n    const userId = req.body.userId || req.query.userId;\n    if (!userId) {\n      throw new Parse.Error(\n        Parse.Error.INVALID_VALUE,\n        'userId must not be empty, null, or undefined'\n      );\n    }\n\n    const queryResults = await req.config.database.find('_User', { objectId: userId });\n    const user = queryResults[0];\n    if (!user) {\n      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'user not found');\n    }\n\n    this._sanitizeAuthData(user);\n\n    const { sessionData, createSession } = RestWrite.createSession(req.config, {\n      userId,\n      createdWith: {\n        action: 'login',\n        authProvider: 'masterkey',\n      },\n      installationId: req.info.installationId,\n    });\n\n    user.sessionToken = sessionData.sessionToken;\n\n    await createSession();\n\n    return { response: user };\n  }\n\n  handleVerifyPassword(req) {\n    return this._authenticateUserFromRequest(req)\n      .then(user => {\n        // Remove hidden properties.\n        UsersRouter.removeHiddenProperties(user);\n\n        return { response: user };\n      })\n      .catch(error => {\n        throw error;\n      });\n  }\n\n  handleLogOut(req) {\n    const success = { response: {} };\n    if (req.info && req.info.sessionToken) {\n      return rest\n        .find(\n          req.config,\n          Auth.master(req.config),\n          '_Session',\n          { sessionToken: req.info.sessionToken },\n          undefined,\n          req.info.clientSDK,\n          req.info.context\n        )\n        .then(records => {\n          if (records.results && records.results.length) {\n            return rest\n              .del(\n                req.config,\n                Auth.master(req.config),\n                '_Session',\n                records.results[0].objectId,\n                req.info.context\n              )\n              .then(() => {\n                this._runAfterLogoutTrigger(req, records.results[0]);\n                return Promise.resolve(success);\n              });\n          }\n          return Promise.resolve(success);\n        });\n    }\n    return Promise.resolve(success);\n  }\n\n  _runAfterLogoutTrigger(req, session) {\n    // After logout trigger\n    maybeRunTrigger(\n      TriggerTypes.afterLogout,\n      req.auth,\n      Parse.Session.fromJSON(Object.assign({ className: '_Session' }, session)),\n      null,\n      req.config\n    );\n  }\n\n  _throwOnBadEmailConfig(req) {\n    try {\n      Config.validateEmailConfiguration({\n        emailAdapter: req.config.userController.adapter,\n        appName: req.config.appName,\n        publicServerURL: req.config.publicServerURL,\n        emailVerifyTokenValidityDuration: req.config.emailVerifyTokenValidityDuration,\n        emailVerifyTokenReuseIfValid: req.config.emailVerifyTokenReuseIfValid,\n      });\n    } catch (e) {\n      if (typeof e === 'string') {\n        // Maybe we need a Bad Configuration error, but the SDKs won't understand it. For now, Internal Server Error.\n        throw new Parse.Error(\n          Parse.Error.INTERNAL_SERVER_ERROR,\n          'An appName, publicServerURL, and emailAdapter are required for password reset and email verification functionality.'\n        );\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  handleResetRequest(req) {\n    this._throwOnBadEmailConfig(req);\n\n    const { email } = req.body;\n    if (!email) {\n      throw new Parse.Error(Parse.Error.EMAIL_MISSING, 'you must provide an email');\n    }\n    if (typeof email !== 'string') {\n      throw new Parse.Error(\n        Parse.Error.INVALID_EMAIL_ADDRESS,\n        'you must provide a valid email string'\n      );\n    }\n    const userController = req.config.userController;\n    return userController.sendPasswordResetEmail(email).then(\n      () => {\n        return Promise.resolve({\n          response: {},\n        });\n      },\n      err => {\n        if (err.code === Parse.Error.OBJECT_NOT_FOUND) {\n          // Return success so that this endpoint can't\n          // be used to enumerate valid emails\n          return Promise.resolve({\n            response: {},\n          });\n        } else {\n          throw err;\n        }\n      }\n    );\n  }\n\n  handleVerificationEmailRequest(req) {\n    this._throwOnBadEmailConfig(req);\n\n    const { email } = req.body;\n    if (!email) {\n      throw new Parse.Error(Parse.Error.EMAIL_MISSING, 'you must provide an email');\n    }\n    if (typeof email !== 'string') {\n      throw new Parse.Error(\n        Parse.Error.INVALID_EMAIL_ADDRESS,\n        'you must provide a valid email string'\n      );\n    }\n\n    return req.config.database.find('_User', { email: email }).then(results => {\n      if (!results.length || results.length < 1) {\n        throw new Parse.Error(Parse.Error.EMAIL_NOT_FOUND, `No user found with email ${email}`);\n      }\n      const user = results[0];\n\n      // remove password field, messes with saving on postgres\n      delete user.password;\n\n      if (user.emailVerified) {\n        throw new Parse.Error(Parse.Error.OTHER_CAUSE, `Email ${email} is already verified.`);\n      }\n\n      const userController = req.config.userController;\n      return userController.regenerateEmailVerifyToken(user).then(() => {\n        userController.sendVerificationEmail(user);\n        return { response: {} };\n      });\n    });\n  }\n\n  mountRoutes() {\n    this.route('GET', '/users', req => {\n      return this.handleFind(req);\n    });\n    this.route('POST', '/users', promiseEnsureIdempotency, req => {\n      return this.handleCreate(req);\n    });\n    this.route('GET', '/users/me', req => {\n      return this.handleMe(req);\n    });\n    this.route('GET', '/users/:objectId', req => {\n      return this.handleGet(req);\n    });\n    this.route('PUT', '/users/:objectId', promiseEnsureIdempotency, req => {\n      return this.handleUpdate(req);\n    });\n    this.route('DELETE', '/users/:objectId', req => {\n      return this.handleDelete(req);\n    });\n    this.route('GET', '/login', req => {\n      return this.handleLogIn(req);\n    });\n    this.route('POST', '/login', req => {\n      return this.handleLogIn(req);\n    });\n    this.route('POST', '/loginAs', req => {\n      return this.handleLogInAs(req);\n    });\n    this.route('POST', '/logout', req => {\n      return this.handleLogOut(req);\n    });\n    this.route('POST', '/requestPasswordReset', req => {\n      return this.handleResetRequest(req);\n    });\n    this.route('POST', '/verificationEmailRequest', req => {\n      return this.handleVerificationEmailRequest(req);\n    });\n    this.route('GET', '/verifyPassword', req => {\n      return this.handleVerifyPassword(req);\n    });\n  }\n}\n\nexport default UsersRouter;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"93662b72fd1810435f91d0de2057b1a01b54375c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1uxmp08xd6=function(){return actualCoverage;};}return actualCoverage;}cov_1uxmp08xd6();cov_1uxmp08xd6().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1uxmp08xd6().s[1]++;exports.default=exports.UsersRouter=void 0;var _node=(cov_1uxmp08xd6().s[2]++,_interopRequireDefault(require("parse/node")));var _Config=(cov_1uxmp08xd6().s[3]++,_interopRequireDefault(require("../Config")));var _AccountLockout=(cov_1uxmp08xd6().s[4]++,_interopRequireDefault(require("../AccountLockout")));var _ClassesRouter=(cov_1uxmp08xd6().s[5]++,_interopRequireDefault(require("./ClassesRouter")));var _rest=(cov_1uxmp08xd6().s[6]++,_interopRequireDefault(require("../rest")));var _Auth=(cov_1uxmp08xd6().s[7]++,_interopRequireDefault(require("../Auth")));var _password=(cov_1uxmp08xd6().s[8]++,_interopRequireDefault(require("../password")));var _triggers=(cov_1uxmp08xd6().s[9]++,require("../triggers"));var _middlewares=(cov_1uxmp08xd6().s[10]++,require("../middlewares"));var _RestWrite=(cov_1uxmp08xd6().s[11]++,_interopRequireDefault(require("../RestWrite")));function _interopRequireDefault(obj){cov_1uxmp08xd6().f[0]++;cov_1uxmp08xd6().s[12]++;return(cov_1uxmp08xd6().b[1][0]++,obj)&&(cov_1uxmp08xd6().b[1][1]++,obj.__esModule)?(cov_1uxmp08xd6().b[0][0]++,obj):(cov_1uxmp08xd6().b[0][1]++,{default:obj});}function ownKeys(object,enumerableOnly){cov_1uxmp08xd6().f[1]++;var keys=(cov_1uxmp08xd6().s[13]++,Object.keys(object));cov_1uxmp08xd6().s[14]++;if(Object.getOwnPropertySymbols){cov_1uxmp08xd6().b[2][0]++;var symbols=(cov_1uxmp08xd6().s[15]++,Object.getOwnPropertySymbols(object));cov_1uxmp08xd6().s[16]++;if(enumerableOnly){cov_1uxmp08xd6().b[3][0]++;cov_1uxmp08xd6().s[17]++;symbols=symbols.filter(function(sym){cov_1uxmp08xd6().f[2]++;cov_1uxmp08xd6().s[18]++;return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}else{cov_1uxmp08xd6().b[3][1]++;}cov_1uxmp08xd6().s[19]++;keys.push.apply(keys,symbols);}else{cov_1uxmp08xd6().b[2][1]++;}cov_1uxmp08xd6().s[20]++;return keys;}function _objectSpread(target){cov_1uxmp08xd6().f[3]++;cov_1uxmp08xd6().s[21]++;for(var i=(cov_1uxmp08xd6().s[22]++,1);i<arguments.length;i++){var source=(cov_1uxmp08xd6().s[23]++,arguments[i]!=null?(cov_1uxmp08xd6().b[4][0]++,arguments[i]):(cov_1uxmp08xd6().b[4][1]++,{}));cov_1uxmp08xd6().s[24]++;if(i%2){cov_1uxmp08xd6().b[5][0]++;cov_1uxmp08xd6().s[25]++;ownKeys(Object(source),true).forEach(function(key){cov_1uxmp08xd6().f[4]++;cov_1uxmp08xd6().s[26]++;_defineProperty(target,key,source[key]);});}else{cov_1uxmp08xd6().b[5][1]++;cov_1uxmp08xd6().s[27]++;if(Object.getOwnPropertyDescriptors){cov_1uxmp08xd6().b[6][0]++;cov_1uxmp08xd6().s[28]++;Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{cov_1uxmp08xd6().b[6][1]++;cov_1uxmp08xd6().s[29]++;ownKeys(Object(source)).forEach(function(key){cov_1uxmp08xd6().f[5]++;cov_1uxmp08xd6().s[30]++;Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}}cov_1uxmp08xd6().s[31]++;return target;}function _defineProperty(obj,key,value){cov_1uxmp08xd6().f[6]++;cov_1uxmp08xd6().s[32]++;if(key in obj){cov_1uxmp08xd6().b[7][0]++;cov_1uxmp08xd6().s[33]++;Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{cov_1uxmp08xd6().b[7][1]++;cov_1uxmp08xd6().s[34]++;obj[key]=value;}cov_1uxmp08xd6().s[35]++;return obj;}class UsersRouter extends(_ClassesRouter.default){className(){cov_1uxmp08xd6().f[7]++;cov_1uxmp08xd6().s[36]++;return'_User';}/**
   * Removes all "_" prefixed properties from an object, except "__type"
   * @param {Object} obj An object.
   */static removeHiddenProperties(obj){cov_1uxmp08xd6().f[8]++;cov_1uxmp08xd6().s[37]++;for(var key in obj){cov_1uxmp08xd6().s[38]++;if(Object.prototype.hasOwnProperty.call(obj,key)){cov_1uxmp08xd6().b[8][0]++;cov_1uxmp08xd6().s[39]++;// Regexp comes from Parse.Object.prototype.validate
if((cov_1uxmp08xd6().b[10][0]++,key!=='__type')&&(cov_1uxmp08xd6().b[10][1]++,!/^[A-Za-z][0-9A-Za-z_]*$/.test(key))){cov_1uxmp08xd6().b[9][0]++;cov_1uxmp08xd6().s[40]++;delete obj[key];}else{cov_1uxmp08xd6().b[9][1]++;}}else{cov_1uxmp08xd6().b[8][1]++;}}}/**
   * After retrieving a user directly from the database, we need to remove the
   * password from the object (for security), and fix an issue some SDKs have
   * with null values
   */_sanitizeAuthData(user){cov_1uxmp08xd6().f[9]++;cov_1uxmp08xd6().s[41]++;delete user.password;// Sometimes the authData still has null on that keys
// https://github.com/parse-community/parse-server/issues/935
cov_1uxmp08xd6().s[42]++;if(user.authData){cov_1uxmp08xd6().b[11][0]++;cov_1uxmp08xd6().s[43]++;Object.keys(user.authData).forEach(provider=>{cov_1uxmp08xd6().f[10]++;cov_1uxmp08xd6().s[44]++;if(user.authData[provider]===null){cov_1uxmp08xd6().b[12][0]++;cov_1uxmp08xd6().s[45]++;delete user.authData[provider];}else{cov_1uxmp08xd6().b[12][1]++;}});cov_1uxmp08xd6().s[46]++;if(Object.keys(user.authData).length==0){cov_1uxmp08xd6().b[13][0]++;cov_1uxmp08xd6().s[47]++;delete user.authData;}else{cov_1uxmp08xd6().b[13][1]++;}}else{cov_1uxmp08xd6().b[11][1]++;}}/**
   * Validates a password request in login and verifyPassword
   * @param {Object} req The request
   * @returns {Object} User object
   * @private
   */_authenticateUserFromRequest(req){cov_1uxmp08xd6().f[11]++;cov_1uxmp08xd6().s[48]++;return new Promise((resolve,reject)=>{cov_1uxmp08xd6().f[12]++;// Use query parameters instead if provided in url
let payload=(cov_1uxmp08xd6().s[49]++,req.body);cov_1uxmp08xd6().s[50]++;if((cov_1uxmp08xd6().b[15][0]++,!payload.username)&&(cov_1uxmp08xd6().b[15][1]++,req.query)&&(cov_1uxmp08xd6().b[15][2]++,req.query.username)||(cov_1uxmp08xd6().b[15][3]++,!payload.email)&&(cov_1uxmp08xd6().b[15][4]++,req.query)&&(cov_1uxmp08xd6().b[15][5]++,req.query.email)){cov_1uxmp08xd6().b[14][0]++;cov_1uxmp08xd6().s[51]++;payload=req.query;}else{cov_1uxmp08xd6().b[14][1]++;}const{username,email,password}=(cov_1uxmp08xd6().s[52]++,payload);// TODO: use the right error codes / descriptions.
cov_1uxmp08xd6().s[53]++;if((cov_1uxmp08xd6().b[17][0]++,!username)&&(cov_1uxmp08xd6().b[17][1]++,!email)){cov_1uxmp08xd6().b[16][0]++;cov_1uxmp08xd6().s[54]++;throw new _node.default.Error(_node.default.Error.USERNAME_MISSING,'username/email is required.');}else{cov_1uxmp08xd6().b[16][1]++;}cov_1uxmp08xd6().s[55]++;if(!password){cov_1uxmp08xd6().b[18][0]++;cov_1uxmp08xd6().s[56]++;throw new _node.default.Error(_node.default.Error.PASSWORD_MISSING,'password is required.');}else{cov_1uxmp08xd6().b[18][1]++;}cov_1uxmp08xd6().s[57]++;if((cov_1uxmp08xd6().b[20][0]++,typeof password!=='string')||(cov_1uxmp08xd6().b[20][1]++,email)&&(cov_1uxmp08xd6().b[20][2]++,typeof email!=='string')||(cov_1uxmp08xd6().b[20][3]++,username)&&(cov_1uxmp08xd6().b[20][4]++,typeof username!=='string')){cov_1uxmp08xd6().b[19][0]++;cov_1uxmp08xd6().s[58]++;throw new _node.default.Error(_node.default.Error.OBJECT_NOT_FOUND,'Invalid username/password.');}else{cov_1uxmp08xd6().b[19][1]++;}let user;let isValidPassword=(cov_1uxmp08xd6().s[59]++,false);let query;cov_1uxmp08xd6().s[60]++;if((cov_1uxmp08xd6().b[22][0]++,email)&&(cov_1uxmp08xd6().b[22][1]++,username)){cov_1uxmp08xd6().b[21][0]++;cov_1uxmp08xd6().s[61]++;query={email,username};}else{cov_1uxmp08xd6().b[21][1]++;cov_1uxmp08xd6().s[62]++;if(email){cov_1uxmp08xd6().b[23][0]++;cov_1uxmp08xd6().s[63]++;query={email};}else{cov_1uxmp08xd6().b[23][1]++;cov_1uxmp08xd6().s[64]++;query={$or:[{username},{email:username}]};}}cov_1uxmp08xd6().s[65]++;return req.config.database.find('_User',query).then(results=>{cov_1uxmp08xd6().f[13]++;cov_1uxmp08xd6().s[66]++;if(!results.length){cov_1uxmp08xd6().b[24][0]++;cov_1uxmp08xd6().s[67]++;throw new _node.default.Error(_node.default.Error.OBJECT_NOT_FOUND,'Invalid username/password.');}else{cov_1uxmp08xd6().b[24][1]++;}cov_1uxmp08xd6().s[68]++;if(results.length>1){cov_1uxmp08xd6().b[25][0]++;cov_1uxmp08xd6().s[69]++;// corner case where user1 has username == user2 email
req.config.loggerController.warn("There is a user which email is the same as another user's username, logging in based on username");cov_1uxmp08xd6().s[70]++;user=results.filter(user=>{cov_1uxmp08xd6().f[14]++;cov_1uxmp08xd6().s[71]++;return user.username===username;})[0];}else{cov_1uxmp08xd6().b[25][1]++;cov_1uxmp08xd6().s[72]++;user=results[0];}cov_1uxmp08xd6().s[73]++;return _password.default.compare(password,user.password);}).then(correct=>{cov_1uxmp08xd6().f[15]++;cov_1uxmp08xd6().s[74]++;isValidPassword=correct;const accountLockoutPolicy=(cov_1uxmp08xd6().s[75]++,new _AccountLockout.default(user,req.config));cov_1uxmp08xd6().s[76]++;return accountLockoutPolicy.handleLoginAttempt(isValidPassword);}).then(()=>{cov_1uxmp08xd6().f[16]++;cov_1uxmp08xd6().s[77]++;if(!isValidPassword){cov_1uxmp08xd6().b[26][0]++;cov_1uxmp08xd6().s[78]++;throw new _node.default.Error(_node.default.Error.OBJECT_NOT_FOUND,'Invalid username/password.');}else{cov_1uxmp08xd6().b[26][1]++;}// Ensure the user isn't locked out
// A locked out user won't be able to login
// To lock a user out, just set the ACL to `masterKey` only  ({}).
// Empty ACL is OK
cov_1uxmp08xd6().s[79]++;if((cov_1uxmp08xd6().b[28][0]++,!req.auth.isMaster)&&(cov_1uxmp08xd6().b[28][1]++,user.ACL)&&(cov_1uxmp08xd6().b[28][2]++,Object.keys(user.ACL).length==0)){cov_1uxmp08xd6().b[27][0]++;cov_1uxmp08xd6().s[80]++;throw new _node.default.Error(_node.default.Error.OBJECT_NOT_FOUND,'Invalid username/password.');}else{cov_1uxmp08xd6().b[27][1]++;}cov_1uxmp08xd6().s[81]++;if((cov_1uxmp08xd6().b[30][0]++,req.config.verifyUserEmails)&&(cov_1uxmp08xd6().b[30][1]++,req.config.preventLoginWithUnverifiedEmail)&&(cov_1uxmp08xd6().b[30][2]++,!user.emailVerified)){cov_1uxmp08xd6().b[29][0]++;cov_1uxmp08xd6().s[82]++;throw new _node.default.Error(_node.default.Error.EMAIL_NOT_FOUND,'User email is not verified.');}else{cov_1uxmp08xd6().b[29][1]++;}cov_1uxmp08xd6().s[83]++;this._sanitizeAuthData(user);cov_1uxmp08xd6().s[84]++;return resolve(user);}).catch(error=>{cov_1uxmp08xd6().f[17]++;cov_1uxmp08xd6().s[85]++;return reject(error);});});}handleMe(req){cov_1uxmp08xd6().f[18]++;cov_1uxmp08xd6().s[86]++;if((cov_1uxmp08xd6().b[32][0]++,!req.info)||(cov_1uxmp08xd6().b[32][1]++,!req.info.sessionToken)){cov_1uxmp08xd6().b[31][0]++;cov_1uxmp08xd6().s[87]++;throw new _node.default.Error(_node.default.Error.INVALID_SESSION_TOKEN,'Invalid session token');}else{cov_1uxmp08xd6().b[31][1]++;}const sessionToken=(cov_1uxmp08xd6().s[88]++,req.info.sessionToken);cov_1uxmp08xd6().s[89]++;return _rest.default.find(req.config,_Auth.default.master(req.config),'_Session',{sessionToken},{include:'user'},req.info.clientSDK,req.info.context).then(response=>{cov_1uxmp08xd6().f[19]++;cov_1uxmp08xd6().s[90]++;if((cov_1uxmp08xd6().b[34][0]++,!response.results)||(cov_1uxmp08xd6().b[34][1]++,response.results.length==0)||(cov_1uxmp08xd6().b[34][2]++,!response.results[0].user)){cov_1uxmp08xd6().b[33][0]++;cov_1uxmp08xd6().s[91]++;throw new _node.default.Error(_node.default.Error.INVALID_SESSION_TOKEN,'Invalid session token');}else{cov_1uxmp08xd6().b[33][1]++;const user=(cov_1uxmp08xd6().s[92]++,response.results[0].user);// Send token back on the login, because SDKs expect that.
cov_1uxmp08xd6().s[93]++;user.sessionToken=sessionToken;// Remove hidden properties.
cov_1uxmp08xd6().s[94]++;UsersRouter.removeHiddenProperties(user);cov_1uxmp08xd6().s[95]++;return{response:user};}});}async handleLogIn(req){cov_1uxmp08xd6().f[20]++;const user=(cov_1uxmp08xd6().s[96]++,await this._authenticateUserFromRequest(req));// handle password expiry policy
cov_1uxmp08xd6().s[97]++;if((cov_1uxmp08xd6().b[36][0]++,req.config.passwordPolicy)&&(cov_1uxmp08xd6().b[36][1]++,req.config.passwordPolicy.maxPasswordAge)){cov_1uxmp08xd6().b[35][0]++;let changedAt=(cov_1uxmp08xd6().s[98]++,user._password_changed_at);cov_1uxmp08xd6().s[99]++;if(!changedAt){cov_1uxmp08xd6().b[37][0]++;cov_1uxmp08xd6().s[100]++;// password was created before expiry policy was enabled.
// simply update _User object so that it will start enforcing from now
changedAt=new Date();cov_1uxmp08xd6().s[101]++;req.config.database.update('_User',{username:user.username},{_password_changed_at:_node.default._encode(changedAt)});}else{cov_1uxmp08xd6().b[37][1]++;cov_1uxmp08xd6().s[102]++;// check whether the password has expired
if(changedAt.__type=='Date'){cov_1uxmp08xd6().b[38][0]++;cov_1uxmp08xd6().s[103]++;changedAt=new Date(changedAt.iso);}else{cov_1uxmp08xd6().b[38][1]++;}// Calculate the expiry time.
const expiresAt=(cov_1uxmp08xd6().s[104]++,new Date(changedAt.getTime()+86400000*req.config.passwordPolicy.maxPasswordAge));cov_1uxmp08xd6().s[105]++;if(expiresAt<new Date()){cov_1uxmp08xd6().b[39][0]++;cov_1uxmp08xd6().s[106]++;// fail of current time is past password expiry time
throw new _node.default.Error(_node.default.Error.OBJECT_NOT_FOUND,'Your password has expired. Please reset your password.');}else{cov_1uxmp08xd6().b[39][1]++;}}}else{cov_1uxmp08xd6().b[35][1]++;}// Remove hidden properties.
cov_1uxmp08xd6().s[107]++;UsersRouter.removeHiddenProperties(user);cov_1uxmp08xd6().s[108]++;req.config.filesController.expandFilesInObject(req.config,user);// Before login trigger; throws if failure
cov_1uxmp08xd6().s[109]++;await(0,_triggers.maybeRunTrigger)(_triggers.Types.beforeLogin,req.auth,_node.default.User.fromJSON(Object.assign({className:'_User'},user)),null,req.config);const{sessionData,createSession}=(cov_1uxmp08xd6().s[110]++,_RestWrite.default.createSession(req.config,{userId:user.objectId,createdWith:{action:'login',authProvider:'password'},installationId:req.info.installationId}));cov_1uxmp08xd6().s[111]++;user.sessionToken=sessionData.sessionToken;cov_1uxmp08xd6().s[112]++;await createSession();const afterLoginUser=(cov_1uxmp08xd6().s[113]++,_node.default.User.fromJSON(Object.assign({className:'_User'},user)));cov_1uxmp08xd6().s[114]++;(0,_triggers.maybeRunTrigger)(_triggers.Types.afterLogin,_objectSpread(_objectSpread({},req.auth),{},{user:afterLoginUser}),afterLoginUser,null,req.config);cov_1uxmp08xd6().s[115]++;return{response:user};}/**
   * This allows master-key clients to create user sessions without access to
   * user credentials. This enables systems that can authenticate access another
   * way (API key, app administrators) to act on a user's behalf.
   *
   * We create a new session rather than looking for an existing session; we
   * want this to work in situations where the user is logged out on all
   * devices, since this can be used by automated systems acting on the user's
   * behalf.
   *
   * For the moment, we're omitting event hooks and lockout checks, since
   * immediate use cases suggest /loginAs could be used for semantically
   * different reasons from /login
   */async handleLogInAs(req){cov_1uxmp08xd6().f[21]++;cov_1uxmp08xd6().s[116]++;if(!req.auth.isMaster){cov_1uxmp08xd6().b[40][0]++;cov_1uxmp08xd6().s[117]++;throw new _node.default.Error(_node.default.Error.OPERATION_FORBIDDEN,'master key is required');}else{cov_1uxmp08xd6().b[40][1]++;}const userId=(cov_1uxmp08xd6().s[118]++,(cov_1uxmp08xd6().b[41][0]++,req.body.userId)||(cov_1uxmp08xd6().b[41][1]++,req.query.userId));cov_1uxmp08xd6().s[119]++;if(!userId){cov_1uxmp08xd6().b[42][0]++;cov_1uxmp08xd6().s[120]++;throw new _node.default.Error(_node.default.Error.INVALID_VALUE,'userId must not be empty, null, or undefined');}else{cov_1uxmp08xd6().b[42][1]++;}const queryResults=(cov_1uxmp08xd6().s[121]++,await req.config.database.find('_User',{objectId:userId}));const user=(cov_1uxmp08xd6().s[122]++,queryResults[0]);cov_1uxmp08xd6().s[123]++;if(!user){cov_1uxmp08xd6().b[43][0]++;cov_1uxmp08xd6().s[124]++;throw new _node.default.Error(_node.default.Error.OBJECT_NOT_FOUND,'user not found');}else{cov_1uxmp08xd6().b[43][1]++;}cov_1uxmp08xd6().s[125]++;this._sanitizeAuthData(user);const{sessionData,createSession}=(cov_1uxmp08xd6().s[126]++,_RestWrite.default.createSession(req.config,{userId,createdWith:{action:'login',authProvider:'masterkey'},installationId:req.info.installationId}));cov_1uxmp08xd6().s[127]++;user.sessionToken=sessionData.sessionToken;cov_1uxmp08xd6().s[128]++;await createSession();cov_1uxmp08xd6().s[129]++;return{response:user};}handleVerifyPassword(req){cov_1uxmp08xd6().f[22]++;cov_1uxmp08xd6().s[130]++;return this._authenticateUserFromRequest(req).then(user=>{cov_1uxmp08xd6().f[23]++;cov_1uxmp08xd6().s[131]++;// Remove hidden properties.
UsersRouter.removeHiddenProperties(user);cov_1uxmp08xd6().s[132]++;return{response:user};}).catch(error=>{cov_1uxmp08xd6().f[24]++;cov_1uxmp08xd6().s[133]++;throw error;});}handleLogOut(req){cov_1uxmp08xd6().f[25]++;const success=(cov_1uxmp08xd6().s[134]++,{response:{}});cov_1uxmp08xd6().s[135]++;if((cov_1uxmp08xd6().b[45][0]++,req.info)&&(cov_1uxmp08xd6().b[45][1]++,req.info.sessionToken)){cov_1uxmp08xd6().b[44][0]++;cov_1uxmp08xd6().s[136]++;return _rest.default.find(req.config,_Auth.default.master(req.config),'_Session',{sessionToken:req.info.sessionToken},undefined,req.info.clientSDK,req.info.context).then(records=>{cov_1uxmp08xd6().f[26]++;cov_1uxmp08xd6().s[137]++;if((cov_1uxmp08xd6().b[47][0]++,records.results)&&(cov_1uxmp08xd6().b[47][1]++,records.results.length)){cov_1uxmp08xd6().b[46][0]++;cov_1uxmp08xd6().s[138]++;return _rest.default.del(req.config,_Auth.default.master(req.config),'_Session',records.results[0].objectId,req.info.context).then(()=>{cov_1uxmp08xd6().f[27]++;cov_1uxmp08xd6().s[139]++;this._runAfterLogoutTrigger(req,records.results[0]);cov_1uxmp08xd6().s[140]++;return Promise.resolve(success);});}else{cov_1uxmp08xd6().b[46][1]++;}cov_1uxmp08xd6().s[141]++;return Promise.resolve(success);});}else{cov_1uxmp08xd6().b[44][1]++;}cov_1uxmp08xd6().s[142]++;return Promise.resolve(success);}_runAfterLogoutTrigger(req,session){cov_1uxmp08xd6().f[28]++;cov_1uxmp08xd6().s[143]++;// After logout trigger
(0,_triggers.maybeRunTrigger)(_triggers.Types.afterLogout,req.auth,_node.default.Session.fromJSON(Object.assign({className:'_Session'},session)),null,req.config);}_throwOnBadEmailConfig(req){cov_1uxmp08xd6().f[29]++;cov_1uxmp08xd6().s[144]++;try{cov_1uxmp08xd6().s[145]++;_Config.default.validateEmailConfiguration({emailAdapter:req.config.userController.adapter,appName:req.config.appName,publicServerURL:req.config.publicServerURL,emailVerifyTokenValidityDuration:req.config.emailVerifyTokenValidityDuration,emailVerifyTokenReuseIfValid:req.config.emailVerifyTokenReuseIfValid});}catch(e){cov_1uxmp08xd6().s[146]++;if(typeof e==='string'){cov_1uxmp08xd6().b[48][0]++;cov_1uxmp08xd6().s[147]++;// Maybe we need a Bad Configuration error, but the SDKs won't understand it. For now, Internal Server Error.
throw new _node.default.Error(_node.default.Error.INTERNAL_SERVER_ERROR,'An appName, publicServerURL, and emailAdapter are required for password reset and email verification functionality.');}else{cov_1uxmp08xd6().b[48][1]++;cov_1uxmp08xd6().s[148]++;throw e;}}}handleResetRequest(req){cov_1uxmp08xd6().f[30]++;cov_1uxmp08xd6().s[149]++;this._throwOnBadEmailConfig(req);const{email}=(cov_1uxmp08xd6().s[150]++,req.body);cov_1uxmp08xd6().s[151]++;if(!email){cov_1uxmp08xd6().b[49][0]++;cov_1uxmp08xd6().s[152]++;throw new _node.default.Error(_node.default.Error.EMAIL_MISSING,'you must provide an email');}else{cov_1uxmp08xd6().b[49][1]++;}cov_1uxmp08xd6().s[153]++;if(typeof email!=='string'){cov_1uxmp08xd6().b[50][0]++;cov_1uxmp08xd6().s[154]++;throw new _node.default.Error(_node.default.Error.INVALID_EMAIL_ADDRESS,'you must provide a valid email string');}else{cov_1uxmp08xd6().b[50][1]++;}const userController=(cov_1uxmp08xd6().s[155]++,req.config.userController);cov_1uxmp08xd6().s[156]++;return userController.sendPasswordResetEmail(email).then(()=>{cov_1uxmp08xd6().f[31]++;cov_1uxmp08xd6().s[157]++;return Promise.resolve({response:{}});},err=>{cov_1uxmp08xd6().f[32]++;cov_1uxmp08xd6().s[158]++;if(err.code===_node.default.Error.OBJECT_NOT_FOUND){cov_1uxmp08xd6().b[51][0]++;cov_1uxmp08xd6().s[159]++;// Return success so that this endpoint can't
// be used to enumerate valid emails
return Promise.resolve({response:{}});}else{cov_1uxmp08xd6().b[51][1]++;cov_1uxmp08xd6().s[160]++;throw err;}});}handleVerificationEmailRequest(req){cov_1uxmp08xd6().f[33]++;cov_1uxmp08xd6().s[161]++;this._throwOnBadEmailConfig(req);const{email}=(cov_1uxmp08xd6().s[162]++,req.body);cov_1uxmp08xd6().s[163]++;if(!email){cov_1uxmp08xd6().b[52][0]++;cov_1uxmp08xd6().s[164]++;throw new _node.default.Error(_node.default.Error.EMAIL_MISSING,'you must provide an email');}else{cov_1uxmp08xd6().b[52][1]++;}cov_1uxmp08xd6().s[165]++;if(typeof email!=='string'){cov_1uxmp08xd6().b[53][0]++;cov_1uxmp08xd6().s[166]++;throw new _node.default.Error(_node.default.Error.INVALID_EMAIL_ADDRESS,'you must provide a valid email string');}else{cov_1uxmp08xd6().b[53][1]++;}cov_1uxmp08xd6().s[167]++;return req.config.database.find('_User',{email:email}).then(results=>{cov_1uxmp08xd6().f[34]++;cov_1uxmp08xd6().s[168]++;if((cov_1uxmp08xd6().b[55][0]++,!results.length)||(cov_1uxmp08xd6().b[55][1]++,results.length<1)){cov_1uxmp08xd6().b[54][0]++;cov_1uxmp08xd6().s[169]++;throw new _node.default.Error(_node.default.Error.EMAIL_NOT_FOUND,`No user found with email ${email}`);}else{cov_1uxmp08xd6().b[54][1]++;}const user=(cov_1uxmp08xd6().s[170]++,results[0]);// remove password field, messes with saving on postgres
cov_1uxmp08xd6().s[171]++;delete user.password;cov_1uxmp08xd6().s[172]++;if(user.emailVerified){cov_1uxmp08xd6().b[56][0]++;cov_1uxmp08xd6().s[173]++;throw new _node.default.Error(_node.default.Error.OTHER_CAUSE,`Email ${email} is already verified.`);}else{cov_1uxmp08xd6().b[56][1]++;}const userController=(cov_1uxmp08xd6().s[174]++,req.config.userController);cov_1uxmp08xd6().s[175]++;return userController.regenerateEmailVerifyToken(user).then(()=>{cov_1uxmp08xd6().f[35]++;cov_1uxmp08xd6().s[176]++;userController.sendVerificationEmail(user);cov_1uxmp08xd6().s[177]++;return{response:{}};});});}mountRoutes(){cov_1uxmp08xd6().f[36]++;cov_1uxmp08xd6().s[178]++;this.route('GET','/users',req=>{cov_1uxmp08xd6().f[37]++;cov_1uxmp08xd6().s[179]++;return this.handleFind(req);});cov_1uxmp08xd6().s[180]++;this.route('POST','/users',_middlewares.promiseEnsureIdempotency,req=>{cov_1uxmp08xd6().f[38]++;cov_1uxmp08xd6().s[181]++;return this.handleCreate(req);});cov_1uxmp08xd6().s[182]++;this.route('GET','/users/me',req=>{cov_1uxmp08xd6().f[39]++;cov_1uxmp08xd6().s[183]++;return this.handleMe(req);});cov_1uxmp08xd6().s[184]++;this.route('GET','/users/:objectId',req=>{cov_1uxmp08xd6().f[40]++;cov_1uxmp08xd6().s[185]++;return this.handleGet(req);});cov_1uxmp08xd6().s[186]++;this.route('PUT','/users/:objectId',_middlewares.promiseEnsureIdempotency,req=>{cov_1uxmp08xd6().f[41]++;cov_1uxmp08xd6().s[187]++;return this.handleUpdate(req);});cov_1uxmp08xd6().s[188]++;this.route('DELETE','/users/:objectId',req=>{cov_1uxmp08xd6().f[42]++;cov_1uxmp08xd6().s[189]++;return this.handleDelete(req);});cov_1uxmp08xd6().s[190]++;this.route('GET','/login',req=>{cov_1uxmp08xd6().f[43]++;cov_1uxmp08xd6().s[191]++;return this.handleLogIn(req);});cov_1uxmp08xd6().s[192]++;this.route('POST','/login',req=>{cov_1uxmp08xd6().f[44]++;cov_1uxmp08xd6().s[193]++;return this.handleLogIn(req);});cov_1uxmp08xd6().s[194]++;this.route('POST','/loginAs',req=>{cov_1uxmp08xd6().f[45]++;cov_1uxmp08xd6().s[195]++;return this.handleLogInAs(req);});cov_1uxmp08xd6().s[196]++;this.route('POST','/logout',req=>{cov_1uxmp08xd6().f[46]++;cov_1uxmp08xd6().s[197]++;return this.handleLogOut(req);});cov_1uxmp08xd6().s[198]++;this.route('POST','/requestPasswordReset',req=>{cov_1uxmp08xd6().f[47]++;cov_1uxmp08xd6().s[199]++;return this.handleResetRequest(req);});cov_1uxmp08xd6().s[200]++;this.route('POST','/verificationEmailRequest',req=>{cov_1uxmp08xd6().f[48]++;cov_1uxmp08xd6().s[201]++;return this.handleVerificationEmailRequest(req);});cov_1uxmp08xd6().s[202]++;this.route('GET','/verifyPassword',req=>{cov_1uxmp08xd6().f[49]++;cov_1uxmp08xd6().s[203]++;return this.handleVerifyPassword(req);});}}cov_1uxmp08xd6().s[204]++;exports.UsersRouter=UsersRouter;var _default=(cov_1uxmp08xd6().s[205]++,UsersRouter);cov_1uxmp08xd6().s[206]++;exports.default=_default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Sb3V0ZXJzL1VzZXJzUm91dGVyLmpzIl0sIm5hbWVzIjpbIkNsYXNzZXNSb3V0ZXIiLCJjbGFzc05hbWUiLCJyZW1vdmVIaWRkZW5Qcm9wZXJ0aWVzIiwiT2JqZWN0Iiwia2V5Iiwib2JqIiwiX3Nhbml0aXplQXV0aERhdGEiLCJ1c2VyIiwicHJvdmlkZXIiLCJfYXV0aGVudGljYXRlVXNlckZyb21SZXF1ZXN0IiwicGF5bG9hZCIsInJlcSIsInBhc3N3b3JkIiwiUGFyc2UiLCJlbWFpbCIsInVzZXJuYW1lIiwiaXNWYWxpZFBhc3N3b3JkIiwicXVlcnkiLCIkb3IiLCJyZXN1bHRzIiwicGFzc3dvcmRDcnlwdG8iLCJjb3JyZWN0IiwiYWNjb3VudExvY2tvdXRQb2xpY3kiLCJBY2NvdW50TG9ja291dCIsInJlc29sdmUiLCJlcnJvciIsInJlamVjdCIsImhhbmRsZU1lIiwic2Vzc2lvblRva2VuIiwiQXV0aCIsImluY2x1ZGUiLCJyZXNwb25zZSIsIlVzZXJzUm91dGVyIiwiaGFuZGxlTG9nSW4iLCJjaGFuZ2VkQXQiLCJfcGFzc3dvcmRfY2hhbmdlZF9hdCIsImV4cGlyZXNBdCIsIlRyaWdnZXJUeXBlcyIsImNyZWF0ZVNlc3Npb24iLCJ1c2VySWQiLCJjcmVhdGVkV2l0aCIsImFjdGlvbiIsImF1dGhQcm92aWRlciIsImluc3RhbGxhdGlvbklkIiwic2Vzc2lvbkRhdGEiLCJhZnRlckxvZ2luVXNlciIsImhhbmRsZUxvZ0luQXMiLCJxdWVyeVJlc3VsdHMiLCJvYmplY3RJZCIsImhhbmRsZVZlcmlmeVBhc3N3b3JkIiwiaGFuZGxlTG9nT3V0Iiwic3VjY2VzcyIsInJlY29yZHMiLCJQcm9taXNlIiwiX3J1bkFmdGVyTG9nb3V0VHJpZ2dlciIsIl90aHJvd09uQmFkRW1haWxDb25maWciLCJDb25maWciLCJlbWFpbEFkYXB0ZXIiLCJhcHBOYW1lIiwicHVibGljU2VydmVyVVJMIiwiZW1haWxWZXJpZnlUb2tlblZhbGlkaXR5RHVyYXRpb24iLCJlbWFpbFZlcmlmeVRva2VuUmV1c2VJZlZhbGlkIiwiaGFuZGxlUmVzZXRSZXF1ZXN0IiwidXNlckNvbnRyb2xsZXIiLCJlcnIiLCJoYW5kbGVWZXJpZmljYXRpb25FbWFpbFJlcXVlc3QiLCJtb3VudFJvdXRlcyIsInByb21pc2VFbnN1cmVJZGVtcG90ZW5jeSJdLCJtYXBwaW5ncyI6IjYwaEVBTUE7K09BSkEsR0FBQSxDQUFBLEtBQUEsMEJBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsWUFBQSxDQUFBLENBQUEsQ0FBQSxDQUNBLEdBQUEsQ0FBQSxPQUFBLDBCQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBLENBQUEsQ0FDQSxHQUFBLENBQUEsZUFBQSwwQkFBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxtQkFBQSxDQUFBLENBQUEsQ0FBQSxDQUNBLEdBQUEsQ0FBQSxjQUFBLDBCQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLGlCQUFBLENBQUEsQ0FBQSxDQUFBLENBQ0EsR0FBQSxDQUFBLEtBQUEsMEJBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsU0FBQSxDQUFBLENBQUEsQ0FBQSxDQUNBLEdBQUEsQ0FBQSxLQUFBLDBCQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUEsQ0FDQSxHQUFBLENBQUEsU0FBQSwwQkFBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUEsQ0FBQSxDQUFBLENBQ0EsR0FBQSxDQUFBLFNBQUEsMEJBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQSxDQUFBLENBQ0EsR0FBQSxDQUFBLFlBQUEsMkJBQUEsT0FBQSxDQUFBLGdCQUFBLENBQUEsQ0FBQSxDQUNBLEdBQUEsQ0FBQSxVQUFBLDJCQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQSxDQUFBLENBQUEsQyx1dkVBRU8sS0FBQSxDQUFBLFdBQUEsU0FBMEJBLGNBQUFBLENBQTFCLE9BQUEsQ0FBd0MsQ0FDN0NDLFNBQVMsRUFBRyxrREFDVixNQUFBLE9B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LEVBQUksb0RBQ25DLE1BQU8sTUFBQSxZQUFBLENBQVAsR0FBTyxDQUFQLENBREYsQ0FBQSxFQTVCWSwwQkErQlosS0FBQSxLQUFBLENBQUEsTUFBQSxDQUFBLHVCQUFBLENBQTRDQSxHQUFHLEVBQUksb0RBQ2pELE1BQU8sTUFBQSxrQkFBQSxDQUFQLEdBQU8sQ0FBUCxDQURGLENBQUEsRUEvQlksMEJBa0NaLEtBQUEsS0FBQSxDQUFBLE1BQUEsQ0FBQSwyQkFBQSxDQUFnREEsR0FBRyxFQUFJLG9EQUNyRCxNQUFPLE1BQUEsOEJBQUEsQ0FBUCxHQUFPLENBQVAsQ0FERixDQUFBLEVBbENZLDBCQXFDWixLQUFBLEtBQUEsQ0FBQSxLQUFBLENBQUEsaUJBQUEsQ0FBcUNBLEdBQUcsRUFBSSxvREFDMUMsTUFBTyxNQUFBLG9CQUFBLENBQVAsR0FBTyxDQUFQLENBREYsQ0FBQSxFQUdELENBbGU0QyxDLGtHQXFlaENxQixXIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlc2UgbWV0aG9kcyBoYW5kbGUgdGhlIFVzZXItcmVsYXRlZCByb3V0ZXMuXG5cbmltcG9ydCBQYXJzZSBmcm9tICdwYXJzZS9ub2RlJztcbmltcG9ydCBDb25maWcgZnJvbSAnLi4vQ29uZmlnJztcbmltcG9ydCBBY2NvdW50TG9ja291dCBmcm9tICcuLi9BY2NvdW50TG9ja291dCc7XG5pbXBvcnQgQ2xhc3Nlc1JvdXRlciBmcm9tICcuL0NsYXNzZXNSb3V0ZXInO1xuaW1wb3J0IHJlc3QgZnJvbSAnLi4vcmVzdCc7XG5pbXBvcnQgQXV0aCBmcm9tICcuLi9BdXRoJztcbmltcG9ydCBwYXNzd29yZENyeXB0byBmcm9tICcuLi9wYXNzd29yZCc7XG5pbXBvcnQgeyBtYXliZVJ1blRyaWdnZXIsIFR5cGVzIGFzIFRyaWdnZXJUeXBlcyB9IGZyb20gJy4uL3RyaWdnZXJzJztcbmltcG9ydCB7IHByb21pc2VFbnN1cmVJZGVtcG90ZW5jeSB9IGZyb20gJy4uL21pZGRsZXdhcmVzJztcbmltcG9ydCBSZXN0V3JpdGUgZnJvbSAnLi4vUmVzdFdyaXRlJztcblxuZXhwb3J0IGNsYXNzIFVzZXJzUm91dGVyIGV4dGVuZHMgQ2xhc3Nlc1JvdXRlciB7XG4gIGNsYXNzTmFtZSgpIHtcbiAgICByZXR1cm4gJ19Vc2VyJztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBcIl9cIiBwcmVmaXhlZCBwcm9wZXJ0aWVzIGZyb20gYW4gb2JqZWN0LCBleGNlcHQgXCJfX3R5cGVcIlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIEFuIG9iamVjdC5cbiAgICovXG4gIHN0YXRpYyByZW1vdmVIaWRkZW5Qcm9wZXJ0aWVzKG9iaikge1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIC8vIFJlZ2V4cCBjb21lcyBmcm9tIFBhcnNlLk9iamVjdC5wcm90b3R5cGUudmFsaWRhdGVcbiAgICAgICAgaWYgKGtleSAhPT0gJ19fdHlwZScgJiYgIS9eW0EtWmEtel1bMC05QS1aYS16X10qJC8udGVzdChrZXkpKSB7XG4gICAgICAgICAgZGVsZXRlIG9ialtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIHJldHJpZXZpbmcgYSB1c2VyIGRpcmVjdGx5IGZyb20gdGhlIGRhdGFiYXNlLCB3ZSBuZWVkIHRvIHJlbW92ZSB0aGVcbiAgICogcGFzc3dvcmQgZnJvbSB0aGUgb2JqZWN0IChmb3Igc2VjdXJpdHkpLCBhbmQgZml4IGFuIGlzc3VlIHNvbWUgU0RLcyBoYXZlXG4gICAqIHdpdGggbnVsbCB2YWx1ZXNcbiAgICovXG4gIF9zYW5pdGl6ZUF1dGhEYXRhKHVzZXIpIHtcbiAgICBkZWxldGUgdXNlci5wYXNzd29yZDtcblxuICAgIC8vIFNvbWV0aW1lcyB0aGUgYXV0aERhdGEgc3RpbGwgaGFzIG51bGwgb24gdGhhdCBrZXlzXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BhcnNlLWNvbW11bml0eS9wYXJzZS1zZXJ2ZXIvaXNzdWVzLzkzNVxuICAgIGlmICh1c2VyLmF1dGhEYXRhKSB7XG4gICAgICBPYmplY3Qua2V5cyh1c2VyLmF1dGhEYXRhKS5mb3JFYWNoKHByb3ZpZGVyID0+IHtcbiAgICAgICAgaWYgKHVzZXIuYXV0aERhdGFbcHJvdmlkZXJdID09PSBudWxsKSB7XG4gICAgICAgICAgZGVsZXRlIHVzZXIuYXV0aERhdGFbcHJvdmlkZXJdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChPYmplY3Qua2V5cyh1c2VyLmF1dGhEYXRhKS5sZW5ndGggPT0gMCkge1xuICAgICAgICBkZWxldGUgdXNlci5hdXRoRGF0YTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGVzIGEgcGFzc3dvcmQgcmVxdWVzdCBpbiBsb2dpbiBhbmQgdmVyaWZ5UGFzc3dvcmRcbiAgICogQHBhcmFtIHtPYmplY3R9IHJlcSBUaGUgcmVxdWVzdFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBVc2VyIG9iamVjdFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2F1dGhlbnRpY2F0ZVVzZXJGcm9tUmVxdWVzdChyZXEpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgLy8gVXNlIHF1ZXJ5IHBhcmFtZXRlcnMgaW5zdGVhZCBpZiBwcm92aWRlZCBpbiB1cmxcbiAgICAgIGxldCBwYXlsb2FkID0gcmVxLmJvZHk7XG4gICAgICBpZiAoXG4gICAgICAgICghcGF5bG9hZC51c2VybmFtZSAmJiByZXEucXVlcnkgJiYgcmVxLnF1ZXJ5LnVzZXJuYW1lKSB8fFxuICAgICAgICAoIXBheWxvYWQuZW1haWwgJiYgcmVxLnF1ZXJ5ICYmIHJlcS5xdWVyeS5lbWFpbClcbiAgICAgICkge1xuICAgICAgICBwYXlsb2FkID0gcmVxLnF1ZXJ5O1xuICAgICAgfVxuICAgICAgY29uc3QgeyB1c2VybmFtZSwgZW1haWwsIHBhc3N3b3JkIH0gPSBwYXlsb2FkO1xuXG4gICAgICAvLyBUT0RPOiB1c2UgdGhlIHJpZ2h0IGVycm9yIGNvZGVzIC8gZGVzY3JpcHRpb25zLlxuICAgICAgaWYgKCF1c2VybmFtZSAmJiAhZW1haWwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLlVTRVJOQU1FX01JU1NJTkcsICd1c2VybmFtZS9lbWFpbCBpcyByZXF1aXJlZC4nKTtcbiAgICAgIH1cbiAgICAgIGlmICghcGFzc3dvcmQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLlBBU1NXT1JEX01JU1NJTkcsICdwYXNzd29yZCBpcyByZXF1aXJlZC4nKTtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIHBhc3N3b3JkICE9PSAnc3RyaW5nJyB8fFxuICAgICAgICAoZW1haWwgJiYgdHlwZW9mIGVtYWlsICE9PSAnc3RyaW5nJykgfHxcbiAgICAgICAgKHVzZXJuYW1lICYmIHR5cGVvZiB1c2VybmFtZSAhPT0gJ3N0cmluZycpXG4gICAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsICdJbnZhbGlkIHVzZXJuYW1lL3Bhc3N3b3JkLicpO1xuICAgICAgfVxuXG4gICAgICBsZXQgdXNlcjtcbiAgICAgIGxldCBpc1ZhbGlkUGFzc3dvcmQgPSBmYWxzZTtcbiAgICAgIGxldCBxdWVyeTtcbiAgICAgIGlmIChlbWFpbCAmJiB1c2VybmFtZSkge1xuICAgICAgICBxdWVyeSA9IHsgZW1haWwsIHVzZXJuYW1lIH07XG4gICAgICB9IGVsc2UgaWYgKGVtYWlsKSB7XG4gICAgICAgIHF1ZXJ5ID0geyBlbWFpbCB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcXVlcnkgPSB7ICRvcjogW3sgdXNlcm5hbWUgfSwgeyBlbWFpbDogdXNlcm5hbWUgfV0gfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXEuY29uZmlnLmRhdGFiYXNlXG4gICAgICAgIC5maW5kKCdfVXNlcicsIHF1ZXJ5KVxuICAgICAgICAudGhlbihyZXN1bHRzID0+IHtcbiAgICAgICAgICBpZiAoIXJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCwgJ0ludmFsaWQgdXNlcm5hbWUvcGFzc3dvcmQuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlc3VsdHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgLy8gY29ybmVyIGNhc2Ugd2hlcmUgdXNlcjEgaGFzIHVzZXJuYW1lID09IHVzZXIyIGVtYWlsXG4gICAgICAgICAgICByZXEuY29uZmlnLmxvZ2dlckNvbnRyb2xsZXIud2FybihcbiAgICAgICAgICAgICAgXCJUaGVyZSBpcyBhIHVzZXIgd2hpY2ggZW1haWwgaXMgdGhlIHNhbWUgYXMgYW5vdGhlciB1c2VyJ3MgdXNlcm5hbWUsIGxvZ2dpbmcgaW4gYmFzZWQgb24gdXNlcm5hbWVcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHVzZXIgPSByZXN1bHRzLmZpbHRlcih1c2VyID0+IHVzZXIudXNlcm5hbWUgPT09IHVzZXJuYW1lKVswXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXNlciA9IHJlc3VsdHNbMF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHBhc3N3b3JkQ3J5cHRvLmNvbXBhcmUocGFzc3dvcmQsIHVzZXIucGFzc3dvcmQpO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbihjb3JyZWN0ID0+IHtcbiAgICAgICAgICBpc1ZhbGlkUGFzc3dvcmQgPSBjb3JyZWN0O1xuICAgICAgICAgIGNvbnN0IGFjY291bnRMb2Nrb3V0UG9saWN5ID0gbmV3IEFjY291bnRMb2Nrb3V0KHVzZXIsIHJlcS5jb25maWcpO1xuICAgICAgICAgIHJldHVybiBhY2NvdW50TG9ja291dFBvbGljeS5oYW5kbGVMb2dpbkF0dGVtcHQoaXNWYWxpZFBhc3N3b3JkKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGlmICghaXNWYWxpZFBhc3N3b3JkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCwgJ0ludmFsaWQgdXNlcm5hbWUvcGFzc3dvcmQuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEVuc3VyZSB0aGUgdXNlciBpc24ndCBsb2NrZWQgb3V0XG4gICAgICAgICAgLy8gQSBsb2NrZWQgb3V0IHVzZXIgd29uJ3QgYmUgYWJsZSB0byBsb2dpblxuICAgICAgICAgIC8vIFRvIGxvY2sgYSB1c2VyIG91dCwganVzdCBzZXQgdGhlIEFDTCB0byBgbWFzdGVyS2V5YCBvbmx5ICAoe30pLlxuICAgICAgICAgIC8vIEVtcHR5IEFDTCBpcyBPS1xuICAgICAgICAgIGlmICghcmVxLmF1dGguaXNNYXN0ZXIgJiYgdXNlci5BQ0wgJiYgT2JqZWN0LmtleXModXNlci5BQ0wpLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCwgJ0ludmFsaWQgdXNlcm5hbWUvcGFzc3dvcmQuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHJlcS5jb25maWcudmVyaWZ5VXNlckVtYWlscyAmJlxuICAgICAgICAgICAgcmVxLmNvbmZpZy5wcmV2ZW50TG9naW5XaXRoVW52ZXJpZmllZEVtYWlsICYmXG4gICAgICAgICAgICAhdXNlci5lbWFpbFZlcmlmaWVkXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuRU1BSUxfTk9UX0ZPVU5ELCAnVXNlciBlbWFpbCBpcyBub3QgdmVyaWZpZWQuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fc2FuaXRpemVBdXRoRGF0YSh1c2VyKTtcblxuICAgICAgICAgIHJldHVybiByZXNvbHZlKHVzZXIpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZU1lKHJlcSkge1xuICAgIGlmICghcmVxLmluZm8gfHwgIXJlcS5pbmZvLnNlc3Npb25Ub2tlbikge1xuICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLklOVkFMSURfU0VTU0lPTl9UT0tFTiwgJ0ludmFsaWQgc2Vzc2lvbiB0b2tlbicpO1xuICAgIH1cbiAgICBjb25zdCBzZXNzaW9uVG9rZW4gPSByZXEuaW5mby5zZXNzaW9uVG9rZW47XG4gICAgcmV0dXJuIHJlc3RcbiAgICAgIC5maW5kKFxuICAgICAgICByZXEuY29uZmlnLFxuICAgICAgICBBdXRoLm1hc3RlcihyZXEuY29uZmlnKSxcbiAgICAgICAgJ19TZXNzaW9uJyxcbiAgICAgICAgeyBzZXNzaW9uVG9rZW4gfSxcbiAgICAgICAgeyBpbmNsdWRlOiAndXNlcicgfSxcbiAgICAgICAgcmVxLmluZm8uY2xpZW50U0RLLFxuICAgICAgICByZXEuaW5mby5jb250ZXh0XG4gICAgICApXG4gICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgIGlmICghcmVzcG9uc2UucmVzdWx0cyB8fCByZXNwb25zZS5yZXN1bHRzLmxlbmd0aCA9PSAwIHx8ICFyZXNwb25zZS5yZXN1bHRzWzBdLnVzZXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuSU5WQUxJRF9TRVNTSU9OX1RPS0VOLCAnSW52YWxpZCBzZXNzaW9uIHRva2VuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgdXNlciA9IHJlc3BvbnNlLnJlc3VsdHNbMF0udXNlcjtcbiAgICAgICAgICAvLyBTZW5kIHRva2VuIGJhY2sgb24gdGhlIGxvZ2luLCBiZWNhdXNlIFNES3MgZXhwZWN0IHRoYXQuXG4gICAgICAgICAgdXNlci5zZXNzaW9uVG9rZW4gPSBzZXNzaW9uVG9rZW47XG5cbiAgICAgICAgICAvLyBSZW1vdmUgaGlkZGVuIHByb3BlcnRpZXMuXG4gICAgICAgICAgVXNlcnNSb3V0ZXIucmVtb3ZlSGlkZGVuUHJvcGVydGllcyh1c2VyKTtcblxuICAgICAgICAgIHJldHVybiB7IHJlc3BvbnNlOiB1c2VyIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgaGFuZGxlTG9nSW4ocmVxKSB7XG4gICAgY29uc3QgdXNlciA9IGF3YWl0IHRoaXMuX2F1dGhlbnRpY2F0ZVVzZXJGcm9tUmVxdWVzdChyZXEpO1xuXG4gICAgLy8gaGFuZGxlIHBhc3N3b3JkIGV4cGlyeSBwb2xpY3lcbiAgICBpZiAocmVxLmNvbmZpZy5wYXNzd29yZFBvbGljeSAmJiByZXEuY29uZmlnLnBhc3N3b3JkUG9saWN5Lm1heFBhc3N3b3JkQWdlKSB7XG4gICAgICBsZXQgY2hhbmdlZEF0ID0gdXNlci5fcGFzc3dvcmRfY2hhbmdlZF9hdDtcblxuICAgICAgaWYgKCFjaGFuZ2VkQXQpIHtcbiAgICAgICAgLy8gcGFzc3dvcmQgd2FzIGNyZWF0ZWQgYmVmb3JlIGV4cGlyeSBwb2xpY3kgd2FzIGVuYWJsZWQuXG4gICAgICAgIC8vIHNpbXBseSB1cGRhdGUgX1VzZXIgb2JqZWN0IHNvIHRoYXQgaXQgd2lsbCBzdGFydCBlbmZvcmNpbmcgZnJvbSBub3dcbiAgICAgICAgY2hhbmdlZEF0ID0gbmV3IERhdGUoKTtcbiAgICAgICAgcmVxLmNvbmZpZy5kYXRhYmFzZS51cGRhdGUoXG4gICAgICAgICAgJ19Vc2VyJyxcbiAgICAgICAgICB7IHVzZXJuYW1lOiB1c2VyLnVzZXJuYW1lIH0sXG4gICAgICAgICAgeyBfcGFzc3dvcmRfY2hhbmdlZF9hdDogUGFyc2UuX2VuY29kZShjaGFuZ2VkQXQpIH1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNoZWNrIHdoZXRoZXIgdGhlIHBhc3N3b3JkIGhhcyBleHBpcmVkXG4gICAgICAgIGlmIChjaGFuZ2VkQXQuX190eXBlID09ICdEYXRlJykge1xuICAgICAgICAgIGNoYW5nZWRBdCA9IG5ldyBEYXRlKGNoYW5nZWRBdC5pc28pO1xuICAgICAgICB9XG4gICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZXhwaXJ5IHRpbWUuXG4gICAgICAgIGNvbnN0IGV4cGlyZXNBdCA9IG5ldyBEYXRlKFxuICAgICAgICAgIGNoYW5nZWRBdC5nZXRUaW1lKCkgKyA4NjQwMDAwMCAqIHJlcS5jb25maWcucGFzc3dvcmRQb2xpY3kubWF4UGFzc3dvcmRBZ2VcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGV4cGlyZXNBdCA8IG5ldyBEYXRlKCkpXG4gICAgICAgICAgLy8gZmFpbCBvZiBjdXJyZW50IHRpbWUgaXMgcGFzdCBwYXNzd29yZCBleHBpcnkgdGltZVxuICAgICAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgICAgIFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsXG4gICAgICAgICAgICAnWW91ciBwYXNzd29yZCBoYXMgZXhwaXJlZC4gUGxlYXNlIHJlc2V0IHlvdXIgcGFzc3dvcmQuJ1xuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGhpZGRlbiBwcm9wZXJ0aWVzLlxuICAgIFVzZXJzUm91dGVyLnJlbW92ZUhpZGRlblByb3BlcnRpZXModXNlcik7XG5cbiAgICByZXEuY29uZmlnLmZpbGVzQ29udHJvbGxlci5leHBhbmRGaWxlc0luT2JqZWN0KHJlcS5jb25maWcsIHVzZXIpO1xuXG4gICAgLy8gQmVmb3JlIGxvZ2luIHRyaWdnZXI7IHRocm93cyBpZiBmYWlsdXJlXG4gICAgYXdhaXQgbWF5YmVSdW5UcmlnZ2VyKFxuICAgICAgVHJpZ2dlclR5cGVzLmJlZm9yZUxvZ2luLFxuICAgICAgcmVxLmF1dGgsXG4gICAgICBQYXJzZS5Vc2VyLmZyb21KU09OKE9iamVjdC5hc3NpZ24oeyBjbGFzc05hbWU6ICdfVXNlcicgfSwgdXNlcikpLFxuICAgICAgbnVsbCxcbiAgICAgIHJlcS5jb25maWdcbiAgICApO1xuXG4gICAgY29uc3QgeyBzZXNzaW9uRGF0YSwgY3JlYXRlU2Vzc2lvbiB9ID0gUmVzdFdyaXRlLmNyZWF0ZVNlc3Npb24ocmVxLmNvbmZpZywge1xuICAgICAgdXNlcklkOiB1c2VyLm9iamVjdElkLFxuICAgICAgY3JlYXRlZFdpdGg6IHtcbiAgICAgICAgYWN0aW9uOiAnbG9naW4nLFxuICAgICAgICBhdXRoUHJvdmlkZXI6ICdwYXNzd29yZCcsXG4gICAgICB9LFxuICAgICAgaW5zdGFsbGF0aW9uSWQ6IHJlcS5pbmZvLmluc3RhbGxhdGlvbklkLFxuICAgIH0pO1xuXG4gICAgdXNlci5zZXNzaW9uVG9rZW4gPSBzZXNzaW9uRGF0YS5zZXNzaW9uVG9rZW47XG5cbiAgICBhd2FpdCBjcmVhdGVTZXNzaW9uKCk7XG5cbiAgICBjb25zdCBhZnRlckxvZ2luVXNlciA9IFBhcnNlLlVzZXIuZnJvbUpTT04oT2JqZWN0LmFzc2lnbih7IGNsYXNzTmFtZTogJ19Vc2VyJyB9LCB1c2VyKSk7XG4gICAgbWF5YmVSdW5UcmlnZ2VyKFxuICAgICAgVHJpZ2dlclR5cGVzLmFmdGVyTG9naW4sXG4gICAgICB7IC4uLnJlcS5hdXRoLCB1c2VyOiBhZnRlckxvZ2luVXNlciB9LFxuICAgICAgYWZ0ZXJMb2dpblVzZXIsXG4gICAgICBudWxsLFxuICAgICAgcmVxLmNvbmZpZ1xuICAgICk7XG5cbiAgICByZXR1cm4geyByZXNwb25zZTogdXNlciB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgYWxsb3dzIG1hc3Rlci1rZXkgY2xpZW50cyB0byBjcmVhdGUgdXNlciBzZXNzaW9ucyB3aXRob3V0IGFjY2VzcyB0b1xuICAgKiB1c2VyIGNyZWRlbnRpYWxzLiBUaGlzIGVuYWJsZXMgc3lzdGVtcyB0aGF0IGNhbiBhdXRoZW50aWNhdGUgYWNjZXNzIGFub3RoZXJcbiAgICogd2F5IChBUEkga2V5LCBhcHAgYWRtaW5pc3RyYXRvcnMpIHRvIGFjdCBvbiBhIHVzZXIncyBiZWhhbGYuXG4gICAqXG4gICAqIFdlIGNyZWF0ZSBhIG5ldyBzZXNzaW9uIHJhdGhlciB0aGFuIGxvb2tpbmcgZm9yIGFuIGV4aXN0aW5nIHNlc3Npb247IHdlXG4gICAqIHdhbnQgdGhpcyB0byB3b3JrIGluIHNpdHVhdGlvbnMgd2hlcmUgdGhlIHVzZXIgaXMgbG9nZ2VkIG91dCBvbiBhbGxcbiAgICogZGV2aWNlcywgc2luY2UgdGhpcyBjYW4gYmUgdXNlZCBieSBhdXRvbWF0ZWQgc3lzdGVtcyBhY3Rpbmcgb24gdGhlIHVzZXInc1xuICAgKiBiZWhhbGYuXG4gICAqXG4gICAqIEZvciB0aGUgbW9tZW50LCB3ZSdyZSBvbWl0dGluZyBldmVudCBob29rcyBhbmQgbG9ja291dCBjaGVja3MsIHNpbmNlXG4gICAqIGltbWVkaWF0ZSB1c2UgY2FzZXMgc3VnZ2VzdCAvbG9naW5BcyBjb3VsZCBiZSB1c2VkIGZvciBzZW1hbnRpY2FsbHlcbiAgICogZGlmZmVyZW50IHJlYXNvbnMgZnJvbSAvbG9naW5cbiAgICovXG4gIGFzeW5jIGhhbmRsZUxvZ0luQXMocmVxKSB7XG4gICAgaWYgKCFyZXEuYXV0aC5pc01hc3Rlcikge1xuICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLk9QRVJBVElPTl9GT1JCSURERU4sICdtYXN0ZXIga2V5IGlzIHJlcXVpcmVkJyk7XG4gICAgfVxuXG4gICAgY29uc3QgdXNlcklkID0gcmVxLmJvZHkudXNlcklkIHx8IHJlcS5xdWVyeS51c2VySWQ7XG4gICAgaWYgKCF1c2VySWQpIHtcbiAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgUGFyc2UuRXJyb3IuSU5WQUxJRF9WQUxVRSxcbiAgICAgICAgJ3VzZXJJZCBtdXN0IG5vdCBiZSBlbXB0eSwgbnVsbCwgb3IgdW5kZWZpbmVkJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBxdWVyeVJlc3VsdHMgPSBhd2FpdCByZXEuY29uZmlnLmRhdGFiYXNlLmZpbmQoJ19Vc2VyJywgeyBvYmplY3RJZDogdXNlcklkIH0pO1xuICAgIGNvbnN0IHVzZXIgPSBxdWVyeVJlc3VsdHNbMF07XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCwgJ3VzZXIgbm90IGZvdW5kJyk7XG4gICAgfVxuXG4gICAgdGhpcy5fc2FuaXRpemVBdXRoRGF0YSh1c2VyKTtcblxuICAgIGNvbnN0IHsgc2Vzc2lvbkRhdGEsIGNyZWF0ZVNlc3Npb24gfSA9IFJlc3RXcml0ZS5jcmVhdGVTZXNzaW9uKHJlcS5jb25maWcsIHtcbiAgICAgIHVzZXJJZCxcbiAgICAgIGNyZWF0ZWRXaXRoOiB7XG4gICAgICAgIGFjdGlvbjogJ2xvZ2luJyxcbiAgICAgICAgYXV0aFByb3ZpZGVyOiAnbWFzdGVya2V5JyxcbiAgICAgIH0sXG4gICAgICBpbnN0YWxsYXRpb25JZDogcmVxLmluZm8uaW5zdGFsbGF0aW9uSWQsXG4gICAgfSk7XG5cbiAgICB1c2VyLnNlc3Npb25Ub2tlbiA9IHNlc3Npb25EYXRhLnNlc3Npb25Ub2tlbjtcblxuICAgIGF3YWl0IGNyZWF0ZVNlc3Npb24oKTtcblxuICAgIHJldHVybiB7IHJlc3BvbnNlOiB1c2VyIH07XG4gIH1cblxuICBoYW5kbGVWZXJpZnlQYXNzd29yZChyZXEpIHtcbiAgICByZXR1cm4gdGhpcy5fYXV0aGVudGljYXRlVXNlckZyb21SZXF1ZXN0KHJlcSlcbiAgICAgIC50aGVuKHVzZXIgPT4ge1xuICAgICAgICAvLyBSZW1vdmUgaGlkZGVuIHByb3BlcnRpZXMuXG4gICAgICAgIFVzZXJzUm91dGVyLnJlbW92ZUhpZGRlblByb3BlcnRpZXModXNlcik7XG5cbiAgICAgICAgcmV0dXJuIHsgcmVzcG9uc2U6IHVzZXIgfTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlTG9nT3V0KHJlcSkge1xuICAgIGNvbnN0IHN1Y2Nlc3MgPSB7IHJlc3BvbnNlOiB7fSB9O1xuICAgIGlmIChyZXEuaW5mbyAmJiByZXEuaW5mby5zZXNzaW9uVG9rZW4pIHtcbiAgICAgIHJldHVybiByZXN0XG4gICAgICAgIC5maW5kKFxuICAgICAgICAgIHJlcS5jb25maWcsXG4gICAgICAgICAgQXV0aC5tYXN0ZXIocmVxLmNvbmZpZyksXG4gICAgICAgICAgJ19TZXNzaW9uJyxcbiAgICAgICAgICB7IHNlc3Npb25Ub2tlbjogcmVxLmluZm8uc2Vzc2lvblRva2VuIH0sXG4gICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgIHJlcS5pbmZvLmNsaWVudFNESyxcbiAgICAgICAgICByZXEuaW5mby5jb250ZXh0XG4gICAgICAgIClcbiAgICAgICAgLnRoZW4ocmVjb3JkcyA9PiB7XG4gICAgICAgICAgaWYgKHJlY29yZHMucmVzdWx0cyAmJiByZWNvcmRzLnJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdFxuICAgICAgICAgICAgICAuZGVsKFxuICAgICAgICAgICAgICAgIHJlcS5jb25maWcsXG4gICAgICAgICAgICAgICAgQXV0aC5tYXN0ZXIocmVxLmNvbmZpZyksXG4gICAgICAgICAgICAgICAgJ19TZXNzaW9uJyxcbiAgICAgICAgICAgICAgICByZWNvcmRzLnJlc3VsdHNbMF0ub2JqZWN0SWQsXG4gICAgICAgICAgICAgICAgcmVxLmluZm8uY29udGV4dFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ydW5BZnRlckxvZ291dFRyaWdnZXIocmVxLCByZWNvcmRzLnJlc3VsdHNbMF0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc3VjY2Vzcyk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHN1Y2Nlc3MpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzdWNjZXNzKTtcbiAgfVxuXG4gIF9ydW5BZnRlckxvZ291dFRyaWdnZXIocmVxLCBzZXNzaW9uKSB7XG4gICAgLy8gQWZ0ZXIgbG9nb3V0IHRyaWdnZXJcbiAgICBtYXliZVJ1blRyaWdnZXIoXG4gICAgICBUcmlnZ2VyVHlwZXMuYWZ0ZXJMb2dvdXQsXG4gICAgICByZXEuYXV0aCxcbiAgICAgIFBhcnNlLlNlc3Npb24uZnJvbUpTT04oT2JqZWN0LmFzc2lnbih7IGNsYXNzTmFtZTogJ19TZXNzaW9uJyB9LCBzZXNzaW9uKSksXG4gICAgICBudWxsLFxuICAgICAgcmVxLmNvbmZpZ1xuICAgICk7XG4gIH1cblxuICBfdGhyb3dPbkJhZEVtYWlsQ29uZmlnKHJlcSkge1xuICAgIHRyeSB7XG4gICAgICBDb25maWcudmFsaWRhdGVFbWFpbENvbmZpZ3VyYXRpb24oe1xuICAgICAgICBlbWFpbEFkYXB0ZXI6IHJlcS5jb25maWcudXNlckNvbnRyb2xsZXIuYWRhcHRlcixcbiAgICAgICAgYXBwTmFtZTogcmVxLmNvbmZpZy5hcHBOYW1lLFxuICAgICAgICBwdWJsaWNTZXJ2ZXJVUkw6IHJlcS5jb25maWcucHVibGljU2VydmVyVVJMLFxuICAgICAgICBlbWFpbFZlcmlmeVRva2VuVmFsaWRpdHlEdXJhdGlvbjogcmVxLmNvbmZpZy5lbWFpbFZlcmlmeVRva2VuVmFsaWRpdHlEdXJhdGlvbixcbiAgICAgICAgZW1haWxWZXJpZnlUb2tlblJldXNlSWZWYWxpZDogcmVxLmNvbmZpZy5lbWFpbFZlcmlmeVRva2VuUmV1c2VJZlZhbGlkLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKHR5cGVvZiBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBNYXliZSB3ZSBuZWVkIGEgQmFkIENvbmZpZ3VyYXRpb24gZXJyb3IsIGJ1dCB0aGUgU0RLcyB3b24ndCB1bmRlcnN0YW5kIGl0LiBGb3Igbm93LCBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuXG4gICAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgICBQYXJzZS5FcnJvci5JTlRFUk5BTF9TRVJWRVJfRVJST1IsXG4gICAgICAgICAgJ0FuIGFwcE5hbWUsIHB1YmxpY1NlcnZlclVSTCwgYW5kIGVtYWlsQWRhcHRlciBhcmUgcmVxdWlyZWQgZm9yIHBhc3N3b3JkIHJlc2V0IGFuZCBlbWFpbCB2ZXJpZmljYXRpb24gZnVuY3Rpb25hbGl0eS4nXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZVJlc2V0UmVxdWVzdChyZXEpIHtcbiAgICB0aGlzLl90aHJvd09uQmFkRW1haWxDb25maWcocmVxKTtcblxuICAgIGNvbnN0IHsgZW1haWwgfSA9IHJlcS5ib2R5O1xuICAgIGlmICghZW1haWwpIHtcbiAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5FTUFJTF9NSVNTSU5HLCAneW91IG11c3QgcHJvdmlkZSBhbiBlbWFpbCcpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVtYWlsICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgICBQYXJzZS5FcnJvci5JTlZBTElEX0VNQUlMX0FERFJFU1MsXG4gICAgICAgICd5b3UgbXVzdCBwcm92aWRlIGEgdmFsaWQgZW1haWwgc3RyaW5nJ1xuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgdXNlckNvbnRyb2xsZXIgPSByZXEuY29uZmlnLnVzZXJDb250cm9sbGVyO1xuICAgIHJldHVybiB1c2VyQ29udHJvbGxlci5zZW5kUGFzc3dvcmRSZXNldEVtYWlsKGVtYWlsKS50aGVuKFxuICAgICAgKCkgPT4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICByZXNwb25zZToge30sXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGVyciA9PiB7XG4gICAgICAgIGlmIChlcnIuY29kZSA9PT0gUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCkge1xuICAgICAgICAgIC8vIFJldHVybiBzdWNjZXNzIHNvIHRoYXQgdGhpcyBlbmRwb2ludCBjYW4ndFxuICAgICAgICAgIC8vIGJlIHVzZWQgdG8gZW51bWVyYXRlIHZhbGlkIGVtYWlsc1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgICAgcmVzcG9uc2U6IHt9LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBoYW5kbGVWZXJpZmljYXRpb25FbWFpbFJlcXVlc3QocmVxKSB7XG4gICAgdGhpcy5fdGhyb3dPbkJhZEVtYWlsQ29uZmlnKHJlcSk7XG5cbiAgICBjb25zdCB7IGVtYWlsIH0gPSByZXEuYm9keTtcbiAgICBpZiAoIWVtYWlsKSB7XG4gICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuRU1BSUxfTUlTU0lORywgJ3lvdSBtdXN0IHByb3ZpZGUgYW4gZW1haWwnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbWFpbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgUGFyc2UuRXJyb3IuSU5WQUxJRF9FTUFJTF9BRERSRVNTLFxuICAgICAgICAneW91IG11c3QgcHJvdmlkZSBhIHZhbGlkIGVtYWlsIHN0cmluZydcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcS5jb25maWcuZGF0YWJhc2UuZmluZCgnX1VzZXInLCB7IGVtYWlsOiBlbWFpbCB9KS50aGVuKHJlc3VsdHMgPT4ge1xuICAgICAgaWYgKCFyZXN1bHRzLmxlbmd0aCB8fCByZXN1bHRzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLkVNQUlMX05PVF9GT1VORCwgYE5vIHVzZXIgZm91bmQgd2l0aCBlbWFpbCAke2VtYWlsfWApO1xuICAgICAgfVxuICAgICAgY29uc3QgdXNlciA9IHJlc3VsdHNbMF07XG5cbiAgICAgIC8vIHJlbW92ZSBwYXNzd29yZCBmaWVsZCwgbWVzc2VzIHdpdGggc2F2aW5nIG9uIHBvc3RncmVzXG4gICAgICBkZWxldGUgdXNlci5wYXNzd29yZDtcblxuICAgICAgaWYgKHVzZXIuZW1haWxWZXJpZmllZCkge1xuICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuT1RIRVJfQ0FVU0UsIGBFbWFpbCAke2VtYWlsfSBpcyBhbHJlYWR5IHZlcmlmaWVkLmApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB1c2VyQ29udHJvbGxlciA9IHJlcS5jb25maWcudXNlckNvbnRyb2xsZXI7XG4gICAgICByZXR1cm4gdXNlckNvbnRyb2xsZXIucmVnZW5lcmF0ZUVtYWlsVmVyaWZ5VG9rZW4odXNlcikudGhlbigoKSA9PiB7XG4gICAgICAgIHVzZXJDb250cm9sbGVyLnNlbmRWZXJpZmljYXRpb25FbWFpbCh1c2VyKTtcbiAgICAgICAgcmV0dXJuIHsgcmVzcG9uc2U6IHt9IH07XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIG1vdW50Um91dGVzKCkge1xuICAgIHRoaXMucm91dGUoJ0dFVCcsICcvdXNlcnMnLCByZXEgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlRmluZChyZXEpO1xuICAgIH0pO1xuICAgIHRoaXMucm91dGUoJ1BPU1QnLCAnL3VzZXJzJywgcHJvbWlzZUVuc3VyZUlkZW1wb3RlbmN5LCByZXEgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlQ3JlYXRlKHJlcSk7XG4gICAgfSk7XG4gICAgdGhpcy5yb3V0ZSgnR0VUJywgJy91c2Vycy9tZScsIHJlcSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVNZShyZXEpO1xuICAgIH0pO1xuICAgIHRoaXMucm91dGUoJ0dFVCcsICcvdXNlcnMvOm9iamVjdElkJywgcmVxID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZUdldChyZXEpO1xuICAgIH0pO1xuICAgIHRoaXMucm91dGUoJ1BVVCcsICcvdXNlcnMvOm9iamVjdElkJywgcHJvbWlzZUVuc3VyZUlkZW1wb3RlbmN5LCByZXEgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlVXBkYXRlKHJlcSk7XG4gICAgfSk7XG4gICAgdGhpcy5yb3V0ZSgnREVMRVRFJywgJy91c2Vycy86b2JqZWN0SWQnLCByZXEgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlRGVsZXRlKHJlcSk7XG4gICAgfSk7XG4gICAgdGhpcy5yb3V0ZSgnR0VUJywgJy9sb2dpbicsIHJlcSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVMb2dJbihyZXEpO1xuICAgIH0pO1xuICAgIHRoaXMucm91dGUoJ1BPU1QnLCAnL2xvZ2luJywgcmVxID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZUxvZ0luKHJlcSk7XG4gICAgfSk7XG4gICAgdGhpcy5yb3V0ZSgnUE9TVCcsICcvbG9naW5BcycsIHJlcSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVMb2dJbkFzKHJlcSk7XG4gICAgfSk7XG4gICAgdGhpcy5yb3V0ZSgnUE9TVCcsICcvbG9nb3V0JywgcmVxID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZUxvZ091dChyZXEpO1xuICAgIH0pO1xuICAgIHRoaXMucm91dGUoJ1BPU1QnLCAnL3JlcXVlc3RQYXNzd29yZFJlc2V0JywgcmVxID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc2V0UmVxdWVzdChyZXEpO1xuICAgIH0pO1xuICAgIHRoaXMucm91dGUoJ1BPU1QnLCAnL3ZlcmlmaWNhdGlvbkVtYWlsUmVxdWVzdCcsIHJlcSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVWZXJpZmljYXRpb25FbWFpbFJlcXVlc3QocmVxKTtcbiAgICB9KTtcbiAgICB0aGlzLnJvdXRlKCdHRVQnLCAnL3ZlcmlmeVBhc3N3b3JkJywgcmVxID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZVZlcmlmeVBhc3N3b3JkKHJlcSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVXNlcnNSb3V0ZXI7XG4iXX0=