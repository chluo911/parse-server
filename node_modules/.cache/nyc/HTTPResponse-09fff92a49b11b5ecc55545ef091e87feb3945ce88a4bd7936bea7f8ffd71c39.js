"use strict";function cov_2er8akppof(){var path="/parse-server/lib/cloud-code/HTTPResponse.js";var hash="35d1befffcc58adab6f33ebe509cc28fae6f1826";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/cloud-code/HTTPResponse.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:25}},"2":{start:{line:21,column:4},end:{line:21,column:38}},"3":{start:{line:22,column:4},end:{line:22,column:42}},"4":{start:{line:23,column:4},end:{line:23,column:46}},"5":{start:{line:25,column:4},end:{line:31,column:5}},"6":{start:{line:26,column:6},end:{line:26,column:19}},"7":{start:{line:27,column:11},end:{line:31,column:5}},"8":{start:{line:28,column:6},end:{line:28,column:25}},"9":{start:{line:29,column:11},end:{line:31,column:5}},"10":{start:{line:30,column:6},end:{line:30,column:19}},"11":{start:{line:33,column:20},end:{line:41,column:5}},"12":{start:{line:34,column:6},end:{line:38,column:7}},"13":{start:{line:35,column:8},end:{line:35,column:46}},"14":{start:{line:36,column:13},end:{line:38,column:7}},"15":{start:{line:37,column:8},end:{line:37,column:38}},"16":{start:{line:40,column:6},end:{line:40,column:19}},"17":{start:{line:43,column:20},end:{line:53,column:5}},"18":{start:{line:44,column:6},end:{line:50,column:7}},"19":{start:{line:45,column:8},end:{line:49,column:9}},"20":{start:{line:46,column:10},end:{line:46,column:40}},"21":{start:{line:52,column:6},end:{line:52,column:19}},"22":{start:{line:55,column:4},end:{line:59,column:7}},"23":{start:{line:57,column:8},end:{line:57,column:20}},"24":{start:{line:60,column:4},end:{line:63,column:7}},"25":{start:{line:64,column:4},end:{line:67,column:7}},"26":{start:{line:72,column:0},end:{line:72,column:31}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:2},end:{line:18,column:3}},loc:{start:{line:18,column:30},end:{line:68,column:3}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:33,column:20},end:{line:33,column:21}},loc:{start:{line:33,column:26},end:{line:41,column:5}},line:33},"2":{name:"(anonymous_2)",decl:{start:{line:43,column:20},end:{line:43,column:21}},loc:{start:{line:43,column:26},end:{line:53,column:5}},line:43},"3":{name:"(anonymous_3)",decl:{start:{line:56,column:11},end:{line:56,column:12}},loc:{start:{line:56,column:17},end:{line:58,column:7}},line:56}},branchMap:{"0":{loc:{start:{line:22,column:19},end:{line:22,column:41}},type:"binary-expr",locations:[{start:{line:22,column:19},end:{line:22,column:35}},{start:{line:22,column:39},end:{line:22,column:41}}],line:22},"1":{loc:{start:{line:25,column:4},end:{line:31,column:5}},type:"if",locations:[{start:{line:25,column:4},end:{line:31,column:5}},{start:{line:25,column:4},end:{line:31,column:5}}],line:25},"2":{loc:{start:{line:27,column:11},end:{line:31,column:5}},type:"if",locations:[{start:{line:27,column:11},end:{line:31,column:5}},{start:{line:27,column:11},end:{line:31,column:5}}],line:27},"3":{loc:{start:{line:29,column:11},end:{line:31,column:5}},type:"if",locations:[{start:{line:29,column:11},end:{line:31,column:5}},{start:{line:29,column:11},end:{line:31,column:5}}],line:29},"4":{loc:{start:{line:34,column:6},end:{line:38,column:7}},type:"if",locations:[{start:{line:34,column:6},end:{line:38,column:7}},{start:{line:34,column:6},end:{line:38,column:7}}],line:34},"5":{loc:{start:{line:34,column:10},end:{line:34,column:31}},type:"binary-expr",locations:[{start:{line:34,column:10},end:{line:34,column:16}},{start:{line:34,column:20},end:{line:34,column:31}}],line:34},"6":{loc:{start:{line:36,column:13},end:{line:38,column:7}},type:"if",locations:[{start:{line:36,column:13},end:{line:38,column:7}},{start:{line:36,column:13},end:{line:38,column:7}}],line:36},"7":{loc:{start:{line:36,column:17},end:{line:36,column:32}},type:"binary-expr",locations:[{start:{line:36,column:17},end:{line:36,column:23}},{start:{line:36,column:27},end:{line:36,column:32}}],line:36},"8":{loc:{start:{line:44,column:6},end:{line:50,column:7}},type:"if",locations:[{start:{line:44,column:6},end:{line:50,column:7}},{start:{line:44,column:6},end:{line:50,column:7}}],line:44}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},inputSourceMap:{version:3,sources:["../../src/cloud-code/HTTPResponse.js"],names:["HTTPResponse","constructor","response","body","_text","_data","status","statusCode","headers","cookies","Buffer","isBuffer","buffer","getText","toString","JSON","stringify","getData","parse","e","Object","defineProperty","get","enumerable"],mappings:";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,YAAN,CAAmB;AAChCC,EAAAA,WAAW,CAACC,QAAD,EAAWC,IAAX,EAAiB;AAC1B,QAAIC,KAAJ,EAAWC,KAAX;;AACA,SAAKC,MAAL,GAAcJ,QAAQ,CAACK,UAAvB;AACA,SAAKC,OAAL,GAAeN,QAAQ,CAACM,OAAT,IAAoB,EAAnC;AACA,SAAKC,OAAL,GAAe,KAAKD,OAAL,CAAa,YAAb,CAAf;;AAEA,QAAI,OAAOL,IAAP,IAAe,QAAnB,EAA6B;AAC3BC,MAAAA,KAAK,GAAGD,IAAR;AACD,KAFD,MAEO,IAAIO,MAAM,CAACC,QAAP,CAAgBR,IAAhB,CAAJ,EAA2B;AAChC,WAAKS,MAAL,GAAcT,IAAd;AACD,KAFM,MAEA,IAAI,OAAOA,IAAP,IAAe,QAAnB,EAA6B;AAClCE,MAAAA,KAAK,GAAGF,IAAR;AACD;;AAED,UAAMU,OAAO,GAAG,MAAM;AACpB,UAAI,CAACT,KAAD,IAAU,KAAKQ,MAAnB,EAA2B;AACzBR,QAAAA,KAAK,GAAG,KAAKQ,MAAL,CAAYE,QAAZ,CAAqB,OAArB,CAAR;AACD,OAFD,MAEO,IAAI,CAACV,KAAD,IAAUC,KAAd,EAAqB;AAC1BD,QAAAA,KAAK,GAAGW,IAAI,CAACC,SAAL,CAAeX,KAAf,CAAR;AACD;;AACD,aAAOD,KAAP;AACD,KAPD;;AASA,UAAMa,OAAO,GAAG,MAAM;AACpB,UAAI,CAACZ,KAAL,EAAY;AACV,YAAI;AACFA,UAAAA,KAAK,GAAGU,IAAI,CAACG,KAAL,CAAWL,OAAO,EAAlB,CAAR;AACD,SAFD,CAEE,OAAOM,CAAP,EAAU;AACV;AACD;AACF;;AACD,aAAOd,KAAP;AACD,KATD;;AAWAe,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,MAA5B,EAAoC;AAClCC,MAAAA,GAAG,EAAE,MAAM;AACT,eAAOnB,IAAP;AACD;AAHiC,KAApC;AAMAiB,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,MAA5B,EAAoC;AAClCE,MAAAA,UAAU,EAAE,IADsB;AAElCD,MAAAA,GAAG,EAAET;AAF6B,KAApC;AAKAO,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,MAA5B,EAAoC;AAClCE,MAAAA,UAAU,EAAE,IADsB;AAElCD,MAAAA,GAAG,EAAEL;AAF6B,KAApC;AAID;;AAlD+B",sourcesContent:["/**\n * @typedef Parse.Cloud.HTTPResponse\n * @property {Buffer} buffer The raw byte representation of the response body. Use this to receive binary data. See Buffer for more details.\n * @property {Object} cookies The cookies sent by the server. The keys in this object are the names of the cookies. The values are Parse.Cloud.Cookie objects.\n * @property {Object} data The parsed response body as a JavaScript object. This is only available when the response Content-Type is application/x-www-form-urlencoded or application/json.\n * @property {Object} headers The headers sent by the server. The keys in this object are the names of the headers. We do not support multiple response headers with the same name. In the common case of Set-Cookie headers, please use the cookies field instead.\n * @property {Number} status The status code.\n * @property {String} text The raw text representation of the response body.\n */\nexport default class HTTPResponse {\n  constructor(response, body) {\n    let _text, _data;\n    this.status = response.statusCode;\n    this.headers = response.headers || {};\n    this.cookies = this.headers['set-cookie'];\n\n    if (typeof body == 'string') {\n      _text = body;\n    } else if (Buffer.isBuffer(body)) {\n      this.buffer = body;\n    } else if (typeof body == 'object') {\n      _data = body;\n    }\n\n    const getText = () => {\n      if (!_text && this.buffer) {\n        _text = this.buffer.toString('utf-8');\n      } else if (!_text && _data) {\n        _text = JSON.stringify(_data);\n      }\n      return _text;\n    };\n\n    const getData = () => {\n      if (!_data) {\n        try {\n          _data = JSON.parse(getText());\n        } catch (e) {\n          /* */\n        }\n      }\n      return _data;\n    };\n\n    Object.defineProperty(this, 'body', {\n      get: () => {\n        return body;\n      },\n    });\n\n    Object.defineProperty(this, 'text', {\n      enumerable: true,\n      get: getText,\n    });\n\n    Object.defineProperty(this, 'data', {\n      enumerable: true,\n      get: getData,\n    });\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"35d1befffcc58adab6f33ebe509cc28fae6f1826"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2er8akppof=function(){return actualCoverage;};}return actualCoverage;}cov_2er8akppof();cov_2er8akppof().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2er8akppof().s[1]++;exports.default=void 0;/**
 * @typedef Parse.Cloud.HTTPResponse
 * @property {Buffer} buffer The raw byte representation of the response body. Use this to receive binary data. See Buffer for more details.
 * @property {Object} cookies The cookies sent by the server. The keys in this object are the names of the cookies. The values are Parse.Cloud.Cookie objects.
 * @property {Object} data The parsed response body as a JavaScript object. This is only available when the response Content-Type is application/x-www-form-urlencoded or application/json.
 * @property {Object} headers The headers sent by the server. The keys in this object are the names of the headers. We do not support multiple response headers with the same name. In the common case of Set-Cookie headers, please use the cookies field instead.
 * @property {Number} status The status code.
 * @property {String} text The raw text representation of the response body.
 */class HTTPResponse{constructor(response,body){cov_2er8akppof().f[0]++;let _text,_data;cov_2er8akppof().s[2]++;this.status=response.statusCode;cov_2er8akppof().s[3]++;this.headers=(cov_2er8akppof().b[0][0]++,response.headers)||(cov_2er8akppof().b[0][1]++,{});cov_2er8akppof().s[4]++;this.cookies=this.headers['set-cookie'];cov_2er8akppof().s[5]++;if(typeof body=='string'){cov_2er8akppof().b[1][0]++;cov_2er8akppof().s[6]++;_text=body;}else{cov_2er8akppof().b[1][1]++;cov_2er8akppof().s[7]++;if(Buffer.isBuffer(body)){cov_2er8akppof().b[2][0]++;cov_2er8akppof().s[8]++;this.buffer=body;}else{cov_2er8akppof().b[2][1]++;cov_2er8akppof().s[9]++;if(typeof body=='object'){cov_2er8akppof().b[3][0]++;cov_2er8akppof().s[10]++;_data=body;}else{cov_2er8akppof().b[3][1]++;}}}cov_2er8akppof().s[11]++;const getText=()=>{cov_2er8akppof().f[1]++;cov_2er8akppof().s[12]++;if((cov_2er8akppof().b[5][0]++,!_text)&&(cov_2er8akppof().b[5][1]++,this.buffer)){cov_2er8akppof().b[4][0]++;cov_2er8akppof().s[13]++;_text=this.buffer.toString('utf-8');}else{cov_2er8akppof().b[4][1]++;cov_2er8akppof().s[14]++;if((cov_2er8akppof().b[7][0]++,!_text)&&(cov_2er8akppof().b[7][1]++,_data)){cov_2er8akppof().b[6][0]++;cov_2er8akppof().s[15]++;_text=JSON.stringify(_data);}else{cov_2er8akppof().b[6][1]++;}}cov_2er8akppof().s[16]++;return _text;};cov_2er8akppof().s[17]++;const getData=()=>{cov_2er8akppof().f[2]++;cov_2er8akppof().s[18]++;if(!_data){cov_2er8akppof().b[8][0]++;cov_2er8akppof().s[19]++;try{cov_2er8akppof().s[20]++;_data=JSON.parse(getText());}catch(e){/* */}}else{cov_2er8akppof().b[8][1]++;}cov_2er8akppof().s[21]++;return _data;};cov_2er8akppof().s[22]++;Object.defineProperty(this,'body',{get:()=>{cov_2er8akppof().f[3]++;cov_2er8akppof().s[23]++;return body;}});cov_2er8akppof().s[24]++;Object.defineProperty(this,'text',{enumerable:true,get:getText});cov_2er8akppof().s[25]++;Object.defineProperty(this,'data',{enumerable:true,get:getData});}}cov_2er8akppof().s[26]++;exports.default=HTTPResponse;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbG91ZC1jb2RlL0hUVFBSZXNwb25zZS5qcyJdLCJuYW1lcyI6WyJIVFRQUmVzcG9uc2UiLCJjb25zdHJ1Y3RvciIsInJlc3BvbnNlIiwiYm9keSIsIl90ZXh0IiwiX2RhdGEiLCJzdGF0dXMiLCJzdGF0dXNDb2RlIiwiaGVhZGVycyIsImNvb2tpZXMiLCJCdWZmZXIiLCJpc0J1ZmZlciIsImJ1ZmZlciIsImdldFRleHQiLCJ0b1N0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZXREYXRhIiwicGFyc2UiLCJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJlbnVtZXJhYmxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2UsTUFBTUEsWUFBTixDQUFtQjtBQUNoQ0MsRUFBQUEsV0FBVyxDQUFDQyxRQUFELEVBQVdDLElBQVgsRUFBaUI7QUFDMUIsUUFBSUMsS0FBSixFQUFXQyxLQUFYOztBQUNBLFNBQUtDLE1BQUwsR0FBY0osUUFBUSxDQUFDSyxVQUF2QjtBQUNBLFNBQUtDLE9BQUwsR0FBZU4sUUFBUSxDQUFDTSxPQUFULElBQW9CLEVBQW5DO0FBQ0EsU0FBS0MsT0FBTCxHQUFlLEtBQUtELE9BQUwsQ0FBYSxZQUFiLENBQWY7O0FBRUEsUUFBSSxPQUFPTCxJQUFQLElBQWUsUUFBbkIsRUFBNkI7QUFDM0JDLE1BQUFBLEtBQUssR0FBR0QsSUFBUjtBQUNELEtBRkQsTUFFTyxJQUFJTyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JSLElBQWhCLENBQUosRUFBMkI7QUFDaEMsV0FBS1MsTUFBTCxHQUFjVCxJQUFkO0FBQ0QsS0FGTSxNQUVBLElBQUksT0FBT0EsSUFBUCxJQUFlLFFBQW5CLEVBQTZCO0FBQ2xDRSxNQUFBQSxLQUFLLEdBQUdGLElBQVI7QUFDRDs7QUFFRCxVQUFNVSxPQUFPLEdBQUcsTUFBTTtBQUNwQixVQUFJLENBQUNULEtBQUQsSUFBVSxLQUFLUSxNQUFuQixFQUEyQjtBQUN6QlIsUUFBQUEsS0FBSyxHQUFHLEtBQUtRLE1BQUwsQ0FBWUUsUUFBWixDQUFxQixPQUFyQixDQUFSO0FBQ0QsT0FGRCxNQUVPLElBQUksQ0FBQ1YsS0FBRCxJQUFVQyxLQUFkLEVBQXFCO0FBQzFCRCxRQUFBQSxLQUFLLEdBQUdXLElBQUksQ0FBQ0MsU0FBTCxDQUFlWCxLQUFmLENBQVI7QUFDRDs7QUFDRCxhQUFPRCxLQUFQO0FBQ0QsS0FQRDs7QUFTQSxVQUFNYSxPQUFPLEdBQUcsTUFBTTtBQUNwQixVQUFJLENBQUNaLEtBQUwsRUFBWTtBQUNWLFlBQUk7QUFDRkEsVUFBQUEsS0FBSyxHQUFHVSxJQUFJLENBQUNHLEtBQUwsQ0FBV0wsT0FBTyxFQUFsQixDQUFSO0FBQ0QsU0FGRCxDQUVFLE9BQU9NLENBQVAsRUFBVTtBQUNWO0FBQ0Q7QUFDRjs7QUFDRCxhQUFPZCxLQUFQO0FBQ0QsS0FURDs7QUFXQWUsSUFBQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCLElBQXRCLEVBQTRCLE1BQTVCLEVBQW9DO0FBQ2xDQyxNQUFBQSxHQUFHLEVBQUUsTUFBTTtBQUNULGVBQU9uQixJQUFQO0FBQ0Q7QUFIaUMsS0FBcEM7QUFNQWlCLElBQUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQixJQUF0QixFQUE0QixNQUE1QixFQUFvQztBQUNsQ0UsTUFBQUEsVUFBVSxFQUFFLElBRHNCO0FBRWxDRCxNQUFBQSxHQUFHLEVBQUVUO0FBRjZCLEtBQXBDO0FBS0FPLElBQUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQixJQUF0QixFQUE0QixNQUE1QixFQUFvQztBQUNsQ0UsTUFBQUEsVUFBVSxFQUFFLElBRHNCO0FBRWxDRCxNQUFBQSxHQUFHLEVBQUVMO0FBRjZCLEtBQXBDO0FBSUQ7O0FBbEQrQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYgUGFyc2UuQ2xvdWQuSFRUUFJlc3BvbnNlXG4gKiBAcHJvcGVydHkge0J1ZmZlcn0gYnVmZmVyIFRoZSByYXcgYnl0ZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgcmVzcG9uc2UgYm9keS4gVXNlIHRoaXMgdG8gcmVjZWl2ZSBiaW5hcnkgZGF0YS4gU2VlIEJ1ZmZlciBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHByb3BlcnR5IHtPYmplY3R9IGNvb2tpZXMgVGhlIGNvb2tpZXMgc2VudCBieSB0aGUgc2VydmVyLiBUaGUga2V5cyBpbiB0aGlzIG9iamVjdCBhcmUgdGhlIG5hbWVzIG9mIHRoZSBjb29raWVzLiBUaGUgdmFsdWVzIGFyZSBQYXJzZS5DbG91ZC5Db29raWUgb2JqZWN0cy5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhIFRoZSBwYXJzZWQgcmVzcG9uc2UgYm9keSBhcyBhIEphdmFTY3JpcHQgb2JqZWN0LiBUaGlzIGlzIG9ubHkgYXZhaWxhYmxlIHdoZW4gdGhlIHJlc3BvbnNlIENvbnRlbnQtVHlwZSBpcyBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQgb3IgYXBwbGljYXRpb24vanNvbi5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBoZWFkZXJzIFRoZSBoZWFkZXJzIHNlbnQgYnkgdGhlIHNlcnZlci4gVGhlIGtleXMgaW4gdGhpcyBvYmplY3QgYXJlIHRoZSBuYW1lcyBvZiB0aGUgaGVhZGVycy4gV2UgZG8gbm90IHN1cHBvcnQgbXVsdGlwbGUgcmVzcG9uc2UgaGVhZGVycyB3aXRoIHRoZSBzYW1lIG5hbWUuIEluIHRoZSBjb21tb24gY2FzZSBvZiBTZXQtQ29va2llIGhlYWRlcnMsIHBsZWFzZSB1c2UgdGhlIGNvb2tpZXMgZmllbGQgaW5zdGVhZC5cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBzdGF0dXMgVGhlIHN0YXR1cyBjb2RlLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IHRleHQgVGhlIHJhdyB0ZXh0IHJlcHJlc2VudGF0aW9uIG9mIHRoZSByZXNwb25zZSBib2R5LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIVFRQUmVzcG9uc2Uge1xuICBjb25zdHJ1Y3RvcihyZXNwb25zZSwgYm9keSkge1xuICAgIGxldCBfdGV4dCwgX2RhdGE7XG4gICAgdGhpcy5zdGF0dXMgPSByZXNwb25zZS5zdGF0dXNDb2RlO1xuICAgIHRoaXMuaGVhZGVycyA9IHJlc3BvbnNlLmhlYWRlcnMgfHwge307XG4gICAgdGhpcy5jb29raWVzID0gdGhpcy5oZWFkZXJzWydzZXQtY29va2llJ107XG5cbiAgICBpZiAodHlwZW9mIGJvZHkgPT0gJ3N0cmluZycpIHtcbiAgICAgIF90ZXh0ID0gYm9keTtcbiAgICB9IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcihib2R5KSkge1xuICAgICAgdGhpcy5idWZmZXIgPSBib2R5O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT0gJ29iamVjdCcpIHtcbiAgICAgIF9kYXRhID0gYm9keTtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRUZXh0ID0gKCkgPT4ge1xuICAgICAgaWYgKCFfdGV4dCAmJiB0aGlzLmJ1ZmZlcikge1xuICAgICAgICBfdGV4dCA9IHRoaXMuYnVmZmVyLnRvU3RyaW5nKCd1dGYtOCcpO1xuICAgICAgfSBlbHNlIGlmICghX3RleHQgJiYgX2RhdGEpIHtcbiAgICAgICAgX3RleHQgPSBKU09OLnN0cmluZ2lmeShfZGF0YSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3RleHQ7XG4gICAgfTtcblxuICAgIGNvbnN0IGdldERhdGEgPSAoKSA9PiB7XG4gICAgICBpZiAoIV9kYXRhKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgX2RhdGEgPSBKU09OLnBhcnNlKGdldFRleHQoKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvKiAqL1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gX2RhdGE7XG4gICAgfTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYm9keScsIHtcbiAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICByZXR1cm4gYm9keTtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3RleHQnLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBnZXRUZXh0LFxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdkYXRhJywge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZ2V0RGF0YSxcbiAgICB9KTtcbiAgfVxufVxuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbG91ZC1jb2RlL0hUVFBSZXNwb25zZS5qcyJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RvciIsInJlc3BvbnNlIiwiX3RleHQiLCJCdWZmZXIiLCJfZGF0YSIsImdldFRleHQiLCJKU09OIiwiZ2V0RGF0YSIsIk9iamVjdCIsImdldCIsImVudW1lcmFibGUiXSwibWFwcGluZ3MiOiJnMlFBUUE7Mk5BUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ2UsS0FBQSxDQUFBLFlBQW1CLENBQ2hDQSxXQUFXLENBQUEsUUFBQSxDQUFBLElBQUEsQ0FBaUIseUJBQzFCLEdBQUEsQ0FBQSxLQUFBLENBQUEsS0FBQSxDQUQwQix3QkFFMUIsS0FBQSxNQUFBLENBQWNDLFFBQVEsQ0FBdEIsVUFBQSxDQUYwQix3QkFHMUIsS0FBQSxPQUFBLENBQWVBLDRCQUFBQSxRQUFRLENBQVJBLE9BQUFBLCtCQUFmLEVBQWVBLENBQWYsQ0FIMEIsd0JBSTFCLEtBQUEsT0FBQSxDQUFlLEtBQUEsT0FBQSxDQUFmLFlBQWUsQ0FBZixDQUowQix3QkFNMUIsR0FBSSxNQUFBLENBQUEsSUFBQSxFQUFKLFFBQUEsQ0FBNkIsb0RBQzNCQyxLQUFLLENBQUxBLElBQUFBLENBREYsQ0FBQSxJQUVPLHVEQUFJQyxNQUFNLENBQU5BLFFBQUFBLENBQUosSUFBSUEsQ0FBSixDQUEyQixvREFDaEMsS0FBQSxNQUFBLENBQUEsSUFBQSxDQURLLENBQUEsSUFFQSx1REFBSSxNQUFBLENBQUEsSUFBQSxFQUFKLFFBQUEsQ0FBNkIscURBQ2xDQyxLQUFLLENBQUxBLElBQUFBLENBQ0QsQ0FGTSxpQ0FFTixFQVp5Qix5QkFjMUIsS0FBTUMsQ0FBQUEsT0FBTyxDQUFHLElBQU0sa0RBQ3BCLEdBQUksNkJBQUEsS0FBQSwrQkFBVSxLQUFkLE1BQUksQ0FBSixDQUEyQixxREFDekJILEtBQUssQ0FBRyxLQUFBLE1BQUEsQ0FBQSxRQUFBLENBQVJBLE9BQVEsQ0FBUkEsQ0FERixDQUFBLElBRU8sd0RBQUksNkJBQUEsS0FBQSwrQkFBSixLQUFJLENBQUosQ0FBcUIscURBQzFCQSxLQUFLLENBQUdJLElBQUksQ0FBSkEsU0FBQUEsQ0FBUkosS0FBUUksQ0FBUkosQ0FDRCxDQUZNLGlDQUVOLENBTG1CLHlCQU1wQixNQUFBLENBQUEsS0FBQSxDQU5GLENBQUEsQ0FkMEIseUJBdUIxQixLQUFNSyxDQUFBQSxPQUFPLENBQUcsSUFBTSxrREFDcEIsR0FBSSxDQUFKLEtBQUEsQ0FBWSxxREFDVixHQUFJLDBCQUNGSCxLQUFLLENBQUdFLElBQUksQ0FBSkEsS0FBQUEsQ0FBV0QsT0FBbkJELEVBQVFFLENBQVJGLENBREYsQ0FFRSxNQUFBLENBQUEsQ0FBVSxDQUNWLEtBQ0QsQ0FDRixDQU5ELGlDQURvQix5QkFRcEIsTUFBQSxDQUFBLEtBQUEsQ0FSRixDQUFBLENBdkIwQix5QkFrQzFCSSxNQUFNLENBQU5BLGNBQUFBLENBQUFBLElBQUFBLENBQUFBLE1BQUFBLENBQW9DLENBQ2xDQyxHQUFHLENBQUUsSUFBTSxrREFDVCxNQUFBLENBQUEsSUFBQSxDQUNELENBSGlDLENBQXBDRCxFQWxDMEIseUJBd0MxQkEsTUFBTSxDQUFOQSxjQUFBQSxDQUFBQSxJQUFBQSxDQUFBQSxNQUFBQSxDQUFvQyxDQUNsQ0UsVUFBVSxDQUR3QixJQUFBLENBRWxDRCxHQUFHLENBQUVKLE9BRjZCLENBQXBDRyxFQXhDMEIseUJBNkMxQkEsTUFBTSxDQUFOQSxjQUFBQSxDQUFBQSxJQUFBQSxDQUFBQSxNQUFBQSxDQUFvQyxDQUNsQ0UsVUFBVSxDQUR3QixJQUFBLENBRWxDRCxHQUFHLENBQUVGLE9BRjZCLENBQXBDQyxFQUlELENBbEQrQixDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiBQYXJzZS5DbG91ZC5IVFRQUmVzcG9uc2VcbiAqIEBwcm9wZXJ0eSB7QnVmZmVyfSBidWZmZXIgVGhlIHJhdyBieXRlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSByZXNwb25zZSBib2R5LiBVc2UgdGhpcyB0byByZWNlaXZlIGJpbmFyeSBkYXRhLiBTZWUgQnVmZmVyIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcHJvcGVydHkge09iamVjdH0gY29va2llcyBUaGUgY29va2llcyBzZW50IGJ5IHRoZSBzZXJ2ZXIuIFRoZSBrZXlzIGluIHRoaXMgb2JqZWN0IGFyZSB0aGUgbmFtZXMgb2YgdGhlIGNvb2tpZXMuIFRoZSB2YWx1ZXMgYXJlIFBhcnNlLkNsb3VkLkNvb2tpZSBvYmplY3RzLlxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEgVGhlIHBhcnNlZCByZXNwb25zZSBib2R5IGFzIGEgSmF2YVNjcmlwdCBvYmplY3QuIFRoaXMgaXMgb25seSBhdmFpbGFibGUgd2hlbiB0aGUgcmVzcG9uc2UgQ29udGVudC1UeXBlIGlzIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCBvciBhcHBsaWNhdGlvbi9qc29uLlxuICogQHByb3BlcnR5IHtPYmplY3R9IGhlYWRlcnMgVGhlIGhlYWRlcnMgc2VudCBieSB0aGUgc2VydmVyLiBUaGUga2V5cyBpbiB0aGlzIG9iamVjdCBhcmUgdGhlIG5hbWVzIG9mIHRoZSBoZWFkZXJzLiBXZSBkbyBub3Qgc3VwcG9ydCBtdWx0aXBsZSByZXNwb25zZSBoZWFkZXJzIHdpdGggdGhlIHNhbWUgbmFtZS4gSW4gdGhlIGNvbW1vbiBjYXNlIG9mIFNldC1Db29raWUgaGVhZGVycywgcGxlYXNlIHVzZSB0aGUgY29va2llcyBmaWVsZCBpbnN0ZWFkLlxuICogQHByb3BlcnR5IHtOdW1iZXJ9IHN0YXR1cyBUaGUgc3RhdHVzIGNvZGUuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gdGV4dCBUaGUgcmF3IHRleHQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJlc3BvbnNlIGJvZHkuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhUVFBSZXNwb25zZSB7XG4gIGNvbnN0cnVjdG9yKHJlc3BvbnNlLCBib2R5KSB7XG4gICAgbGV0IF90ZXh0LCBfZGF0YTtcbiAgICB0aGlzLnN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1c0NvZGU7XG4gICAgdGhpcy5oZWFkZXJzID0gcmVzcG9uc2UuaGVhZGVycyB8fCB7fTtcbiAgICB0aGlzLmNvb2tpZXMgPSB0aGlzLmhlYWRlcnNbJ3NldC1jb29raWUnXTtcblxuICAgIGlmICh0eXBlb2YgYm9keSA9PSAnc3RyaW5nJykge1xuICAgICAgX3RleHQgPSBib2R5O1xuICAgIH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKGJvZHkpKSB7XG4gICAgICB0aGlzLmJ1ZmZlciA9IGJvZHk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PSAnb2JqZWN0Jykge1xuICAgICAgX2RhdGEgPSBib2R5O1xuICAgIH1cblxuICAgIGNvbnN0IGdldFRleHQgPSAoKSA9PiB7XG4gICAgICBpZiAoIV90ZXh0ICYmIHRoaXMuYnVmZmVyKSB7XG4gICAgICAgIF90ZXh0ID0gdGhpcy5idWZmZXIudG9TdHJpbmcoJ3V0Zi04Jyk7XG4gICAgICB9IGVsc2UgaWYgKCFfdGV4dCAmJiBfZGF0YSkge1xuICAgICAgICBfdGV4dCA9IEpTT04uc3RyaW5naWZ5KF9kYXRhKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfdGV4dDtcbiAgICB9O1xuXG4gICAgY29uc3QgZ2V0RGF0YSA9ICgpID0+IHtcbiAgICAgIGlmICghX2RhdGEpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBfZGF0YSA9IEpTT04ucGFyc2UoZ2V0VGV4dCgpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8qICovXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBfZGF0YTtcbiAgICB9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdib2R5Jywge1xuICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBib2R5O1xuICAgICAgfSxcbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAndGV4dCcsIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGdldFRleHQsXG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2RhdGEnLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBnZXREYXRhLFxuICAgIH0pO1xuICB9XG59XG4iXX0=