"use strict";/**
 * utils.js
 * @file General purpose utilities
 * @description General purpose utilities.
 */function cov_1c63b0vqq8(){var path="/parse-server/lib/Utils.js";var hash="4e3e55fb5471133084ab6672dce70f1ac02dc90d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Utils.js",statementMap:{"0":{start:{line:8,column:13},end:{line:8,column:28}},"1":{start:{line:10,column:11},end:{line:10,column:33}},"2":{start:{line:47,column:17},end:{line:47,column:43}},"3":{start:{line:48,column:21},end:{line:48,column:46}},"4":{start:{line:50,column:4},end:{line:54,column:5}},"5":{start:{line:51,column:6},end:{line:53,column:8}},"6":{start:{line:57,column:23},end:{line:57,column:56}},"7":{start:{line:58,column:29},end:{line:58,column:63}},"8":{start:{line:60,column:4},end:{line:65,column:5}},"9":{start:{line:61,column:6},end:{line:64,column:8}},"10":{start:{line:68,column:21},end:{line:68,column:41}},"11":{start:{line:69,column:25},end:{line:69,column:60}},"12":{start:{line:70,column:31},end:{line:70,column:67}},"13":{start:{line:72,column:4},end:{line:77,column:5}},"14":{start:{line:73,column:6},end:{line:76,column:8}},"15":{start:{line:80,column:4},end:{line:82,column:6}},"16":{start:{line:93,column:4},end:{line:98,column:5}},"17":{start:{line:94,column:6},end:{line:94,column:28}},"18":{start:{line:95,column:6},end:{line:95,column:18}},"19":{start:{line:97,column:6},end:{line:97,column:19}},"20":{start:{line:109,column:4},end:{line:109,column:45}},"21":{start:{line:121,column:4},end:{line:131,column:5}},"22":{start:{line:122,column:6},end:{line:130,column:7}},"23":{start:{line:123,column:23},end:{line:123,column:68}},"24":{start:{line:125,column:8},end:{line:129,column:9}},"25":{start:{line:126,column:10},end:{line:126,column:66}},"26":{start:{line:128,column:10},end:{line:128,column:36}},"27":{start:{line:133,column:4},end:{line:133,column:18}},"28":{start:{line:143,column:4},end:{line:143,column:37}},"29":{start:{line:172,column:17},end:{line:172,column:36}},"30":{start:{line:173,column:16},end:{line:173,column:27}},"31":{start:{line:174,column:19},end:{line:174,column:30}},"32":{start:{line:176,column:4},end:{line:186,column:5}},"33":{start:{line:177,column:6},end:{line:177,column:27}},"34":{start:{line:178,column:24},end:{line:178,column:33}},"35":{start:{line:180,column:6},end:{line:185,column:7}},"36":{start:{line:181,column:8},end:{line:181,column:76}},"37":{start:{line:183,column:23},end:{line:183,column:49}},"38":{start:{line:184,column:8},end:{line:184,column:29}},"39":{start:{line:188,column:4},end:{line:188,column:19}},"40":{start:{line:212,column:4},end:{line:220,column:5}},"41":{start:{line:213,column:19},end:{line:213,column:29}},"42":{start:{line:214,column:25},end:{line:214,column:33}},"43":{start:{line:215,column:20},end:{line:215,column:31}},"44":{start:{line:217,column:6},end:{line:219,column:7}},"45":{start:{line:218,column:8},end:{line:218,column:90}},"46":{start:{line:225,column:0},end:{line:225,column:23}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:45,column:2},end:{line:45,column:3}},loc:{start:{line:45,column:53},end:{line:83,column:3}},line:45},"1":{name:"(anonymous_1)",decl:{start:{line:92,column:2},end:{line:92,column:3}},loc:{start:{line:92,column:32},end:{line:99,column:3}},line:92},"2":{name:"(anonymous_2)",decl:{start:{line:108,column:2},end:{line:108,column:3}},loc:{start:{line:108,column:19},end:{line:110,column:3}},line:108},"3":{name:"(anonymous_3)",decl:{start:{line:120,column:2},end:{line:120,column:3}},loc:{start:{line:120,column:69},end:{line:134,column:3}},line:120},"4":{name:"(anonymous_4)",decl:{start:{line:142,column:2},end:{line:142,column:3}},loc:{start:{line:142,column:27},end:{line:144,column:3}},line:142},"5":{name:"(anonymous_5)",decl:{start:{line:171,column:2},end:{line:171,column:3}},loc:{start:{line:171,column:81},end:{line:189,column:3}},line:171},"6":{name:"(anonymous_6)",decl:{start:{line:211,column:2},end:{line:211,column:3}},loc:{start:{line:211,column:39},end:{line:221,column:3}},line:211}},branchMap:{"0":{loc:{start:{line:50,column:4},end:{line:54,column:5}},type:"if",locations:[{start:{line:50,column:4},end:{line:54,column:5}},{start:{line:50,column:4},end:{line:54,column:5}}],line:50},"1":{loc:{start:{line:60,column:4},end:{line:65,column:5}},type:"if",locations:[{start:{line:60,column:4},end:{line:65,column:5}},{start:{line:60,column:4},end:{line:65,column:5}}],line:60},"2":{loc:{start:{line:72,column:4},end:{line:77,column:5}},type:"if",locations:[{start:{line:72,column:4},end:{line:77,column:5}},{start:{line:72,column:4},end:{line:77,column:5}}],line:72},"3":{loc:{start:{line:120,column:39},end:{line:120,column:54}},type:"default-arg",locations:[{start:{line:120,column:51},end:{line:120,column:54}}],line:120},"4":{loc:{start:{line:120,column:56},end:{line:120,column:67}},type:"default-arg",locations:[{start:{line:120,column:65},end:{line:120,column:67}}],line:120},"5":{loc:{start:{line:122,column:6},end:{line:130,column:7}},type:"if",locations:[{start:{line:122,column:6},end:{line:130,column:7}},{start:{line:122,column:6},end:{line:130,column:7}}],line:122},"6":{loc:{start:{line:123,column:23},end:{line:123,column:68}},type:"cond-expr",locations:[{start:{line:123,column:35},end:{line:123,column:62}},{start:{line:123,column:65},end:{line:123,column:68}}],line:123},"7":{loc:{start:{line:125,column:8},end:{line:129,column:9}},type:"if",locations:[{start:{line:125,column:8},end:{line:129,column:9}},{start:{line:125,column:8},end:{line:129,column:9}}],line:125},"8":{loc:{start:{line:125,column:12},end:{line:125,column:61}},type:"binary-expr",locations:[{start:{line:125,column:12},end:{line:125,column:40}},{start:{line:125,column:44},end:{line:125,column:61}}],line:125},"9":{loc:{start:{line:171,column:42},end:{line:171,column:51}},type:"default-arg",locations:[{start:{line:171,column:50},end:{line:171,column:51}}],line:171},"10":{loc:{start:{line:171,column:53},end:{line:171,column:65}},type:"default-arg",locations:[{start:{line:171,column:63},end:{line:171,column:65}}],line:171},"11":{loc:{start:{line:171,column:67},end:{line:171,column:79}},type:"default-arg",locations:[{start:{line:171,column:77},end:{line:171,column:79}}],line:171},"12":{loc:{start:{line:180,column:6},end:{line:185,column:7}},type:"if",locations:[{start:{line:180,column:6},end:{line:185,column:7}},{start:{line:180,column:6},end:{line:185,column:7}}],line:180},"13":{loc:{start:{line:217,column:6},end:{line:219,column:7}},type:"if",locations:[{start:{line:217,column:6},end:{line:219,column:7}},{start:{line:217,column:6},end:{line:219,column:7}}],line:217},"14":{loc:{start:{line:217,column:10},end:{line:217,column:58}},type:"binary-expr",locations:[{start:{line:217,column:10},end:{line:217,column:40}},{start:{line:217,column:44},end:{line:217,column:58}}],line:217},"15":{loc:{start:{line:217,column:12},end:{line:217,column:39}},type:"binary-expr",locations:[{start:{line:217,column:12},end:{line:217,column:22}},{start:{line:217,column:26},end:{line:217,column:39}}],line:217}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0],"4":[0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0],"10":[0],"11":[0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},inputSourceMap:{version:3,sources:["../src/Utils.js"],names:["path","require","fs","promises","Utils","getLocalizedPath","defaultPath","locale","file","basename","basePath","dirname","localePath","join","localeFileExists","fileExists","subdir","language","split","languagePath","languageFileExists","access","e","isPath","s","test","flattenObject","obj","parentKey","delimiter","result","key","Object","prototype","hasOwnProperty","call","newKey","isPromise","object","Promise","getObjectKeyPermutations","index","current","results","keys","values","value","nextIndex","length","assign","push","validateParams","params","types","type","isOptional","o","param","v","t","module","exports"],mappings:"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",sourcesContent:["/**\n * utils.js\n * @file General purpose utilities\n * @description General purpose utilities.\n */\n\nconst path = require('path');\nconst fs = require('fs').promises;\n\n/**\n * The general purpose utilities.\n */\nclass Utils {\n  /**\n   * @function getLocalizedPath\n   * @description Returns a localized file path accoring to the locale.\n   *\n   * Localized files are searched in subfolders of a given path, e.g.\n   *\n   * root/\n   * \u251C\u2500\u2500 base/                    // base path to files\n   * \u2502   \u251C\u2500\u2500 example.html         // default file\n   * \u2502   \u2514\u2500\u2500 de/                  // de language folder\n   * \u2502   \u2502   \u2514\u2500\u2500 example.html     // de localized file\n   * \u2502   \u2514\u2500\u2500 de-AT/               // de-AT locale folder\n   * \u2502   \u2502   \u2514\u2500\u2500 example.html     // de-AT localized file\n   *\n   * Files are matched with the locale in the following order:\n   * 1. Locale match, e.g. locale `de-AT` matches file in folder `de-AT`.\n   * 2. Language match, e.g. locale `de-AT` matches file in folder `de`.\n   * 3. Default; file in base folder is returned.\n   *\n   * @param {String} defaultPath The absolute file path, which is also\n   * the default path returned if localization is not available.\n   * @param {String} locale The locale.\n   * @returns {Promise<Object>} The object contains:\n   * - `path`: The path to the localized file, or the original path if\n   *   localization is not available.\n   * - `subdir`: The subdirectory of the localized file, or undefined if\n   *   there is no matching localized file.\n   */\n  static async getLocalizedPath(defaultPath, locale) {\n    // Get file name and paths\n    const file = path.basename(defaultPath);\n    const basePath = path.dirname(defaultPath);\n\n    // If locale is not set return default file\n    if (!locale) {\n      return { path: defaultPath };\n    }\n\n    // Check file for locale exists\n    const localePath = path.join(basePath, locale, file);\n    const localeFileExists = await Utils.fileExists(localePath);\n\n    // If file for locale exists return file\n    if (localeFileExists) {\n      return { path: localePath, subdir: locale };\n    }\n\n    // Check file for language exists\n    const language = locale.split('-')[0];\n    const languagePath = path.join(basePath, language, file);\n    const languageFileExists = await Utils.fileExists(languagePath);\n\n    // If file for language exists return file\n    if (languageFileExists) {\n      return { path: languagePath, subdir: language };\n    }\n\n    // Return default file\n    return { path: defaultPath };\n  }\n\n  /**\n   * @function fileExists\n   * @description Checks whether a file exists.\n   * @param {String} path The file path.\n   * @returns {Promise<Boolean>} Is true if the file can be accessed, false otherwise.\n   */\n  static async fileExists(path) {\n    try {\n      await fs.access(path);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * @function isPath\n   * @description Evaluates whether a string is a file path (as opposed to a URL for example).\n   * @param {String} s The string to evaluate.\n   * @returns {Boolean} Returns true if the evaluated string is a path.\n   */\n  static isPath(s) {\n    return /(^\\/)|(^\\.\\/)|(^\\.\\.\\/)/.test(s);\n  }\n\n  /**\n   * Flattens an object and crates new keys with custom delimiters.\n   * @param {Object} obj The object to flatten.\n   * @param {String} [delimiter='.'] The delimiter of the newly generated keys.\n   * @param {Object} result\n   * @returns {Object} The flattened object.\n   **/\n  static flattenObject(obj, parentKey, delimiter = '.', result = {}) {\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        const newKey = parentKey ? parentKey + delimiter + key : key;\n\n        if (typeof obj[key] === 'object' && obj[key] !== null) {\n          this.flattenObject(obj[key], newKey, delimiter, result);\n        } else {\n          result[newKey] = obj[key];\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Determines whether an object is a Promise.\n   * @param {any} object The object to validate.\n   * @returns {Boolean} Returns true if the object is a promise.\n   */\n  static isPromise(object) {\n    return object instanceof Promise;\n  }\n\n  /**\n   * Creates an object with all permutations of the original keys.\n   * For example, this definition:\n   * ```\n   * {\n   *   a: [true, false],\n   *   b: [1, 2],\n   *   c: ['x']\n   * }\n   * ```\n   * permutates to:\n   * ```\n   * [\n   *   { a: true, b: 1, c: 'x' },\n   *   { a: true, b: 2, c: 'x' },\n   *   { a: false, b: 1, c: 'x' },\n   *   { a: false, b: 2, c: 'x' }\n   * ]\n   * ```\n   * @param {Object} object The object to permutate.\n   * @param {Integer} [index=0] The current key index.\n   * @param {Object} [current={}] The current result entry being composed.\n   * @param {Array} [results=[]] The resulting array of permutations.\n   */\n  static getObjectKeyPermutations(object, index = 0, current = {}, results = []) {\n    const keys = Object.keys(object);\n    const key = keys[index];\n    const values = object[key];\n\n    for (const value of values) {\n      current[key] = value;\n      const nextIndex = index + 1;\n\n      if (nextIndex < keys.length) {\n        Utils.getObjectKeyPermutations(object, nextIndex, current, results);\n      } else {\n        const result = Object.assign({}, current);\n        results.push(result);\n      }\n    }\n    return results;\n  }\n\n  /**\n   * Validates parameters and throws if a parameter is invalid.\n   * Example parameter types syntax:\n   * ```\n   * {\n   *   parameterName: {\n   *      t: 'boolean',\n   *      v: isBoolean,\n   *      o: true\n   *   },\n   *   ...\n   * }\n   * ```\n   * @param {Object} params The parameters to validate.\n   * @param {Array<Object>} types The parameter types used for validation.\n   * @param {Object} types.t The parameter type; used for error message, not for validation.\n   * @param {Object} types.v The function to validate the parameter value.\n   * @param {Boolean} [types.o=false] Is true if the parameter is optional.\n   */\n  static validateParams(params, types) {\n    for (const key of Object.keys(params)) {\n      const type = types[key];\n      const isOptional = !!type.o;\n      const param = params[key];\n      if (!(isOptional && param == null) && !type.v(param)) {\n        throw `Invalid parameter ${key} must be of type ${type.t} but is ${typeof param}`;\n      }\n    }\n  }\n}\n\nmodule.exports = Utils;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"4e3e55fb5471133084ab6672dce70f1ac02dc90d"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1c63b0vqq8=function(){return actualCoverage;};}return actualCoverage;}cov_1c63b0vqq8();const path=(cov_1c63b0vqq8().s[0]++,require('path'));const fs=(cov_1c63b0vqq8().s[1]++,require('fs').promises);/**
 * The general purpose utilities.
 */class Utils{/**
   * @function getLocalizedPath
   * @description Returns a localized file path accoring to the locale.
   *
   * Localized files are searched in subfolders of a given path, e.g.
   *
   * root/
   * ├── base/                    // base path to files
   * │   ├── example.html         // default file
   * │   └── de/                  // de language folder
   * │   │   └── example.html     // de localized file
   * │   └── de-AT/               // de-AT locale folder
   * │   │   └── example.html     // de-AT localized file
   *
   * Files are matched with the locale in the following order:
   * 1. Locale match, e.g. locale `de-AT` matches file in folder `de-AT`.
   * 2. Language match, e.g. locale `de-AT` matches file in folder `de`.
   * 3. Default; file in base folder is returned.
   *
   * @param {String} defaultPath The absolute file path, which is also
   * the default path returned if localization is not available.
   * @param {String} locale The locale.
   * @returns {Promise<Object>} The object contains:
   * - `path`: The path to the localized file, or the original path if
   *   localization is not available.
   * - `subdir`: The subdirectory of the localized file, or undefined if
   *   there is no matching localized file.
   */static async getLocalizedPath(defaultPath,locale){cov_1c63b0vqq8().f[0]++;// Get file name and paths
const file=(cov_1c63b0vqq8().s[2]++,path.basename(defaultPath));const basePath=(cov_1c63b0vqq8().s[3]++,path.dirname(defaultPath));// If locale is not set return default file
cov_1c63b0vqq8().s[4]++;if(!locale){cov_1c63b0vqq8().b[0][0]++;cov_1c63b0vqq8().s[5]++;return{path:defaultPath};}else{cov_1c63b0vqq8().b[0][1]++;}// Check file for locale exists
const localePath=(cov_1c63b0vqq8().s[6]++,path.join(basePath,locale,file));const localeFileExists=(cov_1c63b0vqq8().s[7]++,await Utils.fileExists(localePath));// If file for locale exists return file
cov_1c63b0vqq8().s[8]++;if(localeFileExists){cov_1c63b0vqq8().b[1][0]++;cov_1c63b0vqq8().s[9]++;return{path:localePath,subdir:locale};}else{cov_1c63b0vqq8().b[1][1]++;}// Check file for language exists
const language=(cov_1c63b0vqq8().s[10]++,locale.split('-')[0]);const languagePath=(cov_1c63b0vqq8().s[11]++,path.join(basePath,language,file));const languageFileExists=(cov_1c63b0vqq8().s[12]++,await Utils.fileExists(languagePath));// If file for language exists return file
cov_1c63b0vqq8().s[13]++;if(languageFileExists){cov_1c63b0vqq8().b[2][0]++;cov_1c63b0vqq8().s[14]++;return{path:languagePath,subdir:language};}else{cov_1c63b0vqq8().b[2][1]++;}// Return default file
cov_1c63b0vqq8().s[15]++;return{path:defaultPath};}/**
   * @function fileExists
   * @description Checks whether a file exists.
   * @param {String} path The file path.
   * @returns {Promise<Boolean>} Is true if the file can be accessed, false otherwise.
   */static async fileExists(path){cov_1c63b0vqq8().f[1]++;cov_1c63b0vqq8().s[16]++;try{cov_1c63b0vqq8().s[17]++;await fs.access(path);cov_1c63b0vqq8().s[18]++;return true;}catch(e){cov_1c63b0vqq8().s[19]++;return false;}}/**
   * @function isPath
   * @description Evaluates whether a string is a file path (as opposed to a URL for example).
   * @param {String} s The string to evaluate.
   * @returns {Boolean} Returns true if the evaluated string is a path.
   */static isPath(s){cov_1c63b0vqq8().f[2]++;cov_1c63b0vqq8().s[20]++;return /(^\/)|(^\.\/)|(^\.\.\/)/.test(s);}/**
   * Flattens an object and crates new keys with custom delimiters.
   * @param {Object} obj The object to flatten.
   * @param {String} [delimiter='.'] The delimiter of the newly generated keys.
   * @param {Object} result
   * @returns {Object} The flattened object.
   **/static flattenObject(obj,parentKey,delimiter=(cov_1c63b0vqq8().b[3][0]++,'.'),result=(cov_1c63b0vqq8().b[4][0]++,{})){cov_1c63b0vqq8().f[3]++;cov_1c63b0vqq8().s[21]++;for(const key in obj){cov_1c63b0vqq8().s[22]++;if(Object.prototype.hasOwnProperty.call(obj,key)){cov_1c63b0vqq8().b[5][0]++;const newKey=(cov_1c63b0vqq8().s[23]++,parentKey?(cov_1c63b0vqq8().b[6][0]++,parentKey+delimiter+key):(cov_1c63b0vqq8().b[6][1]++,key));cov_1c63b0vqq8().s[24]++;if((cov_1c63b0vqq8().b[8][0]++,typeof obj[key]==='object')&&(cov_1c63b0vqq8().b[8][1]++,obj[key]!==null)){cov_1c63b0vqq8().b[7][0]++;cov_1c63b0vqq8().s[25]++;this.flattenObject(obj[key],newKey,delimiter,result);}else{cov_1c63b0vqq8().b[7][1]++;cov_1c63b0vqq8().s[26]++;result[newKey]=obj[key];}}else{cov_1c63b0vqq8().b[5][1]++;}}cov_1c63b0vqq8().s[27]++;return result;}/**
   * Determines whether an object is a Promise.
   * @param {any} object The object to validate.
   * @returns {Boolean} Returns true if the object is a promise.
   */static isPromise(object){cov_1c63b0vqq8().f[4]++;cov_1c63b0vqq8().s[28]++;return object instanceof Promise;}/**
   * Creates an object with all permutations of the original keys.
   * For example, this definition:
   * ```
   * {
   *   a: [true, false],
   *   b: [1, 2],
   *   c: ['x']
   * }
   * ```
   * permutates to:
   * ```
   * [
   *   { a: true, b: 1, c: 'x' },
   *   { a: true, b: 2, c: 'x' },
   *   { a: false, b: 1, c: 'x' },
   *   { a: false, b: 2, c: 'x' }
   * ]
   * ```
   * @param {Object} object The object to permutate.
   * @param {Integer} [index=0] The current key index.
   * @param {Object} [current={}] The current result entry being composed.
   * @param {Array} [results=[]] The resulting array of permutations.
   */static getObjectKeyPermutations(object,index=(cov_1c63b0vqq8().b[9][0]++,0),current=(cov_1c63b0vqq8().b[10][0]++,{}),results=(cov_1c63b0vqq8().b[11][0]++,[])){cov_1c63b0vqq8().f[5]++;const keys=(cov_1c63b0vqq8().s[29]++,Object.keys(object));const key=(cov_1c63b0vqq8().s[30]++,keys[index]);const values=(cov_1c63b0vqq8().s[31]++,object[key]);cov_1c63b0vqq8().s[32]++;for(const value of values){cov_1c63b0vqq8().s[33]++;current[key]=value;const nextIndex=(cov_1c63b0vqq8().s[34]++,index+1);cov_1c63b0vqq8().s[35]++;if(nextIndex<keys.length){cov_1c63b0vqq8().b[12][0]++;cov_1c63b0vqq8().s[36]++;Utils.getObjectKeyPermutations(object,nextIndex,current,results);}else{cov_1c63b0vqq8().b[12][1]++;const result=(cov_1c63b0vqq8().s[37]++,Object.assign({},current));cov_1c63b0vqq8().s[38]++;results.push(result);}}cov_1c63b0vqq8().s[39]++;return results;}/**
   * Validates parameters and throws if a parameter is invalid.
   * Example parameter types syntax:
   * ```
   * {
   *   parameterName: {
   *      t: 'boolean',
   *      v: isBoolean,
   *      o: true
   *   },
   *   ...
   * }
   * ```
   * @param {Object} params The parameters to validate.
   * @param {Array<Object>} types The parameter types used for validation.
   * @param {Object} types.t The parameter type; used for error message, not for validation.
   * @param {Object} types.v The function to validate the parameter value.
   * @param {Boolean} [types.o=false] Is true if the parameter is optional.
   */static validateParams(params,types){cov_1c63b0vqq8().f[6]++;cov_1c63b0vqq8().s[40]++;for(const key of Object.keys(params)){const type=(cov_1c63b0vqq8().s[41]++,types[key]);const isOptional=(cov_1c63b0vqq8().s[42]++,!!type.o);const param=(cov_1c63b0vqq8().s[43]++,params[key]);cov_1c63b0vqq8().s[44]++;if((cov_1c63b0vqq8().b[14][0]++,!((cov_1c63b0vqq8().b[15][0]++,isOptional)&&(cov_1c63b0vqq8().b[15][1]++,param==null)))&&(cov_1c63b0vqq8().b[14][1]++,!type.v(param))){cov_1c63b0vqq8().b[13][0]++;cov_1c63b0vqq8().s[45]++;throw`Invalid parameter ${key} must be of type ${type.t} but is ${typeof param}`;}else{cov_1c63b0vqq8().b[13][1]++;}}}}cov_1c63b0vqq8().s[46]++;module.exports=Utils;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,