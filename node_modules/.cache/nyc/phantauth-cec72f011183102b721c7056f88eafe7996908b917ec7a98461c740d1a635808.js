"use strict";/*
 * PhantAuth was designed to simplify testing for applications using OpenID Connect
 * authentication by making use of random generated users.
 *
 * To learn more, please go to: https://www.phantauth.net
 */function cov_2837gjdubp(){var path="/parse-server/lib/Adapters/Auth/phantauth.js";var hash="3ef2fe346ea31399d9b3468f53963935eb56c2f9";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Adapters/Auth/phantauth.js",statementMap:{"0":{start:{line:11,column:4},end:{line:11,column:25}},"1":{start:{line:13,column:21},end:{line:13,column:46}},"2":{start:{line:17,column:2},end:{line:23,column:5}},"3":{start:{line:18,column:4},end:{line:20,column:5}},"4":{start:{line:19,column:6},end:{line:19,column:13}},"5":{start:{line:22,column:4},end:{line:22,column:100}},"6":{start:{line:28,column:2},end:{line:28,column:27}},"7":{start:{line:33,column:2},end:{line:40,column:5}},"8":{start:{line:43,column:0},end:{line:46,column:2}}},fnMap:{"0":{name:"validateAuthData",decl:{start:{line:16,column:9},end:{line:16,column:25}},loc:{start:{line:16,column:36},end:{line:24,column:1}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:17,column:62},end:{line:17,column:63}},loc:{start:{line:17,column:70},end:{line:23,column:3}},line:17},"2":{name:"validateAppId",decl:{start:{line:27,column:9},end:{line:27,column:22}},loc:{start:{line:27,column:25},end:{line:29,column:1}},line:27},"3":{name:"request",decl:{start:{line:32,column:9},end:{line:32,column:16}},loc:{start:{line:32,column:37},end:{line:41,column:1}},line:32}},branchMap:{"0":{loc:{start:{line:18,column:4},end:{line:20,column:5}},type:"if",locations:[{start:{line:18,column:4},end:{line:20,column:5}},{start:{line:18,column:4},end:{line:20,column:5}}],line:18},"1":{loc:{start:{line:18,column:8},end:{line:18,column:39}},type:"binary-expr",locations:[{start:{line:18,column:8},end:{line:18,column:12}},{start:{line:18,column:16},end:{line:18,column:39}}],line:18}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,sources:["../../../src/Adapters/Auth/phantauth.js"],names:["Parse","require","httpsRequest","validateAuthData","authData","request","access_token","then","data","sub","id","Error","OBJECT_NOT_FOUND","validateAppId","Promise","resolve","path","get","host","headers","Authorization","module","exports"],mappings:";;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAYC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA5B,C,CAEA;;;AACA,SAASE,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,SAAOC,OAAO,CAAC,eAAD,EAAkBD,QAAQ,CAACE,YAA3B,CAAP,CAAgDC,IAAhD,CAAqDC,IAAI,IAAI;AAClE,QAAIA,IAAI,IAAIA,IAAI,CAACC,GAAL,IAAYL,QAAQ,CAACM,EAAjC,EAAqC;AACnC;AACD;;AACD,UAAM,IAAIV,KAAK,CAACW,KAAV,CAAgBX,KAAK,CAACW,KAAN,CAAYC,gBAA5B,EAA8C,0CAA9C,CAAN;AACD,GALM,CAAP;AAMD,C,CAED;;;AACA,SAASC,aAAT,GAAyB;AACvB,SAAOC,OAAO,CAACC,OAAR,EAAP;AACD,C,CAED;;;AACA,SAASV,OAAT,CAAiBW,IAAjB,EAAuBV,YAAvB,EAAqC;AACnC,SAAOJ,YAAY,CAACe,GAAb,CAAiB;AACtBC,IAAAA,IAAI,EAAE,eADgB;AAEtBF,IAAAA,IAAI,EAAE,MAAMA,IAFU;AAGtBG,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAE,YAAYd,YADpB;AAEP,oBAAc;AAFP;AAHa,GAAjB,CAAP;AAQD;;AAEDe,MAAM,CAACC,OAAP,GAAiB;AACfT,EAAAA,aAAa,EAAEA,aADA;AAEfV,EAAAA,gBAAgB,EAAEA;AAFH,CAAjB",sourcesContent:["/*\n * PhantAuth was designed to simplify testing for applications using OpenID Connect\n * authentication by making use of random generated users.\n *\n * To learn more, please go to: https://www.phantauth.net\n */\n\nconst { Parse } = require('parse/node');\nconst httpsRequest = require('./httpsRequest');\n\n// Returns a promise that fulfills if this user id is valid.\nfunction validateAuthData(authData) {\n  return request('auth/userinfo', authData.access_token).then(data => {\n    if (data && data.sub == authData.id) {\n      return;\n    }\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'PhantAuth auth is invalid for this user.');\n  });\n}\n\n// Returns a promise that fulfills if this app id is valid.\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\n// A promisey wrapper for api requests\nfunction request(path, access_token) {\n  return httpsRequest.get({\n    host: 'phantauth.net',\n    path: '/' + path,\n    headers: {\n      Authorization: 'bearer ' + access_token,\n      'User-Agent': 'parse-server',\n    },\n  });\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData,\n};\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"3ef2fe346ea31399d9b3468f53963935eb56c2f9"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2837gjdubp=function(){return actualCoverage;};}return actualCoverage;}cov_2837gjdubp();const{Parse}=(cov_2837gjdubp().s[0]++,require('parse/node'));const httpsRequest=(cov_2837gjdubp().s[1]++,require('./httpsRequest'));// Returns a promise that fulfills if this user id is valid.
function validateAuthData(authData){cov_2837gjdubp().f[0]++;cov_2837gjdubp().s[2]++;return request('auth/userinfo',authData.access_token).then(data=>{cov_2837gjdubp().f[1]++;cov_2837gjdubp().s[3]++;if((cov_2837gjdubp().b[1][0]++,data)&&(cov_2837gjdubp().b[1][1]++,data.sub==authData.id)){cov_2837gjdubp().b[0][0]++;cov_2837gjdubp().s[4]++;return;}else{cov_2837gjdubp().b[0][1]++;}cov_2837gjdubp().s[5]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,'PhantAuth auth is invalid for this user.');});}// Returns a promise that fulfills if this app id is valid.
function validateAppId(){cov_2837gjdubp().f[2]++;cov_2837gjdubp().s[6]++;return Promise.resolve();}// A promisey wrapper for api requests
function request(path,access_token){cov_2837gjdubp().f[3]++;cov_2837gjdubp().s[7]++;return httpsRequest.get({host:'phantauth.net',path:'/'+path,headers:{Authorization:'bearer '+access_token,'User-Agent':'parse-server'}});}cov_2837gjdubp().s[8]++;module.exports={validateAppId:validateAppId,validateAuthData:validateAuthData};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL3BoYW50YXV0aC5qcyJdLCJuYW1lcyI6WyJQYXJzZSIsInJlcXVpcmUiLCJodHRwc1JlcXVlc3QiLCJ2YWxpZGF0ZUF1dGhEYXRhIiwiYXV0aERhdGEiLCJyZXF1ZXN0IiwiYWNjZXNzX3Rva2VuIiwidGhlbiIsImRhdGEiLCJzdWIiLCJpZCIsIkVycm9yIiwiT0JKRUNUX05PVF9GT1VORCIsInZhbGlkYXRlQXBwSWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInBhdGgiLCJnZXQiLCJob3N0IiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFZQyxPQUFPLENBQUMsWUFBRCxDQUF6Qjs7QUFDQSxNQUFNQyxZQUFZLEdBQUdELE9BQU8sQ0FBQyxnQkFBRCxDQUE1QixDLENBRUE7OztBQUNBLFNBQVNFLGdCQUFULENBQTBCQyxRQUExQixFQUFvQztBQUNsQyxTQUFPQyxPQUFPLENBQUMsZUFBRCxFQUFrQkQsUUFBUSxDQUFDRSxZQUEzQixDQUFQLENBQWdEQyxJQUFoRCxDQUFxREMsSUFBSSxJQUFJO0FBQ2xFLFFBQUlBLElBQUksSUFBSUEsSUFBSSxDQUFDQyxHQUFMLElBQVlMLFFBQVEsQ0FBQ00sRUFBakMsRUFBcUM7QUFDbkM7QUFDRDs7QUFDRCxVQUFNLElBQUlWLEtBQUssQ0FBQ1csS0FBVixDQUFnQlgsS0FBSyxDQUFDVyxLQUFOLENBQVlDLGdCQUE1QixFQUE4QywwQ0FBOUMsQ0FBTjtBQUNELEdBTE0sQ0FBUDtBQU1ELEMsQ0FFRDs7O0FBQ0EsU0FBU0MsYUFBVCxHQUF5QjtBQUN2QixTQUFPQyxPQUFPLENBQUNDLE9BQVIsRUFBUDtBQUNELEMsQ0FFRDs7O0FBQ0EsU0FBU1YsT0FBVCxDQUFpQlcsSUFBakIsRUFBdUJWLFlBQXZCLEVBQXFDO0FBQ25DLFNBQU9KLFlBQVksQ0FBQ2UsR0FBYixDQUFpQjtBQUN0QkMsSUFBQUEsSUFBSSxFQUFFLGVBRGdCO0FBRXRCRixJQUFBQSxJQUFJLEVBQUUsTUFBTUEsSUFGVTtBQUd0QkcsSUFBQUEsT0FBTyxFQUFFO0FBQ1BDLE1BQUFBLGFBQWEsRUFBRSxZQUFZZCxZQURwQjtBQUVQLG9CQUFjO0FBRlA7QUFIYSxHQUFqQixDQUFQO0FBUUQ7O0FBRURlLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmVCxFQUFBQSxhQUFhLEVBQUVBLGFBREE7QUFFZlYsRUFBQUEsZ0JBQWdCLEVBQUVBO0FBRkgsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogUGhhbnRBdXRoIHdhcyBkZXNpZ25lZCB0byBzaW1wbGlmeSB0ZXN0aW5nIGZvciBhcHBsaWNhdGlvbnMgdXNpbmcgT3BlbklEIENvbm5lY3RcbiAqIGF1dGhlbnRpY2F0aW9uIGJ5IG1ha2luZyB1c2Ugb2YgcmFuZG9tIGdlbmVyYXRlZCB1c2Vycy5cbiAqXG4gKiBUbyBsZWFybiBtb3JlLCBwbGVhc2UgZ28gdG86IGh0dHBzOi8vd3d3LnBoYW50YXV0aC5uZXRcbiAqL1xuXG5jb25zdCB7IFBhcnNlIH0gPSByZXF1aXJlKCdwYXJzZS9ub2RlJyk7XG5jb25zdCBodHRwc1JlcXVlc3QgPSByZXF1aXJlKCcuL2h0dHBzUmVxdWVzdCcpO1xuXG4vLyBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGZ1bGZpbGxzIGlmIHRoaXMgdXNlciBpZCBpcyB2YWxpZC5cbmZ1bmN0aW9uIHZhbGlkYXRlQXV0aERhdGEoYXV0aERhdGEpIHtcbiAgcmV0dXJuIHJlcXVlc3QoJ2F1dGgvdXNlcmluZm8nLCBhdXRoRGF0YS5hY2Nlc3NfdG9rZW4pLnRoZW4oZGF0YSA9PiB7XG4gICAgaWYgKGRhdGEgJiYgZGF0YS5zdWIgPT0gYXV0aERhdGEuaWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsICdQaGFudEF1dGggYXV0aCBpcyBpbnZhbGlkIGZvciB0aGlzIHVzZXIuJyk7XG4gIH0pO1xufVxuXG4vLyBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGZ1bGZpbGxzIGlmIHRoaXMgYXBwIGlkIGlzIHZhbGlkLlxuZnVuY3Rpb24gdmFsaWRhdGVBcHBJZCgpIHtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xufVxuXG4vLyBBIHByb21pc2V5IHdyYXBwZXIgZm9yIGFwaSByZXF1ZXN0c1xuZnVuY3Rpb24gcmVxdWVzdChwYXRoLCBhY2Nlc3NfdG9rZW4pIHtcbiAgcmV0dXJuIGh0dHBzUmVxdWVzdC5nZXQoe1xuICAgIGhvc3Q6ICdwaGFudGF1dGgubmV0JyxcbiAgICBwYXRoOiAnLycgKyBwYXRoLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIEF1dGhvcml6YXRpb246ICdiZWFyZXIgJyArIGFjY2Vzc190b2tlbixcbiAgICAgICdVc2VyLUFnZW50JzogJ3BhcnNlLXNlcnZlcicsXG4gICAgfSxcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB2YWxpZGF0ZUFwcElkOiB2YWxpZGF0ZUFwcElkLFxuICB2YWxpZGF0ZUF1dGhEYXRhOiB2YWxpZGF0ZUF1dGhEYXRhLFxufTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL3BoYW50YXV0aC5qcyJdLCJuYW1lcyI6WyJQYXJzZSIsInJlcXVpcmUiLCJodHRwc1JlcXVlc3QiLCJ2YWxpZGF0ZUF1dGhEYXRhIiwiYXV0aERhdGEiLCJkYXRhIiwiUHJvbWlzZSIsImhvc3QiLCJwYXRoIiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJtb2R1bGUiLCJ2YWxpZGF0ZUFwcElkIl0sIm1hcHBpbmdzIjoiYUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRywrNklBTUE7MkZBSkEsS0FBTSxDQUFFQSxLQUFGLDJCQUFZQyxPQUFPLENBQXpCLFlBQXlCLENBQW5CLENBQU4sQ0FDQSxLQUFNQyxDQUFBQSxZQUFZLDBCQUFHRCxPQUFPLENBQTVCLGdCQUE0QixDQUFWLENBQWxCLENBRUE7QUFDQSxRQUFTRSxDQUFBQSxnQkFBVCxDQUFBLFFBQUEsQ0FBb0MsaURBQ2xDLE1BQU8sQ0FBQSxPQUFPLENBQUEsZUFBQSxDQUFrQkMsUUFBUSxDQUFqQyxZQUFPLENBQVAsQ0FBQSxJQUFBLENBQXFEQyxJQUFJLEVBQUksaURBQ2xFLEdBQUlBLDRCQUFBQSxJQUFJLCtCQUFJQSxJQUFJLENBQUpBLEdBQUFBLEVBQVlELFFBQVEsQ0FBaEMsRUFBUSxDQUFSLENBQXFDLG9EQUNuQyxPQUNELENBRkQsaUNBRGtFLHdCQUlsRSxLQUFNLElBQUlKLENBQUFBLEtBQUssQ0FBVCxLQUFBLENBQWdCQSxLQUFLLENBQUxBLEtBQUFBLENBQWhCLGdCQUFBLENBQU4sMENBQU0sQ0FBTixDQUpGLENBQU8sQ0FBUCxDLENBUUY7QUFDQSxRQUFBLENBQUEsYUFBQSxFQUF5QixpREFDdkIsTUFBT00sQ0FBQUEsT0FBTyxDQUFkLE9BQU9BLEVBQVAsQyxDQUdGO0FBQ0EsUUFBQSxDQUFBLE9BQUEsQ0FBQSxJQUFBLENBQUEsWUFBQSxDQUFxQyxpREFDbkMsTUFBTyxDQUFBLFlBQVksQ0FBWixHQUFBLENBQWlCLENBQ3RCQyxJQUFJLENBRGtCLGVBQUEsQ0FFdEJDLElBQUksQ0FBRSxJQUZnQixJQUFBLENBR3RCQyxPQUFPLENBQUUsQ0FDUEMsYUFBYSxDQUFFLFVBRFIsWUFBQSxDQUVQLGFBQWMsY0FGUCxDQUhhLENBQWpCLENBQVAsQ0FRRCxDLHdCQUVEQyxNQUFNLENBQU5BLE9BQUFBLENBQWlCLENBQ2ZDLGFBQWEsQ0FERSxhQUFBLENBRWZULGdCQUFnQixDQUFFQSxnQkFGSCxDQUFqQlEsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBQaGFudEF1dGggd2FzIGRlc2lnbmVkIHRvIHNpbXBsaWZ5IHRlc3RpbmcgZm9yIGFwcGxpY2F0aW9ucyB1c2luZyBPcGVuSUQgQ29ubmVjdFxuICogYXV0aGVudGljYXRpb24gYnkgbWFraW5nIHVzZSBvZiByYW5kb20gZ2VuZXJhdGVkIHVzZXJzLlxuICpcbiAqIFRvIGxlYXJuIG1vcmUsIHBsZWFzZSBnbyB0bzogaHR0cHM6Ly93d3cucGhhbnRhdXRoLm5ldFxuICovXG5cbmNvbnN0IHsgUGFyc2UgfSA9IHJlcXVpcmUoJ3BhcnNlL25vZGUnKTtcbmNvbnN0IGh0dHBzUmVxdWVzdCA9IHJlcXVpcmUoJy4vaHR0cHNSZXF1ZXN0Jyk7XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgaWYgdGhpcyB1c2VyIGlkIGlzIHZhbGlkLlxuZnVuY3Rpb24gdmFsaWRhdGVBdXRoRGF0YShhdXRoRGF0YSkge1xuICByZXR1cm4gcmVxdWVzdCgnYXV0aC91c2VyaW5mbycsIGF1dGhEYXRhLmFjY2Vzc190b2tlbikudGhlbihkYXRhID0+IHtcbiAgICBpZiAoZGF0YSAmJiBkYXRhLnN1YiA9PSBhdXRoRGF0YS5pZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCwgJ1BoYW50QXV0aCBhdXRoIGlzIGludmFsaWQgZm9yIHRoaXMgdXNlci4nKTtcbiAgfSk7XG59XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgaWYgdGhpcyBhcHAgaWQgaXMgdmFsaWQuXG5mdW5jdGlvbiB2YWxpZGF0ZUFwcElkKCkge1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59XG5cbi8vIEEgcHJvbWlzZXkgd3JhcHBlciBmb3IgYXBpIHJlcXVlc3RzXG5mdW5jdGlvbiByZXF1ZXN0KHBhdGgsIGFjY2Vzc190b2tlbikge1xuICByZXR1cm4gaHR0cHNSZXF1ZXN0LmdldCh7XG4gICAgaG9zdDogJ3BoYW50YXV0aC5uZXQnLFxuICAgIHBhdGg6ICcvJyArIHBhdGgsXG4gICAgaGVhZGVyczoge1xuICAgICAgQXV0aG9yaXphdGlvbjogJ2JlYXJlciAnICsgYWNjZXNzX3Rva2VuLFxuICAgICAgJ1VzZXItQWdlbnQnOiAncGFyc2Utc2VydmVyJyxcbiAgICB9LFxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHZhbGlkYXRlQXBwSWQ6IHZhbGlkYXRlQXBwSWQsXG4gIHZhbGlkYXRlQXV0aERhdGE6IHZhbGlkYXRlQXV0aERhdGEsXG59O1xuIl19