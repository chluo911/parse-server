"use strict";/**
 * The deprecations.
 *
 * Add deprecations to the array using the following keys:
 * - `optionKey` {String}: The option key incl. its path, e.g. `security.enableCheck`.
 * - `envKey` {String}: The environment key, e.g. `PARSE_SERVER_SECURITY`.
 * - `changeNewKey` {String}: Set the new key name if the current key will be replaced,
 * or set to an empty string if the current key will be removed without replacement.
 * - `changeNewDefault` {String}: Set the new default value if the key's default value
 * will change in a future version.
 * - `solution`: The instruction to resolve this deprecation warning. Optional. This
 * instruction must not include the deprecation warning which is auto-generated.
 * It should only contain additional instruction regarding the deprecation if
 * necessary.
 *
 * If there are no deprecations, this must return an empty array.
 */function cov_1a8kqw2czn(){var path="/parse-server/lib/Deprecator/Deprecations.js";var hash="ea9463b1eecfc037cbb6699f5d20bd37affbe3b4";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Deprecator/Deprecations.js",statementMap:{"0":{start:{line:20,column:0},end:{line:27,column:3}}},fnMap:{},branchMap:{},s:{"0":0},f:{},b:{},inputSourceMap:{version:3,sources:["../../src/Deprecator/Deprecations.js"],names:["module","exports","optionKey","changeNewDefault","solution"],mappings:";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,CACf;AACEC,EAAAA,SAAS,EAAE,cADb;AAEEC,EAAAA,gBAAgB,EAAE,MAFpB;AAGEC,EAAAA,QAAQ,EACN;AAJJ,CADe,EAOf;AAAEF,EAAAA,SAAS,EAAE,qBAAb;AAAoCC,EAAAA,gBAAgB,EAAE;AAAtD,CAPe,CAAjB",sourcesContent:["/**\n * The deprecations.\n *\n * Add deprecations to the array using the following keys:\n * - `optionKey` {String}: The option key incl. its path, e.g. `security.enableCheck`.\n * - `envKey` {String}: The environment key, e.g. `PARSE_SERVER_SECURITY`.\n * - `changeNewKey` {String}: Set the new key name if the current key will be replaced,\n * or set to an empty string if the current key will be removed without replacement.\n * - `changeNewDefault` {String}: Set the new default value if the key's default value\n * will change in a future version.\n * - `solution`: The instruction to resolve this deprecation warning. Optional. This\n * instruction must not include the deprecation warning which is auto-generated.\n * It should only contain additional instruction regarding the deprecation if\n * necessary.\n *\n * If there are no deprecations, this must return an empty array.\n */\nmodule.exports = [\n  {\n    optionKey: 'directAccess',\n    changeNewDefault: 'true',\n    solution:\n      \"Additionally, the environment variable 'PARSE_SERVER_ENABLE_EXPERIMENTAL_DIRECT_ACCESS' will be deprecated and renamed to 'PARSE_SERVER_DIRECT_ACCESS' in a future version; it is currently possible to use either one.\",\n  },\n  { optionKey: 'enforcePrivateUsers', changeNewDefault: 'true' },\n];\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ea9463b1eecfc037cbb6699f5d20bd37affbe3b4"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1a8kqw2czn=function(){return actualCoverage;};}return actualCoverage;}cov_1a8kqw2czn();cov_1a8kqw2czn().s[0]++;module.exports=[{optionKey:'directAccess',changeNewDefault:'true',solution:"Additionally, the environment variable 'PARSE_SERVER_ENABLE_EXPERIMENTAL_DIRECT_ACCESS' will be deprecated and renamed to 'PARSE_SERVER_DIRECT_ACCESS' in a future version; it is currently possible to use either one."},{optionKey:'enforcePrivateUsers',changeNewDefault:'true'}];//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EZXByZWNhdG9yL0RlcHJlY2F0aW9ucy5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9uS2V5IiwiY2hhbmdlTmV3RGVmYXVsdCIsInNvbHV0aW9uIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLENBQ2Y7QUFDRUMsRUFBQUEsU0FBUyxFQUFFLGNBRGI7QUFFRUMsRUFBQUEsZ0JBQWdCLEVBQUUsTUFGcEI7QUFHRUMsRUFBQUEsUUFBUSxFQUNOO0FBSkosQ0FEZSxFQU9mO0FBQUVGLEVBQUFBLFNBQVMsRUFBRSxxQkFBYjtBQUFvQ0MsRUFBQUEsZ0JBQWdCLEVBQUU7QUFBdEQsQ0FQZSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIGRlcHJlY2F0aW9ucy5cbiAqXG4gKiBBZGQgZGVwcmVjYXRpb25zIHRvIHRoZSBhcnJheSB1c2luZyB0aGUgZm9sbG93aW5nIGtleXM6XG4gKiAtIGBvcHRpb25LZXlgIHtTdHJpbmd9OiBUaGUgb3B0aW9uIGtleSBpbmNsLiBpdHMgcGF0aCwgZS5nLiBgc2VjdXJpdHkuZW5hYmxlQ2hlY2tgLlxuICogLSBgZW52S2V5YCB7U3RyaW5nfTogVGhlIGVudmlyb25tZW50IGtleSwgZS5nLiBgUEFSU0VfU0VSVkVSX1NFQ1VSSVRZYC5cbiAqIC0gYGNoYW5nZU5ld0tleWAge1N0cmluZ306IFNldCB0aGUgbmV3IGtleSBuYW1lIGlmIHRoZSBjdXJyZW50IGtleSB3aWxsIGJlIHJlcGxhY2VkLFxuICogb3Igc2V0IHRvIGFuIGVtcHR5IHN0cmluZyBpZiB0aGUgY3VycmVudCBrZXkgd2lsbCBiZSByZW1vdmVkIHdpdGhvdXQgcmVwbGFjZW1lbnQuXG4gKiAtIGBjaGFuZ2VOZXdEZWZhdWx0YCB7U3RyaW5nfTogU2V0IHRoZSBuZXcgZGVmYXVsdCB2YWx1ZSBpZiB0aGUga2V5J3MgZGVmYXVsdCB2YWx1ZVxuICogd2lsbCBjaGFuZ2UgaW4gYSBmdXR1cmUgdmVyc2lvbi5cbiAqIC0gYHNvbHV0aW9uYDogVGhlIGluc3RydWN0aW9uIHRvIHJlc29sdmUgdGhpcyBkZXByZWNhdGlvbiB3YXJuaW5nLiBPcHRpb25hbC4gVGhpc1xuICogaW5zdHJ1Y3Rpb24gbXVzdCBub3QgaW5jbHVkZSB0aGUgZGVwcmVjYXRpb24gd2FybmluZyB3aGljaCBpcyBhdXRvLWdlbmVyYXRlZC5cbiAqIEl0IHNob3VsZCBvbmx5IGNvbnRhaW4gYWRkaXRpb25hbCBpbnN0cnVjdGlvbiByZWdhcmRpbmcgdGhlIGRlcHJlY2F0aW9uIGlmXG4gKiBuZWNlc3NhcnkuXG4gKlxuICogSWYgdGhlcmUgYXJlIG5vIGRlcHJlY2F0aW9ucywgdGhpcyBtdXN0IHJldHVybiBhbiBlbXB0eSBhcnJheS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gIHtcbiAgICBvcHRpb25LZXk6ICdkaXJlY3RBY2Nlc3MnLFxuICAgIGNoYW5nZU5ld0RlZmF1bHQ6ICd0cnVlJyxcbiAgICBzb2x1dGlvbjpcbiAgICAgIFwiQWRkaXRpb25hbGx5LCB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUgJ1BBUlNFX1NFUlZFUl9FTkFCTEVfRVhQRVJJTUVOVEFMX0RJUkVDVF9BQ0NFU1MnIHdpbGwgYmUgZGVwcmVjYXRlZCBhbmQgcmVuYW1lZCB0byAnUEFSU0VfU0VSVkVSX0RJUkVDVF9BQ0NFU1MnIGluIGEgZnV0dXJlIHZlcnNpb247IGl0IGlzIGN1cnJlbnRseSBwb3NzaWJsZSB0byB1c2UgZWl0aGVyIG9uZS5cIixcbiAgfSxcbiAgeyBvcHRpb25LZXk6ICdlbmZvcmNlUHJpdmF0ZVVzZXJzJywgY2hhbmdlTmV3RGVmYXVsdDogJ3RydWUnIH0sXG5dO1xuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EZXByZWNhdG9yL0RlcHJlY2F0aW9ucy5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJvcHRpb25LZXkiLCJjaGFuZ2VOZXdEZWZhdWx0Iiwic29sdXRpb24iXSwibWFwcGluZ3MiOiJhQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRyxtMkVBSEE7bUhBSUFBLE1BQU0sQ0FBTkEsT0FBQUEsQ0FBaUIsQ0FDZixDQUNFQyxTQUFTLENBRFgsY0FBQSxDQUVFQyxnQkFBZ0IsQ0FGbEIsTUFBQSxDQUdFQyxRQUFRLENBQ04seU5BSkosQ0FEZSxDQU9mLENBQUVGLFNBQVMsQ0FBWCxxQkFBQSxDQUFvQ0MsZ0JBQWdCLENBQUUsTUFBdEQsQ0FQZSxDQUFqQkYsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIGRlcHJlY2F0aW9ucy5cbiAqXG4gKiBBZGQgZGVwcmVjYXRpb25zIHRvIHRoZSBhcnJheSB1c2luZyB0aGUgZm9sbG93aW5nIGtleXM6XG4gKiAtIGBvcHRpb25LZXlgIHtTdHJpbmd9OiBUaGUgb3B0aW9uIGtleSBpbmNsLiBpdHMgcGF0aCwgZS5nLiBgc2VjdXJpdHkuZW5hYmxlQ2hlY2tgLlxuICogLSBgZW52S2V5YCB7U3RyaW5nfTogVGhlIGVudmlyb25tZW50IGtleSwgZS5nLiBgUEFSU0VfU0VSVkVSX1NFQ1VSSVRZYC5cbiAqIC0gYGNoYW5nZU5ld0tleWAge1N0cmluZ306IFNldCB0aGUgbmV3IGtleSBuYW1lIGlmIHRoZSBjdXJyZW50IGtleSB3aWxsIGJlIHJlcGxhY2VkLFxuICogb3Igc2V0IHRvIGFuIGVtcHR5IHN0cmluZyBpZiB0aGUgY3VycmVudCBrZXkgd2lsbCBiZSByZW1vdmVkIHdpdGhvdXQgcmVwbGFjZW1lbnQuXG4gKiAtIGBjaGFuZ2VOZXdEZWZhdWx0YCB7U3RyaW5nfTogU2V0IHRoZSBuZXcgZGVmYXVsdCB2YWx1ZSBpZiB0aGUga2V5J3MgZGVmYXVsdCB2YWx1ZVxuICogd2lsbCBjaGFuZ2UgaW4gYSBmdXR1cmUgdmVyc2lvbi5cbiAqIC0gYHNvbHV0aW9uYDogVGhlIGluc3RydWN0aW9uIHRvIHJlc29sdmUgdGhpcyBkZXByZWNhdGlvbiB3YXJuaW5nLiBPcHRpb25hbC4gVGhpc1xuICogaW5zdHJ1Y3Rpb24gbXVzdCBub3QgaW5jbHVkZSB0aGUgZGVwcmVjYXRpb24gd2FybmluZyB3aGljaCBpcyBhdXRvLWdlbmVyYXRlZC5cbiAqIEl0IHNob3VsZCBvbmx5IGNvbnRhaW4gYWRkaXRpb25hbCBpbnN0cnVjdGlvbiByZWdhcmRpbmcgdGhlIGRlcHJlY2F0aW9uIGlmXG4gKiBuZWNlc3NhcnkuXG4gKlxuICogSWYgdGhlcmUgYXJlIG5vIGRlcHJlY2F0aW9ucywgdGhpcyBtdXN0IHJldHVybiBhbiBlbXB0eSBhcnJheS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gIHtcbiAgICBvcHRpb25LZXk6ICdkaXJlY3RBY2Nlc3MnLFxuICAgIGNoYW5nZU5ld0RlZmF1bHQ6ICd0cnVlJyxcbiAgICBzb2x1dGlvbjpcbiAgICAgIFwiQWRkaXRpb25hbGx5LCB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUgJ1BBUlNFX1NFUlZFUl9FTkFCTEVfRVhQRVJJTUVOVEFMX0RJUkVDVF9BQ0NFU1MnIHdpbGwgYmUgZGVwcmVjYXRlZCBhbmQgcmVuYW1lZCB0byAnUEFSU0VfU0VSVkVSX0RJUkVDVF9BQ0NFU1MnIGluIGEgZnV0dXJlIHZlcnNpb247IGl0IGlzIGN1cnJlbnRseSBwb3NzaWJsZSB0byB1c2UgZWl0aGVyIG9uZS5cIixcbiAgfSxcbiAgeyBvcHRpb25LZXk6ICdlbmZvcmNlUHJpdmF0ZVVzZXJzJywgY2hhbmdlTmV3RGVmYXVsdDogJ3RydWUnIH0sXG5dO1xuIl19