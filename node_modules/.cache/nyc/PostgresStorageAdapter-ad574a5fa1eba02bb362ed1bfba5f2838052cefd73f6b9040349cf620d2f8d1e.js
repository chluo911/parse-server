"use strict";function cov_1msdlku8l5(){var path="/parse-server/lib/Adapters/Storage/Postgres/PostgresStorageAdapter.js";var hash="380cbb63b735aa7b398bce4e75cbd42e68a7983c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Adapters/Storage/Postgres/PostgresStorageAdapter.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:58}},"2":{start:{line:8,column:22},end:{line:8,column:49}},"3":{start:{line:10,column:12},end:{line:10,column:57}},"4":{start:{line:12,column:14},end:{line:12,column:55}},"5":{start:{line:14,column:12},end:{line:14,column:27}},"6":{start:{line:16,column:11},end:{line:16,column:51}},"7":{start:{line:18,column:22},end:{line:18,column:50}},"8":{start:{line:20,column:39},end:{line:20,column:93}},"9":{start:{line:22,column:54},end:{line:22,column:73}},"10":{start:{line:22,column:75},end:{line:22,column:330}},"11":{start:{line:22,column:125},end:{line:22,column:161}},"12":{start:{line:22,column:163},end:{line:22,column:296}},"13":{start:{line:22,column:185},end:{line:22,column:294}},"14":{start:{line:22,column:227},end:{line:22,column:290}},"15":{start:{line:22,column:297},end:{line:22,column:328}},"16":{start:{line:22,column:331},end:{line:22,column:343}},"17":{start:{line:24,column:33},end:{line:24,column:517}},"18":{start:{line:24,column:46},end:{line:24,column:47}},"19":{start:{line:24,column:91},end:{line:24,column:131}},"20":{start:{line:24,column:133},end:{line:24,column:515}},"21":{start:{line:24,column:146},end:{line:24,column:247}},"22":{start:{line:24,column:201},end:{line:24,column:243}},"23":{start:{line:24,column:255},end:{line:24,column:515}},"24":{start:{line:24,column:295},end:{line:24,column:369}},"25":{start:{line:24,column:379},end:{line:24,column:513}},"26":{start:{line:24,column:428},end:{line:24,column:509}},"27":{start:{line:24,column:518},end:{line:24,column:532}},"28":{start:{line:26,column:44},end:{line:26,column:195}},"29":{start:{line:26,column:62},end:{line:26,column:166}},"30":{start:{line:26,column:176},end:{line:26,column:193}},"31":{start:{line:26,column:196},end:{line:26,column:207}},"32":{start:{line:28,column:42},end:{line:28,column:49}},"33":{start:{line:29,column:39},end:{line:29,column:46}},"34":{start:{line:30,column:37},end:{line:30,column:44}},"35":{start:{line:31,column:35},end:{line:31,column:42}},"36":{start:{line:32,column:37},end:{line:32,column:44}},"37":{start:{line:33,column:42},end:{line:33,column:49}},"38":{start:{line:35,column:15},end:{line:35,column:41}},"39":{start:{line:37,column:14},end:{line:41,column:1}},"40":{start:{line:38,column:2},end:{line:38,column:68}},"41":{start:{line:39,column:14},end:{line:39,column:32}},"42":{start:{line:40,column:2},end:{line:40,column:29}},"43":{start:{line:43,column:32},end:{line:85,column:1}},"44":{start:{line:44,column:2},end:{line:84,column:3}},"45":{start:{line:46,column:6},end:{line:46,column:20}},"46":{start:{line:49,column:6},end:{line:49,column:40}},"47":{start:{line:52,column:6},end:{line:52,column:21}},"48":{start:{line:55,column:6},end:{line:55,column:20}},"49":{start:{line:58,column:6},end:{line:58,column:23}},"50":{start:{line:61,column:6},end:{line:61,column:20}},"51":{start:{line:64,column:6},end:{line:64,column:32}},"52":{start:{line:67,column:6},end:{line:67,column:21}},"53":{start:{line:70,column:6},end:{line:70,column:21}},"54":{start:{line:73,column:6},end:{line:73,column:23}},"55":{start:{line:76,column:6},end:{line:80,column:7}},"56":{start:{line:77,column:8},end:{line:77,column:24}},"57":{start:{line:79,column:8},end:{line:79,column:23}},"58":{start:{line:83,column:6},end:{line:83,column:54}},"59":{start:{line:87,column:33},end:{line:92,column:1}},"60":{start:{line:93,column:33},end:{line:106,column:1}},"61":{start:{line:108,column:24},end:{line:120,column:1}},"62":{start:{line:109,column:2},end:{line:117,column:3}},"63":{start:{line:110,column:4},end:{line:112,column:5}},"64":{start:{line:111,column:6},end:{line:111,column:23}},"65":{start:{line:114,column:4},end:{line:116,column:5}},"66":{start:{line:115,column:6},end:{line:115,column:24}},"67":{start:{line:119,column:2},end:{line:119,column:15}},"68":{start:{line:122,column:23},end:{line:128,column:1}},"69":{start:{line:123,column:2},end:{line:125,column:3}},"70":{start:{line:124,column:4},end:{line:124,column:26}},"71":{start:{line:127,column:2},end:{line:127,column:15}},"72":{start:{line:131,column:18},end:{line:140,column:2}},"73":{start:{line:141,column:20},end:{line:166,column:2}},"74":{start:{line:168,column:22},end:{line:196,column:1}},"75":{start:{line:169,column:2},end:{line:171,column:3}},"76":{start:{line:170,column:4},end:{line:170,column:42}},"77":{start:{line:173,column:2},end:{line:176,column:3}},"78":{start:{line:174,column:4},end:{line:174,column:32}},"79":{start:{line:175,column:4},end:{line:175,column:32}},"80":{start:{line:178,column:13},end:{line:178,column:24}},"81":{start:{line:180,column:2},end:{line:182,column:3}},"82":{start:{line:181,column:4},end:{line:181,column:85}},"83":{start:{line:184,column:16},end:{line:184,column:18}},"84":{start:{line:186,column:2},end:{line:188,column:3}},"85":{start:{line:187,column:4},end:{line:187,column:48}},"86":{start:{line:190,column:2},end:{line:195,column:4}},"87":{start:{line:198,column:25},end:{line:227,column:1}},"88":{start:{line:199,column:2},end:{line:201,column:3}},"89":{start:{line:200,column:4},end:{line:200,column:18}},"90":{start:{line:203,column:2},end:{line:203,column:38}},"91":{start:{line:204,column:2},end:{line:209,column:4}},"92":{start:{line:210,column:2},end:{line:215,column:4}},"93":{start:{line:217,column:2},end:{line:224,column:3}},"94":{start:{line:218,column:4},end:{line:220,column:6}},"95":{start:{line:221,column:4},end:{line:223,column:6}},"96":{start:{line:226,column:2},end:{line:226,column:16}},"97":{start:{line:229,column:24},end:{line:260,column:1}},"98":{start:{line:230,column:2},end:{line:258,column:5}},"99":{start:{line:231,column:4},end:{line:257,column:5}},"100":{start:{line:232,column:25},end:{line:232,column:45}},"101":{start:{line:233,column:20},end:{line:233,column:38}},"102":{start:{line:234,column:6},end:{line:234,column:42}},"103":{start:{line:235,column:23},end:{line:235,column:36}},"104":{start:{line:237,column:18},end:{line:237,column:35}},"105":{start:{line:239,column:6},end:{line:241,column:7}},"106":{start:{line:240,column:8},end:{line:240,column:26}},"107":{start:{line:245,column:6},end:{line:254,column:7}},"108":{start:{line:247,column:8},end:{line:247,column:50}},"109":{start:{line:249,column:8},end:{line:251,column:9}},"110":{start:{line:250,column:10},end:{line:250,column:35}},"111":{start:{line:253,column:8},end:{line:253,column:38}},"112":{start:{line:256,column:6},end:{line:256,column:31}},"113":{start:{line:259,column:2},end:{line:259,column:16}},"114":{start:{line:262,column:38},end:{line:270,column:1}},"115":{start:{line:263,column:2},end:{line:269,column:5}},"116":{start:{line:264,column:4},end:{line:266,column:5}},"117":{start:{line:265,column:6},end:{line:265,column:25}},"118":{start:{line:268,column:4},end:{line:268,column:23}},"119":{start:{line:272,column:26},end:{line:281,column:1}},"120":{start:{line:273,column:2},end:{line:275,column:3}},"121":{start:{line:274,column:4},end:{line:274,column:28}},"122":{start:{line:277,column:21},end:{line:277,column:61}},"123":{start:{line:278,column:13},end:{line:278,column:66}},"124":{start:{line:279,column:2},end:{line:279,column:52}},"125":{start:{line:280,column:2},end:{line:280,column:14}},"126":{start:{line:283,column:32},end:{line:297,column:1}},"127":{start:{line:284,column:2},end:{line:286,column:3}},"128":{start:{line:285,column:4},end:{line:285,column:21}},"129":{start:{line:288,column:2},end:{line:290,column:3}},"130":{start:{line:289,column:4},end:{line:289,column:23}},"131":{start:{line:292,column:2},end:{line:294,column:3}},"132":{start:{line:293,column:4},end:{line:293,column:23}},"133":{start:{line:296,column:2},end:{line:296,column:29}},"134":{start:{line:299,column:21},end:{line:311,column:1}},"135":{start:{line:300,column:2},end:{line:310,column:3}},"136":{start:{line:301,column:4},end:{line:309,column:5}},"137":{start:{line:302,column:6},end:{line:304,column:7}},"138":{start:{line:303,column:8},end:{line:303,column:34}},"139":{start:{line:306,column:6},end:{line:308,column:7}},"140":{start:{line:307,column:8},end:{line:307,column:138}},"141":{start:{line:314,column:28},end:{line:326,column:1}},"142":{start:{line:315,column:15},end:{line:315,column:17}},"143":{start:{line:317,column:2},end:{line:323,column:3}},"144":{start:{line:318,column:4},end:{line:322,column:7}},"145":{start:{line:319,column:6},end:{line:321,column:7}},"146":{start:{line:320,column:8},end:{line:320,column:56}},"147":{start:{line:325,column:2},end:{line:325,column:14}},"148":{start:{line:328,column:25},end:{line:844,column:1}},"149":{start:{line:334,column:19},end:{line:334,column:21}},"150":{start:{line:335,column:15},end:{line:335,column:17}},"151":{start:{line:336,column:16},end:{line:336,column:18}},"152":{start:{line:337,column:2},end:{line:337,column:36}},"153":{start:{line:339,column:2},end:{line:836,column:3}},"154":{start:{line:340,column:25},end:{line:340,column:111}},"155":{start:{line:341,column:34},end:{line:341,column:49}},"156":{start:{line:342,column:23},end:{line:342,column:39}},"157":{start:{line:344,column:4},end:{line:349,column:5}},"158":{start:{line:346,column:6},end:{line:348,column:7}},"159":{start:{line:347,column:8},end:{line:347,column:17}},"160":{start:{line:351,column:26},end:{line:351,column:73}},"161":{start:{line:353,column:4},end:{line:427,column:5}},"162":{start:{line:355,column:6},end:{line:355,column:15}},"163":{start:{line:356,column:11},end:{line:427,column:5}},"164":{start:{line:357,column:6},end:{line:357,column:68}},"165":{start:{line:358,column:6},end:{line:358,column:41}},"166":{start:{line:359,column:6},end:{line:359,column:17}},"167":{start:{line:360,column:11},end:{line:427,column:5}},"168":{start:{line:361,column:17},end:{line:361,column:45}},"169":{start:{line:363,column:6},end:{line:380,column:7}},"170":{start:{line:364,column:8},end:{line:364,column:47}},"171":{start:{line:365,column:8},end:{line:365,column:26}},"172":{start:{line:366,column:8},end:{line:366,column:19}},"173":{start:{line:367,column:8},end:{line:367,column:17}},"174":{start:{line:369,column:8},end:{line:379,column:9}},"175":{start:{line:370,column:10},end:{line:370,column:69}},"176":{start:{line:371,column:10},end:{line:371,column:74}},"177":{start:{line:372,column:10},end:{line:372,column:60}},"178":{start:{line:373,column:10},end:{line:373,column:21}},"179":{start:{line:374,column:15},end:{line:379,column:9}},"180":{start:{line:375,column:15},end:{line:379,column:9}},"181":{start:{line:376,column:10},end:{line:376,column:63}},"182":{start:{line:377,column:10},end:{line:377,column:40}},"183":{start:{line:378,column:10},end:{line:378,column:21}},"184":{start:{line:381,column:11},end:{line:427,column:5}},"185":{start:{line:382,column:6},end:{line:382,column:46}},"186":{start:{line:383,column:6},end:{line:383,column:29}},"187":{start:{line:384,column:6},end:{line:384,column:17}},"188":{start:{line:385,column:6},end:{line:385,column:15}},"189":{start:{line:386,column:11},end:{line:427,column:5}},"190":{start:{line:387,column:6},end:{line:387,column:54}},"191":{start:{line:388,column:6},end:{line:388,column:41}},"192":{start:{line:389,column:6},end:{line:389,column:17}},"193":{start:{line:390,column:11},end:{line:427,column:5}},"194":{start:{line:391,column:6},end:{line:391,column:54}},"195":{start:{line:393,column:6},end:{line:399,column:7}},"196":{start:{line:395,column:33},end:{line:395,column:52}},"197":{start:{line:396,column:8},end:{line:396,column:49}},"198":{start:{line:398,column:8},end:{line:398,column:43}},"199":{start:{line:401,column:6},end:{line:401,column:17}},"200":{start:{line:402,column:11},end:{line:427,column:5}},"201":{start:{line:403,column:6},end:{line:403,column:54}},"202":{start:{line:404,column:6},end:{line:404,column:41}},"203":{start:{line:405,column:6},end:{line:405,column:17}},"204":{start:{line:406,column:11},end:{line:427,column:5}},"205":{start:{line:407,column:22},end:{line:407,column:24}},"206":{start:{line:408,column:27},end:{line:408,column:29}},"207":{start:{line:409,column:6},end:{line:422,column:9}},"208":{start:{line:410,column:23},end:{line:415,column:10}},"209":{start:{line:417,column:8},end:{line:421,column:9}},"210":{start:{line:418,column:10},end:{line:418,column:39}},"211":{start:{line:419,column:10},end:{line:419,column:46}},"212":{start:{line:420,column:10},end:{line:420,column:40}},"213":{start:{line:423,column:22},end:{line:423,column:61}},"214":{start:{line:424,column:18},end:{line:424,column:53}},"215":{start:{line:425,column:6},end:{line:425,column:56}},"216":{start:{line:426,column:6},end:{line:426,column:35}},"217":{start:{line:429,column:4},end:{line:463,column:5}},"218":{start:{line:430,column:6},end:{line:452,column:7}},"219":{start:{line:431,column:8},end:{line:431,column:58}},"220":{start:{line:432,column:8},end:{line:432,column:75}},"221":{start:{line:434,column:8},end:{line:451,column:9}},"222":{start:{line:435,column:10},end:{line:435,column:54}},"223":{start:{line:436,column:10},end:{line:436,column:33}},"224":{start:{line:437,column:10},end:{line:437,column:21}},"225":{start:{line:438,column:10},end:{line:438,column:19}},"226":{start:{line:441,column:10},end:{line:450,column:11}},"227":{start:{line:442,column:12},end:{line:442,column:111}},"228":{start:{line:444,column:12},end:{line:449,column:13}},"229":{start:{line:445,column:42},end:{line:445,column:70}},"230":{start:{line:446,column:14},end:{line:446,column:103}},"231":{start:{line:448,column:14},end:{line:448,column:91}},"232":{start:{line:454,column:6},end:{line:462,column:7}},"233":{start:{line:455,column:22},end:{line:455,column:36}},"234":{start:{line:456,column:8},end:{line:456,column:64}},"235":{start:{line:457,column:8},end:{line:457,column:19}},"236":{start:{line:460,column:8},end:{line:460,column:47}},"237":{start:{line:461,column:8},end:{line:461,column:19}},"238":{start:{line:465,column:4},end:{line:480,column:5}},"239":{start:{line:466,column:6},end:{line:479,column:7}},"240":{start:{line:467,column:8},end:{line:467,column:48}},"241":{start:{line:468,column:8},end:{line:468,column:31}},"242":{start:{line:469,column:8},end:{line:469,column:19}},"243":{start:{line:471,column:8},end:{line:478,column:9}},"244":{start:{line:472,column:10},end:{line:472,column:38}},"245":{start:{line:473,column:10},end:{line:473,column:73}},"246":{start:{line:475,column:10},end:{line:475,column:49}},"247":{start:{line:476,column:10},end:{line:476,column:58}},"248":{start:{line:477,column:10},end:{line:477,column:21}},"249":{start:{line:482,column:22},end:{line:482,column:85}},"250":{start:{line:484,column:4},end:{line:555,column:5}},"251":{start:{line:485,column:25},end:{line:485,column:27}},"252":{start:{line:486,column:22},end:{line:486,column:27}},"253":{start:{line:487,column:6},end:{line:487,column:29}},"254":{start:{line:488,column:6},end:{line:495,column:9}},"255":{start:{line:489,column:8},end:{line:494,column:9}},"256":{start:{line:490,column:10},end:{line:490,column:27}},"257":{start:{line:492,column:10},end:{line:492,column:32}},"258":{start:{line:493,column:10},end:{line:493,column:77}},"259":{start:{line:497,column:6},end:{line:501,column:7}},"260":{start:{line:498,column:8},end:{line:498,column:99}},"261":{start:{line:500,column:8},end:{line:500,column:71}},"262":{start:{line:503,column:6},end:{line:503,column:44}},"263":{start:{line:504,column:11},end:{line:555,column:5}},"264":{start:{line:505,column:29},end:{line:542,column:7}},"265":{start:{line:506,column:20},end:{line:506,column:40}},"266":{start:{line:508,column:8},end:{line:541,column:9}},"267":{start:{line:509,column:10},end:{line:529,column:11}},"268":{start:{line:510,column:12},end:{line:510,column:82}},"269":{start:{line:511,column:12},end:{line:511,column:62}},"270":{start:{line:512,column:12},end:{line:512,column:23}},"271":{start:{line:515,column:12},end:{line:517,column:13}},"272":{start:{line:516,column:14},end:{line:516,column:21}},"273":{start:{line:519,column:31},end:{line:519,column:33}},"274":{start:{line:520,column:12},end:{line:520,column:35}},"275":{start:{line:521,column:12},end:{line:526,column:15}},"276":{start:{line:522,column:14},end:{line:525,column:15}},"277":{start:{line:523,column:16},end:{line:523,column:38}},"278":{start:{line:524,column:16},end:{line:524,column:61}},"279":{start:{line:527,column:12},end:{line:527,column:77}},"280":{start:{line:528,column:12},end:{line:528,column:50}},"281":{start:{line:530,column:15},end:{line:541,column:9}},"282":{start:{line:531,column:10},end:{line:531,column:33}},"283":{start:{line:532,column:10},end:{line:532,column:50}},"284":{start:{line:533,column:10},end:{line:533,column:28}},"285":{start:{line:536,column:10},end:{line:540,column:11}},"286":{start:{line:537,column:12},end:{line:537,column:35}},"287":{start:{line:539,column:12},end:{line:539,column:35}},"288":{start:{line:544,column:6},end:{line:546,column:7}},"289":{start:{line:545,column:8},end:{line:545,column:85}},"290":{start:{line:545,column:72},end:{line:545,column:75}},"291":{start:{line:548,column:6},end:{line:550,column:7}},"292":{start:{line:549,column:8},end:{line:549,column:85}},"293":{start:{line:549,column:73},end:{line:549,column:76}},"294":{start:{line:551,column:11},end:{line:555,column:5}},"295":{start:{line:552,column:6},end:{line:552,column:87}},"296":{start:{line:553,column:11},end:{line:555,column:5}},"297":{start:{line:554,column:6},end:{line:554,column:88}},"298":{start:{line:557,column:4},end:{line:581,column:5}},"299":{start:{line:558,column:6},end:{line:571,column:7}},"300":{start:{line:559,column:8},end:{line:561,column:9}},"301":{start:{line:560,column:10},end:{line:560,column:143}},"302":{start:{line:563,column:8},end:{line:566,column:9}},"303":{start:{line:563,column:21},end:{line:563,column:22}},"304":{start:{line:564,column:24},end:{line:564,column:70}},"305":{start:{line:565,column:10},end:{line:565,column:56}},"306":{start:{line:568,column:8},end:{line:568,column:88}},"307":{start:{line:570,column:8},end:{line:570,column:82}},"308":{start:{line:573,column:6},end:{line:573,column:62}},"309":{start:{line:574,column:6},end:{line:574,column:17}},"310":{start:{line:575,column:11},end:{line:581,column:5}},"311":{start:{line:576,column:6},end:{line:580,column:7}},"312":{start:{line:577,column:8},end:{line:577,column:56}},"313":{start:{line:578,column:8},end:{line:578,column:60}},"314":{start:{line:579,column:8},end:{line:579,column:19}},"315":{start:{line:583,column:4},end:{line:592,column:5}},"316":{start:{line:584,column:6},end:{line:588,column:7}},"317":{start:{line:585,column:8},end:{line:585,column:52}},"318":{start:{line:587,column:8},end:{line:587,column:48}},"319":{start:{line:590,column:6},end:{line:590,column:29}},"320":{start:{line:591,column:6},end:{line:591,column:17}},"321":{start:{line:594,column:4},end:{line:604,column:5}},"322":{start:{line:595,column:18},end:{line:595,column:41}},"323":{start:{line:597,column:6},end:{line:599,column:7}},"324":{start:{line:598,column:8},end:{line:598,column:112}},"325":{start:{line:601,column:6},end:{line:601,column:62}},"326":{start:{line:602,column:6},end:{line:602,column:50}},"327":{start:{line:603,column:6},end:{line:603,column:17}},"328":{start:{line:606,column:4},end:{line:639,column:5}},"329":{start:{line:607,column:21},end:{line:607,column:45}},"330":{start:{line:608,column:21},end:{line:608,column:30}},"331":{start:{line:610,column:6},end:{line:612,column:7}},"332":{start:{line:611,column:8},end:{line:611,column:112}},"333":{start:{line:614,column:6},end:{line:616,column:7}},"334":{start:{line:615,column:8},end:{line:615,column:110}},"335":{start:{line:618,column:6},end:{line:622,column:7}},"336":{start:{line:619,column:8},end:{line:619,column:114}},"337":{start:{line:620,column:13},end:{line:622,column:7}},"338":{start:{line:621,column:8},end:{line:621,column:36}},"339":{start:{line:624,column:6},end:{line:628,column:7}},"340":{start:{line:625,column:8},end:{line:625,column:120}},"341":{start:{line:626,column:13},end:{line:628,column:7}},"342":{start:{line:627,column:8},end:{line:627,column:174}},"343":{start:{line:630,column:6},end:{line:634,column:7}},"344":{start:{line:631,column:8},end:{line:631,column:125}},"345":{start:{line:632,column:13},end:{line:634,column:7}},"346":{start:{line:633,column:8},end:{line:633,column:165}},"347":{start:{line:636,column:6},end:{line:636,column:110}},"348":{start:{line:637,column:6},end:{line:637,column:63}},"349":{start:{line:638,column:6},end:{line:638,column:17}},"350":{start:{line:641,column:4},end:{line:649,column:5}},"351":{start:{line:642,column:20},end:{line:642,column:42}},"352":{start:{line:643,column:23},end:{line:643,column:46}},"353":{start:{line:644,column:27},end:{line:644,column:49}},"354":{start:{line:645,column:6},end:{line:645,column:131}},"355":{start:{line:646,column:6},end:{line:646,column:115}},"356":{start:{line:647,column:6},end:{line:647,column:76}},"357":{start:{line:648,column:6},end:{line:648,column:17}},"358":{start:{line:651,column:4},end:{line:660,column:5}},"359":{start:{line:652,column:18},end:{line:652,column:41}},"360":{start:{line:653,column:19},end:{line:653,column:35}},"361":{start:{line:654,column:21},end:{line:654,column:36}},"362":{start:{line:655,column:20},end:{line:655,column:36}},"363":{start:{line:656,column:18},end:{line:656,column:33}},"364":{start:{line:657,column:6},end:{line:657,column:67}},"365":{start:{line:658,column:6},end:{line:658,column:75}},"366":{start:{line:659,column:6},end:{line:659,column:17}},"367":{start:{line:662,column:4},end:{line:691,column:5}},"368":{start:{line:663,column:27},end:{line:663,column:62}},"369":{start:{line:665,column:6},end:{line:667,column:7}},"370":{start:{line:666,column:8},end:{line:666,column:161}},"371":{start:{line:670,column:18},end:{line:670,column:33}},"372":{start:{line:672,column:6},end:{line:676,column:7}},"373":{start:{line:673,column:8},end:{line:673,column:63}},"374":{start:{line:674,column:13},end:{line:676,column:7}},"375":{start:{line:675,column:8},end:{line:675,column:129}},"376":{start:{line:678,column:6},end:{line:678,column:72}},"377":{start:{line:681,column:23},end:{line:681,column:38}},"378":{start:{line:683,column:6},end:{line:685,column:7}},"379":{start:{line:684,column:8},end:{line:684,column:128}},"380":{start:{line:687,column:27},end:{line:687,column:49}},"381":{start:{line:688,column:6},end:{line:688,column:131}},"382":{start:{line:689,column:6},end:{line:689,column:76}},"383":{start:{line:690,column:6},end:{line:690,column:17}},"384":{start:{line:693,column:4},end:{line:731,column:5}},"385":{start:{line:694,column:22},end:{line:694,column:52}},"386":{start:{line:697,column:6},end:{line:711,column:7}},"387":{start:{line:698,column:8},end:{line:700,column:9}},"388":{start:{line:699,column:10},end:{line:699,column:159}},"389":{start:{line:702,column:8},end:{line:702,column:37}},"390":{start:{line:703,column:13},end:{line:711,column:7}},"391":{start:{line:704,column:8},end:{line:706,column:9}},"392":{start:{line:705,column:10},end:{line:705,column:144}},"393":{start:{line:708,column:8},end:{line:708,column:25}},"394":{start:{line:710,column:8},end:{line:710,column:160}},"395":{start:{line:713,column:6},end:{line:727,column:20}},"396":{start:{line:714,column:8},end:{line:718,column:9}},"397":{start:{line:715,column:10},end:{line:715,column:63}},"398":{start:{line:717,column:10},end:{line:717,column:46}},"399":{start:{line:720,column:8},end:{line:724,column:9}},"400":{start:{line:721,column:10},end:{line:721,column:98}},"401":{start:{line:723,column:10},end:{line:723,column:76}},"402":{start:{line:726,column:8},end:{line:726,column:57}},"403":{start:{line:728,column:6},end:{line:728,column:71}},"404":{start:{line:729,column:6},end:{line:729,column:44}},"405":{start:{line:730,column:6},end:{line:730,column:17}},"406":{start:{line:733,column:4},end:{line:745,column:5}},"407":{start:{line:734,column:20},end:{line:734,column:52}},"408":{start:{line:736,column:6},end:{line:740,column:7}},"409":{start:{line:737,column:8},end:{line:737,column:126}},"410":{start:{line:739,column:8},end:{line:739,column:74}},"411":{start:{line:742,column:6},end:{line:742,column:71}},"412":{start:{line:743,column:6},end:{line:743,column:72}},"413":{start:{line:744,column:6},end:{line:744,column:17}},"414":{start:{line:747,column:4},end:{line:767,column:5}},"415":{start:{line:748,column:18},end:{line:748,column:35}},"416":{start:{line:749,column:21},end:{line:749,column:24}},"417":{start:{line:750,column:19},end:{line:750,column:38}},"418":{start:{line:752,column:6},end:{line:760,column:7}},"419":{start:{line:753,column:8},end:{line:755,column:9}},"420":{start:{line:754,column:10},end:{line:754,column:26}},"421":{start:{line:757,column:8},end:{line:759,column:9}},"422":{start:{line:758,column:10},end:{line:758,column:42}},"423":{start:{line:762,column:19},end:{line:762,column:47}},"424":{start:{line:763,column:6},end:{line:763,column:41}},"425":{start:{line:764,column:6},end:{line:764,column:69}},"426":{start:{line:765,column:6},end:{line:765,column:31}},"427":{start:{line:766,column:6},end:{line:766,column:17}},"428":{start:{line:769,column:4},end:{line:779,column:5}},"429":{start:{line:770,column:6},end:{line:778,column:7}},"430":{start:{line:771,column:8},end:{line:771,column:71}},"431":{start:{line:772,column:8},end:{line:772,column:61}},"432":{start:{line:773,column:8},end:{line:773,column:19}},"433":{start:{line:775,column:8},end:{line:775,column:56}},"434":{start:{line:776,column:8},end:{line:776,column:52}},"435":{start:{line:777,column:8},end:{line:777,column:19}},"436":{start:{line:781,column:4},end:{line:785,column:5}},"437":{start:{line:782,column:6},end:{line:782,column:54}},"438":{start:{line:783,column:6},end:{line:783,column:45}},"439":{start:{line:784,column:6},end:{line:784,column:17}},"440":{start:{line:787,column:4},end:{line:791,column:5}},"441":{start:{line:788,column:6},end:{line:788,column:77}},"442":{start:{line:789,column:6},end:{line:789,column:72}},"443":{start:{line:790,column:6},end:{line:790,column:17}},"444":{start:{line:793,column:4},end:{line:798,column:5}},"445":{start:{line:794,column:20},end:{line:794,column:63}},"446":{start:{line:795,column:6},end:{line:795,column:64}},"447":{start:{line:796,column:6},end:{line:796,column:36}},"448":{start:{line:797,column:6},end:{line:797,column:17}},"449":{start:{line:800,column:4},end:{line:831,column:7}},"450":{start:{line:801,column:6},end:{line:830,column:7}},"451":{start:{line:802,column:29},end:{line:802,column:58}},"452":{start:{line:803,column:30},end:{line:803,column:62}},"453":{start:{line:806,column:8},end:{line:826,column:9}},"454":{start:{line:809,column:10},end:{line:820,column:11}},"455":{start:{line:811,column:14},end:{line:811,column:44}},"456":{start:{line:812,column:14},end:{line:812,column:20}},"457":{start:{line:815,column:14},end:{line:815,column:35}},"458":{start:{line:816,column:14},end:{line:816,column:20}},"459":{start:{line:819,column:14},end:{line:819,column:35}},"460":{start:{line:822,column:10},end:{line:822,column:132}},"461":{start:{line:824,column:10},end:{line:824,column:51}},"462":{start:{line:825,column:10},end:{line:825,column:33}},"463":{start:{line:828,column:8},end:{line:828,column:35}},"464":{start:{line:829,column:8},end:{line:829,column:76}},"465":{start:{line:833,column:4},end:{line:835,column:5}},"466":{start:{line:834,column:6},end:{line:834,column:155}},"467":{start:{line:838,column:2},end:{line:838,column:38}},"468":{start:{line:839,column:2},end:{line:843,column:4}},"469":{start:{line:853,column:4},end:{line:853,column:46}},"470":{start:{line:854,column:4},end:{line:854,column:65}},"471":{start:{line:855,column:4},end:{line:855,column:45}},"472":{start:{line:859,column:8},end:{line:859,column:63}},"473":{start:{line:860,column:4},end:{line:860,column:26}},"474":{start:{line:862,column:4},end:{line:862,column:30}},"475":{start:{line:864,column:4},end:{line:864,column:20}},"476":{start:{line:865,column:4},end:{line:865,column:33}},"477":{start:{line:866,column:4},end:{line:866,column:37}},"478":{start:{line:870,column:4},end:{line:870,column:30}},"479":{start:{line:875,column:4},end:{line:879,column:5}},"480":{start:{line:876,column:6},end:{line:876,column:55}},"481":{start:{line:878,column:6},end:{line:878,column:46}},"482":{start:{line:883,column:4},end:{line:887,column:5}},"483":{start:{line:884,column:6},end:{line:884,column:26}},"484":{start:{line:886,column:6},end:{line:886,column:26}},"485":{start:{line:889,column:4},end:{line:891,column:5}},"486":{start:{line:890,column:6},end:{line:890,column:13}},"487":{start:{line:893,column:4},end:{line:893,column:29}},"488":{start:{line:897,column:4},end:{line:911,column:5}},"489":{start:{line:898,column:6},end:{line:900,column:9}},"490":{start:{line:902,column:6},end:{line:908,column:9}},"491":{start:{line:903,column:24},end:{line:903,column:48}},"492":{start:{line:905,column:8},end:{line:907,column:9}},"493":{start:{line:906,column:10},end:{line:906,column:27}},"494":{start:{line:910,column:6},end:{line:910,column:61}},"495":{start:{line:915,column:4},end:{line:921,column:5}},"496":{start:{line:916,column:6},end:{line:920,column:9}},"497":{start:{line:919,column:8},end:{line:919,column:48}},"498":{start:{line:925,column:4},end:{line:925,column:32}},"499":{start:{line:926,column:4},end:{line:931,column:7}},"500":{start:{line:927,column:6},end:{line:930,column:7}},"501":{start:{line:929,column:8},end:{line:929,column:20}},"502":{start:{line:935,column:4},end:{line:935,column:132}},"503":{start:{line:935,column:122},end:{line:935,column:130}},"504":{start:{line:939,column:4},end:{line:942,column:7}},"505":{start:{line:940,column:21},end:{line:940,column:89}},"506":{start:{line:941,column:6},end:{line:941,column:134}},"507":{start:{line:944,column:4},end:{line:944,column:31}},"508":{start:{line:948,column:4},end:{line:948,column:32}},"509":{start:{line:949,column:17},end:{line:949,column:21}},"510":{start:{line:951,column:4},end:{line:953,column:5}},"511":{start:{line:952,column:6},end:{line:952,column:31}},"512":{start:{line:955,column:4},end:{line:961,column:5}},"513":{start:{line:956,column:6},end:{line:960,column:8}},"514":{start:{line:963,column:27},end:{line:963,column:29}},"515":{start:{line:964,column:28},end:{line:964,column:30}},"516":{start:{line:965,column:4},end:{line:991,column:7}},"517":{start:{line:966,column:20},end:{line:966,column:42}},"518":{start:{line:968,column:6},end:{line:970,column:7}},"519":{start:{line:969,column:8},end:{line:969,column:113}},"520":{start:{line:972,column:6},end:{line:974,column:7}},"521":{start:{line:973,column:8},end:{line:973,column:121}},"522":{start:{line:976,column:6},end:{line:990,column:7}},"523":{start:{line:977,column:8},end:{line:977,column:34}},"524":{start:{line:978,column:8},end:{line:978,column:37}},"525":{start:{line:980,column:8},end:{line:984,column:11}},"526":{start:{line:981,column:10},end:{line:983,column:11}},"527":{start:{line:982,column:12},end:{line:982,column:127}},"528":{start:{line:985,column:8},end:{line:985,column:38}},"529":{start:{line:986,column:8},end:{line:989,column:11}},"530":{start:{line:992,column:4},end:{line:1002,column:7}},"531":{start:{line:993,column:6},end:{line:995,column:7}},"532":{start:{line:994,column:8},end:{line:994,column:64}},"533":{start:{line:997,column:6},end:{line:999,column:7}},"534":{start:{line:998,column:8},end:{line:998,column:61}},"535":{start:{line:1001,column:6},end:{line:1001,column:193}},"536":{start:{line:1004,column:4},end:{line:1004,column:31}},"537":{start:{line:1008,column:4},end:{line:1008,column:32}},"538":{start:{line:1009,column:24},end:{line:1023,column:6}},"539":{start:{line:1010,column:6},end:{line:1010,column:51}},"540":{start:{line:1011,column:6},end:{line:1014,column:9}},"541":{start:{line:1015,column:6},end:{line:1015,column:93}},"542":{start:{line:1016,column:6},end:{line:1016,column:35}},"543":{start:{line:1018,column:6},end:{line:1020,column:7}},"544":{start:{line:1019,column:8},end:{line:1019,column:113}},"545":{start:{line:1022,column:6},end:{line:1022,column:16}},"546":{start:{line:1025,column:4},end:{line:1025,column:31}},"547":{start:{line:1027,column:4},end:{line:1027,column:23}},"548":{start:{line:1032,column:4},end:{line:1032,column:32}},"549":{start:{line:1033,column:4},end:{line:1033,column:25}},"550":{start:{line:1034,column:24},end:{line:1034,column:26}},"551":{start:{line:1035,column:26},end:{line:1035,column:28}},"552":{start:{line:1036,column:19},end:{line:1036,column:51}},"553":{start:{line:1038,column:4},end:{line:1063,column:5}},"554":{start:{line:1039,column:6},end:{line:1041,column:8}},"555":{start:{line:1042,column:6},end:{line:1044,column:8}},"556":{start:{line:1045,column:6},end:{line:1047,column:8}},"557":{start:{line:1048,column:6},end:{line:1050,column:8}},"558":{start:{line:1051,column:6},end:{line:1053,column:8}},"559":{start:{line:1054,column:6},end:{line:1056,column:8}},"560":{start:{line:1057,column:6},end:{line:1059,column:8}},"561":{start:{line:1060,column:6},end:{line:1062,column:8}},"562":{start:{line:1065,column:16},end:{line:1065,column:17}},"563":{start:{line:1066,column:22},end:{line:1066,column:24}},"564":{start:{line:1067,column:4},end:{line:1091,column:7}},"565":{start:{line:1068,column:24},end:{line:1068,column:41}},"566":{start:{line:1071,column:6},end:{line:1074,column:7}},"567":{start:{line:1072,column:8},end:{line:1072,column:34}},"568":{start:{line:1073,column:8},end:{line:1073,column:15}},"569":{start:{line:1076,column:6},end:{line:1080,column:7}},"570":{start:{line:1077,column:8},end:{line:1079,column:10}},"571":{start:{line:1082,column:6},end:{line:1082,column:34}},"572":{start:{line:1083,column:6},end:{line:1083,column:59}},"573":{start:{line:1084,column:6},end:{line:1084,column:61}},"574":{start:{line:1086,column:6},end:{line:1088,column:7}},"575":{start:{line:1087,column:8},end:{line:1087,column:59}},"576":{start:{line:1090,column:6},end:{line:1090,column:24}},"577":{start:{line:1092,column:15},end:{line:1092,column:77}},"578":{start:{line:1093,column:19},end:{line:1093,column:46}},"579":{start:{line:1094,column:4},end:{line:1111,column:7}},"580":{start:{line:1095,column:6},end:{line:1102,column:7}},"581":{start:{line:1096,column:8},end:{line:1096,column:33}},"582":{start:{line:1098,column:8},end:{line:1100,column:9}},"583":{start:{line:1099,column:10},end:{line:1099,column:22}},"584":{start:{line:1104,column:6},end:{line:1110,column:9}},"585":{start:{line:1105,column:8},end:{line:1109,column:12}},"586":{start:{line:1106,column:10},end:{line:1108,column:13}},"587":{start:{line:1115,column:4},end:{line:1115,column:27}},"588":{start:{line:1116,column:4},end:{line:1116,column:32}},"589":{start:{line:1117,column:17},end:{line:1117,column:21}},"590":{start:{line:1118,column:4},end:{line:1124,column:7}},"591":{start:{line:1119,column:22},end:{line:1121,column:28}},"592":{start:{line:1121,column:14},end:{line:1121,column:27}},"593":{start:{line:1122,column:25},end:{line:1122,column:187}},"594":{start:{line:1122,column:67},end:{line:1122,column:95}},"595":{start:{line:1122,column:114},end:{line:1122,column:186}},"596":{start:{line:1123,column:6},end:{line:1123,column:32}},"597":{start:{line:1129,column:4},end:{line:1129,column:33}},"598":{start:{line:1130,column:17},end:{line:1130,column:21}},"599":{start:{line:1131,column:4},end:{line:1174,column:7}},"600":{start:{line:1132,column:6},end:{line:1157,column:7}},"601":{start:{line:1133,column:8},end:{line:1152,column:9}},"602":{start:{line:1134,column:10},end:{line:1138,column:13}},"603":{start:{line:1140,column:10},end:{line:1146,column:11}},"604":{start:{line:1141,column:12},end:{line:1145,column:18}},"605":{start:{line:1148,column:10},end:{line:1150,column:11}},"606":{start:{line:1149,column:12},end:{line:1149,column:24}},"607":{start:{line:1154,column:8},end:{line:1156,column:11}},"608":{start:{line:1159,column:21},end:{line:1162,column:8}},"609":{start:{line:1164,column:6},end:{line:1173,column:7}},"610":{start:{line:1165,column:8},end:{line:1165,column:61}},"611":{start:{line:1167,column:21},end:{line:1167,column:44}},"612":{start:{line:1168,column:8},end:{line:1172,column:11}},"613":{start:{line:1176,column:4},end:{line:1176,column:31}},"614":{start:{line:1180,column:4},end:{line:1187,column:7}},"615":{start:{line:1181,column:19},end:{line:1181,column:42}},"616":{start:{line:1182,column:6},end:{line:1186,column:9}},"617":{start:{line:1193,column:23},end:{line:1199,column:6}},"618":{start:{line:1200,column:21},end:{line:1200,column:138}},"619":{start:{line:1200,column:48},end:{line:1200,column:92}},"620":{start:{line:1200,column:105},end:{line:1200,column:137}},"621":{start:{line:1202,column:4},end:{line:1202,column:31}},"622":{start:{line:1204,column:4},end:{line:1204,column:20}},"623":{start:{line:1209,column:16},end:{line:1209,column:36}},"624":{start:{line:1210,column:20},end:{line:1210,column:37}},"625":{start:{line:1211,column:4},end:{line:1211,column:30}},"626":{start:{line:1212,column:4},end:{line:1234,column:7}},"627":{start:{line:1213,column:6},end:{line:1231,column:7}},"628":{start:{line:1214,column:24},end:{line:1214,column:62}},"629":{start:{line:1215,column:22},end:{line:1217,column:14}},"630":{start:{line:1216,column:10},end:{line:1216,column:65}},"631":{start:{line:1218,column:24},end:{line:1218,column:208}},"632":{start:{line:1218,column:180},end:{line:1218,column:196}},"633":{start:{line:1219,column:24},end:{line:1224,column:11}},"634":{start:{line:1219,column:50},end:{line:1224,column:9}},"635":{start:{line:1225,column:8},end:{line:1225,column:59}},"636":{start:{line:1225,column:25},end:{line:1225,column:57}},"637":{start:{line:1227,column:8},end:{line:1229,column:9}},"638":{start:{line:1228,column:10},end:{line:1228,column:22}},"639":{start:{line:1233,column:6},end:{line:1233,column:70}},"640":{start:{line:1249,column:4},end:{line:1249,column:26}},"641":{start:{line:1250,column:4},end:{line:1259,column:11}},"642":{start:{line:1251,column:20},end:{line:1251,column:44}},"643":{start:{line:1253,column:6},end:{line:1255,column:7}},"644":{start:{line:1254,column:8},end:{line:1254,column:29}},"645":{start:{line:1257,column:6},end:{line:1257,column:38}},"646":{start:{line:1258,column:6},end:{line:1258,column:18}},"647":{start:{line:1260,column:19},end:{line:1260,column:45}},"648":{start:{line:1261,column:20},end:{line:1263,column:28}},"649":{start:{line:1262,column:6},end:{line:1262,column:32}},"650":{start:{line:1264,column:4},end:{line:1273,column:7}},"651":{start:{line:1265,column:6},end:{line:1268,column:9}},"652":{start:{line:1270,column:6},end:{line:1272,column:7}},"653":{start:{line:1271,column:8},end:{line:1271,column:85}},"654":{start:{line:1275,column:4},end:{line:1275,column:31}},"655":{start:{line:1282,column:4},end:{line:1286,column:7}},"656":{start:{line:1283,column:6},end:{line:1285,column:23}},"657":{start:{line:1283,column:65},end:{line:1285,column:21}},"658":{start:{line:1293,column:4},end:{line:1293,column:22}},"659":{start:{line:1294,column:4},end:{line:1302,column:27}},"660":{start:{line:1297,column:6},end:{line:1299,column:7}},"661":{start:{line:1298,column:8},end:{line:1298,column:24}},"662":{start:{line:1301,column:6},end:{line:1301,column:30}},"663":{start:{line:1307,column:4},end:{line:1307,column:26}},"664":{start:{line:1308,column:23},end:{line:1308,column:25}},"665":{start:{line:1309,column:24},end:{line:1309,column:26}},"666":{start:{line:1310,column:4},end:{line:1310,column:38}},"667":{start:{line:1311,column:22},end:{line:1311,column:24}},"668":{start:{line:1312,column:4},end:{line:1312,column:37}},"669":{start:{line:1313,column:4},end:{line:1313,column:25}},"670":{start:{line:1314,column:4},end:{line:1406,column:7}},"671":{start:{line:1315,column:6},end:{line:1317,column:7}},"672":{start:{line:1316,column:8},end:{line:1316,column:15}},"673":{start:{line:1319,column:26},end:{line:1319,column:73}},"674":{start:{line:1321,column:6},end:{line:1327,column:7}},"675":{start:{line:1322,column:23},end:{line:1322,column:39}},"676":{start:{line:1323,column:8},end:{line:1323,column:54}},"677":{start:{line:1324,column:8},end:{line:1324,column:57}},"678":{start:{line:1325,column:8},end:{line:1325,column:33}},"679":{start:{line:1326,column:8},end:{line:1326,column:31}},"680":{start:{line:1329,column:6},end:{line:1329,column:35}},"681":{start:{line:1331,column:6},end:{line:1353,column:7}},"682":{start:{line:1332,column:8},end:{line:1334,column:9}},"683":{start:{line:1333,column:10},end:{line:1333,column:46}},"684":{start:{line:1336,column:8},end:{line:1342,column:9}},"685":{start:{line:1337,column:10},end:{line:1341,column:11}},"686":{start:{line:1338,column:12},end:{line:1338,column:52}},"687":{start:{line:1340,column:12},end:{line:1340,column:35}},"688":{start:{line:1344,column:8},end:{line:1350,column:9}},"689":{start:{line:1345,column:10},end:{line:1349,column:11}},"690":{start:{line:1346,column:12},end:{line:1346,column:52}},"691":{start:{line:1348,column:12},end:{line:1348,column:35}},"692":{start:{line:1352,column:8},end:{line:1352,column:15}},"693":{start:{line:1355,column:6},end:{line:1405,column:7}},"694":{start:{line:1357,column:10},end:{line:1361,column:11}},"695":{start:{line:1358,column:12},end:{line:1358,column:52}},"696":{start:{line:1360,column:12},end:{line:1360,column:35}},"697":{start:{line:1363,column:10},end:{line:1363,column:16}},"698":{start:{line:1366,column:10},end:{line:1366,column:55}},"699":{start:{line:1367,column:10},end:{line:1367,column:16}},"700":{start:{line:1370,column:10},end:{line:1374,column:11}},"701":{start:{line:1371,column:12},end:{line:1371,column:48}},"702":{start:{line:1373,column:12},end:{line:1373,column:64}},"703":{start:{line:1376,column:10},end:{line:1376,column:16}},"704":{start:{line:1383,column:10},end:{line:1383,column:46}},"705":{start:{line:1384,column:10},end:{line:1384,column:16}},"706":{start:{line:1387,column:10},end:{line:1387,column:51}},"707":{start:{line:1388,column:10},end:{line:1388,column:16}},"708":{start:{line:1392,column:26},end:{line:1392,column:76}},"709":{start:{line:1393,column:12},end:{line:1393,column:36}},"710":{start:{line:1394,column:12},end:{line:1394,column:18}},"711":{start:{line:1399,column:10},end:{line:1399,column:51}},"712":{start:{line:1400,column:10},end:{line:1400,column:29}},"713":{start:{line:1401,column:10},end:{line:1401,column:16}},"714":{start:{line:1404,column:10},end:{line:1404,column:74}},"715":{start:{line:1407,column:4},end:{line:1407,column:63}},"716":{start:{line:1408,column:26},end:{line:1419,column:6}},"717":{start:{line:1409,column:24},end:{line:1409,column:26}},"718":{start:{line:1410,column:24},end:{line:1410,column:43}},"719":{start:{line:1412,column:6},end:{line:1416,column:7}},"720":{start:{line:1413,column:8},end:{line:1413,column:33}},"721":{start:{line:1414,column:13},end:{line:1416,column:7}},"722":{start:{line:1415,column:8},end:{line:1415,column:32}},"723":{start:{line:1418,column:6},end:{line:1418,column:65}},"724":{start:{line:1420,column:29},end:{line:1425,column:6}},"725":{start:{line:1421,column:20},end:{line:1421,column:34}},"726":{start:{line:1422,column:6},end:{line:1422,column:56}},"727":{start:{line:1423,column:16},end:{line:1423,column:56}},"728":{start:{line:1424,column:6},end:{line:1424,column:39}},"729":{start:{line:1426,column:27},end:{line:1426,column:88}},"730":{start:{line:1426,column:60},end:{line:1426,column:80}},"731":{start:{line:1427,column:26},end:{line:1427,column:71}},"732":{start:{line:1428,column:15},end:{line:1428,column:82}},"733":{start:{line:1429,column:19},end:{line:1429,column:63}},"734":{start:{line:1430,column:20},end:{line:1451,column:6}},"735":{start:{line:1430,column:112},end:{line:1432,column:5}},"736":{start:{line:1433,column:6},end:{line:1448,column:7}},"737":{start:{line:1434,column:20},end:{line:1434,column:145}},"738":{start:{line:1435,column:8},end:{line:1435,column:36}},"739":{start:{line:1437,column:8},end:{line:1445,column:9}},"740":{start:{line:1438,column:26},end:{line:1438,column:70}},"741":{start:{line:1440,column:10},end:{line:1444,column:11}},"742":{start:{line:1441,column:12},end:{line:1443,column:14}},"743":{start:{line:1447,column:8},end:{line:1447,column:20}},"744":{start:{line:1450,column:6},end:{line:1450,column:18}},"745":{start:{line:1453,column:4},end:{line:1455,column:5}},"746":{start:{line:1454,column:6},end:{line:1454,column:47}},"747":{start:{line:1457,column:4},end:{line:1457,column:19}},"748":{start:{line:1464,column:4},end:{line:1464,column:34}},"749":{start:{line:1465,column:19},end:{line:1465,column:30}},"750":{start:{line:1466,column:18},end:{line:1466,column:19}},"751":{start:{line:1467,column:18},end:{line:1472,column:6}},"752":{start:{line:1473,column:4},end:{line:1473,column:33}},"753":{start:{line:1475,column:4},end:{line:1477,column:5}},"754":{start:{line:1476,column:6},end:{line:1476,column:29}},"755":{start:{line:1479,column:15},end:{line:1479,column:118}},"756":{start:{line:1480,column:20},end:{line:1491,column:6}},"757":{start:{line:1480,column:104},end:{line:1480,column:112}},"758":{start:{line:1481,column:6},end:{line:1485,column:7}},"759":{start:{line:1482,column:8},end:{line:1482,column:97}},"760":{start:{line:1484,column:8},end:{line:1484,column:21}},"761":{start:{line:1487,column:6},end:{line:1489,column:7}},"762":{start:{line:1488,column:8},end:{line:1488,column:20}},"763":{start:{line:1493,column:4},end:{line:1495,column:5}},"764":{start:{line:1494,column:6},end:{line:1494,column:47}},"765":{start:{line:1497,column:4},end:{line:1497,column:19}},"766":{start:{line:1502,column:4},end:{line:1502,column:30}},"767":{start:{line:1503,column:4},end:{line:1503,column:113}},"768":{start:{line:1503,column:105},end:{line:1503,column:111}},"769":{start:{line:1508,column:4},end:{line:1508,column:34}},"770":{start:{line:1509,column:27},end:{line:1509,column:29}},"771":{start:{line:1510,column:19},end:{line:1510,column:30}},"772":{start:{line:1511,column:16},end:{line:1511,column:17}},"773":{start:{line:1512,column:4},end:{line:1512,column:38}},"774":{start:{line:1514,column:27},end:{line:1514,column:52}},"775":{start:{line:1517,column:31},end:{line:1517,column:33}},"776":{start:{line:1518,column:4},end:{line:1526,column:7}},"777":{start:{line:1519,column:6},end:{line:1525,column:7}},"778":{start:{line:1520,column:27},end:{line:1520,column:47}},"779":{start:{line:1521,column:22},end:{line:1521,column:40}},"780":{start:{line:1522,column:8},end:{line:1522,column:41}},"781":{start:{line:1524,column:8},end:{line:1524,column:46}},"782":{start:{line:1527,column:4},end:{line:1527,column:37}},"783":{start:{line:1530,column:4},end:{line:1540,column:5}},"784":{start:{line:1531,column:28},end:{line:1531,column:75}},"785":{start:{line:1533,column:6},end:{line:1539,column:7}},"786":{start:{line:1534,column:23},end:{line:1534,column:39}},"787":{start:{line:1535,column:22},end:{line:1535,column:39}},"788":{start:{line:1536,column:8},end:{line:1536,column:33}},"789":{start:{line:1537,column:8},end:{line:1537,column:54}},"790":{start:{line:1538,column:8},end:{line:1538,column:45}},"791":{start:{line:1542,column:4},end:{line:1703,column:5}},"792":{start:{line:1543,column:25},end:{line:1543,column:42}},"793":{start:{line:1545,column:6},end:{line:1702,column:7}},"794":{start:{line:1546,column:8},end:{line:1546,column:33}},"795":{start:{line:1547,column:13},end:{line:1702,column:7}},"796":{start:{line:1548,column:8},end:{line:1548,column:53}},"797":{start:{line:1549,column:8},end:{line:1549,column:31}},"798":{start:{line:1550,column:8},end:{line:1550,column:19}},"799":{start:{line:1551,column:13},end:{line:1702,column:7}},"800":{start:{line:1554,column:25},end:{line:1556,column:9}},"801":{start:{line:1555,column:10},end:{line:1555,column:97}},"802":{start:{line:1558,column:24},end:{line:1558,column:40}},"803":{start:{line:1559,column:31},end:{line:1559,column:36}},"804":{start:{line:1560,column:8},end:{line:1560,column:19}},"805":{start:{line:1561,column:8},end:{line:1561,column:31}},"806":{start:{line:1562,column:23},end:{line:1577,column:19}},"807":{start:{line:1563,column:22},end:{line:1563,column:82}},"808":{start:{line:1564,column:10},end:{line:1564,column:21}},"809":{start:{line:1565,column:22},end:{line:1565,column:37}},"810":{start:{line:1567,column:10},end:{line:1573,column:11}},"811":{start:{line:1568,column:12},end:{line:1572,column:13}},"812":{start:{line:1569,column:14},end:{line:1569,column:27}},"813":{start:{line:1571,column:14},end:{line:1571,column:44}},"814":{start:{line:1575,column:10},end:{line:1575,column:34}},"815":{start:{line:1576,column:10},end:{line:1576,column:21}},"816":{start:{line:1578,column:8},end:{line:1578,column:67}},"817":{start:{line:1579,column:13},end:{line:1702,column:7}},"818":{start:{line:1580,column:8},end:{line:1580,column:92}},"819":{start:{line:1581,column:8},end:{line:1581,column:50}},"820":{start:{line:1582,column:8},end:{line:1582,column:19}},"821":{start:{line:1583,column:13},end:{line:1702,column:7}},"822":{start:{line:1584,column:8},end:{line:1584,column:119}},"823":{start:{line:1585,column:8},end:{line:1585,column:67}},"824":{start:{line:1586,column:8},end:{line:1586,column:19}},"825":{start:{line:1587,column:13},end:{line:1702,column:7}},"826":{start:{line:1588,column:8},end:{line:1588,column:62}},"827":{start:{line:1589,column:8},end:{line:1589,column:37}},"828":{start:{line:1590,column:8},end:{line:1590,column:19}},"829":{start:{line:1591,column:13},end:{line:1702,column:7}},"830":{start:{line:1592,column:8},end:{line:1592,column:122}},"831":{start:{line:1593,column:8},end:{line:1593,column:67}},"832":{start:{line:1594,column:8},end:{line:1594,column:19}},"833":{start:{line:1595,column:13},end:{line:1702,column:7}},"834":{start:{line:1596,column:8},end:{line:1596,column:126}},"835":{start:{line:1597,column:8},end:{line:1597,column:67}},"836":{start:{line:1598,column:8},end:{line:1598,column:19}},"837":{start:{line:1599,column:13},end:{line:1702,column:7}},"838":{start:{line:1601,column:8},end:{line:1601,column:62}},"839":{start:{line:1602,column:8},end:{line:1602,column:43}},"840":{start:{line:1603,column:8},end:{line:1603,column:19}},"841":{start:{line:1604,column:13},end:{line:1702,column:7}},"842":{start:{line:1605,column:8},end:{line:1605,column:62}},"843":{start:{line:1606,column:8},end:{line:1606,column:43}},"844":{start:{line:1607,column:8},end:{line:1607,column:19}},"845":{start:{line:1608,column:13},end:{line:1702,column:7}},"846":{start:{line:1609,column:8},end:{line:1609,column:62}},"847":{start:{line:1610,column:8},end:{line:1610,column:43}},"848":{start:{line:1611,column:8},end:{line:1611,column:19}},"849":{start:{line:1612,column:13},end:{line:1702,column:7}},"850":{start:{line:1613,column:8},end:{line:1613,column:62}},"851":{start:{line:1614,column:8},end:{line:1614,column:52}},"852":{start:{line:1615,column:8},end:{line:1615,column:19}},"853":{start:{line:1616,column:13},end:{line:1702,column:7}},"854":{start:{line:1617,column:8},end:{line:1617,column:62}},"855":{start:{line:1618,column:8},end:{line:1618,column:60}},"856":{start:{line:1619,column:8},end:{line:1619,column:19}},"857":{start:{line:1620,column:13},end:{line:1702,column:7}},"858":{start:{line:1621,column:8},end:{line:1621,column:62}},"859":{start:{line:1622,column:8},end:{line:1622,column:43}},"860":{start:{line:1623,column:8},end:{line:1623,column:19}},"861":{start:{line:1624,column:13},end:{line:1702,column:7}},"862":{start:{line:1625,column:8},end:{line:1625,column:62}},"863":{start:{line:1626,column:8},end:{line:1626,column:60}},"864":{start:{line:1627,column:8},end:{line:1627,column:19}},"865":{start:{line:1628,column:13},end:{line:1702,column:7}},"866":{start:{line:1629,column:8},end:{line:1629,column:84}},"867":{start:{line:1630,column:8},end:{line:1630,column:74}},"868":{start:{line:1631,column:8},end:{line:1631,column:19}},"869":{start:{line:1632,column:13},end:{line:1702,column:7}},"870":{start:{line:1633,column:22},end:{line:1633,column:65}},"871":{start:{line:1634,column:8},end:{line:1634,column:71}},"872":{start:{line:1635,column:8},end:{line:1635,column:38}},"873":{start:{line:1636,column:8},end:{line:1636,column:19}},"874":{start:{line:1637,column:13},end:{line:1702,column:7}},"875":{start:{line:1638,column:13},end:{line:1702,column:7}},"876":{start:{line:1639,column:8},end:{line:1639,column:62}},"877":{start:{line:1640,column:8},end:{line:1640,column:43}},"878":{start:{line:1641,column:8},end:{line:1641,column:19}},"879":{start:{line:1642,column:13},end:{line:1702,column:7}},"880":{start:{line:1644,column:32},end:{line:1651,column:36}},"881":{start:{line:1649,column:24},end:{line:1649,column:41}},"882":{start:{line:1650,column:10},end:{line:1650,column:115}},"883":{start:{line:1651,column:20},end:{line:1651,column:35}},"884":{start:{line:1652,column:32},end:{line:1652,column:34}},"885":{start:{line:1654,column:8},end:{line:1663,column:9}},"886":{start:{line:1655,column:10},end:{line:1658,column:26}},"887":{start:{line:1656,column:27},end:{line:1656,column:47}},"888":{start:{line:1657,column:12},end:{line:1657,column:108}},"889":{start:{line:1660,column:10},end:{line:1662,column:13}},"890":{start:{line:1661,column:12},end:{line:1661,column:35}},"891":{start:{line:1665,column:29},end:{line:1669,column:36}},"892":{start:{line:1667,column:24},end:{line:1667,column:41}},"893":{start:{line:1668,column:10},end:{line:1668,column:112}},"894":{start:{line:1669,column:20},end:{line:1669,column:35}},"895":{start:{line:1670,column:31},end:{line:1672,column:14}},"896":{start:{line:1671,column:10},end:{line:1671,column:52}},"897":{start:{line:1674,column:27},end:{line:1674,column:40}},"898":{start:{line:1676,column:8},end:{line:1679,column:9}},"899":{start:{line:1678,column:10},end:{line:1678,column:65}},"900":{start:{line:1681,column:8},end:{line:1681,column:152}},"901":{start:{line:1682,column:8},end:{line:1682,column:76}},"902":{start:{line:1683,column:8},end:{line:1683,column:41}},"903":{start:{line:1684,column:13},end:{line:1702,column:7}},"904":{start:{line:1685,column:29},end:{line:1685,column:78}},"905":{start:{line:1687,column:8},end:{line:1695,column:9}},"906":{start:{line:1688,column:10},end:{line:1688,column:72}},"907":{start:{line:1689,column:10},end:{line:1689,column:45}},"908":{start:{line:1690,column:10},end:{line:1690,column:21}},"909":{start:{line:1692,column:10},end:{line:1692,column:71}},"910":{start:{line:1693,column:10},end:{line:1693,column:61}},"911":{start:{line:1694,column:10},end:{line:1694,column:21}},"912":{start:{line:1697,column:8},end:{line:1700,column:11}},"913":{start:{line:1701,column:8},end:{line:1701,column:165}},"914":{start:{line:1705,column:18},end:{line:1710,column:6}},"915":{start:{line:1711,column:4},end:{line:1711,column:33}},"916":{start:{line:1712,column:24},end:{line:1712,column:80}},"917":{start:{line:1713,column:15},end:{line:1713,column:87}},"918":{start:{line:1714,column:20},end:{line:1714,column:98}},"919":{start:{line:1716,column:4},end:{line:1718,column:5}},"920":{start:{line:1717,column:6},end:{line:1717,column:47}},"921":{start:{line:1720,column:4},end:{line:1720,column:19}},"922":{start:{line:1725,column:4},end:{line:1725,column:29}},"923":{start:{line:1726,column:24},end:{line:1726,column:56}},"924":{start:{line:1727,column:4},end:{line:1734,column:7}},"925":{start:{line:1729,column:6},end:{line:1731,column:7}},"926":{start:{line:1730,column:8},end:{line:1730,column:20}},"927":{start:{line:1733,column:6},end:{line:1733,column:91}},"928":{start:{line:1745,column:4},end:{line:1745,column:18}},"929":{start:{line:1746,column:21},end:{line:1746,column:40}},"930":{start:{line:1747,column:20},end:{line:1747,column:38}},"931":{start:{line:1748,column:17},end:{line:1748,column:28}},"932":{start:{line:1749,column:18},end:{line:1754,column:6}},"933":{start:{line:1755,column:4},end:{line:1755,column:33}},"934":{start:{line:1756,column:25},end:{line:1756,column:81}},"935":{start:{line:1757,column:25},end:{line:1757,column:70}},"936":{start:{line:1759,column:4},end:{line:1761,column:5}},"937":{start:{line:1760,column:6},end:{line:1760,column:25}},"938":{start:{line:1763,column:24},end:{line:1763,column:69}},"939":{start:{line:1765,column:4},end:{line:1767,column:5}},"940":{start:{line:1766,column:6},end:{line:1766,column:24}},"941":{start:{line:1769,column:22},end:{line:1769,column:24}},"942":{start:{line:1771,column:4},end:{line:1783,column:5}},"943":{start:{line:1772,column:23},end:{line:1772,column:27}},"944":{start:{line:1773,column:22},end:{line:1781,column:15}},"945":{start:{line:1774,column:29},end:{line:1774,column:74}},"946":{start:{line:1776,column:8},end:{line:1778,column:9}},"947":{start:{line:1777,column:10},end:{line:1777,column:39}},"948":{start:{line:1780,column:8},end:{line:1780,column:38}},"949":{start:{line:1782,column:6},end:{line:1782,column:100}},"950":{start:{line:1785,column:4},end:{line:1787,column:5}},"951":{start:{line:1786,column:6},end:{line:1786,column:53}},"952":{start:{line:1789,column:18},end:{line:1789,column:21}},"953":{start:{line:1791,column:4},end:{line:1812,column:5}},"954":{start:{line:1794,column:6},end:{line:1803,column:13}},"955":{start:{line:1795,column:8},end:{line:1800,column:9}},"956":{start:{line:1796,column:10},end:{line:1796,column:30}},"957":{start:{line:1797,column:10},end:{line:1797,column:30}},"958":{start:{line:1798,column:15},end:{line:1800,column:9}},"959":{start:{line:1799,column:10},end:{line:1799,column:25}},"960":{start:{line:1802,column:8},end:{line:1802,column:20}},"961":{start:{line:1804,column:6},end:{line:1810,column:16}},"962":{start:{line:1805,column:8},end:{line:1807,column:9}},"963":{start:{line:1806,column:10},end:{line:1806,column:101}},"964":{start:{line:1809,column:8},end:{line:1809,column:52}},"965":{start:{line:1811,column:6},end:{line:1811,column:35}},"966":{start:{line:1814,column:26},end:{line:1814,column:120}},"967":{start:{line:1815,column:15},end:{line:1815,column:83}},"968":{start:{line:1816,column:4},end:{line:1829,column:7}},"969":{start:{line:1818,column:6},end:{line:1820,column:7}},"970":{start:{line:1819,column:8},end:{line:1819,column:20}},"971":{start:{line:1822,column:6},end:{line:1822,column:16}},"972":{start:{line:1824,column:6},end:{line:1826,column:7}},"973":{start:{line:1825,column:8},end:{line:1825,column:23}},"974":{start:{line:1828,column:6},end:{line:1828,column:96}},"975":{start:{line:1828,column:35},end:{line:1828,column:94}},"976":{start:{line:1835,column:4},end:{line:1877,column:7}},"977":{start:{line:1836,column:6},end:{line:1842,column:7}},"978":{start:{line:1837,column:8},end:{line:1841,column:10}},"979":{start:{line:1844,column:6},end:{line:1849,column:7}},"980":{start:{line:1845,column:8},end:{line:1848,column:10}},"981":{start:{line:1851,column:6},end:{line:1857,column:7}},"982":{start:{line:1852,column:8},end:{line:1856,column:10}},"983":{start:{line:1859,column:6},end:{line:1869,column:7}},"984":{start:{line:1860,column:21},end:{line:1860,column:38}},"985":{start:{line:1861,column:8},end:{line:1861,column:66}},"986":{start:{line:1862,column:8},end:{line:1864,column:11}},"987":{start:{line:1863,column:10},end:{line:1863,column:84}},"988":{start:{line:1865,column:8},end:{line:1868,column:10}},"989":{start:{line:1871,column:6},end:{line:1876,column:7}},"990":{start:{line:1872,column:8},end:{line:1875,column:10}},"991":{start:{line:1879,column:4},end:{line:1881,column:5}},"992":{start:{line:1880,column:6},end:{line:1880,column:56}},"993":{start:{line:1883,column:4},end:{line:1885,column:5}},"994":{start:{line:1884,column:6},end:{line:1884,column:56}},"995":{start:{line:1887,column:4},end:{line:1892,column:5}},"996":{start:{line:1888,column:6},end:{line:1891,column:8}},"997":{start:{line:1894,column:4},end:{line:1899,column:5}},"998":{start:{line:1895,column:6},end:{line:1898,column:8}},"999":{start:{line:1901,column:4},end:{line:1906,column:5}},"1000":{start:{line:1902,column:6},end:{line:1905,column:8}},"1001":{start:{line:1908,column:4},end:{line:1913,column:5}},"1002":{start:{line:1909,column:6},end:{line:1912,column:8}},"1003":{start:{line:1915,column:4},end:{line:1920,column:5}},"1004":{start:{line:1916,column:6},end:{line:1919,column:8}},"1005":{start:{line:1922,column:4},end:{line:1933,column:5}},"1006":{start:{line:1923,column:6},end:{line:1925,column:7}},"1007":{start:{line:1924,column:8},end:{line:1924,column:33}},"1008":{start:{line:1927,column:6},end:{line:1932,column:7}},"1009":{start:{line:1928,column:8},end:{line:1931,column:10}},"1010":{start:{line:1935,column:4},end:{line:1935,column:18}},"1011":{start:{line:1944,column:27},end:{line:1944,column:79}},"1012":{start:{line:1945,column:31},end:{line:1945,column:89}},"1013":{start:{line:1945,column:68},end:{line:1945,column:88}},"1014":{start:{line:1946,column:15},end:{line:1946,column:99}},"1015":{start:{line:1947,column:4},end:{line:1955,column:7}},"1016":{start:{line:1948,column:6},end:{line:1954,column:7}},"1017":{start:{line:1949,column:13},end:{line:1954,column:7}},"1018":{start:{line:1951,column:8},end:{line:1951,column:140}},"1019":{start:{line:1953,column:8},end:{line:1953,column:20}},"1020":{start:{line:1960,column:4},end:{line:1960,column:19}},"1021":{start:{line:1961,column:19},end:{line:1961,column:30}},"1022":{start:{line:1962,column:18},end:{line:1967,column:6}},"1023":{start:{line:1968,column:4},end:{line:1968,column:33}},"1024":{start:{line:1969,column:25},end:{line:1969,column:81}},"1025":{start:{line:1970,column:13},end:{line:1970,column:15}},"1026":{start:{line:1972,column:4},end:{line:1976,column:5}},"1027":{start:{line:1973,column:6},end:{line:1973,column:58}},"1028":{start:{line:1975,column:6},end:{line:1975,column:88}},"1029":{start:{line:1978,column:4},end:{line:1990,column:7}},"1030":{start:{line:1979,column:6},end:{line:1983,column:7}},"1031":{start:{line:1980,column:8},end:{line:1980,column:47}},"1032":{start:{line:1982,column:8},end:{line:1982,column:40}},"1033":{start:{line:1985,column:6},end:{line:1987,column:7}},"1034":{start:{line:1986,column:8},end:{line:1986,column:20}},"1035":{start:{line:1989,column:6},end:{line:1989,column:15}},"1036":{start:{line:1994,column:4},end:{line:1994,column:22}},"1037":{start:{line:1995,column:16},end:{line:1995,column:25}},"1038":{start:{line:1996,column:17},end:{line:1996,column:26}},"1039":{start:{line:1997,column:21},end:{line:1997,column:48}},"1040":{start:{line:1999,column:4},end:{line:2002,column:5}},"1041":{start:{line:2000,column:6},end:{line:2000,column:66}},"1042":{start:{line:2001,column:6},end:{line:2001,column:39}},"1043":{start:{line:2004,column:25},end:{line:2004,column:111}},"1044":{start:{line:2005,column:27},end:{line:2005,column:115}},"1045":{start:{line:2006,column:19},end:{line:2006,column:45}},"1046":{start:{line:2007,column:18},end:{line:2012,column:6}},"1047":{start:{line:2013,column:4},end:{line:2013,column:33}},"1048":{start:{line:2014,column:25},end:{line:2014,column:81}},"1049":{start:{line:2015,column:24},end:{line:2015,column:68}},"1050":{start:{line:2016,column:13},end:{line:2016,column:91}},"1051":{start:{line:2018,column:4},end:{line:2020,column:5}},"1052":{start:{line:2019,column:6},end:{line:2019,column:88}},"1053":{start:{line:2022,column:4},end:{line:2046,column:107}},"1054":{start:{line:2023,column:6},end:{line:2025,column:7}},"1055":{start:{line:2024,column:8},end:{line:2024,column:18}},"1056":{start:{line:2027,column:6},end:{line:2027,column:18}},"1057":{start:{line:2029,column:6},end:{line:2042,column:7}},"1058":{start:{line:2030,column:8},end:{line:2030,column:67}},"1059":{start:{line:2030,column:43},end:{line:2030,column:65}},"1060":{start:{line:2031,column:8},end:{line:2041,column:11}},"1061":{start:{line:2032,column:10},end:{line:2034,column:11}},"1062":{start:{line:2033,column:12},end:{line:2033,column:33}},"1063":{start:{line:2036,column:10},end:{line:2040,column:12}},"1064":{start:{line:2044,column:20},end:{line:2044,column:43}},"1065":{start:{line:2045,column:6},end:{line:2045,column:58}},"1066":{start:{line:2045,column:35},end:{line:2045,column:56}},"1067":{start:{line:2046,column:23},end:{line:2046,column:105}},"1068":{start:{line:2046,column:45},end:{line:2046,column:104}},"1069":{start:{line:2050,column:4},end:{line:2050,column:23}},"1070":{start:{line:2051,column:19},end:{line:2051,column:30}},"1071":{start:{line:2052,column:16},end:{line:2052,column:17}},"1072":{start:{line:2053,column:18},end:{line:2053,column:20}},"1073":{start:{line:2054,column:21},end:{line:2054,column:25}},"1074":{start:{line:2055,column:22},end:{line:2055,column:26}},"1075":{start:{line:2056,column:23},end:{line:2056,column:25}},"1076":{start:{line:2057,column:23},end:{line:2057,column:25}},"1077":{start:{line:2058,column:22},end:{line:2058,column:24}},"1078":{start:{line:2059,column:22},end:{line:2059,column:24}},"1079":{start:{line:2060,column:23},end:{line:2060,column:25}},"1080":{start:{line:2062,column:4},end:{line:2235,column:5}},"1081":{start:{line:2062,column:17},end:{line:2062,column:18}},"1082":{start:{line:2063,column:20},end:{line:2063,column:31}},"1083":{start:{line:2065,column:6},end:{line:2153,column:7}},"1084":{start:{line:2066,column:8},end:{line:2150,column:9}},"1085":{start:{line:2067,column:24},end:{line:2067,column:43}},"1086":{start:{line:2069,column:10},end:{line:2071,column:11}},"1087":{start:{line:2070,column:12},end:{line:2070,column:21}},"1088":{start:{line:2073,column:10},end:{line:2079,column:11}},"1089":{start:{line:2074,column:12},end:{line:2074,column:57}},"1090":{start:{line:2075,column:12},end:{line:2075,column:53}},"1091":{start:{line:2076,column:12},end:{line:2076,column:56}},"1092":{start:{line:2077,column:12},end:{line:2077,column:23}},"1093":{start:{line:2078,column:12},end:{line:2078,column:21}},"1094":{start:{line:2081,column:10},end:{line:2116,column:11}},"1095":{start:{line:2082,column:12},end:{line:2082,column:32}},"1096":{start:{line:2083,column:34},end:{line:2083,column:36}},"1097":{start:{line:2085,column:12},end:{line:2110,column:13}},"1098":{start:{line:2086,column:14},end:{line:2109,column:15}},"1099":{start:{line:2087,column:31},end:{line:2087,column:68}},"1100":{start:{line:2089,column:16},end:{line:2091,column:17}},"1101":{start:{line:2090,column:18},end:{line:2090,column:52}},"1102":{start:{line:2093,column:16},end:{line:2093,column:43}},"1103":{start:{line:2094,column:16},end:{line:2094,column:69}},"1104":{start:{line:2095,column:16},end:{line:2095,column:27}},"1105":{start:{line:2097,column:34},end:{line:2097,column:62}},"1106":{start:{line:2098,column:31},end:{line:2098,column:79}},"1107":{start:{line:2100,column:16},end:{line:2108,column:17}},"1108":{start:{line:2101,column:18},end:{line:2103,column:19}},"1109":{start:{line:2102,column:20},end:{line:2102,column:54}},"1110":{start:{line:2105,column:18},end:{line:2105,column:152}},"1111":{start:{line:2106,column:18},end:{line:2106,column:45}},"1112":{start:{line:2107,column:18},end:{line:2107,column:29}},"1113":{start:{line:2112,column:12},end:{line:2112,column:52}},"1114":{start:{line:2113,column:12},end:{line:2113,column:46}},"1115":{start:{line:2114,column:12},end:{line:2114,column:23}},"1116":{start:{line:2115,column:12},end:{line:2115,column:21}},"1117":{start:{line:2118,column:10},end:{line:2149,column:11}},"1118":{start:{line:2119,column:12},end:{line:2130,column:13}},"1119":{start:{line:2120,column:14},end:{line:2129,column:15}},"1120":{start:{line:2121,column:16},end:{line:2121,column:74}},"1121":{start:{line:2122,column:16},end:{line:2122,column:72}},"1122":{start:{line:2123,column:16},end:{line:2123,column:27}},"1123":{start:{line:2125,column:16},end:{line:2125,column:35}},"1124":{start:{line:2126,column:16},end:{line:2126,column:59}},"1125":{start:{line:2127,column:16},end:{line:2127,column:35}},"1126":{start:{line:2128,column:16},end:{line:2128,column:27}},"1127":{start:{line:2132,column:12},end:{line:2136,column:13}},"1128":{start:{line:2133,column:14},end:{line:2133,column:72}},"1129":{start:{line:2134,column:14},end:{line:2134,column:70}},"1130":{start:{line:2135,column:14},end:{line:2135,column:25}},"1131":{start:{line:2138,column:12},end:{line:2142,column:13}},"1132":{start:{line:2139,column:14},end:{line:2139,column:72}},"1133":{start:{line:2140,column:14},end:{line:2140,column:70}},"1134":{start:{line:2141,column:14},end:{line:2141,column:25}},"1135":{start:{line:2144,column:12},end:{line:2148,column:13}},"1136":{start:{line:2145,column:14},end:{line:2145,column:72}},"1137":{start:{line:2146,column:14},end:{line:2146,column:70}},"1138":{start:{line:2147,column:14},end:{line:2147,column:25}},"1139":{start:{line:2152,column:8},end:{line:2152,column:26}},"1140":{start:{line:2155,column:6},end:{line:2169,column:7}},"1141":{start:{line:2156,column:8},end:{line:2158,column:9}},"1142":{start:{line:2157,column:10},end:{line:2157,column:23}},"1143":{start:{line:2160,column:8},end:{line:2168,column:9}},"1144":{start:{line:2161,column:24},end:{line:2161,column:45}},"1145":{start:{line:2163,column:10},end:{line:2167,column:11}},"1146":{start:{line:2164,column:12},end:{line:2164,column:43}},"1147":{start:{line:2165,column:12},end:{line:2165,column:31}},"1148":{start:{line:2166,column:12},end:{line:2166,column:23}},"1149":{start:{line:2171,column:6},end:{line:2209,column:7}},"1150":{start:{line:2172,column:25},end:{line:2172,column:27}},"1151":{start:{line:2173,column:24},end:{line:2173,column:100}},"1152":{start:{line:2175,column:8},end:{line:2183,column:9}},"1153":{start:{line:2176,column:27},end:{line:2176,column:29}},"1154":{start:{line:2177,column:10},end:{line:2181,column:13}},"1155":{start:{line:2178,column:12},end:{line:2180,column:13}},"1156":{start:{line:2179,column:14},end:{line:2179,column:43}},"1157":{start:{line:2182,column:10},end:{line:2182,column:34}},"1158":{start:{line:2185,column:8},end:{line:2206,column:9}},"1159":{start:{line:2186,column:24},end:{line:2186,column:43}},"1160":{start:{line:2187,column:32},end:{line:2187,column:34}},"1161":{start:{line:2188,column:10},end:{line:2195,column:13}},"1162":{start:{line:2189,column:12},end:{line:2194,column:13}},"1163":{start:{line:2190,column:35},end:{line:2190,column:64}},"1164":{start:{line:2191,column:14},end:{line:2191,column:81}},"1165":{start:{line:2192,column:14},end:{line:2192,column:62}},"1166":{start:{line:2193,column:14},end:{line:2193,column:25}},"1167":{start:{line:2197,column:10},end:{line:2199,column:11}},"1168":{start:{line:2198,column:12},end:{line:2198,column:62}},"1169":{start:{line:2201,column:10},end:{line:2205,column:11}},"1170":{start:{line:2202,column:12},end:{line:2202,column:60}},"1171":{start:{line:2203,column:12},end:{line:2203,column:38}},"1172":{start:{line:2204,column:12},end:{line:2204,column:23}},"1173":{start:{line:2208,column:8},end:{line:2208,column:91}},"1174":{start:{line:2211,column:6},end:{line:2215,column:7}},"1175":{start:{line:2212,column:8},end:{line:2212,column:41}},"1176":{start:{line:2213,column:8},end:{line:2213,column:34}},"1177":{start:{line:2214,column:8},end:{line:2214,column:19}},"1178":{start:{line:2217,column:6},end:{line:2221,column:7}},"1179":{start:{line:2218,column:8},end:{line:2218,column:41}},"1180":{start:{line:2219,column:8},end:{line:2219,column:33}},"1181":{start:{line:2220,column:8},end:{line:2220,column:19}},"1182":{start:{line:2223,column:6},end:{line:2234,column:7}},"1183":{start:{line:2224,column:21},end:{line:2224,column:32}},"1184":{start:{line:2225,column:21},end:{line:2225,column:38}},"1185":{start:{line:2226,column:24},end:{line:2231,column:17}},"1186":{start:{line:2227,column:30},end:{line:2227,column:62}},"1187":{start:{line:2228,column:24},end:{line:2228,column:55}},"1188":{start:{line:2229,column:10},end:{line:2229,column:21}},"1189":{start:{line:2230,column:10},end:{line:2230,column:23}},"1190":{start:{line:2232,column:8},end:{line:2232,column:29}},"1191":{start:{line:2233,column:8},end:{line:2233,column:92}},"1192":{start:{line:2237,column:4},end:{line:2243,column:5}},"1193":{start:{line:2238,column:6},end:{line:2242,column:9}},"1194":{start:{line:2239,column:8},end:{line:2241,column:9}},"1195":{start:{line:2240,column:10},end:{line:2240,column:20}},"1196":{start:{line:2245,column:26},end:{line:2245,column:159}},"1197":{start:{line:2246,column:15},end:{line:2246,column:83}},"1198":{start:{line:2247,column:4},end:{line:2272,column:7}},"1199":{start:{line:2248,column:6},end:{line:2250,column:7}},"1200":{start:{line:2249,column:8},end:{line:2249,column:17}},"1201":{start:{line:2252,column:22},end:{line:2252,column:98}},"1202":{start:{line:2252,column:38},end:{line:2252,column:97}},"1203":{start:{line:2253,column:6},end:{line:2270,column:9}},"1204":{start:{line:2254,column:8},end:{line:2256,column:9}},"1205":{start:{line:2255,column:10},end:{line:2255,column:33}},"1206":{start:{line:2258,column:8},end:{line:2265,column:9}},"1207":{start:{line:2259,column:10},end:{line:2259,column:31}},"1208":{start:{line:2261,column:10},end:{line:2264,column:11}},"1209":{start:{line:2262,column:12},end:{line:2262,column:47}},"1210":{start:{line:2263,column:12},end:{line:2263,column:31}},"1211":{start:{line:2267,column:8},end:{line:2269,column:9}},"1212":{start:{line:2268,column:10},end:{line:2268,column:64}},"1213":{start:{line:2271,column:6},end:{line:2271,column:21}},"1214":{start:{line:2279,column:4},end:{line:2279,column:35}},"1215":{start:{line:2280,column:4},end:{line:2280,column:47}},"1216":{start:{line:2281,column:21},end:{line:2289,column:6}},"1217":{start:{line:2282,column:6},end:{line:2288,column:66}},"1218":{start:{line:2283,column:8},end:{line:2285,column:9}},"1219":{start:{line:2284,column:10},end:{line:2284,column:35}},"1220":{start:{line:2287,column:8},end:{line:2287,column:18}},"1221":{start:{line:2288,column:20},end:{line:2288,column:64}},"1222":{start:{line:2290,column:4},end:{line:2290,column:42}},"1223":{start:{line:2291,column:4},end:{line:2307,column:7}},"1224":{start:{line:2292,column:6},end:{line:2301,column:9}},"1225":{start:{line:2293,column:8},end:{line:2293,column:58}},"1226":{start:{line:2294,column:8},end:{line:2294,column:45}},"1227":{start:{line:2295,column:8},end:{line:2295,column:51}},"1228":{start:{line:2296,column:8},end:{line:2296,column:48}},"1229":{start:{line:2297,column:8},end:{line:2297,column:53}},"1230":{start:{line:2298,column:8},end:{line:2298,column:58}},"1231":{start:{line:2299,column:8},end:{line:2299,column:50}},"1232":{start:{line:2300,column:8},end:{line:2300,column:21}},"1233":{start:{line:2303,column:6},end:{line:2303,column:53}},"1234":{start:{line:2306,column:6},end:{line:2306,column:27}},"1235":{start:{line:2311,column:4},end:{line:2313,column:9}},"1236":{start:{line:2311,column:42},end:{line:2313,column:7}},"1237":{start:{line:2312,column:6},end:{line:2312,column:107}},"1238":{start:{line:2317,column:4},end:{line:2317,column:127}},"1239":{start:{line:2321,column:20},end:{line:2324,column:7}},"1240":{start:{line:2321,column:38},end:{line:2324,column:5}},"1241":{start:{line:2325,column:4},end:{line:2325,column:84}},"1242":{start:{line:2325,column:41},end:{line:2325,column:82}},"1243":{start:{line:2329,column:15},end:{line:2329,column:72}},"1244":{start:{line:2330,column:4},end:{line:2332,column:7}},"1245":{start:{line:2336,column:4},end:{line:2336,column:29}},"1246":{start:{line:2341,column:4},end:{line:2341,column:61}},"1247":{start:{line:2345,column:4},end:{line:2356,column:7}},"1248":{start:{line:2346,column:35},end:{line:2346,column:37}},"1249":{start:{line:2347,column:6},end:{line:2355,column:9}},"1250":{start:{line:2348,column:8},end:{line:2348,column:35}},"1251":{start:{line:2349,column:8},end:{line:2351,column:11}},"1252":{start:{line:2350,column:10},end:{line:2350,column:49}},"1253":{start:{line:2352,column:8},end:{line:2352,column:40}},"1254":{start:{line:2353,column:8},end:{line:2353,column:38}},"1255":{start:{line:2354,column:8},end:{line:2354,column:44}},"1256":{start:{line:2360,column:4},end:{line:2360,column:91}},"1257":{start:{line:2361,column:4},end:{line:2361,column:39}},"1258":{start:{line:2365,column:19},end:{line:2365,column:54}},"1259":{start:{line:2366,column:4},end:{line:2366,column:54}},"1260":{start:{line:2367,column:4},end:{line:2367,column:91}},"1261":{start:{line:2368,column:4},end:{line:2368,column:18}},"1262":{start:{line:2372,column:17},end:{line:2372,column:73}},"1263":{start:{line:2373,column:29},end:{line:2373,column:75}},"1264":{start:{line:2374,column:29},end:{line:2378,column:5}},"1265":{start:{line:2379,column:31},end:{line:2379,column:195}},"1266":{start:{line:2379,column:86},end:{line:2379,column:133}},"1267":{start:{line:2379,column:174},end:{line:2379,column:194}},"1268":{start:{line:2380,column:15},end:{line:2380,column:93}},"1269":{start:{line:2381,column:4},end:{line:2389,column:7}},"1270":{start:{line:2382,column:6},end:{line:2388,column:7}},"1271":{start:{line:2383,column:13},end:{line:2388,column:7}},"1272":{start:{line:2385,column:8},end:{line:2385,column:140}},"1273":{start:{line:2387,column:8},end:{line:2387,column:20}},"1274":{start:{line:2394,column:0},end:{line:2394,column:56}},"1275":{start:{line:2397,column:2},end:{line:2399,column:3}},"1276":{start:{line:2398,column:4},end:{line:2398,column:107}},"1277":{start:{line:2401,column:2},end:{line:2403,column:3}},"1278":{start:{line:2402,column:4},end:{line:2402,column:29}},"1279":{start:{line:2405,column:17},end:{line:2418,column:4}},"1280":{start:{line:2406,column:21},end:{line:2406,column:23}},"1281":{start:{line:2408,column:4},end:{line:2415,column:5}},"1282":{start:{line:2408,column:17},end:{line:2408,column:18}},"1283":{start:{line:2409,column:17},end:{line:2409,column:22}},"1284":{start:{line:2411,column:6},end:{line:2414,column:7}},"1285":{start:{line:2412,column:8},end:{line:2412,column:23}},"1286":{start:{line:2413,column:8},end:{line:2413,column:14}},"1287":{start:{line:2417,column:4},end:{line:2417,column:32}},"1288":{start:{line:2420,column:2},end:{line:2422,column:3}},"1289":{start:{line:2421,column:4},end:{line:2421,column:134}},"1290":{start:{line:2424,column:17},end:{line:2428,column:15}},"1291":{start:{line:2425,column:4},end:{line:2425,column:81}},"1292":{start:{line:2427,column:4},end:{line:2427,column:40}},"1293":{start:{line:2429,column:2},end:{line:2429,column:23}},"1294":{start:{line:2433,column:2},end:{line:2435,column:3}},"1295":{start:{line:2434,column:4},end:{line:2434,column:18}},"1296":{start:{line:2438,column:2},end:{line:2441,column:30}},"1297":{start:{line:2445,column:2},end:{line:2451,column:3}},"1298":{start:{line:2447,column:4},end:{line:2447,column:49}},"1299":{start:{line:2448,column:9},end:{line:2451,column:3}},"1300":{start:{line:2450,column:4},end:{line:2450,column:63}},"1301":{start:{line:2454,column:2},end:{line:2454,column:32}},"1302":{start:{line:2458,column:2},end:{line:2460,column:3}},"1303":{start:{line:2459,column:4},end:{line:2459,column:17}},"1304":{start:{line:2462,column:18},end:{line:2462,column:43}},"1305":{start:{line:2463,column:2},end:{line:2463,column:19}},"1306":{start:{line:2467,column:2},end:{line:2469,column:3}},"1307":{start:{line:2468,column:4},end:{line:2468,column:16}},"1308":{start:{line:2471,column:29},end:{line:2471,column:64}},"1309":{start:{line:2473,column:2},end:{line:2475,column:3}},"1310":{start:{line:2474,column:4},end:{line:2474,column:30}},"1311":{start:{line:2477,column:2},end:{line:2481,column:3}},"1312":{start:{line:2477,column:15},end:{line:2477,column:16}},"1313":{start:{line:2477,column:27},end:{line:2477,column:40}},"1314":{start:{line:2478,column:4},end:{line:2480,column:5}},"1315":{start:{line:2479,column:6},end:{line:2479,column:19}},"1316":{start:{line:2483,column:2},end:{line:2483,column:14}},"1317":{start:{line:2487,column:2},end:{line:2489,column:5}},"1318":{start:{line:2488,column:4},end:{line:2488,column:43}},"1319":{start:{line:2493,column:2},end:{line:2503,column:14}},"1320":{start:{line:2494,column:18},end:{line:2494,column:46}},"1321":{start:{line:2496,column:4},end:{line:2499,column:5}},"1322":{start:{line:2498,column:6},end:{line:2498,column:15}},"1323":{start:{line:2502,column:4},end:{line:2502,column:39}},"1324":{start:{line:2507,column:19},end:{line:2507,column:39}},"1325":{start:{line:2508,column:18},end:{line:2508,column:35}},"1326":{start:{line:2510,column:2},end:{line:2515,column:3}},"1327":{start:{line:2512,column:19},end:{line:2512,column:45}},"1328":{start:{line:2513,column:22},end:{line:2513,column:32}},"1329":{start:{line:2514,column:4},end:{line:2514,column:71}},"1330":{start:{line:2518,column:19},end:{line:2518,column:36}},"1331":{start:{line:2519,column:18},end:{line:2519,column:35}},"1332":{start:{line:2521,column:2},end:{line:2525,column:3}},"1333":{start:{line:2522,column:19},end:{line:2522,column:45}},"1334":{start:{line:2523,column:22},end:{line:2523,column:32}},"1335":{start:{line:2524,column:4},end:{line:2524,column:71}},"1336":{start:{line:2528,column:2},end:{line:2528,column:166}},"1337":{start:{line:2531,column:20},end:{line:2536,column:1}},"1338":{start:{line:2533,column:4},end:{line:2533,column:86}},"1339":{start:{line:2537,column:15},end:{line:2537,column:37}},"1340":{start:{line:2538,column:0},end:{line:2538,column:27}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:20,column:9},end:{line:20,column:31}},loc:{start:{line:20,column:37},end:{line:20,column:95}},line:20},"1":{name:"ownKeys",decl:{start:{line:22,column:9},end:{line:22,column:16}},loc:{start:{line:22,column:41},end:{line:22,column:345}},line:22},"2":{name:"(anonymous_2)",decl:{start:{line:22,column:210},end:{line:22,column:211}},loc:{start:{line:22,column:225},end:{line:22,column:292}},line:22},"3":{name:"_objectSpread",decl:{start:{line:24,column:9},end:{line:24,column:22}},loc:{start:{line:24,column:31},end:{line:24,column:534}},line:24},"4":{name:"(anonymous_4)",decl:{start:{line:24,column:184},end:{line:24,column:185}},loc:{start:{line:24,column:199},end:{line:24,column:245}},line:24},"5":{name:"(anonymous_5)",decl:{start:{line:24,column:411},end:{line:24,column:412}},loc:{start:{line:24,column:426},end:{line:24,column:511}},line:24},"6":{name:"_defineProperty",decl:{start:{line:26,column:9},end:{line:26,column:24}},loc:{start:{line:26,column:42},end:{line:26,column:209}},line:26},"7":{name:"(anonymous_7)",decl:{start:{line:37,column:14},end:{line:37,column:15}},loc:{start:{line:37,column:33},end:{line:41,column:1}},line:37},"8":{name:"(anonymous_8)",decl:{start:{line:43,column:32},end:{line:43,column:33}},loc:{start:{line:43,column:40},end:{line:85,column:1}},line:43},"9":{name:"(anonymous_9)",decl:{start:{line:108,column:24},end:{line:108,column:25}},loc:{start:{line:108,column:33},end:{line:120,column:1}},line:108},"10":{name:"(anonymous_10)",decl:{start:{line:122,column:23},end:{line:122,column:24}},loc:{start:{line:122,column:32},end:{line:128,column:1}},line:122},"11":{name:"(anonymous_11)",decl:{start:{line:168,column:22},end:{line:168,column:23}},loc:{start:{line:168,column:32},end:{line:196,column:1}},line:168},"12":{name:"(anonymous_12)",decl:{start:{line:198,column:25},end:{line:198,column:26}},loc:{start:{line:198,column:35},end:{line:227,column:1}},line:198},"13":{name:"(anonymous_13)",decl:{start:{line:229,column:24},end:{line:229,column:25}},loc:{start:{line:229,column:34},end:{line:260,column:1}},line:229},"14":{name:"(anonymous_14)",decl:{start:{line:230,column:30},end:{line:230,column:31}},loc:{start:{line:230,column:43},end:{line:258,column:3}},line:230},"15":{name:"(anonymous_15)",decl:{start:{line:262,column:38},end:{line:262,column:39}},loc:{start:{line:262,column:51},end:{line:270,column:1}},line:262},"16":{name:"(anonymous_16)",decl:{start:{line:263,column:34},end:{line:263,column:35}},loc:{start:{line:263,column:51},end:{line:269,column:3}},line:263},"17":{name:"(anonymous_17)",decl:{start:{line:272,column:26},end:{line:272,column:27}},loc:{start:{line:272,column:39},end:{line:281,column:1}},line:272},"18":{name:"(anonymous_18)",decl:{start:{line:283,column:32},end:{line:283,column:33}},loc:{start:{line:283,column:45},end:{line:297,column:1}},line:283},"19":{name:"(anonymous_19)",decl:{start:{line:299,column:21},end:{line:299,column:22}},loc:{start:{line:299,column:31},end:{line:311,column:1}},line:299},"20":{name:"(anonymous_20)",decl:{start:{line:314,column:28},end:{line:314,column:29}},loc:{start:{line:314,column:38},end:{line:326,column:1}},line:314},"21":{name:"(anonymous_21)",decl:{start:{line:318,column:39},end:{line:318,column:40}},loc:{start:{line:318,column:48},end:{line:322,column:5}},line:318},"22":{name:"(anonymous_22)",decl:{start:{line:328,column:25},end:{line:328,column:26}},loc:{start:{line:333,column:6},end:{line:844,column:1}},line:333},"23":{name:"(anonymous_23)",decl:{start:{line:409,column:25},end:{line:409,column:26}},loc:{start:{line:409,column:37},end:{line:422,column:7}},line:409},"24":{name:"(anonymous_24)",decl:{start:{line:488,column:29},end:{line:488,column:30}},loc:{start:{line:488,column:54},end:{line:495,column:7}},line:488},"25":{name:"(anonymous_25)",decl:{start:{line:505,column:29},end:{line:505,column:30}},loc:{start:{line:505,column:51},end:{line:542,column:7}},line:505},"26":{name:"(anonymous_26)",decl:{start:{line:521,column:30},end:{line:521,column:31}},loc:{start:{line:521,column:55},end:{line:526,column:13}},line:521},"27":{name:"(anonymous_27)",decl:{start:{line:545,column:65},end:{line:545,column:66}},loc:{start:{line:545,column:72},end:{line:545,column:75}},line:545},"28":{name:"(anonymous_28)",decl:{start:{line:549,column:66},end:{line:549,column:67}},loc:{start:{line:549,column:73},end:{line:549,column:76}},line:549},"29":{name:"(anonymous_29)",decl:{start:{line:713,column:26},end:{line:713,column:27}},loc:{start:{line:713,column:35},end:{line:727,column:7}},line:713},"30":{name:"(anonymous_30)",decl:{start:{line:800,column:50},end:{line:800,column:51}},loc:{start:{line:800,column:57},end:{line:831,column:5}},line:800},"31":{name:"(anonymous_31)",decl:{start:{line:848,column:2},end:{line:848,column:3}},loc:{start:{line:852,column:5},end:{line:867,column:3}},line:852},"32":{name:"(anonymous_32)",decl:{start:{line:862,column:21},end:{line:862,column:22}},loc:{start:{line:862,column:27},end:{line:862,column:29}},line:862},"33":{name:"(anonymous_33)",decl:{start:{line:869,column:2},end:{line:869,column:3}},loc:{start:{line:869,column:18},end:{line:871,column:3}},line:869},"34":{name:"(anonymous_34)",decl:{start:{line:874,column:2},end:{line:874,column:3}},loc:{start:{line:874,column:49},end:{line:880,column:3}},line:874},"35":{name:"(anonymous_35)",decl:{start:{line:882,column:2},end:{line:882,column:3}},loc:{start:{line:882,column:19},end:{line:894,column:3}},line:882},"36":{name:"(anonymous_36)",decl:{start:{line:896,column:2},end:{line:896,column:3}},loc:{start:{line:896,column:26},end:{line:912,column:3}},line:896},"37":{name:"(anonymous_37)",decl:{start:{line:902,column:45},end:{line:902,column:46}},loc:{start:{line:902,column:53},end:{line:908,column:7}},line:902},"38":{name:"(anonymous_38)",decl:{start:{line:914,column:2},end:{line:914,column:3}},loc:{start:{line:914,column:24},end:{line:922,column:3}},line:914},"39":{name:"(anonymous_39)",decl:{start:{line:918,column:16},end:{line:918,column:17}},loc:{start:{line:918,column:25},end:{line:920,column:7}},line:918},"40":{name:"(anonymous_40)",decl:{start:{line:924,column:2},end:{line:924,column:3}},loc:{start:{line:924,column:44},end:{line:932,column:3}},line:924},"41":{name:"(anonymous_41)",decl:{start:{line:926,column:159},end:{line:926,column:160}},loc:{start:{line:926,column:168},end:{line:931,column:5}},line:926},"42":{name:"(anonymous_42)",decl:{start:{line:934,column:2},end:{line:934,column:3}},loc:{start:{line:934,column:26},end:{line:936,column:3}},line:934},"43":{name:"(anonymous_43)",decl:{start:{line:935,column:117},end:{line:935,column:118}},loc:{start:{line:935,column:122},end:{line:935,column:130}},line:935},"44":{name:"(anonymous_44)",decl:{start:{line:938,column:2},end:{line:938,column:3}},loc:{start:{line:938,column:50},end:{line:945,column:3}},line:938},"45":{name:"(anonymous_45)",decl:{start:{line:939,column:59},end:{line:939,column:60}},loc:{start:{line:939,column:70},end:{line:942,column:5}},line:939},"46":{name:"(anonymous_46)",decl:{start:{line:947,column:2},end:{line:947,column:3}},loc:{start:{line:947,column:100},end:{line:1005,column:3}},line:947},"47":{name:"(anonymous_47)",decl:{start:{line:965,column:42},end:{line:965,column:43}},loc:{start:{line:965,column:50},end:{line:991,column:5}},line:965},"48":{name:"(anonymous_48)",decl:{start:{line:980,column:35},end:{line:980,column:36}},loc:{start:{line:980,column:42},end:{line:984,column:9}},line:980},"49":{name:"(anonymous_49)",decl:{start:{line:992,column:52},end:{line:992,column:53}},loc:{start:{line:992,column:63},end:{line:1002,column:5}},line:992},"50":{name:"(anonymous_50)",decl:{start:{line:1007,column:2},end:{line:1007,column:3}},loc:{start:{line:1007,column:45},end:{line:1028,column:3}},line:1007},"51":{name:"(anonymous_51)",decl:{start:{line:1009,column:54},end:{line:1009,column:55}},loc:{start:{line:1009,column:65},end:{line:1017,column:5}},line:1009},"52":{name:"(anonymous_52)",decl:{start:{line:1017,column:13},end:{line:1017,column:14}},loc:{start:{line:1017,column:20},end:{line:1023,column:5}},line:1017},"53":{name:"(anonymous_53)",decl:{start:{line:1031,column:2},end:{line:1031,column:3}},loc:{start:{line:1031,column:45},end:{line:1112,column:3}},line:1031},"54":{name:"(anonymous_54)",decl:{start:{line:1067,column:32},end:{line:1067,column:33}},loc:{start:{line:1067,column:45},end:{line:1091,column:5}},line:1067},"55":{name:"(anonymous_55)",decl:{start:{line:1094,column:37},end:{line:1094,column:38}},loc:{start:{line:1094,column:48},end:{line:1111,column:5}},line:1094},"56":{name:"(anonymous_56)",decl:{start:{line:1104,column:36},end:{line:1104,column:37}},loc:{start:{line:1104,column:42},end:{line:1110,column:7}},line:1104},"57":{name:"(anonymous_57)",decl:{start:{line:1105,column:38},end:{line:1105,column:39}},loc:{start:{line:1105,column:51},end:{line:1109,column:9}},line:1105},"58":{name:"(anonymous_58)",decl:{start:{line:1114,column:2},end:{line:1114,column:3}},loc:{start:{line:1114,column:47},end:{line:1125,column:3}},line:1114},"59":{name:"(anonymous_59)",decl:{start:{line:1118,column:38},end:{line:1118,column:39}},loc:{start:{line:1118,column:49},end:{line:1124,column:5}},line:1118},"60":{name:"(anonymous_60)",decl:{start:{line:1121,column:9},end:{line:1121,column:10}},loc:{start:{line:1121,column:14},end:{line:1121,column:27}},line:1121},"61":{name:"(anonymous_61)",decl:{start:{line:1122,column:59},end:{line:1122,column:60}},loc:{start:{line:1122,column:67},end:{line:1122,column:95}},line:1122},"62":{name:"(anonymous_62)",decl:{start:{line:1122,column:101},end:{line:1122,column:102}},loc:{start:{line:1122,column:114},end:{line:1122,column:186}},line:1122},"63":{name:"(anonymous_63)",decl:{start:{line:1127,column:2},end:{line:1127,column:3}},loc:{start:{line:1127,column:56},end:{line:1177,column:3}},line:1127},"64":{name:"(anonymous_64)",decl:{start:{line:1131,column:53},end:{line:1131,column:54}},loc:{start:{line:1131,column:64},end:{line:1174,column:5}},line:1131},"65":{name:"(anonymous_65)",decl:{start:{line:1179,column:2},end:{line:1179,column:3}},loc:{start:{line:1179,column:55},end:{line:1188,column:3}},line:1179},"66":{name:"(anonymous_66)",decl:{start:{line:1180,column:57},end:{line:1180,column:58}},loc:{start:{line:1180,column:68},end:{line:1187,column:5}},line:1180},"67":{name:"(anonymous_67)",decl:{start:{line:1192,column:2},end:{line:1192,column:3}},loc:{start:{line:1192,column:31},end:{line:1205,column:3}},line:1192},"68":{name:"(anonymous_68)",decl:{start:{line:1200,column:43},end:{line:1200,column:44}},loc:{start:{line:1200,column:48},end:{line:1200,column:92}},line:1200},"69":{name:"(anonymous_69)",decl:{start:{line:1200,column:99},end:{line:1200,column:100}},loc:{start:{line:1200,column:105},end:{line:1200,column:137}},line:1200},"70":{name:"(anonymous_70)",decl:{start:{line:1208,column:2},end:{line:1208,column:3}},loc:{start:{line:1208,column:27},end:{line:1235,column:3}},line:1208},"71":{name:"(anonymous_71)",decl:{start:{line:1212,column:50},end:{line:1212,column:51}},loc:{start:{line:1212,column:61},end:{line:1232,column:5}},line:1212},"72":{name:"(anonymous_72)",decl:{start:{line:1215,column:37},end:{line:1215,column:38}},loc:{start:{line:1215,column:55},end:{line:1217,column:9}},line:1215},"73":{name:"(anonymous_73)",decl:{start:{line:1218,column:170},end:{line:1218,column:171}},loc:{start:{line:1218,column:180},end:{line:1218,column:196}},line:1218},"74":{name:"(anonymous_74)",decl:{start:{line:1219,column:36},end:{line:1219,column:37}},loc:{start:{line:1219,column:50},end:{line:1224,column:9}},line:1219},"75":{name:"(anonymous_75)",decl:{start:{line:1225,column:19},end:{line:1225,column:20}},loc:{start:{line:1225,column:25},end:{line:1225,column:57}},line:1225},"76":{name:"(anonymous_76)",decl:{start:{line:1232,column:12},end:{line:1232,column:13}},loc:{start:{line:1232,column:18},end:{line:1234,column:5}},line:1232},"77":{name:"(anonymous_77)",decl:{start:{line:1248,column:2},end:{line:1248,column:3}},loc:{start:{line:1248,column:52},end:{line:1276,column:3}},line:1248},"78":{name:"(anonymous_78)",decl:{start:{line:1250,column:35},end:{line:1250,column:36}},loc:{start:{line:1250,column:56},end:{line:1259,column:5}},line:1250},"79":{name:"(anonymous_79)",decl:{start:{line:1261,column:35},end:{line:1261,column:36}},loc:{start:{line:1261,column:50},end:{line:1263,column:5}},line:1261},"80":{name:"(anonymous_80)",decl:{start:{line:1264,column:43},end:{line:1264,column:44}},loc:{start:{line:1264,column:54},end:{line:1273,column:5}},line:1264},"81":{name:"(anonymous_81)",decl:{start:{line:1281,column:2},end:{line:1281,column:3}},loc:{start:{line:1281,column:24},end:{line:1287,column:3}},line:1281},"82":{name:"(anonymous_82)",decl:{start:{line:1282,column:48},end:{line:1282,column:49}},loc:{start:{line:1282,column:59},end:{line:1286,column:5}},line:1282},"83":{name:"(anonymous_83)",decl:{start:{line:1283,column:58},end:{line:1283,column:59}},loc:{start:{line:1283,column:65},end:{line:1285,column:21}},line:1283},"84":{name:"(anonymous_84)",decl:{start:{line:1292,column:2},end:{line:1292,column:3}},loc:{start:{line:1292,column:28},end:{line:1303,column:3}},line:1292},"85":{name:"(anonymous_85)",decl:{start:{line:1296,column:12},end:{line:1296,column:13}},loc:{start:{line:1296,column:22},end:{line:1302,column:5}},line:1296},"86":{name:"(anonymous_86)",decl:{start:{line:1306,column:2},end:{line:1306,column:3}},loc:{start:{line:1306,column:70},end:{line:1458,column:3}},line:1306},"87":{name:"(anonymous_87)",decl:{start:{line:1314,column:32},end:{line:1314,column:33}},loc:{start:{line:1314,column:45},end:{line:1406,column:5}},line:1314},"88":{name:"(anonymous_88)",decl:{start:{line:1408,column:42},end:{line:1408,column:43}},loc:{start:{line:1408,column:58},end:{line:1419,column:5}},line:1408},"89":{name:"(anonymous_89)",decl:{start:{line:1420,column:56},end:{line:1420,column:57}},loc:{start:{line:1420,column:63},end:{line:1425,column:5}},line:1420},"90":{name:"(anonymous_90)",decl:{start:{line:1426,column:44},end:{line:1426,column:45}},loc:{start:{line:1426,column:60},end:{line:1426,column:80}},line:1426},"91":{name:"(anonymous_91)",decl:{start:{line:1430,column:105},end:{line:1430,column:106}},loc:{start:{line:1430,column:112},end:{line:1432,column:5}},line:1430},"92":{name:"(anonymous_92)",decl:{start:{line:1432,column:14},end:{line:1432,column:15}},loc:{start:{line:1432,column:23},end:{line:1451,column:5}},line:1432},"93":{name:"(anonymous_93)",decl:{start:{line:1463,column:2},end:{line:1463,column:3}},loc:{start:{line:1463,column:77},end:{line:1498,column:3}},line:1463},"94":{name:"(anonymous_94)",decl:{start:{line:1480,column:99},end:{line:1480,column:100}},loc:{start:{line:1480,column:104},end:{line:1480,column:112}},line:1480},"95":{name:"(anonymous_95)",decl:{start:{line:1480,column:119},end:{line:1480,column:120}},loc:{start:{line:1480,column:128},end:{line:1486,column:5}},line:1480},"96":{name:"(anonymous_96)",decl:{start:{line:1486,column:13},end:{line:1486,column:14}},loc:{start:{line:1486,column:22},end:{line:1491,column:5}},line:1486},"97":{name:"(anonymous_97)",decl:{start:{line:1501,column:2},end:{line:1501,column:3}},loc:{start:{line:1501,column:81},end:{line:1504,column:3}},line:1501},"98":{name:"(anonymous_98)",decl:{start:{line:1503,column:98},end:{line:1503,column:99}},loc:{start:{line:1503,column:105},end:{line:1503,column:111}},line:1503},"99":{name:"(anonymous_99)",decl:{start:{line:1507,column:2},end:{line:1507,column:3}},loc:{start:{line:1507,column:85},end:{line:1721,column:3}},line:1507},"100":{name:"(anonymous_100)",decl:{start:{line:1518,column:32},end:{line:1518,column:33}},loc:{start:{line:1518,column:45},end:{line:1526,column:5}},line:1518},"101":{name:"(anonymous_101)",decl:{start:{line:1554,column:25},end:{line:1554,column:26}},loc:{start:{line:1554,column:48},end:{line:1556,column:9}},line:1554},"102":{name:"(anonymous_102)",decl:{start:{line:1562,column:54},end:{line:1562,column:55}},loc:{start:{line:1562,column:72},end:{line:1577,column:9}},line:1562},"103":{name:"(anonymous_103)",decl:{start:{line:1644,column:67},end:{line:1644,column:68}},loc:{start:{line:1644,column:72},end:{line:1651,column:9}},line:1644},"104":{name:"(anonymous_104)",decl:{start:{line:1651,column:15},end:{line:1651,column:16}},loc:{start:{line:1651,column:20},end:{line:1651,column:35}},line:1651},"105":{name:"(anonymous_105)",decl:{start:{line:1655,column:59},end:{line:1655,column:60}},loc:{start:{line:1655,column:64},end:{line:1658,column:11}},line:1655},"106":{name:"(anonymous_106)",decl:{start:{line:1660,column:34},end:{line:1660,column:35}},loc:{start:{line:1660,column:41},end:{line:1662,column:11}},line:1660},"107":{name:"(anonymous_107)",decl:{start:{line:1665,column:64},end:{line:1665,column:65}},loc:{start:{line:1665,column:69},end:{line:1669,column:9}},line:1665},"108":{name:"(anonymous_108)",decl:{start:{line:1669,column:15},end:{line:1669,column:16}},loc:{start:{line:1669,column:20},end:{line:1669,column:35}},line:1669},"109":{name:"(anonymous_109)",decl:{start:{line:1670,column:51},end:{line:1670,column:52}},loc:{start:{line:1670,column:64},end:{line:1672,column:9}},line:1670},"110":{name:"(anonymous_110)",decl:{start:{line:1724,column:2},end:{line:1724,column:3}},loc:{start:{line:1724,column:74},end:{line:1735,column:3}},line:1724},"111":{name:"(anonymous_111)",decl:{start:{line:1727,column:89},end:{line:1727,column:90}},loc:{start:{line:1727,column:98},end:{line:1734,column:5}},line:1727},"112":{name:"(anonymous_112)",decl:{start:{line:1737,column:2},end:{line:1737,column:3}},loc:{start:{line:1744,column:5},end:{line:1830,column:3}},line:1744},"113":{name:"(anonymous_113)",decl:{start:{line:1773,column:44},end:{line:1773,column:45}},loc:{start:{line:1773,column:51},end:{line:1781,column:7}},line:1773},"114":{name:"(anonymous_114)",decl:{start:{line:1794,column:25},end:{line:1794,column:26}},loc:{start:{line:1794,column:40},end:{line:1803,column:7}},line:1794},"115":{name:"(anonymous_115)",decl:{start:{line:1804,column:25},end:{line:1804,column:26}},loc:{start:{line:1804,column:41},end:{line:1810,column:7}},line:1804},"116":{name:"(anonymous_116)",decl:{start:{line:1816,column:46},end:{line:1816,column:47}},loc:{start:{line:1816,column:55},end:{line:1823,column:5}},line:1816},"117":{name:"(anonymous_117)",decl:{start:{line:1823,column:12},end:{line:1823,column:13}},loc:{start:{line:1823,column:23},end:{line:1829,column:5}},line:1823},"118":{name:"(anonymous_118)",decl:{start:{line:1828,column:25},end:{line:1828,column:26}},loc:{start:{line:1828,column:35},end:{line:1828,column:94}},line:1828},"119":{name:"(anonymous_119)",decl:{start:{line:1834,column:2},end:{line:1834,column:3}},loc:{start:{line:1834,column:57},end:{line:1936,column:3}},line:1834},"120":{name:"(anonymous_120)",decl:{start:{line:1835,column:39},end:{line:1835,column:40}},loc:{start:{line:1835,column:52},end:{line:1877,column:5}},line:1835},"121":{name:"(anonymous_121)",decl:{start:{line:1862,column:28},end:{line:1862,column:29}},loc:{start:{line:1862,column:37},end:{line:1864,column:9}},line:1862},"122":{name:"(anonymous_122)",decl:{start:{line:1943,column:2},end:{line:1943,column:3}},loc:{start:{line:1943,column:56},end:{line:1956,column:3}},line:1943},"123":{name:"(anonymous_123)",decl:{start:{line:1945,column:46},end:{line:1945,column:47}},loc:{start:{line:1945,column:68},end:{line:1945,column:88}},line:1945},"124":{name:"(anonymous_124)",decl:{start:{line:1947,column:83},end:{line:1947,column:84}},loc:{start:{line:1947,column:92},end:{line:1955,column:5}},line:1947},"125":{name:"(anonymous_125)",decl:{start:{line:1959,column:2},end:{line:1959,column:3}},loc:{start:{line:1959,column:73},end:{line:1991,column:3}},line:1959},"126":{name:"(anonymous_126)",decl:{start:{line:1978,column:40},end:{line:1978,column:41}},loc:{start:{line:1978,column:45},end:{line:1984,column:5}},line:1978},"127":{name:"(anonymous_127)",decl:{start:{line:1984,column:13},end:{line:1984,column:14}},loc:{start:{line:1984,column:22},end:{line:1990,column:5}},line:1984},"128":{name:"(anonymous_128)",decl:{start:{line:1993,column:2},end:{line:1993,column:3}},loc:{start:{line:1993,column:54},end:{line:2047,column:3}},line:1993},"129":{name:"(anonymous_129)",decl:{start:{line:2022,column:46},end:{line:2022,column:47}},loc:{start:{line:2022,column:55},end:{line:2028,column:5}},line:2022},"130":{name:"(anonymous_130)",decl:{start:{line:2028,column:12},end:{line:2028,column:13}},loc:{start:{line:2028,column:23},end:{line:2046,column:5}},line:2028},"131":{name:"(anonymous_131)",decl:{start:{line:2030,column:33},end:{line:2030,column:34}},loc:{start:{line:2030,column:43},end:{line:2030,column:65}},line:2030},"132":{name:"(anonymous_132)",decl:{start:{line:2031,column:27},end:{line:2031,column:28}},loc:{start:{line:2031,column:37},end:{line:2041,column:9}},line:2031},"133":{name:"(anonymous_133)",decl:{start:{line:2045,column:25},end:{line:2045,column:26}},loc:{start:{line:2045,column:35},end:{line:2045,column:56}},line:2045},"134":{name:"(anonymous_134)",decl:{start:{line:2046,column:12},end:{line:2046,column:13}},loc:{start:{line:2046,column:23},end:{line:2046,column:105}},line:2046},"135":{name:"(anonymous_135)",decl:{start:{line:2046,column:35},end:{line:2046,column:36}},loc:{start:{line:2046,column:45},end:{line:2046,column:104}},line:2046},"136":{name:"(anonymous_136)",decl:{start:{line:2049,column:2},end:{line:2049,column:3}},loc:{start:{line:2049,column:78},end:{line:2273,column:3}},line:2049},"137":{name:"(anonymous_137)",decl:{start:{line:2177,column:35},end:{line:2177,column:36}},loc:{start:{line:2177,column:46},end:{line:2181,column:11}},line:2177},"138":{name:"(anonymous_138)",decl:{start:{line:2188,column:56},end:{line:2188,column:57}},loc:{start:{line:2188,column:63},end:{line:2195,column:11}},line:2188},"139":{name:"(anonymous_139)",decl:{start:{line:2226,column:33},end:{line:2226,column:34}},loc:{start:{line:2226,column:40},end:{line:2231,column:9}},line:2226},"140":{name:"(anonymous_140)",decl:{start:{line:2238,column:22},end:{line:2238,column:23}},loc:{start:{line:2238,column:35},end:{line:2242,column:7}},line:2238},"141":{name:"(anonymous_141)",decl:{start:{line:2247,column:45},end:{line:2247,column:46}},loc:{start:{line:2247,column:50},end:{line:2272,column:5}},line:2247},"142":{name:"(anonymous_142)",decl:{start:{line:2252,column:28},end:{line:2252,column:29}},loc:{start:{line:2252,column:38},end:{line:2252,column:97}},line:2252},"143":{name:"(anonymous_143)",decl:{start:{line:2253,column:22},end:{line:2253,column:23}},loc:{start:{line:2253,column:32},end:{line:2270,column:7}},line:2253},"144":{name:"(anonymous_144)",decl:{start:{line:2275,column:2},end:{line:2275,column:3}},loc:{start:{line:2277,column:5},end:{line:2308,column:3}},line:2277},"145":{name:"(anonymous_145)",decl:{start:{line:2281,column:48},end:{line:2281,column:49}},loc:{start:{line:2281,column:58},end:{line:2289,column:5}},line:2281},"146":{name:"(anonymous_146)",decl:{start:{line:2282,column:62},end:{line:2282,column:63}},loc:{start:{line:2282,column:69},end:{line:2288,column:7}},line:2282},"147":{name:"(anonymous_147)",decl:{start:{line:2288,column:14},end:{line:2288,column:15}},loc:{start:{line:2288,column:20},end:{line:2288,column:64}},line:2288},"148":{name:"(anonymous_148)",decl:{start:{line:2291,column:38},end:{line:2291,column:39}},loc:{start:{line:2291,column:44},end:{line:2302,column:5}},line:2291},"149":{name:"(anonymous_149)",decl:{start:{line:2292,column:55},end:{line:2292,column:56}},loc:{start:{line:2292,column:66},end:{line:2301,column:7}},line:2292},"150":{name:"(anonymous_150)",decl:{start:{line:2302,column:12},end:{line:2302,column:13}},loc:{start:{line:2302,column:19},end:{line:2304,column:5}},line:2302},"151":{name:"(anonymous_151)",decl:{start:{line:2304,column:13},end:{line:2304,column:14}},loc:{start:{line:2304,column:22},end:{line:2307,column:5}},line:2304},"152":{name:"(anonymous_152)",decl:{start:{line:2310,column:2},end:{line:2310,column:3}},loc:{start:{line:2310,column:48},end:{line:2314,column:3}},line:2310},"153":{name:"(anonymous_153)",decl:{start:{line:2311,column:37},end:{line:2311,column:38}},loc:{start:{line:2311,column:42},end:{line:2313,column:7}},line:2311},"154":{name:"(anonymous_154)",decl:{start:{line:2311,column:62},end:{line:2311,column:63}},loc:{start:{line:2311,column:67},end:{line:2313,column:5}},line:2311},"155":{name:"(anonymous_155)",decl:{start:{line:2316,column:2},end:{line:2316,column:3}},loc:{start:{line:2316,column:64},end:{line:2318,column:3}},line:2316},"156":{name:"(anonymous_156)",decl:{start:{line:2320,column:2},end:{line:2320,column:3}},loc:{start:{line:2320,column:46},end:{line:2326,column:3}},line:2320},"157":{name:"(anonymous_157)",decl:{start:{line:2321,column:32},end:{line:2321,column:33}},loc:{start:{line:2321,column:38},end:{line:2324,column:5}},line:2321},"158":{name:"(anonymous_158)",decl:{start:{line:2325,column:36},end:{line:2325,column:37}},loc:{start:{line:2325,column:41},end:{line:2325,column:82}},line:2325},"159":{name:"(anonymous_159)",decl:{start:{line:2328,column:2},end:{line:2328,column:3}},loc:{start:{line:2328,column:30},end:{line:2333,column:3}},line:2328},"160":{name:"(anonymous_160)",decl:{start:{line:2335,column:2},end:{line:2335,column:3}},loc:{start:{line:2335,column:34},end:{line:2337,column:3}},line:2335},"161":{name:"(anonymous_161)",decl:{start:{line:2340,column:2},end:{line:2340,column:3}},loc:{start:{line:2340,column:40},end:{line:2342,column:3}},line:2340},"162":{name:"(anonymous_162)",decl:{start:{line:2344,column:2},end:{line:2344,column:3}},loc:{start:{line:2344,column:37},end:{line:2357,column:3}},line:2344},"163":{name:"(anonymous_163)",decl:{start:{line:2345,column:23},end:{line:2345,column:24}},loc:{start:{line:2345,column:34},end:{line:2356,column:5}},line:2345},"164":{name:"(anonymous_164)",decl:{start:{line:2347,column:52},end:{line:2347,column:53}},loc:{start:{line:2347,column:57},end:{line:2355,column:7}},line:2347},"165":{name:"(anonymous_165)",decl:{start:{line:2349,column:51},end:{line:2349,column:52}},loc:{start:{line:2349,column:62},end:{line:2351,column:9}},line:2349},"166":{name:"(anonymous_166)",decl:{start:{line:2359,column:2},end:{line:2359,column:3}},loc:{start:{line:2359,column:51},end:{line:2362,column:3}},line:2359},"167":{name:"(anonymous_167)",decl:{start:{line:2364,column:2},end:{line:2364,column:3}},loc:{start:{line:2364,column:50},end:{line:2369,column:3}},line:2364},"168":{name:"(anonymous_168)",decl:{start:{line:2371,column:2},end:{line:2371,column:3}},loc:{start:{line:2371,column:101},end:{line:2390,column:3}},line:2371},"169":{name:"(anonymous_169)",decl:{start:{line:2379,column:64},end:{line:2379,column:65}},loc:{start:{line:2379,column:86},end:{line:2379,column:133}},line:2379},"170":{name:"(anonymous_170)",decl:{start:{line:2379,column:152},end:{line:2379,column:153}},loc:{start:{line:2379,column:174},end:{line:2379,column:194}},line:2379},"171":{name:"(anonymous_171)",decl:{start:{line:2381,column:81},end:{line:2381,column:82}},loc:{start:{line:2381,column:90},end:{line:2389,column:5}},line:2381},"172":{name:"convertPolygonToSQL",decl:{start:{line:2396,column:9},end:{line:2396,column:28}},loc:{start:{line:2396,column:38},end:{line:2430,column:1}},line:2396},"173":{name:"(anonymous_173)",decl:{start:{line:2405,column:32},end:{line:2405,column:33}},loc:{start:{line:2405,column:53},end:{line:2418,column:3}},line:2405},"174":{name:"(anonymous_174)",decl:{start:{line:2424,column:29},end:{line:2424,column:30}},loc:{start:{line:2424,column:38},end:{line:2428,column:3}},line:2424},"175":{name:"removeWhiteSpace",decl:{start:{line:2432,column:9},end:{line:2432,column:25}},loc:{start:{line:2432,column:33},end:{line:2442,column:1}},line:2432},"176":{name:"processRegexPattern",decl:{start:{line:2444,column:9},end:{line:2444,column:28}},loc:{start:{line:2444,column:32},end:{line:2455,column:1}},line:2444},"177":{name:"isStartsWithRegex",decl:{start:{line:2457,column:9},end:{line:2457,column:26}},loc:{start:{line:2457,column:34},end:{line:2464,column:1}},line:2457},"178":{name:"isAllValuesRegexOrNone",decl:{start:{line:2466,column:9},end:{line:2466,column:31}},loc:{start:{line:2466,column:40},end:{line:2484,column:1}},line:2466},"179":{name:"isAnyValueRegexStartsWith",decl:{start:{line:2486,column:9},end:{line:2486,column:34}},loc:{start:{line:2486,column:43},end:{line:2490,column:1}},line:2486},"180":{name:"(anonymous_180)",decl:{start:{line:2487,column:21},end:{line:2487,column:22}},loc:{start:{line:2487,column:38},end:{line:2489,column:3}},line:2487},"181":{name:"createLiteralRegex",decl:{start:{line:2492,column:9},end:{line:2492,column:27}},loc:{start:{line:2492,column:39},end:{line:2504,column:1}},line:2492},"182":{name:"(anonymous_182)",decl:{start:{line:2493,column:33},end:{line:2493,column:34}},loc:{start:{line:2493,column:38},end:{line:2503,column:3}},line:2493},"183":{name:"literalizeRegexPart",decl:{start:{line:2506,column:9},end:{line:2506,column:28}},loc:{start:{line:2506,column:32},end:{line:2529,column:1}},line:2506},"184":{name:"(anonymous_184)",decl:{start:{line:2532,column:2},end:{line:2532,column:3}},loc:{start:{line:2532,column:21},end:{line:2534,column:3}},line:2532}},branchMap:{"0":{loc:{start:{line:20,column:46},end:{line:20,column:92}},type:"cond-expr",locations:[{start:{line:20,column:70},end:{line:20,column:73}},{start:{line:20,column:76},end:{line:20,column:92}}],line:20},"1":{loc:{start:{line:20,column:46},end:{line:20,column:67}},type:"binary-expr",locations:[{start:{line:20,column:46},end:{line:20,column:49}},{start:{line:20,column:53},end:{line:20,column:67}}],line:20},"2":{loc:{start:{line:22,column:75},end:{line:22,column:330}},type:"if",locations:[{start:{line:22,column:75},end:{line:22,column:330}},{start:{line:22,column:75},end:{line:22,column:330}}],line:22},"3":{loc:{start:{line:22,column:163},end:{line:22,column:296}},type:"if",locations:[{start:{line:22,column:163},end:{line:22,column:296}},{start:{line:22,column:163},end:{line:22,column:296}}],line:22},"4":{loc:{start:{line:24,column:91},end:{line:24,column:131}},type:"cond-expr",locations:[{start:{line:24,column:114},end:{line:24,column:126}},{start:{line:24,column:129},end:{line:24,column:131}}],line:24},"5":{loc:{start:{line:24,column:133},end:{line:24,column:515}},type:"if",locations:[{start:{line:24,column:133},end:{line:24,column:515}},{start:{line:24,column:133},end:{line:24,column:515}}],line:24},"6":{loc:{start:{line:24,column:255},end:{line:24,column:515}},type:"if",locations:[{start:{line:24,column:255},end:{line:24,column:515}},{start:{line:24,column:255},end:{line:24,column:515}}],line:24},"7":{loc:{start:{line:26,column:44},end:{line:26,column:195}},type:"if",locations:[{start:{line:26,column:44},end:{line:26,column:195}},{start:{line:26,column:44},end:{line:26,column:195}}],line:26},"8":{loc:{start:{line:44,column:2},end:{line:84,column:3}},type:"switch",locations:[{start:{line:45,column:4},end:{line:46,column:20}},{start:{line:48,column:4},end:{line:49,column:40}},{start:{line:51,column:4},end:{line:52,column:21}},{start:{line:54,column:4},end:{line:55,column:20}},{start:{line:57,column:4},end:{line:58,column:23}},{start:{line:60,column:4},end:{line:61,column:20}},{start:{line:63,column:4},end:{line:64,column:32}},{start:{line:66,column:4},end:{line:67,column:21}},{start:{line:69,column:4},end:{line:70,column:21}},{start:{line:72,column:4},end:{line:73,column:23}},{start:{line:75,column:4},end:{line:80,column:7}},{start:{line:82,column:4},end:{line:83,column:54}}],line:44},"9":{loc:{start:{line:76,column:6},end:{line:80,column:7}},type:"if",locations:[{start:{line:76,column:6},end:{line:80,column:7}},{start:{line:76,column:6},end:{line:80,column:7}}],line:76},"10":{loc:{start:{line:76,column:10},end:{line:76,column:58}},type:"binary-expr",locations:[{start:{line:76,column:10},end:{line:76,column:23}},{start:{line:76,column:27},end:{line:76,column:58}}],line:76},"11":{loc:{start:{line:109,column:2},end:{line:117,column:3}},type:"if",locations:[{start:{line:109,column:2},end:{line:117,column:3}},{start:{line:109,column:2},end:{line:117,column:3}}],line:109},"12":{loc:{start:{line:110,column:4},end:{line:112,column:5}},type:"if",locations:[{start:{line:110,column:4},end:{line:112,column:5}},{start:{line:110,column:4},end:{line:112,column:5}}],line:110},"13":{loc:{start:{line:114,column:4},end:{line:116,column:5}},type:"if",locations:[{start:{line:114,column:4},end:{line:116,column:5}},{start:{line:114,column:4},end:{line:116,column:5}}],line:114},"14":{loc:{start:{line:123,column:2},end:{line:125,column:3}},type:"if",locations:[{start:{line:123,column:2},end:{line:125,column:3}},{start:{line:123,column:2},end:{line:125,column:3}}],line:123},"15":{loc:{start:{line:123,column:6},end:{line:123,column:61}},type:"binary-expr",locations:[{start:{line:123,column:6},end:{line:123,column:31}},{start:{line:123,column:35},end:{line:123,column:61}}],line:123},"16":{loc:{start:{line:169,column:2},end:{line:171,column:3}},type:"if",locations:[{start:{line:169,column:2},end:{line:171,column:3}},{start:{line:169,column:2},end:{line:171,column:3}}],line:169},"17":{loc:{start:{line:173,column:2},end:{line:176,column:3}},type:"if",locations:[{start:{line:173,column:2},end:{line:176,column:3}},{start:{line:173,column:2},end:{line:176,column:3}}],line:173},"18":{loc:{start:{line:180,column:2},end:{line:182,column:3}},type:"if",locations:[{start:{line:180,column:2},end:{line:182,column:3}},{start:{line:180,column:2},end:{line:182,column:3}}],line:180},"19":{loc:{start:{line:186,column:2},end:{line:188,column:3}},type:"if",locations:[{start:{line:186,column:2},end:{line:188,column:3}},{start:{line:186,column:2},end:{line:188,column:3}}],line:186},"20":{loc:{start:{line:199,column:2},end:{line:201,column:3}},type:"if",locations:[{start:{line:199,column:2},end:{line:201,column:3}},{start:{line:199,column:2},end:{line:201,column:3}}],line:199},"21":{loc:{start:{line:203,column:18},end:{line:203,column:37}},type:"binary-expr",locations:[{start:{line:203,column:18},end:{line:203,column:31}},{start:{line:203,column:35},end:{line:203,column:37}}],line:203},"22":{loc:{start:{line:217,column:2},end:{line:224,column:3}},type:"if",locations:[{start:{line:217,column:2},end:{line:224,column:3}},{start:{line:217,column:2},end:{line:224,column:3}}],line:217},"23":{loc:{start:{line:231,column:4},end:{line:257,column:5}},type:"if",locations:[{start:{line:231,column:4},end:{line:257,column:5}},{start:{line:231,column:4},end:{line:257,column:5}}],line:231},"24":{loc:{start:{line:234,column:22},end:{line:234,column:41}},type:"binary-expr",locations:[{start:{line:234,column:22},end:{line:234,column:35}},{start:{line:234,column:39},end:{line:234,column:41}}],line:234},"25":{loc:{start:{line:239,column:6},end:{line:241,column:7}},type:"if",locations:[{start:{line:239,column:6},end:{line:241,column:7}},{start:{line:239,column:6},end:{line:241,column:7}}],line:239},"26":{loc:{start:{line:239,column:10},end:{line:239,column:42}},type:"binary-expr",locations:[{start:{line:239,column:10},end:{line:239,column:15}},{start:{line:239,column:19},end:{line:239,column:42}}],line:239},"27":{loc:{start:{line:247,column:27},end:{line:247,column:49}},type:"binary-expr",locations:[{start:{line:247,column:27},end:{line:247,column:43}},{start:{line:247,column:47},end:{line:247,column:49}}],line:247},"28":{loc:{start:{line:249,column:8},end:{line:251,column:9}},type:"if",locations:[{start:{line:249,column:8},end:{line:251,column:9}},{start:{line:249,column:8},end:{line:251,column:9}}],line:249},"29":{loc:{start:{line:264,column:4},end:{line:266,column:5}},type:"if",locations:[{start:{line:264,column:4},end:{line:266,column:5}},{start:{line:264,column:4},end:{line:266,column:5}}],line:264},"30":{loc:{start:{line:273,column:2},end:{line:275,column:3}},type:"if",locations:[{start:{line:273,column:2},end:{line:275,column:3}},{start:{line:273,column:2},end:{line:275,column:3}}],line:273},"31":{loc:{start:{line:284,column:2},end:{line:286,column:3}},type:"if",locations:[{start:{line:284,column:2},end:{line:286,column:3}},{start:{line:284,column:2},end:{line:286,column:3}}],line:284},"32":{loc:{start:{line:288,column:2},end:{line:290,column:3}},type:"if",locations:[{start:{line:288,column:2},end:{line:290,column:3}},{start:{line:288,column:2},end:{line:290,column:3}}],line:288},"33":{loc:{start:{line:292,column:2},end:{line:294,column:3}},type:"if",locations:[{start:{line:292,column:2},end:{line:294,column:3}},{start:{line:292,column:2},end:{line:294,column:3}}],line:292},"34":{loc:{start:{line:300,column:2},end:{line:310,column:3}},type:"if",locations:[{start:{line:300,column:2},end:{line:310,column:3}},{start:{line:300,column:2},end:{line:310,column:3}}],line:300},"35":{loc:{start:{line:302,column:6},end:{line:304,column:7}},type:"if",locations:[{start:{line:302,column:6},end:{line:304,column:7}},{start:{line:302,column:6},end:{line:304,column:7}}],line:302},"36":{loc:{start:{line:306,column:6},end:{line:308,column:7}},type:"if",locations:[{start:{line:306,column:6},end:{line:308,column:7}},{start:{line:306,column:6},end:{line:308,column:7}}],line:306},"37":{loc:{start:{line:306,column:10},end:{line:306,column:48}},type:"binary-expr",locations:[{start:{line:306,column:10},end:{line:306,column:27}},{start:{line:306,column:31},end:{line:306,column:48}}],line:306},"38":{loc:{start:{line:317,column:2},end:{line:323,column:3}},type:"if",locations:[{start:{line:317,column:2},end:{line:323,column:3}},{start:{line:317,column:2},end:{line:323,column:3}}],line:317},"39":{loc:{start:{line:319,column:6},end:{line:321,column:7}},type:"if",locations:[{start:{line:319,column:6},end:{line:321,column:7}},{start:{line:319,column:6},end:{line:321,column:7}}],line:319},"40":{loc:{start:{line:340,column:25},end:{line:340,column:111}},type:"binary-expr",locations:[{start:{line:340,column:25},end:{line:340,column:38}},{start:{line:340,column:42},end:{line:340,column:66}},{start:{line:340,column:70},end:{line:340,column:111}}],line:340},"41":{loc:{start:{line:344,column:4},end:{line:349,column:5}},type:"if",locations:[{start:{line:344,column:4},end:{line:349,column:5}},{start:{line:344,column:4},end:{line:349,column:5}}],line:344},"42":{loc:{start:{line:346,column:6},end:{line:348,column:7}},type:"if",locations:[{start:{line:346,column:6},end:{line:348,column:7}},{start:{line:346,column:6},end:{line:348,column:7}}],line:346},"43":{loc:{start:{line:346,column:10},end:{line:346,column:52}},type:"binary-expr",locations:[{start:{line:346,column:10},end:{line:346,column:20}},{start:{line:346,column:24},end:{line:346,column:52}}],line:346},"44":{loc:{start:{line:353,column:4},end:{line:427,column:5}},type:"if",locations:[{start:{line:353,column:4},end:{line:427,column:5}},{start:{line:353,column:4},end:{line:427,column:5}}],line:353},"45":{loc:{start:{line:356,column:11},end:{line:427,column:5}},type:"if",locations:[{start:{line:356,column:11},end:{line:427,column:5}},{start:{line:356,column:11},end:{line:427,column:5}}],line:356},"46":{loc:{start:{line:356,column:15},end:{line:356,column:85}},type:"binary-expr",locations:[{start:{line:356,column:15},end:{line:356,column:30}},{start:{line:356,column:35},end:{line:356,column:59}},{start:{line:356,column:63},end:{line:356,column:84}}],line:356},"47":{loc:{start:{line:360,column:11},end:{line:427,column:5}},type:"if",locations:[{start:{line:360,column:11},end:{line:427,column:5}},{start:{line:360,column:11},end:{line:427,column:5}}],line:360},"48":{loc:{start:{line:363,column:6},end:{line:380,column:7}},type:"if",locations:[{start:{line:363,column:6},end:{line:380,column:7}},{start:{line:363,column:6},end:{line:380,column:7}}],line:363},"49":{loc:{start:{line:369,column:8},end:{line:379,column:9}},type:"if",locations:[{start:{line:369,column:8},end:{line:379,column:9}},{start:{line:369,column:8},end:{line:379,column:9}}],line:369},"50":{loc:{start:{line:374,column:15},end:{line:379,column:9}},type:"if",locations:[{start:{line:374,column:15},end:{line:379,column:9}},{start:{line:374,column:15},end:{line:379,column:9}}],line:374},"51":{loc:{start:{line:375,column:15},end:{line:379,column:9}},type:"if",locations:[{start:{line:375,column:15},end:{line:379,column:9}},{start:{line:375,column:15},end:{line:379,column:9}}],line:375},"52":{loc:{start:{line:381,column:11},end:{line:427,column:5}},type:"if",locations:[{start:{line:381,column:11},end:{line:427,column:5}},{start:{line:381,column:11},end:{line:427,column:5}}],line:381},"53":{loc:{start:{line:381,column:15},end:{line:381,column:62}},type:"binary-expr",locations:[{start:{line:381,column:15},end:{line:381,column:34}},{start:{line:381,column:38},end:{line:381,column:62}}],line:381},"54":{loc:{start:{line:386,column:11},end:{line:427,column:5}},type:"if",locations:[{start:{line:386,column:11},end:{line:427,column:5}},{start:{line:386,column:11},end:{line:427,column:5}}],line:386},"55":{loc:{start:{line:390,column:11},end:{line:427,column:5}},type:"if",locations:[{start:{line:390,column:11},end:{line:427,column:5}},{start:{line:390,column:11},end:{line:427,column:5}}],line:390},"56":{loc:{start:{line:393,column:6},end:{line:399,column:7}},type:"if",locations:[{start:{line:393,column:6},end:{line:399,column:7}},{start:{line:393,column:6},end:{line:399,column:7}}],line:393},"57":{loc:{start:{line:393,column:10},end:{line:393,column:80}},type:"binary-expr",locations:[{start:{line:393,column:10},end:{line:393,column:34}},{start:{line:393,column:38},end:{line:393,column:80}}],line:393},"58":{loc:{start:{line:402,column:11},end:{line:427,column:5}},type:"if",locations:[{start:{line:402,column:11},end:{line:427,column:5}},{start:{line:402,column:11},end:{line:427,column:5}}],line:402},"59":{loc:{start:{line:406,column:11},end:{line:427,column:5}},type:"if",locations:[{start:{line:406,column:11},end:{line:427,column:5}},{start:{line:406,column:11},end:{line:427,column:5}}],line:406},"60":{loc:{start:{line:417,column:8},end:{line:421,column:9}},type:"if",locations:[{start:{line:417,column:8},end:{line:421,column:9}},{start:{line:417,column:8},end:{line:421,column:9}}],line:417},"61":{loc:{start:{line:423,column:22},end:{line:423,column:61}},type:"cond-expr",locations:[{start:{line:423,column:45},end:{line:423,column:52}},{start:{line:423,column:55},end:{line:423,column:61}}],line:423},"62":{loc:{start:{line:424,column:18},end:{line:424,column:53}},type:"cond-expr",locations:[{start:{line:424,column:41},end:{line:424,column:48}},{start:{line:424,column:51},end:{line:424,column:53}}],line:424},"63":{loc:{start:{line:429,column:4},end:{line:463,column:5}},type:"if",locations:[{start:{line:429,column:4},end:{line:463,column:5}},{start:{line:429,column:4},end:{line:463,column:5}}],line:429},"64":{loc:{start:{line:430,column:6},end:{line:452,column:7}},type:"if",locations:[{start:{line:430,column:6},end:{line:452,column:7}},{start:{line:430,column:6},end:{line:452,column:7}}],line:430},"65":{loc:{start:{line:434,column:8},end:{line:451,column:9}},type:"if",locations:[{start:{line:434,column:8},end:{line:451,column:9}},{start:{line:434,column:8},end:{line:451,column:9}}],line:434},"66":{loc:{start:{line:441,column:10},end:{line:450,column:11}},type:"if",locations:[{start:{line:441,column:10},end:{line:450,column:11}},{start:{line:441,column:10},end:{line:450,column:11}}],line:441},"67":{loc:{start:{line:444,column:12},end:{line:449,column:13}},type:"if",locations:[{start:{line:444,column:12},end:{line:449,column:13}},{start:{line:444,column:12},end:{line:449,column:13}}],line:444},"68":{loc:{start:{line:454,column:6},end:{line:462,column:7}},type:"if",locations:[{start:{line:454,column:6},end:{line:462,column:7}},{start:{line:454,column:6},end:{line:462,column:7}}],line:454},"69":{loc:{start:{line:465,column:4},end:{line:480,column:5}},type:"if",locations:[{start:{line:465,column:4},end:{line:480,column:5}},{start:{line:465,column:4},end:{line:480,column:5}}],line:465},"70":{loc:{start:{line:466,column:6},end:{line:479,column:7}},type:"if",locations:[{start:{line:466,column:6},end:{line:479,column:7}},{start:{line:466,column:6},end:{line:479,column:7}}],line:466},"71":{loc:{start:{line:471,column:8},end:{line:478,column:9}},type:"if",locations:[{start:{line:471,column:8},end:{line:478,column:9}},{start:{line:471,column:8},end:{line:478,column:9}}],line:471},"72":{loc:{start:{line:482,column:22},end:{line:482,column:85}},type:"binary-expr",locations:[{start:{line:482,column:22},end:{line:482,column:51}},{start:{line:482,column:55},end:{line:482,column:85}}],line:482},"73":{loc:{start:{line:484,column:4},end:{line:555,column:5}},type:"if",locations:[{start:{line:484,column:4},end:{line:555,column:5}},{start:{line:484,column:4},end:{line:555,column:5}}],line:484},"74":{loc:{start:{line:484,column:8},end:{line:484,column:145}},type:"binary-expr",locations:[{start:{line:484,column:8},end:{line:484,column:37}},{start:{line:484,column:41},end:{line:484,column:53}},{start:{line:484,column:57},end:{line:484,column:90}},{start:{line:484,column:94},end:{line:484,column:145}}],line:484},"75":{loc:{start:{line:489,column:8},end:{line:494,column:9}},type:"if",locations:[{start:{line:489,column:8},end:{line:494,column:9}},{start:{line:489,column:8},end:{line:494,column:9}}],line:489},"76":{loc:{start:{line:493,column:55},end:{line:493,column:72}},type:"cond-expr",locations:[{start:{line:493,column:67},end:{line:493,column:68}},{start:{line:493,column:71},end:{line:493,column:72}}],line:493},"77":{loc:{start:{line:497,column:6},end:{line:501,column:7}},type:"if",locations:[{start:{line:497,column:6},end:{line:501,column:7}},{start:{line:497,column:6},end:{line:501,column:7}}],line:497},"78":{loc:{start:{line:504,column:11},end:{line:555,column:5}},type:"if",locations:[{start:{line:504,column:11},end:{line:555,column:5}},{start:{line:504,column:11},end:{line:555,column:5}}],line:504},"79":{loc:{start:{line:506,column:20},end:{line:506,column:40}},type:"cond-expr",locations:[{start:{line:506,column:28},end:{line:506,column:35}},{start:{line:506,column:38},end:{line:506,column:40}}],line:506},"80":{loc:{start:{line:508,column:8},end:{line:541,column:9}},type:"if",locations:[{start:{line:508,column:8},end:{line:541,column:9}},{start:{line:508,column:8},end:{line:541,column:9}}],line:508},"81":{loc:{start:{line:509,column:10},end:{line:529,column:11}},type:"if",locations:[{start:{line:509,column:10},end:{line:529,column:11}},{start:{line:509,column:10},end:{line:529,column:11}}],line:509},"82":{loc:{start:{line:515,column:12},end:{line:517,column:13}},type:"if",locations:[{start:{line:515,column:12},end:{line:517,column:13}},{start:{line:515,column:12},end:{line:517,column:13}}],line:515},"83":{loc:{start:{line:522,column:14},end:{line:525,column:15}},type:"if",locations:[{start:{line:522,column:14},end:{line:525,column:15}},{start:{line:522,column:14},end:{line:525,column:15}}],line:522},"84":{loc:{start:{line:530,column:15},end:{line:541,column:9}},type:"if",locations:[{start:{line:530,column:15},end:{line:541,column:9}},{start:{line:530,column:15},end:{line:541,column:9}}],line:530},"85":{loc:{start:{line:536,column:10},end:{line:540,column:11}},type:"if",locations:[{start:{line:536,column:10},end:{line:540,column:11}},{start:{line:536,column:10},end:{line:540,column:11}}],line:536},"86":{loc:{start:{line:544,column:6},end:{line:546,column:7}},type:"if",locations:[{start:{line:544,column:6},end:{line:546,column:7}},{start:{line:544,column:6},end:{line:546,column:7}}],line:544},"87":{loc:{start:{line:548,column:6},end:{line:550,column:7}},type:"if",locations:[{start:{line:548,column:6},end:{line:550,column:7}},{start:{line:548,column:6},end:{line:550,column:7}}],line:548},"88":{loc:{start:{line:551,column:11},end:{line:555,column:5}},type:"if",locations:[{start:{line:551,column:11},end:{line:555,column:5}},{start:{line:551,column:11},end:{line:555,column:5}}],line:551},"89":{loc:{start:{line:553,column:11},end:{line:555,column:5}},type:"if",locations:[{start:{line:553,column:11},end:{line:555,column:5}},{start:{line:553,column:11},end:{line:555,column:5}}],line:553},"90":{loc:{start:{line:557,column:4},end:{line:581,column:5}},type:"if",locations:[{start:{line:557,column:4},end:{line:581,column:5}},{start:{line:557,column:4},end:{line:581,column:5}}],line:557},"91":{loc:{start:{line:557,column:8},end:{line:557,column:54}},type:"binary-expr",locations:[{start:{line:557,column:8},end:{line:557,column:38}},{start:{line:557,column:42},end:{line:557,column:54}}],line:557},"92":{loc:{start:{line:558,column:6},end:{line:571,column:7}},type:"if",locations:[{start:{line:558,column:6},end:{line:571,column:7}},{start:{line:558,column:6},end:{line:571,column:7}}],line:558},"93":{loc:{start:{line:559,column:8},end:{line:561,column:9}},type:"if",locations:[{start:{line:559,column:8},end:{line:561,column:9}},{start:{line:559,column:8},end:{line:561,column:9}}],line:559},"94":{loc:{start:{line:575,column:11},end:{line:581,column:5}},type:"if",locations:[{start:{line:575,column:11},end:{line:581,column:5}},{start:{line:575,column:11},end:{line:581,column:5}}],line:575},"95":{loc:{start:{line:576,column:6},end:{line:580,column:7}},type:"if",locations:[{start:{line:576,column:6},end:{line:580,column:7}},{start:{line:576,column:6},end:{line:580,column:7}}],line:576},"96":{loc:{start:{line:583,column:4},end:{line:592,column:5}},type:"if",locations:[{start:{line:583,column:4},end:{line:592,column:5}},{start:{line:583,column:4},end:{line:592,column:5}}],line:583},"97":{loc:{start:{line:584,column:6},end:{line:588,column:7}},type:"if",locations:[{start:{line:584,column:6},end:{line:588,column:7}},{start:{line:584,column:6},end:{line:588,column:7}}],line:584},"98":{loc:{start:{line:594,column:4},end:{line:604,column:5}},type:"if",locations:[{start:{line:594,column:4},end:{line:604,column:5}},{start:{line:594,column:4},end:{line:604,column:5}}],line:594},"99":{loc:{start:{line:597,column:6},end:{line:599,column:7}},type:"if",locations:[{start:{line:597,column:6},end:{line:599,column:7}},{start:{line:597,column:6},end:{line:599,column:7}}],line:597},"100":{loc:{start:{line:606,column:4},end:{line:639,column:5}},type:"if",locations:[{start:{line:606,column:4},end:{line:639,column:5}},{start:{line:606,column:4},end:{line:639,column:5}}],line:606},"101":{loc:{start:{line:610,column:6},end:{line:612,column:7}},type:"if",locations:[{start:{line:610,column:6},end:{line:612,column:7}},{start:{line:610,column:6},end:{line:612,column:7}}],line:610},"102":{loc:{start:{line:614,column:6},end:{line:616,column:7}},type:"if",locations:[{start:{line:614,column:6},end:{line:616,column:7}},{start:{line:614,column:6},end:{line:616,column:7}}],line:614},"103":{loc:{start:{line:614,column:10},end:{line:614,column:59}},type:"binary-expr",locations:[{start:{line:614,column:10},end:{line:614,column:23}},{start:{line:614,column:27},end:{line:614,column:59}}],line:614},"104":{loc:{start:{line:618,column:6},end:{line:622,column:7}},type:"if",locations:[{start:{line:618,column:6},end:{line:622,column:7}},{start:{line:618,column:6},end:{line:622,column:7}}],line:618},"105":{loc:{start:{line:618,column:10},end:{line:618,column:66}},type:"binary-expr",locations:[{start:{line:618,column:10},end:{line:618,column:26}},{start:{line:618,column:30},end:{line:618,column:66}}],line:618},"106":{loc:{start:{line:620,column:13},end:{line:622,column:7}},type:"if",locations:[{start:{line:620,column:13},end:{line:622,column:7}},{start:{line:620,column:13},end:{line:622,column:7}}],line:620},"107":{loc:{start:{line:624,column:6},end:{line:628,column:7}},type:"if",locations:[{start:{line:624,column:6},end:{line:628,column:7}},{start:{line:624,column:6},end:{line:628,column:7}}],line:624},"108":{loc:{start:{line:624,column:10},end:{line:624,column:77}},type:"binary-expr",locations:[{start:{line:624,column:10},end:{line:624,column:31}},{start:{line:624,column:35},end:{line:624,column:77}}],line:624},"109":{loc:{start:{line:626,column:13},end:{line:628,column:7}},type:"if",locations:[{start:{line:626,column:13},end:{line:628,column:7}},{start:{line:626,column:13},end:{line:628,column:7}}],line:626},"110":{loc:{start:{line:630,column:6},end:{line:634,column:7}},type:"if",locations:[{start:{line:630,column:6},end:{line:634,column:7}},{start:{line:630,column:6},end:{line:634,column:7}}],line:630},"111":{loc:{start:{line:630,column:10},end:{line:630,column:87}},type:"binary-expr",locations:[{start:{line:630,column:10},end:{line:630,column:36}},{start:{line:630,column:40},end:{line:630,column:87}}],line:630},"112":{loc:{start:{line:632,column:13},end:{line:634,column:7}},type:"if",locations:[{start:{line:632,column:13},end:{line:634,column:7}},{start:{line:632,column:13},end:{line:634,column:7}}],line:632},"113":{loc:{start:{line:641,column:4},end:{line:649,column:5}},type:"if",locations:[{start:{line:641,column:4},end:{line:649,column:5}},{start:{line:641,column:4},end:{line:649,column:5}}],line:641},"114":{loc:{start:{line:651,column:4},end:{line:660,column:5}},type:"if",locations:[{start:{line:651,column:4},end:{line:660,column:5}},{start:{line:651,column:4},end:{line:660,column:5}}],line:651},"115":{loc:{start:{line:651,column:8},end:{line:651,column:53}},type:"binary-expr",locations:[{start:{line:651,column:8},end:{line:651,column:26}},{start:{line:651,column:30},end:{line:651,column:53}}],line:651},"116":{loc:{start:{line:662,column:4},end:{line:691,column:5}},type:"if",locations:[{start:{line:662,column:4},end:{line:691,column:5}},{start:{line:662,column:4},end:{line:691,column:5}}],line:662},"117":{loc:{start:{line:662,column:8},end:{line:662,column:68}},type:"binary-expr",locations:[{start:{line:662,column:8},end:{line:662,column:29}},{start:{line:662,column:33},end:{line:662,column:68}}],line:662},"118":{loc:{start:{line:665,column:6},end:{line:667,column:7}},type:"if",locations:[{start:{line:665,column:6},end:{line:667,column:7}},{start:{line:665,column:6},end:{line:667,column:7}}],line:665},"119":{loc:{start:{line:665,column:10},end:{line:665,column:69}},type:"binary-expr",locations:[{start:{line:665,column:10},end:{line:665,column:42}},{start:{line:665,column:46},end:{line:665,column:69}}],line:665},"120":{loc:{start:{line:672,column:6},end:{line:676,column:7}},type:"if",locations:[{start:{line:672,column:6},end:{line:676,column:7}},{start:{line:672,column:6},end:{line:676,column:7}}],line:672},"121":{loc:{start:{line:672,column:10},end:{line:672,column:54}},type:"binary-expr",locations:[{start:{line:672,column:10},end:{line:672,column:32}},{start:{line:672,column:36},end:{line:672,column:54}}],line:672},"122":{loc:{start:{line:674,column:13},end:{line:676,column:7}},type:"if",locations:[{start:{line:674,column:13},end:{line:676,column:7}},{start:{line:674,column:13},end:{line:676,column:7}}],line:674},"123":{loc:{start:{line:683,column:6},end:{line:685,column:7}},type:"if",locations:[{start:{line:683,column:6},end:{line:685,column:7}},{start:{line:683,column:6},end:{line:685,column:7}}],line:683},"124":{loc:{start:{line:683,column:10},end:{line:683,column:41}},type:"binary-expr",locations:[{start:{line:683,column:10},end:{line:683,column:25}},{start:{line:683,column:29},end:{line:683,column:41}}],line:683},"125":{loc:{start:{line:693,column:4},end:{line:731,column:5}},type:"if",locations:[{start:{line:693,column:4},end:{line:731,column:5}},{start:{line:693,column:4},end:{line:731,column:5}}],line:693},"126":{loc:{start:{line:693,column:8},end:{line:693,column:63}},type:"binary-expr",locations:[{start:{line:693,column:8},end:{line:693,column:29}},{start:{line:693,column:33},end:{line:693,column:63}}],line:693},"127":{loc:{start:{line:697,column:6},end:{line:711,column:7}},type:"if",locations:[{start:{line:697,column:6},end:{line:711,column:7}},{start:{line:697,column:6},end:{line:711,column:7}}],line:697},"128":{loc:{start:{line:697,column:10},end:{line:697,column:69}},type:"binary-expr",locations:[{start:{line:697,column:10},end:{line:697,column:37}},{start:{line:697,column:41},end:{line:697,column:69}}],line:697},"129":{loc:{start:{line:698,column:8},end:{line:700,column:9}},type:"if",locations:[{start:{line:698,column:8},end:{line:700,column:9}},{start:{line:698,column:8},end:{line:700,column:9}}],line:698},"130":{loc:{start:{line:698,column:12},end:{line:698,column:66}},type:"binary-expr",locations:[{start:{line:698,column:12},end:{line:698,column:32}},{start:{line:698,column:36},end:{line:698,column:66}}],line:698},"131":{loc:{start:{line:703,column:13},end:{line:711,column:7}},type:"if",locations:[{start:{line:703,column:13},end:{line:711,column:7}},{start:{line:703,column:13},end:{line:711,column:7}}],line:703},"132":{loc:{start:{line:704,column:8},end:{line:706,column:9}},type:"if",locations:[{start:{line:704,column:8},end:{line:706,column:9}},{start:{line:704,column:8},end:{line:706,column:9}}],line:704},"133":{loc:{start:{line:714,column:8},end:{line:718,column:9}},type:"if",locations:[{start:{line:714,column:8},end:{line:718,column:9}},{start:{line:714,column:8},end:{line:718,column:9}}],line:714},"134":{loc:{start:{line:714,column:12},end:{line:714,column:56}},type:"binary-expr",locations:[{start:{line:714,column:12},end:{line:714,column:34}},{start:{line:714,column:38},end:{line:714,column:56}}],line:714},"135":{loc:{start:{line:720,column:8},end:{line:724,column:9}},type:"if",locations:[{start:{line:720,column:8},end:{line:724,column:9}},{start:{line:720,column:8},end:{line:724,column:9}}],line:720},"136":{loc:{start:{line:720,column:12},end:{line:720,column:68}},type:"binary-expr",locations:[{start:{line:720,column:12},end:{line:720,column:37}},{start:{line:720,column:41},end:{line:720,column:68}}],line:720},"137":{loc:{start:{line:733,column:4},end:{line:745,column:5}},type:"if",locations:[{start:{line:733,column:4},end:{line:745,column:5}},{start:{line:733,column:4},end:{line:745,column:5}}],line:733},"138":{loc:{start:{line:733,column:8},end:{line:733,column:69}},type:"binary-expr",locations:[{start:{line:733,column:8},end:{line:733,column:33}},{start:{line:733,column:37},end:{line:733,column:69}}],line:733},"139":{loc:{start:{line:736,column:6},end:{line:740,column:7}},type:"if",locations:[{start:{line:736,column:6},end:{line:740,column:7}},{start:{line:736,column:6},end:{line:740,column:7}}],line:736},"140":{loc:{start:{line:736,column:10},end:{line:736,column:66}},type:"binary-expr",locations:[{start:{line:736,column:10},end:{line:736,column:35}},{start:{line:736,column:39},end:{line:736,column:66}}],line:736},"141":{loc:{start:{line:747,column:4},end:{line:767,column:5}},type:"if",locations:[{start:{line:747,column:4},end:{line:767,column:5}},{start:{line:747,column:4},end:{line:767,column:5}}],line:747},"142":{loc:{start:{line:752,column:6},end:{line:760,column:7}},type:"if",locations:[{start:{line:752,column:6},end:{line:760,column:7}},{start:{line:752,column:6},end:{line:760,column:7}}],line:752},"143":{loc:{start:{line:753,column:8},end:{line:755,column:9}},type:"if",locations:[{start:{line:753,column:8},end:{line:755,column:9}},{start:{line:753,column:8},end:{line:755,column:9}}],line:753},"144":{loc:{start:{line:757,column:8},end:{line:759,column:9}},type:"if",locations:[{start:{line:757,column:8},end:{line:759,column:9}},{start:{line:757,column:8},end:{line:759,column:9}}],line:757},"145":{loc:{start:{line:769,column:4},end:{line:779,column:5}},type:"if",locations:[{start:{line:769,column:4},end:{line:779,column:5}},{start:{line:769,column:4},end:{line:779,column:5}}],line:769},"146":{loc:{start:{line:770,column:6},end:{line:778,column:7}},type:"if",locations:[{start:{line:770,column:6},end:{line:778,column:7}},{start:{line:770,column:6},end:{line:778,column:7}}],line:770},"147":{loc:{start:{line:781,column:4},end:{line:785,column:5}},type:"if",locations:[{start:{line:781,column:4},end:{line:785,column:5}},{start:{line:781,column:4},end:{line:785,column:5}}],line:781},"148":{loc:{start:{line:787,column:4},end:{line:791,column:5}},type:"if",locations:[{start:{line:787,column:4},end:{line:791,column:5}},{start:{line:787,column:4},end:{line:791,column:5}}],line:787},"149":{loc:{start:{line:793,column:4},end:{line:798,column:5}},type:"if",locations:[{start:{line:793,column:4},end:{line:798,column:5}},{start:{line:793,column:4},end:{line:798,column:5}}],line:793},"150":{loc:{start:{line:801,column:6},end:{line:830,column:7}},type:"if",locations:[{start:{line:801,column:6},end:{line:830,column:7}},{start:{line:801,column:6},end:{line:830,column:7}}],line:801},"151":{loc:{start:{line:801,column:10},end:{line:801,column:50}},type:"binary-expr",locations:[{start:{line:801,column:10},end:{line:801,column:25}},{start:{line:801,column:29},end:{line:801,column:50}}],line:801},"152":{loc:{start:{line:806,column:8},end:{line:826,column:9}},type:"if",locations:[{start:{line:806,column:8},end:{line:826,column:9}},{start:{line:806,column:8},end:{line:826,column:9}}],line:806},"153":{loc:{start:{line:809,column:10},end:{line:820,column:11}},type:"switch",locations:[{start:{line:810,column:12},end:{line:812,column:20}},{start:{line:814,column:12},end:{line:816,column:20}},{start:{line:818,column:12},end:{line:819,column:35}}],line:809},"154":{loc:{start:{line:822,column:32},end:{line:822,column:131}},type:"cond-expr",locations:[{start:{line:822,column:43},end:{line:822,column:100}},{start:{line:822,column:103},end:{line:822,column:131}}],line:822},"155":{loc:{start:{line:833,column:4},end:{line:835,column:5}},type:"if",locations:[{start:{line:833,column:4},end:{line:835,column:5}},{start:{line:833,column:4},end:{line:835,column:5}}],line:833},"156":{loc:{start:{line:850,column:4},end:{line:850,column:25}},type:"default-arg",locations:[{start:{line:850,column:23},end:{line:850,column:25}}],line:850},"157":{loc:{start:{line:851,column:4},end:{line:851,column:24}},type:"default-arg",locations:[{start:{line:851,column:22},end:{line:851,column:24}}],line:851},"158":{loc:{start:{line:874,column:32},end:{line:874,column:47}},type:"default-arg",locations:[{start:{line:874,column:42},end:{line:874,column:47}}],line:874},"159":{loc:{start:{line:875,column:4},end:{line:879,column:5}},type:"if",locations:[{start:{line:875,column:4},end:{line:879,column:5}},{start:{line:875,column:4},end:{line:879,column:5}}],line:875},"160":{loc:{start:{line:883,column:4},end:{line:887,column:5}},type:"if",locations:[{start:{line:883,column:4},end:{line:887,column:5}},{start:{line:883,column:4},end:{line:887,column:5}}],line:883},"161":{loc:{start:{line:889,column:4},end:{line:891,column:5}},type:"if",locations:[{start:{line:889,column:4},end:{line:891,column:5}},{start:{line:889,column:4},end:{line:891,column:5}}],line:889},"162":{loc:{start:{line:897,column:4},end:{line:911,column:5}},type:"if",locations:[{start:{line:897,column:4},end:{line:911,column:5}},{start:{line:897,column:4},end:{line:911,column:5}}],line:897},"163":{loc:{start:{line:897,column:8},end:{line:897,column:47}},type:"binary-expr",locations:[{start:{line:897,column:8},end:{line:897,column:21}},{start:{line:897,column:25},end:{line:897,column:47}}],line:897},"164":{loc:{start:{line:905,column:8},end:{line:907,column:9}},type:"if",locations:[{start:{line:905,column:8},end:{line:907,column:9}},{start:{line:905,column:8},end:{line:907,column:9}}],line:905},"165":{loc:{start:{line:915,column:4},end:{line:921,column:5}},type:"if",locations:[{start:{line:915,column:4},end:{line:921,column:5}},{start:{line:915,column:4},end:{line:921,column:5}}],line:915},"166":{loc:{start:{line:925,column:11},end:{line:925,column:31}},type:"binary-expr",locations:[{start:{line:925,column:11},end:{line:925,column:15}},{start:{line:925,column:19},end:{line:925,column:31}}],line:925},"167":{loc:{start:{line:927,column:6},end:{line:930,column:7}},type:"if",locations:[{start:{line:927,column:6},end:{line:930,column:7}},{start:{line:927,column:6},end:{line:930,column:7}}],line:927},"168":{loc:{start:{line:927,column:10},end:{line:927,column:154}},type:"binary-expr",locations:[{start:{line:927,column:10},end:{line:927,column:55}},{start:{line:927,column:59},end:{line:927,column:107}},{start:{line:927,column:111},end:{line:927,column:154}}],line:927},"169":{loc:{start:{line:947,column:64},end:{line:947,column:84}},type:"default-arg",locations:[{start:{line:947,column:82},end:{line:947,column:84}}],line:947},"170":{loc:{start:{line:948,column:11},end:{line:948,column:31}},type:"binary-expr",locations:[{start:{line:948,column:11},end:{line:948,column:15}},{start:{line:948,column:19},end:{line:948,column:31}}],line:948},"171":{loc:{start:{line:951,column:4},end:{line:953,column:5}},type:"if",locations:[{start:{line:951,column:4},end:{line:953,column:5}},{start:{line:951,column:4},end:{line:953,column:5}}],line:951},"172":{loc:{start:{line:955,column:4},end:{line:961,column:5}},type:"if",locations:[{start:{line:955,column:4},end:{line:961,column:5}},{start:{line:955,column:4},end:{line:961,column:5}}],line:955},"173":{loc:{start:{line:968,column:6},end:{line:970,column:7}},type:"if",locations:[{start:{line:968,column:6},end:{line:970,column:7}},{start:{line:968,column:6},end:{line:970,column:7}}],line:968},"174":{loc:{start:{line:968,column:10},end:{line:968,column:58}},type:"binary-expr",locations:[{start:{line:968,column:10},end:{line:968,column:31}},{start:{line:968,column:35},end:{line:968,column:58}}],line:968},"175":{loc:{start:{line:972,column:6},end:{line:974,column:7}},type:"if",locations:[{start:{line:972,column:6},end:{line:974,column:7}},{start:{line:972,column:6},end:{line:974,column:7}}],line:972},"176":{loc:{start:{line:972,column:10},end:{line:972,column:59}},type:"binary-expr",locations:[{start:{line:972,column:10},end:{line:972,column:32}},{start:{line:972,column:36},end:{line:972,column:59}}],line:972},"177":{loc:{start:{line:976,column:6},end:{line:990,column:7}},type:"if",locations:[{start:{line:976,column:6},end:{line:990,column:7}},{start:{line:976,column:6},end:{line:990,column:7}}],line:976},"178":{loc:{start:{line:981,column:10},end:{line:983,column:11}},type:"if",locations:[{start:{line:981,column:10},end:{line:983,column:11}},{start:{line:981,column:10},end:{line:983,column:11}}],line:981},"179":{loc:{start:{line:993,column:6},end:{line:995,column:7}},type:"if",locations:[{start:{line:993,column:6},end:{line:995,column:7}},{start:{line:993,column:6},end:{line:995,column:7}}],line:993},"180":{loc:{start:{line:997,column:6},end:{line:999,column:7}},type:"if",locations:[{start:{line:997,column:6},end:{line:999,column:7}},{start:{line:997,column:6},end:{line:999,column:7}}],line:997},"181":{loc:{start:{line:1008,column:11},end:{line:1008,column:31}},type:"binary-expr",locations:[{start:{line:1008,column:11},end:{line:1008,column:15}},{start:{line:1008,column:19},end:{line:1008,column:31}}],line:1008},"182":{loc:{start:{line:1018,column:6},end:{line:1020,column:7}},type:"if",locations:[{start:{line:1018,column:6},end:{line:1020,column:7}},{start:{line:1018,column:6},end:{line:1020,column:7}}],line:1018},"183":{loc:{start:{line:1018,column:10},end:{line:1018,column:90}},type:"binary-expr",locations:[{start:{line:1018,column:10},end:{line:1018,column:56}},{start:{line:1018,column:60},end:{line:1018,column:90}}],line:1018},"184":{loc:{start:{line:1032,column:11},end:{line:1032,column:31}},type:"binary-expr",locations:[{start:{line:1032,column:11},end:{line:1032,column:15}},{start:{line:1032,column:19},end:{line:1032,column:31}}],line:1032},"185":{loc:{start:{line:1038,column:4},end:{line:1063,column:5}},type:"if",locations:[{start:{line:1038,column:4},end:{line:1063,column:5}},{start:{line:1038,column:4},end:{line:1063,column:5}}],line:1038},"186":{loc:{start:{line:1071,column:6},end:{line:1074,column:7}},type:"if",locations:[{start:{line:1071,column:6},end:{line:1074,column:7}},{start:{line:1071,column:6},end:{line:1074,column:7}}],line:1071},"187":{loc:{start:{line:1076,column:6},end:{line:1080,column:7}},type:"if",locations:[{start:{line:1076,column:6},end:{line:1080,column:7}},{start:{line:1076,column:6},end:{line:1080,column:7}}],line:1076},"188":{loc:{start:{line:1086,column:6},end:{line:1088,column:7}},type:"if",locations:[{start:{line:1086,column:6},end:{line:1088,column:7}},{start:{line:1086,column:6},end:{line:1088,column:7}}],line:1086},"189":{loc:{start:{line:1098,column:8},end:{line:1100,column:9}},type:"if",locations:[{start:{line:1098,column:8},end:{line:1100,column:9}},{start:{line:1098,column:8},end:{line:1100,column:9}}],line:1098},"190":{loc:{start:{line:1116,column:11},end:{line:1116,column:31}},type:"binary-expr",locations:[{start:{line:1116,column:11},end:{line:1116,column:15}},{start:{line:1116,column:19},end:{line:1116,column:31}}],line:1116},"191":{loc:{start:{line:1132,column:6},end:{line:1157,column:7}},type:"if",locations:[{start:{line:1132,column:6},end:{line:1157,column:7}},{start:{line:1132,column:6},end:{line:1157,column:7}}],line:1132},"192":{loc:{start:{line:1140,column:10},end:{line:1146,column:11}},type:"if",locations:[{start:{line:1140,column:10},end:{line:1146,column:11}},{start:{line:1140,column:10},end:{line:1146,column:11}}],line:1140},"193":{loc:{start:{line:1148,column:10},end:{line:1150,column:11}},type:"if",locations:[{start:{line:1148,column:10},end:{line:1150,column:11}},{start:{line:1148,column:10},end:{line:1150,column:11}}],line:1148},"194":{loc:{start:{line:1164,column:6},end:{line:1173,column:7}},type:"if",locations:[{start:{line:1164,column:6},end:{line:1173,column:7}},{start:{line:1164,column:6},end:{line:1173,column:7}}],line:1164},"195":{loc:{start:{line:1227,column:8},end:{line:1229,column:9}},type:"if",locations:[{start:{line:1227,column:8},end:{line:1229,column:9}},{start:{line:1227,column:8},end:{line:1229,column:9}}],line:1227},"196":{loc:{start:{line:1253,column:6},end:{line:1255,column:7}},type:"if",locations:[{start:{line:1253,column:6},end:{line:1255,column:7}},{start:{line:1253,column:6},end:{line:1255,column:7}}],line:1253},"197":{loc:{start:{line:1270,column:6},end:{line:1272,column:7}},type:"if",locations:[{start:{line:1270,column:6},end:{line:1272,column:7}},{start:{line:1270,column:6},end:{line:1272,column:7}}],line:1270},"198":{loc:{start:{line:1297,column:6},end:{line:1299,column:7}},type:"if",locations:[{start:{line:1297,column:6},end:{line:1299,column:7}},{start:{line:1297,column:6},end:{line:1299,column:7}}],line:1297},"199":{loc:{start:{line:1315,column:6},end:{line:1317,column:7}},type:"if",locations:[{start:{line:1315,column:6},end:{line:1317,column:7}},{start:{line:1315,column:6},end:{line:1317,column:7}}],line:1315},"200":{loc:{start:{line:1321,column:6},end:{line:1327,column:7}},type:"if",locations:[{start:{line:1321,column:6},end:{line:1327,column:7}},{start:{line:1321,column:6},end:{line:1327,column:7}}],line:1321},"201":{loc:{start:{line:1323,column:29},end:{line:1323,column:53}},type:"binary-expr",locations:[{start:{line:1323,column:29},end:{line:1323,column:47}},{start:{line:1323,column:51},end:{line:1323,column:53}}],line:1323},"202":{loc:{start:{line:1331,column:6},end:{line:1353,column:7}},type:"if",locations:[{start:{line:1331,column:6},end:{line:1353,column:7}},{start:{line:1331,column:6},end:{line:1353,column:7}}],line:1331},"203":{loc:{start:{line:1331,column:10},end:{line:1331,column:60}},type:"binary-expr",locations:[{start:{line:1331,column:10},end:{line:1331,column:35}},{start:{line:1331,column:39},end:{line:1331,column:60}}],line:1331},"204":{loc:{start:{line:1332,column:8},end:{line:1334,column:9}},type:"if",locations:[{start:{line:1332,column:8},end:{line:1334,column:9}},{start:{line:1332,column:8},end:{line:1334,column:9}}],line:1332},"205":{loc:{start:{line:1332,column:12},end:{line:1332,column:160}},type:"binary-expr",locations:[{start:{line:1332,column:12},end:{line:1332,column:47}},{start:{line:1332,column:51},end:{line:1332,column:86}},{start:{line:1332,column:90},end:{line:1332,column:123}},{start:{line:1332,column:127},end:{line:1332,column:160}}],line:1332},"206":{loc:{start:{line:1336,column:8},end:{line:1342,column:9}},type:"if",locations:[{start:{line:1336,column:8},end:{line:1342,column:9}},{start:{line:1336,column:8},end:{line:1342,column:9}}],line:1336},"207":{loc:{start:{line:1337,column:10},end:{line:1341,column:11}},type:"if",locations:[{start:{line:1337,column:10},end:{line:1341,column:11}},{start:{line:1337,column:10},end:{line:1341,column:11}}],line:1337},"208":{loc:{start:{line:1344,column:8},end:{line:1350,column:9}},type:"if",locations:[{start:{line:1344,column:8},end:{line:1350,column:9}},{start:{line:1344,column:8},end:{line:1350,column:9}}],line:1344},"209":{loc:{start:{line:1344,column:12},end:{line:1344,column:143}},type:"binary-expr",locations:[{start:{line:1344,column:12},end:{line:1344,column:55}},{start:{line:1344,column:59},end:{line:1344,column:103}},{start:{line:1344,column:107},end:{line:1344,column:143}}],line:1344},"210":{loc:{start:{line:1345,column:10},end:{line:1349,column:11}},type:"if",locations:[{start:{line:1345,column:10},end:{line:1349,column:11}},{start:{line:1345,column:10},end:{line:1349,column:11}}],line:1345},"211":{loc:{start:{line:1355,column:6},end:{line:1405,column:7}},type:"switch",locations:[{start:{line:1356,column:8},end:{line:1363,column:16}},{start:{line:1365,column:8},end:{line:1367,column:16}},{start:{line:1369,column:8},end:{line:1376,column:16}},{start:{line:1378,column:8},end:{line:1378,column:22}},{start:{line:1379,column:8},end:{line:1379,column:21}},{start:{line:1380,column:8},end:{line:1380,column:22}},{start:{line:1381,column:8},end:{line:1381,column:22}},{start:{line:1382,column:8},end:{line:1384,column:16}},{start:{line:1386,column:8},end:{line:1388,column:16}},{start:{line:1390,column:8},end:{line:1395,column:11}},{start:{line:1397,column:8},end:{line:1401,column:16}},{start:{line:1403,column:8},end:{line:1404,column:74}}],line:1355},"212":{loc:{start:{line:1357,column:10},end:{line:1361,column:11}},type:"if",locations:[{start:{line:1357,column:10},end:{line:1361,column:11}},{start:{line:1357,column:10},end:{line:1361,column:11}}],line:1357},"213":{loc:{start:{line:1370,column:10},end:{line:1374,column:11}},type:"if",locations:[{start:{line:1370,column:10},end:{line:1374,column:11}},{start:{line:1370,column:10},end:{line:1374,column:11}}],line:1370},"214":{loc:{start:{line:1412,column:6},end:{line:1416,column:7}},type:"if",locations:[{start:{line:1412,column:6},end:{line:1416,column:7}},{start:{line:1412,column:6},end:{line:1416,column:7}}],line:1412},"215":{loc:{start:{line:1414,column:13},end:{line:1416,column:7}},type:"if",locations:[{start:{line:1414,column:13},end:{line:1416,column:7}},{start:{line:1414,column:13},end:{line:1416,column:7}}],line:1414},"216":{loc:{start:{line:1414,column:17},end:{line:1414,column:86}},type:"binary-expr",locations:[{start:{line:1414,column:17},end:{line:1414,column:41}},{start:{line:1414,column:45},end:{line:1414,column:86}}],line:1414},"217":{loc:{start:{line:1430,column:21},end:{line:1430,column:81}},type:"cond-expr",locations:[{start:{line:1430,column:44},end:{line:1430,column:66}},{start:{line:1430,column:69},end:{line:1430,column:81}}],line:1430},"218":{loc:{start:{line:1433,column:6},end:{line:1448,column:7}},type:"if",locations:[{start:{line:1433,column:6},end:{line:1448,column:7}},{start:{line:1433,column:6},end:{line:1448,column:7}}],line:1433},"219":{loc:{start:{line:1437,column:8},end:{line:1445,column:9}},type:"if",locations:[{start:{line:1437,column:8},end:{line:1445,column:9}},{start:{line:1437,column:8},end:{line:1445,column:9}}],line:1437},"220":{loc:{start:{line:1440,column:10},end:{line:1444,column:11}},type:"if",locations:[{start:{line:1440,column:10},end:{line:1444,column:11}},{start:{line:1440,column:10},end:{line:1444,column:11}}],line:1440},"221":{loc:{start:{line:1440,column:14},end:{line:1440,column:47}},type:"binary-expr",locations:[{start:{line:1440,column:14},end:{line:1440,column:21}},{start:{line:1440,column:25},end:{line:1440,column:47}}],line:1440},"222":{loc:{start:{line:1453,column:4},end:{line:1455,column:5}},type:"if",locations:[{start:{line:1453,column:4},end:{line:1455,column:5}},{start:{line:1453,column:4},end:{line:1455,column:5}}],line:1453},"223":{loc:{start:{line:1475,column:4},end:{line:1477,column:5}},type:"if",locations:[{start:{line:1475,column:4},end:{line:1477,column:5}},{start:{line:1475,column:4},end:{line:1477,column:5}}],line:1475},"224":{loc:{start:{line:1480,column:21},end:{line:1480,column:81}},type:"cond-expr",locations:[{start:{line:1480,column:44},end:{line:1480,column:66}},{start:{line:1480,column:69},end:{line:1480,column:81}}],line:1480},"225":{loc:{start:{line:1481,column:6},end:{line:1485,column:7}},type:"if",locations:[{start:{line:1481,column:6},end:{line:1485,column:7}},{start:{line:1481,column:6},end:{line:1485,column:7}}],line:1481},"226":{loc:{start:{line:1487,column:6},end:{line:1489,column:7}},type:"if",locations:[{start:{line:1487,column:6},end:{line:1489,column:7}},{start:{line:1487,column:6},end:{line:1489,column:7}}],line:1487},"227":{loc:{start:{line:1493,column:4},end:{line:1495,column:5}},type:"if",locations:[{start:{line:1493,column:4},end:{line:1495,column:5}},{start:{line:1493,column:4},end:{line:1495,column:5}}],line:1493},"228":{loc:{start:{line:1519,column:6},end:{line:1525,column:7}},type:"if",locations:[{start:{line:1519,column:6},end:{line:1525,column:7}},{start:{line:1519,column:6},end:{line:1525,column:7}}],line:1519},"229":{loc:{start:{line:1533,column:6},end:{line:1539,column:7}},type:"if",locations:[{start:{line:1533,column:6},end:{line:1539,column:7}},{start:{line:1533,column:6},end:{line:1539,column:7}}],line:1533},"230":{loc:{start:{line:1537,column:29},end:{line:1537,column:53}},type:"binary-expr",locations:[{start:{line:1537,column:29},end:{line:1537,column:47}},{start:{line:1537,column:51},end:{line:1537,column:53}}],line:1537},"231":{loc:{start:{line:1545,column:6},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1545,column:6},end:{line:1702,column:7}},{start:{line:1545,column:6},end:{line:1702,column:7}}],line:1545},"232":{loc:{start:{line:1547,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1547,column:13},end:{line:1702,column:7}},{start:{line:1547,column:13},end:{line:1702,column:7}}],line:1547},"233":{loc:{start:{line:1551,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1551,column:13},end:{line:1702,column:7}},{start:{line:1551,column:13},end:{line:1702,column:7}}],line:1551},"234":{loc:{start:{line:1567,column:10},end:{line:1573,column:11}},type:"if",locations:[{start:{line:1567,column:10},end:{line:1573,column:11}},{start:{line:1567,column:10},end:{line:1573,column:11}}],line:1567},"235":{loc:{start:{line:1568,column:12},end:{line:1572,column:13}},type:"if",locations:[{start:{line:1568,column:12},end:{line:1572,column:13}},{start:{line:1568,column:12},end:{line:1572,column:13}}],line:1568},"236":{loc:{start:{line:1579,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1579,column:13},end:{line:1702,column:7}},{start:{line:1579,column:13},end:{line:1702,column:7}}],line:1579},"237":{loc:{start:{line:1583,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1583,column:13},end:{line:1702,column:7}},{start:{line:1583,column:13},end:{line:1702,column:7}}],line:1583},"238":{loc:{start:{line:1587,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1587,column:13},end:{line:1702,column:7}},{start:{line:1587,column:13},end:{line:1702,column:7}}],line:1587},"239":{loc:{start:{line:1591,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1591,column:13},end:{line:1702,column:7}},{start:{line:1591,column:13},end:{line:1702,column:7}}],line:1591},"240":{loc:{start:{line:1595,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1595,column:13},end:{line:1702,column:7}},{start:{line:1595,column:13},end:{line:1702,column:7}}],line:1595},"241":{loc:{start:{line:1599,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1599,column:13},end:{line:1702,column:7}},{start:{line:1599,column:13},end:{line:1702,column:7}}],line:1599},"242":{loc:{start:{line:1604,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1604,column:13},end:{line:1702,column:7}},{start:{line:1604,column:13},end:{line:1702,column:7}}],line:1604},"243":{loc:{start:{line:1608,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1608,column:13},end:{line:1702,column:7}},{start:{line:1608,column:13},end:{line:1702,column:7}}],line:1608},"244":{loc:{start:{line:1612,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1612,column:13},end:{line:1702,column:7}},{start:{line:1612,column:13},end:{line:1702,column:7}}],line:1612},"245":{loc:{start:{line:1616,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1616,column:13},end:{line:1702,column:7}},{start:{line:1616,column:13},end:{line:1702,column:7}}],line:1616},"246":{loc:{start:{line:1620,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1620,column:13},end:{line:1702,column:7}},{start:{line:1620,column:13},end:{line:1702,column:7}}],line:1620},"247":{loc:{start:{line:1624,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1624,column:13},end:{line:1702,column:7}},{start:{line:1624,column:13},end:{line:1702,column:7}}],line:1624},"248":{loc:{start:{line:1628,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1628,column:13},end:{line:1702,column:7}},{start:{line:1628,column:13},end:{line:1702,column:7}}],line:1628},"249":{loc:{start:{line:1632,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1632,column:13},end:{line:1702,column:7}},{start:{line:1632,column:13},end:{line:1702,column:7}}],line:1632},"250":{loc:{start:{line:1637,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1637,column:13},end:{line:1702,column:7}},{start:{line:1637,column:13},end:{line:1702,column:7}}],line:1637},"251":{loc:{start:{line:1638,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1638,column:13},end:{line:1702,column:7}},{start:{line:1638,column:13},end:{line:1702,column:7}}],line:1638},"252":{loc:{start:{line:1642,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1642,column:13},end:{line:1702,column:7}},{start:{line:1642,column:13},end:{line:1702,column:7}}],line:1642},"253":{loc:{start:{line:1642,column:17},end:{line:1642,column:121}},type:"binary-expr",locations:[{start:{line:1642,column:17},end:{line:1642,column:47}},{start:{line:1642,column:51},end:{line:1642,column:75}},{start:{line:1642,column:79},end:{line:1642,column:121}}],line:1642},"254":{loc:{start:{line:1650,column:17},end:{line:1650,column:114}},type:"binary-expr",locations:[{start:{line:1650,column:17},end:{line:1650,column:22}},{start:{line:1650,column:26},end:{line:1650,column:52}},{start:{line:1650,column:56},end:{line:1650,column:81}},{start:{line:1650,column:85},end:{line:1650,column:114}}],line:1650},"255":{loc:{start:{line:1654,column:8},end:{line:1663,column:9}},type:"if",locations:[{start:{line:1654,column:8},end:{line:1663,column:9}},{start:{line:1654,column:8},end:{line:1663,column:9}}],line:1654},"256":{loc:{start:{line:1668,column:17},end:{line:1668,column:111}},type:"binary-expr",locations:[{start:{line:1668,column:17},end:{line:1668,column:22}},{start:{line:1668,column:26},end:{line:1668,column:49}},{start:{line:1668,column:53},end:{line:1668,column:78}},{start:{line:1668,column:82},end:{line:1668,column:111}}],line:1668},"257":{loc:{start:{line:1676,column:8},end:{line:1679,column:9}},type:"if",locations:[{start:{line:1676,column:8},end:{line:1679,column:9}},{start:{line:1676,column:8},end:{line:1679,column:9}}],line:1676},"258":{loc:{start:{line:1684,column:13},end:{line:1702,column:7}},type:"if",locations:[{start:{line:1684,column:13},end:{line:1702,column:7}},{start:{line:1684,column:13},end:{line:1702,column:7}}],line:1684},"259":{loc:{start:{line:1684,column:17},end:{line:1684,column:115}},type:"binary-expr",locations:[{start:{line:1684,column:17},end:{line:1684,column:42}},{start:{line:1684,column:46},end:{line:1684,column:70}},{start:{line:1684,column:74},end:{line:1684,column:115}}],line:1684},"260":{loc:{start:{line:1687,column:8},end:{line:1695,column:9}},type:"if",locations:[{start:{line:1687,column:8},end:{line:1695,column:9}},{start:{line:1687,column:8},end:{line:1695,column:9}}],line:1687},"261":{loc:{start:{line:1712,column:24},end:{line:1712,column:80}},type:"cond-expr",locations:[{start:{line:1712,column:51},end:{line:1712,column:75}},{start:{line:1712,column:78},end:{line:1712,column:80}}],line:1712},"262":{loc:{start:{line:1714,column:21},end:{line:1714,column:81}},type:"cond-expr",locations:[{start:{line:1714,column:44},end:{line:1714,column:66}},{start:{line:1714,column:69},end:{line:1714,column:81}}],line:1714},"263":{loc:{start:{line:1716,column:4},end:{line:1718,column:5}},type:"if",locations:[{start:{line:1716,column:4},end:{line:1718,column:5}},{start:{line:1716,column:4},end:{line:1718,column:5}}],line:1716},"264":{loc:{start:{line:1729,column:6},end:{line:1731,column:7}},type:"if",locations:[{start:{line:1729,column:6},end:{line:1731,column:7}},{start:{line:1729,column:6},end:{line:1731,column:7}}],line:1729},"265":{loc:{start:{line:1756,column:25},end:{line:1756,column:81}},type:"cond-expr",locations:[{start:{line:1756,column:52},end:{line:1756,column:76}},{start:{line:1756,column:79},end:{line:1756,column:81}}],line:1756},"266":{loc:{start:{line:1757,column:25},end:{line:1757,column:70}},type:"cond-expr",locations:[{start:{line:1757,column:36},end:{line:1757,column:65}},{start:{line:1757,column:68},end:{line:1757,column:70}}],line:1757},"267":{loc:{start:{line:1759,column:4},end:{line:1761,column:5}},type:"if",locations:[{start:{line:1759,column:4},end:{line:1761,column:5}},{start:{line:1759,column:4},end:{line:1761,column:5}}],line:1759},"268":{loc:{start:{line:1763,column:24},end:{line:1763,column:69}},type:"cond-expr",locations:[{start:{line:1763,column:34},end:{line:1763,column:64}},{start:{line:1763,column:67},end:{line:1763,column:69}}],line:1763},"269":{loc:{start:{line:1765,column:4},end:{line:1767,column:5}},type:"if",locations:[{start:{line:1765,column:4},end:{line:1767,column:5}},{start:{line:1765,column:4},end:{line:1767,column:5}}],line:1765},"270":{loc:{start:{line:1771,column:4},end:{line:1783,column:5}},type:"if",locations:[{start:{line:1771,column:4},end:{line:1783,column:5}},{start:{line:1771,column:4},end:{line:1783,column:5}}],line:1771},"271":{loc:{start:{line:1776,column:8},end:{line:1778,column:9}},type:"if",locations:[{start:{line:1776,column:8},end:{line:1778,column:9}},{start:{line:1776,column:8},end:{line:1778,column:9}}],line:1776},"272":{loc:{start:{line:1782,column:20},end:{line:1782,column:99}},type:"cond-expr",locations:[{start:{line:1782,column:73},end:{line:1782,column:94}},{start:{line:1782,column:97},end:{line:1782,column:99}}],line:1782},"273":{loc:{start:{line:1782,column:20},end:{line:1782,column:70}},type:"binary-expr",locations:[{start:{line:1782,column:20},end:{line:1782,column:38}},{start:{line:1782,column:42},end:{line:1782,column:70}}],line:1782},"274":{loc:{start:{line:1785,column:4},end:{line:1787,column:5}},type:"if",locations:[{start:{line:1785,column:4},end:{line:1787,column:5}},{start:{line:1785,column:4},end:{line:1787,column:5}}],line:1785},"275":{loc:{start:{line:1785,column:8},end:{line:1785,column:58}},type:"binary-expr",locations:[{start:{line:1785,column:8},end:{line:1785,column:19}},{start:{line:1785,column:23},end:{line:1785,column:58}}],line:1785},"276":{loc:{start:{line:1791,column:4},end:{line:1812,column:5}},type:"if",locations:[{start:{line:1791,column:4},end:{line:1812,column:5}},{start:{line:1791,column:4},end:{line:1812,column:5}}],line:1791},"277":{loc:{start:{line:1795,column:8},end:{line:1800,column:9}},type:"if",locations:[{start:{line:1795,column:8},end:{line:1800,column:9}},{start:{line:1795,column:8},end:{line:1800,column:9}}],line:1795},"278":{loc:{start:{line:1798,column:15},end:{line:1800,column:9}},type:"if",locations:[{start:{line:1798,column:15},end:{line:1800,column:9}},{start:{line:1798,column:15},end:{line:1800,column:9}}],line:1798},"279":{loc:{start:{line:1798,column:19},end:{line:1798,column:119}},type:"binary-expr",locations:[{start:{line:1798,column:19},end:{line:1798,column:33}},{start:{line:1798,column:38},end:{line:1798,column:56}},{start:{line:1798,column:60},end:{line:1798,column:98}},{start:{line:1798,column:102},end:{line:1798,column:118}}],line:1798},"280":{loc:{start:{line:1805,column:8},end:{line:1807,column:9}},type:"if",locations:[{start:{line:1805,column:8},end:{line:1807,column:9}},{start:{line:1805,column:8},end:{line:1807,column:9}}],line:1805},"281":{loc:{start:{line:1815,column:15},end:{line:1815,column:83}},type:"cond-expr",locations:[{start:{line:1815,column:25},end:{line:1815,column:67}},{start:{line:1815,column:70},end:{line:1815,column:83}}],line:1815},"282":{loc:{start:{line:1818,column:6},end:{line:1820,column:7}},type:"if",locations:[{start:{line:1818,column:6},end:{line:1820,column:7}},{start:{line:1818,column:6},end:{line:1820,column:7}}],line:1818},"283":{loc:{start:{line:1824,column:6},end:{line:1826,column:7}},type:"if",locations:[{start:{line:1824,column:6},end:{line:1826,column:7}},{start:{line:1824,column:6},end:{line:1826,column:7}}],line:1824},"284":{loc:{start:{line:1836,column:6},end:{line:1842,column:7}},type:"if",locations:[{start:{line:1836,column:6},end:{line:1842,column:7}},{start:{line:1836,column:6},end:{line:1842,column:7}}],line:1836},"285":{loc:{start:{line:1836,column:10},end:{line:1836,column:74}},type:"binary-expr",locations:[{start:{line:1836,column:10},end:{line:1836,column:53}},{start:{line:1836,column:57},end:{line:1836,column:74}}],line:1836},"286":{loc:{start:{line:1844,column:6},end:{line:1849,column:7}},type:"if",locations:[{start:{line:1844,column:6},end:{line:1849,column:7}},{start:{line:1844,column:6},end:{line:1849,column:7}}],line:1844},"287":{loc:{start:{line:1851,column:6},end:{line:1857,column:7}},type:"if",locations:[{start:{line:1851,column:6},end:{line:1857,column:7}},{start:{line:1851,column:6},end:{line:1857,column:7}}],line:1851},"288":{loc:{start:{line:1851,column:10},end:{line:1851,column:75}},type:"binary-expr",locations:[{start:{line:1851,column:10},end:{line:1851,column:27}},{start:{line:1851,column:31},end:{line:1851,column:75}}],line:1851},"289":{loc:{start:{line:1859,column:6},end:{line:1869,column:7}},type:"if",locations:[{start:{line:1859,column:6},end:{line:1869,column:7}},{start:{line:1859,column:6},end:{line:1869,column:7}}],line:1859},"290":{loc:{start:{line:1859,column:10},end:{line:1859,column:74}},type:"binary-expr",locations:[{start:{line:1859,column:10},end:{line:1859,column:27}},{start:{line:1859,column:31},end:{line:1859,column:74}}],line:1859},"291":{loc:{start:{line:1871,column:6},end:{line:1876,column:7}},type:"if",locations:[{start:{line:1871,column:6},end:{line:1876,column:7}},{start:{line:1871,column:6},end:{line:1876,column:7}}],line:1871},"292":{loc:{start:{line:1871,column:10},end:{line:1871,column:71}},type:"binary-expr",locations:[{start:{line:1871,column:10},end:{line:1871,column:27}},{start:{line:1871,column:31},end:{line:1871,column:71}}],line:1871},"293":{loc:{start:{line:1879,column:4},end:{line:1881,column:5}},type:"if",locations:[{start:{line:1879,column:4},end:{line:1881,column:5}},{start:{line:1879,column:4},end:{line:1881,column:5}}],line:1879},"294":{loc:{start:{line:1883,column:4},end:{line:1885,column:5}},type:"if",locations:[{start:{line:1883,column:4},end:{line:1885,column:5}},{start:{line:1883,column:4},end:{line:1885,column:5}}],line:1883},"295":{loc:{start:{line:1887,column:4},end:{line:1892,column:5}},type:"if",locations:[{start:{line:1887,column:4},end:{line:1892,column:5}},{start:{line:1887,column:4},end:{line:1892,column:5}}],line:1887},"296":{loc:{start:{line:1894,column:4},end:{line:1899,column:5}},type:"if",locations:[{start:{line:1894,column:4},end:{line:1899,column:5}},{start:{line:1894,column:4},end:{line:1899,column:5}}],line:1894},"297":{loc:{start:{line:1901,column:4},end:{line:1906,column:5}},type:"if",locations:[{start:{line:1901,column:4},end:{line:1906,column:5}},{start:{line:1901,column:4},end:{line:1906,column:5}}],line:1901},"298":{loc:{start:{line:1908,column:4},end:{line:1913,column:5}},type:"if",locations:[{start:{line:1908,column:4},end:{line:1913,column:5}},{start:{line:1908,column:4},end:{line:1913,column:5}}],line:1908},"299":{loc:{start:{line:1915,column:4},end:{line:1920,column:5}},type:"if",locations:[{start:{line:1915,column:4},end:{line:1920,column:5}},{start:{line:1915,column:4},end:{line:1920,column:5}}],line:1915},"300":{loc:{start:{line:1923,column:6},end:{line:1925,column:7}},type:"if",locations:[{start:{line:1923,column:6},end:{line:1925,column:7}},{start:{line:1923,column:6},end:{line:1925,column:7}}],line:1923},"301":{loc:{start:{line:1927,column:6},end:{line:1932,column:7}},type:"if",locations:[{start:{line:1927,column:6},end:{line:1932,column:7}},{start:{line:1927,column:6},end:{line:1932,column:7}}],line:1927},"302":{loc:{start:{line:1948,column:6},end:{line:1954,column:7}},type:"if",locations:[{start:{line:1948,column:6},end:{line:1954,column:7}},{start:{line:1948,column:6},end:{line:1954,column:7}}],line:1948},"303":{loc:{start:{line:1948,column:10},end:{line:1948,column:97}},type:"binary-expr",locations:[{start:{line:1948,column:10},end:{line:1948,column:55}},{start:{line:1948,column:59},end:{line:1948,column:97}}],line:1948},"304":{loc:{start:{line:1949,column:13},end:{line:1954,column:7}},type:"if",locations:[{start:{line:1949,column:13},end:{line:1954,column:7}},{start:{line:1949,column:13},end:{line:1954,column:7}}],line:1949},"305":{loc:{start:{line:1949,column:17},end:{line:1949,column:107}},type:"binary-expr",locations:[{start:{line:1949,column:17},end:{line:1949,column:65}},{start:{line:1949,column:69},end:{line:1949,column:107}}],line:1949},"306":{loc:{start:{line:1959,column:56},end:{line:1959,column:71}},type:"default-arg",locations:[{start:{line:1959,column:67},end:{line:1959,column:71}}],line:1959},"307":{loc:{start:{line:1969,column:25},end:{line:1969,column:81}},type:"cond-expr",locations:[{start:{line:1969,column:52},end:{line:1969,column:76}},{start:{line:1969,column:79},end:{line:1969,column:81}}],line:1969},"308":{loc:{start:{line:1972,column:4},end:{line:1976,column:5}},type:"if",locations:[{start:{line:1972,column:4},end:{line:1976,column:5}},{start:{line:1972,column:4},end:{line:1976,column:5}}],line:1972},"309":{loc:{start:{line:1972,column:8},end:{line:1972,column:45}},type:"binary-expr",locations:[{start:{line:1972,column:8},end:{line:1972,column:32}},{start:{line:1972,column:36},end:{line:1972,column:45}}],line:1972},"310":{loc:{start:{line:1979,column:6},end:{line:1983,column:7}},type:"if",locations:[{start:{line:1979,column:6},end:{line:1983,column:7}},{start:{line:1979,column:6},end:{line:1983,column:7}}],line:1979},"311":{loc:{start:{line:1979,column:10},end:{line:1979,column:74}},type:"binary-expr",locations:[{start:{line:1979,column:10},end:{line:1979,column:41}},{start:{line:1979,column:45},end:{line:1979,column:74}}],line:1979},"312":{loc:{start:{line:1980,column:15},end:{line:1980,column:46}},type:"cond-expr",locations:[{start:{line:1980,column:34},end:{line:1980,column:42}},{start:{line:1980,column:45},end:{line:1980,column:46}}],line:1980},"313":{loc:{start:{line:1985,column:6},end:{line:1987,column:7}},type:"if",locations:[{start:{line:1985,column:6},end:{line:1987,column:7}},{start:{line:1985,column:6},end:{line:1987,column:7}}],line:1985},"314":{loc:{start:{line:1999,column:4},end:{line:2002,column:5}},type:"if",locations:[{start:{line:1999,column:4},end:{line:2002,column:5}},{start:{line:1999,column:4},end:{line:2002,column:5}}],line:1999},"315":{loc:{start:{line:2004,column:25},end:{line:2004,column:111}},type:"binary-expr",locations:[{start:{line:2004,column:25},end:{line:2004,column:38}},{start:{line:2004,column:42},end:{line:2004,column:66}},{start:{line:2004,column:70},end:{line:2004,column:111}}],line:2004},"316":{loc:{start:{line:2005,column:27},end:{line:2005,column:115}},type:"binary-expr",locations:[{start:{line:2005,column:27},end:{line:2005,column:40}},{start:{line:2005,column:44},end:{line:2005,column:68}},{start:{line:2005,column:72},end:{line:2005,column:115}}],line:2005},"317":{loc:{start:{line:2014,column:25},end:{line:2014,column:81}},type:"cond-expr",locations:[{start:{line:2014,column:52},end:{line:2014,column:76}},{start:{line:2014,column:79},end:{line:2014,column:81}}],line:2014},"318":{loc:{start:{line:2015,column:24},end:{line:2015,column:68}},type:"cond-expr",locations:[{start:{line:2015,column:39},end:{line:2015,column:61}},{start:{line:2015,column:64},end:{line:2015,column:68}}],line:2015},"319":{loc:{start:{line:2018,column:4},end:{line:2020,column:5}},type:"if",locations:[{start:{line:2018,column:4},end:{line:2020,column:5}},{start:{line:2018,column:4},end:{line:2020,column:5}}],line:2018},"320":{loc:{start:{line:2023,column:6},end:{line:2025,column:7}},type:"if",locations:[{start:{line:2023,column:6},end:{line:2025,column:7}},{start:{line:2023,column:6},end:{line:2025,column:7}}],line:2023},"321":{loc:{start:{line:2029,column:6},end:{line:2042,column:7}},type:"if",locations:[{start:{line:2029,column:6},end:{line:2042,column:7}},{start:{line:2029,column:6},end:{line:2042,column:7}}],line:2029},"322":{loc:{start:{line:2032,column:10},end:{line:2034,column:11}},type:"if",locations:[{start:{line:2032,column:10},end:{line:2034,column:11}},{start:{line:2032,column:10},end:{line:2034,column:11}}],line:2032},"323":{loc:{start:{line:2065,column:6},end:{line:2153,column:7}},type:"if",locations:[{start:{line:2065,column:6},end:{line:2153,column:7}},{start:{line:2065,column:6},end:{line:2153,column:7}}],line:2065},"324":{loc:{start:{line:2069,column:10},end:{line:2071,column:11}},type:"if",locations:[{start:{line:2069,column:10},end:{line:2071,column:11}},{start:{line:2069,column:10},end:{line:2071,column:11}}],line:2069},"325":{loc:{start:{line:2069,column:14},end:{line:2069,column:51}},type:"binary-expr",locations:[{start:{line:2069,column:14},end:{line:2069,column:28}},{start:{line:2069,column:32},end:{line:2069,column:51}}],line:2069},"326":{loc:{start:{line:2073,column:10},end:{line:2079,column:11}},type:"if",locations:[{start:{line:2073,column:10},end:{line:2079,column:11}},{start:{line:2073,column:10},end:{line:2079,column:11}}],line:2073},"327":{loc:{start:{line:2073,column:14},end:{line:2073,column:74}},type:"binary-expr",locations:[{start:{line:2073,column:14},end:{line:2073,column:29}},{start:{line:2073,column:33},end:{line:2073,column:58}},{start:{line:2073,column:62},end:{line:2073,column:74}}],line:2073},"328":{loc:{start:{line:2081,column:10},end:{line:2116,column:11}},type:"if",locations:[{start:{line:2081,column:10},end:{line:2116,column:11}},{start:{line:2081,column:10},end:{line:2116,column:11}}],line:2081},"329":{loc:{start:{line:2081,column:14},end:{line:2081,column:93}},type:"binary-expr",locations:[{start:{line:2081,column:14},end:{line:2081,column:29}},{start:{line:2081,column:33},end:{line:2081,column:58}},{start:{line:2081,column:62},end:{line:2081,column:93}}],line:2081},"330":{loc:{start:{line:2086,column:14},end:{line:2109,column:15}},type:"if",locations:[{start:{line:2086,column:14},end:{line:2109,column:15}},{start:{line:2086,column:14},end:{line:2109,column:15}}],line:2086},"331":{loc:{start:{line:2086,column:18},end:{line:2086,column:66}},type:"binary-expr",locations:[{start:{line:2086,column:18},end:{line:2086,column:50}},{start:{line:2086,column:54},end:{line:2086,column:66}}],line:2086},"332":{loc:{start:{line:2089,column:16},end:{line:2091,column:17}},type:"if",locations:[{start:{line:2089,column:16},end:{line:2091,column:17}},{start:{line:2089,column:16},end:{line:2091,column:17}}],line:2089},"333":{loc:{start:{line:2100,column:16},end:{line:2108,column:17}},type:"if",locations:[{start:{line:2100,column:16},end:{line:2108,column:17}},{start:{line:2100,column:16},end:{line:2108,column:17}}],line:2100},"334":{loc:{start:{line:2101,column:18},end:{line:2103,column:19}},type:"if",locations:[{start:{line:2101,column:18},end:{line:2103,column:19}},{start:{line:2101,column:18},end:{line:2103,column:19}}],line:2101},"335":{loc:{start:{line:2118,column:10},end:{line:2149,column:11}},type:"if",locations:[{start:{line:2118,column:10},end:{line:2149,column:11}},{start:{line:2118,column:10},end:{line:2149,column:11}}],line:2118},"336":{loc:{start:{line:2119,column:12},end:{line:2130,column:13}},type:"if",locations:[{start:{line:2119,column:12},end:{line:2130,column:13}},{start:{line:2119,column:12},end:{line:2130,column:13}}],line:2119},"337":{loc:{start:{line:2120,column:14},end:{line:2129,column:15}},type:"if",locations:[{start:{line:2120,column:14},end:{line:2129,column:15}},{start:{line:2120,column:14},end:{line:2129,column:15}}],line:2120},"338":{loc:{start:{line:2132,column:12},end:{line:2136,column:13}},type:"if",locations:[{start:{line:2132,column:12},end:{line:2136,column:13}},{start:{line:2132,column:12},end:{line:2136,column:13}}],line:2132},"339":{loc:{start:{line:2138,column:12},end:{line:2142,column:13}},type:"if",locations:[{start:{line:2138,column:12},end:{line:2142,column:13}},{start:{line:2138,column:12},end:{line:2142,column:13}}],line:2138},"340":{loc:{start:{line:2144,column:12},end:{line:2148,column:13}},type:"if",locations:[{start:{line:2144,column:12},end:{line:2148,column:13}},{start:{line:2144,column:12},end:{line:2148,column:13}}],line:2144},"341":{loc:{start:{line:2155,column:6},end:{line:2169,column:7}},type:"if",locations:[{start:{line:2155,column:6},end:{line:2169,column:7}},{start:{line:2155,column:6},end:{line:2169,column:7}}],line:2155},"342":{loc:{start:{line:2156,column:8},end:{line:2158,column:9}},type:"if",locations:[{start:{line:2156,column:8},end:{line:2158,column:9}},{start:{line:2156,column:8},end:{line:2158,column:9}}],line:2156},"343":{loc:{start:{line:2163,column:10},end:{line:2167,column:11}},type:"if",locations:[{start:{line:2163,column:10},end:{line:2167,column:11}},{start:{line:2163,column:10},end:{line:2167,column:11}}],line:2163},"344":{loc:{start:{line:2163,column:14},end:{line:2163,column:43}},type:"binary-expr",locations:[{start:{line:2163,column:14},end:{line:2163,column:25}},{start:{line:2163,column:29},end:{line:2163,column:43}}],line:2163},"345":{loc:{start:{line:2171,column:6},end:{line:2209,column:7}},type:"if",locations:[{start:{line:2171,column:6},end:{line:2209,column:7}},{start:{line:2171,column:6},end:{line:2209,column:7}}],line:2171},"346":{loc:{start:{line:2173,column:24},end:{line:2173,column:100}},type:"cond-expr",locations:[{start:{line:2173,column:84},end:{line:2173,column:90}},{start:{line:2173,column:93},end:{line:2173,column:100}}],line:2173},"347":{loc:{start:{line:2175,column:8},end:{line:2183,column:9}},type:"if",locations:[{start:{line:2175,column:8},end:{line:2183,column:9}},{start:{line:2175,column:8},end:{line:2183,column:9}}],line:2175},"348":{loc:{start:{line:2189,column:12},end:{line:2194,column:13}},type:"if",locations:[{start:{line:2189,column:12},end:{line:2194,column:13}},{start:{line:2189,column:12},end:{line:2194,column:13}}],line:2189},"349":{loc:{start:{line:2197,column:10},end:{line:2199,column:11}},type:"if",locations:[{start:{line:2197,column:10},end:{line:2199,column:11}},{start:{line:2197,column:10},end:{line:2199,column:11}}],line:2197},"350":{loc:{start:{line:2201,column:10},end:{line:2205,column:11}},type:"if",locations:[{start:{line:2201,column:10},end:{line:2205,column:11}},{start:{line:2201,column:10},end:{line:2205,column:11}}],line:2201},"351":{loc:{start:{line:2201,column:14},end:{line:2201,column:93}},type:"binary-expr",locations:[{start:{line:2201,column:14},end:{line:2201,column:34}},{start:{line:2201,column:38},end:{line:2201,column:63}},{start:{line:2201,column:67},end:{line:2201,column:93}}],line:2201},"352":{loc:{start:{line:2208,column:23},end:{line:2208,column:90}},type:"cond-expr",locations:[{start:{line:2208,column:45},end:{line:2208,column:85}},{start:{line:2208,column:88},end:{line:2208,column:90}}],line:2208},"353":{loc:{start:{line:2211,column:6},end:{line:2215,column:7}},type:"if",locations:[{start:{line:2211,column:6},end:{line:2215,column:7}},{start:{line:2211,column:6},end:{line:2215,column:7}}],line:2211},"354":{loc:{start:{line:2217,column:6},end:{line:2221,column:7}},type:"if",locations:[{start:{line:2217,column:6},end:{line:2221,column:7}},{start:{line:2217,column:6},end:{line:2221,column:7}}],line:2217},"355":{loc:{start:{line:2223,column:6},end:{line:2234,column:7}},type:"if",locations:[{start:{line:2223,column:6},end:{line:2234,column:7}},{start:{line:2223,column:6},end:{line:2234,column:7}}],line:2223},"356":{loc:{start:{line:2227,column:30},end:{line:2227,column:62}},type:"cond-expr",locations:[{start:{line:2227,column:48},end:{line:2227,column:53}},{start:{line:2227,column:56},end:{line:2227,column:62}}],line:2227},"357":{loc:{start:{line:2233,column:22},end:{line:2233,column:91}},type:"cond-expr",locations:[{start:{line:2233,column:65},end:{line:2233,column:86}},{start:{line:2233,column:89},end:{line:2233,column:91}}],line:2233},"358":{loc:{start:{line:2233,column:22},end:{line:2233,column:62}},type:"binary-expr",locations:[{start:{line:2233,column:22},end:{line:2233,column:40}},{start:{line:2233,column:44},end:{line:2233,column:62}}],line:2233},"359":{loc:{start:{line:2237,column:4},end:{line:2243,column:5}},type:"if",locations:[{start:{line:2237,column:4},end:{line:2243,column:5}},{start:{line:2237,column:4},end:{line:2243,column:5}}],line:2237},"360":{loc:{start:{line:2239,column:8},end:{line:2241,column:9}},type:"if",locations:[{start:{line:2239,column:8},end:{line:2241,column:9}},{start:{line:2239,column:8},end:{line:2241,column:9}}],line:2239},"361":{loc:{start:{line:2239,column:12},end:{line:2239,column:33}},type:"binary-expr",locations:[{start:{line:2239,column:12},end:{line:2239,column:13}},{start:{line:2239,column:17},end:{line:2239,column:33}}],line:2239},"362":{loc:{start:{line:2246,column:15},end:{line:2246,column:83}},type:"cond-expr",locations:[{start:{line:2246,column:25},end:{line:2246,column:67}},{start:{line:2246,column:70},end:{line:2246,column:83}}],line:2246},"363":{loc:{start:{line:2248,column:6},end:{line:2250,column:7}},type:"if",locations:[{start:{line:2248,column:6},end:{line:2250,column:7}},{start:{line:2248,column:6},end:{line:2250,column:7}}],line:2248},"364":{loc:{start:{line:2254,column:8},end:{line:2256,column:9}},type:"if",locations:[{start:{line:2254,column:8},end:{line:2256,column:9}},{start:{line:2254,column:8},end:{line:2256,column:9}}],line:2254},"365":{loc:{start:{line:2258,column:8},end:{line:2265,column:9}},type:"if",locations:[{start:{line:2258,column:8},end:{line:2265,column:9}},{start:{line:2258,column:8},end:{line:2265,column:9}}],line:2258},"366":{loc:{start:{line:2267,column:8},end:{line:2269,column:9}},type:"if",locations:[{start:{line:2267,column:8},end:{line:2269,column:9}},{start:{line:2267,column:8},end:{line:2269,column:9}}],line:2267},"367":{loc:{start:{line:2283,column:8},end:{line:2285,column:9}},type:"if",locations:[{start:{line:2283,column:8},end:{line:2285,column:9}},{start:{line:2283,column:8},end:{line:2285,column:9}}],line:2283},"368":{loc:{start:{line:2283,column:12},end:{line:2283,column:110}},type:"binary-expr",locations:[{start:{line:2283,column:12},end:{line:2283,column:55}},{start:{line:2283,column:59},end:{line:2283,column:110}}],line:2283},"369":{loc:{start:{line:2311,column:12},end:{line:2311,column:32}},type:"binary-expr",locations:[{start:{line:2311,column:12},end:{line:2311,column:16}},{start:{line:2311,column:20},end:{line:2311,column:32}}],line:2311},"370":{loc:{start:{line:2317,column:11},end:{line:2317,column:31}},type:"binary-expr",locations:[{start:{line:2317,column:11},end:{line:2317,column:15}},{start:{line:2317,column:19},end:{line:2317,column:31}}],line:2317},"371":{loc:{start:{line:2325,column:11},end:{line:2325,column:31}},type:"binary-expr",locations:[{start:{line:2325,column:11},end:{line:2325,column:15}},{start:{line:2325,column:19},end:{line:2325,column:31}}],line:2325},"372":{loc:{start:{line:2371,column:62},end:{line:2371,column:85}},type:"default-arg",locations:[{start:{line:2371,column:80},end:{line:2371,column:85}}],line:2371},"373":{loc:{start:{line:2371,column:87},end:{line:2371,column:99}},type:"default-arg",locations:[{start:{line:2371,column:97},end:{line:2371,column:99}}],line:2371},"374":{loc:{start:{line:2372,column:17},end:{line:2372,column:73}},type:"cond-expr",locations:[{start:{line:2372,column:46},end:{line:2372,column:58}},{start:{line:2372,column:61},end:{line:2372,column:73}}],line:2372},"375":{loc:{start:{line:2374,column:29},end:{line:2378,column:5}},type:"cond-expr",locations:[{start:{line:2374,column:49},end:{line:2376,column:5}},{start:{line:2376,column:8},end:{line:2378,column:5}}],line:2374},"376":{loc:{start:{line:2379,column:31},end:{line:2379,column:195}},type:"cond-expr",locations:[{start:{line:2379,column:49},end:{line:2379,column:134}},{start:{line:2379,column:137},end:{line:2379,column:195}}],line:2379},"377":{loc:{start:{line:2382,column:6},end:{line:2388,column:7}},type:"if",locations:[{start:{line:2382,column:6},end:{line:2388,column:7}},{start:{line:2382,column:6},end:{line:2388,column:7}}],line:2382},"378":{loc:{start:{line:2382,column:10},end:{line:2382,column:104}},type:"binary-expr",locations:[{start:{line:2382,column:10},end:{line:2382,column:55}},{start:{line:2382,column:59},end:{line:2382,column:104}}],line:2382},"379":{loc:{start:{line:2383,column:13},end:{line:2388,column:7}},type:"if",locations:[{start:{line:2383,column:13},end:{line:2388,column:7}},{start:{line:2383,column:13},end:{line:2388,column:7}}],line:2383},"380":{loc:{start:{line:2383,column:17},end:{line:2383,column:114}},type:"binary-expr",locations:[{start:{line:2383,column:17},end:{line:2383,column:65}},{start:{line:2383,column:69},end:{line:2383,column:114}}],line:2383},"381":{loc:{start:{line:2397,column:2},end:{line:2399,column:3}},type:"if",locations:[{start:{line:2397,column:2},end:{line:2399,column:3}},{start:{line:2397,column:2},end:{line:2399,column:3}}],line:2397},"382":{loc:{start:{line:2401,column:2},end:{line:2403,column:3}},type:"if",locations:[{start:{line:2401,column:2},end:{line:2403,column:3}},{start:{line:2401,column:2},end:{line:2403,column:3}}],line:2401},"383":{loc:{start:{line:2401,column:6},end:{line:2401,column:106}},type:"binary-expr",locations:[{start:{line:2401,column:6},end:{line:2401,column:54}},{start:{line:2401,column:58},end:{line:2401,column:106}}],line:2401},"384":{loc:{start:{line:2411,column:6},end:{line:2414,column:7}},type:"if",locations:[{start:{line:2411,column:6},end:{line:2414,column:7}},{start:{line:2411,column:6},end:{line:2414,column:7}}],line:2411},"385":{loc:{start:{line:2411,column:10},end:{line:2411,column:48}},type:"binary-expr",locations:[{start:{line:2411,column:10},end:{line:2411,column:27}},{start:{line:2411,column:31},end:{line:2411,column:48}}],line:2411},"386":{loc:{start:{line:2420,column:2},end:{line:2422,column:3}},type:"if",locations:[{start:{line:2420,column:2},end:{line:2422,column:3}},{start:{line:2420,column:2},end:{line:2422,column:3}}],line:2420},"387":{loc:{start:{line:2433,column:2},end:{line:2435,column:3}},type:"if",locations:[{start:{line:2433,column:2},end:{line:2435,column:3}},{start:{line:2433,column:2},end:{line:2435,column:3}}],line:2433},"388":{loc:{start:{line:2445,column:2},end:{line:2451,column:3}},type:"if",locations:[{start:{line:2445,column:2},end:{line:2451,column:3}},{start:{line:2445,column:2},end:{line:2451,column:3}}],line:2445},"389":{loc:{start:{line:2445,column:6},end:{line:2445,column:28}},type:"binary-expr",locations:[{start:{line:2445,column:6},end:{line:2445,column:7}},{start:{line:2445,column:11},end:{line:2445,column:28}}],line:2445},"390":{loc:{start:{line:2448,column:9},end:{line:2451,column:3}},type:"if",locations:[{start:{line:2448,column:9},end:{line:2451,column:3}},{start:{line:2448,column:9},end:{line:2451,column:3}}],line:2448},"391":{loc:{start:{line:2448,column:13},end:{line:2448,column:33}},type:"binary-expr",locations:[{start:{line:2448,column:13},end:{line:2448,column:14}},{start:{line:2448,column:18},end:{line:2448,column:33}}],line:2448},"392":{loc:{start:{line:2458,column:2},end:{line:2460,column:3}},type:"if",locations:[{start:{line:2458,column:2},end:{line:2460,column:3}},{start:{line:2458,column:2},end:{line:2460,column:3}}],line:2458},"393":{loc:{start:{line:2458,column:6},end:{line:2458,column:67}},type:"binary-expr",locations:[{start:{line:2458,column:6},end:{line:2458,column:12}},{start:{line:2458,column:16},end:{line:2458,column:41}},{start:{line:2458,column:45},end:{line:2458,column:67}}],line:2458},"394":{loc:{start:{line:2467,column:2},end:{line:2469,column:3}},type:"if",locations:[{start:{line:2467,column:2},end:{line:2469,column:3}},{start:{line:2467,column:2},end:{line:2469,column:3}}],line:2467},"395":{loc:{start:{line:2467,column:6},end:{line:2467,column:62}},type:"binary-expr",locations:[{start:{line:2467,column:6},end:{line:2467,column:13}},{start:{line:2467,column:17},end:{line:2467,column:39}},{start:{line:2467,column:43},end:{line:2467,column:62}}],line:2467},"396":{loc:{start:{line:2473,column:2},end:{line:2475,column:3}},type:"if",locations:[{start:{line:2473,column:2},end:{line:2475,column:3}},{start:{line:2473,column:2},end:{line:2475,column:3}}],line:2473},"397":{loc:{start:{line:2478,column:4},end:{line:2480,column:5}},type:"if",locations:[{start:{line:2478,column:4},end:{line:2480,column:5}},{start:{line:2478,column:4},end:{line:2480,column:5}}],line:2478},"398":{loc:{start:{line:2496,column:4},end:{line:2499,column:5}},type:"if",locations:[{start:{line:2496,column:4},end:{line:2499,column:5}},{start:{line:2496,column:4},end:{line:2499,column:5}}],line:2496},"399":{loc:{start:{line:2502,column:11},end:{line:2502,column:38}},type:"cond-expr",locations:[{start:{line:2502,column:23},end:{line:2502,column:27}},{start:{line:2502,column:30},end:{line:2502,column:38}}],line:2502},"400":{loc:{start:{line:2510,column:2},end:{line:2515,column:3}},type:"if",locations:[{start:{line:2510,column:2},end:{line:2515,column:3}},{start:{line:2510,column:2},end:{line:2515,column:3}}],line:2510},"401":{loc:{start:{line:2510,column:6},end:{line:2510,column:57}},type:"binary-expr",locations:[{start:{line:2510,column:6},end:{line:2510,column:13}},{start:{line:2510,column:17},end:{line:2510,column:35}},{start:{line:2510,column:39},end:{line:2510,column:57}}],line:2510},"402":{loc:{start:{line:2521,column:2},end:{line:2525,column:3}},type:"if",locations:[{start:{line:2521,column:2},end:{line:2525,column:3}},{start:{line:2521,column:2},end:{line:2525,column:3}}],line:2521},"403":{loc:{start:{line:2521,column:6},end:{line:2521,column:57}},type:"binary-expr",locations:[{start:{line:2521,column:6},end:{line:2521,column:13}},{start:{line:2521,column:17},end:{line:2521,column:35}},{start:{line:2521,column:39},end:{line:2521,column:57}}],line:2521},"404":{loc:{start:{line:2533,column:11},end:{line:2533,column:85}},type:"binary-expr",locations:[{start:{line:2533,column:11},end:{line:2533,column:36}},{start:{line:2533,column:40},end:{line:2533,column:54}},{start:{line:2533,column:58},end:{line:2533,column:85}}],line:2533}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":0,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":0,"458":0,"459":0,"460":0,"461":0,"462":0,"463":0,"464":0,"465":0,"466":0,"467":0,"468":0,"469":0,"470":0,"471":0,"472":0,"473":0,"474":0,"475":0,"476":0,"477":0,"478":0,"479":0,"480":0,"481":0,"482":0,"483":0,"484":0,"485":0,"486":0,"487":0,"488":0,"489":0,"490":0,"491":0,"492":0,"493":0,"494":0,"495":0,"496":0,"497":0,"498":0,"499":0,"500":0,"501":0,"502":0,"503":0,"504":0,"505":0,"506":0,"507":0,"508":0,"509":0,"510":0,"511":0,"512":0,"513":0,"514":0,"515":0,"516":0,"517":0,"518":0,"519":0,"520":0,"521":0,"522":0,"523":0,"524":0,"525":0,"526":0,"527":0,"528":0,"529":0,"530":0,"531":0,"532":0,"533":0,"534":0,"535":0,"536":0,"537":0,"538":0,"539":0,"540":0,"541":0,"542":0,"543":0,"544":0,"545":0,"546":0,"547":0,"548":0,"549":0,"550":0,"551":0,"552":0,"553":0,"554":0,"555":0,"556":0,"557":0,"558":0,"559":0,"560":0,"561":0,"562":0,"563":0,"564":0,"565":0,"566":0,"567":0,"568":0,"569":0,"570":0,"571":0,"572":0,"573":0,"574":0,"575":0,"576":0,"577":0,"578":0,"579":0,"580":0,"581":0,"582":0,"583":0,"584":0,"585":0,"586":0,"587":0,"588":0,"589":0,"590":0,"591":0,"592":0,"593":0,"594":0,"595":0,"596":0,"597":0,"598":0,"599":0,"600":0,"601":0,"602":0,"603":0,"604":0,"605":0,"606":0,"607":0,"608":0,"609":0,"610":0,"611":0,"612":0,"613":0,"614":0,"615":0,"616":0,"617":0,"618":0,"619":0,"620":0,"621":0,"622":0,"623":0,"624":0,"625":0,"626":0,"627":0,"628":0,"629":0,"630":0,"631":0,"632":0,"633":0,"634":0,"635":0,"636":0,"637":0,"638":0,"639":0,"640":0,"641":0,"642":0,"643":0,"644":0,"645":0,"646":0,"647":0,"648":0,"649":0,"650":0,"651":0,"652":0,"653":0,"654":0,"655":0,"656":0,"657":0,"658":0,"659":0,"660":0,"661":0,"662":0,"663":0,"664":0,"665":0,"666":0,"667":0,"668":0,"669":0,"670":0,"671":0,"672":0,"673":0,"674":0,"675":0,"676":0,"677":0,"678":0,"679":0,"680":0,"681":0,"682":0,"683":0,"684":0,"685":0,"686":0,"687":0,"688":0,"689":0,"690":0,"691":0,"692":0,"693":0,"694":0,"695":0,"696":0,"697":0,"698":0,"699":0,"700":0,"701":0,"702":0,"703":0,"704":0,"705":0,"706":0,"707":0,"708":0,"709":0,"710":0,"711":0,"712":0,"713":0,"714":0,"715":0,"716":0,"717":0,"718":0,"719":0,"720":0,"721":0,"722":0,"723":0,"724":0,"725":0,"726":0,"727":0,"728":0,"729":0,"730":0,"731":0,"732":0,"733":0,"734":0,"735":0,"736":0,"737":0,"738":0,"739":0,"740":0,"741":0,"742":0,"743":0,"744":0,"745":0,"746":0,"747":0,"748":0,"749":0,"750":0,"751":0,"752":0,"753":0,"754":0,"755":0,"756":0,"757":0,"758":0,"759":0,"760":0,"761":0,"762":0,"763":0,"764":0,"765":0,"766":0,"767":0,"768":0,"769":0,"770":0,"771":0,"772":0,"773":0,"774":0,"775":0,"776":0,"777":0,"778":0,"779":0,"780":0,"781":0,"782":0,"783":0,"784":0,"785":0,"786":0,"787":0,"788":0,"789":0,"790":0,"791":0,"792":0,"793":0,"794":0,"795":0,"796":0,"797":0,"798":0,"799":0,"800":0,"801":0,"802":0,"803":0,"804":0,"805":0,"806":0,"807":0,"808":0,"809":0,"810":0,"811":0,"812":0,"813":0,"814":0,"815":0,"816":0,"817":0,"818":0,"819":0,"820":0,"821":0,"822":0,"823":0,"824":0,"825":0,"826":0,"827":0,"828":0,"829":0,"830":0,"831":0,"832":0,"833":0,"834":0,"835":0,"836":0,"837":0,"838":0,"839":0,"840":0,"841":0,"842":0,"843":0,"844":0,"845":0,"846":0,"847":0,"848":0,"849":0,"850":0,"851":0,"852":0,"853":0,"854":0,"855":0,"856":0,"857":0,"858":0,"859":0,"860":0,"861":0,"862":0,"863":0,"864":0,"865":0,"866":0,"867":0,"868":0,"869":0,"870":0,"871":0,"872":0,"873":0,"874":0,"875":0,"876":0,"877":0,"878":0,"879":0,"880":0,"881":0,"882":0,"883":0,"884":0,"885":0,"886":0,"887":0,"888":0,"889":0,"890":0,"891":0,"892":0,"893":0,"894":0,"895":0,"896":0,"897":0,"898":0,"899":0,"900":0,"901":0,"902":0,"903":0,"904":0,"905":0,"906":0,"907":0,"908":0,"909":0,"910":0,"911":0,"912":0,"913":0,"914":0,"915":0,"916":0,"917":0,"918":0,"919":0,"920":0,"921":0,"922":0,"923":0,"924":0,"925":0,"926":0,"927":0,"928":0,"929":0,"930":0,"931":0,"932":0,"933":0,"934":0,"935":0,"936":0,"937":0,"938":0,"939":0,"940":0,"941":0,"942":0,"943":0,"944":0,"945":0,"946":0,"947":0,"948":0,"949":0,"950":0,"951":0,"952":0,"953":0,"954":0,"955":0,"956":0,"957":0,"958":0,"959":0,"960":0,"961":0,"962":0,"963":0,"964":0,"965":0,"966":0,"967":0,"968":0,"969":0,"970":0,"971":0,"972":0,"973":0,"974":0,"975":0,"976":0,"977":0,"978":0,"979":0,"980":0,"981":0,"982":0,"983":0,"984":0,"985":0,"986":0,"987":0,"988":0,"989":0,"990":0,"991":0,"992":0,"993":0,"994":0,"995":0,"996":0,"997":0,"998":0,"999":0,"1000":0,"1001":0,"1002":0,"1003":0,"1004":0,"1005":0,"1006":0,"1007":0,"1008":0,"1009":0,"1010":0,"1011":0,"1012":0,"1013":0,"1014":0,"1015":0,"1016":0,"1017":0,"1018":0,"1019":0,"1020":0,"1021":0,"1022":0,"1023":0,"1024":0,"1025":0,"1026":0,"1027":0,"1028":0,"1029":0,"1030":0,"1031":0,"1032":0,"1033":0,"1034":0,"1035":0,"1036":0,"1037":0,"1038":0,"1039":0,"1040":0,"1041":0,"1042":0,"1043":0,"1044":0,"1045":0,"1046":0,"1047":0,"1048":0,"1049":0,"1050":0,"1051":0,"1052":0,"1053":0,"1054":0,"1055":0,"1056":0,"1057":0,"1058":0,"1059":0,"1060":0,"1061":0,"1062":0,"1063":0,"1064":0,"1065":0,"1066":0,"1067":0,"1068":0,"1069":0,"1070":0,"1071":0,"1072":0,"1073":0,"1074":0,"1075":0,"1076":0,"1077":0,"1078":0,"1079":0,"1080":0,"1081":0,"1082":0,"1083":0,"1084":0,"1085":0,"1086":0,"1087":0,"1088":0,"1089":0,"1090":0,"1091":0,"1092":0,"1093":0,"1094":0,"1095":0,"1096":0,"1097":0,"1098":0,"1099":0,"1100":0,"1101":0,"1102":0,"1103":0,"1104":0,"1105":0,"1106":0,"1107":0,"1108":0,"1109":0,"1110":0,"1111":0,"1112":0,"1113":0,"1114":0,"1115":0,"1116":0,"1117":0,"1118":0,"1119":0,"1120":0,"1121":0,"1122":0,"1123":0,"1124":0,"1125":0,"1126":0,"1127":0,"1128":0,"1129":0,"1130":0,"1131":0,"1132":0,"1133":0,"1134":0,"1135":0,"1136":0,"1137":0,"1138":0,"1139":0,"1140":0,"1141":0,"1142":0,"1143":0,"1144":0,"1145":0,"1146":0,"1147":0,"1148":0,"1149":0,"1150":0,"1151":0,"1152":0,"1153":0,"1154":0,"1155":0,"1156":0,"1157":0,"1158":0,"1159":0,"1160":0,"1161":0,"1162":0,"1163":0,"1164":0,"1165":0,"1166":0,"1167":0,"1168":0,"1169":0,"1170":0,"1171":0,"1172":0,"1173":0,"1174":0,"1175":0,"1176":0,"1177":0,"1178":0,"1179":0,"1180":0,"1181":0,"1182":0,"1183":0,"1184":0,"1185":0,"1186":0,"1187":0,"1188":0,"1189":0,"1190":0,"1191":0,"1192":0,"1193":0,"1194":0,"1195":0,"1196":0,"1197":0,"1198":0,"1199":0,"1200":0,"1201":0,"1202":0,"1203":0,"1204":0,"1205":0,"1206":0,"1207":0,"1208":0,"1209":0,"1210":0,"1211":0,"1212":0,"1213":0,"1214":0,"1215":0,"1216":0,"1217":0,"1218":0,"1219":0,"1220":0,"1221":0,"1222":0,"1223":0,"1224":0,"1225":0,"1226":0,"1227":0,"1228":0,"1229":0,"1230":0,"1231":0,"1232":0,"1233":0,"1234":0,"1235":0,"1236":0,"1237":0,"1238":0,"1239":0,"1240":0,"1241":0,"1242":0,"1243":0,"1244":0,"1245":0,"1246":0,"1247":0,"1248":0,"1249":0,"1250":0,"1251":0,"1252":0,"1253":0,"1254":0,"1255":0,"1256":0,"1257":0,"1258":0,"1259":0,"1260":0,"1261":0,"1262":0,"1263":0,"1264":0,"1265":0,"1266":0,"1267":0,"1268":0,"1269":0,"1270":0,"1271":0,"1272":0,"1273":0,"1274":0,"1275":0,"1276":0,"1277":0,"1278":0,"1279":0,"1280":0,"1281":0,"1282":0,"1283":0,"1284":0,"1285":0,"1286":0,"1287":0,"1288":0,"1289":0,"1290":0,"1291":0,"1292":0,"1293":0,"1294":0,"1295":0,"1296":0,"1297":0,"1298":0,"1299":0,"1300":0,"1301":0,"1302":0,"1303":0,"1304":0,"1305":0,"1306":0,"1307":0,"1308":0,"1309":0,"1310":0,"1311":0,"1312":0,"1313":0,"1314":0,"1315":0,"1316":0,"1317":0,"1318":0,"1319":0,"1320":0,"1321":0,"1322":0,"1323":0,"1324":0,"1325":0,"1326":0,"1327":0,"1328":0,"1329":0,"1330":0,"1331":0,"1332":0,"1333":0,"1334":0,"1335":0,"1336":0,"1337":0,"1338":0,"1339":0,"1340":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0,0,0,0,0,0,0,0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0,0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0],"113":[0,0],"114":[0,0],"115":[0,0],"116":[0,0],"117":[0,0],"118":[0,0],"119":[0,0],"120":[0,0],"121":[0,0],"122":[0,0],"123":[0,0],"124":[0,0],"125":[0,0],"126":[0,0],"127":[0,0],"128":[0,0],"129":[0,0],"130":[0,0],"131":[0,0],"132":[0,0],"133":[0,0],"134":[0,0],"135":[0,0],"136":[0,0],"137":[0,0],"138":[0,0],"139":[0,0],"140":[0,0],"141":[0,0],"142":[0,0],"143":[0,0],"144":[0,0],"145":[0,0],"146":[0,0],"147":[0,0],"148":[0,0],"149":[0,0],"150":[0,0],"151":[0,0],"152":[0,0],"153":[0,0,0],"154":[0,0],"155":[0,0],"156":[0],"157":[0],"158":[0],"159":[0,0],"160":[0,0],"161":[0,0],"162":[0,0],"163":[0,0],"164":[0,0],"165":[0,0],"166":[0,0],"167":[0,0],"168":[0,0,0],"169":[0],"170":[0,0],"171":[0,0],"172":[0,0],"173":[0,0],"174":[0,0],"175":[0,0],"176":[0,0],"177":[0,0],"178":[0,0],"179":[0,0],"180":[0,0],"181":[0,0],"182":[0,0],"183":[0,0],"184":[0,0],"185":[0,0],"186":[0,0],"187":[0,0],"188":[0,0],"189":[0,0],"190":[0,0],"191":[0,0],"192":[0,0],"193":[0,0],"194":[0,0],"195":[0,0],"196":[0,0],"197":[0,0],"198":[0,0],"199":[0,0],"200":[0,0],"201":[0,0],"202":[0,0],"203":[0,0],"204":[0,0],"205":[0,0,0,0],"206":[0,0],"207":[0,0],"208":[0,0],"209":[0,0,0],"210":[0,0],"211":[0,0,0,0,0,0,0,0,0,0,0,0],"212":[0,0],"213":[0,0],"214":[0,0],"215":[0,0],"216":[0,0],"217":[0,0],"218":[0,0],"219":[0,0],"220":[0,0],"221":[0,0],"222":[0,0],"223":[0,0],"224":[0,0],"225":[0,0],"226":[0,0],"227":[0,0],"228":[0,0],"229":[0,0],"230":[0,0],"231":[0,0],"232":[0,0],"233":[0,0],"234":[0,0],"235":[0,0],"236":[0,0],"237":[0,0],"238":[0,0],"239":[0,0],"240":[0,0],"241":[0,0],"242":[0,0],"243":[0,0],"244":[0,0],"245":[0,0],"246":[0,0],"247":[0,0],"248":[0,0],"249":[0,0],"250":[0,0],"251":[0,0],"252":[0,0],"253":[0,0,0],"254":[0,0,0,0],"255":[0,0],"256":[0,0,0,0],"257":[0,0],"258":[0,0],"259":[0,0,0],"260":[0,0],"261":[0,0],"262":[0,0],"263":[0,0],"264":[0,0],"265":[0,0],"266":[0,0],"267":[0,0],"268":[0,0],"269":[0,0],"270":[0,0],"271":[0,0],"272":[0,0],"273":[0,0],"274":[0,0],"275":[0,0],"276":[0,0],"277":[0,0],"278":[0,0],"279":[0,0,0,0],"280":[0,0],"281":[0,0],"282":[0,0],"283":[0,0],"284":[0,0],"285":[0,0],"286":[0,0],"287":[0,0],"288":[0,0],"289":[0,0],"290":[0,0],"291":[0,0],"292":[0,0],"293":[0,0],"294":[0,0],"295":[0,0],"296":[0,0],"297":[0,0],"298":[0,0],"299":[0,0],"300":[0,0],"301":[0,0],"302":[0,0],"303":[0,0],"304":[0,0],"305":[0,0],"306":[0],"307":[0,0],"308":[0,0],"309":[0,0],"310":[0,0],"311":[0,0],"312":[0,0],"313":[0,0],"314":[0,0],"315":[0,0,0],"316":[0,0,0],"317":[0,0],"318":[0,0],"319":[0,0],"320":[0,0],"321":[0,0],"322":[0,0],"323":[0,0],"324":[0,0],"325":[0,0],"326":[0,0],"327":[0,0,0],"328":[0,0],"329":[0,0,0],"330":[0,0],"331":[0,0],"332":[0,0],"333":[0,0],"334":[0,0],"335":[0,0],"336":[0,0],"337":[0,0],"338":[0,0],"339":[0,0],"340":[0,0],"341":[0,0],"342":[0,0],"343":[0,0],"344":[0,0],"345":[0,0],"346":[0,0],"347":[0,0],"348":[0,0],"349":[0,0],"350":[0,0],"351":[0,0,0],"352":[0,0],"353":[0,0],"354":[0,0],"355":[0,0],"356":[0,0],"357":[0,0],"358":[0,0],"359":[0,0],"360":[0,0],"361":[0,0],"362":[0,0],"363":[0,0],"364":[0,0],"365":[0,0],"366":[0,0],"367":[0,0],"368":[0,0],"369":[0,0],"370":[0,0],"371":[0,0],"372":[0],"373":[0],"374":[0,0],"375":[0,0],"376":[0,0],"377":[0,0],"378":[0,0],"379":[0,0],"380":[0,0],"381":[0,0],"382":[0,0],"383":[0,0],"384":[0,0],"385":[0,0],"386":[0,0],"387":[0,0],"388":[0,0],"389":[0,0],"390":[0,0],"391":[0,0],"392":[0,0],"393":[0,0,0],"394":[0,0],"395":[0,0,0],"396":[0,0],"397":[0,0],"398":[0,0],"399":[0,0],"400":[0,0],"401":[0,0,0],"402":[0,0],"403":[0,0,0],"404":[0,0,0]},inputSourceMap:{version:3,sources:["../../../../src/Adapters/Storage/Postgres/PostgresStorageAdapter.js"],names:["PostgresRelationDoesNotExistError","PostgresDuplicateRelationError","PostgresDuplicateColumnError","PostgresMissingColumnError","PostgresDuplicateObjectError","PostgresUniqueIndexViolationError","logger","require","debug","args","arguments","concat","slice","length","log","getLogger","apply","parseTypeToPostgresType","type","contents","JSON","stringify","ParseToPosgresComparator","$gt","$lt","$gte","$lte","mongoAggregateToPostgres","$dayOfMonth","$dayOfWeek","$dayOfYear","$isoDayOfWeek","$isoWeekYear","$hour","$minute","$second","$millisecond","$month","$week","$year","toPostgresValue","value","__type","iso","name","transformValue","objectId","emptyCLPS","Object","freeze","find","get","count","create","update","delete","addField","protectedFields","defaultCLPS","toParseSchema","schema","className","fields","_hashed_password","_wperm","_rperm","clps","classLevelPermissions","indexes","toPostgresSchema","_password_history","handleDotFields","object","keys","forEach","fieldName","indexOf","components","split","first","shift","currentObj","next","__op","undefined","transformDotFieldToComponents","map","cmpt","index","transformDotField","join","transformAggregateField","substr","validateKeys","key","includes","Parse","Error","INVALID_NESTED_KEY","joinTablesForSchema","list","field","push","buildWhereClause","query","caseInsensitive","patterns","values","sorts","isArrayField","initialPatternsLength","fieldValue","$exists","authDataMatch","match","$in","$regex","MAX_INT_PLUS_ONE","clauses","clauseValues","subQuery","clause","pattern","orOrAnd","not","$ne","constraintFieldName","point","longitude","latitude","$eq","isInOrNin","Array","isArray","$nin","inPatterns","allowNull","listElem","listIndex","createConstraint","baseArray","notIn","_","flatMap","elt","INVALID_JSON","$all","isAnyValueRegexStartsWith","isAllValuesRegexOrNone","i","processRegexPattern","substring","$containedBy","arr","$text","search","$search","language","$term","$language","$caseSensitive","$diacriticSensitive","$nearSphere","distance","$maxDistance","distanceInKM","$within","$box","box","left","bottom","right","top","$geoWithin","$centerSphere","centerSphere","GeoPoint","GeoPointCoder","isValidJSON","_validate","isNaN","$polygon","polygon","points","coordinates","$geoIntersects","$point","regex","operator","opts","$options","removeWhiteSpace","convertPolygonToSQL","cmp","pgComparator","postgresValue","castType","OPERATION_FORBIDDEN","PostgresStorageAdapter","constructor","uri","collectionPrefix","databaseOptions","_collectionPrefix","enableSchemaHooks","client","pgp","_client","_onchange","_pgp","_uuid","canSortOnJoinTables","watch","callback","createExplainableQuery","analyze","handleShutdown","_stream","done","$pool","end","_listenToSchema","connect","direct","on","data","payload","parse","senderId","none","_notifySchemaChange","catch","error","console","_ensureSchemaCollectionExists","conn","code","classExists","one","a","exists","setClassLevelPermissions","CLPs","task","t","setIndexesWithSchemaFormat","submittedIndexes","existingIndexes","self","Promise","resolve","_id_","_id","deletedIndexes","insertedIndexes","INVALID_QUERY","prototype","hasOwnProperty","call","tx","createIndexes","dropIndexes","createClass","parseSchema","createTable","err","detail","DUPLICATE_VALUE","valuesArray","patternsArray","assign","_email_verify_token_expires_at","_email_verify_token","_account_lockout_expires_at","_failed_login_count","_perishable_token","_perishable_token_expires_at","_password_changed_at","relations","parseType","qs","batch","joinTable","schemaUpgrade","columns","column_name","newColumns","filter","item","addFieldIfNotExists","postgresType","result","any","path","updateFieldOptions","deleteClass","operations","response","helpers","then","deleteAllClasses","now","Date","getTime","results","joins","reduce","classes","queries","deleteFields","fieldNames","idx","getAllClasses","row","getClass","createObject","transactionalSession","columnsArray","geoPoints","provider","pop","initialValues","val","termination","geoPointsInjects","l","columnsPattern","col","valuesPattern","promise","ops","underlyingError","constraint","matches","userInfo","duplicated_field","deleteObjectsByQuery","where","OBJECT_NOT_FOUND","findOneAndUpdate","updateObjectsByQuery","updatePatterns","originalUpdate","dotNotationOptions","generate","jsonb","lastKey","fieldNameIndex","str","amount","objects","keysToIncrement","k","incrementPatterns","c","keysToDelete","deletePatterns","p","updateObject","expectedType","reject","whereClause","upsertOneObject","createValue","skip","limit","sort","explain","hasLimit","hasSkip","wherePattern","limitPattern","skipPattern","sortPattern","sortCopy","sorting","transformKey","memo","originalQuery","postgresObjectToParseObject","targetClass","y","x","coords","parseFloat","createdAt","toISOString","updatedAt","expiresAt","ensureUniqueness","constraintName","constraintPatterns","message","readPreference","estimate","approximate_row_count","distinct","column","isNested","isPointerField","transformer","child","aggregate","pipeline","hint","countField","groupValues","groupPattern","stage","$group","groupByFields","alias","source","operation","$sum","$max","$min","$avg","$project","$match","$or","collapse","element","matchPatterns","$limit","$skip","$sort","order","e","trim","Boolean","parseInt","performInitialization","VolatileClassesSchemas","promises","INVALID_CLASS_NAME","all","sql","misc","jsonObjectSetKeys","array","add","addUnique","remove","containsAll","containsAllRegex","contains","ctx","duration","createIndexesIfNeeded","getIndexes","updateSchemaWithIndexes","updateEstimatedCount","createTransactionalSession","commitTransactionalSession","abortTransactionalSession","ensureIndex","indexName","options","defaultIndexName","indexNameOptions","unique","ar","foundIndex","pt","INTERNAL_SERVER_ERROR","endsWith","replace","s","startsWith","literalizeRegexPart","isStartsWithRegex","firstValuesIsRegex","some","createLiteralRegex","remaining","RegExp","matcher1","result1","prefix","matcher2","result2"],mappings:"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",sourcesContent:["// @flow\nimport { createClient } from './PostgresClient';\n// @flow-disable-next\nimport Parse from 'parse/node';\n// @flow-disable-next\nimport _ from 'lodash';\n// @flow-disable-next\nimport { v4 as uuidv4 } from 'uuid';\nimport sql from './sql';\n\nconst PostgresRelationDoesNotExistError = '42P01';\nconst PostgresDuplicateRelationError = '42P07';\nconst PostgresDuplicateColumnError = '42701';\nconst PostgresMissingColumnError = '42703';\nconst PostgresDuplicateObjectError = '42710';\nconst PostgresUniqueIndexViolationError = '23505';\nconst logger = require('../../../logger');\n\nconst debug = function (...args: any) {\n  args = ['PG: ' + arguments[0]].concat(args.slice(1, args.length));\n  const log = logger.getLogger();\n  log.debug.apply(log, args);\n};\n\nimport { StorageAdapter } from '../StorageAdapter';\nimport type { SchemaType, QueryType, QueryOptions } from '../StorageAdapter';\n\nconst parseTypeToPostgresType = type => {\n  switch (type.type) {\n    case 'String':\n      return 'text';\n    case 'Date':\n      return 'timestamp with time zone';\n    case 'Object':\n      return 'jsonb';\n    case 'File':\n      return 'text';\n    case 'Boolean':\n      return 'boolean';\n    case 'Pointer':\n      return 'text';\n    case 'Number':\n      return 'double precision';\n    case 'GeoPoint':\n      return 'point';\n    case 'Bytes':\n      return 'jsonb';\n    case 'Polygon':\n      return 'polygon';\n    case 'Array':\n      if (type.contents && type.contents.type === 'String') {\n        return 'text[]';\n      } else {\n        return 'jsonb';\n      }\n    default:\n      throw `no type for ${JSON.stringify(type)} yet`;\n  }\n};\n\nconst ParseToPosgresComparator = {\n  $gt: '>',\n  $lt: '<',\n  $gte: '>=',\n  $lte: '<=',\n};\n\nconst mongoAggregateToPostgres = {\n  $dayOfMonth: 'DAY',\n  $dayOfWeek: 'DOW',\n  $dayOfYear: 'DOY',\n  $isoDayOfWeek: 'ISODOW',\n  $isoWeekYear: 'ISOYEAR',\n  $hour: 'HOUR',\n  $minute: 'MINUTE',\n  $second: 'SECOND',\n  $millisecond: 'MILLISECONDS',\n  $month: 'MONTH',\n  $week: 'WEEK',\n  $year: 'YEAR',\n};\n\nconst toPostgresValue = value => {\n  if (typeof value === 'object') {\n    if (value.__type === 'Date') {\n      return value.iso;\n    }\n    if (value.__type === 'File') {\n      return value.name;\n    }\n  }\n  return value;\n};\n\nconst transformValue = value => {\n  if (typeof value === 'object' && value.__type === 'Pointer') {\n    return value.objectId;\n  }\n  return value;\n};\n\n// Duplicate from then mongo adapter...\nconst emptyCLPS = Object.freeze({\n  find: {},\n  get: {},\n  count: {},\n  create: {},\n  update: {},\n  delete: {},\n  addField: {},\n  protectedFields: {},\n});\n\nconst defaultCLPS = Object.freeze({\n  find: { '*': true },\n  get: { '*': true },\n  count: { '*': true },\n  create: { '*': true },\n  update: { '*': true },\n  delete: { '*': true },\n  addField: { '*': true },\n  protectedFields: { '*': [] },\n});\n\nconst toParseSchema = schema => {\n  if (schema.className === '_User') {\n    delete schema.fields._hashed_password;\n  }\n  if (schema.fields) {\n    delete schema.fields._wperm;\n    delete schema.fields._rperm;\n  }\n  let clps = defaultCLPS;\n  if (schema.classLevelPermissions) {\n    clps = { ...emptyCLPS, ...schema.classLevelPermissions };\n  }\n  let indexes = {};\n  if (schema.indexes) {\n    indexes = { ...schema.indexes };\n  }\n  return {\n    className: schema.className,\n    fields: schema.fields,\n    classLevelPermissions: clps,\n    indexes,\n  };\n};\n\nconst toPostgresSchema = schema => {\n  if (!schema) {\n    return schema;\n  }\n  schema.fields = schema.fields || {};\n  schema.fields._wperm = { type: 'Array', contents: { type: 'String' } };\n  schema.fields._rperm = { type: 'Array', contents: { type: 'String' } };\n  if (schema.className === '_User') {\n    schema.fields._hashed_password = { type: 'String' };\n    schema.fields._password_history = { type: 'Array' };\n  }\n  return schema;\n};\n\nconst handleDotFields = object => {\n  Object.keys(object).forEach(fieldName => {\n    if (fieldName.indexOf('.') > -1) {\n      const components = fieldName.split('.');\n      const first = components.shift();\n      object[first] = object[first] || {};\n      let currentObj = object[first];\n      let next;\n      let value = object[fieldName];\n      if (value && value.__op === 'Delete') {\n        value = undefined;\n      }\n      /* eslint-disable no-cond-assign */\n      while ((next = components.shift())) {\n        /* eslint-enable no-cond-assign */\n        currentObj[next] = currentObj[next] || {};\n        if (components.length === 0) {\n          currentObj[next] = value;\n        }\n        currentObj = currentObj[next];\n      }\n      delete object[fieldName];\n    }\n  });\n  return object;\n};\n\nconst transformDotFieldToComponents = fieldName => {\n  return fieldName.split('.').map((cmpt, index) => {\n    if (index === 0) {\n      return `\"${cmpt}\"`;\n    }\n    return `'${cmpt}'`;\n  });\n};\n\nconst transformDotField = fieldName => {\n  if (fieldName.indexOf('.') === -1) {\n    return `\"${fieldName}\"`;\n  }\n  const components = transformDotFieldToComponents(fieldName);\n  let name = components.slice(0, components.length - 1).join('->');\n  name += '->>' + components[components.length - 1];\n  return name;\n};\n\nconst transformAggregateField = fieldName => {\n  if (typeof fieldName !== 'string') {\n    return fieldName;\n  }\n  if (fieldName === '$_created_at') {\n    return 'createdAt';\n  }\n  if (fieldName === '$_updated_at') {\n    return 'updatedAt';\n  }\n  return fieldName.substr(1);\n};\n\nconst validateKeys = object => {\n  if (typeof object == 'object') {\n    for (const key in object) {\n      if (typeof object[key] == 'object') {\n        validateKeys(object[key]);\n      }\n\n      if (key.includes('$') || key.includes('.')) {\n        throw new Parse.Error(\n          Parse.Error.INVALID_NESTED_KEY,\n          \"Nested keys should not contain the '$' or '.' characters\"\n        );\n      }\n    }\n  }\n};\n\n// Returns the list of join tables on a schema\nconst joinTablesForSchema = schema => {\n  const list = [];\n  if (schema) {\n    Object.keys(schema.fields).forEach(field => {\n      if (schema.fields[field].type === 'Relation') {\n        list.push(`_Join:${field}:${schema.className}`);\n      }\n    });\n  }\n  return list;\n};\n\ninterface WhereClause {\n  pattern: string;\n  values: Array<any>;\n  sorts: Array<any>;\n}\n\nconst buildWhereClause = ({ schema, query, index, caseInsensitive }): WhereClause => {\n  const patterns = [];\n  let values = [];\n  const sorts = [];\n\n  schema = toPostgresSchema(schema);\n  for (const fieldName in query) {\n    const isArrayField =\n      schema.fields && schema.fields[fieldName] && schema.fields[fieldName].type === 'Array';\n    const initialPatternsLength = patterns.length;\n    const fieldValue = query[fieldName];\n\n    // nothing in the schema, it's gonna blow up\n    if (!schema.fields[fieldName]) {\n      // as it won't exist\n      if (fieldValue && fieldValue.$exists === false) {\n        continue;\n      }\n    }\n\n    const authDataMatch = fieldName.match(/^_auth_data_([a-zA-Z0-9_]+)$/);\n    if (authDataMatch) {\n      // TODO: Handle querying by _auth_data_provider, authData is stored in authData field\n      continue;\n    } else if (caseInsensitive && (fieldName === 'username' || fieldName === 'email')) {\n      patterns.push(`LOWER($${index}:name) = LOWER($${index + 1})`);\n      values.push(fieldName, fieldValue);\n      index += 2;\n    } else if (fieldName.indexOf('.') >= 0) {\n      let name = transformDotField(fieldName);\n      if (fieldValue === null) {\n        patterns.push(`$${index}:raw IS NULL`);\n        values.push(name);\n        index += 1;\n        continue;\n      } else {\n        if (fieldValue.$in) {\n          name = transformDotFieldToComponents(fieldName).join('->');\n          patterns.push(`($${index}:raw)::jsonb @> $${index + 1}::jsonb`);\n          values.push(name, JSON.stringify(fieldValue.$in));\n          index += 2;\n        } else if (fieldValue.$regex) {\n          // Handle later\n        } else if (typeof fieldValue !== 'object') {\n          patterns.push(`$${index}:raw = $${index + 1}::text`);\n          values.push(name, fieldValue);\n          index += 2;\n        }\n      }\n    } else if (fieldValue === null || fieldValue === undefined) {\n      patterns.push(`$${index}:name IS NULL`);\n      values.push(fieldName);\n      index += 1;\n      continue;\n    } else if (typeof fieldValue === 'string') {\n      patterns.push(`$${index}:name = $${index + 1}`);\n      values.push(fieldName, fieldValue);\n      index += 2;\n    } else if (typeof fieldValue === 'boolean') {\n      patterns.push(`$${index}:name = $${index + 1}`);\n      // Can't cast boolean to double precision\n      if (schema.fields[fieldName] && schema.fields[fieldName].type === 'Number') {\n        // Should always return zero results\n        const MAX_INT_PLUS_ONE = 9223372036854775808;\n        values.push(fieldName, MAX_INT_PLUS_ONE);\n      } else {\n        values.push(fieldName, fieldValue);\n      }\n      index += 2;\n    } else if (typeof fieldValue === 'number') {\n      patterns.push(`$${index}:name = $${index + 1}`);\n      values.push(fieldName, fieldValue);\n      index += 2;\n    } else if (['$or', '$nor', '$and'].includes(fieldName)) {\n      const clauses = [];\n      const clauseValues = [];\n      fieldValue.forEach(subQuery => {\n        const clause = buildWhereClause({\n          schema,\n          query: subQuery,\n          index,\n          caseInsensitive,\n        });\n        if (clause.pattern.length > 0) {\n          clauses.push(clause.pattern);\n          clauseValues.push(...clause.values);\n          index += clause.values.length;\n        }\n      });\n\n      const orOrAnd = fieldName === '$and' ? ' AND ' : ' OR ';\n      const not = fieldName === '$nor' ? ' NOT ' : '';\n\n      patterns.push(`${not}(${clauses.join(orOrAnd)})`);\n      values.push(...clauseValues);\n    }\n\n    if (fieldValue.$ne !== undefined) {\n      if (isArrayField) {\n        fieldValue.$ne = JSON.stringify([fieldValue.$ne]);\n        patterns.push(`NOT array_contains($${index}:name, $${index + 1})`);\n      } else {\n        if (fieldValue.$ne === null) {\n          patterns.push(`$${index}:name IS NOT NULL`);\n          values.push(fieldName);\n          index += 1;\n          continue;\n        } else {\n          // if not null, we need to manually exclude null\n          if (fieldValue.$ne.__type === 'GeoPoint') {\n            patterns.push(\n              `($${index}:name <> POINT($${index + 1}, $${index + 2}) OR $${index}:name IS NULL)`\n            );\n          } else {\n            if (fieldName.indexOf('.') >= 0) {\n              const constraintFieldName = transformDotField(fieldName);\n              patterns.push(\n                `(${constraintFieldName} <> $${index} OR ${constraintFieldName} IS NULL)`\n              );\n            } else {\n              patterns.push(`($${index}:name <> $${index + 1} OR $${index}:name IS NULL)`);\n            }\n          }\n        }\n      }\n      if (fieldValue.$ne.__type === 'GeoPoint') {\n        const point = fieldValue.$ne;\n        values.push(fieldName, point.longitude, point.latitude);\n        index += 3;\n      } else {\n        // TODO: support arrays\n        values.push(fieldName, fieldValue.$ne);\n        index += 2;\n      }\n    }\n    if (fieldValue.$eq !== undefined) {\n      if (fieldValue.$eq === null) {\n        patterns.push(`$${index}:name IS NULL`);\n        values.push(fieldName);\n        index += 1;\n      } else {\n        if (fieldName.indexOf('.') >= 0) {\n          values.push(fieldValue.$eq);\n          patterns.push(`${transformDotField(fieldName)} = $${index++}`);\n        } else {\n          values.push(fieldName, fieldValue.$eq);\n          patterns.push(`$${index}:name = $${index + 1}`);\n          index += 2;\n        }\n      }\n    }\n    const isInOrNin = Array.isArray(fieldValue.$in) || Array.isArray(fieldValue.$nin);\n    if (\n      Array.isArray(fieldValue.$in) &&\n      isArrayField &&\n      schema.fields[fieldName].contents &&\n      schema.fields[fieldName].contents.type === 'String'\n    ) {\n      const inPatterns = [];\n      let allowNull = false;\n      values.push(fieldName);\n      fieldValue.$in.forEach((listElem, listIndex) => {\n        if (listElem === null) {\n          allowNull = true;\n        } else {\n          values.push(listElem);\n          inPatterns.push(`$${index + 1 + listIndex - (allowNull ? 1 : 0)}`);\n        }\n      });\n      if (allowNull) {\n        patterns.push(`($${index}:name IS NULL OR $${index}:name && ARRAY[${inPatterns.join()}])`);\n      } else {\n        patterns.push(`$${index}:name && ARRAY[${inPatterns.join()}]`);\n      }\n      index = index + 1 + inPatterns.length;\n    } else if (isInOrNin) {\n      var createConstraint = (baseArray, notIn) => {\n        const not = notIn ? ' NOT ' : '';\n        if (baseArray.length > 0) {\n          if (isArrayField) {\n            patterns.push(`${not} array_contains($${index}:name, $${index + 1})`);\n            values.push(fieldName, JSON.stringify(baseArray));\n            index += 2;\n          } else {\n            // Handle Nested Dot Notation Above\n            if (fieldName.indexOf('.') >= 0) {\n              return;\n            }\n            const inPatterns = [];\n            values.push(fieldName);\n            baseArray.forEach((listElem, listIndex) => {\n              if (listElem != null) {\n                values.push(listElem);\n                inPatterns.push(`$${index + 1 + listIndex}`);\n              }\n            });\n            patterns.push(`$${index}:name ${not} IN (${inPatterns.join()})`);\n            index = index + 1 + inPatterns.length;\n          }\n        } else if (!notIn) {\n          values.push(fieldName);\n          patterns.push(`$${index}:name IS NULL`);\n          index = index + 1;\n        } else {\n          // Handle empty array\n          if (notIn) {\n            patterns.push('1 = 1'); // Return all values\n          } else {\n            patterns.push('1 = 2'); // Return no values\n          }\n        }\n      };\n      if (fieldValue.$in) {\n        createConstraint(\n          _.flatMap(fieldValue.$in, elt => elt),\n          false\n        );\n      }\n      if (fieldValue.$nin) {\n        createConstraint(\n          _.flatMap(fieldValue.$nin, elt => elt),\n          true\n        );\n      }\n    } else if (typeof fieldValue.$in !== 'undefined') {\n      throw new Parse.Error(Parse.Error.INVALID_JSON, 'bad $in value');\n    } else if (typeof fieldValue.$nin !== 'undefined') {\n      throw new Parse.Error(Parse.Error.INVALID_JSON, 'bad $nin value');\n    }\n\n    if (Array.isArray(fieldValue.$all) && isArrayField) {\n      if (isAnyValueRegexStartsWith(fieldValue.$all)) {\n        if (!isAllValuesRegexOrNone(fieldValue.$all)) {\n          throw new Parse.Error(\n            Parse.Error.INVALID_JSON,\n            'All $all values must be of regex type or none: ' + fieldValue.$all\n          );\n        }\n\n        for (let i = 0; i < fieldValue.$all.length; i += 1) {\n          const value = processRegexPattern(fieldValue.$all[i].$regex);\n          fieldValue.$all[i] = value.substring(1) + '%';\n        }\n        patterns.push(`array_contains_all_regex($${index}:name, $${index + 1}::jsonb)`);\n      } else {\n        patterns.push(`array_contains_all($${index}:name, $${index + 1}::jsonb)`);\n      }\n      values.push(fieldName, JSON.stringify(fieldValue.$all));\n      index += 2;\n    } else if (Array.isArray(fieldValue.$all)) {\n      if (fieldValue.$all.length === 1) {\n        patterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, fieldValue.$all[0].objectId);\n        index += 2;\n      }\n    }\n\n    if (typeof fieldValue.$exists !== 'undefined') {\n      if (fieldValue.$exists) {\n        patterns.push(`$${index}:name IS NOT NULL`);\n      } else {\n        patterns.push(`$${index}:name IS NULL`);\n      }\n      values.push(fieldName);\n      index += 1;\n    }\n\n    if (fieldValue.$containedBy) {\n      const arr = fieldValue.$containedBy;\n      if (!(arr instanceof Array)) {\n        throw new Parse.Error(Parse.Error.INVALID_JSON, `bad $containedBy: should be an array`);\n      }\n\n      patterns.push(`$${index}:name <@ $${index + 1}::jsonb`);\n      values.push(fieldName, JSON.stringify(arr));\n      index += 2;\n    }\n\n    if (fieldValue.$text) {\n      const search = fieldValue.$text.$search;\n      let language = 'english';\n      if (typeof search !== 'object') {\n        throw new Parse.Error(Parse.Error.INVALID_JSON, `bad $text: $search, should be object`);\n      }\n      if (!search.$term || typeof search.$term !== 'string') {\n        throw new Parse.Error(Parse.Error.INVALID_JSON, `bad $text: $term, should be string`);\n      }\n      if (search.$language && typeof search.$language !== 'string') {\n        throw new Parse.Error(Parse.Error.INVALID_JSON, `bad $text: $language, should be string`);\n      } else if (search.$language) {\n        language = search.$language;\n      }\n      if (search.$caseSensitive && typeof search.$caseSensitive !== 'boolean') {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          `bad $text: $caseSensitive, should be boolean`\n        );\n      } else if (search.$caseSensitive) {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          `bad $text: $caseSensitive not supported, please use $regex or create a separate lower case column.`\n        );\n      }\n      if (search.$diacriticSensitive && typeof search.$diacriticSensitive !== 'boolean') {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          `bad $text: $diacriticSensitive, should be boolean`\n        );\n      } else if (search.$diacriticSensitive === false) {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          `bad $text: $diacriticSensitive - false not supported, install Postgres Unaccent Extension`\n        );\n      }\n      patterns.push(\n        `to_tsvector($${index}, $${index + 1}:name) @@ to_tsquery($${index + 2}, $${index + 3})`\n      );\n      values.push(language, fieldName, language, search.$term);\n      index += 4;\n    }\n\n    if (fieldValue.$nearSphere) {\n      const point = fieldValue.$nearSphere;\n      const distance = fieldValue.$maxDistance;\n      const distanceInKM = distance * 6371 * 1000;\n      patterns.push(\n        `ST_DistanceSphere($${index}:name::geometry, POINT($${index + 1}, $${\n          index + 2\n        })::geometry) <= $${index + 3}`\n      );\n      sorts.push(\n        `ST_DistanceSphere($${index}:name::geometry, POINT($${index + 1}, $${\n          index + 2\n        })::geometry) ASC`\n      );\n      values.push(fieldName, point.longitude, point.latitude, distanceInKM);\n      index += 4;\n    }\n\n    if (fieldValue.$within && fieldValue.$within.$box) {\n      const box = fieldValue.$within.$box;\n      const left = box[0].longitude;\n      const bottom = box[0].latitude;\n      const right = box[1].longitude;\n      const top = box[1].latitude;\n\n      patterns.push(`$${index}:name::point <@ $${index + 1}::box`);\n      values.push(fieldName, `((${left}, ${bottom}), (${right}, ${top}))`);\n      index += 2;\n    }\n\n    if (fieldValue.$geoWithin && fieldValue.$geoWithin.$centerSphere) {\n      const centerSphere = fieldValue.$geoWithin.$centerSphere;\n      if (!(centerSphere instanceof Array) || centerSphere.length < 2) {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          'bad $geoWithin value; $centerSphere should be an array of Parse.GeoPoint and distance'\n        );\n      }\n      // Get point, convert to geo point if necessary and validate\n      let point = centerSphere[0];\n      if (point instanceof Array && point.length === 2) {\n        point = new Parse.GeoPoint(point[1], point[0]);\n      } else if (!GeoPointCoder.isValidJSON(point)) {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          'bad $geoWithin value; $centerSphere geo point invalid'\n        );\n      }\n      Parse.GeoPoint._validate(point.latitude, point.longitude);\n      // Get distance and validate\n      const distance = centerSphere[1];\n      if (isNaN(distance) || distance < 0) {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          'bad $geoWithin value; $centerSphere distance invalid'\n        );\n      }\n      const distanceInKM = distance * 6371 * 1000;\n      patterns.push(\n        `ST_DistanceSphere($${index}:name::geometry, POINT($${index + 1}, $${\n          index + 2\n        })::geometry) <= $${index + 3}`\n      );\n      values.push(fieldName, point.longitude, point.latitude, distanceInKM);\n      index += 4;\n    }\n\n    if (fieldValue.$geoWithin && fieldValue.$geoWithin.$polygon) {\n      const polygon = fieldValue.$geoWithin.$polygon;\n      let points;\n      if (typeof polygon === 'object' && polygon.__type === 'Polygon') {\n        if (!polygon.coordinates || polygon.coordinates.length < 3) {\n          throw new Parse.Error(\n            Parse.Error.INVALID_JSON,\n            'bad $geoWithin value; Polygon.coordinates should contain at least 3 lon/lat pairs'\n          );\n        }\n        points = polygon.coordinates;\n      } else if (polygon instanceof Array) {\n        if (polygon.length < 3) {\n          throw new Parse.Error(\n            Parse.Error.INVALID_JSON,\n            'bad $geoWithin value; $polygon should contain at least 3 GeoPoints'\n          );\n        }\n        points = polygon;\n      } else {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          \"bad $geoWithin value; $polygon should be Polygon object or Array of Parse.GeoPoint's\"\n        );\n      }\n      points = points\n        .map(point => {\n          if (point instanceof Array && point.length === 2) {\n            Parse.GeoPoint._validate(point[1], point[0]);\n            return `(${point[0]}, ${point[1]})`;\n          }\n          if (typeof point !== 'object' || point.__type !== 'GeoPoint') {\n            throw new Parse.Error(Parse.Error.INVALID_JSON, 'bad $geoWithin value');\n          } else {\n            Parse.GeoPoint._validate(point.latitude, point.longitude);\n          }\n          return `(${point.longitude}, ${point.latitude})`;\n        })\n        .join(', ');\n\n      patterns.push(`$${index}:name::point <@ $${index + 1}::polygon`);\n      values.push(fieldName, `(${points})`);\n      index += 2;\n    }\n    if (fieldValue.$geoIntersects && fieldValue.$geoIntersects.$point) {\n      const point = fieldValue.$geoIntersects.$point;\n      if (typeof point !== 'object' || point.__type !== 'GeoPoint') {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          'bad $geoIntersect value; $point should be GeoPoint'\n        );\n      } else {\n        Parse.GeoPoint._validate(point.latitude, point.longitude);\n      }\n      patterns.push(`$${index}:name::polygon @> $${index + 1}::point`);\n      values.push(fieldName, `(${point.longitude}, ${point.latitude})`);\n      index += 2;\n    }\n\n    if (fieldValue.$regex) {\n      let regex = fieldValue.$regex;\n      let operator = '~';\n      const opts = fieldValue.$options;\n      if (opts) {\n        if (opts.indexOf('i') >= 0) {\n          operator = '~*';\n        }\n        if (opts.indexOf('x') >= 0) {\n          regex = removeWhiteSpace(regex);\n        }\n      }\n\n      const name = transformDotField(fieldName);\n      regex = processRegexPattern(regex);\n\n      patterns.push(`$${index}:raw ${operator} '$${index + 1}:raw'`);\n      values.push(name, regex);\n      index += 2;\n    }\n\n    if (fieldValue.__type === 'Pointer') {\n      if (isArrayField) {\n        patterns.push(`array_contains($${index}:name, $${index + 1})`);\n        values.push(fieldName, JSON.stringify([fieldValue]));\n        index += 2;\n      } else {\n        patterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, fieldValue.objectId);\n        index += 2;\n      }\n    }\n\n    if (fieldValue.__type === 'Date') {\n      patterns.push(`$${index}:name = $${index + 1}`);\n      values.push(fieldName, fieldValue.iso);\n      index += 2;\n    }\n\n    if (fieldValue.__type === 'GeoPoint') {\n      patterns.push(`$${index}:name ~= POINT($${index + 1}, $${index + 2})`);\n      values.push(fieldName, fieldValue.longitude, fieldValue.latitude);\n      index += 3;\n    }\n\n    if (fieldValue.__type === 'Polygon') {\n      const value = convertPolygonToSQL(fieldValue.coordinates);\n      patterns.push(`$${index}:name ~= $${index + 1}::polygon`);\n      values.push(fieldName, value);\n      index += 2;\n    }\n\n    Object.keys(ParseToPosgresComparator).forEach(cmp => {\n      if (fieldValue[cmp] || fieldValue[cmp] === 0) {\n        const pgComparator = ParseToPosgresComparator[cmp];\n        const postgresValue = toPostgresValue(fieldValue[cmp]);\n        let constraintFieldName;\n        if (fieldName.indexOf('.') >= 0) {\n          let castType;\n          switch (typeof postgresValue) {\n            case 'number':\n              castType = 'double precision';\n              break;\n            case 'boolean':\n              castType = 'boolean';\n              break;\n            default:\n              castType = undefined;\n          }\n          constraintFieldName = castType\n            ? `CAST ((${transformDotField(fieldName)}) AS ${castType})`\n            : transformDotField(fieldName);\n        } else {\n          constraintFieldName = `$${index++}:name`;\n          values.push(fieldName);\n        }\n        values.push(postgresValue);\n        patterns.push(`${constraintFieldName} ${pgComparator} $${index++}`);\n      }\n    });\n\n    if (initialPatternsLength === patterns.length) {\n      throw new Parse.Error(\n        Parse.Error.OPERATION_FORBIDDEN,\n        `Postgres doesn't support this query type yet ${JSON.stringify(fieldValue)}`\n      );\n    }\n  }\n  values = values.map(transformValue);\n  return { pattern: patterns.join(' AND '), values, sorts };\n};\n\nexport class PostgresStorageAdapter implements StorageAdapter {\n  canSortOnJoinTables: boolean;\n  enableSchemaHooks: boolean;\n\n  // Private\n  _collectionPrefix: string;\n  _client: any;\n  _onchange: any;\n  _pgp: any;\n  _stream: any;\n  _uuid: any;\n\n  constructor({ uri, collectionPrefix = '', databaseOptions = {} }: any) {\n    this._collectionPrefix = collectionPrefix;\n    this.enableSchemaHooks = !!databaseOptions.enableSchemaHooks;\n    delete databaseOptions.enableSchemaHooks;\n\n    const { client, pgp } = createClient(uri, databaseOptions);\n    this._client = client;\n    this._onchange = () => {};\n    this._pgp = pgp;\n    this._uuid = uuidv4();\n    this.canSortOnJoinTables = false;\n  }\n\n  watch(callback: () => void): void {\n    this._onchange = callback;\n  }\n\n  //Note that analyze=true will run the query, executing INSERTS, DELETES, etc.\n  createExplainableQuery(query: string, analyze: boolean = false) {\n    if (analyze) {\n      return 'EXPLAIN (ANALYZE, FORMAT JSON) ' + query;\n    } else {\n      return 'EXPLAIN (FORMAT JSON) ' + query;\n    }\n  }\n\n  handleShutdown() {\n    if (this._stream) {\n      this._stream.done();\n      delete this._stream;\n    }\n    if (!this._client) {\n      return;\n    }\n    this._client.$pool.end();\n  }\n\n  async _listenToSchema() {\n    if (!this._stream && this.enableSchemaHooks) {\n      this._stream = await this._client.connect({ direct: true });\n      this._stream.client.on('notification', data => {\n        const payload = JSON.parse(data.payload);\n        if (payload.senderId !== this._uuid) {\n          this._onchange();\n        }\n      });\n      await this._stream.none('LISTEN $1~', 'schema.change');\n    }\n  }\n\n  _notifySchemaChange() {\n    if (this._stream) {\n      this._stream\n        .none('NOTIFY $1~, $2', ['schema.change', { senderId: this._uuid }])\n        .catch(error => {\n          console.log('Failed to Notify:', error); // unlikely to ever happen\n        });\n    }\n  }\n\n  async _ensureSchemaCollectionExists(conn: any) {\n    conn = conn || this._client;\n    await conn\n      .none(\n        'CREATE TABLE IF NOT EXISTS \"_SCHEMA\" ( \"className\" varChar(120), \"schema\" jsonb, \"isParseClass\" bool, PRIMARY KEY (\"className\") )'\n      )\n      .catch(error => {\n        if (\n          error.code === PostgresDuplicateRelationError ||\n          error.code === PostgresUniqueIndexViolationError ||\n          error.code === PostgresDuplicateObjectError\n        ) {\n          // Table already exists, must have been created by a different request. Ignore error.\n        } else {\n          throw error;\n        }\n      });\n  }\n\n  async classExists(name: string) {\n    return this._client.one(\n      'SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = $1)',\n      [name],\n      a => a.exists\n    );\n  }\n\n  async setClassLevelPermissions(className: string, CLPs: any) {\n    await this._client.task('set-class-level-permissions', async t => {\n      const values = [className, 'schema', 'classLevelPermissions', JSON.stringify(CLPs)];\n      await t.none(\n        `UPDATE \"_SCHEMA\" SET $2:name = json_object_set_key($2:name, $3::text, $4::jsonb) WHERE \"className\" = $1`,\n        values\n      );\n    });\n    this._notifySchemaChange();\n  }\n\n  async setIndexesWithSchemaFormat(\n    className: string,\n    submittedIndexes: any,\n    existingIndexes: any = {},\n    fields: any,\n    conn: ?any\n  ): Promise<void> {\n    conn = conn || this._client;\n    const self = this;\n    if (submittedIndexes === undefined) {\n      return Promise.resolve();\n    }\n    if (Object.keys(existingIndexes).length === 0) {\n      existingIndexes = { _id_: { _id: 1 } };\n    }\n    const deletedIndexes = [];\n    const insertedIndexes = [];\n    Object.keys(submittedIndexes).forEach(name => {\n      const field = submittedIndexes[name];\n      if (existingIndexes[name] && field.__op !== 'Delete') {\n        throw new Parse.Error(Parse.Error.INVALID_QUERY, `Index ${name} exists, cannot update.`);\n      }\n      if (!existingIndexes[name] && field.__op === 'Delete') {\n        throw new Parse.Error(\n          Parse.Error.INVALID_QUERY,\n          `Index ${name} does not exist, cannot delete.`\n        );\n      }\n      if (field.__op === 'Delete') {\n        deletedIndexes.push(name);\n        delete existingIndexes[name];\n      } else {\n        Object.keys(field).forEach(key => {\n          if (!Object.prototype.hasOwnProperty.call(fields, key)) {\n            throw new Parse.Error(\n              Parse.Error.INVALID_QUERY,\n              `Field ${key} does not exist, cannot add index.`\n            );\n          }\n        });\n        existingIndexes[name] = field;\n        insertedIndexes.push({\n          key: field,\n          name,\n        });\n      }\n    });\n    await conn.tx('set-indexes-with-schema-format', async t => {\n      if (insertedIndexes.length > 0) {\n        await self.createIndexes(className, insertedIndexes, t);\n      }\n      if (deletedIndexes.length > 0) {\n        await self.dropIndexes(className, deletedIndexes, t);\n      }\n      await t.none(\n        'UPDATE \"_SCHEMA\" SET $2:name = json_object_set_key($2:name, $3::text, $4::jsonb) WHERE \"className\" = $1',\n        [className, 'schema', 'indexes', JSON.stringify(existingIndexes)]\n      );\n    });\n    this._notifySchemaChange();\n  }\n\n  async createClass(className: string, schema: SchemaType, conn: ?any) {\n    conn = conn || this._client;\n    const parseSchema = await conn\n      .tx('create-class', async t => {\n        await this.createTable(className, schema, t);\n        await t.none(\n          'INSERT INTO \"_SCHEMA\" (\"className\", \"schema\", \"isParseClass\") VALUES ($<className>, $<schema>, true)',\n          { className, schema }\n        );\n        await this.setIndexesWithSchemaFormat(className, schema.indexes, {}, schema.fields, t);\n        return toParseSchema(schema);\n      })\n      .catch(err => {\n        if (err.code === PostgresUniqueIndexViolationError && err.detail.includes(className)) {\n          throw new Parse.Error(Parse.Error.DUPLICATE_VALUE, `Class ${className} already exists.`);\n        }\n        throw err;\n      });\n    this._notifySchemaChange();\n    return parseSchema;\n  }\n\n  // Just create a table, do not insert in schema\n  async createTable(className: string, schema: SchemaType, conn: any) {\n    conn = conn || this._client;\n    debug('createTable');\n    const valuesArray = [];\n    const patternsArray = [];\n    const fields = Object.assign({}, schema.fields);\n    if (className === '_User') {\n      fields._email_verify_token_expires_at = { type: 'Date' };\n      fields._email_verify_token = { type: 'String' };\n      fields._account_lockout_expires_at = { type: 'Date' };\n      fields._failed_login_count = { type: 'Number' };\n      fields._perishable_token = { type: 'String' };\n      fields._perishable_token_expires_at = { type: 'Date' };\n      fields._password_changed_at = { type: 'Date' };\n      fields._password_history = { type: 'Array' };\n    }\n    let index = 2;\n    const relations = [];\n    Object.keys(fields).forEach(fieldName => {\n      const parseType = fields[fieldName];\n      // Skip when it's a relation\n      // We'll create the tables later\n      if (parseType.type === 'Relation') {\n        relations.push(fieldName);\n        return;\n      }\n      if (['_rperm', '_wperm'].indexOf(fieldName) >= 0) {\n        parseType.contents = { type: 'String' };\n      }\n      valuesArray.push(fieldName);\n      valuesArray.push(parseTypeToPostgresType(parseType));\n      patternsArray.push(`$${index}:name $${index + 1}:raw`);\n      if (fieldName === 'objectId') {\n        patternsArray.push(`PRIMARY KEY ($${index}:name)`);\n      }\n      index = index + 2;\n    });\n    const qs = `CREATE TABLE IF NOT EXISTS $1:name (${patternsArray.join()})`;\n    const values = [className, ...valuesArray];\n\n    return conn.task('create-table', async t => {\n      try {\n        await t.none(qs, values);\n      } catch (error) {\n        if (error.code !== PostgresDuplicateRelationError) {\n          throw error;\n        }\n        // ELSE: Table already exists, must have been created by a different request. Ignore the error.\n      }\n      await t.tx('create-table-tx', tx => {\n        return tx.batch(\n          relations.map(fieldName => {\n            return tx.none(\n              'CREATE TABLE IF NOT EXISTS $<joinTable:name> (\"relatedId\" varChar(120), \"owningId\" varChar(120), PRIMARY KEY(\"relatedId\", \"owningId\") )',\n              { joinTable: `_Join:${fieldName}:${className}` }\n            );\n          })\n        );\n      });\n    });\n  }\n\n  async schemaUpgrade(className: string, schema: SchemaType, conn: any) {\n    debug('schemaUpgrade');\n    conn = conn || this._client;\n    const self = this;\n\n    await conn.task('schema-upgrade', async t => {\n      const columns = await t.map(\n        'SELECT column_name FROM information_schema.columns WHERE table_name = $<className>',\n        { className },\n        a => a.column_name\n      );\n      const newColumns = Object.keys(schema.fields)\n        .filter(item => columns.indexOf(item) === -1)\n        .map(fieldName => self.addFieldIfNotExists(className, fieldName, schema.fields[fieldName]));\n\n      await t.batch(newColumns);\n    });\n  }\n\n  async addFieldIfNotExists(className: string, fieldName: string, type: any) {\n    // TODO: Must be revised for invalid logic...\n    debug('addFieldIfNotExists');\n    const self = this;\n    await this._client.tx('add-field-if-not-exists', async t => {\n      if (type.type !== 'Relation') {\n        try {\n          await t.none(\n            'ALTER TABLE $<className:name> ADD COLUMN IF NOT EXISTS $<fieldName:name> $<postgresType:raw>',\n            {\n              className,\n              fieldName,\n              postgresType: parseTypeToPostgresType(type),\n            }\n          );\n        } catch (error) {\n          if (error.code === PostgresRelationDoesNotExistError) {\n            return self.createClass(className, { fields: { [fieldName]: type } }, t);\n          }\n          if (error.code !== PostgresDuplicateColumnError) {\n            throw error;\n          }\n          // Column already exists, created by other request. Carry on to see if it's the right type.\n        }\n      } else {\n        await t.none(\n          'CREATE TABLE IF NOT EXISTS $<joinTable:name> (\"relatedId\" varChar(120), \"owningId\" varChar(120), PRIMARY KEY(\"relatedId\", \"owningId\") )',\n          { joinTable: `_Join:${fieldName}:${className}` }\n        );\n      }\n\n      const result = await t.any(\n        'SELECT \"schema\" FROM \"_SCHEMA\" WHERE \"className\" = $<className> and (\"schema\"::json->\\'fields\\'->$<fieldName>) is not null',\n        { className, fieldName }\n      );\n\n      if (result[0]) {\n        throw 'Attempted to add a field that already exists';\n      } else {\n        const path = `{fields,${fieldName}}`;\n        await t.none(\n          'UPDATE \"_SCHEMA\" SET \"schema\"=jsonb_set(\"schema\", $<path>, $<type>)  WHERE \"className\"=$<className>',\n          { path, type, className }\n        );\n      }\n    });\n    this._notifySchemaChange();\n  }\n\n  async updateFieldOptions(className: string, fieldName: string, type: any) {\n    await this._client.tx('update-schema-field-options', async t => {\n      const path = `{fields,${fieldName}}`;\n      await t.none(\n        'UPDATE \"_SCHEMA\" SET \"schema\"=jsonb_set(\"schema\", $<path>, $<type>)  WHERE \"className\"=$<className>',\n        { path, type, className }\n      );\n    });\n  }\n\n  // Drops a collection. Resolves with true if it was a Parse Schema (eg. _User, Custom, etc.)\n  // and resolves with false if it wasn't (eg. a join table). Rejects if deletion was impossible.\n  async deleteClass(className: string) {\n    const operations = [\n      { query: `DROP TABLE IF EXISTS $1:name`, values: [className] },\n      {\n        query: `DELETE FROM \"_SCHEMA\" WHERE \"className\" = $1`,\n        values: [className],\n      },\n    ];\n    const response = await this._client\n      .tx(t => t.none(this._pgp.helpers.concat(operations)))\n      .then(() => className.indexOf('_Join:') != 0); // resolves with false when _Join table\n\n    this._notifySchemaChange();\n    return response;\n  }\n\n  // Delete all data known to this adapter. Used for testing.\n  async deleteAllClasses() {\n    const now = new Date().getTime();\n    const helpers = this._pgp.helpers;\n    debug('deleteAllClasses');\n\n    await this._client\n      .task('delete-all-classes', async t => {\n        try {\n          const results = await t.any('SELECT * FROM \"_SCHEMA\"');\n          const joins = results.reduce((list: Array<string>, schema: any) => {\n            return list.concat(joinTablesForSchema(schema.schema));\n          }, []);\n          const classes = [\n            '_SCHEMA',\n            '_PushStatus',\n            '_JobStatus',\n            '_JobSchedule',\n            '_Hooks',\n            '_GlobalConfig',\n            '_GraphQLConfig',\n            '_Audience',\n            '_Idempotency',\n            ...results.map(result => result.className),\n            ...joins,\n          ];\n          const queries = classes.map(className => ({\n            query: 'DROP TABLE IF EXISTS $<className:name>',\n            values: { className },\n          }));\n          await t.tx(tx => tx.none(helpers.concat(queries)));\n        } catch (error) {\n          if (error.code !== PostgresRelationDoesNotExistError) {\n            throw error;\n          }\n          // No _SCHEMA collection. Don't delete anything.\n        }\n      })\n      .then(() => {\n        debug(`deleteAllClasses done in ${new Date().getTime() - now}`);\n      });\n  }\n\n  // Remove the column and all the data. For Relations, the _Join collection is handled\n  // specially, this function does not delete _Join columns. It should, however, indicate\n  // that the relation fields does not exist anymore. In mongo, this means removing it from\n  // the _SCHEMA collection.  There should be no actual data in the collection under the same name\n  // as the relation column, so it's fine to attempt to delete it. If the fields listed to be\n  // deleted do not exist, this function should return successfully anyways. Checking for\n  // attempts to delete non-existent fields is the responsibility of Parse Server.\n\n  // This function is not obligated to delete fields atomically. It is given the field\n  // names in a list so that databases that are capable of deleting fields atomically\n  // may do so.\n\n  // Returns a Promise.\n  async deleteFields(className: string, schema: SchemaType, fieldNames: string[]): Promise<void> {\n    debug('deleteFields');\n    fieldNames = fieldNames.reduce((list: Array<string>, fieldName: string) => {\n      const field = schema.fields[fieldName];\n      if (field.type !== 'Relation') {\n        list.push(fieldName);\n      }\n      delete schema.fields[fieldName];\n      return list;\n    }, []);\n\n    const values = [className, ...fieldNames];\n    const columns = fieldNames\n      .map((name, idx) => {\n        return `$${idx + 2}:name`;\n      })\n      .join(', DROP COLUMN');\n\n    await this._client.tx('delete-fields', async t => {\n      await t.none('UPDATE \"_SCHEMA\" SET \"schema\" = $<schema> WHERE \"className\" = $<className>', {\n        schema,\n        className,\n      });\n      if (values.length > 1) {\n        await t.none(`ALTER TABLE $1:name DROP COLUMN IF EXISTS ${columns}`, values);\n      }\n    });\n    this._notifySchemaChange();\n  }\n\n  // Return a promise for all schemas known to this adapter, in Parse format. In case the\n  // schemas cannot be retrieved, returns a promise that rejects. Requirements for the\n  // rejection reason are TBD.\n  async getAllClasses() {\n    return this._client.task('get-all-classes', async t => {\n      return await t.map('SELECT * FROM \"_SCHEMA\"', null, row =>\n        toParseSchema({ className: row.className, ...row.schema })\n      );\n    });\n  }\n\n  // Return a promise for the schema with the given name, in Parse format. If\n  // this adapter doesn't know about the schema, return a promise that rejects with\n  // undefined as the reason.\n  async getClass(className: string) {\n    debug('getClass');\n    return this._client\n      .any('SELECT * FROM \"_SCHEMA\" WHERE \"className\" = $<className>', {\n        className,\n      })\n      .then(result => {\n        if (result.length !== 1) {\n          throw undefined;\n        }\n        return result[0].schema;\n      })\n      .then(toParseSchema);\n  }\n\n  // TODO: remove the mongo format dependency in the return value\n  async createObject(\n    className: string,\n    schema: SchemaType,\n    object: any,\n    transactionalSession: ?any\n  ) {\n    debug('createObject');\n    let columnsArray = [];\n    const valuesArray = [];\n    schema = toPostgresSchema(schema);\n    const geoPoints = {};\n\n    object = handleDotFields(object);\n\n    validateKeys(object);\n\n    Object.keys(object).forEach(fieldName => {\n      if (object[fieldName] === null) {\n        return;\n      }\n      var authDataMatch = fieldName.match(/^_auth_data_([a-zA-Z0-9_]+)$/);\n      if (authDataMatch) {\n        var provider = authDataMatch[1];\n        object['authData'] = object['authData'] || {};\n        object['authData'][provider] = object[fieldName];\n        delete object[fieldName];\n        fieldName = 'authData';\n      }\n\n      columnsArray.push(fieldName);\n      if (!schema.fields[fieldName] && className === '_User') {\n        if (\n          fieldName === '_email_verify_token' ||\n          fieldName === '_failed_login_count' ||\n          fieldName === '_perishable_token' ||\n          fieldName === '_password_history'\n        ) {\n          valuesArray.push(object[fieldName]);\n        }\n\n        if (fieldName === '_email_verify_token_expires_at') {\n          if (object[fieldName]) {\n            valuesArray.push(object[fieldName].iso);\n          } else {\n            valuesArray.push(null);\n          }\n        }\n\n        if (\n          fieldName === '_account_lockout_expires_at' ||\n          fieldName === '_perishable_token_expires_at' ||\n          fieldName === '_password_changed_at'\n        ) {\n          if (object[fieldName]) {\n            valuesArray.push(object[fieldName].iso);\n          } else {\n            valuesArray.push(null);\n          }\n        }\n        return;\n      }\n      switch (schema.fields[fieldName].type) {\n        case 'Date':\n          if (object[fieldName]) {\n            valuesArray.push(object[fieldName].iso);\n          } else {\n            valuesArray.push(null);\n          }\n          break;\n        case 'Pointer':\n          valuesArray.push(object[fieldName].objectId);\n          break;\n        case 'Array':\n          if (['_rperm', '_wperm'].indexOf(fieldName) >= 0) {\n            valuesArray.push(object[fieldName]);\n          } else {\n            valuesArray.push(JSON.stringify(object[fieldName]));\n          }\n          break;\n        case 'Object':\n        case 'Bytes':\n        case 'String':\n        case 'Number':\n        case 'Boolean':\n          valuesArray.push(object[fieldName]);\n          break;\n        case 'File':\n          valuesArray.push(object[fieldName].name);\n          break;\n        case 'Polygon': {\n          const value = convertPolygonToSQL(object[fieldName].coordinates);\n          valuesArray.push(value);\n          break;\n        }\n        case 'GeoPoint':\n          // pop the point and process later\n          geoPoints[fieldName] = object[fieldName];\n          columnsArray.pop();\n          break;\n        default:\n          throw `Type ${schema.fields[fieldName].type} not supported yet`;\n      }\n    });\n\n    columnsArray = columnsArray.concat(Object.keys(geoPoints));\n    const initialValues = valuesArray.map((val, index) => {\n      let termination = '';\n      const fieldName = columnsArray[index];\n      if (['_rperm', '_wperm'].indexOf(fieldName) >= 0) {\n        termination = '::text[]';\n      } else if (schema.fields[fieldName] && schema.fields[fieldName].type === 'Array') {\n        termination = '::jsonb';\n      }\n      return `$${index + 2 + columnsArray.length}${termination}`;\n    });\n    const geoPointsInjects = Object.keys(geoPoints).map(key => {\n      const value = geoPoints[key];\n      valuesArray.push(value.longitude, value.latitude);\n      const l = valuesArray.length + columnsArray.length;\n      return `POINT($${l}, $${l + 1})`;\n    });\n\n    const columnsPattern = columnsArray.map((col, index) => `$${index + 2}:name`).join();\n    const valuesPattern = initialValues.concat(geoPointsInjects).join();\n\n    const qs = `INSERT INTO $1:name (${columnsPattern}) VALUES (${valuesPattern})`;\n    const values = [className, ...columnsArray, ...valuesArray];\n    const promise = (transactionalSession ? transactionalSession.t : this._client)\n      .none(qs, values)\n      .then(() => ({ ops: [object] }))\n      .catch(error => {\n        if (error.code === PostgresUniqueIndexViolationError) {\n          const err = new Parse.Error(\n            Parse.Error.DUPLICATE_VALUE,\n            'A duplicate value for a field with unique values was provided'\n          );\n          err.underlyingError = error;\n          if (error.constraint) {\n            const matches = error.constraint.match(/unique_([a-zA-Z]+)/);\n            if (matches && Array.isArray(matches)) {\n              err.userInfo = { duplicated_field: matches[1] };\n            }\n          }\n          error = err;\n        }\n        throw error;\n      });\n    if (transactionalSession) {\n      transactionalSession.batch.push(promise);\n    }\n    return promise;\n  }\n\n  // Remove all objects that match the given Parse Query.\n  // If no objects match, reject with OBJECT_NOT_FOUND. If objects are found and deleted, resolve with undefined.\n  // If there is some other error, reject with INTERNAL_SERVER_ERROR.\n  async deleteObjectsByQuery(\n    className: string,\n    schema: SchemaType,\n    query: QueryType,\n    transactionalSession: ?any\n  ) {\n    debug('deleteObjectsByQuery');\n    const values = [className];\n    const index = 2;\n    const where = buildWhereClause({\n      schema,\n      index,\n      query,\n      caseInsensitive: false,\n    });\n    values.push(...where.values);\n    if (Object.keys(query).length === 0) {\n      where.pattern = 'TRUE';\n    }\n    const qs = `WITH deleted AS (DELETE FROM $1:name WHERE ${where.pattern} RETURNING *) SELECT count(*) FROM deleted`;\n    const promise = (transactionalSession ? transactionalSession.t : this._client)\n      .one(qs, values, a => +a.count)\n      .then(count => {\n        if (count === 0) {\n          throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Object not found.');\n        } else {\n          return count;\n        }\n      })\n      .catch(error => {\n        if (error.code !== PostgresRelationDoesNotExistError) {\n          throw error;\n        }\n        // ELSE: Don't delete anything if doesn't exist\n      });\n    if (transactionalSession) {\n      transactionalSession.batch.push(promise);\n    }\n    return promise;\n  }\n  // Return value not currently well specified.\n  async findOneAndUpdate(\n    className: string,\n    schema: SchemaType,\n    query: QueryType,\n    update: any,\n    transactionalSession: ?any\n  ): Promise<any> {\n    debug('findOneAndUpdate');\n    return this.updateObjectsByQuery(className, schema, query, update, transactionalSession).then(\n      val => val[0]\n    );\n  }\n\n  // Apply the update to all objects that match the given Parse Query.\n  async updateObjectsByQuery(\n    className: string,\n    schema: SchemaType,\n    query: QueryType,\n    update: any,\n    transactionalSession: ?any\n  ): Promise<[any]> {\n    debug('updateObjectsByQuery');\n    const updatePatterns = [];\n    const values = [className];\n    let index = 2;\n    schema = toPostgresSchema(schema);\n\n    const originalUpdate = { ...update };\n\n    // Set flag for dot notation fields\n    const dotNotationOptions = {};\n    Object.keys(update).forEach(fieldName => {\n      if (fieldName.indexOf('.') > -1) {\n        const components = fieldName.split('.');\n        const first = components.shift();\n        dotNotationOptions[first] = true;\n      } else {\n        dotNotationOptions[fieldName] = false;\n      }\n    });\n    update = handleDotFields(update);\n    // Resolve authData first,\n    // So we don't end up with multiple key updates\n    for (const fieldName in update) {\n      const authDataMatch = fieldName.match(/^_auth_data_([a-zA-Z0-9_]+)$/);\n      if (authDataMatch) {\n        var provider = authDataMatch[1];\n        const value = update[fieldName];\n        delete update[fieldName];\n        update['authData'] = update['authData'] || {};\n        update['authData'][provider] = value;\n      }\n    }\n\n    for (const fieldName in update) {\n      const fieldValue = update[fieldName];\n      // Drop any undefined values.\n      if (typeof fieldValue === 'undefined') {\n        delete update[fieldName];\n      } else if (fieldValue === null) {\n        updatePatterns.push(`$${index}:name = NULL`);\n        values.push(fieldName);\n        index += 1;\n      } else if (fieldName == 'authData') {\n        // This recursively sets the json_object\n        // Only 1 level deep\n        const generate = (jsonb: string, key: string, value: any) => {\n          return `json_object_set_key(COALESCE(${jsonb}, '{}'::jsonb), ${key}, ${value})::jsonb`;\n        };\n        const lastKey = `$${index}:name`;\n        const fieldNameIndex = index;\n        index += 1;\n        values.push(fieldName);\n        const update = Object.keys(fieldValue).reduce((lastKey: string, key: string) => {\n          const str = generate(lastKey, `$${index}::text`, `$${index + 1}::jsonb`);\n          index += 2;\n          let value = fieldValue[key];\n          if (value) {\n            if (value.__op === 'Delete') {\n              value = null;\n            } else {\n              value = JSON.stringify(value);\n            }\n          }\n          values.push(key, value);\n          return str;\n        }, lastKey);\n        updatePatterns.push(`$${fieldNameIndex}:name = ${update}`);\n      } else if (fieldValue.__op === 'Increment') {\n        updatePatterns.push(`$${index}:name = COALESCE($${index}:name, 0) + $${index + 1}`);\n        values.push(fieldName, fieldValue.amount);\n        index += 2;\n      } else if (fieldValue.__op === 'Add') {\n        updatePatterns.push(\n          `$${index}:name = array_add(COALESCE($${index}:name, '[]'::jsonb), $${index + 1}::jsonb)`\n        );\n        values.push(fieldName, JSON.stringify(fieldValue.objects));\n        index += 2;\n      } else if (fieldValue.__op === 'Delete') {\n        updatePatterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, null);\n        index += 2;\n      } else if (fieldValue.__op === 'Remove') {\n        updatePatterns.push(\n          `$${index}:name = array_remove(COALESCE($${index}:name, '[]'::jsonb), $${\n            index + 1\n          }::jsonb)`\n        );\n        values.push(fieldName, JSON.stringify(fieldValue.objects));\n        index += 2;\n      } else if (fieldValue.__op === 'AddUnique') {\n        updatePatterns.push(\n          `$${index}:name = array_add_unique(COALESCE($${index}:name, '[]'::jsonb), $${\n            index + 1\n          }::jsonb)`\n        );\n        values.push(fieldName, JSON.stringify(fieldValue.objects));\n        index += 2;\n      } else if (fieldName === 'updatedAt') {\n        //TODO: stop special casing this. It should check for __type === 'Date' and use .iso\n        updatePatterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, fieldValue);\n        index += 2;\n      } else if (typeof fieldValue === 'string') {\n        updatePatterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, fieldValue);\n        index += 2;\n      } else if (typeof fieldValue === 'boolean') {\n        updatePatterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, fieldValue);\n        index += 2;\n      } else if (fieldValue.__type === 'Pointer') {\n        updatePatterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, fieldValue.objectId);\n        index += 2;\n      } else if (fieldValue.__type === 'Date') {\n        updatePatterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, toPostgresValue(fieldValue));\n        index += 2;\n      } else if (fieldValue instanceof Date) {\n        updatePatterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, fieldValue);\n        index += 2;\n      } else if (fieldValue.__type === 'File') {\n        updatePatterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, toPostgresValue(fieldValue));\n        index += 2;\n      } else if (fieldValue.__type === 'GeoPoint') {\n        updatePatterns.push(`$${index}:name = POINT($${index + 1}, $${index + 2})`);\n        values.push(fieldName, fieldValue.longitude, fieldValue.latitude);\n        index += 3;\n      } else if (fieldValue.__type === 'Polygon') {\n        const value = convertPolygonToSQL(fieldValue.coordinates);\n        updatePatterns.push(`$${index}:name = $${index + 1}::polygon`);\n        values.push(fieldName, value);\n        index += 2;\n      } else if (fieldValue.__type === 'Relation') {\n        // noop\n      } else if (typeof fieldValue === 'number') {\n        updatePatterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, fieldValue);\n        index += 2;\n      } else if (\n        typeof fieldValue === 'object' &&\n        schema.fields[fieldName] &&\n        schema.fields[fieldName].type === 'Object'\n      ) {\n        // Gather keys to increment\n        const keysToIncrement = Object.keys(originalUpdate)\n          .filter(k => {\n            // choose top level fields that have a delete operation set\n            // Note that Object.keys is iterating over the **original** update object\n            // and that some of the keys of the original update could be null or undefined:\n            // (See the above check `if (fieldValue === null || typeof fieldValue == \"undefined\")`)\n            const value = originalUpdate[k];\n            return (\n              value &&\n              value.__op === 'Increment' &&\n              k.split('.').length === 2 &&\n              k.split('.')[0] === fieldName\n            );\n          })\n          .map(k => k.split('.')[1]);\n\n        let incrementPatterns = '';\n        if (keysToIncrement.length > 0) {\n          incrementPatterns =\n            ' || ' +\n            keysToIncrement\n              .map(c => {\n                const amount = fieldValue[c].amount;\n                return `CONCAT('{\"${c}\":', COALESCE($${index}:name->>'${c}','0')::int + ${amount}, '}')::jsonb`;\n              })\n              .join(' || ');\n          // Strip the keys\n          keysToIncrement.forEach(key => {\n            delete fieldValue[key];\n          });\n        }\n\n        const keysToDelete: Array<string> = Object.keys(originalUpdate)\n          .filter(k => {\n            // choose top level fields that have a delete operation set.\n            const value = originalUpdate[k];\n            return (\n              value &&\n              value.__op === 'Delete' &&\n              k.split('.').length === 2 &&\n              k.split('.')[0] === fieldName\n            );\n          })\n          .map(k => k.split('.')[1]);\n\n        const deletePatterns = keysToDelete.reduce((p: string, c: string, i: number) => {\n          return p + ` - '$${index + 1 + i}:value'`;\n        }, '');\n        // Override Object\n        let updateObject = \"'{}'::jsonb\";\n\n        if (dotNotationOptions[fieldName]) {\n          // Merge Object\n          updateObject = `COALESCE($${index}:name, '{}'::jsonb)`;\n        }\n        updatePatterns.push(\n          `$${index}:name = (${updateObject} ${deletePatterns} ${incrementPatterns} || $${\n            index + 1 + keysToDelete.length\n          }::jsonb )`\n        );\n        values.push(fieldName, ...keysToDelete, JSON.stringify(fieldValue));\n        index += 2 + keysToDelete.length;\n      } else if (\n        Array.isArray(fieldValue) &&\n        schema.fields[fieldName] &&\n        schema.fields[fieldName].type === 'Array'\n      ) {\n        const expectedType = parseTypeToPostgresType(schema.fields[fieldName]);\n        if (expectedType === 'text[]') {\n          updatePatterns.push(`$${index}:name = $${index + 1}::text[]`);\n          values.push(fieldName, fieldValue);\n          index += 2;\n        } else {\n          updatePatterns.push(`$${index}:name = $${index + 1}::jsonb`);\n          values.push(fieldName, JSON.stringify(fieldValue));\n          index += 2;\n        }\n      } else {\n        debug('Not supported update', { fieldName, fieldValue });\n        return Promise.reject(\n          new Parse.Error(\n            Parse.Error.OPERATION_FORBIDDEN,\n            `Postgres doesn't support update ${JSON.stringify(fieldValue)} yet`\n          )\n        );\n      }\n    }\n\n    const where = buildWhereClause({\n      schema,\n      index,\n      query,\n      caseInsensitive: false,\n    });\n    values.push(...where.values);\n\n    const whereClause = where.pattern.length > 0 ? `WHERE ${where.pattern}` : '';\n    const qs = `UPDATE $1:name SET ${updatePatterns.join()} ${whereClause} RETURNING *`;\n    const promise = (transactionalSession ? transactionalSession.t : this._client).any(qs, values);\n    if (transactionalSession) {\n      transactionalSession.batch.push(promise);\n    }\n    return promise;\n  }\n\n  // Hopefully, we can get rid of this. It's only used for config and hooks.\n  upsertOneObject(\n    className: string,\n    schema: SchemaType,\n    query: QueryType,\n    update: any,\n    transactionalSession: ?any\n  ) {\n    debug('upsertOneObject');\n    const createValue = Object.assign({}, query, update);\n    return this.createObject(className, schema, createValue, transactionalSession).catch(error => {\n      // ignore duplicate value errors as it's upsert\n      if (error.code !== Parse.Error.DUPLICATE_VALUE) {\n        throw error;\n      }\n      return this.findOneAndUpdate(className, schema, query, update, transactionalSession);\n    });\n  }\n\n  find(\n    className: string,\n    schema: SchemaType,\n    query: QueryType,\n    { skip, limit, sort, keys, caseInsensitive, explain }: QueryOptions\n  ) {\n    debug('find');\n    const hasLimit = limit !== undefined;\n    const hasSkip = skip !== undefined;\n    let values = [className];\n    const where = buildWhereClause({\n      schema,\n      query,\n      index: 2,\n      caseInsensitive,\n    });\n    values.push(...where.values);\n\n    const wherePattern = where.pattern.length > 0 ? `WHERE ${where.pattern}` : '';\n    const limitPattern = hasLimit ? `LIMIT $${values.length + 1}` : '';\n    if (hasLimit) {\n      values.push(limit);\n    }\n    const skipPattern = hasSkip ? `OFFSET $${values.length + 1}` : '';\n    if (hasSkip) {\n      values.push(skip);\n    }\n\n    let sortPattern = '';\n    if (sort) {\n      const sortCopy: any = sort;\n      const sorting = Object.keys(sort)\n        .map(key => {\n          const transformKey = transformDotFieldToComponents(key).join('->');\n          // Using $idx pattern gives:  non-integer constant in ORDER BY\n          if (sortCopy[key] === 1) {\n            return `${transformKey} ASC`;\n          }\n          return `${transformKey} DESC`;\n        })\n        .join();\n      sortPattern = sort !== undefined && Object.keys(sort).length > 0 ? `ORDER BY ${sorting}` : '';\n    }\n    if (where.sorts && Object.keys((where.sorts: any)).length > 0) {\n      sortPattern = `ORDER BY ${where.sorts.join()}`;\n    }\n\n    let columns = '*';\n    if (keys) {\n      // Exclude empty keys\n      // Replace ACL by it's keys\n      keys = keys.reduce((memo, key) => {\n        if (key === 'ACL') {\n          memo.push('_rperm');\n          memo.push('_wperm');\n        } else if (\n          key.length > 0 &&\n          // Remove selected field not referenced in the schema\n          // Relation is not a column in postgres\n          // $score is a Parse special field and is also not a column\n          ((schema.fields[key] && schema.fields[key].type !== 'Relation') || key === '$score')\n        ) {\n          memo.push(key);\n        }\n        return memo;\n      }, []);\n      columns = keys\n        .map((key, index) => {\n          if (key === '$score') {\n            return `ts_rank_cd(to_tsvector($${2}, $${3}:name), to_tsquery($${4}, $${5}), 32) as score`;\n          }\n          return `$${index + values.length + 1}:name`;\n        })\n        .join();\n      values = values.concat(keys);\n    }\n\n    const originalQuery = `SELECT ${columns} FROM $1:name ${wherePattern} ${sortPattern} ${limitPattern} ${skipPattern}`;\n    const qs = explain ? this.createExplainableQuery(originalQuery) : originalQuery;\n    return this._client\n      .any(qs, values)\n      .catch(error => {\n        // Query on non existing table, don't crash\n        if (error.code !== PostgresRelationDoesNotExistError) {\n          throw error;\n        }\n        return [];\n      })\n      .then(results => {\n        if (explain) {\n          return results;\n        }\n        return results.map(object => this.postgresObjectToParseObject(className, object, schema));\n      });\n  }\n\n  // Converts from a postgres-format object to a REST-format object.\n  // Does not strip out anything based on a lack of authentication.\n  postgresObjectToParseObject(className: string, object: any, schema: any) {\n    Object.keys(schema.fields).forEach(fieldName => {\n      if (schema.fields[fieldName].type === 'Pointer' && object[fieldName]) {\n        object[fieldName] = {\n          objectId: object[fieldName],\n          __type: 'Pointer',\n          className: schema.fields[fieldName].targetClass,\n        };\n      }\n      if (schema.fields[fieldName].type === 'Relation') {\n        object[fieldName] = {\n          __type: 'Relation',\n          className: schema.fields[fieldName].targetClass,\n        };\n      }\n      if (object[fieldName] && schema.fields[fieldName].type === 'GeoPoint') {\n        object[fieldName] = {\n          __type: 'GeoPoint',\n          latitude: object[fieldName].y,\n          longitude: object[fieldName].x,\n        };\n      }\n      if (object[fieldName] && schema.fields[fieldName].type === 'Polygon') {\n        let coords = object[fieldName];\n        coords = coords.substr(2, coords.length - 4).split('),(');\n        coords = coords.map(point => {\n          return [parseFloat(point.split(',')[1]), parseFloat(point.split(',')[0])];\n        });\n        object[fieldName] = {\n          __type: 'Polygon',\n          coordinates: coords,\n        };\n      }\n      if (object[fieldName] && schema.fields[fieldName].type === 'File') {\n        object[fieldName] = {\n          __type: 'File',\n          name: object[fieldName],\n        };\n      }\n    });\n    //TODO: remove this reliance on the mongo format. DB adapter shouldn't know there is a difference between created at and any other date field.\n    if (object.createdAt) {\n      object.createdAt = object.createdAt.toISOString();\n    }\n    if (object.updatedAt) {\n      object.updatedAt = object.updatedAt.toISOString();\n    }\n    if (object.expiresAt) {\n      object.expiresAt = {\n        __type: 'Date',\n        iso: object.expiresAt.toISOString(),\n      };\n    }\n    if (object._email_verify_token_expires_at) {\n      object._email_verify_token_expires_at = {\n        __type: 'Date',\n        iso: object._email_verify_token_expires_at.toISOString(),\n      };\n    }\n    if (object._account_lockout_expires_at) {\n      object._account_lockout_expires_at = {\n        __type: 'Date',\n        iso: object._account_lockout_expires_at.toISOString(),\n      };\n    }\n    if (object._perishable_token_expires_at) {\n      object._perishable_token_expires_at = {\n        __type: 'Date',\n        iso: object._perishable_token_expires_at.toISOString(),\n      };\n    }\n    if (object._password_changed_at) {\n      object._password_changed_at = {\n        __type: 'Date',\n        iso: object._password_changed_at.toISOString(),\n      };\n    }\n\n    for (const fieldName in object) {\n      if (object[fieldName] === null) {\n        delete object[fieldName];\n      }\n      if (object[fieldName] instanceof Date) {\n        object[fieldName] = {\n          __type: 'Date',\n          iso: object[fieldName].toISOString(),\n        };\n      }\n    }\n\n    return object;\n  }\n\n  // Create a unique index. Unique indexes on nullable fields are not allowed. Since we don't\n  // currently know which fields are nullable and which aren't, we ignore that criteria.\n  // As such, we shouldn't expose this function to users of parse until we have an out-of-band\n  // Way of determining if a field is nullable. Undefined doesn't count against uniqueness,\n  // which is why we use sparse indexes.\n  async ensureUniqueness(className: string, schema: SchemaType, fieldNames: string[]) {\n    const constraintName = `${className}_unique_${fieldNames.sort().join('_')}`;\n    const constraintPatterns = fieldNames.map((fieldName, index) => `$${index + 3}:name`);\n    const qs = `CREATE UNIQUE INDEX IF NOT EXISTS $2:name ON $1:name(${constraintPatterns.join()})`;\n    return this._client.none(qs, [className, constraintName, ...fieldNames]).catch(error => {\n      if (error.code === PostgresDuplicateRelationError && error.message.includes(constraintName)) {\n        // Index already exists. Ignore error.\n      } else if (\n        error.code === PostgresUniqueIndexViolationError &&\n        error.message.includes(constraintName)\n      ) {\n        // Cast the error into the proper parse error\n        throw new Parse.Error(\n          Parse.Error.DUPLICATE_VALUE,\n          'A duplicate value for a field with unique values was provided'\n        );\n      } else {\n        throw error;\n      }\n    });\n  }\n\n  // Executes a count.\n  async count(\n    className: string,\n    schema: SchemaType,\n    query: QueryType,\n    readPreference?: string,\n    estimate?: boolean = true\n  ) {\n    debug('count');\n    const values = [className];\n    const where = buildWhereClause({\n      schema,\n      query,\n      index: 2,\n      caseInsensitive: false,\n    });\n    values.push(...where.values);\n\n    const wherePattern = where.pattern.length > 0 ? `WHERE ${where.pattern}` : '';\n    let qs = '';\n\n    if (where.pattern.length > 0 || !estimate) {\n      qs = `SELECT count(*) FROM $1:name ${wherePattern}`;\n    } else {\n      qs = 'SELECT reltuples AS approximate_row_count FROM pg_class WHERE relname = $1';\n    }\n\n    return this._client\n      .one(qs, values, a => {\n        if (a.approximate_row_count == null || a.approximate_row_count == -1) {\n          return !isNaN(+a.count) ? +a.count : 0;\n        } else {\n          return +a.approximate_row_count;\n        }\n      })\n      .catch(error => {\n        if (error.code !== PostgresRelationDoesNotExistError) {\n          throw error;\n        }\n        return 0;\n      });\n  }\n\n  async distinct(className: string, schema: SchemaType, query: QueryType, fieldName: string) {\n    debug('distinct');\n    let field = fieldName;\n    let column = fieldName;\n    const isNested = fieldName.indexOf('.') >= 0;\n    if (isNested) {\n      field = transformDotFieldToComponents(fieldName).join('->');\n      column = fieldName.split('.')[0];\n    }\n    const isArrayField =\n      schema.fields && schema.fields[fieldName] && schema.fields[fieldName].type === 'Array';\n    const isPointerField =\n      schema.fields && schema.fields[fieldName] && schema.fields[fieldName].type === 'Pointer';\n    const values = [field, column, className];\n    const where = buildWhereClause({\n      schema,\n      query,\n      index: 4,\n      caseInsensitive: false,\n    });\n    values.push(...where.values);\n\n    const wherePattern = where.pattern.length > 0 ? `WHERE ${where.pattern}` : '';\n    const transformer = isArrayField ? 'jsonb_array_elements' : 'ON';\n    let qs = `SELECT DISTINCT ${transformer}($1:name) $2:name FROM $3:name ${wherePattern}`;\n    if (isNested) {\n      qs = `SELECT DISTINCT ${transformer}($1:raw) $2:raw FROM $3:name ${wherePattern}`;\n    }\n    return this._client\n      .any(qs, values)\n      .catch(error => {\n        if (error.code === PostgresMissingColumnError) {\n          return [];\n        }\n        throw error;\n      })\n      .then(results => {\n        if (!isNested) {\n          results = results.filter(object => object[field] !== null);\n          return results.map(object => {\n            if (!isPointerField) {\n              return object[field];\n            }\n            return {\n              __type: 'Pointer',\n              className: schema.fields[fieldName].targetClass,\n              objectId: object[field],\n            };\n          });\n        }\n        const child = fieldName.split('.')[1];\n        return results.map(object => object[column][child]);\n      })\n      .then(results =>\n        results.map(object => this.postgresObjectToParseObject(className, object, schema))\n      );\n  }\n\n  async aggregate(\n    className: string,\n    schema: any,\n    pipeline: any,\n    readPreference: ?string,\n    hint: ?mixed,\n    explain?: boolean\n  ) {\n    debug('aggregate');\n    const values = [className];\n    let index: number = 2;\n    let columns: string[] = [];\n    let countField = null;\n    let groupValues = null;\n    let wherePattern = '';\n    let limitPattern = '';\n    let skipPattern = '';\n    let sortPattern = '';\n    let groupPattern = '';\n    for (let i = 0; i < pipeline.length; i += 1) {\n      const stage = pipeline[i];\n      if (stage.$group) {\n        for (const field in stage.$group) {\n          const value = stage.$group[field];\n          if (value === null || value === undefined) {\n            continue;\n          }\n          if (field === '_id' && typeof value === 'string' && value !== '') {\n            columns.push(`$${index}:name AS \"objectId\"`);\n            groupPattern = `GROUP BY $${index}:name`;\n            values.push(transformAggregateField(value));\n            index += 1;\n            continue;\n          }\n          if (field === '_id' && typeof value === 'object' && Object.keys(value).length !== 0) {\n            groupValues = value;\n            const groupByFields = [];\n            for (const alias in value) {\n              if (typeof value[alias] === 'string' && value[alias]) {\n                const source = transformAggregateField(value[alias]);\n                if (!groupByFields.includes(`\"${source}\"`)) {\n                  groupByFields.push(`\"${source}\"`);\n                }\n                values.push(source, alias);\n                columns.push(`$${index}:name AS $${index + 1}:name`);\n                index += 2;\n              } else {\n                const operation = Object.keys(value[alias])[0];\n                const source = transformAggregateField(value[alias][operation]);\n                if (mongoAggregateToPostgres[operation]) {\n                  if (!groupByFields.includes(`\"${source}\"`)) {\n                    groupByFields.push(`\"${source}\"`);\n                  }\n                  columns.push(\n                    `EXTRACT(${\n                      mongoAggregateToPostgres[operation]\n                    } FROM $${index}:name AT TIME ZONE 'UTC')::integer AS $${index + 1}:name`\n                  );\n                  values.push(source, alias);\n                  index += 2;\n                }\n              }\n            }\n            groupPattern = `GROUP BY $${index}:raw`;\n            values.push(groupByFields.join());\n            index += 1;\n            continue;\n          }\n          if (typeof value === 'object') {\n            if (value.$sum) {\n              if (typeof value.$sum === 'string') {\n                columns.push(`SUM($${index}:name) AS $${index + 1}:name`);\n                values.push(transformAggregateField(value.$sum), field);\n                index += 2;\n              } else {\n                countField = field;\n                columns.push(`COUNT(*) AS $${index}:name`);\n                values.push(field);\n                index += 1;\n              }\n            }\n            if (value.$max) {\n              columns.push(`MAX($${index}:name) AS $${index + 1}:name`);\n              values.push(transformAggregateField(value.$max), field);\n              index += 2;\n            }\n            if (value.$min) {\n              columns.push(`MIN($${index}:name) AS $${index + 1}:name`);\n              values.push(transformAggregateField(value.$min), field);\n              index += 2;\n            }\n            if (value.$avg) {\n              columns.push(`AVG($${index}:name) AS $${index + 1}:name`);\n              values.push(transformAggregateField(value.$avg), field);\n              index += 2;\n            }\n          }\n        }\n      } else {\n        columns.push('*');\n      }\n      if (stage.$project) {\n        if (columns.includes('*')) {\n          columns = [];\n        }\n        for (const field in stage.$project) {\n          const value = stage.$project[field];\n          if (value === 1 || value === true) {\n            columns.push(`$${index}:name`);\n            values.push(field);\n            index += 1;\n          }\n        }\n      }\n      if (stage.$match) {\n        const patterns = [];\n        const orOrAnd = Object.prototype.hasOwnProperty.call(stage.$match, '$or')\n          ? ' OR '\n          : ' AND ';\n\n        if (stage.$match.$or) {\n          const collapse = {};\n          stage.$match.$or.forEach(element => {\n            for (const key in element) {\n              collapse[key] = element[key];\n            }\n          });\n          stage.$match = collapse;\n        }\n        for (const field in stage.$match) {\n          const value = stage.$match[field];\n          const matchPatterns = [];\n          Object.keys(ParseToPosgresComparator).forEach(cmp => {\n            if (value[cmp]) {\n              const pgComparator = ParseToPosgresComparator[cmp];\n              matchPatterns.push(`$${index}:name ${pgComparator} $${index + 1}`);\n              values.push(field, toPostgresValue(value[cmp]));\n              index += 2;\n            }\n          });\n          if (matchPatterns.length > 0) {\n            patterns.push(`(${matchPatterns.join(' AND ')})`);\n          }\n          if (schema.fields[field] && schema.fields[field].type && matchPatterns.length === 0) {\n            patterns.push(`$${index}:name = $${index + 1}`);\n            values.push(field, value);\n            index += 2;\n          }\n        }\n        wherePattern = patterns.length > 0 ? `WHERE ${patterns.join(` ${orOrAnd} `)}` : '';\n      }\n      if (stage.$limit) {\n        limitPattern = `LIMIT $${index}`;\n        values.push(stage.$limit);\n        index += 1;\n      }\n      if (stage.$skip) {\n        skipPattern = `OFFSET $${index}`;\n        values.push(stage.$skip);\n        index += 1;\n      }\n      if (stage.$sort) {\n        const sort = stage.$sort;\n        const keys = Object.keys(sort);\n        const sorting = keys\n          .map(key => {\n            const transformer = sort[key] === 1 ? 'ASC' : 'DESC';\n            const order = `$${index}:name ${transformer}`;\n            index += 1;\n            return order;\n          })\n          .join();\n        values.push(...keys);\n        sortPattern = sort !== undefined && sorting.length > 0 ? `ORDER BY ${sorting}` : '';\n      }\n    }\n\n    if (groupPattern) {\n      columns.forEach((e, i, a) => {\n        if (e && e.trim() === '*') {\n          a[i] = '';\n        }\n      });\n    }\n\n    const originalQuery = `SELECT ${columns\n      .filter(Boolean)\n      .join()} FROM $1:name ${wherePattern} ${skipPattern} ${groupPattern} ${sortPattern} ${limitPattern}`;\n    const qs = explain ? this.createExplainableQuery(originalQuery) : originalQuery;\n    return this._client.any(qs, values).then(a => {\n      if (explain) {\n        return a;\n      }\n      const results = a.map(object => this.postgresObjectToParseObject(className, object, schema));\n      results.forEach(result => {\n        if (!Object.prototype.hasOwnProperty.call(result, 'objectId')) {\n          result.objectId = null;\n        }\n        if (groupValues) {\n          result.objectId = {};\n          for (const key in groupValues) {\n            result.objectId[key] = result[key];\n            delete result[key];\n          }\n        }\n        if (countField) {\n          result[countField] = parseInt(result[countField], 10);\n        }\n      });\n      return results;\n    });\n  }\n\n  async performInitialization({ VolatileClassesSchemas }: any) {\n    // TODO: This method needs to be rewritten to make proper use of connections (@vitaly-t)\n    debug('performInitialization');\n    await this._ensureSchemaCollectionExists();\n    const promises = VolatileClassesSchemas.map(schema => {\n      return this.createTable(schema.className, schema)\n        .catch(err => {\n          if (\n            err.code === PostgresDuplicateRelationError ||\n            err.code === Parse.Error.INVALID_CLASS_NAME\n          ) {\n            return Promise.resolve();\n          }\n          throw err;\n        })\n        .then(() => this.schemaUpgrade(schema.className, schema));\n    });\n    promises.push(this._listenToSchema());\n    return Promise.all(promises)\n      .then(() => {\n        return this._client.tx('perform-initialization', async t => {\n          await t.none(sql.misc.jsonObjectSetKeys);\n          await t.none(sql.array.add);\n          await t.none(sql.array.addUnique);\n          await t.none(sql.array.remove);\n          await t.none(sql.array.containsAll);\n          await t.none(sql.array.containsAllRegex);\n          await t.none(sql.array.contains);\n          return t.ctx;\n        });\n      })\n      .then(ctx => {\n        debug(`initializationDone in ${ctx.duration}`);\n      })\n      .catch(error => {\n        /* eslint-disable no-console */\n        console.error(error);\n      });\n  }\n\n  async createIndexes(className: string, indexes: any, conn: ?any): Promise<void> {\n    return (conn || this._client).tx(t =>\n      t.batch(\n        indexes.map(i => {\n          return t.none('CREATE INDEX IF NOT EXISTS $1:name ON $2:name ($3:name)', [\n            i.name,\n            className,\n            i.key,\n          ]);\n        })\n      )\n    );\n  }\n\n  async createIndexesIfNeeded(\n    className: string,\n    fieldName: string,\n    type: any,\n    conn: ?any\n  ): Promise<void> {\n    await (conn || this._client).none('CREATE INDEX IF NOT EXISTS $1:name ON $2:name ($3:name)', [\n      fieldName,\n      className,\n      type,\n    ]);\n  }\n\n  async dropIndexes(className: string, indexes: any, conn: any): Promise<void> {\n    const queries = indexes.map(i => ({\n      query: 'DROP INDEX $1:name',\n      values: i,\n    }));\n    await (conn || this._client).tx(t => t.none(this._pgp.helpers.concat(queries)));\n  }\n\n  async getIndexes(className: string) {\n    const qs = 'SELECT * FROM pg_indexes WHERE tablename = ${className}';\n    return this._client.any(qs, { className });\n  }\n\n  async updateSchemaWithIndexes(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  // Used for testing purposes\n  async updateEstimatedCount(className: string) {\n    return this._client.none('ANALYZE $1:name', [className]);\n  }\n\n  async createTransactionalSession(): Promise<any> {\n    return new Promise(resolve => {\n      const transactionalSession = {};\n      transactionalSession.result = this._client.tx(t => {\n        transactionalSession.t = t;\n        transactionalSession.promise = new Promise(resolve => {\n          transactionalSession.resolve = resolve;\n        });\n        transactionalSession.batch = [];\n        resolve(transactionalSession);\n        return transactionalSession.promise;\n      });\n    });\n  }\n\n  commitTransactionalSession(transactionalSession: any): Promise<void> {\n    transactionalSession.resolve(transactionalSession.t.batch(transactionalSession.batch));\n    return transactionalSession.result;\n  }\n\n  abortTransactionalSession(transactionalSession: any): Promise<void> {\n    const result = transactionalSession.result.catch();\n    transactionalSession.batch.push(Promise.reject());\n    transactionalSession.resolve(transactionalSession.t.batch(transactionalSession.batch));\n    return result;\n  }\n\n  async ensureIndex(\n    className: string,\n    schema: SchemaType,\n    fieldNames: string[],\n    indexName: ?string,\n    caseInsensitive: boolean = false,\n    options?: Object = {}\n  ): Promise<any> {\n    const conn = options.conn !== undefined ? options.conn : this._client;\n    const defaultIndexName = `parse_default_${fieldNames.sort().join('_')}`;\n    const indexNameOptions: Object =\n      indexName != null ? { name: indexName } : { name: defaultIndexName };\n    const constraintPatterns = caseInsensitive\n      ? fieldNames.map((fieldName, index) => `lower($${index + 3}:name) varchar_pattern_ops`)\n      : fieldNames.map((fieldName, index) => `$${index + 3}:name`);\n    const qs = `CREATE INDEX IF NOT EXISTS $1:name ON $2:name (${constraintPatterns.join()})`;\n    await conn.none(qs, [indexNameOptions.name, className, ...fieldNames]).catch(error => {\n      if (\n        error.code === PostgresDuplicateRelationError &&\n        error.message.includes(indexNameOptions.name)\n      ) {\n        // Index already exists. Ignore error.\n      } else if (\n        error.code === PostgresUniqueIndexViolationError &&\n        error.message.includes(indexNameOptions.name)\n      ) {\n        // Cast the error into the proper parse error\n        throw new Parse.Error(\n          Parse.Error.DUPLICATE_VALUE,\n          'A duplicate value for a field with unique values was provided'\n        );\n      } else {\n        throw error;\n      }\n    });\n  }\n}\n\nfunction convertPolygonToSQL(polygon) {\n  if (polygon.length < 3) {\n    throw new Parse.Error(Parse.Error.INVALID_JSON, `Polygon must have at least 3 values`);\n  }\n  if (\n    polygon[0][0] !== polygon[polygon.length - 1][0] ||\n    polygon[0][1] !== polygon[polygon.length - 1][1]\n  ) {\n    polygon.push(polygon[0]);\n  }\n  const unique = polygon.filter((item, index, ar) => {\n    let foundIndex = -1;\n    for (let i = 0; i < ar.length; i += 1) {\n      const pt = ar[i];\n      if (pt[0] === item[0] && pt[1] === item[1]) {\n        foundIndex = i;\n        break;\n      }\n    }\n    return foundIndex === index;\n  });\n  if (unique.length < 3) {\n    throw new Parse.Error(\n      Parse.Error.INTERNAL_SERVER_ERROR,\n      'GeoJSON: Loop must have at least 3 different vertices'\n    );\n  }\n  const points = polygon\n    .map(point => {\n      Parse.GeoPoint._validate(parseFloat(point[1]), parseFloat(point[0]));\n      return `(${point[1]}, ${point[0]})`;\n    })\n    .join(', ');\n  return `(${points})`;\n}\n\nfunction removeWhiteSpace(regex) {\n  if (!regex.endsWith('\\n')) {\n    regex += '\\n';\n  }\n\n  // remove non escaped comments\n  return (\n    regex\n      .replace(/([^\\\\])#.*\\n/gim, '$1')\n      // remove lines starting with a comment\n      .replace(/^#.*\\n/gim, '')\n      // remove non escaped whitespace\n      .replace(/([^\\\\])\\s+/gim, '$1')\n      // remove whitespace at the beginning of a line\n      .replace(/^\\s+/, '')\n      .trim()\n  );\n}\n\nfunction processRegexPattern(s) {\n  if (s && s.startsWith('^')) {\n    // regex for startsWith\n    return '^' + literalizeRegexPart(s.slice(1));\n  } else if (s && s.endsWith('$')) {\n    // regex for endsWith\n    return literalizeRegexPart(s.slice(0, s.length - 1)) + '$';\n  }\n\n  // regex for contains\n  return literalizeRegexPart(s);\n}\n\nfunction isStartsWithRegex(value) {\n  if (!value || typeof value !== 'string' || !value.startsWith('^')) {\n    return false;\n  }\n\n  const matches = value.match(/\\^\\\\Q.*\\\\E/);\n  return !!matches;\n}\n\nfunction isAllValuesRegexOrNone(values) {\n  if (!values || !Array.isArray(values) || values.length === 0) {\n    return true;\n  }\n\n  const firstValuesIsRegex = isStartsWithRegex(values[0].$regex);\n  if (values.length === 1) {\n    return firstValuesIsRegex;\n  }\n\n  for (let i = 1, length = values.length; i < length; ++i) {\n    if (firstValuesIsRegex !== isStartsWithRegex(values[i].$regex)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isAnyValueRegexStartsWith(values) {\n  return values.some(function (value) {\n    return isStartsWithRegex(value.$regex);\n  });\n}\n\nfunction createLiteralRegex(remaining) {\n  return remaining\n    .split('')\n    .map(c => {\n      const regex = RegExp('[0-9 ]|\\\\p{L}', 'u'); // Support all unicode letter chars\n      if (c.match(regex) !== null) {\n        // don't escape alphanumeric characters\n        return c;\n      }\n      // escape everything else (single quotes with single quotes, everything else with a backslash)\n      return c === `'` ? `''` : `\\\\${c}`;\n    })\n    .join('');\n}\n\nfunction literalizeRegexPart(s: string) {\n  const matcher1 = /\\\\Q((?!\\\\E).*)\\\\E$/;\n  const result1: any = s.match(matcher1);\n  if (result1 && result1.length > 1 && result1.index > -1) {\n    // process regex that has a beginning and an end specified for the literal text\n    const prefix = s.substr(0, result1.index);\n    const remaining = result1[1];\n\n    return literalizeRegexPart(prefix) + createLiteralRegex(remaining);\n  }\n\n  // process regex that has a beginning specified for the literal text\n  const matcher2 = /\\\\Q((?!\\\\E).*)$/;\n  const result2: any = s.match(matcher2);\n  if (result2 && result2.length > 1 && result2.index > -1) {\n    const prefix = s.substr(0, result2.index);\n    const remaining = result2[1];\n\n    return literalizeRegexPart(prefix) + createLiteralRegex(remaining);\n  }\n\n  // remove all instances of \\Q and \\E from the remaining text & escape single quotes\n  return s\n    .replace(/([^\\\\])(\\\\E)/, '$1')\n    .replace(/([^\\\\])(\\\\Q)/, '$1')\n    .replace(/^\\\\E/, '')\n    .replace(/^\\\\Q/, '')\n    .replace(/([^'])'/, `$1''`)\n    .replace(/^'([^'])/, `''$1`);\n}\n\nvar GeoPointCoder = {\n  isValidJSON(value) {\n    return typeof value === 'object' && value !== null && value.__type === 'GeoPoint';\n  },\n};\n\nexport default PostgresStorageAdapter;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"380cbb63b735aa7b398bce4e75cbd42e68a7983c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1msdlku8l5=function(){return actualCoverage;};}return actualCoverage;}cov_1msdlku8l5();cov_1msdlku8l5().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1msdlku8l5().s[1]++;exports.default=exports.PostgresStorageAdapter=void 0;var _PostgresClient=(cov_1msdlku8l5().s[2]++,require("./PostgresClient"));var _node=(cov_1msdlku8l5().s[3]++,_interopRequireDefault(require("parse/node")));var _lodash=(cov_1msdlku8l5().s[4]++,_interopRequireDefault(require("lodash")));var _uuid=(cov_1msdlku8l5().s[5]++,require("uuid"));var _sql=(cov_1msdlku8l5().s[6]++,_interopRequireDefault(require("./sql")));var _StorageAdapter=(cov_1msdlku8l5().s[7]++,require("../StorageAdapter"));function _interopRequireDefault(obj){cov_1msdlku8l5().f[0]++;cov_1msdlku8l5().s[8]++;return(cov_1msdlku8l5().b[1][0]++,obj)&&(cov_1msdlku8l5().b[1][1]++,obj.__esModule)?(cov_1msdlku8l5().b[0][0]++,obj):(cov_1msdlku8l5().b[0][1]++,{default:obj});}function ownKeys(object,enumerableOnly){cov_1msdlku8l5().f[1]++;var keys=(cov_1msdlku8l5().s[9]++,Object.keys(object));cov_1msdlku8l5().s[10]++;if(Object.getOwnPropertySymbols){cov_1msdlku8l5().b[2][0]++;var symbols=(cov_1msdlku8l5().s[11]++,Object.getOwnPropertySymbols(object));cov_1msdlku8l5().s[12]++;if(enumerableOnly){cov_1msdlku8l5().b[3][0]++;cov_1msdlku8l5().s[13]++;symbols=symbols.filter(function(sym){cov_1msdlku8l5().f[2]++;cov_1msdlku8l5().s[14]++;return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}else{cov_1msdlku8l5().b[3][1]++;}cov_1msdlku8l5().s[15]++;keys.push.apply(keys,symbols);}else{cov_1msdlku8l5().b[2][1]++;}cov_1msdlku8l5().s[16]++;return keys;}function _objectSpread(target){cov_1msdlku8l5().f[3]++;cov_1msdlku8l5().s[17]++;for(var i=(cov_1msdlku8l5().s[18]++,1);i<arguments.length;i++){var source=(cov_1msdlku8l5().s[19]++,arguments[i]!=null?(cov_1msdlku8l5().b[4][0]++,arguments[i]):(cov_1msdlku8l5().b[4][1]++,{}));cov_1msdlku8l5().s[20]++;if(i%2){cov_1msdlku8l5().b[5][0]++;cov_1msdlku8l5().s[21]++;ownKeys(Object(source),true).forEach(function(key){cov_1msdlku8l5().f[4]++;cov_1msdlku8l5().s[22]++;_defineProperty(target,key,source[key]);});}else{cov_1msdlku8l5().b[5][1]++;cov_1msdlku8l5().s[23]++;if(Object.getOwnPropertyDescriptors){cov_1msdlku8l5().b[6][0]++;cov_1msdlku8l5().s[24]++;Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{cov_1msdlku8l5().b[6][1]++;cov_1msdlku8l5().s[25]++;ownKeys(Object(source)).forEach(function(key){cov_1msdlku8l5().f[5]++;cov_1msdlku8l5().s[26]++;Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}}cov_1msdlku8l5().s[27]++;return target;}function _defineProperty(obj,key,value){cov_1msdlku8l5().f[6]++;cov_1msdlku8l5().s[28]++;if(key in obj){cov_1msdlku8l5().b[7][0]++;cov_1msdlku8l5().s[29]++;Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{cov_1msdlku8l5().b[7][1]++;cov_1msdlku8l5().s[30]++;obj[key]=value;}cov_1msdlku8l5().s[31]++;return obj;}const PostgresRelationDoesNotExistError=(cov_1msdlku8l5().s[32]++,'42P01');const PostgresDuplicateRelationError=(cov_1msdlku8l5().s[33]++,'42P07');const PostgresDuplicateColumnError=(cov_1msdlku8l5().s[34]++,'42701');const PostgresMissingColumnError=(cov_1msdlku8l5().s[35]++,'42703');const PostgresDuplicateObjectError=(cov_1msdlku8l5().s[36]++,'42710');const PostgresUniqueIndexViolationError=(cov_1msdlku8l5().s[37]++,'23505');const logger=(cov_1msdlku8l5().s[38]++,require('../../../logger'));cov_1msdlku8l5().s[39]++;const debug=function(...args){cov_1msdlku8l5().f[7]++;cov_1msdlku8l5().s[40]++;args=['PG: '+arguments[0]].concat(args.slice(1,args.length));const log=(cov_1msdlku8l5().s[41]++,logger.getLogger());cov_1msdlku8l5().s[42]++;log.debug.apply(log,args);};cov_1msdlku8l5().s[43]++;const parseTypeToPostgresType=type=>{cov_1msdlku8l5().f[8]++;cov_1msdlku8l5().s[44]++;switch(type.type){case'String':cov_1msdlku8l5().b[8][0]++;cov_1msdlku8l5().s[45]++;return'text';case'Date':cov_1msdlku8l5().b[8][1]++;cov_1msdlku8l5().s[46]++;return'timestamp with time zone';case'Object':cov_1msdlku8l5().b[8][2]++;cov_1msdlku8l5().s[47]++;return'jsonb';case'File':cov_1msdlku8l5().b[8][3]++;cov_1msdlku8l5().s[48]++;return'text';case'Boolean':cov_1msdlku8l5().b[8][4]++;cov_1msdlku8l5().s[49]++;return'boolean';case'Pointer':cov_1msdlku8l5().b[8][5]++;cov_1msdlku8l5().s[50]++;return'text';case'Number':cov_1msdlku8l5().b[8][6]++;cov_1msdlku8l5().s[51]++;return'double precision';case'GeoPoint':cov_1msdlku8l5().b[8][7]++;cov_1msdlku8l5().s[52]++;return'point';case'Bytes':cov_1msdlku8l5().b[8][8]++;cov_1msdlku8l5().s[53]++;return'jsonb';case'Polygon':cov_1msdlku8l5().b[8][9]++;cov_1msdlku8l5().s[54]++;return'polygon';case'Array':cov_1msdlku8l5().b[8][10]++;cov_1msdlku8l5().s[55]++;if((cov_1msdlku8l5().b[10][0]++,type.contents)&&(cov_1msdlku8l5().b[10][1]++,type.contents.type==='String')){cov_1msdlku8l5().b[9][0]++;cov_1msdlku8l5().s[56]++;return'text[]';}else{cov_1msdlku8l5().b[9][1]++;cov_1msdlku8l5().s[57]++;return'jsonb';}default:cov_1msdlku8l5().b[8][11]++;cov_1msdlku8l5().s[58]++;throw`no type for ${JSON.stringify(type)} yet`;}};const ParseToPosgresComparator=(cov_1msdlku8l5().s[59]++,{$gt:'>',$lt:'<',$gte:'>=',$lte:'<='});const mongoAggregateToPostgres=(cov_1msdlku8l5().s[60]++,{$dayOfMonth:'DAY',$dayOfWeek:'DOW',$dayOfYear:'DOY',$isoDayOfWeek:'ISODOW',$isoWeekYear:'ISOYEAR',$hour:'HOUR',$minute:'MINUTE',$second:'SECOND',$millisecond:'MILLISECONDS',$month:'MONTH',$week:'WEEK',$year:'YEAR'});cov_1msdlku8l5().s[61]++;const toPostgresValue=value=>{cov_1msdlku8l5().f[9]++;cov_1msdlku8l5().s[62]++;if(typeof value==='object'){cov_1msdlku8l5().b[11][0]++;cov_1msdlku8l5().s[63]++;if(value.__type==='Date'){cov_1msdlku8l5().b[12][0]++;cov_1msdlku8l5().s[64]++;return value.iso;}else{cov_1msdlku8l5().b[12][1]++;}cov_1msdlku8l5().s[65]++;if(value.__type==='File'){cov_1msdlku8l5().b[13][0]++;cov_1msdlku8l5().s[66]++;return value.name;}else{cov_1msdlku8l5().b[13][1]++;}}else{cov_1msdlku8l5().b[11][1]++;}cov_1msdlku8l5().s[67]++;return value;};cov_1msdlku8l5().s[68]++;const transformValue=value=>{cov_1msdlku8l5().f[10]++;cov_1msdlku8l5().s[69]++;if((cov_1msdlku8l5().b[15][0]++,typeof value==='object')&&(cov_1msdlku8l5().b[15][1]++,value.__type==='Pointer')){cov_1msdlku8l5().b[14][0]++;cov_1msdlku8l5().s[70]++;return value.objectId;}else{cov_1msdlku8l5().b[14][1]++;}cov_1msdlku8l5().s[71]++;return value;};// Duplicate from then mongo adapter...
const emptyCLPS=(cov_1msdlku8l5().s[72]++,Object.freeze({find:{},get:{},count:{},create:{},update:{},delete:{},addField:{},protectedFields:{}}));const defaultCLPS=(cov_1msdlku8l5().s[73]++,Object.freeze({find:{'*':true},get:{'*':true},count:{'*':true},create:{'*':true},update:{'*':true},delete:{'*':true},addField:{'*':true},protectedFields:{'*':[]}}));cov_1msdlku8l5().s[74]++;const toParseSchema=schema=>{cov_1msdlku8l5().f[11]++;cov_1msdlku8l5().s[75]++;if(schema.className==='_User'){cov_1msdlku8l5().b[16][0]++;cov_1msdlku8l5().s[76]++;delete schema.fields._hashed_password;}else{cov_1msdlku8l5().b[16][1]++;}cov_1msdlku8l5().s[77]++;if(schema.fields){cov_1msdlku8l5().b[17][0]++;cov_1msdlku8l5().s[78]++;delete schema.fields._wperm;cov_1msdlku8l5().s[79]++;delete schema.fields._rperm;}else{cov_1msdlku8l5().b[17][1]++;}let clps=(cov_1msdlku8l5().s[80]++,defaultCLPS);cov_1msdlku8l5().s[81]++;if(schema.classLevelPermissions){cov_1msdlku8l5().b[18][0]++;cov_1msdlku8l5().s[82]++;clps=_objectSpread(_objectSpread({},emptyCLPS),schema.classLevelPermissions);}else{cov_1msdlku8l5().b[18][1]++;}let indexes=(cov_1msdlku8l5().s[83]++,{});cov_1msdlku8l5().s[84]++;if(schema.indexes){cov_1msdlku8l5().b[19][0]++;cov_1msdlku8l5().s[85]++;indexes=_objectSpread({},schema.indexes);}else{cov_1msdlku8l5().b[19][1]++;}cov_1msdlku8l5().s[86]++;return{className:schema.className,fields:schema.fields,classLevelPermissions:clps,indexes};};cov_1msdlku8l5().s[87]++;const toPostgresSchema=schema=>{cov_1msdlku8l5().f[12]++;cov_1msdlku8l5().s[88]++;if(!schema){cov_1msdlku8l5().b[20][0]++;cov_1msdlku8l5().s[89]++;return schema;}else{cov_1msdlku8l5().b[20][1]++;}cov_1msdlku8l5().s[90]++;schema.fields=(cov_1msdlku8l5().b[21][0]++,schema.fields)||(cov_1msdlku8l5().b[21][1]++,{});cov_1msdlku8l5().s[91]++;schema.fields._wperm={type:'Array',contents:{type:'String'}};cov_1msdlku8l5().s[92]++;schema.fields._rperm={type:'Array',contents:{type:'String'}};cov_1msdlku8l5().s[93]++;if(schema.className==='_User'){cov_1msdlku8l5().b[22][0]++;cov_1msdlku8l5().s[94]++;schema.fields._hashed_password={type:'String'};cov_1msdlku8l5().s[95]++;schema.fields._password_history={type:'Array'};}else{cov_1msdlku8l5().b[22][1]++;}cov_1msdlku8l5().s[96]++;return schema;};cov_1msdlku8l5().s[97]++;const handleDotFields=object=>{cov_1msdlku8l5().f[13]++;cov_1msdlku8l5().s[98]++;Object.keys(object).forEach(fieldName=>{cov_1msdlku8l5().f[14]++;cov_1msdlku8l5().s[99]++;if(fieldName.indexOf('.')>-1){cov_1msdlku8l5().b[23][0]++;const components=(cov_1msdlku8l5().s[100]++,fieldName.split('.'));const first=(cov_1msdlku8l5().s[101]++,components.shift());cov_1msdlku8l5().s[102]++;object[first]=(cov_1msdlku8l5().b[24][0]++,object[first])||(cov_1msdlku8l5().b[24][1]++,{});let currentObj=(cov_1msdlku8l5().s[103]++,object[first]);let next;let value=(cov_1msdlku8l5().s[104]++,object[fieldName]);cov_1msdlku8l5().s[105]++;if((cov_1msdlku8l5().b[26][0]++,value)&&(cov_1msdlku8l5().b[26][1]++,value.__op==='Delete')){cov_1msdlku8l5().b[25][0]++;cov_1msdlku8l5().s[106]++;value=undefined;}else{cov_1msdlku8l5().b[25][1]++;}/* eslint-disable no-cond-assign */cov_1msdlku8l5().s[107]++;while(next=components.shift()){cov_1msdlku8l5().s[108]++;/* eslint-enable no-cond-assign */currentObj[next]=(cov_1msdlku8l5().b[27][0]++,currentObj[next])||(cov_1msdlku8l5().b[27][1]++,{});cov_1msdlku8l5().s[109]++;if(components.length===0){cov_1msdlku8l5().b[28][0]++;cov_1msdlku8l5().s[110]++;currentObj[next]=value;}else{cov_1msdlku8l5().b[28][1]++;}cov_1msdlku8l5().s[111]++;currentObj=currentObj[next];}cov_1msdlku8l5().s[112]++;delete object[fieldName];}else{cov_1msdlku8l5().b[23][1]++;}});cov_1msdlku8l5().s[113]++;return object;};cov_1msdlku8l5().s[114]++;const transformDotFieldToComponents=fieldName=>{cov_1msdlku8l5().f[15]++;cov_1msdlku8l5().s[115]++;return fieldName.split('.').map((cmpt,index)=>{cov_1msdlku8l5().f[16]++;cov_1msdlku8l5().s[116]++;if(index===0){cov_1msdlku8l5().b[29][0]++;cov_1msdlku8l5().s[117]++;return`"${cmpt}"`;}else{cov_1msdlku8l5().b[29][1]++;}cov_1msdlku8l5().s[118]++;return`'${cmpt}'`;});};cov_1msdlku8l5().s[119]++;const transformDotField=fieldName=>{cov_1msdlku8l5().f[17]++;cov_1msdlku8l5().s[120]++;if(fieldName.indexOf('.')===-1){cov_1msdlku8l5().b[30][0]++;cov_1msdlku8l5().s[121]++;return`"${fieldName}"`;}else{cov_1msdlku8l5().b[30][1]++;}const components=(cov_1msdlku8l5().s[122]++,transformDotFieldToComponents(fieldName));let name=(cov_1msdlku8l5().s[123]++,components.slice(0,components.length-1).join('->'));cov_1msdlku8l5().s[124]++;name+='->>'+components[components.length-1];cov_1msdlku8l5().s[125]++;return name;};cov_1msdlku8l5().s[126]++;const transformAggregateField=fieldName=>{cov_1msdlku8l5().f[18]++;cov_1msdlku8l5().s[127]++;if(typeof fieldName!=='string'){cov_1msdlku8l5().b[31][0]++;cov_1msdlku8l5().s[128]++;return fieldName;}else{cov_1msdlku8l5().b[31][1]++;}cov_1msdlku8l5().s[129]++;if(fieldName==='$_created_at'){cov_1msdlku8l5().b[32][0]++;cov_1msdlku8l5().s[130]++;return'createdAt';}else{cov_1msdlku8l5().b[32][1]++;}cov_1msdlku8l5().s[131]++;if(fieldName==='$_updated_at'){cov_1msdlku8l5().b[33][0]++;cov_1msdlku8l5().s[132]++;return'updatedAt';}else{cov_1msdlku8l5().b[33][1]++;}cov_1msdlku8l5().s[133]++;return fieldName.substr(1);};cov_1msdlku8l5().s[134]++;const validateKeys=object=>{cov_1msdlku8l5().f[19]++;cov_1msdlku8l5().s[135]++;if(typeof object=='object'){cov_1msdlku8l5().b[34][0]++;cov_1msdlku8l5().s[136]++;for(const key in object){cov_1msdlku8l5().s[137]++;if(typeof object[key]=='object'){cov_1msdlku8l5().b[35][0]++;cov_1msdlku8l5().s[138]++;validateKeys(object[key]);}else{cov_1msdlku8l5().b[35][1]++;}cov_1msdlku8l5().s[139]++;if((cov_1msdlku8l5().b[37][0]++,key.includes('$'))||(cov_1msdlku8l5().b[37][1]++,key.includes('.'))){cov_1msdlku8l5().b[36][0]++;cov_1msdlku8l5().s[140]++;throw new _node.default.Error(_node.default.Error.INVALID_NESTED_KEY,"Nested keys should not contain the '$' or '.' characters");}else{cov_1msdlku8l5().b[36][1]++;}}}else{cov_1msdlku8l5().b[34][1]++;}};// Returns the list of join tables on a schema
cov_1msdlku8l5().s[141]++;const joinTablesForSchema=schema=>{cov_1msdlku8l5().f[20]++;const list=(cov_1msdlku8l5().s[142]++,[]);cov_1msdlku8l5().s[143]++;if(schema){cov_1msdlku8l5().b[38][0]++;cov_1msdlku8l5().s[144]++;Object.keys(schema.fields).forEach(field=>{cov_1msdlku8l5().f[21]++;cov_1msdlku8l5().s[145]++;if(schema.fields[field].type==='Relation'){cov_1msdlku8l5().b[39][0]++;cov_1msdlku8l5().s[146]++;list.push(`_Join:${field}:${schema.className}`);}else{cov_1msdlku8l5().b[39][1]++;}});}else{cov_1msdlku8l5().b[38][1]++;}cov_1msdlku8l5().s[147]++;return list;};cov_1msdlku8l5().s[148]++;const buildWhereClause=({schema,query,index,caseInsensitive})=>{cov_1msdlku8l5().f[22]++;const patterns=(cov_1msdlku8l5().s[149]++,[]);let values=(cov_1msdlku8l5().s[150]++,[]);const sorts=(cov_1msdlku8l5().s[151]++,[]);cov_1msdlku8l5().s[152]++;schema=toPostgresSchema(schema);cov_1msdlku8l5().s[153]++;for(const fieldName in query){const isArrayField=(cov_1msdlku8l5().s[154]++,(cov_1msdlku8l5().b[40][0]++,schema.fields)&&(cov_1msdlku8l5().b[40][1]++,schema.fields[fieldName])&&(cov_1msdlku8l5().b[40][2]++,schema.fields[fieldName].type==='Array'));const initialPatternsLength=(cov_1msdlku8l5().s[155]++,patterns.length);const fieldValue=(cov_1msdlku8l5().s[156]++,query[fieldName]);// nothing in the schema, it's gonna blow up
cov_1msdlku8l5().s[157]++;if(!schema.fields[fieldName]){cov_1msdlku8l5().b[41][0]++;cov_1msdlku8l5().s[158]++;// as it won't exist
if((cov_1msdlku8l5().b[43][0]++,fieldValue)&&(cov_1msdlku8l5().b[43][1]++,fieldValue.$exists===false)){cov_1msdlku8l5().b[42][0]++;cov_1msdlku8l5().s[159]++;continue;}else{cov_1msdlku8l5().b[42][1]++;}}else{cov_1msdlku8l5().b[41][1]++;}const authDataMatch=(cov_1msdlku8l5().s[160]++,fieldName.match(/^_auth_data_([a-zA-Z0-9_]+)$/));cov_1msdlku8l5().s[161]++;if(authDataMatch){cov_1msdlku8l5().b[44][0]++;cov_1msdlku8l5().s[162]++;// TODO: Handle querying by _auth_data_provider, authData is stored in authData field
continue;}else{cov_1msdlku8l5().b[44][1]++;cov_1msdlku8l5().s[163]++;if((cov_1msdlku8l5().b[46][0]++,caseInsensitive)&&((cov_1msdlku8l5().b[46][1]++,fieldName==='username')||(cov_1msdlku8l5().b[46][2]++,fieldName==='email'))){cov_1msdlku8l5().b[45][0]++;cov_1msdlku8l5().s[164]++;patterns.push(`LOWER($${index}:name) = LOWER($${index+1})`);cov_1msdlku8l5().s[165]++;values.push(fieldName,fieldValue);cov_1msdlku8l5().s[166]++;index+=2;}else{cov_1msdlku8l5().b[45][1]++;cov_1msdlku8l5().s[167]++;if(fieldName.indexOf('.')>=0){cov_1msdlku8l5().b[47][0]++;let name=(cov_1msdlku8l5().s[168]++,transformDotField(fieldName));cov_1msdlku8l5().s[169]++;if(fieldValue===null){cov_1msdlku8l5().b[48][0]++;cov_1msdlku8l5().s[170]++;patterns.push(`$${index}:raw IS NULL`);cov_1msdlku8l5().s[171]++;values.push(name);cov_1msdlku8l5().s[172]++;index+=1;cov_1msdlku8l5().s[173]++;continue;}else{cov_1msdlku8l5().b[48][1]++;cov_1msdlku8l5().s[174]++;if(fieldValue.$in){cov_1msdlku8l5().b[49][0]++;cov_1msdlku8l5().s[175]++;name=transformDotFieldToComponents(fieldName).join('->');cov_1msdlku8l5().s[176]++;patterns.push(`($${index}:raw)::jsonb @> $${index+1}::jsonb`);cov_1msdlku8l5().s[177]++;values.push(name,JSON.stringify(fieldValue.$in));cov_1msdlku8l5().s[178]++;index+=2;}else{cov_1msdlku8l5().b[49][1]++;cov_1msdlku8l5().s[179]++;if(fieldValue.$regex){// Handle later
cov_1msdlku8l5().b[50][0]++;}else{cov_1msdlku8l5().b[50][1]++;cov_1msdlku8l5().s[180]++;if(typeof fieldValue!=='object'){cov_1msdlku8l5().b[51][0]++;cov_1msdlku8l5().s[181]++;patterns.push(`$${index}:raw = $${index+1}::text`);cov_1msdlku8l5().s[182]++;values.push(name,fieldValue);cov_1msdlku8l5().s[183]++;index+=2;}else{cov_1msdlku8l5().b[51][1]++;}}}}}else{cov_1msdlku8l5().b[47][1]++;cov_1msdlku8l5().s[184]++;if((cov_1msdlku8l5().b[53][0]++,fieldValue===null)||(cov_1msdlku8l5().b[53][1]++,fieldValue===undefined)){cov_1msdlku8l5().b[52][0]++;cov_1msdlku8l5().s[185]++;patterns.push(`$${index}:name IS NULL`);cov_1msdlku8l5().s[186]++;values.push(fieldName);cov_1msdlku8l5().s[187]++;index+=1;cov_1msdlku8l5().s[188]++;continue;}else{cov_1msdlku8l5().b[52][1]++;cov_1msdlku8l5().s[189]++;if(typeof fieldValue==='string'){cov_1msdlku8l5().b[54][0]++;cov_1msdlku8l5().s[190]++;patterns.push(`$${index}:name = $${index+1}`);cov_1msdlku8l5().s[191]++;values.push(fieldName,fieldValue);cov_1msdlku8l5().s[192]++;index+=2;}else{cov_1msdlku8l5().b[54][1]++;cov_1msdlku8l5().s[193]++;if(typeof fieldValue==='boolean'){cov_1msdlku8l5().b[55][0]++;cov_1msdlku8l5().s[194]++;patterns.push(`$${index}:name = $${index+1}`);// Can't cast boolean to double precision
cov_1msdlku8l5().s[195]++;if((cov_1msdlku8l5().b[57][0]++,schema.fields[fieldName])&&(cov_1msdlku8l5().b[57][1]++,schema.fields[fieldName].type==='Number')){cov_1msdlku8l5().b[56][0]++;// Should always return zero results
const MAX_INT_PLUS_ONE=(cov_1msdlku8l5().s[196]++,9223372036854775808);cov_1msdlku8l5().s[197]++;values.push(fieldName,MAX_INT_PLUS_ONE);}else{cov_1msdlku8l5().b[56][1]++;cov_1msdlku8l5().s[198]++;values.push(fieldName,fieldValue);}cov_1msdlku8l5().s[199]++;index+=2;}else{cov_1msdlku8l5().b[55][1]++;cov_1msdlku8l5().s[200]++;if(typeof fieldValue==='number'){cov_1msdlku8l5().b[58][0]++;cov_1msdlku8l5().s[201]++;patterns.push(`$${index}:name = $${index+1}`);cov_1msdlku8l5().s[202]++;values.push(fieldName,fieldValue);cov_1msdlku8l5().s[203]++;index+=2;}else{cov_1msdlku8l5().b[58][1]++;cov_1msdlku8l5().s[204]++;if(['$or','$nor','$and'].includes(fieldName)){cov_1msdlku8l5().b[59][0]++;const clauses=(cov_1msdlku8l5().s[205]++,[]);const clauseValues=(cov_1msdlku8l5().s[206]++,[]);cov_1msdlku8l5().s[207]++;fieldValue.forEach(subQuery=>{cov_1msdlku8l5().f[23]++;const clause=(cov_1msdlku8l5().s[208]++,buildWhereClause({schema,query:subQuery,index,caseInsensitive}));cov_1msdlku8l5().s[209]++;if(clause.pattern.length>0){cov_1msdlku8l5().b[60][0]++;cov_1msdlku8l5().s[210]++;clauses.push(clause.pattern);cov_1msdlku8l5().s[211]++;clauseValues.push(...clause.values);cov_1msdlku8l5().s[212]++;index+=clause.values.length;}else{cov_1msdlku8l5().b[60][1]++;}});const orOrAnd=(cov_1msdlku8l5().s[213]++,fieldName==='$and'?(cov_1msdlku8l5().b[61][0]++,' AND '):(cov_1msdlku8l5().b[61][1]++,' OR '));const not=(cov_1msdlku8l5().s[214]++,fieldName==='$nor'?(cov_1msdlku8l5().b[62][0]++,' NOT '):(cov_1msdlku8l5().b[62][1]++,''));cov_1msdlku8l5().s[215]++;patterns.push(`${not}(${clauses.join(orOrAnd)})`);cov_1msdlku8l5().s[216]++;values.push(...clauseValues);}else{cov_1msdlku8l5().b[59][1]++;}}}}}}}}cov_1msdlku8l5().s[217]++;if(fieldValue.$ne!==undefined){cov_1msdlku8l5().b[63][0]++;cov_1msdlku8l5().s[218]++;if(isArrayField){cov_1msdlku8l5().b[64][0]++;cov_1msdlku8l5().s[219]++;fieldValue.$ne=JSON.stringify([fieldValue.$ne]);cov_1msdlku8l5().s[220]++;patterns.push(`NOT array_contains($${index}:name, $${index+1})`);}else{cov_1msdlku8l5().b[64][1]++;cov_1msdlku8l5().s[221]++;if(fieldValue.$ne===null){cov_1msdlku8l5().b[65][0]++;cov_1msdlku8l5().s[222]++;patterns.push(`$${index}:name IS NOT NULL`);cov_1msdlku8l5().s[223]++;values.push(fieldName);cov_1msdlku8l5().s[224]++;index+=1;cov_1msdlku8l5().s[225]++;continue;}else{cov_1msdlku8l5().b[65][1]++;cov_1msdlku8l5().s[226]++;// if not null, we need to manually exclude null
if(fieldValue.$ne.__type==='GeoPoint'){cov_1msdlku8l5().b[66][0]++;cov_1msdlku8l5().s[227]++;patterns.push(`($${index}:name <> POINT($${index+1}, $${index+2}) OR $${index}:name IS NULL)`);}else{cov_1msdlku8l5().b[66][1]++;cov_1msdlku8l5().s[228]++;if(fieldName.indexOf('.')>=0){cov_1msdlku8l5().b[67][0]++;const constraintFieldName=(cov_1msdlku8l5().s[229]++,transformDotField(fieldName));cov_1msdlku8l5().s[230]++;patterns.push(`(${constraintFieldName} <> $${index} OR ${constraintFieldName} IS NULL)`);}else{cov_1msdlku8l5().b[67][1]++;cov_1msdlku8l5().s[231]++;patterns.push(`($${index}:name <> $${index+1} OR $${index}:name IS NULL)`);}}}}cov_1msdlku8l5().s[232]++;if(fieldValue.$ne.__type==='GeoPoint'){cov_1msdlku8l5().b[68][0]++;const point=(cov_1msdlku8l5().s[233]++,fieldValue.$ne);cov_1msdlku8l5().s[234]++;values.push(fieldName,point.longitude,point.latitude);cov_1msdlku8l5().s[235]++;index+=3;}else{cov_1msdlku8l5().b[68][1]++;cov_1msdlku8l5().s[236]++;// TODO: support arrays
values.push(fieldName,fieldValue.$ne);cov_1msdlku8l5().s[237]++;index+=2;}}else{cov_1msdlku8l5().b[63][1]++;}cov_1msdlku8l5().s[238]++;if(fieldValue.$eq!==undefined){cov_1msdlku8l5().b[69][0]++;cov_1msdlku8l5().s[239]++;if(fieldValue.$eq===null){cov_1msdlku8l5().b[70][0]++;cov_1msdlku8l5().s[240]++;patterns.push(`$${index}:name IS NULL`);cov_1msdlku8l5().s[241]++;values.push(fieldName);cov_1msdlku8l5().s[242]++;index+=1;}else{cov_1msdlku8l5().b[70][1]++;cov_1msdlku8l5().s[243]++;if(fieldName.indexOf('.')>=0){cov_1msdlku8l5().b[71][0]++;cov_1msdlku8l5().s[244]++;values.push(fieldValue.$eq);cov_1msdlku8l5().s[245]++;patterns.push(`${transformDotField(fieldName)} = $${index++}`);}else{cov_1msdlku8l5().b[71][1]++;cov_1msdlku8l5().s[246]++;values.push(fieldName,fieldValue.$eq);cov_1msdlku8l5().s[247]++;patterns.push(`$${index}:name = $${index+1}`);cov_1msdlku8l5().s[248]++;index+=2;}}}else{cov_1msdlku8l5().b[69][1]++;}const isInOrNin=(cov_1msdlku8l5().s[249]++,(cov_1msdlku8l5().b[72][0]++,Array.isArray(fieldValue.$in))||(cov_1msdlku8l5().b[72][1]++,Array.isArray(fieldValue.$nin)));cov_1msdlku8l5().s[250]++;if((cov_1msdlku8l5().b[74][0]++,Array.isArray(fieldValue.$in))&&(cov_1msdlku8l5().b[74][1]++,isArrayField)&&(cov_1msdlku8l5().b[74][2]++,schema.fields[fieldName].contents)&&(cov_1msdlku8l5().b[74][3]++,schema.fields[fieldName].contents.type==='String')){cov_1msdlku8l5().b[73][0]++;const inPatterns=(cov_1msdlku8l5().s[251]++,[]);let allowNull=(cov_1msdlku8l5().s[252]++,false);cov_1msdlku8l5().s[253]++;values.push(fieldName);cov_1msdlku8l5().s[254]++;fieldValue.$in.forEach((listElem,listIndex)=>{cov_1msdlku8l5().f[24]++;cov_1msdlku8l5().s[255]++;if(listElem===null){cov_1msdlku8l5().b[75][0]++;cov_1msdlku8l5().s[256]++;allowNull=true;}else{cov_1msdlku8l5().b[75][1]++;cov_1msdlku8l5().s[257]++;values.push(listElem);cov_1msdlku8l5().s[258]++;inPatterns.push(`$${index+1+listIndex-(allowNull?(cov_1msdlku8l5().b[76][0]++,1):(cov_1msdlku8l5().b[76][1]++,0))}`);}});cov_1msdlku8l5().s[259]++;if(allowNull){cov_1msdlku8l5().b[77][0]++;cov_1msdlku8l5().s[260]++;patterns.push(`($${index}:name IS NULL OR $${index}:name && ARRAY[${inPatterns.join()}])`);}else{cov_1msdlku8l5().b[77][1]++;cov_1msdlku8l5().s[261]++;patterns.push(`$${index}:name && ARRAY[${inPatterns.join()}]`);}cov_1msdlku8l5().s[262]++;index=index+1+inPatterns.length;}else{cov_1msdlku8l5().b[73][1]++;cov_1msdlku8l5().s[263]++;if(isInOrNin){cov_1msdlku8l5().b[78][0]++;cov_1msdlku8l5().s[264]++;var createConstraint=(baseArray,notIn)=>{cov_1msdlku8l5().f[25]++;const not=(cov_1msdlku8l5().s[265]++,notIn?(cov_1msdlku8l5().b[79][0]++,' NOT '):(cov_1msdlku8l5().b[79][1]++,''));cov_1msdlku8l5().s[266]++;if(baseArray.length>0){cov_1msdlku8l5().b[80][0]++;cov_1msdlku8l5().s[267]++;if(isArrayField){cov_1msdlku8l5().b[81][0]++;cov_1msdlku8l5().s[268]++;patterns.push(`${not} array_contains($${index}:name, $${index+1})`);cov_1msdlku8l5().s[269]++;values.push(fieldName,JSON.stringify(baseArray));cov_1msdlku8l5().s[270]++;index+=2;}else{cov_1msdlku8l5().b[81][1]++;cov_1msdlku8l5().s[271]++;// Handle Nested Dot Notation Above
if(fieldName.indexOf('.')>=0){cov_1msdlku8l5().b[82][0]++;cov_1msdlku8l5().s[272]++;return;}else{cov_1msdlku8l5().b[82][1]++;}const inPatterns=(cov_1msdlku8l5().s[273]++,[]);cov_1msdlku8l5().s[274]++;values.push(fieldName);cov_1msdlku8l5().s[275]++;baseArray.forEach((listElem,listIndex)=>{cov_1msdlku8l5().f[26]++;cov_1msdlku8l5().s[276]++;if(listElem!=null){cov_1msdlku8l5().b[83][0]++;cov_1msdlku8l5().s[277]++;values.push(listElem);cov_1msdlku8l5().s[278]++;inPatterns.push(`$${index+1+listIndex}`);}else{cov_1msdlku8l5().b[83][1]++;}});cov_1msdlku8l5().s[279]++;patterns.push(`$${index}:name ${not} IN (${inPatterns.join()})`);cov_1msdlku8l5().s[280]++;index=index+1+inPatterns.length;}}else{cov_1msdlku8l5().b[80][1]++;cov_1msdlku8l5().s[281]++;if(!notIn){cov_1msdlku8l5().b[84][0]++;cov_1msdlku8l5().s[282]++;values.push(fieldName);cov_1msdlku8l5().s[283]++;patterns.push(`$${index}:name IS NULL`);cov_1msdlku8l5().s[284]++;index=index+1;}else{cov_1msdlku8l5().b[84][1]++;cov_1msdlku8l5().s[285]++;// Handle empty array
if(notIn){cov_1msdlku8l5().b[85][0]++;cov_1msdlku8l5().s[286]++;patterns.push('1 = 1');// Return all values
}else{cov_1msdlku8l5().b[85][1]++;cov_1msdlku8l5().s[287]++;patterns.push('1 = 2');// Return no values
}}}};cov_1msdlku8l5().s[288]++;if(fieldValue.$in){cov_1msdlku8l5().b[86][0]++;cov_1msdlku8l5().s[289]++;createConstraint(_lodash.default.flatMap(fieldValue.$in,elt=>{cov_1msdlku8l5().f[27]++;cov_1msdlku8l5().s[290]++;return elt;}),false);}else{cov_1msdlku8l5().b[86][1]++;}cov_1msdlku8l5().s[291]++;if(fieldValue.$nin){cov_1msdlku8l5().b[87][0]++;cov_1msdlku8l5().s[292]++;createConstraint(_lodash.default.flatMap(fieldValue.$nin,elt=>{cov_1msdlku8l5().f[28]++;cov_1msdlku8l5().s[293]++;return elt;}),true);}else{cov_1msdlku8l5().b[87][1]++;}}else{cov_1msdlku8l5().b[78][1]++;cov_1msdlku8l5().s[294]++;if(typeof fieldValue.$in!=='undefined'){cov_1msdlku8l5().b[88][0]++;cov_1msdlku8l5().s[295]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,'bad $in value');}else{cov_1msdlku8l5().b[88][1]++;cov_1msdlku8l5().s[296]++;if(typeof fieldValue.$nin!=='undefined'){cov_1msdlku8l5().b[89][0]++;cov_1msdlku8l5().s[297]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,'bad $nin value');}else{cov_1msdlku8l5().b[89][1]++;}}}}cov_1msdlku8l5().s[298]++;if((cov_1msdlku8l5().b[91][0]++,Array.isArray(fieldValue.$all))&&(cov_1msdlku8l5().b[91][1]++,isArrayField)){cov_1msdlku8l5().b[90][0]++;cov_1msdlku8l5().s[299]++;if(isAnyValueRegexStartsWith(fieldValue.$all)){cov_1msdlku8l5().b[92][0]++;cov_1msdlku8l5().s[300]++;if(!isAllValuesRegexOrNone(fieldValue.$all)){cov_1msdlku8l5().b[93][0]++;cov_1msdlku8l5().s[301]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,'All $all values must be of regex type or none: '+fieldValue.$all);}else{cov_1msdlku8l5().b[93][1]++;}cov_1msdlku8l5().s[302]++;for(let i=(cov_1msdlku8l5().s[303]++,0);i<fieldValue.$all.length;i+=1){const value=(cov_1msdlku8l5().s[304]++,processRegexPattern(fieldValue.$all[i].$regex));cov_1msdlku8l5().s[305]++;fieldValue.$all[i]=value.substring(1)+'%';}cov_1msdlku8l5().s[306]++;patterns.push(`array_contains_all_regex($${index}:name, $${index+1}::jsonb)`);}else{cov_1msdlku8l5().b[92][1]++;cov_1msdlku8l5().s[307]++;patterns.push(`array_contains_all($${index}:name, $${index+1}::jsonb)`);}cov_1msdlku8l5().s[308]++;values.push(fieldName,JSON.stringify(fieldValue.$all));cov_1msdlku8l5().s[309]++;index+=2;}else{cov_1msdlku8l5().b[90][1]++;cov_1msdlku8l5().s[310]++;if(Array.isArray(fieldValue.$all)){cov_1msdlku8l5().b[94][0]++;cov_1msdlku8l5().s[311]++;if(fieldValue.$all.length===1){cov_1msdlku8l5().b[95][0]++;cov_1msdlku8l5().s[312]++;patterns.push(`$${index}:name = $${index+1}`);cov_1msdlku8l5().s[313]++;values.push(fieldName,fieldValue.$all[0].objectId);cov_1msdlku8l5().s[314]++;index+=2;}else{cov_1msdlku8l5().b[95][1]++;}}else{cov_1msdlku8l5().b[94][1]++;}}cov_1msdlku8l5().s[315]++;if(typeof fieldValue.$exists!=='undefined'){cov_1msdlku8l5().b[96][0]++;cov_1msdlku8l5().s[316]++;if(fieldValue.$exists){cov_1msdlku8l5().b[97][0]++;cov_1msdlku8l5().s[317]++;patterns.push(`$${index}:name IS NOT NULL`);}else{cov_1msdlku8l5().b[97][1]++;cov_1msdlku8l5().s[318]++;patterns.push(`$${index}:name IS NULL`);}cov_1msdlku8l5().s[319]++;values.push(fieldName);cov_1msdlku8l5().s[320]++;index+=1;}else{cov_1msdlku8l5().b[96][1]++;}cov_1msdlku8l5().s[321]++;if(fieldValue.$containedBy){cov_1msdlku8l5().b[98][0]++;const arr=(cov_1msdlku8l5().s[322]++,fieldValue.$containedBy);cov_1msdlku8l5().s[323]++;if(!(arr instanceof Array)){cov_1msdlku8l5().b[99][0]++;cov_1msdlku8l5().s[324]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,`bad $containedBy: should be an array`);}else{cov_1msdlku8l5().b[99][1]++;}cov_1msdlku8l5().s[325]++;patterns.push(`$${index}:name <@ $${index+1}::jsonb`);cov_1msdlku8l5().s[326]++;values.push(fieldName,JSON.stringify(arr));cov_1msdlku8l5().s[327]++;index+=2;}else{cov_1msdlku8l5().b[98][1]++;}cov_1msdlku8l5().s[328]++;if(fieldValue.$text){cov_1msdlku8l5().b[100][0]++;const search=(cov_1msdlku8l5().s[329]++,fieldValue.$text.$search);let language=(cov_1msdlku8l5().s[330]++,'english');cov_1msdlku8l5().s[331]++;if(typeof search!=='object'){cov_1msdlku8l5().b[101][0]++;cov_1msdlku8l5().s[332]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,`bad $text: $search, should be object`);}else{cov_1msdlku8l5().b[101][1]++;}cov_1msdlku8l5().s[333]++;if((cov_1msdlku8l5().b[103][0]++,!search.$term)||(cov_1msdlku8l5().b[103][1]++,typeof search.$term!=='string')){cov_1msdlku8l5().b[102][0]++;cov_1msdlku8l5().s[334]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,`bad $text: $term, should be string`);}else{cov_1msdlku8l5().b[102][1]++;}cov_1msdlku8l5().s[335]++;if((cov_1msdlku8l5().b[105][0]++,search.$language)&&(cov_1msdlku8l5().b[105][1]++,typeof search.$language!=='string')){cov_1msdlku8l5().b[104][0]++;cov_1msdlku8l5().s[336]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,`bad $text: $language, should be string`);}else{cov_1msdlku8l5().b[104][1]++;cov_1msdlku8l5().s[337]++;if(search.$language){cov_1msdlku8l5().b[106][0]++;cov_1msdlku8l5().s[338]++;language=search.$language;}else{cov_1msdlku8l5().b[106][1]++;}}cov_1msdlku8l5().s[339]++;if((cov_1msdlku8l5().b[108][0]++,search.$caseSensitive)&&(cov_1msdlku8l5().b[108][1]++,typeof search.$caseSensitive!=='boolean')){cov_1msdlku8l5().b[107][0]++;cov_1msdlku8l5().s[340]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,`bad $text: $caseSensitive, should be boolean`);}else{cov_1msdlku8l5().b[107][1]++;cov_1msdlku8l5().s[341]++;if(search.$caseSensitive){cov_1msdlku8l5().b[109][0]++;cov_1msdlku8l5().s[342]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,`bad $text: $caseSensitive not supported, please use $regex or create a separate lower case column.`);}else{cov_1msdlku8l5().b[109][1]++;}}cov_1msdlku8l5().s[343]++;if((cov_1msdlku8l5().b[111][0]++,search.$diacriticSensitive)&&(cov_1msdlku8l5().b[111][1]++,typeof search.$diacriticSensitive!=='boolean')){cov_1msdlku8l5().b[110][0]++;cov_1msdlku8l5().s[344]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,`bad $text: $diacriticSensitive, should be boolean`);}else{cov_1msdlku8l5().b[110][1]++;cov_1msdlku8l5().s[345]++;if(search.$diacriticSensitive===false){cov_1msdlku8l5().b[112][0]++;cov_1msdlku8l5().s[346]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,`bad $text: $diacriticSensitive - false not supported, install Postgres Unaccent Extension`);}else{cov_1msdlku8l5().b[112][1]++;}}cov_1msdlku8l5().s[347]++;patterns.push(`to_tsvector($${index}, $${index+1}:name) @@ to_tsquery($${index+2}, $${index+3})`);cov_1msdlku8l5().s[348]++;values.push(language,fieldName,language,search.$term);cov_1msdlku8l5().s[349]++;index+=4;}else{cov_1msdlku8l5().b[100][1]++;}cov_1msdlku8l5().s[350]++;if(fieldValue.$nearSphere){cov_1msdlku8l5().b[113][0]++;const point=(cov_1msdlku8l5().s[351]++,fieldValue.$nearSphere);const distance=(cov_1msdlku8l5().s[352]++,fieldValue.$maxDistance);const distanceInKM=(cov_1msdlku8l5().s[353]++,distance*6371*1000);cov_1msdlku8l5().s[354]++;patterns.push(`ST_DistanceSphere($${index}:name::geometry, POINT($${index+1}, $${index+2})::geometry) <= $${index+3}`);cov_1msdlku8l5().s[355]++;sorts.push(`ST_DistanceSphere($${index}:name::geometry, POINT($${index+1}, $${index+2})::geometry) ASC`);cov_1msdlku8l5().s[356]++;values.push(fieldName,point.longitude,point.latitude,distanceInKM);cov_1msdlku8l5().s[357]++;index+=4;}else{cov_1msdlku8l5().b[113][1]++;}cov_1msdlku8l5().s[358]++;if((cov_1msdlku8l5().b[115][0]++,fieldValue.$within)&&(cov_1msdlku8l5().b[115][1]++,fieldValue.$within.$box)){cov_1msdlku8l5().b[114][0]++;const box=(cov_1msdlku8l5().s[359]++,fieldValue.$within.$box);const left=(cov_1msdlku8l5().s[360]++,box[0].longitude);const bottom=(cov_1msdlku8l5().s[361]++,box[0].latitude);const right=(cov_1msdlku8l5().s[362]++,box[1].longitude);const top=(cov_1msdlku8l5().s[363]++,box[1].latitude);cov_1msdlku8l5().s[364]++;patterns.push(`$${index}:name::point <@ $${index+1}::box`);cov_1msdlku8l5().s[365]++;values.push(fieldName,`((${left}, ${bottom}), (${right}, ${top}))`);cov_1msdlku8l5().s[366]++;index+=2;}else{cov_1msdlku8l5().b[114][1]++;}cov_1msdlku8l5().s[367]++;if((cov_1msdlku8l5().b[117][0]++,fieldValue.$geoWithin)&&(cov_1msdlku8l5().b[117][1]++,fieldValue.$geoWithin.$centerSphere)){cov_1msdlku8l5().b[116][0]++;const centerSphere=(cov_1msdlku8l5().s[368]++,fieldValue.$geoWithin.$centerSphere);cov_1msdlku8l5().s[369]++;if((cov_1msdlku8l5().b[119][0]++,!(centerSphere instanceof Array))||(cov_1msdlku8l5().b[119][1]++,centerSphere.length<2)){cov_1msdlku8l5().b[118][0]++;cov_1msdlku8l5().s[370]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,'bad $geoWithin value; $centerSphere should be an array of Parse.GeoPoint and distance');}else{cov_1msdlku8l5().b[118][1]++;}// Get point, convert to geo point if necessary and validate
let point=(cov_1msdlku8l5().s[371]++,centerSphere[0]);cov_1msdlku8l5().s[372]++;if((cov_1msdlku8l5().b[121][0]++,point instanceof Array)&&(cov_1msdlku8l5().b[121][1]++,point.length===2)){cov_1msdlku8l5().b[120][0]++;cov_1msdlku8l5().s[373]++;point=new _node.default.GeoPoint(point[1],point[0]);}else{cov_1msdlku8l5().b[120][1]++;cov_1msdlku8l5().s[374]++;if(!GeoPointCoder.isValidJSON(point)){cov_1msdlku8l5().b[122][0]++;cov_1msdlku8l5().s[375]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,'bad $geoWithin value; $centerSphere geo point invalid');}else{cov_1msdlku8l5().b[122][1]++;}}cov_1msdlku8l5().s[376]++;_node.default.GeoPoint._validate(point.latitude,point.longitude);// Get distance and validate
const distance=(cov_1msdlku8l5().s[377]++,centerSphere[1]);cov_1msdlku8l5().s[378]++;if((cov_1msdlku8l5().b[124][0]++,isNaN(distance))||(cov_1msdlku8l5().b[124][1]++,distance<0)){cov_1msdlku8l5().b[123][0]++;cov_1msdlku8l5().s[379]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,'bad $geoWithin value; $centerSphere distance invalid');}else{cov_1msdlku8l5().b[123][1]++;}const distanceInKM=(cov_1msdlku8l5().s[380]++,distance*6371*1000);cov_1msdlku8l5().s[381]++;patterns.push(`ST_DistanceSphere($${index}:name::geometry, POINT($${index+1}, $${index+2})::geometry) <= $${index+3}`);cov_1msdlku8l5().s[382]++;values.push(fieldName,point.longitude,point.latitude,distanceInKM);cov_1msdlku8l5().s[383]++;index+=4;}else{cov_1msdlku8l5().b[116][1]++;}cov_1msdlku8l5().s[384]++;if((cov_1msdlku8l5().b[126][0]++,fieldValue.$geoWithin)&&(cov_1msdlku8l5().b[126][1]++,fieldValue.$geoWithin.$polygon)){cov_1msdlku8l5().b[125][0]++;const polygon=(cov_1msdlku8l5().s[385]++,fieldValue.$geoWithin.$polygon);let points;cov_1msdlku8l5().s[386]++;if((cov_1msdlku8l5().b[128][0]++,typeof polygon==='object')&&(cov_1msdlku8l5().b[128][1]++,polygon.__type==='Polygon')){cov_1msdlku8l5().b[127][0]++;cov_1msdlku8l5().s[387]++;if((cov_1msdlku8l5().b[130][0]++,!polygon.coordinates)||(cov_1msdlku8l5().b[130][1]++,polygon.coordinates.length<3)){cov_1msdlku8l5().b[129][0]++;cov_1msdlku8l5().s[388]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,'bad $geoWithin value; Polygon.coordinates should contain at least 3 lon/lat pairs');}else{cov_1msdlku8l5().b[129][1]++;}cov_1msdlku8l5().s[389]++;points=polygon.coordinates;}else{cov_1msdlku8l5().b[127][1]++;cov_1msdlku8l5().s[390]++;if(polygon instanceof Array){cov_1msdlku8l5().b[131][0]++;cov_1msdlku8l5().s[391]++;if(polygon.length<3){cov_1msdlku8l5().b[132][0]++;cov_1msdlku8l5().s[392]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,'bad $geoWithin value; $polygon should contain at least 3 GeoPoints');}else{cov_1msdlku8l5().b[132][1]++;}cov_1msdlku8l5().s[393]++;points=polygon;}else{cov_1msdlku8l5().b[131][1]++;cov_1msdlku8l5().s[394]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,"bad $geoWithin value; $polygon should be Polygon object or Array of Parse.GeoPoint's");}}cov_1msdlku8l5().s[395]++;points=points.map(point=>{cov_1msdlku8l5().f[29]++;cov_1msdlku8l5().s[396]++;if((cov_1msdlku8l5().b[134][0]++,point instanceof Array)&&(cov_1msdlku8l5().b[134][1]++,point.length===2)){cov_1msdlku8l5().b[133][0]++;cov_1msdlku8l5().s[397]++;_node.default.GeoPoint._validate(point[1],point[0]);cov_1msdlku8l5().s[398]++;return`(${point[0]}, ${point[1]})`;}else{cov_1msdlku8l5().b[133][1]++;}cov_1msdlku8l5().s[399]++;if((cov_1msdlku8l5().b[136][0]++,typeof point!=='object')||(cov_1msdlku8l5().b[136][1]++,point.__type!=='GeoPoint')){cov_1msdlku8l5().b[135][0]++;cov_1msdlku8l5().s[400]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,'bad $geoWithin value');}else{cov_1msdlku8l5().b[135][1]++;cov_1msdlku8l5().s[401]++;_node.default.GeoPoint._validate(point.latitude,point.longitude);}cov_1msdlku8l5().s[402]++;return`(${point.longitude}, ${point.latitude})`;}).join(', ');cov_1msdlku8l5().s[403]++;patterns.push(`$${index}:name::point <@ $${index+1}::polygon`);cov_1msdlku8l5().s[404]++;values.push(fieldName,`(${points})`);cov_1msdlku8l5().s[405]++;index+=2;}else{cov_1msdlku8l5().b[125][1]++;}cov_1msdlku8l5().s[406]++;if((cov_1msdlku8l5().b[138][0]++,fieldValue.$geoIntersects)&&(cov_1msdlku8l5().b[138][1]++,fieldValue.$geoIntersects.$point)){cov_1msdlku8l5().b[137][0]++;const point=(cov_1msdlku8l5().s[407]++,fieldValue.$geoIntersects.$point);cov_1msdlku8l5().s[408]++;if((cov_1msdlku8l5().b[140][0]++,typeof point!=='object')||(cov_1msdlku8l5().b[140][1]++,point.__type!=='GeoPoint')){cov_1msdlku8l5().b[139][0]++;cov_1msdlku8l5().s[409]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,'bad $geoIntersect value; $point should be GeoPoint');}else{cov_1msdlku8l5().b[139][1]++;cov_1msdlku8l5().s[410]++;_node.default.GeoPoint._validate(point.latitude,point.longitude);}cov_1msdlku8l5().s[411]++;patterns.push(`$${index}:name::polygon @> $${index+1}::point`);cov_1msdlku8l5().s[412]++;values.push(fieldName,`(${point.longitude}, ${point.latitude})`);cov_1msdlku8l5().s[413]++;index+=2;}else{cov_1msdlku8l5().b[137][1]++;}cov_1msdlku8l5().s[414]++;if(fieldValue.$regex){cov_1msdlku8l5().b[141][0]++;let regex=(cov_1msdlku8l5().s[415]++,fieldValue.$regex);let operator=(cov_1msdlku8l5().s[416]++,'~');const opts=(cov_1msdlku8l5().s[417]++,fieldValue.$options);cov_1msdlku8l5().s[418]++;if(opts){cov_1msdlku8l5().b[142][0]++;cov_1msdlku8l5().s[419]++;if(opts.indexOf('i')>=0){cov_1msdlku8l5().b[143][0]++;cov_1msdlku8l5().s[420]++;operator='~*';}else{cov_1msdlku8l5().b[143][1]++;}cov_1msdlku8l5().s[421]++;if(opts.indexOf('x')>=0){cov_1msdlku8l5().b[144][0]++;cov_1msdlku8l5().s[422]++;regex=removeWhiteSpace(regex);}else{cov_1msdlku8l5().b[144][1]++;}}else{cov_1msdlku8l5().b[142][1]++;}const name=(cov_1msdlku8l5().s[423]++,transformDotField(fieldName));cov_1msdlku8l5().s[424]++;regex=processRegexPattern(regex);cov_1msdlku8l5().s[425]++;patterns.push(`$${index}:raw ${operator} '$${index+1}:raw'`);cov_1msdlku8l5().s[426]++;values.push(name,regex);cov_1msdlku8l5().s[427]++;index+=2;}else{cov_1msdlku8l5().b[141][1]++;}cov_1msdlku8l5().s[428]++;if(fieldValue.__type==='Pointer'){cov_1msdlku8l5().b[145][0]++;cov_1msdlku8l5().s[429]++;if(isArrayField){cov_1msdlku8l5().b[146][0]++;cov_1msdlku8l5().s[430]++;patterns.push(`array_contains($${index}:name, $${index+1})`);cov_1msdlku8l5().s[431]++;values.push(fieldName,JSON.stringify([fieldValue]));cov_1msdlku8l5().s[432]++;index+=2;}else{cov_1msdlku8l5().b[146][1]++;cov_1msdlku8l5().s[433]++;patterns.push(`$${index}:name = $${index+1}`);cov_1msdlku8l5().s[434]++;values.push(fieldName,fieldValue.objectId);cov_1msdlku8l5().s[435]++;index+=2;}}else{cov_1msdlku8l5().b[145][1]++;}cov_1msdlku8l5().s[436]++;if(fieldValue.__type==='Date'){cov_1msdlku8l5().b[147][0]++;cov_1msdlku8l5().s[437]++;patterns.push(`$${index}:name = $${index+1}`);cov_1msdlku8l5().s[438]++;values.push(fieldName,fieldValue.iso);cov_1msdlku8l5().s[439]++;index+=2;}else{cov_1msdlku8l5().b[147][1]++;}cov_1msdlku8l5().s[440]++;if(fieldValue.__type==='GeoPoint'){cov_1msdlku8l5().b[148][0]++;cov_1msdlku8l5().s[441]++;patterns.push(`$${index}:name ~= POINT($${index+1}, $${index+2})`);cov_1msdlku8l5().s[442]++;values.push(fieldName,fieldValue.longitude,fieldValue.latitude);cov_1msdlku8l5().s[443]++;index+=3;}else{cov_1msdlku8l5().b[148][1]++;}cov_1msdlku8l5().s[444]++;if(fieldValue.__type==='Polygon'){cov_1msdlku8l5().b[149][0]++;const value=(cov_1msdlku8l5().s[445]++,convertPolygonToSQL(fieldValue.coordinates));cov_1msdlku8l5().s[446]++;patterns.push(`$${index}:name ~= $${index+1}::polygon`);cov_1msdlku8l5().s[447]++;values.push(fieldName,value);cov_1msdlku8l5().s[448]++;index+=2;}else{cov_1msdlku8l5().b[149][1]++;}cov_1msdlku8l5().s[449]++;Object.keys(ParseToPosgresComparator).forEach(cmp=>{cov_1msdlku8l5().f[30]++;cov_1msdlku8l5().s[450]++;if((cov_1msdlku8l5().b[151][0]++,fieldValue[cmp])||(cov_1msdlku8l5().b[151][1]++,fieldValue[cmp]===0)){cov_1msdlku8l5().b[150][0]++;const pgComparator=(cov_1msdlku8l5().s[451]++,ParseToPosgresComparator[cmp]);const postgresValue=(cov_1msdlku8l5().s[452]++,toPostgresValue(fieldValue[cmp]));let constraintFieldName;cov_1msdlku8l5().s[453]++;if(fieldName.indexOf('.')>=0){cov_1msdlku8l5().b[152][0]++;let castType;cov_1msdlku8l5().s[454]++;switch(typeof postgresValue){case'number':cov_1msdlku8l5().b[153][0]++;cov_1msdlku8l5().s[455]++;castType='double precision';cov_1msdlku8l5().s[456]++;break;case'boolean':cov_1msdlku8l5().b[153][1]++;cov_1msdlku8l5().s[457]++;castType='boolean';cov_1msdlku8l5().s[458]++;break;default:cov_1msdlku8l5().b[153][2]++;cov_1msdlku8l5().s[459]++;castType=undefined;}cov_1msdlku8l5().s[460]++;constraintFieldName=castType?(cov_1msdlku8l5().b[154][0]++,`CAST ((${transformDotField(fieldName)}) AS ${castType})`):(cov_1msdlku8l5().b[154][1]++,transformDotField(fieldName));}else{cov_1msdlku8l5().b[152][1]++;cov_1msdlku8l5().s[461]++;constraintFieldName=`$${index++}:name`;cov_1msdlku8l5().s[462]++;values.push(fieldName);}cov_1msdlku8l5().s[463]++;values.push(postgresValue);cov_1msdlku8l5().s[464]++;patterns.push(`${constraintFieldName} ${pgComparator} $${index++}`);}else{cov_1msdlku8l5().b[150][1]++;}});cov_1msdlku8l5().s[465]++;if(initialPatternsLength===patterns.length){cov_1msdlku8l5().b[155][0]++;cov_1msdlku8l5().s[466]++;throw new _node.default.Error(_node.default.Error.OPERATION_FORBIDDEN,`Postgres doesn't support this query type yet ${JSON.stringify(fieldValue)}`);}else{cov_1msdlku8l5().b[155][1]++;}}cov_1msdlku8l5().s[467]++;values=values.map(transformValue);cov_1msdlku8l5().s[468]++;return{pattern:patterns.join(' AND '),values,sorts};};class PostgresStorageAdapter{// Private
constructor({uri,collectionPrefix=(cov_1msdlku8l5().b[156][0]++,''),databaseOptions=(cov_1msdlku8l5().b[157][0]++,{})}){cov_1msdlku8l5().f[31]++;cov_1msdlku8l5().s[469]++;this._collectionPrefix=collectionPrefix;cov_1msdlku8l5().s[470]++;this.enableSchemaHooks=!!databaseOptions.enableSchemaHooks;cov_1msdlku8l5().s[471]++;delete databaseOptions.enableSchemaHooks;const{client,pgp}=(cov_1msdlku8l5().s[472]++,(0,_PostgresClient.createClient)(uri,databaseOptions));cov_1msdlku8l5().s[473]++;this._client=client;cov_1msdlku8l5().s[474]++;this._onchange=()=>{cov_1msdlku8l5().f[32]++;};cov_1msdlku8l5().s[475]++;this._pgp=pgp;cov_1msdlku8l5().s[476]++;this._uuid=(0,_uuid.v4)();cov_1msdlku8l5().s[477]++;this.canSortOnJoinTables=false;}watch(callback){cov_1msdlku8l5().f[33]++;cov_1msdlku8l5().s[478]++;this._onchange=callback;}//Note that analyze=true will run the query, executing INSERTS, DELETES, etc.
createExplainableQuery(query,analyze=(cov_1msdlku8l5().b[158][0]++,false)){cov_1msdlku8l5().f[34]++;cov_1msdlku8l5().s[479]++;if(analyze){cov_1msdlku8l5().b[159][0]++;cov_1msdlku8l5().s[480]++;return'EXPLAIN (ANALYZE, FORMAT JSON) '+query;}else{cov_1msdlku8l5().b[159][1]++;cov_1msdlku8l5().s[481]++;return'EXPLAIN (FORMAT JSON) '+query;}}handleShutdown(){cov_1msdlku8l5().f[35]++;cov_1msdlku8l5().s[482]++;if(this._stream){cov_1msdlku8l5().b[160][0]++;cov_1msdlku8l5().s[483]++;this._stream.done();cov_1msdlku8l5().s[484]++;delete this._stream;}else{cov_1msdlku8l5().b[160][1]++;}cov_1msdlku8l5().s[485]++;if(!this._client){cov_1msdlku8l5().b[161][0]++;cov_1msdlku8l5().s[486]++;return;}else{cov_1msdlku8l5().b[161][1]++;}cov_1msdlku8l5().s[487]++;this._client.$pool.end();}async _listenToSchema(){cov_1msdlku8l5().f[36]++;cov_1msdlku8l5().s[488]++;if((cov_1msdlku8l5().b[163][0]++,!this._stream)&&(cov_1msdlku8l5().b[163][1]++,this.enableSchemaHooks)){cov_1msdlku8l5().b[162][0]++;cov_1msdlku8l5().s[489]++;this._stream=await this._client.connect({direct:true});cov_1msdlku8l5().s[490]++;this._stream.client.on('notification',data=>{cov_1msdlku8l5().f[37]++;const payload=(cov_1msdlku8l5().s[491]++,JSON.parse(data.payload));cov_1msdlku8l5().s[492]++;if(payload.senderId!==this._uuid){cov_1msdlku8l5().b[164][0]++;cov_1msdlku8l5().s[493]++;this._onchange();}else{cov_1msdlku8l5().b[164][1]++;}});cov_1msdlku8l5().s[494]++;await this._stream.none('LISTEN $1~','schema.change');}else{cov_1msdlku8l5().b[162][1]++;}}_notifySchemaChange(){cov_1msdlku8l5().f[38]++;cov_1msdlku8l5().s[495]++;if(this._stream){cov_1msdlku8l5().b[165][0]++;cov_1msdlku8l5().s[496]++;this._stream.none('NOTIFY $1~, $2',['schema.change',{senderId:this._uuid}]).catch(error=>{cov_1msdlku8l5().f[39]++;cov_1msdlku8l5().s[497]++;console.log('Failed to Notify:',error);// unlikely to ever happen
});}else{cov_1msdlku8l5().b[165][1]++;}}async _ensureSchemaCollectionExists(conn){cov_1msdlku8l5().f[40]++;cov_1msdlku8l5().s[498]++;conn=(cov_1msdlku8l5().b[166][0]++,conn)||(cov_1msdlku8l5().b[166][1]++,this._client);cov_1msdlku8l5().s[499]++;await conn.none('CREATE TABLE IF NOT EXISTS "_SCHEMA" ( "className" varChar(120), "schema" jsonb, "isParseClass" bool, PRIMARY KEY ("className") )').catch(error=>{cov_1msdlku8l5().f[41]++;cov_1msdlku8l5().s[500]++;if((cov_1msdlku8l5().b[168][0]++,error.code===PostgresDuplicateRelationError)||(cov_1msdlku8l5().b[168][1]++,error.code===PostgresUniqueIndexViolationError)||(cov_1msdlku8l5().b[168][2]++,error.code===PostgresDuplicateObjectError)){// Table already exists, must have been created by a different request. Ignore error.
cov_1msdlku8l5().b[167][0]++;}else{cov_1msdlku8l5().b[167][1]++;cov_1msdlku8l5().s[501]++;throw error;}});}async classExists(name){cov_1msdlku8l5().f[42]++;cov_1msdlku8l5().s[502]++;return this._client.one('SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = $1)',[name],a=>{cov_1msdlku8l5().f[43]++;cov_1msdlku8l5().s[503]++;return a.exists;});}async setClassLevelPermissions(className,CLPs){cov_1msdlku8l5().f[44]++;cov_1msdlku8l5().s[504]++;await this._client.task('set-class-level-permissions',async t=>{cov_1msdlku8l5().f[45]++;const values=(cov_1msdlku8l5().s[505]++,[className,'schema','classLevelPermissions',JSON.stringify(CLPs)]);cov_1msdlku8l5().s[506]++;await t.none(`UPDATE "_SCHEMA" SET $2:name = json_object_set_key($2:name, $3::text, $4::jsonb) WHERE "className" = $1`,values);});cov_1msdlku8l5().s[507]++;this._notifySchemaChange();}async setIndexesWithSchemaFormat(className,submittedIndexes,existingIndexes=(cov_1msdlku8l5().b[169][0]++,{}),fields,conn){cov_1msdlku8l5().f[46]++;cov_1msdlku8l5().s[508]++;conn=(cov_1msdlku8l5().b[170][0]++,conn)||(cov_1msdlku8l5().b[170][1]++,this._client);const self=(cov_1msdlku8l5().s[509]++,this);cov_1msdlku8l5().s[510]++;if(submittedIndexes===undefined){cov_1msdlku8l5().b[171][0]++;cov_1msdlku8l5().s[511]++;return Promise.resolve();}else{cov_1msdlku8l5().b[171][1]++;}cov_1msdlku8l5().s[512]++;if(Object.keys(existingIndexes).length===0){cov_1msdlku8l5().b[172][0]++;cov_1msdlku8l5().s[513]++;existingIndexes={_id_:{_id:1}};}else{cov_1msdlku8l5().b[172][1]++;}const deletedIndexes=(cov_1msdlku8l5().s[514]++,[]);const insertedIndexes=(cov_1msdlku8l5().s[515]++,[]);cov_1msdlku8l5().s[516]++;Object.keys(submittedIndexes).forEach(name=>{cov_1msdlku8l5().f[47]++;const field=(cov_1msdlku8l5().s[517]++,submittedIndexes[name]);cov_1msdlku8l5().s[518]++;if((cov_1msdlku8l5().b[174][0]++,existingIndexes[name])&&(cov_1msdlku8l5().b[174][1]++,field.__op!=='Delete')){cov_1msdlku8l5().b[173][0]++;cov_1msdlku8l5().s[519]++;throw new _node.default.Error(_node.default.Error.INVALID_QUERY,`Index ${name} exists, cannot update.`);}else{cov_1msdlku8l5().b[173][1]++;}cov_1msdlku8l5().s[520]++;if((cov_1msdlku8l5().b[176][0]++,!existingIndexes[name])&&(cov_1msdlku8l5().b[176][1]++,field.__op==='Delete')){cov_1msdlku8l5().b[175][0]++;cov_1msdlku8l5().s[521]++;throw new _node.default.Error(_node.default.Error.INVALID_QUERY,`Index ${name} does not exist, cannot delete.`);}else{cov_1msdlku8l5().b[175][1]++;}cov_1msdlku8l5().s[522]++;if(field.__op==='Delete'){cov_1msdlku8l5().b[177][0]++;cov_1msdlku8l5().s[523]++;deletedIndexes.push(name);cov_1msdlku8l5().s[524]++;delete existingIndexes[name];}else{cov_1msdlku8l5().b[177][1]++;cov_1msdlku8l5().s[525]++;Object.keys(field).forEach(key=>{cov_1msdlku8l5().f[48]++;cov_1msdlku8l5().s[526]++;if(!Object.prototype.hasOwnProperty.call(fields,key)){cov_1msdlku8l5().b[178][0]++;cov_1msdlku8l5().s[527]++;throw new _node.default.Error(_node.default.Error.INVALID_QUERY,`Field ${key} does not exist, cannot add index.`);}else{cov_1msdlku8l5().b[178][1]++;}});cov_1msdlku8l5().s[528]++;existingIndexes[name]=field;cov_1msdlku8l5().s[529]++;insertedIndexes.push({key:field,name});}});cov_1msdlku8l5().s[530]++;await conn.tx('set-indexes-with-schema-format',async t=>{cov_1msdlku8l5().f[49]++;cov_1msdlku8l5().s[531]++;if(insertedIndexes.length>0){cov_1msdlku8l5().b[179][0]++;cov_1msdlku8l5().s[532]++;await self.createIndexes(className,insertedIndexes,t);}else{cov_1msdlku8l5().b[179][1]++;}cov_1msdlku8l5().s[533]++;if(deletedIndexes.length>0){cov_1msdlku8l5().b[180][0]++;cov_1msdlku8l5().s[534]++;await self.dropIndexes(className,deletedIndexes,t);}else{cov_1msdlku8l5().b[180][1]++;}cov_1msdlku8l5().s[535]++;await t.none('UPDATE "_SCHEMA" SET $2:name = json_object_set_key($2:name, $3::text, $4::jsonb) WHERE "className" = $1',[className,'schema','indexes',JSON.stringify(existingIndexes)]);});cov_1msdlku8l5().s[536]++;this._notifySchemaChange();}async createClass(className,schema,conn){cov_1msdlku8l5().f[50]++;cov_1msdlku8l5().s[537]++;conn=(cov_1msdlku8l5().b[181][0]++,conn)||(cov_1msdlku8l5().b[181][1]++,this._client);const parseSchema=(cov_1msdlku8l5().s[538]++,await conn.tx('create-class',async t=>{cov_1msdlku8l5().f[51]++;cov_1msdlku8l5().s[539]++;await this.createTable(className,schema,t);cov_1msdlku8l5().s[540]++;await t.none('INSERT INTO "_SCHEMA" ("className", "schema", "isParseClass") VALUES ($<className>, $<schema>, true)',{className,schema});cov_1msdlku8l5().s[541]++;await this.setIndexesWithSchemaFormat(className,schema.indexes,{},schema.fields,t);cov_1msdlku8l5().s[542]++;return toParseSchema(schema);}).catch(err=>{cov_1msdlku8l5().f[52]++;cov_1msdlku8l5().s[543]++;if((cov_1msdlku8l5().b[183][0]++,err.code===PostgresUniqueIndexViolationError)&&(cov_1msdlku8l5().b[183][1]++,err.detail.includes(className))){cov_1msdlku8l5().b[182][0]++;cov_1msdlku8l5().s[544]++;throw new _node.default.Error(_node.default.Error.DUPLICATE_VALUE,`Class ${className} already exists.`);}else{cov_1msdlku8l5().b[182][1]++;}cov_1msdlku8l5().s[545]++;throw err;}));cov_1msdlku8l5().s[546]++;this._notifySchemaChange();cov_1msdlku8l5().s[547]++;return parseSchema;}// Just create a table, do not insert in schema
async createTable(className,schema,conn){cov_1msdlku8l5().f[53]++;cov_1msdlku8l5().s[548]++;conn=(cov_1msdlku8l5().b[184][0]++,conn)||(cov_1msdlku8l5().b[184][1]++,this._client);cov_1msdlku8l5().s[549]++;debug('createTable');const valuesArray=(cov_1msdlku8l5().s[550]++,[]);const patternsArray=(cov_1msdlku8l5().s[551]++,[]);const fields=(cov_1msdlku8l5().s[552]++,Object.assign({},schema.fields));cov_1msdlku8l5().s[553]++;if(className==='_User'){cov_1msdlku8l5().b[185][0]++;cov_1msdlku8l5().s[554]++;fields._email_verify_token_expires_at={type:'Date'};cov_1msdlku8l5().s[555]++;fields._email_verify_token={type:'String'};cov_1msdlku8l5().s[556]++;fields._account_lockout_expires_at={type:'Date'};cov_1msdlku8l5().s[557]++;fields._failed_login_count={type:'Number'};cov_1msdlku8l5().s[558]++;fields._perishable_token={type:'String'};cov_1msdlku8l5().s[559]++;fields._perishable_token_expires_at={type:'Date'};cov_1msdlku8l5().s[560]++;fields._password_changed_at={type:'Date'};cov_1msdlku8l5().s[561]++;fields._password_history={type:'Array'};}else{cov_1msdlku8l5().b[185][1]++;}let index=(cov_1msdlku8l5().s[562]++,2);const relations=(cov_1msdlku8l5().s[563]++,[]);cov_1msdlku8l5().s[564]++;Object.keys(fields).forEach(fieldName=>{cov_1msdlku8l5().f[54]++;const parseType=(cov_1msdlku8l5().s[565]++,fields[fieldName]);// Skip when it's a relation
// We'll create the tables later
cov_1msdlku8l5().s[566]++;if(parseType.type==='Relation'){cov_1msdlku8l5().b[186][0]++;cov_1msdlku8l5().s[567]++;relations.push(fieldName);cov_1msdlku8l5().s[568]++;return;}else{cov_1msdlku8l5().b[186][1]++;}cov_1msdlku8l5().s[569]++;if(['_rperm','_wperm'].indexOf(fieldName)>=0){cov_1msdlku8l5().b[187][0]++;cov_1msdlku8l5().s[570]++;parseType.contents={type:'String'};}else{cov_1msdlku8l5().b[187][1]++;}cov_1msdlku8l5().s[571]++;valuesArray.push(fieldName);cov_1msdlku8l5().s[572]++;valuesArray.push(parseTypeToPostgresType(parseType));cov_1msdlku8l5().s[573]++;patternsArray.push(`$${index}:name $${index+1}:raw`);cov_1msdlku8l5().s[574]++;if(fieldName==='objectId'){cov_1msdlku8l5().b[188][0]++;cov_1msdlku8l5().s[575]++;patternsArray.push(`PRIMARY KEY ($${index}:name)`);}else{cov_1msdlku8l5().b[188][1]++;}cov_1msdlku8l5().s[576]++;index=index+2;});const qs=(cov_1msdlku8l5().s[577]++,`CREATE TABLE IF NOT EXISTS $1:name (${patternsArray.join()})`);const values=(cov_1msdlku8l5().s[578]++,[className,...valuesArray]);cov_1msdlku8l5().s[579]++;return conn.task('create-table',async t=>{cov_1msdlku8l5().f[55]++;cov_1msdlku8l5().s[580]++;try{cov_1msdlku8l5().s[581]++;await t.none(qs,values);}catch(error){cov_1msdlku8l5().s[582]++;if(error.code!==PostgresDuplicateRelationError){cov_1msdlku8l5().b[189][0]++;cov_1msdlku8l5().s[583]++;throw error;}else{cov_1msdlku8l5().b[189][1]++;}// ELSE: Table already exists, must have been created by a different request. Ignore the error.
}cov_1msdlku8l5().s[584]++;await t.tx('create-table-tx',tx=>{cov_1msdlku8l5().f[56]++;cov_1msdlku8l5().s[585]++;return tx.batch(relations.map(fieldName=>{cov_1msdlku8l5().f[57]++;cov_1msdlku8l5().s[586]++;return tx.none('CREATE TABLE IF NOT EXISTS $<joinTable:name> ("relatedId" varChar(120), "owningId" varChar(120), PRIMARY KEY("relatedId", "owningId") )',{joinTable:`_Join:${fieldName}:${className}`});}));});});}async schemaUpgrade(className,schema,conn){cov_1msdlku8l5().f[58]++;cov_1msdlku8l5().s[587]++;debug('schemaUpgrade');cov_1msdlku8l5().s[588]++;conn=(cov_1msdlku8l5().b[190][0]++,conn)||(cov_1msdlku8l5().b[190][1]++,this._client);const self=(cov_1msdlku8l5().s[589]++,this);cov_1msdlku8l5().s[590]++;await conn.task('schema-upgrade',async t=>{cov_1msdlku8l5().f[59]++;const columns=(cov_1msdlku8l5().s[591]++,await t.map('SELECT column_name FROM information_schema.columns WHERE table_name = $<className>',{className},a=>{cov_1msdlku8l5().f[60]++;cov_1msdlku8l5().s[592]++;return a.column_name;}));const newColumns=(cov_1msdlku8l5().s[593]++,Object.keys(schema.fields).filter(item=>{cov_1msdlku8l5().f[61]++;cov_1msdlku8l5().s[594]++;return columns.indexOf(item)===-1;}).map(fieldName=>{cov_1msdlku8l5().f[62]++;cov_1msdlku8l5().s[595]++;return self.addFieldIfNotExists(className,fieldName,schema.fields[fieldName]);}));cov_1msdlku8l5().s[596]++;await t.batch(newColumns);});}async addFieldIfNotExists(className,fieldName,type){cov_1msdlku8l5().f[63]++;cov_1msdlku8l5().s[597]++;// TODO: Must be revised for invalid logic...
debug('addFieldIfNotExists');const self=(cov_1msdlku8l5().s[598]++,this);cov_1msdlku8l5().s[599]++;await this._client.tx('add-field-if-not-exists',async t=>{cov_1msdlku8l5().f[64]++;cov_1msdlku8l5().s[600]++;if(type.type!=='Relation'){cov_1msdlku8l5().b[191][0]++;cov_1msdlku8l5().s[601]++;try{cov_1msdlku8l5().s[602]++;await t.none('ALTER TABLE $<className:name> ADD COLUMN IF NOT EXISTS $<fieldName:name> $<postgresType:raw>',{className,fieldName,postgresType:parseTypeToPostgresType(type)});}catch(error){cov_1msdlku8l5().s[603]++;if(error.code===PostgresRelationDoesNotExistError){cov_1msdlku8l5().b[192][0]++;cov_1msdlku8l5().s[604]++;return self.createClass(className,{fields:{[fieldName]:type}},t);}else{cov_1msdlku8l5().b[192][1]++;}cov_1msdlku8l5().s[605]++;if(error.code!==PostgresDuplicateColumnError){cov_1msdlku8l5().b[193][0]++;cov_1msdlku8l5().s[606]++;throw error;}else{cov_1msdlku8l5().b[193][1]++;}// Column already exists, created by other request. Carry on to see if it's the right type.
}}else{cov_1msdlku8l5().b[191][1]++;cov_1msdlku8l5().s[607]++;await t.none('CREATE TABLE IF NOT EXISTS $<joinTable:name> ("relatedId" varChar(120), "owningId" varChar(120), PRIMARY KEY("relatedId", "owningId") )',{joinTable:`_Join:${fieldName}:${className}`});}const result=(cov_1msdlku8l5().s[608]++,await t.any('SELECT "schema" FROM "_SCHEMA" WHERE "className" = $<className> and ("schema"::json->\'fields\'->$<fieldName>) is not null',{className,fieldName}));cov_1msdlku8l5().s[609]++;if(result[0]){cov_1msdlku8l5().b[194][0]++;cov_1msdlku8l5().s[610]++;throw'Attempted to add a field that already exists';}else{cov_1msdlku8l5().b[194][1]++;const path=(cov_1msdlku8l5().s[611]++,`{fields,${fieldName}}`);cov_1msdlku8l5().s[612]++;await t.none('UPDATE "_SCHEMA" SET "schema"=jsonb_set("schema", $<path>, $<type>)  WHERE "className"=$<className>',{path,type,className});}});cov_1msdlku8l5().s[613]++;this._notifySchemaChange();}async updateFieldOptions(className,fieldName,type){cov_1msdlku8l5().f[65]++;cov_1msdlku8l5().s[614]++;await this._client.tx('update-schema-field-options',async t=>{cov_1msdlku8l5().f[66]++;const path=(cov_1msdlku8l5().s[615]++,`{fields,${fieldName}}`);cov_1msdlku8l5().s[616]++;await t.none('UPDATE "_SCHEMA" SET "schema"=jsonb_set("schema", $<path>, $<type>)  WHERE "className"=$<className>',{path,type,className});});}// Drops a collection. Resolves with true if it was a Parse Schema (eg. _User, Custom, etc.)
// and resolves with false if it wasn't (eg. a join table). Rejects if deletion was impossible.
async deleteClass(className){cov_1msdlku8l5().f[67]++;const operations=(cov_1msdlku8l5().s[617]++,[{query:`DROP TABLE IF EXISTS $1:name`,values:[className]},{query:`DELETE FROM "_SCHEMA" WHERE "className" = $1`,values:[className]}]);const response=(cov_1msdlku8l5().s[618]++,await this._client.tx(t=>{cov_1msdlku8l5().f[68]++;cov_1msdlku8l5().s[619]++;return t.none(this._pgp.helpers.concat(operations));}).then(()=>{cov_1msdlku8l5().f[69]++;cov_1msdlku8l5().s[620]++;return className.indexOf('_Join:')!=0;}));// resolves with false when _Join table
cov_1msdlku8l5().s[621]++;this._notifySchemaChange();cov_1msdlku8l5().s[622]++;return response;}// Delete all data known to this adapter. Used for testing.
async deleteAllClasses(){cov_1msdlku8l5().f[70]++;const now=(cov_1msdlku8l5().s[623]++,new Date().getTime());const helpers=(cov_1msdlku8l5().s[624]++,this._pgp.helpers);cov_1msdlku8l5().s[625]++;debug('deleteAllClasses');cov_1msdlku8l5().s[626]++;await this._client.task('delete-all-classes',async t=>{cov_1msdlku8l5().f[71]++;cov_1msdlku8l5().s[627]++;try{const results=(cov_1msdlku8l5().s[628]++,await t.any('SELECT * FROM "_SCHEMA"'));const joins=(cov_1msdlku8l5().s[629]++,results.reduce((list,schema)=>{cov_1msdlku8l5().f[72]++;cov_1msdlku8l5().s[630]++;return list.concat(joinTablesForSchema(schema.schema));},[]));const classes=(cov_1msdlku8l5().s[631]++,['_SCHEMA','_PushStatus','_JobStatus','_JobSchedule','_Hooks','_GlobalConfig','_GraphQLConfig','_Audience','_Idempotency',...results.map(result=>{cov_1msdlku8l5().f[73]++;cov_1msdlku8l5().s[632]++;return result.className;}),...joins]);const queries=(cov_1msdlku8l5().s[633]++,classes.map(className=>{cov_1msdlku8l5().f[74]++;cov_1msdlku8l5().s[634]++;return{query:'DROP TABLE IF EXISTS $<className:name>',values:{className}};}));cov_1msdlku8l5().s[635]++;await t.tx(tx=>{cov_1msdlku8l5().f[75]++;cov_1msdlku8l5().s[636]++;return tx.none(helpers.concat(queries));});}catch(error){cov_1msdlku8l5().s[637]++;if(error.code!==PostgresRelationDoesNotExistError){cov_1msdlku8l5().b[195][0]++;cov_1msdlku8l5().s[638]++;throw error;}else{cov_1msdlku8l5().b[195][1]++;}// No _SCHEMA collection. Don't delete anything.
}}).then(()=>{cov_1msdlku8l5().f[76]++;cov_1msdlku8l5().s[639]++;debug(`deleteAllClasses done in ${new Date().getTime()-now}`);});}// Remove the column and all the data. For Relations, the _Join collection is handled
// specially, this function does not delete _Join columns. It should, however, indicate
// that the relation fields does not exist anymore. In mongo, this means removing it from
// the _SCHEMA collection.  There should be no actual data in the collection under the same name
// as the relation column, so it's fine to attempt to delete it. If the fields listed to be
// deleted do not exist, this function should return successfully anyways. Checking for
// attempts to delete non-existent fields is the responsibility of Parse Server.
// This function is not obligated to delete fields atomically. It is given the field
// names in a list so that databases that are capable of deleting fields atomically
// may do so.
// Returns a Promise.
async deleteFields(className,schema,fieldNames){cov_1msdlku8l5().f[77]++;cov_1msdlku8l5().s[640]++;debug('deleteFields');cov_1msdlku8l5().s[641]++;fieldNames=fieldNames.reduce((list,fieldName)=>{cov_1msdlku8l5().f[78]++;const field=(cov_1msdlku8l5().s[642]++,schema.fields[fieldName]);cov_1msdlku8l5().s[643]++;if(field.type!=='Relation'){cov_1msdlku8l5().b[196][0]++;cov_1msdlku8l5().s[644]++;list.push(fieldName);}else{cov_1msdlku8l5().b[196][1]++;}cov_1msdlku8l5().s[645]++;delete schema.fields[fieldName];cov_1msdlku8l5().s[646]++;return list;},[]);const values=(cov_1msdlku8l5().s[647]++,[className,...fieldNames]);const columns=(cov_1msdlku8l5().s[648]++,fieldNames.map((name,idx)=>{cov_1msdlku8l5().f[79]++;cov_1msdlku8l5().s[649]++;return`$${idx+2}:name`;}).join(', DROP COLUMN'));cov_1msdlku8l5().s[650]++;await this._client.tx('delete-fields',async t=>{cov_1msdlku8l5().f[80]++;cov_1msdlku8l5().s[651]++;await t.none('UPDATE "_SCHEMA" SET "schema" = $<schema> WHERE "className" = $<className>',{schema,className});cov_1msdlku8l5().s[652]++;if(values.length>1){cov_1msdlku8l5().b[197][0]++;cov_1msdlku8l5().s[653]++;await t.none(`ALTER TABLE $1:name DROP COLUMN IF EXISTS ${columns}`,values);}else{cov_1msdlku8l5().b[197][1]++;}});cov_1msdlku8l5().s[654]++;this._notifySchemaChange();}// Return a promise for all schemas known to this adapter, in Parse format. In case the
// schemas cannot be retrieved, returns a promise that rejects. Requirements for the
// rejection reason are TBD.
async getAllClasses(){cov_1msdlku8l5().f[81]++;cov_1msdlku8l5().s[655]++;return this._client.task('get-all-classes',async t=>{cov_1msdlku8l5().f[82]++;cov_1msdlku8l5().s[656]++;return await t.map('SELECT * FROM "_SCHEMA"',null,row=>{cov_1msdlku8l5().f[83]++;cov_1msdlku8l5().s[657]++;return toParseSchema(_objectSpread({className:row.className},row.schema));});});}// Return a promise for the schema with the given name, in Parse format. If
// this adapter doesn't know about the schema, return a promise that rejects with
// undefined as the reason.
async getClass(className){cov_1msdlku8l5().f[84]++;cov_1msdlku8l5().s[658]++;debug('getClass');cov_1msdlku8l5().s[659]++;return this._client.any('SELECT * FROM "_SCHEMA" WHERE "className" = $<className>',{className}).then(result=>{cov_1msdlku8l5().f[85]++;cov_1msdlku8l5().s[660]++;if(result.length!==1){cov_1msdlku8l5().b[198][0]++;cov_1msdlku8l5().s[661]++;throw undefined;}else{cov_1msdlku8l5().b[198][1]++;}cov_1msdlku8l5().s[662]++;return result[0].schema;}).then(toParseSchema);}// TODO: remove the mongo format dependency in the return value
async createObject(className,schema,object,transactionalSession){cov_1msdlku8l5().f[86]++;cov_1msdlku8l5().s[663]++;debug('createObject');let columnsArray=(cov_1msdlku8l5().s[664]++,[]);const valuesArray=(cov_1msdlku8l5().s[665]++,[]);cov_1msdlku8l5().s[666]++;schema=toPostgresSchema(schema);const geoPoints=(cov_1msdlku8l5().s[667]++,{});cov_1msdlku8l5().s[668]++;object=handleDotFields(object);cov_1msdlku8l5().s[669]++;validateKeys(object);cov_1msdlku8l5().s[670]++;Object.keys(object).forEach(fieldName=>{cov_1msdlku8l5().f[87]++;cov_1msdlku8l5().s[671]++;if(object[fieldName]===null){cov_1msdlku8l5().b[199][0]++;cov_1msdlku8l5().s[672]++;return;}else{cov_1msdlku8l5().b[199][1]++;}var authDataMatch=(cov_1msdlku8l5().s[673]++,fieldName.match(/^_auth_data_([a-zA-Z0-9_]+)$/));cov_1msdlku8l5().s[674]++;if(authDataMatch){cov_1msdlku8l5().b[200][0]++;var provider=(cov_1msdlku8l5().s[675]++,authDataMatch[1]);cov_1msdlku8l5().s[676]++;object['authData']=(cov_1msdlku8l5().b[201][0]++,object['authData'])||(cov_1msdlku8l5().b[201][1]++,{});cov_1msdlku8l5().s[677]++;object['authData'][provider]=object[fieldName];cov_1msdlku8l5().s[678]++;delete object[fieldName];cov_1msdlku8l5().s[679]++;fieldName='authData';}else{cov_1msdlku8l5().b[200][1]++;}cov_1msdlku8l5().s[680]++;columnsArray.push(fieldName);cov_1msdlku8l5().s[681]++;if((cov_1msdlku8l5().b[203][0]++,!schema.fields[fieldName])&&(cov_1msdlku8l5().b[203][1]++,className==='_User')){cov_1msdlku8l5().b[202][0]++;cov_1msdlku8l5().s[682]++;if((cov_1msdlku8l5().b[205][0]++,fieldName==='_email_verify_token')||(cov_1msdlku8l5().b[205][1]++,fieldName==='_failed_login_count')||(cov_1msdlku8l5().b[205][2]++,fieldName==='_perishable_token')||(cov_1msdlku8l5().b[205][3]++,fieldName==='_password_history')){cov_1msdlku8l5().b[204][0]++;cov_1msdlku8l5().s[683]++;valuesArray.push(object[fieldName]);}else{cov_1msdlku8l5().b[204][1]++;}cov_1msdlku8l5().s[684]++;if(fieldName==='_email_verify_token_expires_at'){cov_1msdlku8l5().b[206][0]++;cov_1msdlku8l5().s[685]++;if(object[fieldName]){cov_1msdlku8l5().b[207][0]++;cov_1msdlku8l5().s[686]++;valuesArray.push(object[fieldName].iso);}else{cov_1msdlku8l5().b[207][1]++;cov_1msdlku8l5().s[687]++;valuesArray.push(null);}}else{cov_1msdlku8l5().b[206][1]++;}cov_1msdlku8l5().s[688]++;if((cov_1msdlku8l5().b[209][0]++,fieldName==='_account_lockout_expires_at')||(cov_1msdlku8l5().b[209][1]++,fieldName==='_perishable_token_expires_at')||(cov_1msdlku8l5().b[209][2]++,fieldName==='_password_changed_at')){cov_1msdlku8l5().b[208][0]++;cov_1msdlku8l5().s[689]++;if(object[fieldName]){cov_1msdlku8l5().b[210][0]++;cov_1msdlku8l5().s[690]++;valuesArray.push(object[fieldName].iso);}else{cov_1msdlku8l5().b[210][1]++;cov_1msdlku8l5().s[691]++;valuesArray.push(null);}}else{cov_1msdlku8l5().b[208][1]++;}cov_1msdlku8l5().s[692]++;return;}else{cov_1msdlku8l5().b[202][1]++;}cov_1msdlku8l5().s[693]++;switch(schema.fields[fieldName].type){case'Date':cov_1msdlku8l5().b[211][0]++;cov_1msdlku8l5().s[694]++;if(object[fieldName]){cov_1msdlku8l5().b[212][0]++;cov_1msdlku8l5().s[695]++;valuesArray.push(object[fieldName].iso);}else{cov_1msdlku8l5().b[212][1]++;cov_1msdlku8l5().s[696]++;valuesArray.push(null);}cov_1msdlku8l5().s[697]++;break;case'Pointer':cov_1msdlku8l5().b[211][1]++;cov_1msdlku8l5().s[698]++;valuesArray.push(object[fieldName].objectId);cov_1msdlku8l5().s[699]++;break;case'Array':cov_1msdlku8l5().b[211][2]++;cov_1msdlku8l5().s[700]++;if(['_rperm','_wperm'].indexOf(fieldName)>=0){cov_1msdlku8l5().b[213][0]++;cov_1msdlku8l5().s[701]++;valuesArray.push(object[fieldName]);}else{cov_1msdlku8l5().b[213][1]++;cov_1msdlku8l5().s[702]++;valuesArray.push(JSON.stringify(object[fieldName]));}cov_1msdlku8l5().s[703]++;break;case'Object':cov_1msdlku8l5().b[211][3]++;case'Bytes':cov_1msdlku8l5().b[211][4]++;case'String':cov_1msdlku8l5().b[211][5]++;case'Number':cov_1msdlku8l5().b[211][6]++;case'Boolean':cov_1msdlku8l5().b[211][7]++;cov_1msdlku8l5().s[704]++;valuesArray.push(object[fieldName]);cov_1msdlku8l5().s[705]++;break;case'File':cov_1msdlku8l5().b[211][8]++;cov_1msdlku8l5().s[706]++;valuesArray.push(object[fieldName].name);cov_1msdlku8l5().s[707]++;break;case'Polygon':cov_1msdlku8l5().b[211][9]++;{const value=(cov_1msdlku8l5().s[708]++,convertPolygonToSQL(object[fieldName].coordinates));cov_1msdlku8l5().s[709]++;valuesArray.push(value);cov_1msdlku8l5().s[710]++;break;}case'GeoPoint':cov_1msdlku8l5().b[211][10]++;cov_1msdlku8l5().s[711]++;// pop the point and process later
geoPoints[fieldName]=object[fieldName];cov_1msdlku8l5().s[712]++;columnsArray.pop();cov_1msdlku8l5().s[713]++;break;default:cov_1msdlku8l5().b[211][11]++;cov_1msdlku8l5().s[714]++;throw`Type ${schema.fields[fieldName].type} not supported yet`;}});cov_1msdlku8l5().s[715]++;columnsArray=columnsArray.concat(Object.keys(geoPoints));const initialValues=(cov_1msdlku8l5().s[716]++,valuesArray.map((val,index)=>{cov_1msdlku8l5().f[88]++;let termination=(cov_1msdlku8l5().s[717]++,'');const fieldName=(cov_1msdlku8l5().s[718]++,columnsArray[index]);cov_1msdlku8l5().s[719]++;if(['_rperm','_wperm'].indexOf(fieldName)>=0){cov_1msdlku8l5().b[214][0]++;cov_1msdlku8l5().s[720]++;termination='::text[]';}else{cov_1msdlku8l5().b[214][1]++;cov_1msdlku8l5().s[721]++;if((cov_1msdlku8l5().b[216][0]++,schema.fields[fieldName])&&(cov_1msdlku8l5().b[216][1]++,schema.fields[fieldName].type==='Array')){cov_1msdlku8l5().b[215][0]++;cov_1msdlku8l5().s[722]++;termination='::jsonb';}else{cov_1msdlku8l5().b[215][1]++;}}cov_1msdlku8l5().s[723]++;return`$${index+2+columnsArray.length}${termination}`;}));const geoPointsInjects=(cov_1msdlku8l5().s[724]++,Object.keys(geoPoints).map(key=>{cov_1msdlku8l5().f[89]++;const value=(cov_1msdlku8l5().s[725]++,geoPoints[key]);cov_1msdlku8l5().s[726]++;valuesArray.push(value.longitude,value.latitude);const l=(cov_1msdlku8l5().s[727]++,valuesArray.length+columnsArray.length);cov_1msdlku8l5().s[728]++;return`POINT($${l}, $${l+1})`;}));const columnsPattern=(cov_1msdlku8l5().s[729]++,columnsArray.map((col,index)=>{cov_1msdlku8l5().f[90]++;cov_1msdlku8l5().s[730]++;return`$${index+2}:name`;}).join());const valuesPattern=(cov_1msdlku8l5().s[731]++,initialValues.concat(geoPointsInjects).join());const qs=(cov_1msdlku8l5().s[732]++,`INSERT INTO $1:name (${columnsPattern}) VALUES (${valuesPattern})`);const values=(cov_1msdlku8l5().s[733]++,[className,...columnsArray,...valuesArray]);const promise=(cov_1msdlku8l5().s[734]++,(transactionalSession?(cov_1msdlku8l5().b[217][0]++,transactionalSession.t):(cov_1msdlku8l5().b[217][1]++,this._client)).none(qs,values).then(()=>{cov_1msdlku8l5().f[91]++;cov_1msdlku8l5().s[735]++;return{ops:[object]};}).catch(error=>{cov_1msdlku8l5().f[92]++;cov_1msdlku8l5().s[736]++;if(error.code===PostgresUniqueIndexViolationError){cov_1msdlku8l5().b[218][0]++;const err=(cov_1msdlku8l5().s[737]++,new _node.default.Error(_node.default.Error.DUPLICATE_VALUE,'A duplicate value for a field with unique values was provided'));cov_1msdlku8l5().s[738]++;err.underlyingError=error;cov_1msdlku8l5().s[739]++;if(error.constraint){cov_1msdlku8l5().b[219][0]++;const matches=(cov_1msdlku8l5().s[740]++,error.constraint.match(/unique_([a-zA-Z]+)/));cov_1msdlku8l5().s[741]++;if((cov_1msdlku8l5().b[221][0]++,matches)&&(cov_1msdlku8l5().b[221][1]++,Array.isArray(matches))){cov_1msdlku8l5().b[220][0]++;cov_1msdlku8l5().s[742]++;err.userInfo={duplicated_field:matches[1]};}else{cov_1msdlku8l5().b[220][1]++;}}else{cov_1msdlku8l5().b[219][1]++;}cov_1msdlku8l5().s[743]++;error=err;}else{cov_1msdlku8l5().b[218][1]++;}cov_1msdlku8l5().s[744]++;throw error;}));cov_1msdlku8l5().s[745]++;if(transactionalSession){cov_1msdlku8l5().b[222][0]++;cov_1msdlku8l5().s[746]++;transactionalSession.batch.push(promise);}else{cov_1msdlku8l5().b[222][1]++;}cov_1msdlku8l5().s[747]++;return promise;}// Remove all objects that match the given Parse Query.
// If no objects match, reject with OBJECT_NOT_FOUND. If objects are found and deleted, resolve with undefined.
// If there is some other error, reject with INTERNAL_SERVER_ERROR.
async deleteObjectsByQuery(className,schema,query,transactionalSession){cov_1msdlku8l5().f[93]++;cov_1msdlku8l5().s[748]++;debug('deleteObjectsByQuery');const values=(cov_1msdlku8l5().s[749]++,[className]);const index=(cov_1msdlku8l5().s[750]++,2);const where=(cov_1msdlku8l5().s[751]++,buildWhereClause({schema,index,query,caseInsensitive:false}));cov_1msdlku8l5().s[752]++;values.push(...where.values);cov_1msdlku8l5().s[753]++;if(Object.keys(query).length===0){cov_1msdlku8l5().b[223][0]++;cov_1msdlku8l5().s[754]++;where.pattern='TRUE';}else{cov_1msdlku8l5().b[223][1]++;}const qs=(cov_1msdlku8l5().s[755]++,`WITH deleted AS (DELETE FROM $1:name WHERE ${where.pattern} RETURNING *) SELECT count(*) FROM deleted`);const promise=(cov_1msdlku8l5().s[756]++,(transactionalSession?(cov_1msdlku8l5().b[224][0]++,transactionalSession.t):(cov_1msdlku8l5().b[224][1]++,this._client)).one(qs,values,a=>{cov_1msdlku8l5().f[94]++;cov_1msdlku8l5().s[757]++;return+a.count;}).then(count=>{cov_1msdlku8l5().f[95]++;cov_1msdlku8l5().s[758]++;if(count===0){cov_1msdlku8l5().b[225][0]++;cov_1msdlku8l5().s[759]++;throw new _node.default.Error(_node.default.Error.OBJECT_NOT_FOUND,'Object not found.');}else{cov_1msdlku8l5().b[225][1]++;cov_1msdlku8l5().s[760]++;return count;}}).catch(error=>{cov_1msdlku8l5().f[96]++;cov_1msdlku8l5().s[761]++;if(error.code!==PostgresRelationDoesNotExistError){cov_1msdlku8l5().b[226][0]++;cov_1msdlku8l5().s[762]++;throw error;}else{cov_1msdlku8l5().b[226][1]++;}// ELSE: Don't delete anything if doesn't exist
}));cov_1msdlku8l5().s[763]++;if(transactionalSession){cov_1msdlku8l5().b[227][0]++;cov_1msdlku8l5().s[764]++;transactionalSession.batch.push(promise);}else{cov_1msdlku8l5().b[227][1]++;}cov_1msdlku8l5().s[765]++;return promise;}// Return value not currently well specified.
async findOneAndUpdate(className,schema,query,update,transactionalSession){cov_1msdlku8l5().f[97]++;cov_1msdlku8l5().s[766]++;debug('findOneAndUpdate');cov_1msdlku8l5().s[767]++;return this.updateObjectsByQuery(className,schema,query,update,transactionalSession).then(val=>{cov_1msdlku8l5().f[98]++;cov_1msdlku8l5().s[768]++;return val[0];});}// Apply the update to all objects that match the given Parse Query.
async updateObjectsByQuery(className,schema,query,update,transactionalSession){cov_1msdlku8l5().f[99]++;cov_1msdlku8l5().s[769]++;debug('updateObjectsByQuery');const updatePatterns=(cov_1msdlku8l5().s[770]++,[]);const values=(cov_1msdlku8l5().s[771]++,[className]);let index=(cov_1msdlku8l5().s[772]++,2);cov_1msdlku8l5().s[773]++;schema=toPostgresSchema(schema);const originalUpdate=(cov_1msdlku8l5().s[774]++,_objectSpread({},update));// Set flag for dot notation fields
const dotNotationOptions=(cov_1msdlku8l5().s[775]++,{});cov_1msdlku8l5().s[776]++;Object.keys(update).forEach(fieldName=>{cov_1msdlku8l5().f[100]++;cov_1msdlku8l5().s[777]++;if(fieldName.indexOf('.')>-1){cov_1msdlku8l5().b[228][0]++;const components=(cov_1msdlku8l5().s[778]++,fieldName.split('.'));const first=(cov_1msdlku8l5().s[779]++,components.shift());cov_1msdlku8l5().s[780]++;dotNotationOptions[first]=true;}else{cov_1msdlku8l5().b[228][1]++;cov_1msdlku8l5().s[781]++;dotNotationOptions[fieldName]=false;}});cov_1msdlku8l5().s[782]++;update=handleDotFields(update);// Resolve authData first,
// So we don't end up with multiple key updates
cov_1msdlku8l5().s[783]++;for(const fieldName in update){const authDataMatch=(cov_1msdlku8l5().s[784]++,fieldName.match(/^_auth_data_([a-zA-Z0-9_]+)$/));cov_1msdlku8l5().s[785]++;if(authDataMatch){cov_1msdlku8l5().b[229][0]++;var provider=(cov_1msdlku8l5().s[786]++,authDataMatch[1]);const value=(cov_1msdlku8l5().s[787]++,update[fieldName]);cov_1msdlku8l5().s[788]++;delete update[fieldName];cov_1msdlku8l5().s[789]++;update['authData']=(cov_1msdlku8l5().b[230][0]++,update['authData'])||(cov_1msdlku8l5().b[230][1]++,{});cov_1msdlku8l5().s[790]++;update['authData'][provider]=value;}else{cov_1msdlku8l5().b[229][1]++;}}cov_1msdlku8l5().s[791]++;for(const fieldName in update){const fieldValue=(cov_1msdlku8l5().s[792]++,update[fieldName]);// Drop any undefined values.
cov_1msdlku8l5().s[793]++;if(typeof fieldValue==='undefined'){cov_1msdlku8l5().b[231][0]++;cov_1msdlku8l5().s[794]++;delete update[fieldName];}else{cov_1msdlku8l5().b[231][1]++;cov_1msdlku8l5().s[795]++;if(fieldValue===null){cov_1msdlku8l5().b[232][0]++;cov_1msdlku8l5().s[796]++;updatePatterns.push(`$${index}:name = NULL`);cov_1msdlku8l5().s[797]++;values.push(fieldName);cov_1msdlku8l5().s[798]++;index+=1;}else{cov_1msdlku8l5().b[232][1]++;cov_1msdlku8l5().s[799]++;if(fieldName=='authData'){cov_1msdlku8l5().b[233][0]++;cov_1msdlku8l5().s[800]++;// This recursively sets the json_object
// Only 1 level deep
const generate=(jsonb,key,value)=>{cov_1msdlku8l5().f[101]++;cov_1msdlku8l5().s[801]++;return`json_object_set_key(COALESCE(${jsonb}, '{}'::jsonb), ${key}, ${value})::jsonb`;};const lastKey=(cov_1msdlku8l5().s[802]++,`$${index}:name`);const fieldNameIndex=(cov_1msdlku8l5().s[803]++,index);cov_1msdlku8l5().s[804]++;index+=1;cov_1msdlku8l5().s[805]++;values.push(fieldName);const update=(cov_1msdlku8l5().s[806]++,Object.keys(fieldValue).reduce((lastKey,key)=>{cov_1msdlku8l5().f[102]++;const str=(cov_1msdlku8l5().s[807]++,generate(lastKey,`$${index}::text`,`$${index+1}::jsonb`));cov_1msdlku8l5().s[808]++;index+=2;let value=(cov_1msdlku8l5().s[809]++,fieldValue[key]);cov_1msdlku8l5().s[810]++;if(value){cov_1msdlku8l5().b[234][0]++;cov_1msdlku8l5().s[811]++;if(value.__op==='Delete'){cov_1msdlku8l5().b[235][0]++;cov_1msdlku8l5().s[812]++;value=null;}else{cov_1msdlku8l5().b[235][1]++;cov_1msdlku8l5().s[813]++;value=JSON.stringify(value);}}else{cov_1msdlku8l5().b[234][1]++;}cov_1msdlku8l5().s[814]++;values.push(key,value);cov_1msdlku8l5().s[815]++;return str;},lastKey));cov_1msdlku8l5().s[816]++;updatePatterns.push(`$${fieldNameIndex}:name = ${update}`);}else{cov_1msdlku8l5().b[233][1]++;cov_1msdlku8l5().s[817]++;if(fieldValue.__op==='Increment'){cov_1msdlku8l5().b[236][0]++;cov_1msdlku8l5().s[818]++;updatePatterns.push(`$${index}:name = COALESCE($${index}:name, 0) + $${index+1}`);cov_1msdlku8l5().s[819]++;values.push(fieldName,fieldValue.amount);cov_1msdlku8l5().s[820]++;index+=2;}else{cov_1msdlku8l5().b[236][1]++;cov_1msdlku8l5().s[821]++;if(fieldValue.__op==='Add'){cov_1msdlku8l5().b[237][0]++;cov_1msdlku8l5().s[822]++;updatePatterns.push(`$${index}:name = array_add(COALESCE($${index}:name, '[]'::jsonb), $${index+1}::jsonb)`);cov_1msdlku8l5().s[823]++;values.push(fieldName,JSON.stringify(fieldValue.objects));cov_1msdlku8l5().s[824]++;index+=2;}else{cov_1msdlku8l5().b[237][1]++;cov_1msdlku8l5().s[825]++;if(fieldValue.__op==='Delete'){cov_1msdlku8l5().b[238][0]++;cov_1msdlku8l5().s[826]++;updatePatterns.push(`$${index}:name = $${index+1}`);cov_1msdlku8l5().s[827]++;values.push(fieldName,null);cov_1msdlku8l5().s[828]++;index+=2;}else{cov_1msdlku8l5().b[238][1]++;cov_1msdlku8l5().s[829]++;if(fieldValue.__op==='Remove'){cov_1msdlku8l5().b[239][0]++;cov_1msdlku8l5().s[830]++;updatePatterns.push(`$${index}:name = array_remove(COALESCE($${index}:name, '[]'::jsonb), $${index+1}::jsonb)`);cov_1msdlku8l5().s[831]++;values.push(fieldName,JSON.stringify(fieldValue.objects));cov_1msdlku8l5().s[832]++;index+=2;}else{cov_1msdlku8l5().b[239][1]++;cov_1msdlku8l5().s[833]++;if(fieldValue.__op==='AddUnique'){cov_1msdlku8l5().b[240][0]++;cov_1msdlku8l5().s[834]++;updatePatterns.push(`$${index}:name = array_add_unique(COALESCE($${index}:name, '[]'::jsonb), $${index+1}::jsonb)`);cov_1msdlku8l5().s[835]++;values.push(fieldName,JSON.stringify(fieldValue.objects));cov_1msdlku8l5().s[836]++;index+=2;}else{cov_1msdlku8l5().b[240][1]++;cov_1msdlku8l5().s[837]++;if(fieldName==='updatedAt'){cov_1msdlku8l5().b[241][0]++;cov_1msdlku8l5().s[838]++;//TODO: stop special casing this. It should check for __type === 'Date' and use .iso
updatePatterns.push(`$${index}:name = $${index+1}`);cov_1msdlku8l5().s[839]++;values.push(fieldName,fieldValue);cov_1msdlku8l5().s[840]++;index+=2;}else{cov_1msdlku8l5().b[241][1]++;cov_1msdlku8l5().s[841]++;if(typeof fieldValue==='string'){cov_1msdlku8l5().b[242][0]++;cov_1msdlku8l5().s[842]++;updatePatterns.push(`$${index}:name = $${index+1}`);cov_1msdlku8l5().s[843]++;values.push(fieldName,fieldValue);cov_1msdlku8l5().s[844]++;index+=2;}else{cov_1msdlku8l5().b[242][1]++;cov_1msdlku8l5().s[845]++;if(typeof fieldValue==='boolean'){cov_1msdlku8l5().b[243][0]++;cov_1msdlku8l5().s[846]++;updatePatterns.push(`$${index}:name = $${index+1}`);cov_1msdlku8l5().s[847]++;values.push(fieldName,fieldValue);cov_1msdlku8l5().s[848]++;index+=2;}else{cov_1msdlku8l5().b[243][1]++;cov_1msdlku8l5().s[849]++;if(fieldValue.__type==='Pointer'){cov_1msdlku8l5().b[244][0]++;cov_1msdlku8l5().s[850]++;updatePatterns.push(`$${index}:name = $${index+1}`);cov_1msdlku8l5().s[851]++;values.push(fieldName,fieldValue.objectId);cov_1msdlku8l5().s[852]++;index+=2;}else{cov_1msdlku8l5().b[244][1]++;cov_1msdlku8l5().s[853]++;if(fieldValue.__type==='Date'){cov_1msdlku8l5().b[245][0]++;cov_1msdlku8l5().s[854]++;updatePatterns.push(`$${index}:name = $${index+1}`);cov_1msdlku8l5().s[855]++;values.push(fieldName,toPostgresValue(fieldValue));cov_1msdlku8l5().s[856]++;index+=2;}else{cov_1msdlku8l5().b[245][1]++;cov_1msdlku8l5().s[857]++;if(fieldValue instanceof Date){cov_1msdlku8l5().b[246][0]++;cov_1msdlku8l5().s[858]++;updatePatterns.push(`$${index}:name = $${index+1}`);cov_1msdlku8l5().s[859]++;values.push(fieldName,fieldValue);cov_1msdlku8l5().s[860]++;index+=2;}else{cov_1msdlku8l5().b[246][1]++;cov_1msdlku8l5().s[861]++;if(fieldValue.__type==='File'){cov_1msdlku8l5().b[247][0]++;cov_1msdlku8l5().s[862]++;updatePatterns.push(`$${index}:name = $${index+1}`);cov_1msdlku8l5().s[863]++;values.push(fieldName,toPostgresValue(fieldValue));cov_1msdlku8l5().s[864]++;index+=2;}else{cov_1msdlku8l5().b[247][1]++;cov_1msdlku8l5().s[865]++;if(fieldValue.__type==='GeoPoint'){cov_1msdlku8l5().b[248][0]++;cov_1msdlku8l5().s[866]++;updatePatterns.push(`$${index}:name = POINT($${index+1}, $${index+2})`);cov_1msdlku8l5().s[867]++;values.push(fieldName,fieldValue.longitude,fieldValue.latitude);cov_1msdlku8l5().s[868]++;index+=3;}else{cov_1msdlku8l5().b[248][1]++;cov_1msdlku8l5().s[869]++;if(fieldValue.__type==='Polygon'){cov_1msdlku8l5().b[249][0]++;const value=(cov_1msdlku8l5().s[870]++,convertPolygonToSQL(fieldValue.coordinates));cov_1msdlku8l5().s[871]++;updatePatterns.push(`$${index}:name = $${index+1}::polygon`);cov_1msdlku8l5().s[872]++;values.push(fieldName,value);cov_1msdlku8l5().s[873]++;index+=2;}else{cov_1msdlku8l5().b[249][1]++;cov_1msdlku8l5().s[874]++;if(fieldValue.__type==='Relation'){// noop
cov_1msdlku8l5().b[250][0]++;}else{cov_1msdlku8l5().b[250][1]++;cov_1msdlku8l5().s[875]++;if(typeof fieldValue==='number'){cov_1msdlku8l5().b[251][0]++;cov_1msdlku8l5().s[876]++;updatePatterns.push(`$${index}:name = $${index+1}`);cov_1msdlku8l5().s[877]++;values.push(fieldName,fieldValue);cov_1msdlku8l5().s[878]++;index+=2;}else{cov_1msdlku8l5().b[251][1]++;cov_1msdlku8l5().s[879]++;if((cov_1msdlku8l5().b[253][0]++,typeof fieldValue==='object')&&(cov_1msdlku8l5().b[253][1]++,schema.fields[fieldName])&&(cov_1msdlku8l5().b[253][2]++,schema.fields[fieldName].type==='Object')){cov_1msdlku8l5().b[252][0]++;// Gather keys to increment
const keysToIncrement=(cov_1msdlku8l5().s[880]++,Object.keys(originalUpdate).filter(k=>{cov_1msdlku8l5().f[103]++;// choose top level fields that have a delete operation set
// Note that Object.keys is iterating over the **original** update object
// and that some of the keys of the original update could be null or undefined:
// (See the above check `if (fieldValue === null || typeof fieldValue == "undefined")`)
const value=(cov_1msdlku8l5().s[881]++,originalUpdate[k]);cov_1msdlku8l5().s[882]++;return(cov_1msdlku8l5().b[254][0]++,value)&&(cov_1msdlku8l5().b[254][1]++,value.__op==='Increment')&&(cov_1msdlku8l5().b[254][2]++,k.split('.').length===2)&&(cov_1msdlku8l5().b[254][3]++,k.split('.')[0]===fieldName);}).map(k=>{cov_1msdlku8l5().f[104]++;cov_1msdlku8l5().s[883]++;return k.split('.')[1];}));let incrementPatterns=(cov_1msdlku8l5().s[884]++,'');cov_1msdlku8l5().s[885]++;if(keysToIncrement.length>0){cov_1msdlku8l5().b[255][0]++;cov_1msdlku8l5().s[886]++;incrementPatterns=' || '+keysToIncrement.map(c=>{cov_1msdlku8l5().f[105]++;const amount=(cov_1msdlku8l5().s[887]++,fieldValue[c].amount);cov_1msdlku8l5().s[888]++;return`CONCAT('{"${c}":', COALESCE($${index}:name->>'${c}','0')::int + ${amount}, '}')::jsonb`;}).join(' || ');// Strip the keys
cov_1msdlku8l5().s[889]++;keysToIncrement.forEach(key=>{cov_1msdlku8l5().f[106]++;cov_1msdlku8l5().s[890]++;delete fieldValue[key];});}else{cov_1msdlku8l5().b[255][1]++;}const keysToDelete=(cov_1msdlku8l5().s[891]++,Object.keys(originalUpdate).filter(k=>{cov_1msdlku8l5().f[107]++;// choose top level fields that have a delete operation set.
const value=(cov_1msdlku8l5().s[892]++,originalUpdate[k]);cov_1msdlku8l5().s[893]++;return(cov_1msdlku8l5().b[256][0]++,value)&&(cov_1msdlku8l5().b[256][1]++,value.__op==='Delete')&&(cov_1msdlku8l5().b[256][2]++,k.split('.').length===2)&&(cov_1msdlku8l5().b[256][3]++,k.split('.')[0]===fieldName);}).map(k=>{cov_1msdlku8l5().f[108]++;cov_1msdlku8l5().s[894]++;return k.split('.')[1];}));const deletePatterns=(cov_1msdlku8l5().s[895]++,keysToDelete.reduce((p,c,i)=>{cov_1msdlku8l5().f[109]++;cov_1msdlku8l5().s[896]++;return p+` - '$${index+1+i}:value'`;},''));// Override Object
let updateObject=(cov_1msdlku8l5().s[897]++,"'{}'::jsonb");cov_1msdlku8l5().s[898]++;if(dotNotationOptions[fieldName]){cov_1msdlku8l5().b[257][0]++;cov_1msdlku8l5().s[899]++;// Merge Object
updateObject=`COALESCE($${index}:name, '{}'::jsonb)`;}else{cov_1msdlku8l5().b[257][1]++;}cov_1msdlku8l5().s[900]++;updatePatterns.push(`$${index}:name = (${updateObject} ${deletePatterns} ${incrementPatterns} || $${index+1+keysToDelete.length}::jsonb )`);cov_1msdlku8l5().s[901]++;values.push(fieldName,...keysToDelete,JSON.stringify(fieldValue));cov_1msdlku8l5().s[902]++;index+=2+keysToDelete.length;}else{cov_1msdlku8l5().b[252][1]++;cov_1msdlku8l5().s[903]++;if((cov_1msdlku8l5().b[259][0]++,Array.isArray(fieldValue))&&(cov_1msdlku8l5().b[259][1]++,schema.fields[fieldName])&&(cov_1msdlku8l5().b[259][2]++,schema.fields[fieldName].type==='Array')){cov_1msdlku8l5().b[258][0]++;const expectedType=(cov_1msdlku8l5().s[904]++,parseTypeToPostgresType(schema.fields[fieldName]));cov_1msdlku8l5().s[905]++;if(expectedType==='text[]'){cov_1msdlku8l5().b[260][0]++;cov_1msdlku8l5().s[906]++;updatePatterns.push(`$${index}:name = $${index+1}::text[]`);cov_1msdlku8l5().s[907]++;values.push(fieldName,fieldValue);cov_1msdlku8l5().s[908]++;index+=2;}else{cov_1msdlku8l5().b[260][1]++;cov_1msdlku8l5().s[909]++;updatePatterns.push(`$${index}:name = $${index+1}::jsonb`);cov_1msdlku8l5().s[910]++;values.push(fieldName,JSON.stringify(fieldValue));cov_1msdlku8l5().s[911]++;index+=2;}}else{cov_1msdlku8l5().b[258][1]++;cov_1msdlku8l5().s[912]++;debug('Not supported update',{fieldName,fieldValue});cov_1msdlku8l5().s[913]++;return Promise.reject(new _node.default.Error(_node.default.Error.OPERATION_FORBIDDEN,`Postgres doesn't support update ${JSON.stringify(fieldValue)} yet`));}}}}}}}}}}}}}}}}}}}}}}const where=(cov_1msdlku8l5().s[914]++,buildWhereClause({schema,index,query,caseInsensitive:false}));cov_1msdlku8l5().s[915]++;values.push(...where.values);const whereClause=(cov_1msdlku8l5().s[916]++,where.pattern.length>0?(cov_1msdlku8l5().b[261][0]++,`WHERE ${where.pattern}`):(cov_1msdlku8l5().b[261][1]++,''));const qs=(cov_1msdlku8l5().s[917]++,`UPDATE $1:name SET ${updatePatterns.join()} ${whereClause} RETURNING *`);const promise=(cov_1msdlku8l5().s[918]++,(transactionalSession?(cov_1msdlku8l5().b[262][0]++,transactionalSession.t):(cov_1msdlku8l5().b[262][1]++,this._client)).any(qs,values));cov_1msdlku8l5().s[919]++;if(transactionalSession){cov_1msdlku8l5().b[263][0]++;cov_1msdlku8l5().s[920]++;transactionalSession.batch.push(promise);}else{cov_1msdlku8l5().b[263][1]++;}cov_1msdlku8l5().s[921]++;return promise;}// Hopefully, we can get rid of this. It's only used for config and hooks.
upsertOneObject(className,schema,query,update,transactionalSession){cov_1msdlku8l5().f[110]++;cov_1msdlku8l5().s[922]++;debug('upsertOneObject');const createValue=(cov_1msdlku8l5().s[923]++,Object.assign({},query,update));cov_1msdlku8l5().s[924]++;return this.createObject(className,schema,createValue,transactionalSession).catch(error=>{cov_1msdlku8l5().f[111]++;cov_1msdlku8l5().s[925]++;// ignore duplicate value errors as it's upsert
if(error.code!==_node.default.Error.DUPLICATE_VALUE){cov_1msdlku8l5().b[264][0]++;cov_1msdlku8l5().s[926]++;throw error;}else{cov_1msdlku8l5().b[264][1]++;}cov_1msdlku8l5().s[927]++;return this.findOneAndUpdate(className,schema,query,update,transactionalSession);});}find(className,schema,query,{skip,limit,sort,keys,caseInsensitive,explain}){cov_1msdlku8l5().f[112]++;cov_1msdlku8l5().s[928]++;debug('find');const hasLimit=(cov_1msdlku8l5().s[929]++,limit!==undefined);const hasSkip=(cov_1msdlku8l5().s[930]++,skip!==undefined);let values=(cov_1msdlku8l5().s[931]++,[className]);const where=(cov_1msdlku8l5().s[932]++,buildWhereClause({schema,query,index:2,caseInsensitive}));cov_1msdlku8l5().s[933]++;values.push(...where.values);const wherePattern=(cov_1msdlku8l5().s[934]++,where.pattern.length>0?(cov_1msdlku8l5().b[265][0]++,`WHERE ${where.pattern}`):(cov_1msdlku8l5().b[265][1]++,''));const limitPattern=(cov_1msdlku8l5().s[935]++,hasLimit?(cov_1msdlku8l5().b[266][0]++,`LIMIT $${values.length+1}`):(cov_1msdlku8l5().b[266][1]++,''));cov_1msdlku8l5().s[936]++;if(hasLimit){cov_1msdlku8l5().b[267][0]++;cov_1msdlku8l5().s[937]++;values.push(limit);}else{cov_1msdlku8l5().b[267][1]++;}const skipPattern=(cov_1msdlku8l5().s[938]++,hasSkip?(cov_1msdlku8l5().b[268][0]++,`OFFSET $${values.length+1}`):(cov_1msdlku8l5().b[268][1]++,''));cov_1msdlku8l5().s[939]++;if(hasSkip){cov_1msdlku8l5().b[269][0]++;cov_1msdlku8l5().s[940]++;values.push(skip);}else{cov_1msdlku8l5().b[269][1]++;}let sortPattern=(cov_1msdlku8l5().s[941]++,'');cov_1msdlku8l5().s[942]++;if(sort){cov_1msdlku8l5().b[270][0]++;const sortCopy=(cov_1msdlku8l5().s[943]++,sort);const sorting=(cov_1msdlku8l5().s[944]++,Object.keys(sort).map(key=>{cov_1msdlku8l5().f[113]++;const transformKey=(cov_1msdlku8l5().s[945]++,transformDotFieldToComponents(key).join('->'));// Using $idx pattern gives:  non-integer constant in ORDER BY
cov_1msdlku8l5().s[946]++;if(sortCopy[key]===1){cov_1msdlku8l5().b[271][0]++;cov_1msdlku8l5().s[947]++;return`${transformKey} ASC`;}else{cov_1msdlku8l5().b[271][1]++;}cov_1msdlku8l5().s[948]++;return`${transformKey} DESC`;}).join());cov_1msdlku8l5().s[949]++;sortPattern=(cov_1msdlku8l5().b[273][0]++,sort!==undefined)&&(cov_1msdlku8l5().b[273][1]++,Object.keys(sort).length>0)?(cov_1msdlku8l5().b[272][0]++,`ORDER BY ${sorting}`):(cov_1msdlku8l5().b[272][1]++,'');}else{cov_1msdlku8l5().b[270][1]++;}cov_1msdlku8l5().s[950]++;if((cov_1msdlku8l5().b[275][0]++,where.sorts)&&(cov_1msdlku8l5().b[275][1]++,Object.keys(where.sorts).length>0)){cov_1msdlku8l5().b[274][0]++;cov_1msdlku8l5().s[951]++;sortPattern=`ORDER BY ${where.sorts.join()}`;}else{cov_1msdlku8l5().b[274][1]++;}let columns=(cov_1msdlku8l5().s[952]++,'*');cov_1msdlku8l5().s[953]++;if(keys){cov_1msdlku8l5().b[276][0]++;cov_1msdlku8l5().s[954]++;// Exclude empty keys
// Replace ACL by it's keys
keys=keys.reduce((memo,key)=>{cov_1msdlku8l5().f[114]++;cov_1msdlku8l5().s[955]++;if(key==='ACL'){cov_1msdlku8l5().b[277][0]++;cov_1msdlku8l5().s[956]++;memo.push('_rperm');cov_1msdlku8l5().s[957]++;memo.push('_wperm');}else{cov_1msdlku8l5().b[277][1]++;cov_1msdlku8l5().s[958]++;if((cov_1msdlku8l5().b[279][0]++,key.length>0)&&((cov_1msdlku8l5().b[279][1]++,schema.fields[key])&&(cov_1msdlku8l5().b[279][2]++,schema.fields[key].type!=='Relation')||(cov_1msdlku8l5().b[279][3]++,key==='$score'))){cov_1msdlku8l5().b[278][0]++;cov_1msdlku8l5().s[959]++;memo.push(key);}else{cov_1msdlku8l5().b[278][1]++;}}cov_1msdlku8l5().s[960]++;return memo;},[]);cov_1msdlku8l5().s[961]++;columns=keys.map((key,index)=>{cov_1msdlku8l5().f[115]++;cov_1msdlku8l5().s[962]++;if(key==='$score'){cov_1msdlku8l5().b[280][0]++;cov_1msdlku8l5().s[963]++;return`ts_rank_cd(to_tsvector($${2}, $${3}:name), to_tsquery($${4}, $${5}), 32) as score`;}else{cov_1msdlku8l5().b[280][1]++;}cov_1msdlku8l5().s[964]++;return`$${index+values.length+1}:name`;}).join();cov_1msdlku8l5().s[965]++;values=values.concat(keys);}else{cov_1msdlku8l5().b[276][1]++;}const originalQuery=(cov_1msdlku8l5().s[966]++,`SELECT ${columns} FROM $1:name ${wherePattern} ${sortPattern} ${limitPattern} ${skipPattern}`);const qs=(cov_1msdlku8l5().s[967]++,explain?(cov_1msdlku8l5().b[281][0]++,this.createExplainableQuery(originalQuery)):(cov_1msdlku8l5().b[281][1]++,originalQuery));cov_1msdlku8l5().s[968]++;return this._client.any(qs,values).catch(error=>{cov_1msdlku8l5().f[116]++;cov_1msdlku8l5().s[969]++;// Query on non existing table, don't crash
if(error.code!==PostgresRelationDoesNotExistError){cov_1msdlku8l5().b[282][0]++;cov_1msdlku8l5().s[970]++;throw error;}else{cov_1msdlku8l5().b[282][1]++;}cov_1msdlku8l5().s[971]++;return[];}).then(results=>{cov_1msdlku8l5().f[117]++;cov_1msdlku8l5().s[972]++;if(explain){cov_1msdlku8l5().b[283][0]++;cov_1msdlku8l5().s[973]++;return results;}else{cov_1msdlku8l5().b[283][1]++;}cov_1msdlku8l5().s[974]++;return results.map(object=>{cov_1msdlku8l5().f[118]++;cov_1msdlku8l5().s[975]++;return this.postgresObjectToParseObject(className,object,schema);});});}// Converts from a postgres-format object to a REST-format object.
// Does not strip out anything based on a lack of authentication.
postgresObjectToParseObject(className,object,schema){cov_1msdlku8l5().f[119]++;cov_1msdlku8l5().s[976]++;Object.keys(schema.fields).forEach(fieldName=>{cov_1msdlku8l5().f[120]++;cov_1msdlku8l5().s[977]++;if((cov_1msdlku8l5().b[285][0]++,schema.fields[fieldName].type==='Pointer')&&(cov_1msdlku8l5().b[285][1]++,object[fieldName])){cov_1msdlku8l5().b[284][0]++;cov_1msdlku8l5().s[978]++;object[fieldName]={objectId:object[fieldName],__type:'Pointer',className:schema.fields[fieldName].targetClass};}else{cov_1msdlku8l5().b[284][1]++;}cov_1msdlku8l5().s[979]++;if(schema.fields[fieldName].type==='Relation'){cov_1msdlku8l5().b[286][0]++;cov_1msdlku8l5().s[980]++;object[fieldName]={__type:'Relation',className:schema.fields[fieldName].targetClass};}else{cov_1msdlku8l5().b[286][1]++;}cov_1msdlku8l5().s[981]++;if((cov_1msdlku8l5().b[288][0]++,object[fieldName])&&(cov_1msdlku8l5().b[288][1]++,schema.fields[fieldName].type==='GeoPoint')){cov_1msdlku8l5().b[287][0]++;cov_1msdlku8l5().s[982]++;object[fieldName]={__type:'GeoPoint',latitude:object[fieldName].y,longitude:object[fieldName].x};}else{cov_1msdlku8l5().b[287][1]++;}cov_1msdlku8l5().s[983]++;if((cov_1msdlku8l5().b[290][0]++,object[fieldName])&&(cov_1msdlku8l5().b[290][1]++,schema.fields[fieldName].type==='Polygon')){cov_1msdlku8l5().b[289][0]++;let coords=(cov_1msdlku8l5().s[984]++,object[fieldName]);cov_1msdlku8l5().s[985]++;coords=coords.substr(2,coords.length-4).split('),(');cov_1msdlku8l5().s[986]++;coords=coords.map(point=>{cov_1msdlku8l5().f[121]++;cov_1msdlku8l5().s[987]++;return[parseFloat(point.split(',')[1]),parseFloat(point.split(',')[0])];});cov_1msdlku8l5().s[988]++;object[fieldName]={__type:'Polygon',coordinates:coords};}else{cov_1msdlku8l5().b[289][1]++;}cov_1msdlku8l5().s[989]++;if((cov_1msdlku8l5().b[292][0]++,object[fieldName])&&(cov_1msdlku8l5().b[292][1]++,schema.fields[fieldName].type==='File')){cov_1msdlku8l5().b[291][0]++;cov_1msdlku8l5().s[990]++;object[fieldName]={__type:'File',name:object[fieldName]};}else{cov_1msdlku8l5().b[291][1]++;}});//TODO: remove this reliance on the mongo format. DB adapter shouldn't know there is a difference between created at and any other date field.
cov_1msdlku8l5().s[991]++;if(object.createdAt){cov_1msdlku8l5().b[293][0]++;cov_1msdlku8l5().s[992]++;object.createdAt=object.createdAt.toISOString();}else{cov_1msdlku8l5().b[293][1]++;}cov_1msdlku8l5().s[993]++;if(object.updatedAt){cov_1msdlku8l5().b[294][0]++;cov_1msdlku8l5().s[994]++;object.updatedAt=object.updatedAt.toISOString();}else{cov_1msdlku8l5().b[294][1]++;}cov_1msdlku8l5().s[995]++;if(object.expiresAt){cov_1msdlku8l5().b[295][0]++;cov_1msdlku8l5().s[996]++;object.expiresAt={__type:'Date',iso:object.expiresAt.toISOString()};}else{cov_1msdlku8l5().b[295][1]++;}cov_1msdlku8l5().s[997]++;if(object._email_verify_token_expires_at){cov_1msdlku8l5().b[296][0]++;cov_1msdlku8l5().s[998]++;object._email_verify_token_expires_at={__type:'Date',iso:object._email_verify_token_expires_at.toISOString()};}else{cov_1msdlku8l5().b[296][1]++;}cov_1msdlku8l5().s[999]++;if(object._account_lockout_expires_at){cov_1msdlku8l5().b[297][0]++;cov_1msdlku8l5().s[1000]++;object._account_lockout_expires_at={__type:'Date',iso:object._account_lockout_expires_at.toISOString()};}else{cov_1msdlku8l5().b[297][1]++;}cov_1msdlku8l5().s[1001]++;if(object._perishable_token_expires_at){cov_1msdlku8l5().b[298][0]++;cov_1msdlku8l5().s[1002]++;object._perishable_token_expires_at={__type:'Date',iso:object._perishable_token_expires_at.toISOString()};}else{cov_1msdlku8l5().b[298][1]++;}cov_1msdlku8l5().s[1003]++;if(object._password_changed_at){cov_1msdlku8l5().b[299][0]++;cov_1msdlku8l5().s[1004]++;object._password_changed_at={__type:'Date',iso:object._password_changed_at.toISOString()};}else{cov_1msdlku8l5().b[299][1]++;}cov_1msdlku8l5().s[1005]++;for(const fieldName in object){cov_1msdlku8l5().s[1006]++;if(object[fieldName]===null){cov_1msdlku8l5().b[300][0]++;cov_1msdlku8l5().s[1007]++;delete object[fieldName];}else{cov_1msdlku8l5().b[300][1]++;}cov_1msdlku8l5().s[1008]++;if(object[fieldName]instanceof Date){cov_1msdlku8l5().b[301][0]++;cov_1msdlku8l5().s[1009]++;object[fieldName]={__type:'Date',iso:object[fieldName].toISOString()};}else{cov_1msdlku8l5().b[301][1]++;}}cov_1msdlku8l5().s[1010]++;return object;}// Create a unique index. Unique indexes on nullable fields are not allowed. Since we don't
// currently know which fields are nullable and which aren't, we ignore that criteria.
// As such, we shouldn't expose this function to users of parse until we have an out-of-band
// Way of determining if a field is nullable. Undefined doesn't count against uniqueness,
// which is why we use sparse indexes.
async ensureUniqueness(className,schema,fieldNames){cov_1msdlku8l5().f[122]++;const constraintName=(cov_1msdlku8l5().s[1011]++,`${className}_unique_${fieldNames.sort().join('_')}`);const constraintPatterns=(cov_1msdlku8l5().s[1012]++,fieldNames.map((fieldName,index)=>{cov_1msdlku8l5().f[123]++;cov_1msdlku8l5().s[1013]++;return`$${index+3}:name`;}));const qs=(cov_1msdlku8l5().s[1014]++,`CREATE UNIQUE INDEX IF NOT EXISTS $2:name ON $1:name(${constraintPatterns.join()})`);cov_1msdlku8l5().s[1015]++;return this._client.none(qs,[className,constraintName,...fieldNames]).catch(error=>{cov_1msdlku8l5().f[124]++;cov_1msdlku8l5().s[1016]++;if((cov_1msdlku8l5().b[303][0]++,error.code===PostgresDuplicateRelationError)&&(cov_1msdlku8l5().b[303][1]++,error.message.includes(constraintName))){// Index already exists. Ignore error.
cov_1msdlku8l5().b[302][0]++;}else{cov_1msdlku8l5().b[302][1]++;cov_1msdlku8l5().s[1017]++;if((cov_1msdlku8l5().b[305][0]++,error.code===PostgresUniqueIndexViolationError)&&(cov_1msdlku8l5().b[305][1]++,error.message.includes(constraintName))){cov_1msdlku8l5().b[304][0]++;cov_1msdlku8l5().s[1018]++;// Cast the error into the proper parse error
throw new _node.default.Error(_node.default.Error.DUPLICATE_VALUE,'A duplicate value for a field with unique values was provided');}else{cov_1msdlku8l5().b[304][1]++;cov_1msdlku8l5().s[1019]++;throw error;}}});}// Executes a count.
async count(className,schema,query,readPreference,estimate=(cov_1msdlku8l5().b[306][0]++,true)){cov_1msdlku8l5().f[125]++;cov_1msdlku8l5().s[1020]++;debug('count');const values=(cov_1msdlku8l5().s[1021]++,[className]);const where=(cov_1msdlku8l5().s[1022]++,buildWhereClause({schema,query,index:2,caseInsensitive:false}));cov_1msdlku8l5().s[1023]++;values.push(...where.values);const wherePattern=(cov_1msdlku8l5().s[1024]++,where.pattern.length>0?(cov_1msdlku8l5().b[307][0]++,`WHERE ${where.pattern}`):(cov_1msdlku8l5().b[307][1]++,''));let qs=(cov_1msdlku8l5().s[1025]++,'');cov_1msdlku8l5().s[1026]++;if((cov_1msdlku8l5().b[309][0]++,where.pattern.length>0)||(cov_1msdlku8l5().b[309][1]++,!estimate)){cov_1msdlku8l5().b[308][0]++;cov_1msdlku8l5().s[1027]++;qs=`SELECT count(*) FROM $1:name ${wherePattern}`;}else{cov_1msdlku8l5().b[308][1]++;cov_1msdlku8l5().s[1028]++;qs='SELECT reltuples AS approximate_row_count FROM pg_class WHERE relname = $1';}cov_1msdlku8l5().s[1029]++;return this._client.one(qs,values,a=>{cov_1msdlku8l5().f[126]++;cov_1msdlku8l5().s[1030]++;if((cov_1msdlku8l5().b[311][0]++,a.approximate_row_count==null)||(cov_1msdlku8l5().b[311][1]++,a.approximate_row_count==-1)){cov_1msdlku8l5().b[310][0]++;cov_1msdlku8l5().s[1031]++;return!isNaN(+a.count)?(cov_1msdlku8l5().b[312][0]++,+a.count):(cov_1msdlku8l5().b[312][1]++,0);}else{cov_1msdlku8l5().b[310][1]++;cov_1msdlku8l5().s[1032]++;return+a.approximate_row_count;}}).catch(error=>{cov_1msdlku8l5().f[127]++;cov_1msdlku8l5().s[1033]++;if(error.code!==PostgresRelationDoesNotExistError){cov_1msdlku8l5().b[313][0]++;cov_1msdlku8l5().s[1034]++;throw error;}else{cov_1msdlku8l5().b[313][1]++;}cov_1msdlku8l5().s[1035]++;return 0;});}async distinct(className,schema,query,fieldName){cov_1msdlku8l5().f[128]++;cov_1msdlku8l5().s[1036]++;debug('distinct');let field=(cov_1msdlku8l5().s[1037]++,fieldName);let column=(cov_1msdlku8l5().s[1038]++,fieldName);const isNested=(cov_1msdlku8l5().s[1039]++,fieldName.indexOf('.')>=0);cov_1msdlku8l5().s[1040]++;if(isNested){cov_1msdlku8l5().b[314][0]++;cov_1msdlku8l5().s[1041]++;field=transformDotFieldToComponents(fieldName).join('->');cov_1msdlku8l5().s[1042]++;column=fieldName.split('.')[0];}else{cov_1msdlku8l5().b[314][1]++;}const isArrayField=(cov_1msdlku8l5().s[1043]++,(cov_1msdlku8l5().b[315][0]++,schema.fields)&&(cov_1msdlku8l5().b[315][1]++,schema.fields[fieldName])&&(cov_1msdlku8l5().b[315][2]++,schema.fields[fieldName].type==='Array'));const isPointerField=(cov_1msdlku8l5().s[1044]++,(cov_1msdlku8l5().b[316][0]++,schema.fields)&&(cov_1msdlku8l5().b[316][1]++,schema.fields[fieldName])&&(cov_1msdlku8l5().b[316][2]++,schema.fields[fieldName].type==='Pointer'));const values=(cov_1msdlku8l5().s[1045]++,[field,column,className]);const where=(cov_1msdlku8l5().s[1046]++,buildWhereClause({schema,query,index:4,caseInsensitive:false}));cov_1msdlku8l5().s[1047]++;values.push(...where.values);const wherePattern=(cov_1msdlku8l5().s[1048]++,where.pattern.length>0?(cov_1msdlku8l5().b[317][0]++,`WHERE ${where.pattern}`):(cov_1msdlku8l5().b[317][1]++,''));const transformer=(cov_1msdlku8l5().s[1049]++,isArrayField?(cov_1msdlku8l5().b[318][0]++,'jsonb_array_elements'):(cov_1msdlku8l5().b[318][1]++,'ON'));let qs=(cov_1msdlku8l5().s[1050]++,`SELECT DISTINCT ${transformer}($1:name) $2:name FROM $3:name ${wherePattern}`);cov_1msdlku8l5().s[1051]++;if(isNested){cov_1msdlku8l5().b[319][0]++;cov_1msdlku8l5().s[1052]++;qs=`SELECT DISTINCT ${transformer}($1:raw) $2:raw FROM $3:name ${wherePattern}`;}else{cov_1msdlku8l5().b[319][1]++;}cov_1msdlku8l5().s[1053]++;return this._client.any(qs,values).catch(error=>{cov_1msdlku8l5().f[129]++;cov_1msdlku8l5().s[1054]++;if(error.code===PostgresMissingColumnError){cov_1msdlku8l5().b[320][0]++;cov_1msdlku8l5().s[1055]++;return[];}else{cov_1msdlku8l5().b[320][1]++;}cov_1msdlku8l5().s[1056]++;throw error;}).then(results=>{cov_1msdlku8l5().f[130]++;cov_1msdlku8l5().s[1057]++;if(!isNested){cov_1msdlku8l5().b[321][0]++;cov_1msdlku8l5().s[1058]++;results=results.filter(object=>{cov_1msdlku8l5().f[131]++;cov_1msdlku8l5().s[1059]++;return object[field]!==null;});cov_1msdlku8l5().s[1060]++;return results.map(object=>{cov_1msdlku8l5().f[132]++;cov_1msdlku8l5().s[1061]++;if(!isPointerField){cov_1msdlku8l5().b[322][0]++;cov_1msdlku8l5().s[1062]++;return object[field];}else{cov_1msdlku8l5().b[322][1]++;}cov_1msdlku8l5().s[1063]++;return{__type:'Pointer',className:schema.fields[fieldName].targetClass,objectId:object[field]};});}else{cov_1msdlku8l5().b[321][1]++;}const child=(cov_1msdlku8l5().s[1064]++,fieldName.split('.')[1]);cov_1msdlku8l5().s[1065]++;return results.map(object=>{cov_1msdlku8l5().f[133]++;cov_1msdlku8l5().s[1066]++;return object[column][child];});}).then(results=>{cov_1msdlku8l5().f[134]++;cov_1msdlku8l5().s[1067]++;return results.map(object=>{cov_1msdlku8l5().f[135]++;cov_1msdlku8l5().s[1068]++;return this.postgresObjectToParseObject(className,object,schema);});});}async aggregate(className,schema,pipeline,readPreference,hint,explain){cov_1msdlku8l5().f[136]++;cov_1msdlku8l5().s[1069]++;debug('aggregate');const values=(cov_1msdlku8l5().s[1070]++,[className]);let index=(cov_1msdlku8l5().s[1071]++,2);let columns=(cov_1msdlku8l5().s[1072]++,[]);let countField=(cov_1msdlku8l5().s[1073]++,null);let groupValues=(cov_1msdlku8l5().s[1074]++,null);let wherePattern=(cov_1msdlku8l5().s[1075]++,'');let limitPattern=(cov_1msdlku8l5().s[1076]++,'');let skipPattern=(cov_1msdlku8l5().s[1077]++,'');let sortPattern=(cov_1msdlku8l5().s[1078]++,'');let groupPattern=(cov_1msdlku8l5().s[1079]++,'');cov_1msdlku8l5().s[1080]++;for(let i=(cov_1msdlku8l5().s[1081]++,0);i<pipeline.length;i+=1){const stage=(cov_1msdlku8l5().s[1082]++,pipeline[i]);cov_1msdlku8l5().s[1083]++;if(stage.$group){cov_1msdlku8l5().b[323][0]++;cov_1msdlku8l5().s[1084]++;for(const field in stage.$group){const value=(cov_1msdlku8l5().s[1085]++,stage.$group[field]);cov_1msdlku8l5().s[1086]++;if((cov_1msdlku8l5().b[325][0]++,value===null)||(cov_1msdlku8l5().b[325][1]++,value===undefined)){cov_1msdlku8l5().b[324][0]++;cov_1msdlku8l5().s[1087]++;continue;}else{cov_1msdlku8l5().b[324][1]++;}cov_1msdlku8l5().s[1088]++;if((cov_1msdlku8l5().b[327][0]++,field==='_id')&&(cov_1msdlku8l5().b[327][1]++,typeof value==='string')&&(cov_1msdlku8l5().b[327][2]++,value!=='')){cov_1msdlku8l5().b[326][0]++;cov_1msdlku8l5().s[1089]++;columns.push(`$${index}:name AS "objectId"`);cov_1msdlku8l5().s[1090]++;groupPattern=`GROUP BY $${index}:name`;cov_1msdlku8l5().s[1091]++;values.push(transformAggregateField(value));cov_1msdlku8l5().s[1092]++;index+=1;cov_1msdlku8l5().s[1093]++;continue;}else{cov_1msdlku8l5().b[326][1]++;}cov_1msdlku8l5().s[1094]++;if((cov_1msdlku8l5().b[329][0]++,field==='_id')&&(cov_1msdlku8l5().b[329][1]++,typeof value==='object')&&(cov_1msdlku8l5().b[329][2]++,Object.keys(value).length!==0)){cov_1msdlku8l5().b[328][0]++;cov_1msdlku8l5().s[1095]++;groupValues=value;const groupByFields=(cov_1msdlku8l5().s[1096]++,[]);cov_1msdlku8l5().s[1097]++;for(const alias in value){cov_1msdlku8l5().s[1098]++;if((cov_1msdlku8l5().b[331][0]++,typeof value[alias]==='string')&&(cov_1msdlku8l5().b[331][1]++,value[alias])){cov_1msdlku8l5().b[330][0]++;const source=(cov_1msdlku8l5().s[1099]++,transformAggregateField(value[alias]));cov_1msdlku8l5().s[1100]++;if(!groupByFields.includes(`"${source}"`)){cov_1msdlku8l5().b[332][0]++;cov_1msdlku8l5().s[1101]++;groupByFields.push(`"${source}"`);}else{cov_1msdlku8l5().b[332][1]++;}cov_1msdlku8l5().s[1102]++;values.push(source,alias);cov_1msdlku8l5().s[1103]++;columns.push(`$${index}:name AS $${index+1}:name`);cov_1msdlku8l5().s[1104]++;index+=2;}else{cov_1msdlku8l5().b[330][1]++;const operation=(cov_1msdlku8l5().s[1105]++,Object.keys(value[alias])[0]);const source=(cov_1msdlku8l5().s[1106]++,transformAggregateField(value[alias][operation]));cov_1msdlku8l5().s[1107]++;if(mongoAggregateToPostgres[operation]){cov_1msdlku8l5().b[333][0]++;cov_1msdlku8l5().s[1108]++;if(!groupByFields.includes(`"${source}"`)){cov_1msdlku8l5().b[334][0]++;cov_1msdlku8l5().s[1109]++;groupByFields.push(`"${source}"`);}else{cov_1msdlku8l5().b[334][1]++;}cov_1msdlku8l5().s[1110]++;columns.push(`EXTRACT(${mongoAggregateToPostgres[operation]} FROM $${index}:name AT TIME ZONE 'UTC')::integer AS $${index+1}:name`);cov_1msdlku8l5().s[1111]++;values.push(source,alias);cov_1msdlku8l5().s[1112]++;index+=2;}else{cov_1msdlku8l5().b[333][1]++;}}}cov_1msdlku8l5().s[1113]++;groupPattern=`GROUP BY $${index}:raw`;cov_1msdlku8l5().s[1114]++;values.push(groupByFields.join());cov_1msdlku8l5().s[1115]++;index+=1;cov_1msdlku8l5().s[1116]++;continue;}else{cov_1msdlku8l5().b[328][1]++;}cov_1msdlku8l5().s[1117]++;if(typeof value==='object'){cov_1msdlku8l5().b[335][0]++;cov_1msdlku8l5().s[1118]++;if(value.$sum){cov_1msdlku8l5().b[336][0]++;cov_1msdlku8l5().s[1119]++;if(typeof value.$sum==='string'){cov_1msdlku8l5().b[337][0]++;cov_1msdlku8l5().s[1120]++;columns.push(`SUM($${index}:name) AS $${index+1}:name`);cov_1msdlku8l5().s[1121]++;values.push(transformAggregateField(value.$sum),field);cov_1msdlku8l5().s[1122]++;index+=2;}else{cov_1msdlku8l5().b[337][1]++;cov_1msdlku8l5().s[1123]++;countField=field;cov_1msdlku8l5().s[1124]++;columns.push(`COUNT(*) AS $${index}:name`);cov_1msdlku8l5().s[1125]++;values.push(field);cov_1msdlku8l5().s[1126]++;index+=1;}}else{cov_1msdlku8l5().b[336][1]++;}cov_1msdlku8l5().s[1127]++;if(value.$max){cov_1msdlku8l5().b[338][0]++;cov_1msdlku8l5().s[1128]++;columns.push(`MAX($${index}:name) AS $${index+1}:name`);cov_1msdlku8l5().s[1129]++;values.push(transformAggregateField(value.$max),field);cov_1msdlku8l5().s[1130]++;index+=2;}else{cov_1msdlku8l5().b[338][1]++;}cov_1msdlku8l5().s[1131]++;if(value.$min){cov_1msdlku8l5().b[339][0]++;cov_1msdlku8l5().s[1132]++;columns.push(`MIN($${index}:name) AS $${index+1}:name`);cov_1msdlku8l5().s[1133]++;values.push(transformAggregateField(value.$min),field);cov_1msdlku8l5().s[1134]++;index+=2;}else{cov_1msdlku8l5().b[339][1]++;}cov_1msdlku8l5().s[1135]++;if(value.$avg){cov_1msdlku8l5().b[340][0]++;cov_1msdlku8l5().s[1136]++;columns.push(`AVG($${index}:name) AS $${index+1}:name`);cov_1msdlku8l5().s[1137]++;values.push(transformAggregateField(value.$avg),field);cov_1msdlku8l5().s[1138]++;index+=2;}else{cov_1msdlku8l5().b[340][1]++;}}else{cov_1msdlku8l5().b[335][1]++;}}}else{cov_1msdlku8l5().b[323][1]++;cov_1msdlku8l5().s[1139]++;columns.push('*');}cov_1msdlku8l5().s[1140]++;if(stage.$project){cov_1msdlku8l5().b[341][0]++;cov_1msdlku8l5().s[1141]++;if(columns.includes('*')){cov_1msdlku8l5().b[342][0]++;cov_1msdlku8l5().s[1142]++;columns=[];}else{cov_1msdlku8l5().b[342][1]++;}cov_1msdlku8l5().s[1143]++;for(const field in stage.$project){const value=(cov_1msdlku8l5().s[1144]++,stage.$project[field]);cov_1msdlku8l5().s[1145]++;if((cov_1msdlku8l5().b[344][0]++,value===1)||(cov_1msdlku8l5().b[344][1]++,value===true)){cov_1msdlku8l5().b[343][0]++;cov_1msdlku8l5().s[1146]++;columns.push(`$${index}:name`);cov_1msdlku8l5().s[1147]++;values.push(field);cov_1msdlku8l5().s[1148]++;index+=1;}else{cov_1msdlku8l5().b[343][1]++;}}}else{cov_1msdlku8l5().b[341][1]++;}cov_1msdlku8l5().s[1149]++;if(stage.$match){cov_1msdlku8l5().b[345][0]++;const patterns=(cov_1msdlku8l5().s[1150]++,[]);const orOrAnd=(cov_1msdlku8l5().s[1151]++,Object.prototype.hasOwnProperty.call(stage.$match,'$or')?(cov_1msdlku8l5().b[346][0]++,' OR '):(cov_1msdlku8l5().b[346][1]++,' AND '));cov_1msdlku8l5().s[1152]++;if(stage.$match.$or){cov_1msdlku8l5().b[347][0]++;const collapse=(cov_1msdlku8l5().s[1153]++,{});cov_1msdlku8l5().s[1154]++;stage.$match.$or.forEach(element=>{cov_1msdlku8l5().f[137]++;cov_1msdlku8l5().s[1155]++;for(const key in element){cov_1msdlku8l5().s[1156]++;collapse[key]=element[key];}});cov_1msdlku8l5().s[1157]++;stage.$match=collapse;}else{cov_1msdlku8l5().b[347][1]++;}cov_1msdlku8l5().s[1158]++;for(const field in stage.$match){const value=(cov_1msdlku8l5().s[1159]++,stage.$match[field]);const matchPatterns=(cov_1msdlku8l5().s[1160]++,[]);cov_1msdlku8l5().s[1161]++;Object.keys(ParseToPosgresComparator).forEach(cmp=>{cov_1msdlku8l5().f[138]++;cov_1msdlku8l5().s[1162]++;if(value[cmp]){cov_1msdlku8l5().b[348][0]++;const pgComparator=(cov_1msdlku8l5().s[1163]++,ParseToPosgresComparator[cmp]);cov_1msdlku8l5().s[1164]++;matchPatterns.push(`$${index}:name ${pgComparator} $${index+1}`);cov_1msdlku8l5().s[1165]++;values.push(field,toPostgresValue(value[cmp]));cov_1msdlku8l5().s[1166]++;index+=2;}else{cov_1msdlku8l5().b[348][1]++;}});cov_1msdlku8l5().s[1167]++;if(matchPatterns.length>0){cov_1msdlku8l5().b[349][0]++;cov_1msdlku8l5().s[1168]++;patterns.push(`(${matchPatterns.join(' AND ')})`);}else{cov_1msdlku8l5().b[349][1]++;}cov_1msdlku8l5().s[1169]++;if((cov_1msdlku8l5().b[351][0]++,schema.fields[field])&&(cov_1msdlku8l5().b[351][1]++,schema.fields[field].type)&&(cov_1msdlku8l5().b[351][2]++,matchPatterns.length===0)){cov_1msdlku8l5().b[350][0]++;cov_1msdlku8l5().s[1170]++;patterns.push(`$${index}:name = $${index+1}`);cov_1msdlku8l5().s[1171]++;values.push(field,value);cov_1msdlku8l5().s[1172]++;index+=2;}else{cov_1msdlku8l5().b[350][1]++;}}cov_1msdlku8l5().s[1173]++;wherePattern=patterns.length>0?(cov_1msdlku8l5().b[352][0]++,`WHERE ${patterns.join(` ${orOrAnd} `)}`):(cov_1msdlku8l5().b[352][1]++,'');}else{cov_1msdlku8l5().b[345][1]++;}cov_1msdlku8l5().s[1174]++;if(stage.$limit){cov_1msdlku8l5().b[353][0]++;cov_1msdlku8l5().s[1175]++;limitPattern=`LIMIT $${index}`;cov_1msdlku8l5().s[1176]++;values.push(stage.$limit);cov_1msdlku8l5().s[1177]++;index+=1;}else{cov_1msdlku8l5().b[353][1]++;}cov_1msdlku8l5().s[1178]++;if(stage.$skip){cov_1msdlku8l5().b[354][0]++;cov_1msdlku8l5().s[1179]++;skipPattern=`OFFSET $${index}`;cov_1msdlku8l5().s[1180]++;values.push(stage.$skip);cov_1msdlku8l5().s[1181]++;index+=1;}else{cov_1msdlku8l5().b[354][1]++;}cov_1msdlku8l5().s[1182]++;if(stage.$sort){cov_1msdlku8l5().b[355][0]++;const sort=(cov_1msdlku8l5().s[1183]++,stage.$sort);const keys=(cov_1msdlku8l5().s[1184]++,Object.keys(sort));const sorting=(cov_1msdlku8l5().s[1185]++,keys.map(key=>{cov_1msdlku8l5().f[139]++;const transformer=(cov_1msdlku8l5().s[1186]++,sort[key]===1?(cov_1msdlku8l5().b[356][0]++,'ASC'):(cov_1msdlku8l5().b[356][1]++,'DESC'));const order=(cov_1msdlku8l5().s[1187]++,`$${index}:name ${transformer}`);cov_1msdlku8l5().s[1188]++;index+=1;cov_1msdlku8l5().s[1189]++;return order;}).join());cov_1msdlku8l5().s[1190]++;values.push(...keys);cov_1msdlku8l5().s[1191]++;sortPattern=(cov_1msdlku8l5().b[358][0]++,sort!==undefined)&&(cov_1msdlku8l5().b[358][1]++,sorting.length>0)?(cov_1msdlku8l5().b[357][0]++,`ORDER BY ${sorting}`):(cov_1msdlku8l5().b[357][1]++,'');}else{cov_1msdlku8l5().b[355][1]++;}}cov_1msdlku8l5().s[1192]++;if(groupPattern){cov_1msdlku8l5().b[359][0]++;cov_1msdlku8l5().s[1193]++;columns.forEach((e,i,a)=>{cov_1msdlku8l5().f[140]++;cov_1msdlku8l5().s[1194]++;if((cov_1msdlku8l5().b[361][0]++,e)&&(cov_1msdlku8l5().b[361][1]++,e.trim()==='*')){cov_1msdlku8l5().b[360][0]++;cov_1msdlku8l5().s[1195]++;a[i]='';}else{cov_1msdlku8l5().b[360][1]++;}});}else{cov_1msdlku8l5().b[359][1]++;}const originalQuery=(cov_1msdlku8l5().s[1196]++,`SELECT ${columns.filter(Boolean).join()} FROM $1:name ${wherePattern} ${skipPattern} ${groupPattern} ${sortPattern} ${limitPattern}`);const qs=(cov_1msdlku8l5().s[1197]++,explain?(cov_1msdlku8l5().b[362][0]++,this.createExplainableQuery(originalQuery)):(cov_1msdlku8l5().b[362][1]++,originalQuery));cov_1msdlku8l5().s[1198]++;return this._client.any(qs,values).then(a=>{cov_1msdlku8l5().f[141]++;cov_1msdlku8l5().s[1199]++;if(explain){cov_1msdlku8l5().b[363][0]++;cov_1msdlku8l5().s[1200]++;return a;}else{cov_1msdlku8l5().b[363][1]++;}const results=(cov_1msdlku8l5().s[1201]++,a.map(object=>{cov_1msdlku8l5().f[142]++;cov_1msdlku8l5().s[1202]++;return this.postgresObjectToParseObject(className,object,schema);}));cov_1msdlku8l5().s[1203]++;results.forEach(result=>{cov_1msdlku8l5().f[143]++;cov_1msdlku8l5().s[1204]++;if(!Object.prototype.hasOwnProperty.call(result,'objectId')){cov_1msdlku8l5().b[364][0]++;cov_1msdlku8l5().s[1205]++;result.objectId=null;}else{cov_1msdlku8l5().b[364][1]++;}cov_1msdlku8l5().s[1206]++;if(groupValues){cov_1msdlku8l5().b[365][0]++;cov_1msdlku8l5().s[1207]++;result.objectId={};cov_1msdlku8l5().s[1208]++;for(const key in groupValues){cov_1msdlku8l5().s[1209]++;result.objectId[key]=result[key];cov_1msdlku8l5().s[1210]++;delete result[key];}}else{cov_1msdlku8l5().b[365][1]++;}cov_1msdlku8l5().s[1211]++;if(countField){cov_1msdlku8l5().b[366][0]++;cov_1msdlku8l5().s[1212]++;result[countField]=parseInt(result[countField],10);}else{cov_1msdlku8l5().b[366][1]++;}});cov_1msdlku8l5().s[1213]++;return results;});}async performInitialization({VolatileClassesSchemas}){cov_1msdlku8l5().f[144]++;cov_1msdlku8l5().s[1214]++;// TODO: This method needs to be rewritten to make proper use of connections (@vitaly-t)
debug('performInitialization');cov_1msdlku8l5().s[1215]++;await this._ensureSchemaCollectionExists();const promises=(cov_1msdlku8l5().s[1216]++,VolatileClassesSchemas.map(schema=>{cov_1msdlku8l5().f[145]++;cov_1msdlku8l5().s[1217]++;return this.createTable(schema.className,schema).catch(err=>{cov_1msdlku8l5().f[146]++;cov_1msdlku8l5().s[1218]++;if((cov_1msdlku8l5().b[368][0]++,err.code===PostgresDuplicateRelationError)||(cov_1msdlku8l5().b[368][1]++,err.code===_node.default.Error.INVALID_CLASS_NAME)){cov_1msdlku8l5().b[367][0]++;cov_1msdlku8l5().s[1219]++;return Promise.resolve();}else{cov_1msdlku8l5().b[367][1]++;}cov_1msdlku8l5().s[1220]++;throw err;}).then(()=>{cov_1msdlku8l5().f[147]++;cov_1msdlku8l5().s[1221]++;return this.schemaUpgrade(schema.className,schema);});}));cov_1msdlku8l5().s[1222]++;promises.push(this._listenToSchema());cov_1msdlku8l5().s[1223]++;return Promise.all(promises).then(()=>{cov_1msdlku8l5().f[148]++;cov_1msdlku8l5().s[1224]++;return this._client.tx('perform-initialization',async t=>{cov_1msdlku8l5().f[149]++;cov_1msdlku8l5().s[1225]++;await t.none(_sql.default.misc.jsonObjectSetKeys);cov_1msdlku8l5().s[1226]++;await t.none(_sql.default.array.add);cov_1msdlku8l5().s[1227]++;await t.none(_sql.default.array.addUnique);cov_1msdlku8l5().s[1228]++;await t.none(_sql.default.array.remove);cov_1msdlku8l5().s[1229]++;await t.none(_sql.default.array.containsAll);cov_1msdlku8l5().s[1230]++;await t.none(_sql.default.array.containsAllRegex);cov_1msdlku8l5().s[1231]++;await t.none(_sql.default.array.contains);cov_1msdlku8l5().s[1232]++;return t.ctx;});}).then(ctx=>{cov_1msdlku8l5().f[150]++;cov_1msdlku8l5().s[1233]++;debug(`initializationDone in ${ctx.duration}`);}).catch(error=>{cov_1msdlku8l5().f[151]++;cov_1msdlku8l5().s[1234]++;/* eslint-disable no-console */console.error(error);});}async createIndexes(className,indexes,conn){cov_1msdlku8l5().f[152]++;cov_1msdlku8l5().s[1235]++;return((cov_1msdlku8l5().b[369][0]++,conn)||(cov_1msdlku8l5().b[369][1]++,this._client)).tx(t=>{cov_1msdlku8l5().f[153]++;cov_1msdlku8l5().s[1236]++;return t.batch(indexes.map(i=>{cov_1msdlku8l5().f[154]++;cov_1msdlku8l5().s[1237]++;return t.none('CREATE INDEX IF NOT EXISTS $1:name ON $2:name ($3:name)',[i.name,className,i.key]);}));});}async createIndexesIfNeeded(className,fieldName,type,conn){cov_1msdlku8l5().f[155]++;cov_1msdlku8l5().s[1238]++;await((cov_1msdlku8l5().b[370][0]++,conn)||(cov_1msdlku8l5().b[370][1]++,this._client)).none('CREATE INDEX IF NOT EXISTS $1:name ON $2:name ($3:name)',[fieldName,className,type]);}async dropIndexes(className,indexes,conn){cov_1msdlku8l5().f[156]++;const queries=(cov_1msdlku8l5().s[1239]++,indexes.map(i=>{cov_1msdlku8l5().f[157]++;cov_1msdlku8l5().s[1240]++;return{query:'DROP INDEX $1:name',values:i};}));cov_1msdlku8l5().s[1241]++;await((cov_1msdlku8l5().b[371][0]++,conn)||(cov_1msdlku8l5().b[371][1]++,this._client)).tx(t=>{cov_1msdlku8l5().f[158]++;cov_1msdlku8l5().s[1242]++;return t.none(this._pgp.helpers.concat(queries));});}async getIndexes(className){cov_1msdlku8l5().f[159]++;const qs=(cov_1msdlku8l5().s[1243]++,'SELECT * FROM pg_indexes WHERE tablename = ${className}');cov_1msdlku8l5().s[1244]++;return this._client.any(qs,{className});}async updateSchemaWithIndexes(){cov_1msdlku8l5().f[160]++;cov_1msdlku8l5().s[1245]++;return Promise.resolve();}// Used for testing purposes
async updateEstimatedCount(className){cov_1msdlku8l5().f[161]++;cov_1msdlku8l5().s[1246]++;return this._client.none('ANALYZE $1:name',[className]);}async createTransactionalSession(){cov_1msdlku8l5().f[162]++;cov_1msdlku8l5().s[1247]++;return new Promise(resolve=>{cov_1msdlku8l5().f[163]++;const transactionalSession=(cov_1msdlku8l5().s[1248]++,{});cov_1msdlku8l5().s[1249]++;transactionalSession.result=this._client.tx(t=>{cov_1msdlku8l5().f[164]++;cov_1msdlku8l5().s[1250]++;transactionalSession.t=t;cov_1msdlku8l5().s[1251]++;transactionalSession.promise=new Promise(resolve=>{cov_1msdlku8l5().f[165]++;cov_1msdlku8l5().s[1252]++;transactionalSession.resolve=resolve;});cov_1msdlku8l5().s[1253]++;transactionalSession.batch=[];cov_1msdlku8l5().s[1254]++;resolve(transactionalSession);cov_1msdlku8l5().s[1255]++;return transactionalSession.promise;});});}commitTransactionalSession(transactionalSession){cov_1msdlku8l5().f[166]++;cov_1msdlku8l5().s[1256]++;transactionalSession.resolve(transactionalSession.t.batch(transactionalSession.batch));cov_1msdlku8l5().s[1257]++;return transactionalSession.result;}abortTransactionalSession(transactionalSession){cov_1msdlku8l5().f[167]++;const result=(cov_1msdlku8l5().s[1258]++,transactionalSession.result.catch());cov_1msdlku8l5().s[1259]++;transactionalSession.batch.push(Promise.reject());cov_1msdlku8l5().s[1260]++;transactionalSession.resolve(transactionalSession.t.batch(transactionalSession.batch));cov_1msdlku8l5().s[1261]++;return result;}async ensureIndex(className,schema,fieldNames,indexName,caseInsensitive=(cov_1msdlku8l5().b[372][0]++,false),options=(cov_1msdlku8l5().b[373][0]++,{})){cov_1msdlku8l5().f[168]++;const conn=(cov_1msdlku8l5().s[1262]++,options.conn!==undefined?(cov_1msdlku8l5().b[374][0]++,options.conn):(cov_1msdlku8l5().b[374][1]++,this._client));const defaultIndexName=(cov_1msdlku8l5().s[1263]++,`parse_default_${fieldNames.sort().join('_')}`);const indexNameOptions=(cov_1msdlku8l5().s[1264]++,indexName!=null?(cov_1msdlku8l5().b[375][0]++,{name:indexName}):(cov_1msdlku8l5().b[375][1]++,{name:defaultIndexName}));const constraintPatterns=(cov_1msdlku8l5().s[1265]++,caseInsensitive?(cov_1msdlku8l5().b[376][0]++,fieldNames.map((fieldName,index)=>{cov_1msdlku8l5().f[169]++;cov_1msdlku8l5().s[1266]++;return`lower($${index+3}:name) varchar_pattern_ops`;})):(cov_1msdlku8l5().b[376][1]++,fieldNames.map((fieldName,index)=>{cov_1msdlku8l5().f[170]++;cov_1msdlku8l5().s[1267]++;return`$${index+3}:name`;})));const qs=(cov_1msdlku8l5().s[1268]++,`CREATE INDEX IF NOT EXISTS $1:name ON $2:name (${constraintPatterns.join()})`);cov_1msdlku8l5().s[1269]++;await conn.none(qs,[indexNameOptions.name,className,...fieldNames]).catch(error=>{cov_1msdlku8l5().f[171]++;cov_1msdlku8l5().s[1270]++;if((cov_1msdlku8l5().b[378][0]++,error.code===PostgresDuplicateRelationError)&&(cov_1msdlku8l5().b[378][1]++,error.message.includes(indexNameOptions.name))){// Index already exists. Ignore error.
cov_1msdlku8l5().b[377][0]++;}else{cov_1msdlku8l5().b[377][1]++;cov_1msdlku8l5().s[1271]++;if((cov_1msdlku8l5().b[380][0]++,error.code===PostgresUniqueIndexViolationError)&&(cov_1msdlku8l5().b[380][1]++,error.message.includes(indexNameOptions.name))){cov_1msdlku8l5().b[379][0]++;cov_1msdlku8l5().s[1272]++;// Cast the error into the proper parse error
throw new _node.default.Error(_node.default.Error.DUPLICATE_VALUE,'A duplicate value for a field with unique values was provided');}else{cov_1msdlku8l5().b[379][1]++;cov_1msdlku8l5().s[1273]++;throw error;}}});}}cov_1msdlku8l5().s[1274]++;exports.PostgresStorageAdapter=PostgresStorageAdapter;function convertPolygonToSQL(polygon){cov_1msdlku8l5().f[172]++;cov_1msdlku8l5().s[1275]++;if(polygon.length<3){cov_1msdlku8l5().b[381][0]++;cov_1msdlku8l5().s[1276]++;throw new _node.default.Error(_node.default.Error.INVALID_JSON,`Polygon must have at least 3 values`);}else{cov_1msdlku8l5().b[381][1]++;}cov_1msdlku8l5().s[1277]++;if((cov_1msdlku8l5().b[383][0]++,polygon[0][0]!==polygon[polygon.length-1][0])||(cov_1msdlku8l5().b[383][1]++,polygon[0][1]!==polygon[polygon.length-1][1])){cov_1msdlku8l5().b[382][0]++;cov_1msdlku8l5().s[1278]++;polygon.push(polygon[0]);}else{cov_1msdlku8l5().b[382][1]++;}const unique=(cov_1msdlku8l5().s[1279]++,polygon.filter((item,index,ar)=>{cov_1msdlku8l5().f[173]++;let foundIndex=(cov_1msdlku8l5().s[1280]++,-1);cov_1msdlku8l5().s[1281]++;for(let i=(cov_1msdlku8l5().s[1282]++,0);i<ar.length;i+=1){const pt=(cov_1msdlku8l5().s[1283]++,ar[i]);cov_1msdlku8l5().s[1284]++;if((cov_1msdlku8l5().b[385][0]++,pt[0]===item[0])&&(cov_1msdlku8l5().b[385][1]++,pt[1]===item[1])){cov_1msdlku8l5().b[384][0]++;cov_1msdlku8l5().s[1285]++;foundIndex=i;cov_1msdlku8l5().s[1286]++;break;}else{cov_1msdlku8l5().b[384][1]++;}}cov_1msdlku8l5().s[1287]++;return foundIndex===index;}));cov_1msdlku8l5().s[1288]++;if(unique.length<3){cov_1msdlku8l5().b[386][0]++;cov_1msdlku8l5().s[1289]++;throw new _node.default.Error(_node.default.Error.INTERNAL_SERVER_ERROR,'GeoJSON: Loop must have at least 3 different vertices');}else{cov_1msdlku8l5().b[386][1]++;}const points=(cov_1msdlku8l5().s[1290]++,polygon.map(point=>{cov_1msdlku8l5().f[174]++;cov_1msdlku8l5().s[1291]++;_node.default.GeoPoint._validate(parseFloat(point[1]),parseFloat(point[0]));cov_1msdlku8l5().s[1292]++;return`(${point[1]}, ${point[0]})`;}).join(', '));cov_1msdlku8l5().s[1293]++;return`(${points})`;}function removeWhiteSpace(regex){cov_1msdlku8l5().f[175]++;cov_1msdlku8l5().s[1294]++;if(!regex.endsWith('\n')){cov_1msdlku8l5().b[387][0]++;cov_1msdlku8l5().s[1295]++;regex+='\n';}else{cov_1msdlku8l5().b[387][1]++;}// remove non escaped comments
cov_1msdlku8l5().s[1296]++;return regex.replace(/([^\\])#.*\n/gim,'$1')// remove lines starting with a comment
.replace(/^#.*\n/gim,'')// remove non escaped whitespace
.replace(/([^\\])\s+/gim,'$1')// remove whitespace at the beginning of a line
.replace(/^\s+/,'').trim();}function processRegexPattern(s){cov_1msdlku8l5().f[176]++;cov_1msdlku8l5().s[1297]++;if((cov_1msdlku8l5().b[389][0]++,s)&&(cov_1msdlku8l5().b[389][1]++,s.startsWith('^'))){cov_1msdlku8l5().b[388][0]++;cov_1msdlku8l5().s[1298]++;// regex for startsWith
return'^'+literalizeRegexPart(s.slice(1));}else{cov_1msdlku8l5().b[388][1]++;cov_1msdlku8l5().s[1299]++;if((cov_1msdlku8l5().b[391][0]++,s)&&(cov_1msdlku8l5().b[391][1]++,s.endsWith('$'))){cov_1msdlku8l5().b[390][0]++;cov_1msdlku8l5().s[1300]++;// regex for endsWith
return literalizeRegexPart(s.slice(0,s.length-1))+'$';}else{cov_1msdlku8l5().b[390][1]++;}}// regex for contains
cov_1msdlku8l5().s[1301]++;return literalizeRegexPart(s);}function isStartsWithRegex(value){cov_1msdlku8l5().f[177]++;cov_1msdlku8l5().s[1302]++;if((cov_1msdlku8l5().b[393][0]++,!value)||(cov_1msdlku8l5().b[393][1]++,typeof value!=='string')||(cov_1msdlku8l5().b[393][2]++,!value.startsWith('^'))){cov_1msdlku8l5().b[392][0]++;cov_1msdlku8l5().s[1303]++;return false;}else{cov_1msdlku8l5().b[392][1]++;}const matches=(cov_1msdlku8l5().s[1304]++,value.match(/\^\\Q.*\\E/));cov_1msdlku8l5().s[1305]++;return!!matches;}function isAllValuesRegexOrNone(values){cov_1msdlku8l5().f[178]++;cov_1msdlku8l5().s[1306]++;if((cov_1msdlku8l5().b[395][0]++,!values)||(cov_1msdlku8l5().b[395][1]++,!Array.isArray(values))||(cov_1msdlku8l5().b[395][2]++,values.length===0)){cov_1msdlku8l5().b[394][0]++;cov_1msdlku8l5().s[1307]++;return true;}else{cov_1msdlku8l5().b[394][1]++;}const firstValuesIsRegex=(cov_1msdlku8l5().s[1308]++,isStartsWithRegex(values[0].$regex));cov_1msdlku8l5().s[1309]++;if(values.length===1){cov_1msdlku8l5().b[396][0]++;cov_1msdlku8l5().s[1310]++;return firstValuesIsRegex;}else{cov_1msdlku8l5().b[396][1]++;}cov_1msdlku8l5().s[1311]++;for(let i=(cov_1msdlku8l5().s[1312]++,1),length=(cov_1msdlku8l5().s[1313]++,values.length);i<length;++i){cov_1msdlku8l5().s[1314]++;if(firstValuesIsRegex!==isStartsWithRegex(values[i].$regex)){cov_1msdlku8l5().b[397][0]++;cov_1msdlku8l5().s[1315]++;return false;}else{cov_1msdlku8l5().b[397][1]++;}}cov_1msdlku8l5().s[1316]++;return true;}function isAnyValueRegexStartsWith(values){cov_1msdlku8l5().f[179]++;cov_1msdlku8l5().s[1317]++;return values.some(function(value){cov_1msdlku8l5().f[180]++;cov_1msdlku8l5().s[1318]++;return isStartsWithRegex(value.$regex);});}function createLiteralRegex(remaining){cov_1msdlku8l5().f[181]++;cov_1msdlku8l5().s[1319]++;return remaining.split('').map(c=>{cov_1msdlku8l5().f[182]++;const regex=(cov_1msdlku8l5().s[1320]++,RegExp('[0-9 ]|\\p{L}','u'));// Support all unicode letter chars
cov_1msdlku8l5().s[1321]++;if(c.match(regex)!==null){cov_1msdlku8l5().b[398][0]++;cov_1msdlku8l5().s[1322]++;// don't escape alphanumeric characters
return c;}else{cov_1msdlku8l5().b[398][1]++;}// escape everything else (single quotes with single quotes, everything else with a backslash)
cov_1msdlku8l5().s[1323]++;return c===`'`?(cov_1msdlku8l5().b[399][0]++,`''`):(cov_1msdlku8l5().b[399][1]++,`\\${c}`);}).join('');}function literalizeRegexPart(s){cov_1msdlku8l5().f[183]++;const matcher1=(cov_1msdlku8l5().s[1324]++,/\\Q((?!\\E).*)\\E$/);const result1=(cov_1msdlku8l5().s[1325]++,s.match(matcher1));cov_1msdlku8l5().s[1326]++;if((cov_1msdlku8l5().b[401][0]++,result1)&&(cov_1msdlku8l5().b[401][1]++,result1.length>1)&&(cov_1msdlku8l5().b[401][2]++,result1.index>-1)){cov_1msdlku8l5().b[400][0]++;// process regex that has a beginning and an end specified for the literal text
const prefix=(cov_1msdlku8l5().s[1327]++,s.substr(0,result1.index));const remaining=(cov_1msdlku8l5().s[1328]++,result1[1]);cov_1msdlku8l5().s[1329]++;return literalizeRegexPart(prefix)+createLiteralRegex(remaining);}else{cov_1msdlku8l5().b[400][1]++;}// process regex that has a beginning specified for the literal text
const matcher2=(cov_1msdlku8l5().s[1330]++,/\\Q((?!\\E).*)$/);const result2=(cov_1msdlku8l5().s[1331]++,s.match(matcher2));cov_1msdlku8l5().s[1332]++;if((cov_1msdlku8l5().b[403][0]++,result2)&&(cov_1msdlku8l5().b[403][1]++,result2.length>1)&&(cov_1msdlku8l5().b[403][2]++,result2.index>-1)){cov_1msdlku8l5().b[402][0]++;const prefix=(cov_1msdlku8l5().s[1333]++,s.substr(0,result2.index));const remaining=(cov_1msdlku8l5().s[1334]++,result2[1]);cov_1msdlku8l5().s[1335]++;return literalizeRegexPart(prefix)+createLiteralRegex(remaining);}else{cov_1msdlku8l5().b[402][1]++;}// remove all instances of \Q and \E from the remaining text & escape single quotes
cov_1msdlku8l5().s[1336]++;return s.replace(/([^\\])(\\E)/,'$1').replace(/([^\\])(\\Q)/,'$1').replace(/^\\E/,'').replace(/^\\Q/,'').replace(/([^'])'/,`$1''`).replace(/^'([^'])/,`''$1`);}var GeoPointCoder=(cov_1msdlku8l5().s[1337]++,{isValidJSON(value){cov_1msdlku8l5().f[184]++;cov_1msdlku8l5().s[1338]++;return(cov_1msdlku8l5().b[404][0]++,typeof value==='object')&&(cov_1msdlku8l5().b[404][1]++,value!==null)&&(cov_1msdlku8l5().b[404][2]++,value.__type==='GeoPoint');}});var _default=(cov_1msdlku8l5().s[1339]++,PostgresStorageAdapter);cov_1msdlku8l5().s[1340]++;exports.default=_default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9BZGFwdGVycy9TdG9yYWdlL1Bvc3RncmVzL1Bvc3RncmVzU3RvcmFnZUFkYXB0ZXIuanMiXSwibmFtZXMiOlsiUG9zdGdyZXNSZWxhdGlvbkRvZXNOb3RFeGlzdEVycm9yIiwiUG9zdGdyZXNEdXBsaWNhdGVSZWxhdGlvbkVycm9yIiwiUG9zdGdyZXNEdXBsaWNhdGVDb2x1bW5FcnJvciIsIlBvc3RncmVzTWlzc2luZ0NvbHVtbkVycm9yIiwiUG9zdGdyZXNEdXBsaWNhdGVPYmplY3RFcnJvciIsIlBvc3RncmVzVW5pcXVlSW5kZXhWaW9sYXRpb25FcnJvciIsImxvZ2dlciIsInJlcXVpcmUiLCJkZWJ1ZyIsImFyZ3MiLCJhcmd1bWVudHMiLCJjb25jYXQiLCJzbGljZSIsImxlbmd0aCIsImxvZyIsImdldExvZ2dlciIsImFwcGx5IiwicGFyc2VUeXBlVG9Qb3N0Z3Jlc1R5cGUiLCJ0eXBlIiwiY29udGVudHMiLCJKU09OIiwic3RyaW5naWZ5IiwiUGFyc2VUb1Bvc2dyZXNDb21wYXJhdG9yIiwiJGd0IiwiJGx0IiwiJGd0ZSIsIiRsdGUiLCJtb25nb0FnZ3JlZ2F0ZVRvUG9zdGdyZXMiLCIkZGF5T2ZNb250aCIsIiRkYXlPZldlZWsiLCIkZGF5T2ZZZWFyIiwiJGlzb0RheU9mV2VlayIsIiRpc29XZWVrWWVhciIsIiRob3VyIiwiJG1pbnV0ZSIsIiRzZWNvbmQiLCIkbWlsbGlzZWNvbmQiLCIkbW9udGgiLCIkd2VlayIsIiR5ZWFyIiwidG9Qb3N0Z3Jlc1ZhbHVlIiwidmFsdWUiLCJfX3R5cGUiLCJpc28iLCJuYW1lIiwidHJhbnNmb3JtVmFsdWUiLCJvYmplY3RJZCIsImVtcHR5Q0xQUyIsIk9iamVjdCIsImZyZWV6ZSIsImZpbmQiLCJnZXQiLCJjb3VudCIsImNyZWF0ZSIsInVwZGF0ZSIsImRlbGV0ZSIsImFkZEZpZWxkIiwicHJvdGVjdGVkRmllbGRzIiwiZGVmYXVsdENMUFMiLCJ0b1BhcnNlU2NoZW1hIiwic2NoZW1hIiwiY2xhc3NOYW1lIiwiZmllbGRzIiwiX2hhc2hlZF9wYXNzd29yZCIsIl93cGVybSIsIl9ycGVybSIsImNscHMiLCJjbGFzc0xldmVsUGVybWlzc2lvbnMiLCJpbmRleGVzIiwidG9Qb3N0Z3Jlc1NjaGVtYSIsIl9wYXNzd29yZF9oaXN0b3J5IiwiaGFuZGxlRG90RmllbGRzIiwib2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJmaWVsZE5hbWUiLCJpbmRleE9mIiwiY29tcG9uZW50cyIsInNwbGl0IiwiZmlyc3QiLCJzaGlmdCIsImN1cnJlbnRPYmoiLCJuZXh0IiwiX19vcCIsInVuZGVmaW5lZCIsInRyYW5zZm9ybURvdEZpZWxkVG9Db21wb25lbnRzIiwibWFwIiwiY21wdCIsImluZGV4IiwidHJhbnNmb3JtRG90RmllbGQiLCJqb2luIiwidHJhbnNmb3JtQWdncmVnYXRlRmllbGQiLCJzdWJzdHIiLCJ2YWxpZGF0ZUtleXMiLCJrZXkiLCJpbmNsdWRlcyIsIlBhcnNlIiwiRXJyb3IiLCJJTlZBTElEX05FU1RFRF9LRVkiLCJqb2luVGFibGVzRm9yU2NoZW1hIiwibGlzdCIsImZpZWxkIiwicHVzaCIsImJ1aWxkV2hlcmVDbGF1c2UiLCJxdWVyeSIsImNhc2VJbnNlbnNpdGl2ZSIsInBhdHRlcm5zIiwidmFsdWVzIiwic29ydHMiLCJpc0FycmF5RmllbGQiLCJpbml0aWFsUGF0dGVybnNMZW5ndGgiLCJmaWVsZFZhbHVlIiwiJGV4aXN0cyIsImF1dGhEYXRhTWF0Y2giLCJtYXRjaCIsIiRpbiIsIiRyZWdleCIsIk1BWF9JTlRfUExVU19PTkUiLCJjbGF1c2VzIiwiY2xhdXNlVmFsdWVzIiwic3ViUXVlcnkiLCJjbGF1c2UiLCJwYXR0ZXJuIiwib3JPckFuZCIsIm5vdCIsIiRuZSIsImNvbnN0cmFpbnRGaWVsZE5hbWUiLCJwb2ludCIsImxvbmdpdHVkZSIsImxhdGl0dWRlIiwiJGVxIiwiaXNJbk9yTmluIiwiQXJyYXkiLCJpc0FycmF5IiwiJG5pbiIsImluUGF0dGVybnMiLCJhbGxvd051bGwiLCJsaXN0RWxlbSIsImxpc3RJbmRleCIsImNyZWF0ZUNvbnN0cmFpbnQiLCJiYXNlQXJyYXkiLCJub3RJbiIsIl8iLCJmbGF0TWFwIiwiZWx0IiwiSU5WQUxJRF9KU09OIiwiJGFsbCIsImlzQW55VmFsdWVSZWdleFN0YXJ0c1dpdGgiLCJpc0FsbFZhbHVlc1JlZ2V4T3JOb25lIiwiaSIsInByb2Nlc3NSZWdleFBhdHRlcm4iLCJzdWJzdHJpbmciLCIkY29udGFpbmVkQnkiLCJhcnIiLCIkdGV4dCIsInNlYXJjaCIsIiRzZWFyY2giLCJsYW5ndWFnZSIsIiR0ZXJtIiwiJGxhbmd1YWdlIiwiJGNhc2VTZW5zaXRpdmUiLCIkZGlhY3JpdGljU2Vuc2l0aXZlIiwiJG5lYXJTcGhlcmUiLCJkaXN0YW5jZSIsIiRtYXhEaXN0YW5jZSIsImRpc3RhbmNlSW5LTSIsIiR3aXRoaW4iLCIkYm94IiwiYm94IiwibGVmdCIsImJvdHRvbSIsInJpZ2h0IiwidG9wIiwiJGdlb1dpdGhpbiIsIiRjZW50ZXJTcGhlcmUiLCJjZW50ZXJTcGhlcmUiLCJHZW9Qb2ludCIsIkdlb1BvaW50Q29kZXIiLCJpc1ZhbGlkSlNPTiIsIl92YWxpZGF0ZSIsImlzTmFOIiwiJHBvbHlnb24iLCJwb2x5Z29uIiwicG9pbnRzIiwiY29vcmRpbmF0ZXMiLCIkZ2VvSW50ZXJzZWN0cyIsIiRwb2ludCIsInJlZ2V4Iiwib3BlcmF0b3IiLCJvcHRzIiwiJG9wdGlvbnMiLCJyZW1vdmVXaGl0ZVNwYWNlIiwiY29udmVydFBvbHlnb25Ub1NRTCIsImNtcCIsInBnQ29tcGFyYXRvciIsInBvc3RncmVzVmFsdWUiLCJjYXN0VHlwZSIsIk9QRVJBVElPTl9GT1JCSURERU4iLCJQb3N0Z3Jlc1N0b3JhZ2VBZGFwdGVyIiwiY29uc3RydWN0b3IiLCJ1cmkiLCJjb2xsZWN0aW9uUHJlZml4IiwiZGF0YWJhc2VPcHRpb25zIiwiX2NvbGxlY3Rpb25QcmVmaXgiLCJlbmFibGVTY2hlbWFIb29rcyIsImNsaWVudCIsInBncCIsIl9jbGllbnQiLCJfb25jaGFuZ2UiLCJfcGdwIiwiX3V1aWQiLCJjYW5Tb3J0T25Kb2luVGFibGVzIiwid2F0Y2giLCJjYWxsYmFjayIsImNyZWF0ZUV4cGxhaW5hYmxlUXVlcnkiLCJhbmFseXplIiwiaGFuZGxlU2h1dGRvd24iLCJfc3RyZWFtIiwiZG9uZSIsIiRwb29sIiwiZW5kIiwiX2xpc3RlblRvU2NoZW1hIiwiY29ubmVjdCIsImRpcmVjdCIsIm9uIiwiZGF0YSIsInBheWxvYWQiLCJwYXJzZSIsInNlbmRlcklkIiwibm9uZSIsIl9ub3RpZnlTY2hlbWFDaGFuZ2UiLCJjYXRjaCIsImVycm9yIiwiY29uc29sZSIsIl9lbnN1cmVTY2hlbWFDb2xsZWN0aW9uRXhpc3RzIiwiY29ubiIsImNvZGUiLCJjbGFzc0V4aXN0cyIsIm9uZSIsImEiLCJleGlzdHMiLCJzZXRDbGFzc0xldmVsUGVybWlzc2lvbnMiLCJDTFBzIiwidGFzayIsInQiLCJzZXRJbmRleGVzV2l0aFNjaGVtYUZvcm1hdCIsInN1Ym1pdHRlZEluZGV4ZXMiLCJleGlzdGluZ0luZGV4ZXMiLCJzZWxmIiwiUHJvbWlzZSIsInJlc29sdmUiLCJfaWRfIiwiX2lkIiwiZGVsZXRlZEluZGV4ZXMiLCJpbnNlcnRlZEluZGV4ZXMiLCJJTlZBTElEX1FVRVJZIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidHgiLCJjcmVhdGVJbmRleGVzIiwiZHJvcEluZGV4ZXMiLCJjcmVhdGVDbGFzcyIsInBhcnNlU2NoZW1hIiwiY3JlYXRlVGFibGUiLCJlcnIiLCJkZXRhaWwiLCJEVVBMSUNBVEVfVkFMVUUiLCJ2YWx1ZXNBcnJheSIsInBhdHRlcm5zQXJyYXkiLCJhc3NpZ24iLCJfZW1haWxfdmVyaWZ5X3Rva2VuX2V4cGlyZXNfYXQiLCJfZW1haWxfdmVyaWZ5X3Rva2VuIiwiX2FjY291bnRfbG9ja291dF9leHBpcmVzX2F0IiwiX2ZhaWxlZF9sb2dpbl9jb3VudCIsIl9wZXJpc2hhYmxlX3Rva2VuIiwiX3BlcmlzaGFibGVfdG9rZW5fZXhwaXJlc19hdCIsIl9wYXNzd29yZF9jaGFuZ2VkX2F0IiwicmVsYXRpb25zIiwicGFyc2VUeXBlIiwicXMiLCJiYXRjaCIsImpvaW5UYWJsZSIsInNjaGVtYVVwZ3JhZGUiLCJjb2x1bW5zIiwiY29sdW1uX25hbWUiLCJuZXdDb2x1bW5zIiwiZmlsdGVyIiwiaXRlbSIsImFkZEZpZWxkSWZOb3RFeGlzdHMiLCJwb3N0Z3Jlc1R5cGUiLCJyZXN1bHQiLCJhbnkiLCJwYXRoIiwidXBkYXRlRmllbGRPcHRpb25zIiwiZGVsZXRlQ2xhc3MiLCJvcGVyYXRpb25zIiwicmVzcG9uc2UiLCJoZWxwZXJzIiwidGhlbiIsImRlbGV0ZUFsbENsYXNzZXMiLCJub3ciLCJEYXRlIiwiZ2V0VGltZSIsInJlc3VsdHMiLCJqb2lucyIsInJlZHVjZSIsImNsYXNzZXMiLCJxdWVyaWVzIiwiZGVsZXRlRmllbGRzIiwiZmllbGROYW1lcyIsImlkeCIsImdldEFsbENsYXNzZXMiLCJyb3ciLCJnZXRDbGFzcyIsImNyZWF0ZU9iamVjdCIsInRyYW5zYWN0aW9uYWxTZXNzaW9uIiwiY29sdW1uc0FycmF5IiwiZ2VvUG9pbnRzIiwicHJvdmlkZXIiLCJwb3AiLCJpbml0aWFsVmFsdWVzIiwidmFsIiwidGVybWluYXRpb24iLCJnZW9Qb2ludHNJbmplY3RzIiwibCIsImNvbHVtbnNQYXR0ZXJuIiwiY29sIiwidmFsdWVzUGF0dGVybiIsInByb21pc2UiLCJvcHMiLCJ1bmRlcmx5aW5nRXJyb3IiLCJjb25zdHJhaW50IiwibWF0Y2hlcyIsInVzZXJJbmZvIiwiZHVwbGljYXRlZF9maWVsZCIsImRlbGV0ZU9iamVjdHNCeVF1ZXJ5Iiwid2hlcmUiLCJPQkpFQ1RfTk9UX0ZPVU5EIiwiZmluZE9uZUFuZFVwZGF0ZSIsInVwZGF0ZU9iamVjdHNCeVF1ZXJ5IiwidXBkYXRlUGF0dGVybnMiLCJvcmlnaW5hbFVwZGF0ZSIsImRvdE5vdGF0aW9uT3B0aW9ucyIsImdlbmVyYXRlIiwianNvbmIiLCJsYXN0S2V5IiwiZmllbGROYW1lSW5kZXgiLCJzdHIiLCJhbW91bnQiLCJvYmplY3RzIiwia2V5c1RvSW5jcmVtZW50IiwiayIsImluY3JlbWVudFBhdHRlcm5zIiwiYyIsImtleXNUb0RlbGV0ZSIsImRlbGV0ZVBhdHRlcm5zIiwicCIsInVwZGF0ZU9iamVjdCIsImV4cGVjdGVkVHlwZSIsInJlamVjdCIsIndoZXJlQ2xhdXNlIiwidXBzZXJ0T25lT2JqZWN0IiwiY3JlYXRlVmFsdWUiLCJza2lwIiwibGltaXQiLCJzb3J0IiwiZXhwbGFpbiIsImhhc0xpbWl0IiwiaGFzU2tpcCIsIndoZXJlUGF0dGVybiIsImxpbWl0UGF0dGVybiIsInNraXBQYXR0ZXJuIiwic29ydFBhdHRlcm4iLCJzb3J0Q29weSIsInNvcnRpbmciLCJ0cmFuc2Zvcm1LZXkiLCJtZW1vIiwib3JpZ2luYWxRdWVyeSIsInBvc3RncmVzT2JqZWN0VG9QYXJzZU9iamVjdCIsInRhcmdldENsYXNzIiwieSIsIngiLCJjb29yZHMiLCJwYXJzZUZsb2F0IiwiY3JlYXRlZEF0IiwidG9JU09TdHJpbmciLCJ1cGRhdGVkQXQiLCJleHBpcmVzQXQiLCJlbnN1cmVVbmlxdWVuZXNzIiwiY29uc3RyYWludE5hbWUiLCJjb25zdHJhaW50UGF0dGVybnMiLCJtZXNzYWdlIiwicmVhZFByZWZlcmVuY2UiLCJlc3RpbWF0ZSIsImFwcHJveGltYXRlX3Jvd19jb3VudCIsImRpc3RpbmN0IiwiY29sdW1uIiwiaXNOZXN0ZWQiLCJpc1BvaW50ZXJGaWVsZCIsInRyYW5zZm9ybWVyIiwiY2hpbGQiLCJhZ2dyZWdhdGUiLCJwaXBlbGluZSIsImhpbnQiLCJjb3VudEZpZWxkIiwiZ3JvdXBWYWx1ZXMiLCJncm91cFBhdHRlcm4iLCJzdGFnZSIsIiRncm91cCIsImdyb3VwQnlGaWVsZHMiLCJhbGlhcyIsInNvdXJjZSIsIm9wZXJhdGlvbiIsIiRzdW0iLCIkbWF4IiwiJG1pbiIsIiRhdmciLCIkcHJvamVjdCIsIiRtYXRjaCIsIiRvciIsImNvbGxhcHNlIiwiZWxlbWVudCIsIm1hdGNoUGF0dGVybnMiLCIkbGltaXQiLCIkc2tpcCIsIiRzb3J0Iiwib3JkZXIiLCJlIiwidHJpbSIsIkJvb2xlYW4iLCJwYXJzZUludCIsInBlcmZvcm1Jbml0aWFsaXphdGlvbiIsIlZvbGF0aWxlQ2xhc3Nlc1NjaGVtYXMiLCJwcm9taXNlcyIsIklOVkFMSURfQ0xBU1NfTkFNRSIsImFsbCIsInNxbCIsIm1pc2MiLCJqc29uT2JqZWN0U2V0S2V5cyIsImFycmF5IiwiYWRkIiwiYWRkVW5pcXVlIiwicmVtb3ZlIiwiY29udGFpbnNBbGwiLCJjb250YWluc0FsbFJlZ2V4IiwiY29udGFpbnMiLCJjdHgiLCJkdXJhdGlvbiIsImNyZWF0ZUluZGV4ZXNJZk5lZWRlZCIsImdldEluZGV4ZXMiLCJ1cGRhdGVTY2hlbWFXaXRoSW5kZXhlcyIsInVwZGF0ZUVzdGltYXRlZENvdW50IiwiY3JlYXRlVHJhbnNhY3Rpb25hbFNlc3Npb24iLCJjb21taXRUcmFuc2FjdGlvbmFsU2Vzc2lvbiIsImFib3J0VHJhbnNhY3Rpb25hbFNlc3Npb24iLCJlbnN1cmVJbmRleCIsImluZGV4TmFtZSIsIm9wdGlvbnMiLCJkZWZhdWx0SW5kZXhOYW1lIiwiaW5kZXhOYW1lT3B0aW9ucyIsInVuaXF1ZSIsImFyIiwiZm91bmRJbmRleCIsInB0IiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwiZW5kc1dpdGgiLCJyZXBsYWNlIiwicyIsInN0YXJ0c1dpdGgiLCJsaXRlcmFsaXplUmVnZXhQYXJ0IiwiaXNTdGFydHNXaXRoUmVnZXgiLCJmaXJzdFZhbHVlc0lzUmVnZXgiLCJzb21lIiwiY3JlYXRlTGl0ZXJhbFJlZ2V4IiwicmVtYWluaW5nIiwiUmVnRXhwIiwibWF0Y2hlcjEiLCJyZXN1bHQxIiwicHJlZml4IiwibWF0Y2hlcjIiLCJyZXN1bHQyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBQ0E7O0FBZ0JBOzs7Ozs7Ozs7O0FBZEEsTUFBTUEsaUNBQWlDLEdBQUcsT0FBMUM7QUFDQSxNQUFNQyw4QkFBOEIsR0FBRyxPQUF2QztB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cEIsRUFFSkEsT0FGSSxDQUVJLGNBRkosRUFFb0IsSUFGcEIsRUFHSkEsT0FISSxDQUdJLE1BSEosRUFHWSxFQUhaLEVBSUpBLE9BSkksQ0FJSSxNQUpKLEVBSVksRUFKWixFQUtKQSxPQUxJLENBS0ksU0FMSixFQUtnQixNQUxoQixFQU1KQSxPQU5JLENBTUksVUFOSixFQU1pQixNQU5qQixDQUFQO0FBT0Q7O0FBRUQsSUFBSWxTLGFBQWEsR0FBRztBQUNsQkMsRUFBQUEsV0FBVyxDQUFDekksS0FBRCxFQUFRO0FBQ2pCLFdBQU8sT0FBT0EsS0FBUCxLQUFpQixRQUFqQixJQUE2QkEsS0FBSyxLQUFLLElBQXZDLElBQStDQSxLQUFLLENBQUNDLE1BQU4sS0FBaUIsVUFBdkU7QUFDRDs7QUFIaUIsQ0FBcEI7ZUFNZTRKLHNCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbmltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJy4vUG9zdGdyZXNDbGllbnQnO1xuLy8gQGZsb3ctZGlzYWJsZS1uZXh0XG5pbXBvcnQgUGFyc2UgZnJvbSAncGFyc2Uvbm9kZSc7XG4vLyBAZmxvdy1kaXNhYmxlLW5leHRcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG4vLyBAZmxvdy1kaXNhYmxlLW5leHRcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IHNxbCBmcm9tICcuL3NxbCc7XG5cbmNvbnN0IFBvc3RncmVzUmVsYXRpb25Eb2VzTm90RXhpc3RFcnJvciA9ICc0MlAwMSc7XG5jb25zdCBQb3N0Z3Jlc0R1cGxpY2F0ZVJlbGF0aW9uRXJyb3IgPSAnNDJQMDcnO1xuY29uc3QgUG9zdGdyZXNEdXBsaWNhdGVDb2x1bW5FcnJvciA9ICc0MjcwMSc7XG5jb25zdCBQb3N0Z3Jlc01pc3NpbmdDb2x1bW5FcnJvciA9ICc0MjcwMyc7XG5jb25zdCBQb3N0Z3Jlc0R1cGxpY2F0ZU9iamVjdEVycm9yID0gJzQyNzEwJztcbmNvbnN0IFBvc3RncmVzVW5pcXVlSW5kZXhWaW9sYXRpb25FcnJvciA9ICcyMzUwNSc7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuLi8uLi8uLi9sb2dnZXInKTtcblxuY29uc3QgZGVidWcgPSBmdW5jdGlvbiAoLi4uYXJnczogYW55KSB7XG4gIGFyZ3MgPSBbJ1BHOiAnICsgYXJndW1lbnRzWzBdXS5jb25jYXQoYXJncy5zbGljZSgxLCBhcmdzLmxlbmd0aCkpO1xuICBjb25zdCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCk7XG4gIGxvZy5kZWJ1Zy5hcHBseShsb2csIGFyZ3MpO1xufTtcblxuaW1wb3J0IHsgU3RvcmFnZUFkYXB0ZXIgfSBmcm9tICcuLi9TdG9yYWdlQWRhcHRlcic7XG5pbXBvcnQgdHlwZSB7IFNjaGVtYVR5cGUsIFF1ZXJ5VHlwZSwgUXVlcnlPcHRpb25zIH0gZnJvbSAnLi4vU3RvcmFnZUFkYXB0ZXInO1xuXG5jb25zdCBwYXJzZVR5cGVUb1Bvc3RncmVzVHlwZSA9IHR5cGUgPT4ge1xuICBzd2l0Y2ggKHR5cGUudHlwZSkge1xuICAgIGNhc2UgJ1N0cmluZyc6XG4gICAgICByZXR1cm4gJ3RleHQnO1xuICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgcmV0dXJuICd0aW1lc3RhbXAgd2l0aCB0aW1lIHpvbmUnO1xuICAgIGNhc2UgJ09iamVjdCc6XG4gICAgICByZXR1cm4gJ2pzb25iJztcbiAgICBjYXNlICdGaWxlJzpcbiAgICAgIHJldHVybiAndGV4dCc7XG4gICAgY2FzZSAnQm9vbGVhbic6XG4gICAgICByZXR1cm4gJ2Jvb2xlYW4nO1xuICAgIGNhc2UgJ1BvaW50ZXInOlxuICAgICAgcmV0dXJuICd0ZXh0JztcbiAgICBjYXNlICdOdW1iZXInOlxuICAgICAgcmV0dXJuICdkb3VibGUgcHJlY2lzaW9uJztcbiAgICBjYXNlICdHZW9Qb2ludCc6XG4gICAgICByZXR1cm4gJ3BvaW50JztcbiAgICBjYXNlICdCeXRlcyc6XG4gICAgICByZXR1cm4gJ2pzb25iJztcbiAgICBjYXNlICdQb2x5Z29uJzpcbiAgICAgIHJldHVybiAncG9seWdvbic7XG4gICAgY2FzZSAnQXJyYXknOlxuICAgICAgaWYgKHR5cGUuY29udGVudHMgJiYgdHlwZS5jb250ZW50cy50eXBlID09PSAnU3RyaW5nJykge1xuICAgICAgICByZXR1cm4gJ3RleHRbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ2pzb25iJztcbiAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgYG5vIHR5cGUgZm9yICR7SlNPTi5zdHJpbmdpZnkodHlwZSl9IHlldGA7XG4gIH1cbn07XG5cbmNvbnN0IFBhcnNlVG9Qb3NncmVzQ29tcGFyYXRvciA9IHtcbiAgJGd0OiAnPicsXG4gICRsdDogJzwnLFxuICAkZ3RlOiAnPj0nLFxuICAkbHRlOiAnPD0nLFxufTtcblxuY29uc3QgbW9uZ29BZ2dyZWdhdGVUb1Bvc3RncmVzID0ge1xuICAkZGF5T2ZNb250aDogJ0RBWScsXG4gICRkYXlPZldlZWs6ICdET1cnLFxuICAkZGF5T2ZZZWFyOiAnRE9ZJyxcbiAgJGlzb0RheU9mV2VlazogJ0lTT0RPVycsXG4gICRpc29XZWVrWWVhcjogJ0lTT1lFQVInLFxuICAkaG91cjogJ0hPVVInLFxuICAkbWludXRlOiAnTUlOVVRFJyxcbiAgJHNlY29uZDogJ1NFQ09ORCcsXG4gICRtaWxsaXNlY29uZDogJ01JTExJU0VDT05EUycsXG4gICRtb250aDogJ01PTlRIJyxcbiAgJHdlZWs6ICdXRUVLJyxcbiAgJHllYXI6ICdZRUFSJyxcbn07XG5cbmNvbnN0IHRvUG9zdGdyZXNWYWx1ZSA9IHZhbHVlID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAodmFsdWUuX190eXBlID09PSAnRGF0ZScpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5pc287XG4gICAgfVxuICAgIGlmICh2YWx1ZS5fX3R5cGUgPT09ICdGaWxlJykge1xuICAgICAgcmV0dXJuIHZhbHVlLm5hbWU7XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmNvbnN0IHRyYW5zZm9ybVZhbHVlID0gdmFsdWUgPT4ge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZS5fX3R5cGUgPT09ICdQb2ludGVyJykge1xuICAgIHJldHVybiB2YWx1ZS5vYmplY3RJZDtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59O1xuXG4vLyBEdXBsaWNhdGUgZnJvbSB0aGVuIG1vbmdvIGFkYXB0ZXIuLi5cbmNvbnN0IGVtcHR5Q0xQUyA9IE9iamVjdC5mcmVlemUoe1xuICBmaW5kOiB7fSxcbiAgZ2V0OiB7fSxcbiAgY291bnQ6IHt9LFxuICBjcmVhdGU6IHt9LFxuICB1cGRhdGU6IHt9LFxuICBkZWxldGU6IHt9LFxuICBhZGRGaWVsZDoge30sXG4gIHByb3RlY3RlZEZpZWxkczoge30sXG59KTtcblxuY29uc3QgZGVmYXVsdENMUFMgPSBPYmplY3QuZnJlZXplKHtcbiAgZmluZDogeyAnKic6IHRydWUgfSxcbiAgZ2V0OiB7ICcqJzogdHJ1ZSB9LFxuICBjb3VudDogeyAnKic6IHRydWUgfSxcbiAgY3JlYXRlOiB7ICcqJzogdHJ1ZSB9LFxuICB1cGRhdGU6IHsgJyonOiB0cnVlIH0sXG4gIGRlbGV0ZTogeyAnKic6IHRydWUgfSxcbiAgYWRkRmllbGQ6IHsgJyonOiB0cnVlIH0sXG4gIHByb3RlY3RlZEZpZWxkczogeyAnKic6IFtdIH0sXG59KTtcblxuY29uc3QgdG9QYXJzZVNjaGVtYSA9IHNjaGVtYSA9PiB7XG4gIGlmIChzY2hlbWEuY2xhc3NOYW1lID09PSAnX1VzZXInKSB7XG4gICAgZGVsZXRlIHNjaGVtYS5maWVsZHMuX2hhc2hlZF9wYXNzd29yZDtcbiAgfVxuICBpZiAoc2NoZW1hLmZpZWxkcykge1xuICAgIGRlbGV0ZSBzY2hlbWEuZmllbGRzLl93cGVybTtcbiAgICBkZWxldGUgc2NoZW1hLmZpZWxkcy5fcnBlcm07XG4gIH1cbiAgbGV0IGNscHMgPSBkZWZhdWx0Q0xQUztcbiAgaWYgKHNjaGVtYS5jbGFzc0xldmVsUGVybWlzc2lvbnMpIHtcbiAgICBjbHBzID0geyAuLi5lbXB0eUNMUFMsIC4uLnNjaGVtYS5jbGFzc0xldmVsUGVybWlzc2lvbnMgfTtcbiAgfVxuICBsZXQgaW5kZXhlcyA9IHt9O1xuICBpZiAoc2NoZW1hLmluZGV4ZXMpIHtcbiAgICBpbmRleGVzID0geyAuLi5zY2hlbWEuaW5kZXhlcyB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgY2xhc3NOYW1lOiBzY2hlbWEuY2xhc3NOYW1lLFxuICAgIGZpZWxkczogc2NoZW1hLmZpZWxkcyxcbiAgICBjbGFzc0xldmVsUGVybWlzc2lvbnM6IGNscHMsXG4gICAgaW5kZXhlcyxcbiAgfTtcbn07XG5cbmNvbnN0IHRvUG9zdGdyZXNTY2hlbWEgPSBzY2hlbWEgPT4ge1xuICBpZiAoIXNjaGVtYSkge1xuICAgIHJldHVybiBzY2hlbWE7XG4gIH1cbiAgc2NoZW1hLmZpZWxkcyA9IHNjaGVtYS5maWVsZHMgfHwge307XG4gIHNjaGVtYS5maWVsZHMuX3dwZXJtID0geyB0eXBlOiAnQXJyYXknLCBjb250ZW50czogeyB0eXBlOiAnU3RyaW5nJyB9IH07XG4gIHNjaGVtYS5maWVsZHMuX3JwZXJtID0geyB0eXBlOiAnQXJyYXknLCBjb250ZW50czogeyB0eXBlOiAnU3RyaW5nJyB9IH07XG4gIGlmIChzY2hlbWEuY2xhc3NOYW1lID09PSAnX1VzZXInKSB7XG4gICAgc2NoZW1hLmZpZWxkcy5faGFzaGVkX3Bhc3N3b3JkID0geyB0eXBlOiAnU3RyaW5nJyB9O1xuICAgIHNjaGVtYS5maWVsZHMuX3Bhc3N3b3JkX2hpc3RvcnkgPSB7IHR5cGU6ICdBcnJheScgfTtcbiAgfVxuICByZXR1cm4gc2NoZW1hO1xufTtcblxuY29uc3QgaGFuZGxlRG90RmllbGRzID0gb2JqZWN0ID0+IHtcbiAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKGZpZWxkTmFtZSA9PiB7XG4gICAgaWYgKGZpZWxkTmFtZS5pbmRleE9mKCcuJykgPiAtMSkge1xuICAgICAgY29uc3QgY29tcG9uZW50cyA9IGZpZWxkTmFtZS5zcGxpdCgnLicpO1xuICAgICAgY29uc3QgZmlyc3QgPSBjb21wb25lbnRzLnNoaWZ0KCk7XG4gICAgICBvYmplY3RbZmlyc3RdID0gb2JqZWN0W2ZpcnN0XSB8fCB7fTtcbiAgICAgIGxldCBjdXJyZW50T2JqID0gb2JqZWN0W2ZpcnN0XTtcbiAgICAgIGxldCBuZXh0O1xuICAgICAgbGV0IHZhbHVlID0gb2JqZWN0W2ZpZWxkTmFtZV07XG4gICAgICBpZiAodmFsdWUgJiYgdmFsdWUuX19vcCA9PT0gJ0RlbGV0ZScpIHtcbiAgICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuICAgICAgd2hpbGUgKChuZXh0ID0gY29tcG9uZW50cy5zaGlmdCgpKSkge1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG4gICAgICAgIGN1cnJlbnRPYmpbbmV4dF0gPSBjdXJyZW50T2JqW25leHRdIHx8IHt9O1xuICAgICAgICBpZiAoY29tcG9uZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBjdXJyZW50T2JqW25leHRdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudE9iaiA9IGN1cnJlbnRPYmpbbmV4dF07XG4gICAgICB9XG4gICAgICBkZWxldGUgb2JqZWN0W2ZpZWxkTmFtZV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cbmNvbnN0IHRyYW5zZm9ybURvdEZpZWxkVG9Db21wb25lbnRzID0gZmllbGROYW1lID0+IHtcbiAgcmV0dXJuIGZpZWxkTmFtZS5zcGxpdCgnLicpLm1hcCgoY21wdCwgaW5kZXgpID0+IHtcbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgIHJldHVybiBgXCIke2NtcHR9XCJgO1xuICAgIH1cbiAgICByZXR1cm4gYCcke2NtcHR9J2A7XG4gIH0pO1xufTtcblxuY29uc3QgdHJhbnNmb3JtRG90RmllbGQgPSBmaWVsZE5hbWUgPT4ge1xuICBpZiAoZmllbGROYW1lLmluZGV4T2YoJy4nKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gYFwiJHtmaWVsZE5hbWV9XCJgO1xuICB9XG4gIGNvbnN0IGNvbXBvbmVudHMgPSB0cmFuc2Zvcm1Eb3RGaWVsZFRvQ29tcG9uZW50cyhmaWVsZE5hbWUpO1xuICBsZXQgbmFtZSA9IGNvbXBvbmVudHMuc2xpY2UoMCwgY29tcG9uZW50cy5sZW5ndGggLSAxKS5qb2luKCctPicpO1xuICBuYW1lICs9ICctPj4nICsgY29tcG9uZW50c1tjb21wb25lbnRzLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gbmFtZTtcbn07XG5cbmNvbnN0IHRyYW5zZm9ybUFnZ3JlZ2F0ZUZpZWxkID0gZmllbGROYW1lID0+IHtcbiAgaWYgKHR5cGVvZiBmaWVsZE5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZpZWxkTmFtZTtcbiAgfVxuICBpZiAoZmllbGROYW1lID09PSAnJF9jcmVhdGVkX2F0Jykge1xuICAgIHJldHVybiAnY3JlYXRlZEF0JztcbiAgfVxuICBpZiAoZmllbGROYW1lID09PSAnJF91cGRhdGVkX2F0Jykge1xuICAgIHJldHVybiAndXBkYXRlZEF0JztcbiAgfVxuICByZXR1cm4gZmllbGROYW1lLnN1YnN0cigxKTtcbn07XG5cbmNvbnN0IHZhbGlkYXRlS2V5cyA9IG9iamVjdCA9PiB7XG4gIGlmICh0eXBlb2Ygb2JqZWN0ID09ICdvYmplY3QnKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBpZiAodHlwZW9mIG9iamVjdFtrZXldID09ICdvYmplY3QnKSB7XG4gICAgICAgIHZhbGlkYXRlS2V5cyhvYmplY3Rba2V5XSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkuaW5jbHVkZXMoJyQnKSB8fCBrZXkuaW5jbHVkZXMoJy4nKSkge1xuICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICAgICAgUGFyc2UuRXJyb3IuSU5WQUxJRF9ORVNURURfS0VZLFxuICAgICAgICAgIFwiTmVzdGVkIGtleXMgc2hvdWxkIG5vdCBjb250YWluIHRoZSAnJCcgb3IgJy4nIGNoYXJhY3RlcnNcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLy8gUmV0dXJucyB0aGUgbGlzdCBvZiBqb2luIHRhYmxlcyBvbiBhIHNjaGVtYVxuY29uc3Qgam9pblRhYmxlc0ZvclNjaGVtYSA9IHNjaGVtYSA9PiB7XG4gIGNvbnN0IGxpc3QgPSBbXTtcbiAgaWYgKHNjaGVtYSkge1xuICAgIE9iamVjdC5rZXlzKHNjaGVtYS5maWVsZHMpLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgaWYgKHNjaGVtYS5maWVsZHNbZmllbGRdLnR5cGUgPT09ICdSZWxhdGlvbicpIHtcbiAgICAgICAgbGlzdC5wdXNoKGBfSm9pbjoke2ZpZWxkfToke3NjaGVtYS5jbGFzc05hbWV9YCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5pbnRlcmZhY2UgV2hlcmVDbGF1c2Uge1xuICBwYXR0ZXJuOiBzdHJpbmc7XG4gIHZhbHVlczogQXJyYXk8YW55PjtcbiAgc29ydHM6IEFycmF5PGFueT47XG59XG5cbmNvbnN0IGJ1aWxkV2hlcmVDbGF1c2UgPSAoeyBzY2hlbWEsIHF1ZXJ5LCBpbmRleCwgY2FzZUluc2Vuc2l0aXZlIH0pOiBXaGVyZUNsYXVzZSA9PiB7XG4gIGNvbnN0IHBhdHRlcm5zID0gW107XG4gIGxldCB2YWx1ZXMgPSBbXTtcbiAgY29uc3Qgc29ydHMgPSBbXTtcblxuICBzY2hlbWEgPSB0b1Bvc3RncmVzU2NoZW1hKHNjaGVtYSk7XG4gIGZvciAoY29uc3QgZmllbGROYW1lIGluIHF1ZXJ5KSB7XG4gICAgY29uc3QgaXNBcnJheUZpZWxkID1cbiAgICAgIHNjaGVtYS5maWVsZHMgJiYgc2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdICYmIHNjaGVtYS5maWVsZHNbZmllbGROYW1lXS50eXBlID09PSAnQXJyYXknO1xuICAgIGNvbnN0IGluaXRpYWxQYXR0ZXJuc0xlbmd0aCA9IHBhdHRlcm5zLmxlbmd0aDtcbiAgICBjb25zdCBmaWVsZFZhbHVlID0gcXVlcnlbZmllbGROYW1lXTtcblxuICAgIC8vIG5vdGhpbmcgaW4gdGhlIHNjaGVtYSwgaXQncyBnb25uYSBibG93IHVwXG4gICAgaWYgKCFzY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0pIHtcbiAgICAgIC8vIGFzIGl0IHdvbid0IGV4aXN0XG4gICAgICBpZiAoZmllbGRWYWx1ZSAmJiBmaWVsZFZhbHVlLiRleGlzdHMgPT09IGZhbHNlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGF1dGhEYXRhTWF0Y2ggPSBmaWVsZE5hbWUubWF0Y2goL15fYXV0aF9kYXRhXyhbYS16QS1aMC05X10rKSQvKTtcbiAgICBpZiAoYXV0aERhdGFNYXRjaCkge1xuICAgICAgLy8gVE9ETzogSGFuZGxlIHF1ZXJ5aW5nIGJ5IF9hdXRoX2RhdGFfcHJvdmlkZXIsIGF1dGhEYXRhIGlzIHN0b3JlZCBpbiBhdXRoRGF0YSBmaWVsZFxuICAgICAgY29udGludWU7XG4gICAgfSBlbHNlIGlmIChjYXNlSW5zZW5zaXRpdmUgJiYgKGZpZWxkTmFtZSA9PT0gJ3VzZXJuYW1lJyB8fCBmaWVsZE5hbWUgPT09ICdlbWFpbCcpKSB7XG4gICAgICBwYXR0ZXJucy5wdXNoKGBMT1dFUigkJHtpbmRleH06bmFtZSkgPSBMT1dFUigkJHtpbmRleCArIDF9KWApO1xuICAgICAgdmFsdWVzLnB1c2goZmllbGROYW1lLCBmaWVsZFZhbHVlKTtcbiAgICAgIGluZGV4ICs9IDI7XG4gICAgfSBlbHNlIGlmIChmaWVsZE5hbWUuaW5kZXhPZignLicpID49IDApIHtcbiAgICAgIGxldCBuYW1lID0gdHJhbnNmb3JtRG90RmllbGQoZmllbGROYW1lKTtcbiAgICAgIGlmIChmaWVsZFZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHBhdHRlcm5zLnB1c2goYCQke2luZGV4fTpyYXcgSVMgTlVMTGApO1xuICAgICAgICB2YWx1ZXMucHVzaChuYW1lKTtcbiAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZmllbGRWYWx1ZS4kaW4pIHtcbiAgICAgICAgICBuYW1lID0gdHJhbnNmb3JtRG90RmllbGRUb0NvbXBvbmVudHMoZmllbGROYW1lKS5qb2luKCctPicpO1xuICAgICAgICAgIHBhdHRlcm5zLnB1c2goYCgkJHtpbmRleH06cmF3KTo6anNvbmIgQD4gJCR7aW5kZXggKyAxfTo6anNvbmJgKTtcbiAgICAgICAgICB2YWx1ZXMucHVzaChuYW1lLCBKU09OLnN0cmluZ2lmeShmaWVsZFZhbHVlLiRpbikpO1xuICAgICAgICAgIGluZGV4ICs9IDI7XG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGRWYWx1ZS4kcmVnZXgpIHtcbiAgICAgICAgICAvLyBIYW5kbGUgbGF0ZXJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZmllbGRWYWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBwYXR0ZXJucy5wdXNoKGAkJHtpbmRleH06cmF3ID0gJCR7aW5kZXggKyAxfTo6dGV4dGApO1xuICAgICAgICAgIHZhbHVlcy5wdXNoKG5hbWUsIGZpZWxkVmFsdWUpO1xuICAgICAgICAgIGluZGV4ICs9IDI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGZpZWxkVmFsdWUgPT09IG51bGwgfHwgZmllbGRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXR0ZXJucy5wdXNoKGAkJHtpbmRleH06bmFtZSBJUyBOVUxMYCk7XG4gICAgICB2YWx1ZXMucHVzaChmaWVsZE5hbWUpO1xuICAgICAgaW5kZXggKz0gMTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGZpZWxkVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBwYXR0ZXJucy5wdXNoKGAkJHtpbmRleH06bmFtZSA9ICQke2luZGV4ICsgMX1gKTtcbiAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSwgZmllbGRWYWx1ZSk7XG4gICAgICBpbmRleCArPSAyO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGZpZWxkVmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgcGF0dGVybnMucHVzaChgJCR7aW5kZXh9Om5hbWUgPSAkJHtpbmRleCArIDF9YCk7XG4gICAgICAvLyBDYW4ndCBjYXN0IGJvb2xlYW4gdG8gZG91YmxlIHByZWNpc2lvblxuICAgICAgaWYgKHNjaGVtYS5maWVsZHNbZmllbGROYW1lXSAmJiBzY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0udHlwZSA9PT0gJ051bWJlcicpIHtcbiAgICAgICAgLy8gU2hvdWxkIGFsd2F5cyByZXR1cm4gemVybyByZXN1bHRzXG4gICAgICAgIGNvbnN0IE1BWF9JTlRfUExVU19PTkUgPSA5MjIzMzcyMDM2ODU0Nzc1ODA4O1xuICAgICAgICB2YWx1ZXMucHVzaChmaWVsZE5hbWUsIE1BWF9JTlRfUExVU19PTkUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVzLnB1c2goZmllbGROYW1lLCBmaWVsZFZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGluZGV4ICs9IDI7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZmllbGRWYWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHBhdHRlcm5zLnB1c2goYCQke2luZGV4fTpuYW1lID0gJCR7aW5kZXggKyAxfWApO1xuICAgICAgdmFsdWVzLnB1c2goZmllbGROYW1lLCBmaWVsZFZhbHVlKTtcbiAgICAgIGluZGV4ICs9IDI7XG4gICAgfSBlbHNlIGlmIChbJyRvcicsICckbm9yJywgJyRhbmQnXS5pbmNsdWRlcyhmaWVsZE5hbWUpKSB7XG4gICAgICBjb25zdCBjbGF1c2VzID0gW107XG4gICAgICBjb25zdCBjbGF1c2VWYWx1ZXMgPSBbXTtcbiAgICAgIGZpZWxkVmFsdWUuZm9yRWFjaChzdWJRdWVyeSA9PiB7XG4gICAgICAgIGNvbnN0IGNsYXVzZSA9IGJ1aWxkV2hlcmVDbGF1c2Uoe1xuICAgICAgICAgIHNjaGVtYSxcbiAgICAgICAgICBxdWVyeTogc3ViUXVlcnksXG4gICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgY2FzZUluc2Vuc2l0aXZlLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGNsYXVzZS5wYXR0ZXJuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjbGF1c2VzLnB1c2goY2xhdXNlLnBhdHRlcm4pO1xuICAgICAgICAgIGNsYXVzZVZhbHVlcy5wdXNoKC4uLmNsYXVzZS52YWx1ZXMpO1xuICAgICAgICAgIGluZGV4ICs9IGNsYXVzZS52YWx1ZXMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgb3JPckFuZCA9IGZpZWxkTmFtZSA9PT0gJyRhbmQnID8gJyBBTkQgJyA6ICcgT1IgJztcbiAgICAgIGNvbnN0IG5vdCA9IGZpZWxkTmFtZSA9PT0gJyRub3InID8gJyBOT1QgJyA6ICcnO1xuXG4gICAgICBwYXR0ZXJucy5wdXNoKGAke25vdH0oJHtjbGF1c2VzLmpvaW4ob3JPckFuZCl9KWApO1xuICAgICAgdmFsdWVzLnB1c2goLi4uY2xhdXNlVmFsdWVzKTtcbiAgICB9XG5cbiAgICBpZiAoZmllbGRWYWx1ZS4kbmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGlzQXJyYXlGaWVsZCkge1xuICAgICAgICBmaWVsZFZhbHVlLiRuZSA9IEpTT04uc3RyaW5naWZ5KFtmaWVsZFZhbHVlLiRuZV0pO1xuICAgICAgICBwYXR0ZXJucy5wdXNoKGBOT1QgYXJyYXlfY29udGFpbnMoJCR7aW5kZXh9Om5hbWUsICQke2luZGV4ICsgMX0pYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZmllbGRWYWx1ZS4kbmUgPT09IG51bGwpIHtcbiAgICAgICAgICBwYXR0ZXJucy5wdXNoKGAkJHtpbmRleH06bmFtZSBJUyBOT1QgTlVMTGApO1xuICAgICAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSk7XG4gICAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBpZiBub3QgbnVsbCwgd2UgbmVlZCB0byBtYW51YWxseSBleGNsdWRlIG51bGxcbiAgICAgICAgICBpZiAoZmllbGRWYWx1ZS4kbmUuX190eXBlID09PSAnR2VvUG9pbnQnKSB7XG4gICAgICAgICAgICBwYXR0ZXJucy5wdXNoKFxuICAgICAgICAgICAgICBgKCQke2luZGV4fTpuYW1lIDw+IFBPSU5UKCQke2luZGV4ICsgMX0sICQke2luZGV4ICsgMn0pIE9SICQke2luZGV4fTpuYW1lIElTIE5VTEwpYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZpZWxkTmFtZS5pbmRleE9mKCcuJykgPj0gMCkge1xuICAgICAgICAgICAgICBjb25zdCBjb25zdHJhaW50RmllbGROYW1lID0gdHJhbnNmb3JtRG90RmllbGQoZmllbGROYW1lKTtcbiAgICAgICAgICAgICAgcGF0dGVybnMucHVzaChcbiAgICAgICAgICAgICAgICBgKCR7Y29uc3RyYWludEZpZWxkTmFtZX0gPD4gJCR7aW5kZXh9IE9SICR7Y29uc3RyYWludEZpZWxkTmFtZX0gSVMgTlVMTClgXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXR0ZXJucy5wdXNoKGAoJCR7aW5kZXh9Om5hbWUgPD4gJCR7aW5kZXggKyAxfSBPUiAkJHtpbmRleH06bmFtZSBJUyBOVUxMKWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZpZWxkVmFsdWUuJG5lLl9fdHlwZSA9PT0gJ0dlb1BvaW50Jykge1xuICAgICAgICBjb25zdCBwb2ludCA9IGZpZWxkVmFsdWUuJG5lO1xuICAgICAgICB2YWx1ZXMucHVzaChmaWVsZE5hbWUsIHBvaW50LmxvbmdpdHVkZSwgcG9pbnQubGF0aXR1ZGUpO1xuICAgICAgICBpbmRleCArPSAzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVE9ETzogc3VwcG9ydCBhcnJheXNcbiAgICAgICAgdmFsdWVzLnB1c2goZmllbGROYW1lLCBmaWVsZFZhbHVlLiRuZSk7XG4gICAgICAgIGluZGV4ICs9IDI7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmaWVsZFZhbHVlLiRlcSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoZmllbGRWYWx1ZS4kZXEgPT09IG51bGwpIHtcbiAgICAgICAgcGF0dGVybnMucHVzaChgJCR7aW5kZXh9Om5hbWUgSVMgTlVMTGApO1xuICAgICAgICB2YWx1ZXMucHVzaChmaWVsZE5hbWUpO1xuICAgICAgICBpbmRleCArPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZpZWxkTmFtZS5pbmRleE9mKCcuJykgPj0gMCkge1xuICAgICAgICAgIHZhbHVlcy5wdXNoKGZpZWxkVmFsdWUuJGVxKTtcbiAgICAgICAgICBwYXR0ZXJucy5wdXNoKGAke3RyYW5zZm9ybURvdEZpZWxkKGZpZWxkTmFtZSl9ID0gJCR7aW5kZXgrK31gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZXMucHVzaChmaWVsZE5hbWUsIGZpZWxkVmFsdWUuJGVxKTtcbiAgICAgICAgICBwYXR0ZXJucy5wdXNoKGAkJHtpbmRleH06bmFtZSA9ICQke2luZGV4ICsgMX1gKTtcbiAgICAgICAgICBpbmRleCArPSAyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGlzSW5Pck5pbiA9IEFycmF5LmlzQXJyYXkoZmllbGRWYWx1ZS4kaW4pIHx8IEFycmF5LmlzQXJyYXkoZmllbGRWYWx1ZS4kbmluKTtcbiAgICBpZiAoXG4gICAgICBBcnJheS5pc0FycmF5KGZpZWxkVmFsdWUuJGluKSAmJlxuICAgICAgaXNBcnJheUZpZWxkICYmXG4gICAgICBzY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0uY29udGVudHMgJiZcbiAgICAgIHNjaGVtYS5maWVsZHNbZmllbGROYW1lXS5jb250ZW50cy50eXBlID09PSAnU3RyaW5nJ1xuICAgICkge1xuICAgICAgY29uc3QgaW5QYXR0ZXJucyA9IFtdO1xuICAgICAgbGV0IGFsbG93TnVsbCA9IGZhbHNlO1xuICAgICAgdmFsdWVzLnB1c2goZmllbGROYW1lKTtcbiAgICAgIGZpZWxkVmFsdWUuJGluLmZvckVhY2goKGxpc3RFbGVtLCBsaXN0SW5kZXgpID0+IHtcbiAgICAgICAgaWYgKGxpc3RFbGVtID09PSBudWxsKSB7XG4gICAgICAgICAgYWxsb3dOdWxsID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZXMucHVzaChsaXN0RWxlbSk7XG4gICAgICAgICAgaW5QYXR0ZXJucy5wdXNoKGAkJHtpbmRleCArIDEgKyBsaXN0SW5kZXggLSAoYWxsb3dOdWxsID8gMSA6IDApfWApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChhbGxvd051bGwpIHtcbiAgICAgICAgcGF0dGVybnMucHVzaChgKCQke2luZGV4fTpuYW1lIElTIE5VTEwgT1IgJCR7aW5kZXh9Om5hbWUgJiYgQVJSQVlbJHtpblBhdHRlcm5zLmpvaW4oKX1dKWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGF0dGVybnMucHVzaChgJCR7aW5kZXh9Om5hbWUgJiYgQVJSQVlbJHtpblBhdHRlcm5zLmpvaW4oKX1dYCk7XG4gICAgICB9XG4gICAgICBpbmRleCA9IGluZGV4ICsgMSArIGluUGF0dGVybnMubGVuZ3RoO1xuICAgIH0gZWxzZSBpZiAoaXNJbk9yTmluKSB7XG4gICAgICB2YXIgY3JlYXRlQ29uc3RyYWludCA9IChiYXNlQXJyYXksIG5vdEluKSA9PiB7XG4gICAgICAgIGNvbnN0IG5vdCA9IG5vdEluID8gJyBOT1QgJyA6ICcnO1xuICAgICAgICBpZiAoYmFzZUFycmF5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAoaXNBcnJheUZpZWxkKSB7XG4gICAgICAgICAgICBwYXR0ZXJucy5wdXNoKGAke25vdH0gYXJyYXlfY29udGFpbnMoJCR7aW5kZXh9Om5hbWUsICQke2luZGV4ICsgMX0pYCk7XG4gICAgICAgICAgICB2YWx1ZXMucHVzaChmaWVsZE5hbWUsIEpTT04uc3RyaW5naWZ5KGJhc2VBcnJheSkpO1xuICAgICAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSGFuZGxlIE5lc3RlZCBEb3QgTm90YXRpb24gQWJvdmVcbiAgICAgICAgICAgIGlmIChmaWVsZE5hbWUuaW5kZXhPZignLicpID49IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaW5QYXR0ZXJucyA9IFtdO1xuICAgICAgICAgICAgdmFsdWVzLnB1c2goZmllbGROYW1lKTtcbiAgICAgICAgICAgIGJhc2VBcnJheS5mb3JFYWNoKChsaXN0RWxlbSwgbGlzdEluZGV4KSA9PiB7XG4gICAgICAgICAgICAgIGlmIChsaXN0RWxlbSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2gobGlzdEVsZW0pO1xuICAgICAgICAgICAgICAgIGluUGF0dGVybnMucHVzaChgJCR7aW5kZXggKyAxICsgbGlzdEluZGV4fWApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBhdHRlcm5zLnB1c2goYCQke2luZGV4fTpuYW1lICR7bm90fSBJTiAoJHtpblBhdHRlcm5zLmpvaW4oKX0pYCk7XG4gICAgICAgICAgICBpbmRleCA9IGluZGV4ICsgMSArIGluUGF0dGVybnMubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghbm90SW4pIHtcbiAgICAgICAgICB2YWx1ZXMucHVzaChmaWVsZE5hbWUpO1xuICAgICAgICAgIHBhdHRlcm5zLnB1c2goYCQke2luZGV4fTpuYW1lIElTIE5VTExgKTtcbiAgICAgICAgICBpbmRleCA9IGluZGV4ICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBIYW5kbGUgZW1wdHkgYXJyYXlcbiAgICAgICAgICBpZiAobm90SW4pIHtcbiAgICAgICAgICAgIHBhdHRlcm5zLnB1c2goJzEgPSAxJyk7IC8vIFJldHVybiBhbGwgdmFsdWVzXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhdHRlcm5zLnB1c2goJzEgPSAyJyk7IC8vIFJldHVybiBubyB2YWx1ZXNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBpZiAoZmllbGRWYWx1ZS4kaW4pIHtcbiAgICAgICAgY3JlYXRlQ29uc3RyYWludChcbiAgICAgICAgICBfLmZsYXRNYXAoZmllbGRWYWx1ZS4kaW4sIGVsdCA9PiBlbHQpLFxuICAgICAgICAgIGZhbHNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoZmllbGRWYWx1ZS4kbmluKSB7XG4gICAgICAgIGNyZWF0ZUNvbnN0cmFpbnQoXG4gICAgICAgICAgXy5mbGF0TWFwKGZpZWxkVmFsdWUuJG5pbiwgZWx0ID0+IGVsdCksXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGZpZWxkVmFsdWUuJGluICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLklOVkFMSURfSlNPTiwgJ2JhZCAkaW4gdmFsdWUnKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBmaWVsZFZhbHVlLiRuaW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuSU5WQUxJRF9KU09OLCAnYmFkICRuaW4gdmFsdWUnKTtcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShmaWVsZFZhbHVlLiRhbGwpICYmIGlzQXJyYXlGaWVsZCkge1xuICAgICAgaWYgKGlzQW55VmFsdWVSZWdleFN0YXJ0c1dpdGgoZmllbGRWYWx1ZS4kYWxsKSkge1xuICAgICAgICBpZiAoIWlzQWxsVmFsdWVzUmVnZXhPck5vbmUoZmllbGRWYWx1ZS4kYWxsKSkge1xuICAgICAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgICAgIFBhcnNlLkVycm9yLklOVkFMSURfSlNPTixcbiAgICAgICAgICAgICdBbGwgJGFsbCB2YWx1ZXMgbXVzdCBiZSBvZiByZWdleCB0eXBlIG9yIG5vbmU6ICcgKyBmaWVsZFZhbHVlLiRhbGxcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZFZhbHVlLiRhbGwubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHByb2Nlc3NSZWdleFBhdHRlcm4oZmllbGRWYWx1ZS4kYWxsW2ldLiRyZWdleCk7XG4gICAgICAgICAgZmllbGRWYWx1ZS4kYWxsW2ldID0gdmFsdWUuc3Vic3RyaW5nKDEpICsgJyUnO1xuICAgICAgICB9XG4gICAgICAgIHBhdHRlcm5zLnB1c2goYGFycmF5X2NvbnRhaW5zX2FsbF9yZWdleCgkJHtpbmRleH06bmFtZSwgJCR7aW5kZXggKyAxfTo6anNvbmIpYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXR0ZXJucy5wdXNoKGBhcnJheV9jb250YWluc19hbGwoJCR7aW5kZXh9Om5hbWUsICQke2luZGV4ICsgMX06Ompzb25iKWApO1xuICAgICAgfVxuICAgICAgdmFsdWVzLnB1c2goZmllbGROYW1lLCBKU09OLnN0cmluZ2lmeShmaWVsZFZhbHVlLiRhbGwpKTtcbiAgICAgIGluZGV4ICs9IDI7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGZpZWxkVmFsdWUuJGFsbCkpIHtcbiAgICAgIGlmIChmaWVsZFZhbHVlLiRhbGwubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHBhdHRlcm5zLnB1c2goYCQke2luZGV4fTpuYW1lID0gJCR7aW5kZXggKyAxfWApO1xuICAgICAgICB2YWx1ZXMucHVzaChmaWVsZE5hbWUsIGZpZWxkVmFsdWUuJGFsbFswXS5vYmplY3RJZCk7XG4gICAgICAgIGluZGV4ICs9IDI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBmaWVsZFZhbHVlLiRleGlzdHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAoZmllbGRWYWx1ZS4kZXhpc3RzKSB7XG4gICAgICAgIHBhdHRlcm5zLnB1c2goYCQke2luZGV4fTpuYW1lIElTIE5PVCBOVUxMYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXR0ZXJucy5wdXNoKGAkJHtpbmRleH06bmFtZSBJUyBOVUxMYCk7XG4gICAgICB9XG4gICAgICB2YWx1ZXMucHVzaChmaWVsZE5hbWUpO1xuICAgICAgaW5kZXggKz0gMTtcbiAgICB9XG5cbiAgICBpZiAoZmllbGRWYWx1ZS4kY29udGFpbmVkQnkpIHtcbiAgICAgIGNvbnN0IGFyciA9IGZpZWxkVmFsdWUuJGNvbnRhaW5lZEJ5O1xuICAgICAgaWYgKCEoYXJyIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5JTlZBTElEX0pTT04sIGBiYWQgJGNvbnRhaW5lZEJ5OiBzaG91bGQgYmUgYW4gYXJyYXlgKTtcbiAgICAgIH1cblxuICAgICAgcGF0dGVybnMucHVzaChgJCR7aW5kZXh9Om5hbWUgPEAgJCR7aW5kZXggKyAxfTo6anNvbmJgKTtcbiAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSwgSlNPTi5zdHJpbmdpZnkoYXJyKSk7XG4gICAgICBpbmRleCArPSAyO1xuICAgIH1cblxuICAgIGlmIChmaWVsZFZhbHVlLiR0ZXh0KSB7XG4gICAgICBjb25zdCBzZWFyY2ggPSBmaWVsZFZhbHVlLiR0ZXh0LiRzZWFyY2g7XG4gICAgICBsZXQgbGFuZ3VhZ2UgPSAnZW5nbGlzaCc7XG4gICAgICBpZiAodHlwZW9mIHNlYXJjaCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLklOVkFMSURfSlNPTiwgYGJhZCAkdGV4dDogJHNlYXJjaCwgc2hvdWxkIGJlIG9iamVjdGApO1xuICAgICAgfVxuICAgICAgaWYgKCFzZWFyY2guJHRlcm0gfHwgdHlwZW9mIHNlYXJjaC4kdGVybSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLklOVkFMSURfSlNPTiwgYGJhZCAkdGV4dDogJHRlcm0sIHNob3VsZCBiZSBzdHJpbmdgKTtcbiAgICAgIH1cbiAgICAgIGlmIChzZWFyY2guJGxhbmd1YWdlICYmIHR5cGVvZiBzZWFyY2guJGxhbmd1YWdlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuSU5WQUxJRF9KU09OLCBgYmFkICR0ZXh0OiAkbGFuZ3VhZ2UsIHNob3VsZCBiZSBzdHJpbmdgKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VhcmNoLiRsYW5ndWFnZSkge1xuICAgICAgICBsYW5ndWFnZSA9IHNlYXJjaC4kbGFuZ3VhZ2U7XG4gICAgICB9XG4gICAgICBpZiAoc2VhcmNoLiRjYXNlU2Vuc2l0aXZlICYmIHR5cGVvZiBzZWFyY2guJGNhc2VTZW5zaXRpdmUgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICAgICAgUGFyc2UuRXJyb3IuSU5WQUxJRF9KU09OLFxuICAgICAgICAgIGBiYWQgJHRleHQ6ICRjYXNlU2Vuc2l0aXZlLCBzaG91bGQgYmUgYm9vbGVhbmBcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VhcmNoLiRjYXNlU2Vuc2l0aXZlKSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgICBQYXJzZS5FcnJvci5JTlZBTElEX0pTT04sXG4gICAgICAgICAgYGJhZCAkdGV4dDogJGNhc2VTZW5zaXRpdmUgbm90IHN1cHBvcnRlZCwgcGxlYXNlIHVzZSAkcmVnZXggb3IgY3JlYXRlIGEgc2VwYXJhdGUgbG93ZXIgY2FzZSBjb2x1bW4uYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHNlYXJjaC4kZGlhY3JpdGljU2Vuc2l0aXZlICYmIHR5cGVvZiBzZWFyY2guJGRpYWNyaXRpY1NlbnNpdGl2ZSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgICBQYXJzZS5FcnJvci5JTlZBTElEX0pTT04sXG4gICAgICAgICAgYGJhZCAkdGV4dDogJGRpYWNyaXRpY1NlbnNpdGl2ZSwgc2hvdWxkIGJlIGJvb2xlYW5gXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKHNlYXJjaC4kZGlhY3JpdGljU2Vuc2l0aXZlID09PSBmYWxzZSkge1xuICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICAgICAgUGFyc2UuRXJyb3IuSU5WQUxJRF9KU09OLFxuICAgICAgICAgIGBiYWQgJHRleHQ6ICRkaWFjcml0aWNTZW5zaXRpdmUgLSBmYWxzZSBub3Qgc3VwcG9ydGVkLCBpbnN0YWxsIFBvc3RncmVzIFVuYWNjZW50IEV4dGVuc2lvbmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHBhdHRlcm5zLnB1c2goXG4gICAgICAgIGB0b190c3ZlY3RvcigkJHtpbmRleH0sICQke2luZGV4ICsgMX06bmFtZSkgQEAgdG9fdHNxdWVyeSgkJHtpbmRleCArIDJ9LCAkJHtpbmRleCArIDN9KWBcbiAgICAgICk7XG4gICAgICB2YWx1ZXMucHVzaChsYW5ndWFnZSwgZmllbGROYW1lLCBsYW5ndWFnZSwgc2VhcmNoLiR0ZXJtKTtcbiAgICAgIGluZGV4ICs9IDQ7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkVmFsdWUuJG5lYXJTcGhlcmUpIHtcbiAgICAgIGNvbnN0IHBvaW50ID0gZmllbGRWYWx1ZS4kbmVhclNwaGVyZTtcbiAgICAgIGNvbnN0IGRpc3RhbmNlID0gZmllbGRWYWx1ZS4kbWF4RGlzdGFuY2U7XG4gICAgICBjb25zdCBkaXN0YW5jZUluS00gPSBkaXN0YW5jZSAqIDYzNzEgKiAxMDAwO1xuICAgICAgcGF0dGVybnMucHVzaChcbiAgICAgICAgYFNUX0Rpc3RhbmNlU3BoZXJlKCQke2luZGV4fTpuYW1lOjpnZW9tZXRyeSwgUE9JTlQoJCR7aW5kZXggKyAxfSwgJCR7XG4gICAgICAgICAgaW5kZXggKyAyXG4gICAgICAgIH0pOjpnZW9tZXRyeSkgPD0gJCR7aW5kZXggKyAzfWBcbiAgICAgICk7XG4gICAgICBzb3J0cy5wdXNoKFxuICAgICAgICBgU1RfRGlzdGFuY2VTcGhlcmUoJCR7aW5kZXh9Om5hbWU6Omdlb21ldHJ5LCBQT0lOVCgkJHtpbmRleCArIDF9LCAkJHtcbiAgICAgICAgICBpbmRleCArIDJcbiAgICAgICAgfSk6Omdlb21ldHJ5KSBBU0NgXG4gICAgICApO1xuICAgICAgdmFsdWVzLnB1c2goZmllbGROYW1lLCBwb2ludC5sb25naXR1ZGUsIHBvaW50LmxhdGl0dWRlLCBkaXN0YW5jZUluS00pO1xuICAgICAgaW5kZXggKz0gNDtcbiAgICB9XG5cbiAgICBpZiAoZmllbGRWYWx1ZS4kd2l0aGluICYmIGZpZWxkVmFsdWUuJHdpdGhpbi4kYm94KSB7XG4gICAgICBjb25zdCBib3ggPSBmaWVsZFZhbHVlLiR3aXRoaW4uJGJveDtcbiAgICAgIGNvbnN0IGxlZnQgPSBib3hbMF0ubG9uZ2l0dWRlO1xuICAgICAgY29uc3QgYm90dG9tID0gYm94WzBdLmxhdGl0dWRlO1xuICAgICAgY29uc3QgcmlnaHQgPSBib3hbMV0ubG9uZ2l0dWRlO1xuICAgICAgY29uc3QgdG9wID0gYm94WzFdLmxhdGl0dWRlO1xuXG4gICAgICBwYXR0ZXJucy5wdXNoKGAkJHtpbmRleH06bmFtZTo6cG9pbnQgPEAgJCR7aW5kZXggKyAxfTo6Ym94YCk7XG4gICAgICB2YWx1ZXMucHVzaChmaWVsZE5hbWUsIGAoKCR7bGVmdH0sICR7Ym90dG9tfSksICgke3JpZ2h0fSwgJHt0b3B9KSlgKTtcbiAgICAgIGluZGV4ICs9IDI7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkVmFsdWUuJGdlb1dpdGhpbiAmJiBmaWVsZFZhbHVlLiRnZW9XaXRoaW4uJGNlbnRlclNwaGVyZSkge1xuICAgICAgY29uc3QgY2VudGVyU3BoZXJlID0gZmllbGRWYWx1ZS4kZ2VvV2l0aGluLiRjZW50ZXJTcGhlcmU7XG4gICAgICBpZiAoIShjZW50ZXJTcGhlcmUgaW5zdGFuY2VvZiBBcnJheSkgfHwgY2VudGVyU3BoZXJlLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgICAgIFBhcnNlLkVycm9yLklOVkFMSURfSlNPTixcbiAgICAgICAgICAnYmFkICRnZW9XaXRoaW4gdmFsdWU7ICRjZW50ZXJTcGhlcmUgc2hvdWxkIGJlIGFuIGFycmF5IG9mIFBhcnNlLkdlb1BvaW50IGFuZCBkaXN0YW5jZSdcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIC8vIEdldCBwb2ludCwgY29udmVydCB0byBnZW8gcG9pbnQgaWYgbmVjZXNzYXJ5IGFuZCB2YWxpZGF0ZVxuICAgICAgbGV0IHBvaW50ID0gY2VudGVyU3BoZXJlWzBdO1xuICAgICAgaWYgKHBvaW50IGluc3RhbmNlb2YgQXJyYXkgJiYgcG9pbnQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHBvaW50ID0gbmV3IFBhcnNlLkdlb1BvaW50KHBvaW50WzFdLCBwb2ludFswXSk7XG4gICAgICB9IGVsc2UgaWYgKCFHZW9Qb2ludENvZGVyLmlzVmFsaWRKU09OKHBvaW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICAgICAgUGFyc2UuRXJyb3IuSU5WQUxJRF9KU09OLFxuICAgICAgICAgICdiYWQgJGdlb1dpdGhpbiB2YWx1ZTsgJGNlbnRlclNwaGVyZSBnZW8gcG9pbnQgaW52YWxpZCdcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIFBhcnNlLkdlb1BvaW50Ll92YWxpZGF0ZShwb2ludC5sYXRpdHVkZSwgcG9pbnQubG9uZ2l0dWRlKTtcbiAgICAgIC8vIEdldCBkaXN0YW5jZSBhbmQgdmFsaWRhdGVcbiAgICAgIGNvbnN0IGRpc3RhbmNlID0gY2VudGVyU3BoZXJlWzFdO1xuICAgICAgaWYgKGlzTmFOKGRpc3RhbmNlKSB8fCBkaXN0YW5jZSA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgICAgIFBhcnNlLkVycm9yLklOVkFMSURfSlNPTixcbiAgICAgICAgICAnYmFkICRnZW9XaXRoaW4gdmFsdWU7ICRjZW50ZXJTcGhlcmUgZGlzdGFuY2UgaW52YWxpZCdcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRpc3RhbmNlSW5LTSA9IGRpc3RhbmNlICogNjM3MSAqIDEwMDA7XG4gICAgICBwYXR0ZXJucy5wdXNoKFxuICAgICAgICBgU1RfRGlzdGFuY2VTcGhlcmUoJCR7aW5kZXh9Om5hbWU6Omdlb21ldHJ5LCBQT0lOVCgkJHtpbmRleCArIDF9LCAkJHtcbiAgICAgICAgICBpbmRleCArIDJcbiAgICAgICAgfSk6Omdlb21ldHJ5KSA8PSAkJHtpbmRleCArIDN9YFxuICAgICAgKTtcbiAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSwgcG9pbnQubG9uZ2l0dWRlLCBwb2ludC5sYXRpdHVkZSwgZGlzdGFuY2VJbktNKTtcbiAgICAgIGluZGV4ICs9IDQ7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkVmFsdWUuJGdlb1dpdGhpbiAmJiBmaWVsZFZhbHVlLiRnZW9XaXRoaW4uJHBvbHlnb24pIHtcbiAgICAgIGNvbnN0IHBvbHlnb24gPSBmaWVsZFZhbHVlLiRnZW9XaXRoaW4uJHBvbHlnb247XG4gICAgICBsZXQgcG9pbnRzO1xuICAgICAgaWYgKHR5cGVvZiBwb2x5Z29uID09PSAnb2JqZWN0JyAmJiBwb2x5Z29uLl9fdHlwZSA9PT0gJ1BvbHlnb24nKSB7XG4gICAgICAgIGlmICghcG9seWdvbi5jb29yZGluYXRlcyB8fCBwb2x5Z29uLmNvb3JkaW5hdGVzLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICAgICAgICBQYXJzZS5FcnJvci5JTlZBTElEX0pTT04sXG4gICAgICAgICAgICAnYmFkICRnZW9XaXRoaW4gdmFsdWU7IFBvbHlnb24uY29vcmRpbmF0ZXMgc2hvdWxkIGNvbnRhaW4gYXQgbGVhc3QgMyBsb24vbGF0IHBhaXJzJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcG9pbnRzID0gcG9seWdvbi5jb29yZGluYXRlcztcbiAgICAgIH0gZWxzZSBpZiAocG9seWdvbiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIGlmIChwb2x5Z29uLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICAgICAgICBQYXJzZS5FcnJvci5JTlZBTElEX0pTT04sXG4gICAgICAgICAgICAnYmFkICRnZW9XaXRoaW4gdmFsdWU7ICRwb2x5Z29uIHNob3VsZCBjb250YWluIGF0IGxlYXN0IDMgR2VvUG9pbnRzJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcG9pbnRzID0gcG9seWdvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgICBQYXJzZS5FcnJvci5JTlZBTElEX0pTT04sXG4gICAgICAgICAgXCJiYWQgJGdlb1dpdGhpbiB2YWx1ZTsgJHBvbHlnb24gc2hvdWxkIGJlIFBvbHlnb24gb2JqZWN0IG9yIEFycmF5IG9mIFBhcnNlLkdlb1BvaW50J3NcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcG9pbnRzID0gcG9pbnRzXG4gICAgICAgIC5tYXAocG9pbnQgPT4ge1xuICAgICAgICAgIGlmIChwb2ludCBpbnN0YW5jZW9mIEFycmF5ICYmIHBvaW50Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgUGFyc2UuR2VvUG9pbnQuX3ZhbGlkYXRlKHBvaW50WzFdLCBwb2ludFswXSk7XG4gICAgICAgICAgICByZXR1cm4gYCgke3BvaW50WzBdfSwgJHtwb2ludFsxXX0pYDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiBwb2ludCAhPT0gJ29iamVjdCcgfHwgcG9pbnQuX190eXBlICE9PSAnR2VvUG9pbnQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuSU5WQUxJRF9KU09OLCAnYmFkICRnZW9XaXRoaW4gdmFsdWUnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgUGFyc2UuR2VvUG9pbnQuX3ZhbGlkYXRlKHBvaW50LmxhdGl0dWRlLCBwb2ludC5sb25naXR1ZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYCgke3BvaW50LmxvbmdpdHVkZX0sICR7cG9pbnQubGF0aXR1ZGV9KWA7XG4gICAgICAgIH0pXG4gICAgICAgIC5qb2luKCcsICcpO1xuXG4gICAgICBwYXR0ZXJucy5wdXNoKGAkJHtpbmRleH06bmFtZTo6cG9pbnQgPEAgJCR7aW5kZXggKyAxfTo6cG9seWdvbmApO1xuICAgICAgdmFsdWVzLnB1c2goZmllbGROYW1lLCBgKCR7cG9pbnRzfSlgKTtcbiAgICAgIGluZGV4ICs9IDI7XG4gICAgfVxuICAgIGlmIChmaWVsZFZhbHVlLiRnZW9JbnRlcnNlY3RzICYmIGZpZWxkVmFsdWUuJGdlb0ludGVyc2VjdHMuJHBvaW50KSB7XG4gICAgICBjb25zdCBwb2ludCA9IGZpZWxkVmFsdWUuJGdlb0ludGVyc2VjdHMuJHBvaW50O1xuICAgICAgaWYgKHR5cGVvZiBwb2ludCAhPT0gJ29iamVjdCcgfHwgcG9pbnQuX190eXBlICE9PSAnR2VvUG9pbnQnKSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgICBQYXJzZS5FcnJvci5JTlZBTElEX0pTT04sXG4gICAgICAgICAgJ2JhZCAkZ2VvSW50ZXJzZWN0IHZhbHVlOyAkcG9pbnQgc2hvdWxkIGJlIEdlb1BvaW50J1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUGFyc2UuR2VvUG9pbnQuX3ZhbGlkYXRlKHBvaW50LmxhdGl0dWRlLCBwb2ludC5sb25naXR1ZGUpO1xuICAgICAgfVxuICAgICAgcGF0dGVybnMucHVzaChgJCR7aW5kZXh9Om5hbWU6OnBvbHlnb24gQD4gJCR7aW5kZXggKyAxfTo6cG9pbnRgKTtcbiAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSwgYCgke3BvaW50LmxvbmdpdHVkZX0sICR7cG9pbnQubGF0aXR1ZGV9KWApO1xuICAgICAgaW5kZXggKz0gMjtcbiAgICB9XG5cbiAgICBpZiAoZmllbGRWYWx1ZS4kcmVnZXgpIHtcbiAgICAgIGxldCByZWdleCA9IGZpZWxkVmFsdWUuJHJlZ2V4O1xuICAgICAgbGV0IG9wZXJhdG9yID0gJ34nO1xuICAgICAgY29uc3Qgb3B0cyA9IGZpZWxkVmFsdWUuJG9wdGlvbnM7XG4gICAgICBpZiAob3B0cykge1xuICAgICAgICBpZiAob3B0cy5pbmRleE9mKCdpJykgPj0gMCkge1xuICAgICAgICAgIG9wZXJhdG9yID0gJ34qJztcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0cy5pbmRleE9mKCd4JykgPj0gMCkge1xuICAgICAgICAgIHJlZ2V4ID0gcmVtb3ZlV2hpdGVTcGFjZShyZWdleCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgbmFtZSA9IHRyYW5zZm9ybURvdEZpZWxkKGZpZWxkTmFtZSk7XG4gICAgICByZWdleCA9IHByb2Nlc3NSZWdleFBhdHRlcm4ocmVnZXgpO1xuXG4gICAgICBwYXR0ZXJucy5wdXNoKGAkJHtpbmRleH06cmF3ICR7b3BlcmF0b3J9ICckJHtpbmRleCArIDF9OnJhdydgKTtcbiAgICAgIHZhbHVlcy5wdXNoKG5hbWUsIHJlZ2V4KTtcbiAgICAgIGluZGV4ICs9IDI7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkVmFsdWUuX190eXBlID09PSAnUG9pbnRlcicpIHtcbiAgICAgIGlmIChpc0FycmF5RmllbGQpIHtcbiAgICAgICAgcGF0dGVybnMucHVzaChgYXJyYXlfY29udGFpbnMoJCR7aW5kZXh9Om5hbWUsICQke2luZGV4ICsgMX0pYCk7XG4gICAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSwgSlNPTi5zdHJpbmdpZnkoW2ZpZWxkVmFsdWVdKSk7XG4gICAgICAgIGluZGV4ICs9IDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXR0ZXJucy5wdXNoKGAkJHtpbmRleH06bmFtZSA9ICQke2luZGV4ICsgMX1gKTtcbiAgICAgICAgdmFsdWVzLnB1c2goZmllbGROYW1lLCBmaWVsZFZhbHVlLm9iamVjdElkKTtcbiAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZmllbGRWYWx1ZS5fX3R5cGUgPT09ICdEYXRlJykge1xuICAgICAgcGF0dGVybnMucHVzaChgJCR7aW5kZXh9Om5hbWUgPSAkJHtpbmRleCArIDF9YCk7XG4gICAgICB2YWx1ZXMucHVzaChmaWVsZE5hbWUsIGZpZWxkVmFsdWUuaXNvKTtcbiAgICAgIGluZGV4ICs9IDI7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkVmFsdWUuX190eXBlID09PSAnR2VvUG9pbnQnKSB7XG4gICAgICBwYXR0ZXJucy5wdXNoKGAkJHtpbmRleH06bmFtZSB+PSBQT0lOVCgkJHtpbmRleCArIDF9LCAkJHtpbmRleCArIDJ9KWApO1xuICAgICAgdmFsdWVzLnB1c2goZmllbGROYW1lLCBmaWVsZFZhbHVlLmxvbmdpdHVkZSwgZmllbGRWYWx1ZS5sYXRpdHVkZSk7XG4gICAgICBpbmRleCArPSAzO1xuICAgIH1cblxuICAgIGlmIChmaWVsZFZhbHVlLl9fdHlwZSA9PT0gJ1BvbHlnb24nKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGNvbnZlcnRQb2x5Z29uVG9TUUwoZmllbGRWYWx1ZS5jb29yZGluYXRlcyk7XG4gICAgICBwYXR0ZXJucy5wdXNoKGAkJHtpbmRleH06bmFtZSB+PSAkJHtpbmRleCArIDF9Ojpwb2x5Z29uYCk7XG4gICAgICB2YWx1ZXMucHVzaChmaWVsZE5hbWUsIHZhbHVlKTtcbiAgICAgIGluZGV4ICs9IDI7XG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXMoUGFyc2VUb1Bvc2dyZXNDb21wYXJhdG9yKS5mb3JFYWNoKGNtcCA9PiB7XG4gICAgICBpZiAoZmllbGRWYWx1ZVtjbXBdIHx8IGZpZWxkVmFsdWVbY21wXSA9PT0gMCkge1xuICAgICAgICBjb25zdCBwZ0NvbXBhcmF0b3IgPSBQYXJzZVRvUG9zZ3Jlc0NvbXBhcmF0b3JbY21wXTtcbiAgICAgICAgY29uc3QgcG9zdGdyZXNWYWx1ZSA9IHRvUG9zdGdyZXNWYWx1ZShmaWVsZFZhbHVlW2NtcF0pO1xuICAgICAgICBsZXQgY29uc3RyYWludEZpZWxkTmFtZTtcbiAgICAgICAgaWYgKGZpZWxkTmFtZS5pbmRleE9mKCcuJykgPj0gMCkge1xuICAgICAgICAgIGxldCBjYXN0VHlwZTtcbiAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBwb3N0Z3Jlc1ZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgICBjYXN0VHlwZSA9ICdkb3VibGUgcHJlY2lzaW9uJztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgICAgICAgY2FzdFR5cGUgPSAnYm9vbGVhbic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgY2FzdFR5cGUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0cmFpbnRGaWVsZE5hbWUgPSBjYXN0VHlwZVxuICAgICAgICAgICAgPyBgQ0FTVCAoKCR7dHJhbnNmb3JtRG90RmllbGQoZmllbGROYW1lKX0pIEFTICR7Y2FzdFR5cGV9KWBcbiAgICAgICAgICAgIDogdHJhbnNmb3JtRG90RmllbGQoZmllbGROYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdHJhaW50RmllbGROYW1lID0gYCQke2luZGV4Kyt9Om5hbWVgO1xuICAgICAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWVzLnB1c2gocG9zdGdyZXNWYWx1ZSk7XG4gICAgICAgIHBhdHRlcm5zLnB1c2goYCR7Y29uc3RyYWludEZpZWxkTmFtZX0gJHtwZ0NvbXBhcmF0b3J9ICQke2luZGV4Kyt9YCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoaW5pdGlhbFBhdHRlcm5zTGVuZ3RoID09PSBwYXR0ZXJucy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgUGFyc2UuRXJyb3IuT1BFUkFUSU9OX0ZPUkJJRERFTixcbiAgICAgICAgYFBvc3RncmVzIGRvZXNuJ3Qgc3VwcG9ydCB0aGlzIHF1ZXJ5IHR5cGUgeWV0ICR7SlNPTi5zdHJpbmdpZnkoZmllbGRWYWx1ZSl9YFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgdmFsdWVzID0gdmFsdWVzLm1hcCh0cmFuc2Zvcm1WYWx1ZSk7XG4gIHJldHVybiB7IHBhdHRlcm46IHBhdHRlcm5zLmpvaW4oJyBBTkQgJyksIHZhbHVlcywgc29ydHMgfTtcbn07XG5cbmV4cG9ydCBjbGFzcyBQb3N0Z3Jlc1N0b3JhZ2VBZGFwdGVyIGltcGxlbWVudHMgU3RvcmFnZUFkYXB0ZXIge1xuICBjYW5Tb3J0T25Kb2luVGFibGVzOiBib29sZWFuO1xuICBlbmFibGVTY2hlbWFIb29rczogYm9vbGVhbjtcblxuICAvLyBQcml2YXRlXG4gIF9jb2xsZWN0aW9uUHJlZml4OiBzdHJpbmc7XG4gIF9jbGllbnQ6IGFueTtcbiAgX29uY2hhbmdlOiBhbnk7XG4gIF9wZ3A6IGFueTtcbiAgX3N0cmVhbTogYW55O1xuICBfdXVpZDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHsgdXJpLCBjb2xsZWN0aW9uUHJlZml4ID0gJycsIGRhdGFiYXNlT3B0aW9ucyA9IHt9IH06IGFueSkge1xuICAgIHRoaXMuX2NvbGxlY3Rpb25QcmVmaXggPSBjb2xsZWN0aW9uUHJlZml4O1xuICAgIHRoaXMuZW5hYmxlU2NoZW1hSG9va3MgPSAhIWRhdGFiYXNlT3B0aW9ucy5lbmFibGVTY2hlbWFIb29rcztcbiAgICBkZWxldGUgZGF0YWJhc2VPcHRpb25zLmVuYWJsZVNjaGVtYUhvb2tzO1xuXG4gICAgY29uc3QgeyBjbGllbnQsIHBncCB9ID0gY3JlYXRlQ2xpZW50KHVyaSwgZGF0YWJhc2VPcHRpb25zKTtcbiAgICB0aGlzLl9jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5fb25jaGFuZ2UgPSAoKSA9PiB7fTtcbiAgICB0aGlzLl9wZ3AgPSBwZ3A7XG4gICAgdGhpcy5fdXVpZCA9IHV1aWR2NCgpO1xuICAgIHRoaXMuY2FuU29ydE9uSm9pblRhYmxlcyA9IGZhbHNlO1xuICB9XG5cbiAgd2F0Y2goY2FsbGJhY2s6ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLl9vbmNoYW5nZSA9IGNhbGxiYWNrO1xuICB9XG5cbiAgLy9Ob3RlIHRoYXQgYW5hbHl6ZT10cnVlIHdpbGwgcnVuIHRoZSBxdWVyeSwgZXhlY3V0aW5nIElOU0VSVFMsIERFTEVURVMsIGV0Yy5cbiAgY3JlYXRlRXhwbGFpbmFibGVRdWVyeShxdWVyeTogc3RyaW5nLCBhbmFseXplOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICBpZiAoYW5hbHl6ZSkge1xuICAgICAgcmV0dXJuICdFWFBMQUlOIChBTkFMWVpFLCBGT1JNQVQgSlNPTikgJyArIHF1ZXJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ0VYUExBSU4gKEZPUk1BVCBKU09OKSAnICsgcXVlcnk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlU2h1dGRvd24oKSB7XG4gICAgaWYgKHRoaXMuX3N0cmVhbSkge1xuICAgICAgdGhpcy5fc3RyZWFtLmRvbmUoKTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9zdHJlYW07XG4gICAgfVxuICAgIGlmICghdGhpcy5fY2xpZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2NsaWVudC4kcG9vbC5lbmQoKTtcbiAgfVxuXG4gIGFzeW5jIF9saXN0ZW5Ub1NjaGVtYSgpIHtcbiAgICBpZiAoIXRoaXMuX3N0cmVhbSAmJiB0aGlzLmVuYWJsZVNjaGVtYUhvb2tzKSB7XG4gICAgICB0aGlzLl9zdHJlYW0gPSBhd2FpdCB0aGlzLl9jbGllbnQuY29ubmVjdCh7IGRpcmVjdDogdHJ1ZSB9KTtcbiAgICAgIHRoaXMuX3N0cmVhbS5jbGllbnQub24oJ25vdGlmaWNhdGlvbicsIGRhdGEgPT4ge1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gSlNPTi5wYXJzZShkYXRhLnBheWxvYWQpO1xuICAgICAgICBpZiAocGF5bG9hZC5zZW5kZXJJZCAhPT0gdGhpcy5fdXVpZCkge1xuICAgICAgICAgIHRoaXMuX29uY2hhbmdlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgYXdhaXQgdGhpcy5fc3RyZWFtLm5vbmUoJ0xJU1RFTiAkMX4nLCAnc2NoZW1hLmNoYW5nZScpO1xuICAgIH1cbiAgfVxuXG4gIF9ub3RpZnlTY2hlbWFDaGFuZ2UoKSB7XG4gICAgaWYgKHRoaXMuX3N0cmVhbSkge1xuICAgICAgdGhpcy5fc3RyZWFtXG4gICAgICAgIC5ub25lKCdOT1RJRlkgJDF+LCAkMicsIFsnc2NoZW1hLmNoYW5nZScsIHsgc2VuZGVySWQ6IHRoaXMuX3V1aWQgfV0pXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ0ZhaWxlZCB0byBOb3RpZnk6JywgZXJyb3IpOyAvLyB1bmxpa2VseSB0byBldmVyIGhhcHBlblxuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBfZW5zdXJlU2NoZW1hQ29sbGVjdGlvbkV4aXN0cyhjb25uOiBhbnkpIHtcbiAgICBjb25uID0gY29ubiB8fCB0aGlzLl9jbGllbnQ7XG4gICAgYXdhaXQgY29ublxuICAgICAgLm5vbmUoXG4gICAgICAgICdDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBcIl9TQ0hFTUFcIiAoIFwiY2xhc3NOYW1lXCIgdmFyQ2hhcigxMjApLCBcInNjaGVtYVwiIGpzb25iLCBcImlzUGFyc2VDbGFzc1wiIGJvb2wsIFBSSU1BUlkgS0VZIChcImNsYXNzTmFtZVwiKSApJ1xuICAgICAgKVxuICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGVycm9yLmNvZGUgPT09IFBvc3RncmVzRHVwbGljYXRlUmVsYXRpb25FcnJvciB8fFxuICAgICAgICAgIGVycm9yLmNvZGUgPT09IFBvc3RncmVzVW5pcXVlSW5kZXhWaW9sYXRpb25FcnJvciB8fFxuICAgICAgICAgIGVycm9yLmNvZGUgPT09IFBvc3RncmVzRHVwbGljYXRlT2JqZWN0RXJyb3JcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gVGFibGUgYWxyZWFkeSBleGlzdHMsIG11c3QgaGF2ZSBiZWVuIGNyZWF0ZWQgYnkgYSBkaWZmZXJlbnQgcmVxdWVzdC4gSWdub3JlIGVycm9yLlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGNsYXNzRXhpc3RzKG5hbWU6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQub25lKFxuICAgICAgJ1NFTEVDVCBFWElTVFMgKFNFTEVDVCAxIEZST00gaW5mb3JtYXRpb25fc2NoZW1hLnRhYmxlcyBXSEVSRSB0YWJsZV9uYW1lID0gJDEpJyxcbiAgICAgIFtuYW1lXSxcbiAgICAgIGEgPT4gYS5leGlzdHNcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgc2V0Q2xhc3NMZXZlbFBlcm1pc3Npb25zKGNsYXNzTmFtZTogc3RyaW5nLCBDTFBzOiBhbnkpIHtcbiAgICBhd2FpdCB0aGlzLl9jbGllbnQudGFzaygnc2V0LWNsYXNzLWxldmVsLXBlcm1pc3Npb25zJywgYXN5bmMgdCA9PiB7XG4gICAgICBjb25zdCB2YWx1ZXMgPSBbY2xhc3NOYW1lLCAnc2NoZW1hJywgJ2NsYXNzTGV2ZWxQZXJtaXNzaW9ucycsIEpTT04uc3RyaW5naWZ5KENMUHMpXTtcbiAgICAgIGF3YWl0IHQubm9uZShcbiAgICAgICAgYFVQREFURSBcIl9TQ0hFTUFcIiBTRVQgJDI6bmFtZSA9IGpzb25fb2JqZWN0X3NldF9rZXkoJDI6bmFtZSwgJDM6OnRleHQsICQ0Ojpqc29uYikgV0hFUkUgXCJjbGFzc05hbWVcIiA9ICQxYCxcbiAgICAgICAgdmFsdWVzXG4gICAgICApO1xuICAgIH0pO1xuICAgIHRoaXMuX25vdGlmeVNjaGVtYUNoYW5nZSgpO1xuICB9XG5cbiAgYXN5bmMgc2V0SW5kZXhlc1dpdGhTY2hlbWFGb3JtYXQoXG4gICAgY2xhc3NOYW1lOiBzdHJpbmcsXG4gICAgc3VibWl0dGVkSW5kZXhlczogYW55LFxuICAgIGV4aXN0aW5nSW5kZXhlczogYW55ID0ge30sXG4gICAgZmllbGRzOiBhbnksXG4gICAgY29ubjogP2FueVxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25uID0gY29ubiB8fCB0aGlzLl9jbGllbnQ7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHN1Ym1pdHRlZEluZGV4ZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBpZiAoT2JqZWN0LmtleXMoZXhpc3RpbmdJbmRleGVzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIGV4aXN0aW5nSW5kZXhlcyA9IHsgX2lkXzogeyBfaWQ6IDEgfSB9O1xuICAgIH1cbiAgICBjb25zdCBkZWxldGVkSW5kZXhlcyA9IFtdO1xuICAgIGNvbnN0IGluc2VydGVkSW5kZXhlcyA9IFtdO1xuICAgIE9iamVjdC5rZXlzKHN1Ym1pdHRlZEluZGV4ZXMpLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICBjb25zdCBmaWVsZCA9IHN1Ym1pdHRlZEluZGV4ZXNbbmFtZV07XG4gICAgICBpZiAoZXhpc3RpbmdJbmRleGVzW25hbWVdICYmIGZpZWxkLl9fb3AgIT09ICdEZWxldGUnKSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5JTlZBTElEX1FVRVJZLCBgSW5kZXggJHtuYW1lfSBleGlzdHMsIGNhbm5vdCB1cGRhdGUuYCk7XG4gICAgICB9XG4gICAgICBpZiAoIWV4aXN0aW5nSW5kZXhlc1tuYW1lXSAmJiBmaWVsZC5fX29wID09PSAnRGVsZXRlJykge1xuICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICAgICAgUGFyc2UuRXJyb3IuSU5WQUxJRF9RVUVSWSxcbiAgICAgICAgICBgSW5kZXggJHtuYW1lfSBkb2VzIG5vdCBleGlzdCwgY2Fubm90IGRlbGV0ZS5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoZmllbGQuX19vcCA9PT0gJ0RlbGV0ZScpIHtcbiAgICAgICAgZGVsZXRlZEluZGV4ZXMucHVzaChuYW1lKTtcbiAgICAgICAgZGVsZXRlIGV4aXN0aW5nSW5kZXhlc1tuYW1lXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIE9iamVjdC5rZXlzKGZpZWxkKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZmllbGRzLCBrZXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICAgICAgICAgIFBhcnNlLkVycm9yLklOVkFMSURfUVVFUlksXG4gICAgICAgICAgICAgIGBGaWVsZCAke2tleX0gZG9lcyBub3QgZXhpc3QsIGNhbm5vdCBhZGQgaW5kZXguYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBleGlzdGluZ0luZGV4ZXNbbmFtZV0gPSBmaWVsZDtcbiAgICAgICAgaW5zZXJ0ZWRJbmRleGVzLnB1c2goe1xuICAgICAgICAgIGtleTogZmllbGQsXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgYXdhaXQgY29ubi50eCgnc2V0LWluZGV4ZXMtd2l0aC1zY2hlbWEtZm9ybWF0JywgYXN5bmMgdCA9PiB7XG4gICAgICBpZiAoaW5zZXJ0ZWRJbmRleGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYXdhaXQgc2VsZi5jcmVhdGVJbmRleGVzKGNsYXNzTmFtZSwgaW5zZXJ0ZWRJbmRleGVzLCB0KTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWxldGVkSW5kZXhlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGF3YWl0IHNlbGYuZHJvcEluZGV4ZXMoY2xhc3NOYW1lLCBkZWxldGVkSW5kZXhlcywgdCk7XG4gICAgICB9XG4gICAgICBhd2FpdCB0Lm5vbmUoXG4gICAgICAgICdVUERBVEUgXCJfU0NIRU1BXCIgU0VUICQyOm5hbWUgPSBqc29uX29iamVjdF9zZXRfa2V5KCQyOm5hbWUsICQzOjp0ZXh0LCAkNDo6anNvbmIpIFdIRVJFIFwiY2xhc3NOYW1lXCIgPSAkMScsXG4gICAgICAgIFtjbGFzc05hbWUsICdzY2hlbWEnLCAnaW5kZXhlcycsIEpTT04uc3RyaW5naWZ5KGV4aXN0aW5nSW5kZXhlcyldXG4gICAgICApO1xuICAgIH0pO1xuICAgIHRoaXMuX25vdGlmeVNjaGVtYUNoYW5nZSgpO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlQ2xhc3MoY2xhc3NOYW1lOiBzdHJpbmcsIHNjaGVtYTogU2NoZW1hVHlwZSwgY29ubjogP2FueSkge1xuICAgIGNvbm4gPSBjb25uIHx8IHRoaXMuX2NsaWVudDtcbiAgICBjb25zdCBwYXJzZVNjaGVtYSA9IGF3YWl0IGNvbm5cbiAgICAgIC50eCgnY3JlYXRlLWNsYXNzJywgYXN5bmMgdCA9PiB7XG4gICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlVGFibGUoY2xhc3NOYW1lLCBzY2hlbWEsIHQpO1xuICAgICAgICBhd2FpdCB0Lm5vbmUoXG4gICAgICAgICAgJ0lOU0VSVCBJTlRPIFwiX1NDSEVNQVwiIChcImNsYXNzTmFtZVwiLCBcInNjaGVtYVwiLCBcImlzUGFyc2VDbGFzc1wiKSBWQUxVRVMgKCQ8Y2xhc3NOYW1lPiwgJDxzY2hlbWE+LCB0cnVlKScsXG4gICAgICAgICAgeyBjbGFzc05hbWUsIHNjaGVtYSB9XG4gICAgICAgICk7XG4gICAgICAgIGF3YWl0IHRoaXMuc2V0SW5kZXhlc1dpdGhTY2hlbWFGb3JtYXQoY2xhc3NOYW1lLCBzY2hlbWEuaW5kZXhlcywge30sIHNjaGVtYS5maWVsZHMsIHQpO1xuICAgICAgICByZXR1cm4gdG9QYXJzZVNjaGVtYShzY2hlbWEpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICBpZiAoZXJyLmNvZGUgPT09IFBvc3RncmVzVW5pcXVlSW5kZXhWaW9sYXRpb25FcnJvciAmJiBlcnIuZGV0YWlsLmluY2x1ZGVzKGNsYXNzTmFtZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuRFVQTElDQVRFX1ZBTFVFLCBgQ2xhc3MgJHtjbGFzc05hbWV9IGFscmVhZHkgZXhpc3RzLmApO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH0pO1xuICAgIHRoaXMuX25vdGlmeVNjaGVtYUNoYW5nZSgpO1xuICAgIHJldHVybiBwYXJzZVNjaGVtYTtcbiAgfVxuXG4gIC8vIEp1c3QgY3JlYXRlIGEgdGFibGUsIGRvIG5vdCBpbnNlcnQgaW4gc2NoZW1hXG4gIGFzeW5jIGNyZWF0ZVRhYmxlKGNsYXNzTmFtZTogc3RyaW5nLCBzY2hlbWE6IFNjaGVtYVR5cGUsIGNvbm46IGFueSkge1xuICAgIGNvbm4gPSBjb25uIHx8IHRoaXMuX2NsaWVudDtcbiAgICBkZWJ1ZygnY3JlYXRlVGFibGUnKTtcbiAgICBjb25zdCB2YWx1ZXNBcnJheSA9IFtdO1xuICAgIGNvbnN0IHBhdHRlcm5zQXJyYXkgPSBbXTtcbiAgICBjb25zdCBmaWVsZHMgPSBPYmplY3QuYXNzaWduKHt9LCBzY2hlbWEuZmllbGRzKTtcbiAgICBpZiAoY2xhc3NOYW1lID09PSAnX1VzZXInKSB7XG4gICAgICBmaWVsZHMuX2VtYWlsX3ZlcmlmeV90b2tlbl9leHBpcmVzX2F0ID0geyB0eXBlOiAnRGF0ZScgfTtcbiAgICAgIGZpZWxkcy5fZW1haWxfdmVyaWZ5X3Rva2VuID0geyB0eXBlOiAnU3RyaW5nJyB9O1xuICAgICAgZmllbGRzLl9hY2NvdW50X2xvY2tvdXRfZXhwaXJlc19hdCA9IHsgdHlwZTogJ0RhdGUnIH07XG4gICAgICBmaWVsZHMuX2ZhaWxlZF9sb2dpbl9jb3VudCA9IHsgdHlwZTogJ051bWJlcicgfTtcbiAgICAgIGZpZWxkcy5fcGVyaXNoYWJsZV90b2tlbiA9IHsgdHlwZTogJ1N0cmluZycgfTtcbiAgICAgIGZpZWxkcy5fcGVyaXNoYWJsZV90b2tlbl9leHBpcmVzX2F0ID0geyB0eXBlOiAnRGF0ZScgfTtcbiAgICAgIGZpZWxkcy5fcGFzc3dvcmRfY2hhbmdlZF9hdCA9IHsgdHlwZTogJ0RhdGUnIH07XG4gICAgICBmaWVsZHMuX3Bhc3N3b3JkX2hpc3RvcnkgPSB7IHR5cGU6ICdBcnJheScgfTtcbiAgICB9XG4gICAgbGV0IGluZGV4ID0gMjtcbiAgICBjb25zdCByZWxhdGlvbnMgPSBbXTtcbiAgICBPYmplY3Qua2V5cyhmaWVsZHMpLmZvckVhY2goZmllbGROYW1lID0+IHtcbiAgICAgIGNvbnN0IHBhcnNlVHlwZSA9IGZpZWxkc1tmaWVsZE5hbWVdO1xuICAgICAgLy8gU2tpcCB3aGVuIGl0J3MgYSByZWxhdGlvblxuICAgICAgLy8gV2UnbGwgY3JlYXRlIHRoZSB0YWJsZXMgbGF0ZXJcbiAgICAgIGlmIChwYXJzZVR5cGUudHlwZSA9PT0gJ1JlbGF0aW9uJykge1xuICAgICAgICByZWxhdGlvbnMucHVzaChmaWVsZE5hbWUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoWydfcnBlcm0nLCAnX3dwZXJtJ10uaW5kZXhPZihmaWVsZE5hbWUpID49IDApIHtcbiAgICAgICAgcGFyc2VUeXBlLmNvbnRlbnRzID0geyB0eXBlOiAnU3RyaW5nJyB9O1xuICAgICAgfVxuICAgICAgdmFsdWVzQXJyYXkucHVzaChmaWVsZE5hbWUpO1xuICAgICAgdmFsdWVzQXJyYXkucHVzaChwYXJzZVR5cGVUb1Bvc3RncmVzVHlwZShwYXJzZVR5cGUpKTtcbiAgICAgIHBhdHRlcm5zQXJyYXkucHVzaChgJCR7aW5kZXh9Om5hbWUgJCR7aW5kZXggKyAxfTpyYXdgKTtcbiAgICAgIGlmIChmaWVsZE5hbWUgPT09ICdvYmplY3RJZCcpIHtcbiAgICAgICAgcGF0dGVybnNBcnJheS5wdXNoKGBQUklNQVJZIEtFWSAoJCR7aW5kZXh9Om5hbWUpYCk7XG4gICAgICB9XG4gICAgICBpbmRleCA9IGluZGV4ICsgMjtcbiAgICB9KTtcbiAgICBjb25zdCBxcyA9IGBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyAkMTpuYW1lICgke3BhdHRlcm5zQXJyYXkuam9pbigpfSlgO1xuICAgIGNvbnN0IHZhbHVlcyA9IFtjbGFzc05hbWUsIC4uLnZhbHVlc0FycmF5XTtcblxuICAgIHJldHVybiBjb25uLnRhc2soJ2NyZWF0ZS10YWJsZScsIGFzeW5jIHQgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdC5ub25lKHFzLCB2YWx1ZXMpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yLmNvZGUgIT09IFBvc3RncmVzRHVwbGljYXRlUmVsYXRpb25FcnJvcikge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVMU0U6IFRhYmxlIGFscmVhZHkgZXhpc3RzLCBtdXN0IGhhdmUgYmVlbiBjcmVhdGVkIGJ5IGEgZGlmZmVyZW50IHJlcXVlc3QuIElnbm9yZSB0aGUgZXJyb3IuXG4gICAgICB9XG4gICAgICBhd2FpdCB0LnR4KCdjcmVhdGUtdGFibGUtdHgnLCB0eCA9PiB7XG4gICAgICAgIHJldHVybiB0eC5iYXRjaChcbiAgICAgICAgICByZWxhdGlvbnMubWFwKGZpZWxkTmFtZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdHgubm9uZShcbiAgICAgICAgICAgICAgJ0NSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTICQ8am9pblRhYmxlOm5hbWU+IChcInJlbGF0ZWRJZFwiIHZhckNoYXIoMTIwKSwgXCJvd25pbmdJZFwiIHZhckNoYXIoMTIwKSwgUFJJTUFSWSBLRVkoXCJyZWxhdGVkSWRcIiwgXCJvd25pbmdJZFwiKSApJyxcbiAgICAgICAgICAgICAgeyBqb2luVGFibGU6IGBfSm9pbjoke2ZpZWxkTmFtZX06JHtjbGFzc05hbWV9YCB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHNjaGVtYVVwZ3JhZGUoY2xhc3NOYW1lOiBzdHJpbmcsIHNjaGVtYTogU2NoZW1hVHlwZSwgY29ubjogYW55KSB7XG4gICAgZGVidWcoJ3NjaGVtYVVwZ3JhZGUnKTtcbiAgICBjb25uID0gY29ubiB8fCB0aGlzLl9jbGllbnQ7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBhd2FpdCBjb25uLnRhc2soJ3NjaGVtYS11cGdyYWRlJywgYXN5bmMgdCA9PiB7XG4gICAgICBjb25zdCBjb2x1bW5zID0gYXdhaXQgdC5tYXAoXG4gICAgICAgICdTRUxFQ1QgY29sdW1uX25hbWUgRlJPTSBpbmZvcm1hdGlvbl9zY2hlbWEuY29sdW1ucyBXSEVSRSB0YWJsZV9uYW1lID0gJDxjbGFzc05hbWU+JyxcbiAgICAgICAgeyBjbGFzc05hbWUgfSxcbiAgICAgICAgYSA9PiBhLmNvbHVtbl9uYW1lXG4gICAgICApO1xuICAgICAgY29uc3QgbmV3Q29sdW1ucyA9IE9iamVjdC5rZXlzKHNjaGVtYS5maWVsZHMpXG4gICAgICAgIC5maWx0ZXIoaXRlbSA9PiBjb2x1bW5zLmluZGV4T2YoaXRlbSkgPT09IC0xKVxuICAgICAgICAubWFwKGZpZWxkTmFtZSA9PiBzZWxmLmFkZEZpZWxkSWZOb3RFeGlzdHMoY2xhc3NOYW1lLCBmaWVsZE5hbWUsIHNjaGVtYS5maWVsZHNbZmllbGROYW1lXSkpO1xuXG4gICAgICBhd2FpdCB0LmJhdGNoKG5ld0NvbHVtbnMpO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgYWRkRmllbGRJZk5vdEV4aXN0cyhjbGFzc05hbWU6IHN0cmluZywgZmllbGROYW1lOiBzdHJpbmcsIHR5cGU6IGFueSkge1xuICAgIC8vIFRPRE86IE11c3QgYmUgcmV2aXNlZCBmb3IgaW52YWxpZCBsb2dpYy4uLlxuICAgIGRlYnVnKCdhZGRGaWVsZElmTm90RXhpc3RzJyk7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgYXdhaXQgdGhpcy5fY2xpZW50LnR4KCdhZGQtZmllbGQtaWYtbm90LWV4aXN0cycsIGFzeW5jIHQgPT4ge1xuICAgICAgaWYgKHR5cGUudHlwZSAhPT0gJ1JlbGF0aW9uJykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IHQubm9uZShcbiAgICAgICAgICAgICdBTFRFUiBUQUJMRSAkPGNsYXNzTmFtZTpuYW1lPiBBREQgQ09MVU1OIElGIE5PVCBFWElTVFMgJDxmaWVsZE5hbWU6bmFtZT4gJDxwb3N0Z3Jlc1R5cGU6cmF3PicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgZmllbGROYW1lLFxuICAgICAgICAgICAgICBwb3N0Z3Jlc1R5cGU6IHBhcnNlVHlwZVRvUG9zdGdyZXNUeXBlKHR5cGUpLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IFBvc3RncmVzUmVsYXRpb25Eb2VzTm90RXhpc3RFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuY3JlYXRlQ2xhc3MoY2xhc3NOYW1lLCB7IGZpZWxkczogeyBbZmllbGROYW1lXTogdHlwZSB9IH0sIHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZXJyb3IuY29kZSAhPT0gUG9zdGdyZXNEdXBsaWNhdGVDb2x1bW5FcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIENvbHVtbiBhbHJlYWR5IGV4aXN0cywgY3JlYXRlZCBieSBvdGhlciByZXF1ZXN0LiBDYXJyeSBvbiB0byBzZWUgaWYgaXQncyB0aGUgcmlnaHQgdHlwZS5cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXdhaXQgdC5ub25lKFxuICAgICAgICAgICdDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyAkPGpvaW5UYWJsZTpuYW1lPiAoXCJyZWxhdGVkSWRcIiB2YXJDaGFyKDEyMCksIFwib3duaW5nSWRcIiB2YXJDaGFyKDEyMCksIFBSSU1BUlkgS0VZKFwicmVsYXRlZElkXCIsIFwib3duaW5nSWRcIikgKScsXG4gICAgICAgICAgeyBqb2luVGFibGU6IGBfSm9pbjoke2ZpZWxkTmFtZX06JHtjbGFzc05hbWV9YCB9XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHQuYW55KFxuICAgICAgICAnU0VMRUNUIFwic2NoZW1hXCIgRlJPTSBcIl9TQ0hFTUFcIiBXSEVSRSBcImNsYXNzTmFtZVwiID0gJDxjbGFzc05hbWU+IGFuZCAoXCJzY2hlbWFcIjo6anNvbi0+XFwnZmllbGRzXFwnLT4kPGZpZWxkTmFtZT4pIGlzIG5vdCBudWxsJyxcbiAgICAgICAgeyBjbGFzc05hbWUsIGZpZWxkTmFtZSB9XG4gICAgICApO1xuXG4gICAgICBpZiAocmVzdWx0WzBdKSB7XG4gICAgICAgIHRocm93ICdBdHRlbXB0ZWQgdG8gYWRkIGEgZmllbGQgdGhhdCBhbHJlYWR5IGV4aXN0cyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBwYXRoID0gYHtmaWVsZHMsJHtmaWVsZE5hbWV9fWA7XG4gICAgICAgIGF3YWl0IHQubm9uZShcbiAgICAgICAgICAnVVBEQVRFIFwiX1NDSEVNQVwiIFNFVCBcInNjaGVtYVwiPWpzb25iX3NldChcInNjaGVtYVwiLCAkPHBhdGg+LCAkPHR5cGU+KSAgV0hFUkUgXCJjbGFzc05hbWVcIj0kPGNsYXNzTmFtZT4nLFxuICAgICAgICAgIHsgcGF0aCwgdHlwZSwgY2xhc3NOYW1lIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLl9ub3RpZnlTY2hlbWFDaGFuZ2UoKTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUZpZWxkT3B0aW9ucyhjbGFzc05hbWU6IHN0cmluZywgZmllbGROYW1lOiBzdHJpbmcsIHR5cGU6IGFueSkge1xuICAgIGF3YWl0IHRoaXMuX2NsaWVudC50eCgndXBkYXRlLXNjaGVtYS1maWVsZC1vcHRpb25zJywgYXN5bmMgdCA9PiB7XG4gICAgICBjb25zdCBwYXRoID0gYHtmaWVsZHMsJHtmaWVsZE5hbWV9fWA7XG4gICAgICBhd2FpdCB0Lm5vbmUoXG4gICAgICAgICdVUERBVEUgXCJfU0NIRU1BXCIgU0VUIFwic2NoZW1hXCI9anNvbmJfc2V0KFwic2NoZW1hXCIsICQ8cGF0aD4sICQ8dHlwZT4pICBXSEVSRSBcImNsYXNzTmFtZVwiPSQ8Y2xhc3NOYW1lPicsXG4gICAgICAgIHsgcGF0aCwgdHlwZSwgY2xhc3NOYW1lIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBEcm9wcyBhIGNvbGxlY3Rpb24uIFJlc29sdmVzIHdpdGggdHJ1ZSBpZiBpdCB3YXMgYSBQYXJzZSBTY2hlbWEgKGVnLiBfVXNlciwgQ3VzdG9tLCBldGMuKVxuICAvLyBhbmQgcmVzb2x2ZXMgd2l0aCBmYWxzZSBpZiBpdCB3YXNuJ3QgKGVnLiBhIGpvaW4gdGFibGUpLiBSZWplY3RzIGlmIGRlbGV0aW9uIHdhcyBpbXBvc3NpYmxlLlxuICBhc3luYyBkZWxldGVDbGFzcyhjbGFzc05hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IG9wZXJhdGlvbnMgPSBbXG4gICAgICB7IHF1ZXJ5OiBgRFJPUCBUQUJMRSBJRiBFWElTVFMgJDE6bmFtZWAsIHZhbHVlczogW2NsYXNzTmFtZV0gfSxcbiAgICAgIHtcbiAgICAgICAgcXVlcnk6IGBERUxFVEUgRlJPTSBcIl9TQ0hFTUFcIiBXSEVSRSBcImNsYXNzTmFtZVwiID0gJDFgLFxuICAgICAgICB2YWx1ZXM6IFtjbGFzc05hbWVdLFxuICAgICAgfSxcbiAgICBdO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5fY2xpZW50XG4gICAgICAudHgodCA9PiB0Lm5vbmUodGhpcy5fcGdwLmhlbHBlcnMuY29uY2F0KG9wZXJhdGlvbnMpKSlcbiAgICAgIC50aGVuKCgpID0+IGNsYXNzTmFtZS5pbmRleE9mKCdfSm9pbjonKSAhPSAwKTsgLy8gcmVzb2x2ZXMgd2l0aCBmYWxzZSB3aGVuIF9Kb2luIHRhYmxlXG5cbiAgICB0aGlzLl9ub3RpZnlTY2hlbWFDaGFuZ2UoKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cblxuICAvLyBEZWxldGUgYWxsIGRhdGEga25vd24gdG8gdGhpcyBhZGFwdGVyLiBVc2VkIGZvciB0ZXN0aW5nLlxuICBhc3luYyBkZWxldGVBbGxDbGFzc2VzKCkge1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGNvbnN0IGhlbHBlcnMgPSB0aGlzLl9wZ3AuaGVscGVycztcbiAgICBkZWJ1ZygnZGVsZXRlQWxsQ2xhc3NlcycpO1xuXG4gICAgYXdhaXQgdGhpcy5fY2xpZW50XG4gICAgICAudGFzaygnZGVsZXRlLWFsbC1jbGFzc2VzJywgYXN5bmMgdCA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHQuYW55KCdTRUxFQ1QgKiBGUk9NIFwiX1NDSEVNQVwiJyk7XG4gICAgICAgICAgY29uc3Qgam9pbnMgPSByZXN1bHRzLnJlZHVjZSgobGlzdDogQXJyYXk8c3RyaW5nPiwgc2NoZW1hOiBhbnkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBsaXN0LmNvbmNhdChqb2luVGFibGVzRm9yU2NoZW1hKHNjaGVtYS5zY2hlbWEpKTtcbiAgICAgICAgICB9LCBbXSk7XG4gICAgICAgICAgY29uc3QgY2xhc3NlcyA9IFtcbiAgICAgICAgICAgICdfU0NIRU1BJyxcbiAgICAgICAgICAgICdfUHVzaFN0YXR1cycsXG4gICAgICAgICAgICAnX0pvYlN0YXR1cycsXG4gICAgICAgICAgICAnX0pvYlNjaGVkdWxlJyxcbiAgICAgICAgICAgICdfSG9va3MnLFxuICAgICAgICAgICAgJ19HbG9iYWxDb25maWcnLFxuICAgICAgICAgICAgJ19HcmFwaFFMQ29uZmlnJyxcbiAgICAgICAgICAgICdfQXVkaWVuY2UnLFxuICAgICAgICAgICAgJ19JZGVtcG90ZW5jeScsXG4gICAgICAgICAgICAuLi5yZXN1bHRzLm1hcChyZXN1bHQgPT4gcmVzdWx0LmNsYXNzTmFtZSksXG4gICAgICAgICAgICAuLi5qb2lucyxcbiAgICAgICAgICBdO1xuICAgICAgICAgIGNvbnN0IHF1ZXJpZXMgPSBjbGFzc2VzLm1hcChjbGFzc05hbWUgPT4gKHtcbiAgICAgICAgICAgIHF1ZXJ5OiAnRFJPUCBUQUJMRSBJRiBFWElTVFMgJDxjbGFzc05hbWU6bmFtZT4nLFxuICAgICAgICAgICAgdmFsdWVzOiB7IGNsYXNzTmFtZSB9LFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBhd2FpdCB0LnR4KHR4ID0+IHR4Lm5vbmUoaGVscGVycy5jb25jYXQocXVlcmllcykpKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAoZXJyb3IuY29kZSAhPT0gUG9zdGdyZXNSZWxhdGlvbkRvZXNOb3RFeGlzdEVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gTm8gX1NDSEVNQSBjb2xsZWN0aW9uLiBEb24ndCBkZWxldGUgYW55dGhpbmcuXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGRlYnVnKGBkZWxldGVBbGxDbGFzc2VzIGRvbmUgaW4gJHtuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIG5vd31gKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLy8gUmVtb3ZlIHRoZSBjb2x1bW4gYW5kIGFsbCB0aGUgZGF0YS4gRm9yIFJlbGF0aW9ucywgdGhlIF9Kb2luIGNvbGxlY3Rpb24gaXMgaGFuZGxlZFxuICAvLyBzcGVjaWFsbHksIHRoaXMgZnVuY3Rpb24gZG9lcyBub3QgZGVsZXRlIF9Kb2luIGNvbHVtbnMuIEl0IHNob3VsZCwgaG93ZXZlciwgaW5kaWNhdGVcbiAgLy8gdGhhdCB0aGUgcmVsYXRpb24gZmllbGRzIGRvZXMgbm90IGV4aXN0IGFueW1vcmUuIEluIG1vbmdvLCB0aGlzIG1lYW5zIHJlbW92aW5nIGl0IGZyb21cbiAgLy8gdGhlIF9TQ0hFTUEgY29sbGVjdGlvbi4gIFRoZXJlIHNob3VsZCBiZSBubyBhY3R1YWwgZGF0YSBpbiB0aGUgY29sbGVjdGlvbiB1bmRlciB0aGUgc2FtZSBuYW1lXG4gIC8vIGFzIHRoZSByZWxhdGlvbiBjb2x1bW4sIHNvIGl0J3MgZmluZSB0byBhdHRlbXB0IHRvIGRlbGV0ZSBpdC4gSWYgdGhlIGZpZWxkcyBsaXN0ZWQgdG8gYmVcbiAgLy8gZGVsZXRlZCBkbyBub3QgZXhpc3QsIHRoaXMgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBzdWNjZXNzZnVsbHkgYW55d2F5cy4gQ2hlY2tpbmcgZm9yXG4gIC8vIGF0dGVtcHRzIHRvIGRlbGV0ZSBub24tZXhpc3RlbnQgZmllbGRzIGlzIHRoZSByZXNwb25zaWJpbGl0eSBvZiBQYXJzZSBTZXJ2ZXIuXG5cbiAgLy8gVGhpcyBmdW5jdGlvbiBpcyBub3Qgb2JsaWdhdGVkIHRvIGRlbGV0ZSBmaWVsZHMgYXRvbWljYWxseS4gSXQgaXMgZ2l2ZW4gdGhlIGZpZWxkXG4gIC8vIG5hbWVzIGluIGEgbGlzdCBzbyB0aGF0IGRhdGFiYXNlcyB0aGF0IGFyZSBjYXBhYmxlIG9mIGRlbGV0aW5nIGZpZWxkcyBhdG9taWNhbGx5XG4gIC8vIG1heSBkbyBzby5cblxuICAvLyBSZXR1cm5zIGEgUHJvbWlzZS5cbiAgYXN5bmMgZGVsZXRlRmllbGRzKGNsYXNzTmFtZTogc3RyaW5nLCBzY2hlbWE6IFNjaGVtYVR5cGUsIGZpZWxkTmFtZXM6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgZGVidWcoJ2RlbGV0ZUZpZWxkcycpO1xuICAgIGZpZWxkTmFtZXMgPSBmaWVsZE5hbWVzLnJlZHVjZSgobGlzdDogQXJyYXk8c3RyaW5nPiwgZmllbGROYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgIGNvbnN0IGZpZWxkID0gc2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdO1xuICAgICAgaWYgKGZpZWxkLnR5cGUgIT09ICdSZWxhdGlvbicpIHtcbiAgICAgICAgbGlzdC5wdXNoKGZpZWxkTmFtZSk7XG4gICAgICB9XG4gICAgICBkZWxldGUgc2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdO1xuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfSwgW10pO1xuXG4gICAgY29uc3QgdmFsdWVzID0gW2NsYXNzTmFtZSwgLi4uZmllbGROYW1lc107XG4gICAgY29uc3QgY29sdW1ucyA9IGZpZWxkTmFtZXNcbiAgICAgIC5tYXAoKG5hbWUsIGlkeCkgPT4ge1xuICAgICAgICByZXR1cm4gYCQke2lkeCArIDJ9Om5hbWVgO1xuICAgICAgfSlcbiAgICAgIC5qb2luKCcsIERST1AgQ09MVU1OJyk7XG5cbiAgICBhd2FpdCB0aGlzLl9jbGllbnQudHgoJ2RlbGV0ZS1maWVsZHMnLCBhc3luYyB0ID0+IHtcbiAgICAgIGF3YWl0IHQubm9uZSgnVVBEQVRFIFwiX1NDSEVNQVwiIFNFVCBcInNjaGVtYVwiID0gJDxzY2hlbWE+IFdIRVJFIFwiY2xhc3NOYW1lXCIgPSAkPGNsYXNzTmFtZT4nLCB7XG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgfSk7XG4gICAgICBpZiAodmFsdWVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgYXdhaXQgdC5ub25lKGBBTFRFUiBUQUJMRSAkMTpuYW1lIERST1AgQ09MVU1OIElGIEVYSVNUUyAke2NvbHVtbnN9YCwgdmFsdWVzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLl9ub3RpZnlTY2hlbWFDaGFuZ2UoKTtcbiAgfVxuXG4gIC8vIFJldHVybiBhIHByb21pc2UgZm9yIGFsbCBzY2hlbWFzIGtub3duIHRvIHRoaXMgYWRhcHRlciwgaW4gUGFyc2UgZm9ybWF0LiBJbiBjYXNlIHRoZVxuICAvLyBzY2hlbWFzIGNhbm5vdCBiZSByZXRyaWV2ZWQsIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVqZWN0cy4gUmVxdWlyZW1lbnRzIGZvciB0aGVcbiAgLy8gcmVqZWN0aW9uIHJlYXNvbiBhcmUgVEJELlxuICBhc3luYyBnZXRBbGxDbGFzc2VzKCkge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQudGFzaygnZ2V0LWFsbC1jbGFzc2VzJywgYXN5bmMgdCA9PiB7XG4gICAgICByZXR1cm4gYXdhaXQgdC5tYXAoJ1NFTEVDVCAqIEZST00gXCJfU0NIRU1BXCInLCBudWxsLCByb3cgPT5cbiAgICAgICAgdG9QYXJzZVNjaGVtYSh7IGNsYXNzTmFtZTogcm93LmNsYXNzTmFtZSwgLi4ucm93LnNjaGVtYSB9KVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJldHVybiBhIHByb21pc2UgZm9yIHRoZSBzY2hlbWEgd2l0aCB0aGUgZ2l2ZW4gbmFtZSwgaW4gUGFyc2UgZm9ybWF0LiBJZlxuICAvLyB0aGlzIGFkYXB0ZXIgZG9lc24ndCBrbm93IGFib3V0IHRoZSBzY2hlbWEsIHJldHVybiBhIHByb21pc2UgdGhhdCByZWplY3RzIHdpdGhcbiAgLy8gdW5kZWZpbmVkIGFzIHRoZSByZWFzb24uXG4gIGFzeW5jIGdldENsYXNzKGNsYXNzTmFtZTogc3RyaW5nKSB7XG4gICAgZGVidWcoJ2dldENsYXNzJyk7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudFxuICAgICAgLmFueSgnU0VMRUNUICogRlJPTSBcIl9TQ0hFTUFcIiBXSEVSRSBcImNsYXNzTmFtZVwiID0gJDxjbGFzc05hbWU+Jywge1xuICAgICAgICBjbGFzc05hbWUsXG4gICAgICB9KVxuICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICB0aHJvdyB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdFswXS5zY2hlbWE7XG4gICAgICB9KVxuICAgICAgLnRoZW4odG9QYXJzZVNjaGVtYSk7XG4gIH1cblxuICAvLyBUT0RPOiByZW1vdmUgdGhlIG1vbmdvIGZvcm1hdCBkZXBlbmRlbmN5IGluIHRoZSByZXR1cm4gdmFsdWVcbiAgYXN5bmMgY3JlYXRlT2JqZWN0KFxuICAgIGNsYXNzTmFtZTogc3RyaW5nLFxuICAgIHNjaGVtYTogU2NoZW1hVHlwZSxcbiAgICBvYmplY3Q6IGFueSxcbiAgICB0cmFuc2FjdGlvbmFsU2Vzc2lvbjogP2FueVxuICApIHtcbiAgICBkZWJ1ZygnY3JlYXRlT2JqZWN0Jyk7XG4gICAgbGV0IGNvbHVtbnNBcnJheSA9IFtdO1xuICAgIGNvbnN0IHZhbHVlc0FycmF5ID0gW107XG4gICAgc2NoZW1hID0gdG9Qb3N0Z3Jlc1NjaGVtYShzY2hlbWEpO1xuICAgIGNvbnN0IGdlb1BvaW50cyA9IHt9O1xuXG4gICAgb2JqZWN0ID0gaGFuZGxlRG90RmllbGRzKG9iamVjdCk7XG5cbiAgICB2YWxpZGF0ZUtleXMob2JqZWN0KTtcblxuICAgIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaChmaWVsZE5hbWUgPT4ge1xuICAgICAgaWYgKG9iamVjdFtmaWVsZE5hbWVdID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBhdXRoRGF0YU1hdGNoID0gZmllbGROYW1lLm1hdGNoKC9eX2F1dGhfZGF0YV8oW2EtekEtWjAtOV9dKykkLyk7XG4gICAgICBpZiAoYXV0aERhdGFNYXRjaCkge1xuICAgICAgICB2YXIgcHJvdmlkZXIgPSBhdXRoRGF0YU1hdGNoWzFdO1xuICAgICAgICBvYmplY3RbJ2F1dGhEYXRhJ10gPSBvYmplY3RbJ2F1dGhEYXRhJ10gfHwge307XG4gICAgICAgIG9iamVjdFsnYXV0aERhdGEnXVtwcm92aWRlcl0gPSBvYmplY3RbZmllbGROYW1lXTtcbiAgICAgICAgZGVsZXRlIG9iamVjdFtmaWVsZE5hbWVdO1xuICAgICAgICBmaWVsZE5hbWUgPSAnYXV0aERhdGEnO1xuICAgICAgfVxuXG4gICAgICBjb2x1bW5zQXJyYXkucHVzaChmaWVsZE5hbWUpO1xuICAgICAgaWYgKCFzY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0gJiYgY2xhc3NOYW1lID09PSAnX1VzZXInKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBmaWVsZE5hbWUgPT09ICdfZW1haWxfdmVyaWZ5X3Rva2VuJyB8fFxuICAgICAgICAgIGZpZWxkTmFtZSA9PT0gJ19mYWlsZWRfbG9naW5fY291bnQnIHx8XG4gICAgICAgICAgZmllbGROYW1lID09PSAnX3BlcmlzaGFibGVfdG9rZW4nIHx8XG4gICAgICAgICAgZmllbGROYW1lID09PSAnX3Bhc3N3b3JkX2hpc3RvcnknXG4gICAgICAgICkge1xuICAgICAgICAgIHZhbHVlc0FycmF5LnB1c2gob2JqZWN0W2ZpZWxkTmFtZV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpZWxkTmFtZSA9PT0gJ19lbWFpbF92ZXJpZnlfdG9rZW5fZXhwaXJlc19hdCcpIHtcbiAgICAgICAgICBpZiAob2JqZWN0W2ZpZWxkTmFtZV0pIHtcbiAgICAgICAgICAgIHZhbHVlc0FycmF5LnB1c2gob2JqZWN0W2ZpZWxkTmFtZV0uaXNvKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWVzQXJyYXkucHVzaChudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgZmllbGROYW1lID09PSAnX2FjY291bnRfbG9ja291dF9leHBpcmVzX2F0JyB8fFxuICAgICAgICAgIGZpZWxkTmFtZSA9PT0gJ19wZXJpc2hhYmxlX3Rva2VuX2V4cGlyZXNfYXQnIHx8XG4gICAgICAgICAgZmllbGROYW1lID09PSAnX3Bhc3N3b3JkX2NoYW5nZWRfYXQnXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChvYmplY3RbZmllbGROYW1lXSkge1xuICAgICAgICAgICAgdmFsdWVzQXJyYXkucHVzaChvYmplY3RbZmllbGROYW1lXS5pc28pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZXNBcnJheS5wdXNoKG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHNjaGVtYS5maWVsZHNbZmllbGROYW1lXS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgICAgIGlmIChvYmplY3RbZmllbGROYW1lXSkge1xuICAgICAgICAgICAgdmFsdWVzQXJyYXkucHVzaChvYmplY3RbZmllbGROYW1lXS5pc28pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZXNBcnJheS5wdXNoKG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnUG9pbnRlcic6XG4gICAgICAgICAgdmFsdWVzQXJyYXkucHVzaChvYmplY3RbZmllbGROYW1lXS5vYmplY3RJZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0FycmF5JzpcbiAgICAgICAgICBpZiAoWydfcnBlcm0nLCAnX3dwZXJtJ10uaW5kZXhPZihmaWVsZE5hbWUpID49IDApIHtcbiAgICAgICAgICAgIHZhbHVlc0FycmF5LnB1c2gob2JqZWN0W2ZpZWxkTmFtZV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZXNBcnJheS5wdXNoKEpTT04uc3RyaW5naWZ5KG9iamVjdFtmaWVsZE5hbWVdKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdPYmplY3QnOlxuICAgICAgICBjYXNlICdCeXRlcyc6XG4gICAgICAgIGNhc2UgJ1N0cmluZyc6XG4gICAgICAgIGNhc2UgJ051bWJlcic6XG4gICAgICAgIGNhc2UgJ0Jvb2xlYW4nOlxuICAgICAgICAgIHZhbHVlc0FycmF5LnB1c2gob2JqZWN0W2ZpZWxkTmFtZV0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdGaWxlJzpcbiAgICAgICAgICB2YWx1ZXNBcnJheS5wdXNoKG9iamVjdFtmaWVsZE5hbWVdLm5hbWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdQb2x5Z29uJzoge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gY29udmVydFBvbHlnb25Ub1NRTChvYmplY3RbZmllbGROYW1lXS5jb29yZGluYXRlcyk7XG4gICAgICAgICAgdmFsdWVzQXJyYXkucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnR2VvUG9pbnQnOlxuICAgICAgICAgIC8vIHBvcCB0aGUgcG9pbnQgYW5kIHByb2Nlc3MgbGF0ZXJcbiAgICAgICAgICBnZW9Qb2ludHNbZmllbGROYW1lXSA9IG9iamVjdFtmaWVsZE5hbWVdO1xuICAgICAgICAgIGNvbHVtbnNBcnJheS5wb3AoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBgVHlwZSAke3NjaGVtYS5maWVsZHNbZmllbGROYW1lXS50eXBlfSBub3Qgc3VwcG9ydGVkIHlldGA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb2x1bW5zQXJyYXkgPSBjb2x1bW5zQXJyYXkuY29uY2F0KE9iamVjdC5rZXlzKGdlb1BvaW50cykpO1xuICAgIGNvbnN0IGluaXRpYWxWYWx1ZXMgPSB2YWx1ZXNBcnJheS5tYXAoKHZhbCwgaW5kZXgpID0+IHtcbiAgICAgIGxldCB0ZXJtaW5hdGlvbiA9ICcnO1xuICAgICAgY29uc3QgZmllbGROYW1lID0gY29sdW1uc0FycmF5W2luZGV4XTtcbiAgICAgIGlmIChbJ19ycGVybScsICdfd3Blcm0nXS5pbmRleE9mKGZpZWxkTmFtZSkgPj0gMCkge1xuICAgICAgICB0ZXJtaW5hdGlvbiA9ICc6OnRleHRbXSc7XG4gICAgICB9IGVsc2UgaWYgKHNjaGVtYS5maWVsZHNbZmllbGROYW1lXSAmJiBzY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0udHlwZSA9PT0gJ0FycmF5Jykge1xuICAgICAgICB0ZXJtaW5hdGlvbiA9ICc6Ompzb25iJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBgJCR7aW5kZXggKyAyICsgY29sdW1uc0FycmF5Lmxlbmd0aH0ke3Rlcm1pbmF0aW9ufWA7XG4gICAgfSk7XG4gICAgY29uc3QgZ2VvUG9pbnRzSW5qZWN0cyA9IE9iamVjdC5rZXlzKGdlb1BvaW50cykubWFwKGtleSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGdlb1BvaW50c1trZXldO1xuICAgICAgdmFsdWVzQXJyYXkucHVzaCh2YWx1ZS5sb25naXR1ZGUsIHZhbHVlLmxhdGl0dWRlKTtcbiAgICAgIGNvbnN0IGwgPSB2YWx1ZXNBcnJheS5sZW5ndGggKyBjb2x1bW5zQXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGBQT0lOVCgkJHtsfSwgJCR7bCArIDF9KWA7XG4gICAgfSk7XG5cbiAgICBjb25zdCBjb2x1bW5zUGF0dGVybiA9IGNvbHVtbnNBcnJheS5tYXAoKGNvbCwgaW5kZXgpID0+IGAkJHtpbmRleCArIDJ9Om5hbWVgKS5qb2luKCk7XG4gICAgY29uc3QgdmFsdWVzUGF0dGVybiA9IGluaXRpYWxWYWx1ZXMuY29uY2F0KGdlb1BvaW50c0luamVjdHMpLmpvaW4oKTtcblxuICAgIGNvbnN0IHFzID0gYElOU0VSVCBJTlRPICQxOm5hbWUgKCR7Y29sdW1uc1BhdHRlcm59KSBWQUxVRVMgKCR7dmFsdWVzUGF0dGVybn0pYDtcbiAgICBjb25zdCB2YWx1ZXMgPSBbY2xhc3NOYW1lLCAuLi5jb2x1bW5zQXJyYXksIC4uLnZhbHVlc0FycmF5XTtcbiAgICBjb25zdCBwcm9taXNlID0gKHRyYW5zYWN0aW9uYWxTZXNzaW9uID8gdHJhbnNhY3Rpb25hbFNlc3Npb24udCA6IHRoaXMuX2NsaWVudClcbiAgICAgIC5ub25lKHFzLCB2YWx1ZXMpXG4gICAgICAudGhlbigoKSA9PiAoeyBvcHM6IFtvYmplY3RdIH0pKVxuICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IFBvc3RncmVzVW5pcXVlSW5kZXhWaW9sYXRpb25FcnJvcikge1xuICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgICAgIFBhcnNlLkVycm9yLkRVUExJQ0FURV9WQUxVRSxcbiAgICAgICAgICAgICdBIGR1cGxpY2F0ZSB2YWx1ZSBmb3IgYSBmaWVsZCB3aXRoIHVuaXF1ZSB2YWx1ZXMgd2FzIHByb3ZpZGVkJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgZXJyLnVuZGVybHlpbmdFcnJvciA9IGVycm9yO1xuICAgICAgICAgIGlmIChlcnJvci5jb25zdHJhaW50KSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzID0gZXJyb3IuY29uc3RyYWludC5tYXRjaCgvdW5pcXVlXyhbYS16QS1aXSspLyk7XG4gICAgICAgICAgICBpZiAobWF0Y2hlcyAmJiBBcnJheS5pc0FycmF5KG1hdGNoZXMpKSB7XG4gICAgICAgICAgICAgIGVyci51c2VySW5mbyA9IHsgZHVwbGljYXRlZF9maWVsZDogbWF0Y2hlc1sxXSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlcnJvciA9IGVycjtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH0pO1xuICAgIGlmICh0cmFuc2FjdGlvbmFsU2Vzc2lvbikge1xuICAgICAgdHJhbnNhY3Rpb25hbFNlc3Npb24uYmF0Y2gucHVzaChwcm9taXNlKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICAvLyBSZW1vdmUgYWxsIG9iamVjdHMgdGhhdCBtYXRjaCB0aGUgZ2l2ZW4gUGFyc2UgUXVlcnkuXG4gIC8vIElmIG5vIG9iamVjdHMgbWF0Y2gsIHJlamVjdCB3aXRoIE9CSkVDVF9OT1RfRk9VTkQuIElmIG9iamVjdHMgYXJlIGZvdW5kIGFuZCBkZWxldGVkLCByZXNvbHZlIHdpdGggdW5kZWZpbmVkLlxuICAvLyBJZiB0aGVyZSBpcyBzb21lIG90aGVyIGVycm9yLCByZWplY3Qgd2l0aCBJTlRFUk5BTF9TRVJWRVJfRVJST1IuXG4gIGFzeW5jIGRlbGV0ZU9iamVjdHNCeVF1ZXJ5KFxuICAgIGNsYXNzTmFtZTogc3RyaW5nLFxuICAgIHNjaGVtYTogU2NoZW1hVHlwZSxcbiAgICBxdWVyeTogUXVlcnlUeXBlLFxuICAgIHRyYW5zYWN0aW9uYWxTZXNzaW9uOiA/YW55XG4gICkge1xuICAgIGRlYnVnKCdkZWxldGVPYmplY3RzQnlRdWVyeScpO1xuICAgIGNvbnN0IHZhbHVlcyA9IFtjbGFzc05hbWVdO1xuICAgIGNvbnN0IGluZGV4ID0gMjtcbiAgICBjb25zdCB3aGVyZSA9IGJ1aWxkV2hlcmVDbGF1c2Uoe1xuICAgICAgc2NoZW1hLFxuICAgICAgaW5kZXgsXG4gICAgICBxdWVyeSxcbiAgICAgIGNhc2VJbnNlbnNpdGl2ZTogZmFsc2UsXG4gICAgfSk7XG4gICAgdmFsdWVzLnB1c2goLi4ud2hlcmUudmFsdWVzKTtcbiAgICBpZiAoT2JqZWN0LmtleXMocXVlcnkpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgd2hlcmUucGF0dGVybiA9ICdUUlVFJztcbiAgICB9XG4gICAgY29uc3QgcXMgPSBgV0lUSCBkZWxldGVkIEFTIChERUxFVEUgRlJPTSAkMTpuYW1lIFdIRVJFICR7d2hlcmUucGF0dGVybn0gUkVUVVJOSU5HICopIFNFTEVDVCBjb3VudCgqKSBGUk9NIGRlbGV0ZWRgO1xuICAgIGNvbnN0IHByb21pc2UgPSAodHJhbnNhY3Rpb25hbFNlc3Npb24gPyB0cmFuc2FjdGlvbmFsU2Vzc2lvbi50IDogdGhpcy5fY2xpZW50KVxuICAgICAgLm9uZShxcywgdmFsdWVzLCBhID0+ICthLmNvdW50KVxuICAgICAgLnRoZW4oY291bnQgPT4ge1xuICAgICAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCwgJ09iamVjdCBub3QgZm91bmQuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgaWYgKGVycm9yLmNvZGUgIT09IFBvc3RncmVzUmVsYXRpb25Eb2VzTm90RXhpc3RFcnJvcikge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVMU0U6IERvbid0IGRlbGV0ZSBhbnl0aGluZyBpZiBkb2Vzbid0IGV4aXN0XG4gICAgICB9KTtcbiAgICBpZiAodHJhbnNhY3Rpb25hbFNlc3Npb24pIHtcbiAgICAgIHRyYW5zYWN0aW9uYWxTZXNzaW9uLmJhdGNoLnB1c2gocHJvbWlzZSk7XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG4gIC8vIFJldHVybiB2YWx1ZSBub3QgY3VycmVudGx5IHdlbGwgc3BlY2lmaWVkLlxuICBhc3luYyBmaW5kT25lQW5kVXBkYXRlKFxuICAgIGNsYXNzTmFtZTogc3RyaW5nLFxuICAgIHNjaGVtYTogU2NoZW1hVHlwZSxcbiAgICBxdWVyeTogUXVlcnlUeXBlLFxuICAgIHVwZGF0ZTogYW55LFxuICAgIHRyYW5zYWN0aW9uYWxTZXNzaW9uOiA/YW55XG4gICk6IFByb21pc2U8YW55PiB7XG4gICAgZGVidWcoJ2ZpbmRPbmVBbmRVcGRhdGUnKTtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVPYmplY3RzQnlRdWVyeShjbGFzc05hbWUsIHNjaGVtYSwgcXVlcnksIHVwZGF0ZSwgdHJhbnNhY3Rpb25hbFNlc3Npb24pLnRoZW4oXG4gICAgICB2YWwgPT4gdmFsWzBdXG4gICAgKTtcbiAgfVxuXG4gIC8vIEFwcGx5IHRoZSB1cGRhdGUgdG8gYWxsIG9iamVjdHMgdGhhdCBtYXRjaCB0aGUgZ2l2ZW4gUGFyc2UgUXVlcnkuXG4gIGFzeW5jIHVwZGF0ZU9iamVjdHNCeVF1ZXJ5KFxuICAgIGNsYXNzTmFtZTogc3RyaW5nLFxuICAgIHNjaGVtYTogU2NoZW1hVHlwZSxcbiAgICBxdWVyeTogUXVlcnlUeXBlLFxuICAgIHVwZGF0ZTogYW55LFxuICAgIHRyYW5zYWN0aW9uYWxTZXNzaW9uOiA/YW55XG4gICk6IFByb21pc2U8W2FueV0+IHtcbiAgICBkZWJ1ZygndXBkYXRlT2JqZWN0c0J5UXVlcnknKTtcbiAgICBjb25zdCB1cGRhdGVQYXR0ZXJucyA9IFtdO1xuICAgIGNvbnN0IHZhbHVlcyA9IFtjbGFzc05hbWVdO1xuICAgIGxldCBpbmRleCA9IDI7XG4gICAgc2NoZW1hID0gdG9Qb3N0Z3Jlc1NjaGVtYShzY2hlbWEpO1xuXG4gICAgY29uc3Qgb3JpZ2luYWxVcGRhdGUgPSB7IC4uLnVwZGF0ZSB9O1xuXG4gICAgLy8gU2V0IGZsYWcgZm9yIGRvdCBub3RhdGlvbiBmaWVsZHNcbiAgICBjb25zdCBkb3ROb3RhdGlvbk9wdGlvbnMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyh1cGRhdGUpLmZvckVhY2goZmllbGROYW1lID0+IHtcbiAgICAgIGlmIChmaWVsZE5hbWUuaW5kZXhPZignLicpID4gLTEpIHtcbiAgICAgICAgY29uc3QgY29tcG9uZW50cyA9IGZpZWxkTmFtZS5zcGxpdCgnLicpO1xuICAgICAgICBjb25zdCBmaXJzdCA9IGNvbXBvbmVudHMuc2hpZnQoKTtcbiAgICAgICAgZG90Tm90YXRpb25PcHRpb25zW2ZpcnN0XSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb3ROb3RhdGlvbk9wdGlvbnNbZmllbGROYW1lXSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHVwZGF0ZSA9IGhhbmRsZURvdEZpZWxkcyh1cGRhdGUpO1xuICAgIC8vIFJlc29sdmUgYXV0aERhdGEgZmlyc3QsXG4gICAgLy8gU28gd2UgZG9uJ3QgZW5kIHVwIHdpdGggbXVsdGlwbGUga2V5IHVwZGF0ZXNcbiAgICBmb3IgKGNvbnN0IGZpZWxkTmFtZSBpbiB1cGRhdGUpIHtcbiAgICAgIGNvbnN0IGF1dGhEYXRhTWF0Y2ggPSBmaWVsZE5hbWUubWF0Y2goL15fYXV0aF9kYXRhXyhbYS16QS1aMC05X10rKSQvKTtcbiAgICAgIGlmIChhdXRoRGF0YU1hdGNoKSB7XG4gICAgICAgIHZhciBwcm92aWRlciA9IGF1dGhEYXRhTWF0Y2hbMV07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdXBkYXRlW2ZpZWxkTmFtZV07XG4gICAgICAgIGRlbGV0ZSB1cGRhdGVbZmllbGROYW1lXTtcbiAgICAgICAgdXBkYXRlWydhdXRoRGF0YSddID0gdXBkYXRlWydhdXRoRGF0YSddIHx8IHt9O1xuICAgICAgICB1cGRhdGVbJ2F1dGhEYXRhJ11bcHJvdmlkZXJdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBmaWVsZE5hbWUgaW4gdXBkYXRlKSB7XG4gICAgICBjb25zdCBmaWVsZFZhbHVlID0gdXBkYXRlW2ZpZWxkTmFtZV07XG4gICAgICAvLyBEcm9wIGFueSB1bmRlZmluZWQgdmFsdWVzLlxuICAgICAgaWYgKHR5cGVvZiBmaWVsZFZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBkZWxldGUgdXBkYXRlW2ZpZWxkTmFtZV07XG4gICAgICB9IGVsc2UgaWYgKGZpZWxkVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgdXBkYXRlUGF0dGVybnMucHVzaChgJCR7aW5kZXh9Om5hbWUgPSBOVUxMYCk7XG4gICAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSk7XG4gICAgICAgIGluZGV4ICs9IDE7XG4gICAgICB9IGVsc2UgaWYgKGZpZWxkTmFtZSA9PSAnYXV0aERhdGEnKSB7XG4gICAgICAgIC8vIFRoaXMgcmVjdXJzaXZlbHkgc2V0cyB0aGUganNvbl9vYmplY3RcbiAgICAgICAgLy8gT25seSAxIGxldmVsIGRlZXBcbiAgICAgICAgY29uc3QgZ2VuZXJhdGUgPSAoanNvbmI6IHN0cmluZywga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICByZXR1cm4gYGpzb25fb2JqZWN0X3NldF9rZXkoQ09BTEVTQ0UoJHtqc29uYn0sICd7fSc6Ompzb25iKSwgJHtrZXl9LCAke3ZhbHVlfSk6Ompzb25iYDtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgbGFzdEtleSA9IGAkJHtpbmRleH06bmFtZWA7XG4gICAgICAgIGNvbnN0IGZpZWxkTmFtZUluZGV4ID0gaW5kZXg7XG4gICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSk7XG4gICAgICAgIGNvbnN0IHVwZGF0ZSA9IE9iamVjdC5rZXlzKGZpZWxkVmFsdWUpLnJlZHVjZSgobGFzdEtleTogc3RyaW5nLCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0ciA9IGdlbmVyYXRlKGxhc3RLZXksIGAkJHtpbmRleH06OnRleHRgLCBgJCR7aW5kZXggKyAxfTo6anNvbmJgKTtcbiAgICAgICAgICBpbmRleCArPSAyO1xuICAgICAgICAgIGxldCB2YWx1ZSA9IGZpZWxkVmFsdWVba2V5XTtcbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5fX29wID09PSAnRGVsZXRlJykge1xuICAgICAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWVzLnB1c2goa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgfSwgbGFzdEtleSk7XG4gICAgICAgIHVwZGF0ZVBhdHRlcm5zLnB1c2goYCQke2ZpZWxkTmFtZUluZGV4fTpuYW1lID0gJHt1cGRhdGV9YCk7XG4gICAgICB9IGVsc2UgaWYgKGZpZWxkVmFsdWUuX19vcCA9PT0gJ0luY3JlbWVudCcpIHtcbiAgICAgICAgdXBkYXRlUGF0dGVybnMucHVzaChgJCR7aW5kZXh9Om5hbWUgPSBDT0FMRVNDRSgkJHtpbmRleH06bmFtZSwgMCkgKyAkJHtpbmRleCArIDF9YCk7XG4gICAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSwgZmllbGRWYWx1ZS5hbW91bnQpO1xuICAgICAgICBpbmRleCArPSAyO1xuICAgICAgfSBlbHNlIGlmIChmaWVsZFZhbHVlLl9fb3AgPT09ICdBZGQnKSB7XG4gICAgICAgIHVwZGF0ZVBhdHRlcm5zLnB1c2goXG4gICAgICAgICAgYCQke2luZGV4fTpuYW1lID0gYXJyYXlfYWRkKENPQUxFU0NFKCQke2luZGV4fTpuYW1lLCAnW10nOjpqc29uYiksICQke2luZGV4ICsgMX06Ompzb25iKWBcbiAgICAgICAgKTtcbiAgICAgICAgdmFsdWVzLnB1c2goZmllbGROYW1lLCBKU09OLnN0cmluZ2lmeShmaWVsZFZhbHVlLm9iamVjdHMpKTtcbiAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgIH0gZWxzZSBpZiAoZmllbGRWYWx1ZS5fX29wID09PSAnRGVsZXRlJykge1xuICAgICAgICB1cGRhdGVQYXR0ZXJucy5wdXNoKGAkJHtpbmRleH06bmFtZSA9ICQke2luZGV4ICsgMX1gKTtcbiAgICAgICAgdmFsdWVzLnB1c2goZmllbGROYW1lLCBudWxsKTtcbiAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgIH0gZWxzZSBpZiAoZmllbGRWYWx1ZS5fX29wID09PSAnUmVtb3ZlJykge1xuICAgICAgICB1cGRhdGVQYXR0ZXJucy5wdXNoKFxuICAgICAgICAgIGAkJHtpbmRleH06bmFtZSA9IGFycmF5X3JlbW92ZShDT0FMRVNDRSgkJHtpbmRleH06bmFtZSwgJ1tdJzo6anNvbmIpLCAkJHtcbiAgICAgICAgICAgIGluZGV4ICsgMVxuICAgICAgICAgIH06Ompzb25iKWBcbiAgICAgICAgKTtcbiAgICAgICAgdmFsdWVzLnB1c2goZmllbGROYW1lLCBKU09OLnN0cmluZ2lmeShmaWVsZFZhbHVlLm9iamVjdHMpKTtcbiAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgIH0gZWxzZSBpZiAoZmllbGRWYWx1ZS5fX29wID09PSAnQWRkVW5pcXVlJykge1xuICAgICAgICB1cGRhdGVQYXR0ZXJucy5wdXNoKFxuICAgICAgICAgIGAkJHtpbmRleH06bmFtZSA9IGFycmF5X2FkZF91bmlxdWUoQ09BTEVTQ0UoJCR7aW5kZXh9Om5hbWUsICdbXSc6Ompzb25iKSwgJCR7XG4gICAgICAgICAgICBpbmRleCArIDFcbiAgICAgICAgICB9Ojpqc29uYilgXG4gICAgICAgICk7XG4gICAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSwgSlNPTi5zdHJpbmdpZnkoZmllbGRWYWx1ZS5vYmplY3RzKSk7XG4gICAgICAgIGluZGV4ICs9IDI7XG4gICAgICB9IGVsc2UgaWYgKGZpZWxkTmFtZSA9PT0gJ3VwZGF0ZWRBdCcpIHtcbiAgICAgICAgLy9UT0RPOiBzdG9wIHNwZWNpYWwgY2FzaW5nIHRoaXMuIEl0IHNob3VsZCBjaGVjayBmb3IgX190eXBlID09PSAnRGF0ZScgYW5kIHVzZSAuaXNvXG4gICAgICAgIHVwZGF0ZVBhdHRlcm5zLnB1c2goYCQke2luZGV4fTpuYW1lID0gJCR7aW5kZXggKyAxfWApO1xuICAgICAgICB2YWx1ZXMucHVzaChmaWVsZE5hbWUsIGZpZWxkVmFsdWUpO1xuICAgICAgICBpbmRleCArPSAyO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZmllbGRWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdXBkYXRlUGF0dGVybnMucHVzaChgJCR7aW5kZXh9Om5hbWUgPSAkJHtpbmRleCArIDF9YCk7XG4gICAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSwgZmllbGRWYWx1ZSk7XG4gICAgICAgIGluZGV4ICs9IDI7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBmaWVsZFZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdXBkYXRlUGF0dGVybnMucHVzaChgJCR7aW5kZXh9Om5hbWUgPSAkJHtpbmRleCArIDF9YCk7XG4gICAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSwgZmllbGRWYWx1ZSk7XG4gICAgICAgIGluZGV4ICs9IDI7XG4gICAgICB9IGVsc2UgaWYgKGZpZWxkVmFsdWUuX190eXBlID09PSAnUG9pbnRlcicpIHtcbiAgICAgICAgdXBkYXRlUGF0dGVybnMucHVzaChgJCR7aW5kZXh9Om5hbWUgPSAkJHtpbmRleCArIDF9YCk7XG4gICAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSwgZmllbGRWYWx1ZS5vYmplY3RJZCk7XG4gICAgICAgIGluZGV4ICs9IDI7XG4gICAgICB9IGVsc2UgaWYgKGZpZWxkVmFsdWUuX190eXBlID09PSAnRGF0ZScpIHtcbiAgICAgICAgdXBkYXRlUGF0dGVybnMucHVzaChgJCR7aW5kZXh9Om5hbWUgPSAkJHtpbmRleCArIDF9YCk7XG4gICAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSwgdG9Qb3N0Z3Jlc1ZhbHVlKGZpZWxkVmFsdWUpKTtcbiAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgIH0gZWxzZSBpZiAoZmllbGRWYWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgdXBkYXRlUGF0dGVybnMucHVzaChgJCR7aW5kZXh9Om5hbWUgPSAkJHtpbmRleCArIDF9YCk7XG4gICAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSwgZmllbGRWYWx1ZSk7XG4gICAgICAgIGluZGV4ICs9IDI7XG4gICAgICB9IGVsc2UgaWYgKGZpZWxkVmFsdWUuX190eXBlID09PSAnRmlsZScpIHtcbiAgICAgICAgdXBkYXRlUGF0dGVybnMucHVzaChgJCR7aW5kZXh9Om5hbWUgPSAkJHtpbmRleCArIDF9YCk7XG4gICAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSwgdG9Qb3N0Z3Jlc1ZhbHVlKGZpZWxkVmFsdWUpKTtcbiAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgIH0gZWxzZSBpZiAoZmllbGRWYWx1ZS5fX3R5cGUgPT09ICdHZW9Qb2ludCcpIHtcbiAgICAgICAgdXBkYXRlUGF0dGVybnMucHVzaChgJCR7aW5kZXh9Om5hbWUgPSBQT0lOVCgkJHtpbmRleCArIDF9LCAkJHtpbmRleCArIDJ9KWApO1xuICAgICAgICB2YWx1ZXMucHVzaChmaWVsZE5hbWUsIGZpZWxkVmFsdWUubG9uZ2l0dWRlLCBmaWVsZFZhbHVlLmxhdGl0dWRlKTtcbiAgICAgICAgaW5kZXggKz0gMztcbiAgICAgIH0gZWxzZSBpZiAoZmllbGRWYWx1ZS5fX3R5cGUgPT09ICdQb2x5Z29uJykge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGNvbnZlcnRQb2x5Z29uVG9TUUwoZmllbGRWYWx1ZS5jb29yZGluYXRlcyk7XG4gICAgICAgIHVwZGF0ZVBhdHRlcm5zLnB1c2goYCQke2luZGV4fTpuYW1lID0gJCR7aW5kZXggKyAxfTo6cG9seWdvbmApO1xuICAgICAgICB2YWx1ZXMucHVzaChmaWVsZE5hbWUsIHZhbHVlKTtcbiAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgIH0gZWxzZSBpZiAoZmllbGRWYWx1ZS5fX3R5cGUgPT09ICdSZWxhdGlvbicpIHtcbiAgICAgICAgLy8gbm9vcFxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZmllbGRWYWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdXBkYXRlUGF0dGVybnMucHVzaChgJCR7aW5kZXh9Om5hbWUgPSAkJHtpbmRleCArIDF9YCk7XG4gICAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSwgZmllbGRWYWx1ZSk7XG4gICAgICAgIGluZGV4ICs9IDI7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICB0eXBlb2YgZmllbGRWYWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgc2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdICYmXG4gICAgICAgIHNjaGVtYS5maWVsZHNbZmllbGROYW1lXS50eXBlID09PSAnT2JqZWN0J1xuICAgICAgKSB7XG4gICAgICAgIC8vIEdhdGhlciBrZXlzIHRvIGluY3JlbWVudFxuICAgICAgICBjb25zdCBrZXlzVG9JbmNyZW1lbnQgPSBPYmplY3Qua2V5cyhvcmlnaW5hbFVwZGF0ZSlcbiAgICAgICAgICAuZmlsdGVyKGsgPT4ge1xuICAgICAgICAgICAgLy8gY2hvb3NlIHRvcCBsZXZlbCBmaWVsZHMgdGhhdCBoYXZlIGEgZGVsZXRlIG9wZXJhdGlvbiBzZXRcbiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBPYmplY3Qua2V5cyBpcyBpdGVyYXRpbmcgb3ZlciB0aGUgKipvcmlnaW5hbCoqIHVwZGF0ZSBvYmplY3RcbiAgICAgICAgICAgIC8vIGFuZCB0aGF0IHNvbWUgb2YgdGhlIGtleXMgb2YgdGhlIG9yaWdpbmFsIHVwZGF0ZSBjb3VsZCBiZSBudWxsIG9yIHVuZGVmaW5lZDpcbiAgICAgICAgICAgIC8vIChTZWUgdGhlIGFib3ZlIGNoZWNrIGBpZiAoZmllbGRWYWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgZmllbGRWYWx1ZSA9PSBcInVuZGVmaW5lZFwiKWApXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG9yaWdpbmFsVXBkYXRlW2tdO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgdmFsdWUgJiZcbiAgICAgICAgICAgICAgdmFsdWUuX19vcCA9PT0gJ0luY3JlbWVudCcgJiZcbiAgICAgICAgICAgICAgay5zcGxpdCgnLicpLmxlbmd0aCA9PT0gMiAmJlxuICAgICAgICAgICAgICBrLnNwbGl0KCcuJylbMF0gPT09IGZpZWxkTmFtZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5tYXAoayA9PiBrLnNwbGl0KCcuJylbMV0pO1xuXG4gICAgICAgIGxldCBpbmNyZW1lbnRQYXR0ZXJucyA9ICcnO1xuICAgICAgICBpZiAoa2V5c1RvSW5jcmVtZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpbmNyZW1lbnRQYXR0ZXJucyA9XG4gICAgICAgICAgICAnIHx8ICcgK1xuICAgICAgICAgICAga2V5c1RvSW5jcmVtZW50XG4gICAgICAgICAgICAgIC5tYXAoYyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYW1vdW50ID0gZmllbGRWYWx1ZVtjXS5hbW91bnQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBDT05DQVQoJ3tcIiR7Y31cIjonLCBDT0FMRVNDRSgkJHtpbmRleH06bmFtZS0+Picke2N9JywnMCcpOjppbnQgKyAke2Ftb3VudH0sICd9Jyk6Ompzb25iYDtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLmpvaW4oJyB8fCAnKTtcbiAgICAgICAgICAvLyBTdHJpcCB0aGUga2V5c1xuICAgICAgICAgIGtleXNUb0luY3JlbWVudC5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBkZWxldGUgZmllbGRWYWx1ZVtrZXldO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qga2V5c1RvRGVsZXRlOiBBcnJheTxzdHJpbmc+ID0gT2JqZWN0LmtleXMob3JpZ2luYWxVcGRhdGUpXG4gICAgICAgICAgLmZpbHRlcihrID0+IHtcbiAgICAgICAgICAgIC8vIGNob29zZSB0b3AgbGV2ZWwgZmllbGRzIHRoYXQgaGF2ZSBhIGRlbGV0ZSBvcGVyYXRpb24gc2V0LlxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBvcmlnaW5hbFVwZGF0ZVtrXTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIHZhbHVlICYmXG4gICAgICAgICAgICAgIHZhbHVlLl9fb3AgPT09ICdEZWxldGUnICYmXG4gICAgICAgICAgICAgIGsuc3BsaXQoJy4nKS5sZW5ndGggPT09IDIgJiZcbiAgICAgICAgICAgICAgay5zcGxpdCgnLicpWzBdID09PSBmaWVsZE5hbWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAubWFwKGsgPT4gay5zcGxpdCgnLicpWzFdKTtcblxuICAgICAgICBjb25zdCBkZWxldGVQYXR0ZXJucyA9IGtleXNUb0RlbGV0ZS5yZWR1Y2UoKHA6IHN0cmluZywgYzogc3RyaW5nLCBpOiBudW1iZXIpID0+IHtcbiAgICAgICAgICByZXR1cm4gcCArIGAgLSAnJCR7aW5kZXggKyAxICsgaX06dmFsdWUnYDtcbiAgICAgICAgfSwgJycpO1xuICAgICAgICAvLyBPdmVycmlkZSBPYmplY3RcbiAgICAgICAgbGV0IHVwZGF0ZU9iamVjdCA9IFwiJ3t9Jzo6anNvbmJcIjtcblxuICAgICAgICBpZiAoZG90Tm90YXRpb25PcHRpb25zW2ZpZWxkTmFtZV0pIHtcbiAgICAgICAgICAvLyBNZXJnZSBPYmplY3RcbiAgICAgICAgICB1cGRhdGVPYmplY3QgPSBgQ09BTEVTQ0UoJCR7aW5kZXh9Om5hbWUsICd7fSc6Ompzb25iKWA7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlUGF0dGVybnMucHVzaChcbiAgICAgICAgICBgJCR7aW5kZXh9Om5hbWUgPSAoJHt1cGRhdGVPYmplY3R9ICR7ZGVsZXRlUGF0dGVybnN9ICR7aW5jcmVtZW50UGF0dGVybnN9IHx8ICQke1xuICAgICAgICAgICAgaW5kZXggKyAxICsga2V5c1RvRGVsZXRlLmxlbmd0aFxuICAgICAgICAgIH06Ompzb25iIClgXG4gICAgICAgICk7XG4gICAgICAgIHZhbHVlcy5wdXNoKGZpZWxkTmFtZSwgLi4ua2V5c1RvRGVsZXRlLCBKU09OLnN0cmluZ2lmeShmaWVsZFZhbHVlKSk7XG4gICAgICAgIGluZGV4ICs9IDIgKyBrZXlzVG9EZWxldGUubGVuZ3RoO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgQXJyYXkuaXNBcnJheShmaWVsZFZhbHVlKSAmJlxuICAgICAgICBzY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0gJiZcbiAgICAgICAgc2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdLnR5cGUgPT09ICdBcnJheSdcbiAgICAgICkge1xuICAgICAgICBjb25zdCBleHBlY3RlZFR5cGUgPSBwYXJzZVR5cGVUb1Bvc3RncmVzVHlwZShzY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0pO1xuICAgICAgICBpZiAoZXhwZWN0ZWRUeXBlID09PSAndGV4dFtdJykge1xuICAgICAgICAgIHVwZGF0ZVBhdHRlcm5zLnB1c2goYCQke2luZGV4fTpuYW1lID0gJCR7aW5kZXggKyAxfTo6dGV4dFtdYCk7XG4gICAgICAgICAgdmFsdWVzLnB1c2goZmllbGROYW1lLCBmaWVsZFZhbHVlKTtcbiAgICAgICAgICBpbmRleCArPSAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwZGF0ZVBhdHRlcm5zLnB1c2goYCQke2luZGV4fTpuYW1lID0gJCR7aW5kZXggKyAxfTo6anNvbmJgKTtcbiAgICAgICAgICB2YWx1ZXMucHVzaChmaWVsZE5hbWUsIEpTT04uc3RyaW5naWZ5KGZpZWxkVmFsdWUpKTtcbiAgICAgICAgICBpbmRleCArPSAyO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1ZygnTm90IHN1cHBvcnRlZCB1cGRhdGUnLCB7IGZpZWxkTmFtZSwgZmllbGRWYWx1ZSB9KTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgIG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgICAgIFBhcnNlLkVycm9yLk9QRVJBVElPTl9GT1JCSURERU4sXG4gICAgICAgICAgICBgUG9zdGdyZXMgZG9lc24ndCBzdXBwb3J0IHVwZGF0ZSAke0pTT04uc3RyaW5naWZ5KGZpZWxkVmFsdWUpfSB5ZXRgXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHdoZXJlID0gYnVpbGRXaGVyZUNsYXVzZSh7XG4gICAgICBzY2hlbWEsXG4gICAgICBpbmRleCxcbiAgICAgIHF1ZXJ5LFxuICAgICAgY2FzZUluc2Vuc2l0aXZlOiBmYWxzZSxcbiAgICB9KTtcbiAgICB2YWx1ZXMucHVzaCguLi53aGVyZS52YWx1ZXMpO1xuXG4gICAgY29uc3Qgd2hlcmVDbGF1c2UgPSB3aGVyZS5wYXR0ZXJuLmxlbmd0aCA+IDAgPyBgV0hFUkUgJHt3aGVyZS5wYXR0ZXJufWAgOiAnJztcbiAgICBjb25zdCBxcyA9IGBVUERBVEUgJDE6bmFtZSBTRVQgJHt1cGRhdGVQYXR0ZXJucy5qb2luKCl9ICR7d2hlcmVDbGF1c2V9IFJFVFVSTklORyAqYDtcbiAgICBjb25zdCBwcm9taXNlID0gKHRyYW5zYWN0aW9uYWxTZXNzaW9uID8gdHJhbnNhY3Rpb25hbFNlc3Npb24udCA6IHRoaXMuX2NsaWVudCkuYW55KHFzLCB2YWx1ZXMpO1xuICAgIGlmICh0cmFuc2FjdGlvbmFsU2Vzc2lvbikge1xuICAgICAgdHJhbnNhY3Rpb25hbFNlc3Npb24uYmF0Y2gucHVzaChwcm9taXNlKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICAvLyBIb3BlZnVsbHksIHdlIGNhbiBnZXQgcmlkIG9mIHRoaXMuIEl0J3Mgb25seSB1c2VkIGZvciBjb25maWcgYW5kIGhvb2tzLlxuICB1cHNlcnRPbmVPYmplY3QoXG4gICAgY2xhc3NOYW1lOiBzdHJpbmcsXG4gICAgc2NoZW1hOiBTY2hlbWFUeXBlLFxuICAgIHF1ZXJ5OiBRdWVyeVR5cGUsXG4gICAgdXBkYXRlOiBhbnksXG4gICAgdHJhbnNhY3Rpb25hbFNlc3Npb246ID9hbnlcbiAgKSB7XG4gICAgZGVidWcoJ3Vwc2VydE9uZU9iamVjdCcpO1xuICAgIGNvbnN0IGNyZWF0ZVZhbHVlID0gT2JqZWN0LmFzc2lnbih7fSwgcXVlcnksIHVwZGF0ZSk7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlT2JqZWN0KGNsYXNzTmFtZSwgc2NoZW1hLCBjcmVhdGVWYWx1ZSwgdHJhbnNhY3Rpb25hbFNlc3Npb24pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIC8vIGlnbm9yZSBkdXBsaWNhdGUgdmFsdWUgZXJyb3JzIGFzIGl0J3MgdXBzZXJ0XG4gICAgICBpZiAoZXJyb3IuY29kZSAhPT0gUGFyc2UuRXJyb3IuRFVQTElDQVRFX1ZBTFVFKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZmluZE9uZUFuZFVwZGF0ZShjbGFzc05hbWUsIHNjaGVtYSwgcXVlcnksIHVwZGF0ZSwgdHJhbnNhY3Rpb25hbFNlc3Npb24pO1xuICAgIH0pO1xuICB9XG5cbiAgZmluZChcbiAgICBjbGFzc05hbWU6IHN0cmluZyxcbiAgICBzY2hlbWE6IFNjaGVtYVR5cGUsXG4gICAgcXVlcnk6IFF1ZXJ5VHlwZSxcbiAgICB7IHNraXAsIGxpbWl0LCBzb3J0LCBrZXlzLCBjYXNlSW5zZW5zaXRpdmUsIGV4cGxhaW4gfTogUXVlcnlPcHRpb25zXG4gICkge1xuICAgIGRlYnVnKCdmaW5kJyk7XG4gICAgY29uc3QgaGFzTGltaXQgPSBsaW1pdCAhPT0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IGhhc1NraXAgPSBza2lwICE9PSB1bmRlZmluZWQ7XG4gICAgbGV0IHZhbHVlcyA9IFtjbGFzc05hbWVdO1xuICAgIGNvbnN0IHdoZXJlID0gYnVpbGRXaGVyZUNsYXVzZSh7XG4gICAgICBzY2hlbWEsXG4gICAgICBxdWVyeSxcbiAgICAgIGluZGV4OiAyLFxuICAgICAgY2FzZUluc2Vuc2l0aXZlLFxuICAgIH0pO1xuICAgIHZhbHVlcy5wdXNoKC4uLndoZXJlLnZhbHVlcyk7XG5cbiAgICBjb25zdCB3aGVyZVBhdHRlcm4gPSB3aGVyZS5wYXR0ZXJuLmxlbmd0aCA+IDAgPyBgV0hFUkUgJHt3aGVyZS5wYXR0ZXJufWAgOiAnJztcbiAgICBjb25zdCBsaW1pdFBhdHRlcm4gPSBoYXNMaW1pdCA/IGBMSU1JVCAkJHt2YWx1ZXMubGVuZ3RoICsgMX1gIDogJyc7XG4gICAgaWYgKGhhc0xpbWl0KSB7XG4gICAgICB2YWx1ZXMucHVzaChsaW1pdCk7XG4gICAgfVxuICAgIGNvbnN0IHNraXBQYXR0ZXJuID0gaGFzU2tpcCA/IGBPRkZTRVQgJCR7dmFsdWVzLmxlbmd0aCArIDF9YCA6ICcnO1xuICAgIGlmIChoYXNTa2lwKSB7XG4gICAgICB2YWx1ZXMucHVzaChza2lwKTtcbiAgICB9XG5cbiAgICBsZXQgc29ydFBhdHRlcm4gPSAnJztcbiAgICBpZiAoc29ydCkge1xuICAgICAgY29uc3Qgc29ydENvcHk6IGFueSA9IHNvcnQ7XG4gICAgICBjb25zdCBzb3J0aW5nID0gT2JqZWN0LmtleXMoc29ydClcbiAgICAgICAgLm1hcChrZXkgPT4ge1xuICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybUtleSA9IHRyYW5zZm9ybURvdEZpZWxkVG9Db21wb25lbnRzKGtleSkuam9pbignLT4nKTtcbiAgICAgICAgICAvLyBVc2luZyAkaWR4IHBhdHRlcm4gZ2l2ZXM6ICBub24taW50ZWdlciBjb25zdGFudCBpbiBPUkRFUiBCWVxuICAgICAgICAgIGlmIChzb3J0Q29weVtrZXldID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7dHJhbnNmb3JtS2V5fSBBU0NgO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYCR7dHJhbnNmb3JtS2V5fSBERVNDYDtcbiAgICAgICAgfSlcbiAgICAgICAgLmpvaW4oKTtcbiAgICAgIHNvcnRQYXR0ZXJuID0gc29ydCAhPT0gdW5kZWZpbmVkICYmIE9iamVjdC5rZXlzKHNvcnQpLmxlbmd0aCA+IDAgPyBgT1JERVIgQlkgJHtzb3J0aW5nfWAgOiAnJztcbiAgICB9XG4gICAgaWYgKHdoZXJlLnNvcnRzICYmIE9iamVjdC5rZXlzKCh3aGVyZS5zb3J0czogYW55KSkubGVuZ3RoID4gMCkge1xuICAgICAgc29ydFBhdHRlcm4gPSBgT1JERVIgQlkgJHt3aGVyZS5zb3J0cy5qb2luKCl9YDtcbiAgICB9XG5cbiAgICBsZXQgY29sdW1ucyA9ICcqJztcbiAgICBpZiAoa2V5cykge1xuICAgICAgLy8gRXhjbHVkZSBlbXB0eSBrZXlzXG4gICAgICAvLyBSZXBsYWNlIEFDTCBieSBpdCdzIGtleXNcbiAgICAgIGtleXMgPSBrZXlzLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gICAgICAgIGlmIChrZXkgPT09ICdBQ0wnKSB7XG4gICAgICAgICAgbWVtby5wdXNoKCdfcnBlcm0nKTtcbiAgICAgICAgICBtZW1vLnB1c2goJ193cGVybScpO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGtleS5sZW5ndGggPiAwICYmXG4gICAgICAgICAgLy8gUmVtb3ZlIHNlbGVjdGVkIGZpZWxkIG5vdCByZWZlcmVuY2VkIGluIHRoZSBzY2hlbWFcbiAgICAgICAgICAvLyBSZWxhdGlvbiBpcyBub3QgYSBjb2x1bW4gaW4gcG9zdGdyZXNcbiAgICAgICAgICAvLyAkc2NvcmUgaXMgYSBQYXJzZSBzcGVjaWFsIGZpZWxkIGFuZCBpcyBhbHNvIG5vdCBhIGNvbHVtblxuICAgICAgICAgICgoc2NoZW1hLmZpZWxkc1trZXldICYmIHNjaGVtYS5maWVsZHNba2V5XS50eXBlICE9PSAnUmVsYXRpb24nKSB8fCBrZXkgPT09ICckc2NvcmUnKVxuICAgICAgICApIHtcbiAgICAgICAgICBtZW1vLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIFtdKTtcbiAgICAgIGNvbHVtbnMgPSBrZXlzXG4gICAgICAgIC5tYXAoKGtleSwgaW5kZXgpID0+IHtcbiAgICAgICAgICBpZiAoa2V5ID09PSAnJHNjb3JlJykge1xuICAgICAgICAgICAgcmV0dXJuIGB0c19yYW5rX2NkKHRvX3RzdmVjdG9yKCQkezJ9LCAkJHszfTpuYW1lKSwgdG9fdHNxdWVyeSgkJHs0fSwgJCR7NX0pLCAzMikgYXMgc2NvcmVgO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYCQke2luZGV4ICsgdmFsdWVzLmxlbmd0aCArIDF9Om5hbWVgO1xuICAgICAgICB9KVxuICAgICAgICAuam9pbigpO1xuICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdChrZXlzKTtcbiAgICB9XG5cbiAgICBjb25zdCBvcmlnaW5hbFF1ZXJ5ID0gYFNFTEVDVCAke2NvbHVtbnN9IEZST00gJDE6bmFtZSAke3doZXJlUGF0dGVybn0gJHtzb3J0UGF0dGVybn0gJHtsaW1pdFBhdHRlcm59ICR7c2tpcFBhdHRlcm59YDtcbiAgICBjb25zdCBxcyA9IGV4cGxhaW4gPyB0aGlzLmNyZWF0ZUV4cGxhaW5hYmxlUXVlcnkob3JpZ2luYWxRdWVyeSkgOiBvcmlnaW5hbFF1ZXJ5O1xuICAgIHJldHVybiB0aGlzLl9jbGllbnRcbiAgICAgIC5hbnkocXMsIHZhbHVlcylcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIC8vIFF1ZXJ5IG9uIG5vbiBleGlzdGluZyB0YWJsZSwgZG9uJ3QgY3Jhc2hcbiAgICAgICAgaWYgKGVycm9yLmNvZGUgIT09IFBvc3RncmVzUmVsYXRpb25Eb2VzTm90RXhpc3RFcnJvcikge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH0pXG4gICAgICAudGhlbihyZXN1bHRzID0+IHtcbiAgICAgICAgaWYgKGV4cGxhaW4pIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cy5tYXAob2JqZWN0ID0+IHRoaXMucG9zdGdyZXNPYmplY3RUb1BhcnNlT2JqZWN0KGNsYXNzTmFtZSwgb2JqZWN0LCBzY2hlbWEpKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLy8gQ29udmVydHMgZnJvbSBhIHBvc3RncmVzLWZvcm1hdCBvYmplY3QgdG8gYSBSRVNULWZvcm1hdCBvYmplY3QuXG4gIC8vIERvZXMgbm90IHN0cmlwIG91dCBhbnl0aGluZyBiYXNlZCBvbiBhIGxhY2sgb2YgYXV0aGVudGljYXRpb24uXG4gIHBvc3RncmVzT2JqZWN0VG9QYXJzZU9iamVjdChjbGFzc05hbWU6IHN0cmluZywgb2JqZWN0OiBhbnksIHNjaGVtYTogYW55KSB7XG4gICAgT2JqZWN0LmtleXMoc2NoZW1hLmZpZWxkcykuZm9yRWFjaChmaWVsZE5hbWUgPT4ge1xuICAgICAgaWYgKHNjaGVtYS5maWVsZHNbZmllbGROYW1lXS50eXBlID09PSAnUG9pbnRlcicgJiYgb2JqZWN0W2ZpZWxkTmFtZV0pIHtcbiAgICAgICAgb2JqZWN0W2ZpZWxkTmFtZV0gPSB7XG4gICAgICAgICAgb2JqZWN0SWQ6IG9iamVjdFtmaWVsZE5hbWVdLFxuICAgICAgICAgIF9fdHlwZTogJ1BvaW50ZXInLFxuICAgICAgICAgIGNsYXNzTmFtZTogc2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdLnRhcmdldENsYXNzLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKHNjaGVtYS5maWVsZHNbZmllbGROYW1lXS50eXBlID09PSAnUmVsYXRpb24nKSB7XG4gICAgICAgIG9iamVjdFtmaWVsZE5hbWVdID0ge1xuICAgICAgICAgIF9fdHlwZTogJ1JlbGF0aW9uJyxcbiAgICAgICAgICBjbGFzc05hbWU6IHNjaGVtYS5maWVsZHNbZmllbGROYW1lXS50YXJnZXRDbGFzcyxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmIChvYmplY3RbZmllbGROYW1lXSAmJiBzY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0udHlwZSA9PT0gJ0dlb1BvaW50Jykge1xuICAgICAgICBvYmplY3RbZmllbGROYW1lXSA9IHtcbiAgICAgICAgICBfX3R5cGU6ICdHZW9Qb2ludCcsXG4gICAgICAgICAgbGF0aXR1ZGU6IG9iamVjdFtmaWVsZE5hbWVdLnksXG4gICAgICAgICAgbG9uZ2l0dWRlOiBvYmplY3RbZmllbGROYW1lXS54LFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKG9iamVjdFtmaWVsZE5hbWVdICYmIHNjaGVtYS5maWVsZHNbZmllbGROYW1lXS50eXBlID09PSAnUG9seWdvbicpIHtcbiAgICAgICAgbGV0IGNvb3JkcyA9IG9iamVjdFtmaWVsZE5hbWVdO1xuICAgICAgICBjb29yZHMgPSBjb29yZHMuc3Vic3RyKDIsIGNvb3Jkcy5sZW5ndGggLSA0KS5zcGxpdCgnKSwoJyk7XG4gICAgICAgIGNvb3JkcyA9IGNvb3Jkcy5tYXAocG9pbnQgPT4ge1xuICAgICAgICAgIHJldHVybiBbcGFyc2VGbG9hdChwb2ludC5zcGxpdCgnLCcpWzFdKSwgcGFyc2VGbG9hdChwb2ludC5zcGxpdCgnLCcpWzBdKV07XG4gICAgICAgIH0pO1xuICAgICAgICBvYmplY3RbZmllbGROYW1lXSA9IHtcbiAgICAgICAgICBfX3R5cGU6ICdQb2x5Z29uJyxcbiAgICAgICAgICBjb29yZGluYXRlczogY29vcmRzLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKG9iamVjdFtmaWVsZE5hbWVdICYmIHNjaGVtYS5maWVsZHNbZmllbGROYW1lXS50eXBlID09PSAnRmlsZScpIHtcbiAgICAgICAgb2JqZWN0W2ZpZWxkTmFtZV0gPSB7XG4gICAgICAgICAgX190eXBlOiAnRmlsZScsXG4gICAgICAgICAgbmFtZTogb2JqZWN0W2ZpZWxkTmFtZV0sXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy9UT0RPOiByZW1vdmUgdGhpcyByZWxpYW5jZSBvbiB0aGUgbW9uZ28gZm9ybWF0LiBEQiBhZGFwdGVyIHNob3VsZG4ndCBrbm93IHRoZXJlIGlzIGEgZGlmZmVyZW5jZSBiZXR3ZWVuIGNyZWF0ZWQgYXQgYW5kIGFueSBvdGhlciBkYXRlIGZpZWxkLlxuICAgIGlmIChvYmplY3QuY3JlYXRlZEF0KSB7XG4gICAgICBvYmplY3QuY3JlYXRlZEF0ID0gb2JqZWN0LmNyZWF0ZWRBdC50b0lTT1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAob2JqZWN0LnVwZGF0ZWRBdCkge1xuICAgICAgb2JqZWN0LnVwZGF0ZWRBdCA9IG9iamVjdC51cGRhdGVkQXQudG9JU09TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKG9iamVjdC5leHBpcmVzQXQpIHtcbiAgICAgIG9iamVjdC5leHBpcmVzQXQgPSB7XG4gICAgICAgIF9fdHlwZTogJ0RhdGUnLFxuICAgICAgICBpc286IG9iamVjdC5leHBpcmVzQXQudG9JU09TdHJpbmcoKSxcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChvYmplY3QuX2VtYWlsX3ZlcmlmeV90b2tlbl9leHBpcmVzX2F0KSB7XG4gICAgICBvYmplY3QuX2VtYWlsX3ZlcmlmeV90b2tlbl9leHBpcmVzX2F0ID0ge1xuICAgICAgICBfX3R5cGU6ICdEYXRlJyxcbiAgICAgICAgaXNvOiBvYmplY3QuX2VtYWlsX3ZlcmlmeV90b2tlbl9leHBpcmVzX2F0LnRvSVNPU3RyaW5nKCksXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAob2JqZWN0Ll9hY2NvdW50X2xvY2tvdXRfZXhwaXJlc19hdCkge1xuICAgICAgb2JqZWN0Ll9hY2NvdW50X2xvY2tvdXRfZXhwaXJlc19hdCA9IHtcbiAgICAgICAgX190eXBlOiAnRGF0ZScsXG4gICAgICAgIGlzbzogb2JqZWN0Ll9hY2NvdW50X2xvY2tvdXRfZXhwaXJlc19hdC50b0lTT1N0cmluZygpLFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG9iamVjdC5fcGVyaXNoYWJsZV90b2tlbl9leHBpcmVzX2F0KSB7XG4gICAgICBvYmplY3QuX3BlcmlzaGFibGVfdG9rZW5fZXhwaXJlc19hdCA9IHtcbiAgICAgICAgX190eXBlOiAnRGF0ZScsXG4gICAgICAgIGlzbzogb2JqZWN0Ll9wZXJpc2hhYmxlX3Rva2VuX2V4cGlyZXNfYXQudG9JU09TdHJpbmcoKSxcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChvYmplY3QuX3Bhc3N3b3JkX2NoYW5nZWRfYXQpIHtcbiAgICAgIG9iamVjdC5fcGFzc3dvcmRfY2hhbmdlZF9hdCA9IHtcbiAgICAgICAgX190eXBlOiAnRGF0ZScsXG4gICAgICAgIGlzbzogb2JqZWN0Ll9wYXNzd29yZF9jaGFuZ2VkX2F0LnRvSVNPU3RyaW5nKCksXG4gICAgICB9O1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgZmllbGROYW1lIGluIG9iamVjdCkge1xuICAgICAgaWYgKG9iamVjdFtmaWVsZE5hbWVdID09PSBudWxsKSB7XG4gICAgICAgIGRlbGV0ZSBvYmplY3RbZmllbGROYW1lXTtcbiAgICAgIH1cbiAgICAgIGlmIChvYmplY3RbZmllbGROYW1lXSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgb2JqZWN0W2ZpZWxkTmFtZV0gPSB7XG4gICAgICAgICAgX190eXBlOiAnRGF0ZScsXG4gICAgICAgICAgaXNvOiBvYmplY3RbZmllbGROYW1lXS50b0lTT1N0cmluZygpLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cblxuICAvLyBDcmVhdGUgYSB1bmlxdWUgaW5kZXguIFVuaXF1ZSBpbmRleGVzIG9uIG51bGxhYmxlIGZpZWxkcyBhcmUgbm90IGFsbG93ZWQuIFNpbmNlIHdlIGRvbid0XG4gIC8vIGN1cnJlbnRseSBrbm93IHdoaWNoIGZpZWxkcyBhcmUgbnVsbGFibGUgYW5kIHdoaWNoIGFyZW4ndCwgd2UgaWdub3JlIHRoYXQgY3JpdGVyaWEuXG4gIC8vIEFzIHN1Y2gsIHdlIHNob3VsZG4ndCBleHBvc2UgdGhpcyBmdW5jdGlvbiB0byB1c2VycyBvZiBwYXJzZSB1bnRpbCB3ZSBoYXZlIGFuIG91dC1vZi1iYW5kXG4gIC8vIFdheSBvZiBkZXRlcm1pbmluZyBpZiBhIGZpZWxkIGlzIG51bGxhYmxlLiBVbmRlZmluZWQgZG9lc24ndCBjb3VudCBhZ2FpbnN0IHVuaXF1ZW5lc3MsXG4gIC8vIHdoaWNoIGlzIHdoeSB3ZSB1c2Ugc3BhcnNlIGluZGV4ZXMuXG4gIGFzeW5jIGVuc3VyZVVuaXF1ZW5lc3MoY2xhc3NOYW1lOiBzdHJpbmcsIHNjaGVtYTogU2NoZW1hVHlwZSwgZmllbGROYW1lczogc3RyaW5nW10pIHtcbiAgICBjb25zdCBjb25zdHJhaW50TmFtZSA9IGAke2NsYXNzTmFtZX1fdW5pcXVlXyR7ZmllbGROYW1lcy5zb3J0KCkuam9pbignXycpfWA7XG4gICAgY29uc3QgY29uc3RyYWludFBhdHRlcm5zID0gZmllbGROYW1lcy5tYXAoKGZpZWxkTmFtZSwgaW5kZXgpID0+IGAkJHtpbmRleCArIDN9Om5hbWVgKTtcbiAgICBjb25zdCBxcyA9IGBDUkVBVEUgVU5JUVVFIElOREVYIElGIE5PVCBFWElTVFMgJDI6bmFtZSBPTiAkMTpuYW1lKCR7Y29uc3RyYWludFBhdHRlcm5zLmpvaW4oKX0pYDtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50Lm5vbmUocXMsIFtjbGFzc05hbWUsIGNvbnN0cmFpbnROYW1lLCAuLi5maWVsZE5hbWVzXSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgaWYgKGVycm9yLmNvZGUgPT09IFBvc3RncmVzRHVwbGljYXRlUmVsYXRpb25FcnJvciAmJiBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKGNvbnN0cmFpbnROYW1lKSkge1xuICAgICAgICAvLyBJbmRleCBhbHJlYWR5IGV4aXN0cy4gSWdub3JlIGVycm9yLlxuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgZXJyb3IuY29kZSA9PT0gUG9zdGdyZXNVbmlxdWVJbmRleFZpb2xhdGlvbkVycm9yICYmXG4gICAgICAgIGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoY29uc3RyYWludE5hbWUpXG4gICAgICApIHtcbiAgICAgICAgLy8gQ2FzdCB0aGUgZXJyb3IgaW50byB0aGUgcHJvcGVyIHBhcnNlIGVycm9yXG4gICAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgICBQYXJzZS5FcnJvci5EVVBMSUNBVEVfVkFMVUUsXG4gICAgICAgICAgJ0EgZHVwbGljYXRlIHZhbHVlIGZvciBhIGZpZWxkIHdpdGggdW5pcXVlIHZhbHVlcyB3YXMgcHJvdmlkZWQnXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vIEV4ZWN1dGVzIGEgY291bnQuXG4gIGFzeW5jIGNvdW50KFxuICAgIGNsYXNzTmFtZTogc3RyaW5nLFxuICAgIHNjaGVtYTogU2NoZW1hVHlwZSxcbiAgICBxdWVyeTogUXVlcnlUeXBlLFxuICAgIHJlYWRQcmVmZXJlbmNlPzogc3RyaW5nLFxuICAgIGVzdGltYXRlPzogYm9vbGVhbiA9IHRydWVcbiAgKSB7XG4gICAgZGVidWcoJ2NvdW50Jyk7XG4gICAgY29uc3QgdmFsdWVzID0gW2NsYXNzTmFtZV07XG4gICAgY29uc3Qgd2hlcmUgPSBidWlsZFdoZXJlQ2xhdXNlKHtcbiAgICAgIHNjaGVtYSxcbiAgICAgIHF1ZXJ5LFxuICAgICAgaW5kZXg6IDIsXG4gICAgICBjYXNlSW5zZW5zaXRpdmU6IGZhbHNlLFxuICAgIH0pO1xuICAgIHZhbHVlcy5wdXNoKC4uLndoZXJlLnZhbHVlcyk7XG5cbiAgICBjb25zdCB3aGVyZVBhdHRlcm4gPSB3aGVyZS5wYXR0ZXJuLmxlbmd0aCA+IDAgPyBgV0hFUkUgJHt3aGVyZS5wYXR0ZXJufWAgOiAnJztcbiAgICBsZXQgcXMgPSAnJztcblxuICAgIGlmICh3aGVyZS5wYXR0ZXJuLmxlbmd0aCA+IDAgfHwgIWVzdGltYXRlKSB7XG4gICAgICBxcyA9IGBTRUxFQ1QgY291bnQoKikgRlJPTSAkMTpuYW1lICR7d2hlcmVQYXR0ZXJufWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHFzID0gJ1NFTEVDVCByZWx0dXBsZXMgQVMgYXBwcm94aW1hdGVfcm93X2NvdW50IEZST00gcGdfY2xhc3MgV0hFUkUgcmVsbmFtZSA9ICQxJztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fY2xpZW50XG4gICAgICAub25lKHFzLCB2YWx1ZXMsIGEgPT4ge1xuICAgICAgICBpZiAoYS5hcHByb3hpbWF0ZV9yb3dfY291bnQgPT0gbnVsbCB8fCBhLmFwcHJveGltYXRlX3Jvd19jb3VudCA9PSAtMSkge1xuICAgICAgICAgIHJldHVybiAhaXNOYU4oK2EuY291bnQpID8gK2EuY291bnQgOiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiArYS5hcHByb3hpbWF0ZV9yb3dfY291bnQ7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBpZiAoZXJyb3IuY29kZSAhPT0gUG9zdGdyZXNSZWxhdGlvbkRvZXNOb3RFeGlzdEVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGRpc3RpbmN0KGNsYXNzTmFtZTogc3RyaW5nLCBzY2hlbWE6IFNjaGVtYVR5cGUsIHF1ZXJ5OiBRdWVyeVR5cGUsIGZpZWxkTmFtZTogc3RyaW5nKSB7XG4gICAgZGVidWcoJ2Rpc3RpbmN0Jyk7XG4gICAgbGV0IGZpZWxkID0gZmllbGROYW1lO1xuICAgIGxldCBjb2x1bW4gPSBmaWVsZE5hbWU7XG4gICAgY29uc3QgaXNOZXN0ZWQgPSBmaWVsZE5hbWUuaW5kZXhPZignLicpID49IDA7XG4gICAgaWYgKGlzTmVzdGVkKSB7XG4gICAgICBmaWVsZCA9IHRyYW5zZm9ybURvdEZpZWxkVG9Db21wb25lbnRzKGZpZWxkTmFtZSkuam9pbignLT4nKTtcbiAgICAgIGNvbHVtbiA9IGZpZWxkTmFtZS5zcGxpdCgnLicpWzBdO1xuICAgIH1cbiAgICBjb25zdCBpc0FycmF5RmllbGQgPVxuICAgICAgc2NoZW1hLmZpZWxkcyAmJiBzY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0gJiYgc2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdLnR5cGUgPT09ICdBcnJheSc7XG4gICAgY29uc3QgaXNQb2ludGVyRmllbGQgPVxuICAgICAgc2NoZW1hLmZpZWxkcyAmJiBzY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0gJiYgc2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdLnR5cGUgPT09ICdQb2ludGVyJztcbiAgICBjb25zdCB2YWx1ZXMgPSBbZmllbGQsIGNvbHVtbiwgY2xhc3NOYW1lXTtcbiAgICBjb25zdCB3aGVyZSA9IGJ1aWxkV2hlcmVDbGF1c2Uoe1xuICAgICAgc2NoZW1hLFxuICAgICAgcXVlcnksXG4gICAgICBpbmRleDogNCxcbiAgICAgIGNhc2VJbnNlbnNpdGl2ZTogZmFsc2UsXG4gICAgfSk7XG4gICAgdmFsdWVzLnB1c2goLi4ud2hlcmUudmFsdWVzKTtcblxuICAgIGNvbnN0IHdoZXJlUGF0dGVybiA9IHdoZXJlLnBhdHRlcm4ubGVuZ3RoID4gMCA/IGBXSEVSRSAke3doZXJlLnBhdHRlcm59YCA6ICcnO1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gaXNBcnJheUZpZWxkID8gJ2pzb25iX2FycmF5X2VsZW1lbnRzJyA6ICdPTic7XG4gICAgbGV0IHFzID0gYFNFTEVDVCBESVNUSU5DVCAke3RyYW5zZm9ybWVyfSgkMTpuYW1lKSAkMjpuYW1lIEZST00gJDM6bmFtZSAke3doZXJlUGF0dGVybn1gO1xuICAgIGlmIChpc05lc3RlZCkge1xuICAgICAgcXMgPSBgU0VMRUNUIERJU1RJTkNUICR7dHJhbnNmb3JtZXJ9KCQxOnJhdykgJDI6cmF3IEZST00gJDM6bmFtZSAke3doZXJlUGF0dGVybn1gO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2xpZW50XG4gICAgICAuYW55KHFzLCB2YWx1ZXMpXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gUG9zdGdyZXNNaXNzaW5nQ29sdW1uRXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9KVxuICAgICAgLnRoZW4ocmVzdWx0cyA9PiB7XG4gICAgICAgIGlmICghaXNOZXN0ZWQpIHtcbiAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIob2JqZWN0ID0+IG9iamVjdFtmaWVsZF0gIT09IG51bGwpO1xuICAgICAgICAgIHJldHVybiByZXN1bHRzLm1hcChvYmplY3QgPT4ge1xuICAgICAgICAgICAgaWYgKCFpc1BvaW50ZXJGaWVsZCkge1xuICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0W2ZpZWxkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIF9fdHlwZTogJ1BvaW50ZXInLFxuICAgICAgICAgICAgICBjbGFzc05hbWU6IHNjaGVtYS5maWVsZHNbZmllbGROYW1lXS50YXJnZXRDbGFzcyxcbiAgICAgICAgICAgICAgb2JqZWN0SWQ6IG9iamVjdFtmaWVsZF0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoaWxkID0gZmllbGROYW1lLnNwbGl0KCcuJylbMV07XG4gICAgICAgIHJldHVybiByZXN1bHRzLm1hcChvYmplY3QgPT4gb2JqZWN0W2NvbHVtbl1bY2hpbGRdKTtcbiAgICAgIH0pXG4gICAgICAudGhlbihyZXN1bHRzID0+XG4gICAgICAgIHJlc3VsdHMubWFwKG9iamVjdCA9PiB0aGlzLnBvc3RncmVzT2JqZWN0VG9QYXJzZU9iamVjdChjbGFzc05hbWUsIG9iamVjdCwgc2NoZW1hKSlcbiAgICAgICk7XG4gIH1cblxuICBhc3luYyBhZ2dyZWdhdGUoXG4gICAgY2xhc3NOYW1lOiBzdHJpbmcsXG4gICAgc2NoZW1hOiBhbnksXG4gICAgcGlwZWxpbmU6IGFueSxcbiAgICByZWFkUHJlZmVyZW5jZTogP3N0cmluZyxcbiAgICBoaW50OiA/bWl4ZWQsXG4gICAgZXhwbGFpbj86IGJvb2xlYW5cbiAgKSB7XG4gICAgZGVidWcoJ2FnZ3JlZ2F0ZScpO1xuICAgIGNvbnN0IHZhbHVlcyA9IFtjbGFzc05hbWVdO1xuICAgIGxldCBpbmRleDogbnVtYmVyID0gMjtcbiAgICBsZXQgY29sdW1uczogc3RyaW5nW10gPSBbXTtcbiAgICBsZXQgY291bnRGaWVsZCA9IG51bGw7XG4gICAgbGV0IGdyb3VwVmFsdWVzID0gbnVsbDtcbiAgICBsZXQgd2hlcmVQYXR0ZXJuID0gJyc7XG4gICAgbGV0IGxpbWl0UGF0dGVybiA9ICcnO1xuICAgIGxldCBza2lwUGF0dGVybiA9ICcnO1xuICAgIGxldCBzb3J0UGF0dGVybiA9ICcnO1xuICAgIGxldCBncm91cFBhdHRlcm4gPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBpcGVsaW5lLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBzdGFnZSA9IHBpcGVsaW5lW2ldO1xuICAgICAgaWYgKHN0YWdlLiRncm91cCkge1xuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIGluIHN0YWdlLiRncm91cCkge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gc3RhZ2UuJGdyb3VwW2ZpZWxkXTtcbiAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmaWVsZCA9PT0gJ19pZCcgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gJycpIHtcbiAgICAgICAgICAgIGNvbHVtbnMucHVzaChgJCR7aW5kZXh9Om5hbWUgQVMgXCJvYmplY3RJZFwiYCk7XG4gICAgICAgICAgICBncm91cFBhdHRlcm4gPSBgR1JPVVAgQlkgJCR7aW5kZXh9Om5hbWVgO1xuICAgICAgICAgICAgdmFsdWVzLnB1c2godHJhbnNmb3JtQWdncmVnYXRlRmllbGQodmFsdWUpKTtcbiAgICAgICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZpZWxkID09PSAnX2lkJyAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGdyb3VwVmFsdWVzID0gdmFsdWU7XG4gICAgICAgICAgICBjb25zdCBncm91cEJ5RmllbGRzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGFsaWFzIGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWVbYWxpYXNdID09PSAnc3RyaW5nJyAmJiB2YWx1ZVthbGlhc10pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSB0cmFuc2Zvcm1BZ2dyZWdhdGVGaWVsZCh2YWx1ZVthbGlhc10pO1xuICAgICAgICAgICAgICAgIGlmICghZ3JvdXBCeUZpZWxkcy5pbmNsdWRlcyhgXCIke3NvdXJjZX1cImApKSB7XG4gICAgICAgICAgICAgICAgICBncm91cEJ5RmllbGRzLnB1c2goYFwiJHtzb3VyY2V9XCJgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goc291cmNlLCBhbGlhcyk7XG4gICAgICAgICAgICAgICAgY29sdW1ucy5wdXNoKGAkJHtpbmRleH06bmFtZSBBUyAkJHtpbmRleCArIDF9Om5hbWVgKTtcbiAgICAgICAgICAgICAgICBpbmRleCArPSAyO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IE9iamVjdC5rZXlzKHZhbHVlW2FsaWFzXSlbMF07XG4gICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gdHJhbnNmb3JtQWdncmVnYXRlRmllbGQodmFsdWVbYWxpYXNdW29wZXJhdGlvbl0pO1xuICAgICAgICAgICAgICAgIGlmIChtb25nb0FnZ3JlZ2F0ZVRvUG9zdGdyZXNbb3BlcmF0aW9uXSkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFncm91cEJ5RmllbGRzLmluY2x1ZGVzKGBcIiR7c291cmNlfVwiYCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBCeUZpZWxkcy5wdXNoKGBcIiR7c291cmNlfVwiYCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjb2x1bW5zLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIGBFWFRSQUNUKCR7XG4gICAgICAgICAgICAgICAgICAgICAgbW9uZ29BZ2dyZWdhdGVUb1Bvc3RncmVzW29wZXJhdGlvbl1cbiAgICAgICAgICAgICAgICAgICAgfSBGUk9NICQke2luZGV4fTpuYW1lIEFUIFRJTUUgWk9ORSAnVVRDJyk6OmludGVnZXIgQVMgJCR7aW5kZXggKyAxfTpuYW1lYFxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHNvdXJjZSwgYWxpYXMpO1xuICAgICAgICAgICAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdyb3VwUGF0dGVybiA9IGBHUk9VUCBCWSAkJHtpbmRleH06cmF3YDtcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKGdyb3VwQnlGaWVsZHMuam9pbigpKTtcbiAgICAgICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS4kc3VtKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUuJHN1bSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb2x1bW5zLnB1c2goYFNVTSgkJHtpbmRleH06bmFtZSkgQVMgJCR7aW5kZXggKyAxfTpuYW1lYCk7XG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2godHJhbnNmb3JtQWdncmVnYXRlRmllbGQodmFsdWUuJHN1bSksIGZpZWxkKTtcbiAgICAgICAgICAgICAgICBpbmRleCArPSAyO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvdW50RmllbGQgPSBmaWVsZDtcbiAgICAgICAgICAgICAgICBjb2x1bW5zLnB1c2goYENPVU5UKCopIEFTICQke2luZGV4fTpuYW1lYCk7XG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goZmllbGQpO1xuICAgICAgICAgICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZS4kbWF4KSB7XG4gICAgICAgICAgICAgIGNvbHVtbnMucHVzaChgTUFYKCQke2luZGV4fTpuYW1lKSBBUyAkJHtpbmRleCArIDF9Om5hbWVgKTtcbiAgICAgICAgICAgICAgdmFsdWVzLnB1c2godHJhbnNmb3JtQWdncmVnYXRlRmllbGQodmFsdWUuJG1heCksIGZpZWxkKTtcbiAgICAgICAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZS4kbWluKSB7XG4gICAgICAgICAgICAgIGNvbHVtbnMucHVzaChgTUlOKCQke2luZGV4fTpuYW1lKSBBUyAkJHtpbmRleCArIDF9Om5hbWVgKTtcbiAgICAgICAgICAgICAgdmFsdWVzLnB1c2godHJhbnNmb3JtQWdncmVnYXRlRmllbGQodmFsdWUuJG1pbiksIGZpZWxkKTtcbiAgICAgICAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZS4kYXZnKSB7XG4gICAgICAgICAgICAgIGNvbHVtbnMucHVzaChgQVZHKCQke2luZGV4fTpuYW1lKSBBUyAkJHtpbmRleCArIDF9Om5hbWVgKTtcbiAgICAgICAgICAgICAgdmFsdWVzLnB1c2godHJhbnNmb3JtQWdncmVnYXRlRmllbGQodmFsdWUuJGF2ZyksIGZpZWxkKTtcbiAgICAgICAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbHVtbnMucHVzaCgnKicpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YWdlLiRwcm9qZWN0KSB7XG4gICAgICAgIGlmIChjb2x1bW5zLmluY2x1ZGVzKCcqJykpIHtcbiAgICAgICAgICBjb2x1bW5zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBmaWVsZCBpbiBzdGFnZS4kcHJvamVjdCkge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gc3RhZ2UuJHByb2plY3RbZmllbGRdO1xuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMSB8fCB2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29sdW1ucy5wdXNoKGAkJHtpbmRleH06bmFtZWApO1xuICAgICAgICAgICAgdmFsdWVzLnB1c2goZmllbGQpO1xuICAgICAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdGFnZS4kbWF0Y2gpIHtcbiAgICAgICAgY29uc3QgcGF0dGVybnMgPSBbXTtcbiAgICAgICAgY29uc3Qgb3JPckFuZCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzdGFnZS4kbWF0Y2gsICckb3InKVxuICAgICAgICAgID8gJyBPUiAnXG4gICAgICAgICAgOiAnIEFORCAnO1xuXG4gICAgICAgIGlmIChzdGFnZS4kbWF0Y2guJG9yKSB7XG4gICAgICAgICAgY29uc3QgY29sbGFwc2UgPSB7fTtcbiAgICAgICAgICBzdGFnZS4kbWF0Y2guJG9yLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBlbGVtZW50KSB7XG4gICAgICAgICAgICAgIGNvbGxhcHNlW2tleV0gPSBlbGVtZW50W2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhZ2UuJG1hdGNoID0gY29sbGFwc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBmaWVsZCBpbiBzdGFnZS4kbWF0Y2gpIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHN0YWdlLiRtYXRjaFtmaWVsZF07XG4gICAgICAgICAgY29uc3QgbWF0Y2hQYXR0ZXJucyA9IFtdO1xuICAgICAgICAgIE9iamVjdC5rZXlzKFBhcnNlVG9Qb3NncmVzQ29tcGFyYXRvcikuZm9yRWFjaChjbXAgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlW2NtcF0pIHtcbiAgICAgICAgICAgICAgY29uc3QgcGdDb21wYXJhdG9yID0gUGFyc2VUb1Bvc2dyZXNDb21wYXJhdG9yW2NtcF07XG4gICAgICAgICAgICAgIG1hdGNoUGF0dGVybnMucHVzaChgJCR7aW5kZXh9Om5hbWUgJHtwZ0NvbXBhcmF0b3J9ICQke2luZGV4ICsgMX1gKTtcbiAgICAgICAgICAgICAgdmFsdWVzLnB1c2goZmllbGQsIHRvUG9zdGdyZXNWYWx1ZSh2YWx1ZVtjbXBdKSk7XG4gICAgICAgICAgICAgIGluZGV4ICs9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKG1hdGNoUGF0dGVybnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcGF0dGVybnMucHVzaChgKCR7bWF0Y2hQYXR0ZXJucy5qb2luKCcgQU5EICcpfSlgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNjaGVtYS5maWVsZHNbZmllbGRdICYmIHNjaGVtYS5maWVsZHNbZmllbGRdLnR5cGUgJiYgbWF0Y2hQYXR0ZXJucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHBhdHRlcm5zLnB1c2goYCQke2luZGV4fTpuYW1lID0gJCR7aW5kZXggKyAxfWApO1xuICAgICAgICAgICAgdmFsdWVzLnB1c2goZmllbGQsIHZhbHVlKTtcbiAgICAgICAgICAgIGluZGV4ICs9IDI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdoZXJlUGF0dGVybiA9IHBhdHRlcm5zLmxlbmd0aCA+IDAgPyBgV0hFUkUgJHtwYXR0ZXJucy5qb2luKGAgJHtvck9yQW5kfSBgKX1gIDogJyc7XG4gICAgICB9XG4gICAgICBpZiAoc3RhZ2UuJGxpbWl0KSB7XG4gICAgICAgIGxpbWl0UGF0dGVybiA9IGBMSU1JVCAkJHtpbmRleH1gO1xuICAgICAgICB2YWx1ZXMucHVzaChzdGFnZS4kbGltaXQpO1xuICAgICAgICBpbmRleCArPSAxO1xuICAgICAgfVxuICAgICAgaWYgKHN0YWdlLiRza2lwKSB7XG4gICAgICAgIHNraXBQYXR0ZXJuID0gYE9GRlNFVCAkJHtpbmRleH1gO1xuICAgICAgICB2YWx1ZXMucHVzaChzdGFnZS4kc2tpcCk7XG4gICAgICAgIGluZGV4ICs9IDE7XG4gICAgICB9XG4gICAgICBpZiAoc3RhZ2UuJHNvcnQpIHtcbiAgICAgICAgY29uc3Qgc29ydCA9IHN0YWdlLiRzb3J0O1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc29ydCk7XG4gICAgICAgIGNvbnN0IHNvcnRpbmcgPSBrZXlzXG4gICAgICAgICAgLm1hcChrZXkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtZXIgPSBzb3J0W2tleV0gPT09IDEgPyAnQVNDJyA6ICdERVNDJztcbiAgICAgICAgICAgIGNvbnN0IG9yZGVyID0gYCQke2luZGV4fTpuYW1lICR7dHJhbnNmb3JtZXJ9YDtcbiAgICAgICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgICAgICByZXR1cm4gb3JkZXI7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuam9pbigpO1xuICAgICAgICB2YWx1ZXMucHVzaCguLi5rZXlzKTtcbiAgICAgICAgc29ydFBhdHRlcm4gPSBzb3J0ICE9PSB1bmRlZmluZWQgJiYgc29ydGluZy5sZW5ndGggPiAwID8gYE9SREVSIEJZICR7c29ydGluZ31gIDogJyc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGdyb3VwUGF0dGVybikge1xuICAgICAgY29sdW1ucy5mb3JFYWNoKChlLCBpLCBhKSA9PiB7XG4gICAgICAgIGlmIChlICYmIGUudHJpbSgpID09PSAnKicpIHtcbiAgICAgICAgICBhW2ldID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IG9yaWdpbmFsUXVlcnkgPSBgU0VMRUNUICR7Y29sdW1uc1xuICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgLmpvaW4oKX0gRlJPTSAkMTpuYW1lICR7d2hlcmVQYXR0ZXJufSAke3NraXBQYXR0ZXJufSAke2dyb3VwUGF0dGVybn0gJHtzb3J0UGF0dGVybn0gJHtsaW1pdFBhdHRlcm59YDtcbiAgICBjb25zdCBxcyA9IGV4cGxhaW4gPyB0aGlzLmNyZWF0ZUV4cGxhaW5hYmxlUXVlcnkob3JpZ2luYWxRdWVyeSkgOiBvcmlnaW5hbFF1ZXJ5O1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQuYW55KHFzLCB2YWx1ZXMpLnRoZW4oYSA9PiB7XG4gICAgICBpZiAoZXhwbGFpbikge1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhLm1hcChvYmplY3QgPT4gdGhpcy5wb3N0Z3Jlc09iamVjdFRvUGFyc2VPYmplY3QoY2xhc3NOYW1lLCBvYmplY3QsIHNjaGVtYSkpO1xuICAgICAgcmVzdWx0cy5mb3JFYWNoKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwgJ29iamVjdElkJykpIHtcbiAgICAgICAgICByZXN1bHQub2JqZWN0SWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChncm91cFZhbHVlcykge1xuICAgICAgICAgIHJlc3VsdC5vYmplY3RJZCA9IHt9O1xuICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGdyb3VwVmFsdWVzKSB7XG4gICAgICAgICAgICByZXN1bHQub2JqZWN0SWRba2V5XSA9IHJlc3VsdFtrZXldO1xuICAgICAgICAgICAgZGVsZXRlIHJlc3VsdFtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY291bnRGaWVsZCkge1xuICAgICAgICAgIHJlc3VsdFtjb3VudEZpZWxkXSA9IHBhcnNlSW50KHJlc3VsdFtjb3VudEZpZWxkXSwgMTApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgcGVyZm9ybUluaXRpYWxpemF0aW9uKHsgVm9sYXRpbGVDbGFzc2VzU2NoZW1hcyB9OiBhbnkpIHtcbiAgICAvLyBUT0RPOiBUaGlzIG1ldGhvZCBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdG8gbWFrZSBwcm9wZXIgdXNlIG9mIGNvbm5lY3Rpb25zIChAdml0YWx5LXQpXG4gICAgZGVidWcoJ3BlcmZvcm1Jbml0aWFsaXphdGlvbicpO1xuICAgIGF3YWl0IHRoaXMuX2Vuc3VyZVNjaGVtYUNvbGxlY3Rpb25FeGlzdHMoKTtcbiAgICBjb25zdCBwcm9taXNlcyA9IFZvbGF0aWxlQ2xhc3Nlc1NjaGVtYXMubWFwKHNjaGVtYSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVUYWJsZShzY2hlbWEuY2xhc3NOYW1lLCBzY2hlbWEpXG4gICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGVyci5jb2RlID09PSBQb3N0Z3Jlc0R1cGxpY2F0ZVJlbGF0aW9uRXJyb3IgfHxcbiAgICAgICAgICAgIGVyci5jb2RlID09PSBQYXJzZS5FcnJvci5JTlZBTElEX0NMQVNTX05BTUVcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbigoKSA9PiB0aGlzLnNjaGVtYVVwZ3JhZGUoc2NoZW1hLmNsYXNzTmFtZSwgc2NoZW1hKSk7XG4gICAgfSk7XG4gICAgcHJvbWlzZXMucHVzaCh0aGlzLl9saXN0ZW5Ub1NjaGVtYSgpKTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQudHgoJ3BlcmZvcm0taW5pdGlhbGl6YXRpb24nLCBhc3luYyB0ID0+IHtcbiAgICAgICAgICBhd2FpdCB0Lm5vbmUoc3FsLm1pc2MuanNvbk9iamVjdFNldEtleXMpO1xuICAgICAgICAgIGF3YWl0IHQubm9uZShzcWwuYXJyYXkuYWRkKTtcbiAgICAgICAgICBhd2FpdCB0Lm5vbmUoc3FsLmFycmF5LmFkZFVuaXF1ZSk7XG4gICAgICAgICAgYXdhaXQgdC5ub25lKHNxbC5hcnJheS5yZW1vdmUpO1xuICAgICAgICAgIGF3YWl0IHQubm9uZShzcWwuYXJyYXkuY29udGFpbnNBbGwpO1xuICAgICAgICAgIGF3YWl0IHQubm9uZShzcWwuYXJyYXkuY29udGFpbnNBbGxSZWdleCk7XG4gICAgICAgICAgYXdhaXQgdC5ub25lKHNxbC5hcnJheS5jb250YWlucyk7XG4gICAgICAgICAgcmV0dXJuIHQuY3R4O1xuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAudGhlbihjdHggPT4ge1xuICAgICAgICBkZWJ1ZyhgaW5pdGlhbGl6YXRpb25Eb25lIGluICR7Y3R4LmR1cmF0aW9ufWApO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZUluZGV4ZXMoY2xhc3NOYW1lOiBzdHJpbmcsIGluZGV4ZXM6IGFueSwgY29ubjogP2FueSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiAoY29ubiB8fCB0aGlzLl9jbGllbnQpLnR4KHQgPT5cbiAgICAgIHQuYmF0Y2goXG4gICAgICAgIGluZGV4ZXMubWFwKGkgPT4ge1xuICAgICAgICAgIHJldHVybiB0Lm5vbmUoJ0NSRUFURSBJTkRFWCBJRiBOT1QgRVhJU1RTICQxOm5hbWUgT04gJDI6bmFtZSAoJDM6bmFtZSknLCBbXG4gICAgICAgICAgICBpLm5hbWUsXG4gICAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgICAgICBpLmtleSxcbiAgICAgICAgICBdKTtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlSW5kZXhlc0lmTmVlZGVkKFxuICAgIGNsYXNzTmFtZTogc3RyaW5nLFxuICAgIGZpZWxkTmFtZTogc3RyaW5nLFxuICAgIHR5cGU6IGFueSxcbiAgICBjb25uOiA/YW55XG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IChjb25uIHx8IHRoaXMuX2NsaWVudCkubm9uZSgnQ1JFQVRFIElOREVYIElGIE5PVCBFWElTVFMgJDE6bmFtZSBPTiAkMjpuYW1lICgkMzpuYW1lKScsIFtcbiAgICAgIGZpZWxkTmFtZSxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIHR5cGUsXG4gICAgXSk7XG4gIH1cblxuICBhc3luYyBkcm9wSW5kZXhlcyhjbGFzc05hbWU6IHN0cmluZywgaW5kZXhlczogYW55LCBjb25uOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBxdWVyaWVzID0gaW5kZXhlcy5tYXAoaSA9PiAoe1xuICAgICAgcXVlcnk6ICdEUk9QIElOREVYICQxOm5hbWUnLFxuICAgICAgdmFsdWVzOiBpLFxuICAgIH0pKTtcbiAgICBhd2FpdCAoY29ubiB8fCB0aGlzLl9jbGllbnQpLnR4KHQgPT4gdC5ub25lKHRoaXMuX3BncC5oZWxwZXJzLmNvbmNhdChxdWVyaWVzKSkpO1xuICB9XG5cbiAgYXN5bmMgZ2V0SW5kZXhlcyhjbGFzc05hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHFzID0gJ1NFTEVDVCAqIEZST00gcGdfaW5kZXhlcyBXSEVSRSB0YWJsZW5hbWUgPSAke2NsYXNzTmFtZX0nO1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQuYW55KHFzLCB7IGNsYXNzTmFtZSB9KTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZVNjaGVtYVdpdGhJbmRleGVzKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIC8vIFVzZWQgZm9yIHRlc3RpbmcgcHVycG9zZXNcbiAgYXN5bmMgdXBkYXRlRXN0aW1hdGVkQ291bnQoY2xhc3NOYW1lOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50Lm5vbmUoJ0FOQUxZWkUgJDE6bmFtZScsIFtjbGFzc05hbWVdKTtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVRyYW5zYWN0aW9uYWxTZXNzaW9uKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgY29uc3QgdHJhbnNhY3Rpb25hbFNlc3Npb24gPSB7fTtcbiAgICAgIHRyYW5zYWN0aW9uYWxTZXNzaW9uLnJlc3VsdCA9IHRoaXMuX2NsaWVudC50eCh0ID0+IHtcbiAgICAgICAgdHJhbnNhY3Rpb25hbFNlc3Npb24udCA9IHQ7XG4gICAgICAgIHRyYW5zYWN0aW9uYWxTZXNzaW9uLnByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICB0cmFuc2FjdGlvbmFsU2Vzc2lvbi5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRyYW5zYWN0aW9uYWxTZXNzaW9uLmJhdGNoID0gW107XG4gICAgICAgIHJlc29sdmUodHJhbnNhY3Rpb25hbFNlc3Npb24pO1xuICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb25hbFNlc3Npb24ucHJvbWlzZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgY29tbWl0VHJhbnNhY3Rpb25hbFNlc3Npb24odHJhbnNhY3Rpb25hbFNlc3Npb246IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyYW5zYWN0aW9uYWxTZXNzaW9uLnJlc29sdmUodHJhbnNhY3Rpb25hbFNlc3Npb24udC5iYXRjaCh0cmFuc2FjdGlvbmFsU2Vzc2lvbi5iYXRjaCkpO1xuICAgIHJldHVybiB0cmFuc2FjdGlvbmFsU2Vzc2lvbi5yZXN1bHQ7XG4gIH1cblxuICBhYm9ydFRyYW5zYWN0aW9uYWxTZXNzaW9uKHRyYW5zYWN0aW9uYWxTZXNzaW9uOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCByZXN1bHQgPSB0cmFuc2FjdGlvbmFsU2Vzc2lvbi5yZXN1bHQuY2F0Y2goKTtcbiAgICB0cmFuc2FjdGlvbmFsU2Vzc2lvbi5iYXRjaC5wdXNoKFByb21pc2UucmVqZWN0KCkpO1xuICAgIHRyYW5zYWN0aW9uYWxTZXNzaW9uLnJlc29sdmUodHJhbnNhY3Rpb25hbFNlc3Npb24udC5iYXRjaCh0cmFuc2FjdGlvbmFsU2Vzc2lvbi5iYXRjaCkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBhc3luYyBlbnN1cmVJbmRleChcbiAgICBjbGFzc05hbWU6IHN0cmluZyxcbiAgICBzY2hlbWE6IFNjaGVtYVR5cGUsXG4gICAgZmllbGROYW1lczogc3RyaW5nW10sXG4gICAgaW5kZXhOYW1lOiA/c3RyaW5nLFxuICAgIGNhc2VJbnNlbnNpdGl2ZTogYm9vbGVhbiA9IGZhbHNlLFxuICAgIG9wdGlvbnM/OiBPYmplY3QgPSB7fVxuICApOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IGNvbm4gPSBvcHRpb25zLmNvbm4gIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuY29ubiA6IHRoaXMuX2NsaWVudDtcbiAgICBjb25zdCBkZWZhdWx0SW5kZXhOYW1lID0gYHBhcnNlX2RlZmF1bHRfJHtmaWVsZE5hbWVzLnNvcnQoKS5qb2luKCdfJyl9YDtcbiAgICBjb25zdCBpbmRleE5hbWVPcHRpb25zOiBPYmplY3QgPVxuICAgICAgaW5kZXhOYW1lICE9IG51bGwgPyB7IG5hbWU6IGluZGV4TmFtZSB9IDogeyBuYW1lOiBkZWZhdWx0SW5kZXhOYW1lIH07XG4gICAgY29uc3QgY29uc3RyYWludFBhdHRlcm5zID0gY2FzZUluc2Vuc2l0aXZlXG4gICAgICA/IGZpZWxkTmFtZXMubWFwKChmaWVsZE5hbWUsIGluZGV4KSA9PiBgbG93ZXIoJCR7aW5kZXggKyAzfTpuYW1lKSB2YXJjaGFyX3BhdHRlcm5fb3BzYClcbiAgICAgIDogZmllbGROYW1lcy5tYXAoKGZpZWxkTmFtZSwgaW5kZXgpID0+IGAkJHtpbmRleCArIDN9Om5hbWVgKTtcbiAgICBjb25zdCBxcyA9IGBDUkVBVEUgSU5ERVggSUYgTk9UIEVYSVNUUyAkMTpuYW1lIE9OICQyOm5hbWUgKCR7Y29uc3RyYWludFBhdHRlcm5zLmpvaW4oKX0pYDtcbiAgICBhd2FpdCBjb25uLm5vbmUocXMsIFtpbmRleE5hbWVPcHRpb25zLm5hbWUsIGNsYXNzTmFtZSwgLi4uZmllbGROYW1lc10pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgZXJyb3IuY29kZSA9PT0gUG9zdGdyZXNEdXBsaWNhdGVSZWxhdGlvbkVycm9yICYmXG4gICAgICAgIGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoaW5kZXhOYW1lT3B0aW9ucy5uYW1lKVxuICAgICAgKSB7XG4gICAgICAgIC8vIEluZGV4IGFscmVhZHkgZXhpc3RzLiBJZ25vcmUgZXJyb3IuXG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBlcnJvci5jb2RlID09PSBQb3N0Z3Jlc1VuaXF1ZUluZGV4VmlvbGF0aW9uRXJyb3IgJiZcbiAgICAgICAgZXJyb3IubWVzc2FnZS5pbmNsdWRlcyhpbmRleE5hbWVPcHRpb25zLm5hbWUpXG4gICAgICApIHtcbiAgICAgICAgLy8gQ2FzdCB0aGUgZXJyb3IgaW50byB0aGUgcHJvcGVyIHBhcnNlIGVycm9yXG4gICAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgICBQYXJzZS5FcnJvci5EVVBMSUNBVEVfVkFMVUUsXG4gICAgICAgICAgJ0EgZHVwbGljYXRlIHZhbHVlIGZvciBhIGZpZWxkIHdpdGggdW5pcXVlIHZhbHVlcyB3YXMgcHJvdmlkZWQnXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb252ZXJ0UG9seWdvblRvU1FMKHBvbHlnb24pIHtcbiAgaWYgKHBvbHlnb24ubGVuZ3RoIDwgMykge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5JTlZBTElEX0pTT04sIGBQb2x5Z29uIG11c3QgaGF2ZSBhdCBsZWFzdCAzIHZhbHVlc2ApO1xuICB9XG4gIGlmIChcbiAgICBwb2x5Z29uWzBdWzBdICE9PSBwb2x5Z29uW3BvbHlnb24ubGVuZ3RoIC0gMV1bMF0gfHxcbiAgICBwb2x5Z29uWzBdWzFdICE9PSBwb2x5Z29uW3BvbHlnb24ubGVuZ3RoIC0gMV1bMV1cbiAgKSB7XG4gICAgcG9seWdvbi5wdXNoKHBvbHlnb25bMF0pO1xuICB9XG4gIGNvbnN0IHVuaXF1ZSA9IHBvbHlnb24uZmlsdGVyKChpdGVtLCBpbmRleCwgYXIpID0+IHtcbiAgICBsZXQgZm91bmRJbmRleCA9IC0xO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHB0ID0gYXJbaV07XG4gICAgICBpZiAocHRbMF0gPT09IGl0ZW1bMF0gJiYgcHRbMV0gPT09IGl0ZW1bMV0pIHtcbiAgICAgICAgZm91bmRJbmRleCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZm91bmRJbmRleCA9PT0gaW5kZXg7XG4gIH0pO1xuICBpZiAodW5pcXVlLmxlbmd0aCA8IDMpIHtcbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICBQYXJzZS5FcnJvci5JTlRFUk5BTF9TRVJWRVJfRVJST1IsXG4gICAgICAnR2VvSlNPTjogTG9vcCBtdXN0IGhhdmUgYXQgbGVhc3QgMyBkaWZmZXJlbnQgdmVydGljZXMnXG4gICAgKTtcbiAgfVxuICBjb25zdCBwb2ludHMgPSBwb2x5Z29uXG4gICAgLm1hcChwb2ludCA9PiB7XG4gICAgICBQYXJzZS5HZW9Qb2ludC5fdmFsaWRhdGUocGFyc2VGbG9hdChwb2ludFsxXSksIHBhcnNlRmxvYXQocG9pbnRbMF0pKTtcbiAgICAgIHJldHVybiBgKCR7cG9pbnRbMV19LCAke3BvaW50WzBdfSlgO1xuICAgIH0pXG4gICAgLmpvaW4oJywgJyk7XG4gIHJldHVybiBgKCR7cG9pbnRzfSlgO1xufVxuXG5mdW5jdGlvbiByZW1vdmVXaGl0ZVNwYWNlKHJlZ2V4KSB7XG4gIGlmICghcmVnZXguZW5kc1dpdGgoJ1xcbicpKSB7XG4gICAgcmVnZXggKz0gJ1xcbic7XG4gIH1cblxuICAvLyByZW1vdmUgbm9uIGVzY2FwZWQgY29tbWVudHNcbiAgcmV0dXJuIChcbiAgICByZWdleFxuICAgICAgLnJlcGxhY2UoLyhbXlxcXFxdKSMuKlxcbi9naW0sICckMScpXG4gICAgICAvLyByZW1vdmUgbGluZXMgc3RhcnRpbmcgd2l0aCBhIGNvbW1lbnRcbiAgICAgIC5yZXBsYWNlKC9eIy4qXFxuL2dpbSwgJycpXG4gICAgICAvLyByZW1vdmUgbm9uIGVzY2FwZWQgd2hpdGVzcGFjZVxuICAgICAgLnJlcGxhY2UoLyhbXlxcXFxdKVxccysvZ2ltLCAnJDEnKVxuICAgICAgLy8gcmVtb3ZlIHdoaXRlc3BhY2UgYXQgdGhlIGJlZ2lubmluZyBvZiBhIGxpbmVcbiAgICAgIC5yZXBsYWNlKC9eXFxzKy8sICcnKVxuICAgICAgLnRyaW0oKVxuICApO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzUmVnZXhQYXR0ZXJuKHMpIHtcbiAgaWYgKHMgJiYgcy5zdGFydHNXaXRoKCdeJykpIHtcbiAgICAvLyByZWdleCBmb3Igc3RhcnRzV2l0aFxuICAgIHJldHVybiAnXicgKyBsaXRlcmFsaXplUmVnZXhQYXJ0KHMuc2xpY2UoMSkpO1xuICB9IGVsc2UgaWYgKHMgJiYgcy5lbmRzV2l0aCgnJCcpKSB7XG4gICAgLy8gcmVnZXggZm9yIGVuZHNXaXRoXG4gICAgcmV0dXJuIGxpdGVyYWxpemVSZWdleFBhcnQocy5zbGljZSgwLCBzLmxlbmd0aCAtIDEpKSArICckJztcbiAgfVxuXG4gIC8vIHJlZ2V4IGZvciBjb250YWluc1xuICByZXR1cm4gbGl0ZXJhbGl6ZVJlZ2V4UGFydChzKTtcbn1cblxuZnVuY3Rpb24gaXNTdGFydHNXaXRoUmVnZXgodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8ICF2YWx1ZS5zdGFydHNXaXRoKCdeJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBtYXRjaGVzID0gdmFsdWUubWF0Y2goL1xcXlxcXFxRLipcXFxcRS8pO1xuICByZXR1cm4gISFtYXRjaGVzO1xufVxuXG5mdW5jdGlvbiBpc0FsbFZhbHVlc1JlZ2V4T3JOb25lKHZhbHVlcykge1xuICBpZiAoIXZhbHVlcyB8fCAhQXJyYXkuaXNBcnJheSh2YWx1ZXMpIHx8IHZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IGZpcnN0VmFsdWVzSXNSZWdleCA9IGlzU3RhcnRzV2l0aFJlZ2V4KHZhbHVlc1swXS4kcmVnZXgpO1xuICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmaXJzdFZhbHVlc0lzUmVnZXg7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMSwgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGZpcnN0VmFsdWVzSXNSZWdleCAhPT0gaXNTdGFydHNXaXRoUmVnZXgodmFsdWVzW2ldLiRyZWdleCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNBbnlWYWx1ZVJlZ2V4U3RhcnRzV2l0aCh2YWx1ZXMpIHtcbiAgcmV0dXJuIHZhbHVlcy5zb21lKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBpc1N0YXJ0c1dpdGhSZWdleCh2YWx1ZS4kcmVnZXgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGl0ZXJhbFJlZ2V4KHJlbWFpbmluZykge1xuICByZXR1cm4gcmVtYWluaW5nXG4gICAgLnNwbGl0KCcnKVxuICAgIC5tYXAoYyA9PiB7XG4gICAgICBjb25zdCByZWdleCA9IFJlZ0V4cCgnWzAtOSBdfFxcXFxwe0x9JywgJ3UnKTsgLy8gU3VwcG9ydCBhbGwgdW5pY29kZSBsZXR0ZXIgY2hhcnNcbiAgICAgIGlmIChjLm1hdGNoKHJlZ2V4KSAhPT0gbnVsbCkge1xuICAgICAgICAvLyBkb24ndCBlc2NhcGUgYWxwaGFudW1lcmljIGNoYXJhY3RlcnNcbiAgICAgICAgcmV0dXJuIGM7XG4gICAgICB9XG4gICAgICAvLyBlc2NhcGUgZXZlcnl0aGluZyBlbHNlIChzaW5nbGUgcXVvdGVzIHdpdGggc2luZ2xlIHF1b3RlcywgZXZlcnl0aGluZyBlbHNlIHdpdGggYSBiYWNrc2xhc2gpXG4gICAgICByZXR1cm4gYyA9PT0gYCdgID8gYCcnYCA6IGBcXFxcJHtjfWA7XG4gICAgfSlcbiAgICAuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIGxpdGVyYWxpemVSZWdleFBhcnQoczogc3RyaW5nKSB7XG4gIGNvbnN0IG1hdGNoZXIxID0gL1xcXFxRKCg/IVxcXFxFKS4qKVxcXFxFJC87XG4gIGNvbnN0IHJlc3VsdDE6IGFueSA9IHMubWF0Y2gobWF0Y2hlcjEpO1xuICBpZiAocmVzdWx0MSAmJiByZXN1bHQxLmxlbmd0aCA+IDEgJiYgcmVzdWx0MS5pbmRleCA+IC0xKSB7XG4gICAgLy8gcHJvY2VzcyByZWdleCB0aGF0IGhhcyBhIGJlZ2lubmluZyBhbmQgYW4gZW5kIHNwZWNpZmllZCBmb3IgdGhlIGxpdGVyYWwgdGV4dFxuICAgIGNvbnN0IHByZWZpeCA9IHMuc3Vic3RyKDAsIHJlc3VsdDEuaW5kZXgpO1xuICAgIGNvbnN0IHJlbWFpbmluZyA9IHJlc3VsdDFbMV07XG5cbiAgICByZXR1cm4gbGl0ZXJhbGl6ZVJlZ2V4UGFydChwcmVmaXgpICsgY3JlYXRlTGl0ZXJhbFJlZ2V4KHJlbWFpbmluZyk7XG4gIH1cblxuICAvLyBwcm9jZXNzIHJlZ2V4IHRoYXQgaGFzIGEgYmVnaW5uaW5nIHNwZWNpZmllZCBmb3IgdGhlIGxpdGVyYWwgdGV4dFxuICBjb25zdCBtYXRjaGVyMiA9IC9cXFxcUSgoPyFcXFxcRSkuKikkLztcbiAgY29uc3QgcmVzdWx0MjogYW55ID0gcy5tYXRjaChtYXRjaGVyMik7XG4gIGlmIChyZXN1bHQyICYmIHJlc3VsdDIubGVuZ3RoID4gMSAmJiByZXN1bHQyLmluZGV4ID4gLTEpIHtcbiAgICBjb25zdCBwcmVmaXggPSBzLnN1YnN0cigwLCByZXN1bHQyLmluZGV4KTtcbiAgICBjb25zdCByZW1haW5pbmcgPSByZXN1bHQyWzFdO1xuXG4gICAgcmV0dXJuIGxpdGVyYWxpemVSZWdleFBhcnQocHJlZml4KSArIGNyZWF0ZUxpdGVyYWxSZWdleChyZW1haW5pbmcpO1xuICB9XG5cbiAgLy8gcmVtb3ZlIGFsbCBpbnN0YW5jZXMgb2YgXFxRIGFuZCBcXEUgZnJvbSB0aGUgcmVtYWluaW5nIHRleHQgJiBlc2NhcGUgc2luZ2xlIHF1b3Rlc1xuICByZXR1cm4gc1xuICAgIC5yZXBsYWNlKC8oW15cXFxcXSkoXFxcXEUpLywgJyQxJylcbiAgICAucmVwbGFjZSgvKFteXFxcXF0pKFxcXFxRKS8sICckMScpXG4gICAgLnJlcGxhY2UoL15cXFxcRS8sICcnKVxuICAgIC5yZXBsYWNlKC9eXFxcXFEvLCAnJylcbiAgICAucmVwbGFjZSgvKFteJ10pJy8sIGAkMScnYClcbiAgICAucmVwbGFjZSgvXicoW14nXSkvLCBgJyckMWApO1xufVxuXG52YXIgR2VvUG9pbnRDb2RlciA9IHtcbiAgaXNWYWxpZEpTT04odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZS5fX3R5cGUgPT09ICdHZW9Qb2ludCc7XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBQb3N0Z3Jlc1N0b3JhZ2VBZGFwdGVyO1xuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,