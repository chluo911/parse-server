"use strict";function cov_a3pt4zoew(){var path="/parse-server/lib/GraphQL/loaders/schemaTypes.js";var hash="f370658774f7b3751f31efb9e67aa56d6bb5f372";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/GraphQL/loaders/schemaTypes.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:1004}},"2":{start:{line:8,column:15},end:{line:8,column:33}},"3":{start:{line:10,column:30},end:{line:13,column:1}},"4":{start:{line:14,column:0},end:{line:14,column:54}},"5":{start:{line:15,column:27},end:{line:21,column:2}},"6":{start:{line:22,column:0},end:{line:22,column:48}},"7":{start:{line:23,column:21},end:{line:44,column:2}},"8":{start:{line:29,column:24},end:{line:43,column:16}},"9":{start:{line:45,column:34},end:{line:51,column:2}},"10":{start:{line:52,column:0},end:{line:52,column:62}},"11":{start:{line:53,column:28},end:{line:60,column:2}},"12":{start:{line:61,column:0},end:{line:61,column:50}},"13":{start:{line:62,column:34},end:{line:68,column:2}},"14":{start:{line:69,column:0},end:{line:69,column:62}},"15":{start:{line:70,column:28},end:{line:77,column:2}},"16":{start:{line:78,column:0},end:{line:78,column:50}},"17":{start:{line:79,column:35},end:{line:85,column:2}},"18":{start:{line:86,column:0},end:{line:86,column:64}},"19":{start:{line:87,column:29},end:{line:94,column:2}},"20":{start:{line:95,column:0},end:{line:95,column:52}},"21":{start:{line:96,column:33},end:{line:102,column:2}},"22":{start:{line:103,column:0},end:{line:103,column:60}},"23":{start:{line:104,column:27},end:{line:111,column:2}},"24":{start:{line:112,column:0},end:{line:112,column:48}},"25":{start:{line:113,column:34},end:{line:119,column:2}},"26":{start:{line:120,column:0},end:{line:120,column:62}},"27":{start:{line:121,column:28},end:{line:128,column:2}},"28":{start:{line:129,column:0},end:{line:129,column:50}},"29":{start:{line:130,column:32},end:{line:136,column:2}},"30":{start:{line:137,column:0},end:{line:137,column:58}},"31":{start:{line:138,column:26},end:{line:145,column:2}},"32":{start:{line:146,column:0},end:{line:146,column:46}},"33":{start:{line:147,column:32},end:{line:153,column:2}},"34":{start:{line:154,column:0},end:{line:154,column:58}},"35":{start:{line:155,column:26},end:{line:162,column:2}},"36":{start:{line:163,column:0},end:{line:163,column:46}},"37":{start:{line:164,column:37},end:{line:170,column:2}},"38":{start:{line:171,column:0},end:{line:171,column:68}},"39":{start:{line:172,column:31},end:{line:179,column:2}},"40":{start:{line:180,column:0},end:{line:180,column:56}},"41":{start:{line:181,column:35},end:{line:187,column:2}},"42":{start:{line:188,column:0},end:{line:188,column:64}},"43":{start:{line:189,column:29},end:{line:196,column:2}},"44":{start:{line:197,column:0},end:{line:197,column:52}},"45":{start:{line:198,column:33},end:{line:204,column:2}},"46":{start:{line:205,column:0},end:{line:205,column:60}},"47":{start:{line:206,column:27},end:{line:213,column:2}},"48":{start:{line:214,column:0},end:{line:214,column:48}},"49":{start:{line:215,column:25},end:{line:218,column:1}},"50":{start:{line:219,column:0},end:{line:219,column:44}},"51":{start:{line:220,column:35},end:{line:227,column:2}},"52":{start:{line:228,column:0},end:{line:228,column:64}},"53":{start:{line:229,column:29},end:{line:237,column:2}},"54":{start:{line:238,column:0},end:{line:238,column:52}},"55":{start:{line:239,column:36},end:{line:246,column:2}},"56":{start:{line:247,column:0},end:{line:247,column:66}},"57":{start:{line:248,column:30},end:{line:256,column:2}},"58":{start:{line:257,column:0},end:{line:257,column:54}},"59":{start:{line:258,column:25},end:{line:265,column:2}},"60":{start:{line:266,column:0},end:{line:266,column:44}},"61":{start:{line:267,column:28},end:{line:324,column:2}},"62":{start:{line:325,column:0},end:{line:325,column:50}},"63":{start:{line:326,column:23},end:{line:329,column:1}},"64":{start:{line:330,column:0},end:{line:330,column:40}},"65":{start:{line:331,column:14},end:{line:341,column:2}},"66":{start:{line:342,column:0},end:{line:342,column:22}},"67":{start:{line:344,column:13},end:{line:373,column:1}},"68":{start:{line:345,column:2},end:{line:345,column:62}},"69":{start:{line:346,column:2},end:{line:346,column:69}},"70":{start:{line:347,column:2},end:{line:347,column:63}},"71":{start:{line:348,column:2},end:{line:348,column:69}},"72":{start:{line:349,column:2},end:{line:349,column:63}},"73":{start:{line:350,column:2},end:{line:350,column:70}},"74":{start:{line:351,column:2},end:{line:351,column:64}},"75":{start:{line:352,column:2},end:{line:352,column:68}},"76":{start:{line:353,column:2},end:{line:353,column:62}},"77":{start:{line:354,column:2},end:{line:354,column:69}},"78":{start:{line:355,column:2},end:{line:355,column:63}},"79":{start:{line:356,column:2},end:{line:356,column:67}},"80":{start:{line:357,column:2},end:{line:357,column:61}},"81":{start:{line:358,column:2},end:{line:358,column:67}},"82":{start:{line:359,column:2},end:{line:359,column:61}},"83":{start:{line:360,column:2},end:{line:360,column:72}},"84":{start:{line:361,column:2},end:{line:361,column:66}},"85":{start:{line:362,column:2},end:{line:362,column:70}},"86":{start:{line:363,column:2},end:{line:363,column:64}},"87":{start:{line:364,column:2},end:{line:364,column:68}},"88":{start:{line:365,column:2},end:{line:365,column:62}},"89":{start:{line:366,column:2},end:{line:366,column:70}},"90":{start:{line:367,column:2},end:{line:367,column:64}},"91":{start:{line:368,column:2},end:{line:368,column:71}},"92":{start:{line:369,column:2},end:{line:369,column:65}},"93":{start:{line:370,column:2},end:{line:370,column:60}},"94":{start:{line:371,column:2},end:{line:371,column:63}},"95":{start:{line:372,column:2},end:{line:372,column:49}},"96":{start:{line:375,column:0},end:{line:375,column:20}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:29,column:15},end:{line:29,column:16}},loc:{start:{line:29,column:24},end:{line:43,column:16}},line:29},"1":{name:"(anonymous_1)",decl:{start:{line:344,column:13},end:{line:344,column:14}},loc:{start:{line:344,column:35},end:{line:373,column:1}},line:344}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0},f:{"0":0,"1":0},b:{},inputSourceMap:{version:3,sources:["../../../src/GraphQL/loaders/schemaTypes.js"],names:["SCHEMA_FIELD_NAME_ATT","description","type","GraphQLNonNull","GraphQLString","SCHEMA_FIELD_INPUT","GraphQLInputObjectType","name","fields","SCHEMA_FIELD","GraphQLInterfaceType","resolveType","value","String","SCHEMA_STRING_FIELD","Number","SCHEMA_NUMBER_FIELD","Boolean","SCHEMA_BOOLEAN_FIELD","Array","SCHEMA_ARRAY_FIELD","Object","SCHEMA_OBJECT_FIELD","Date","SCHEMA_DATE_FIELD","File","SCHEMA_FILE_FIELD","GeoPoint","SCHEMA_GEO_POINT_FIELD","Polygon","SCHEMA_POLYGON_FIELD","Bytes","SCHEMA_BYTES_FIELD","Pointer","SCHEMA_POINTER_FIELD","Relation","SCHEMA_RELATION_FIELD","ACL","SCHEMA_ACL_FIELD","SCHEMA_STRING_FIELD_INPUT","GraphQLObjectType","interfaces","SCHEMA_NUMBER_FIELD_INPUT","SCHEMA_BOOLEAN_FIELD_INPUT","SCHEMA_ARRAY_FIELD_INPUT","SCHEMA_OBJECT_FIELD_INPUT","SCHEMA_DATE_FIELD_INPUT","SCHEMA_FILE_FIELD_INPUT","SCHEMA_GEO_POINT_FIELD_INPUT","SCHEMA_POLYGON_FIELD_INPUT","SCHEMA_BYTES_FIELD_INPUT","TARGET_CLASS_ATT","SCHEMA_POINTER_FIELD_INPUT","targetClassName","SCHEMA_RELATION_FIELD_INPUT","SCHEMA_FIELDS_INPUT","addStrings","GraphQLList","addNumbers","addBooleans","addArrays","addObjects","addDates","addFiles","addGeoPoint","addPolygons","addBytes","addPointers","addRelations","remove","CLASS_NAME_ATT","CLASS","schemaFields","load","parseGraphQLSchema","addGraphQLType"],mappings:"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",sourcesContent:["import {\n  GraphQLNonNull,\n  GraphQLString,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n} from 'graphql';\n\nconst SCHEMA_FIELD_NAME_ATT = {\n  description: 'This is the field name.',\n  type: new GraphQLNonNull(GraphQLString),\n};\n\nconst SCHEMA_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaFieldInput',\n  description: 'The SchemaFieldInput is used to specify a field of an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_FIELD = new GraphQLInterfaceType({\n  name: 'SchemaField',\n  description:\n    'The SchemaField interface type is used as a base type for the different supported fields of an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n  resolveType: value =>\n    ({\n      String: SCHEMA_STRING_FIELD,\n      Number: SCHEMA_NUMBER_FIELD,\n      Boolean: SCHEMA_BOOLEAN_FIELD,\n      Array: SCHEMA_ARRAY_FIELD,\n      Object: SCHEMA_OBJECT_FIELD,\n      Date: SCHEMA_DATE_FIELD,\n      File: SCHEMA_FILE_FIELD,\n      GeoPoint: SCHEMA_GEO_POINT_FIELD,\n      Polygon: SCHEMA_POLYGON_FIELD,\n      Bytes: SCHEMA_BYTES_FIELD,\n      Pointer: SCHEMA_POINTER_FIELD,\n      Relation: SCHEMA_RELATION_FIELD,\n      ACL: SCHEMA_ACL_FIELD,\n    }[value.type]),\n});\n\nconst SCHEMA_STRING_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaStringFieldInput',\n  description:\n    'The SchemaStringFieldInput is used to specify a field of type string for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_STRING_FIELD = new GraphQLObjectType({\n  name: 'SchemaStringField',\n  description: 'The SchemaStringField is used to return information of a String field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_NUMBER_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaNumberFieldInput',\n  description:\n    'The SchemaNumberFieldInput is used to specify a field of type number for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_NUMBER_FIELD = new GraphQLObjectType({\n  name: 'SchemaNumberField',\n  description: 'The SchemaNumberField is used to return information of a Number field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_BOOLEAN_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaBooleanFieldInput',\n  description:\n    'The SchemaBooleanFieldInput is used to specify a field of type boolean for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_BOOLEAN_FIELD = new GraphQLObjectType({\n  name: 'SchemaBooleanField',\n  description: 'The SchemaBooleanField is used to return information of a Boolean field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_ARRAY_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaArrayFieldInput',\n  description:\n    'The SchemaArrayFieldInput is used to specify a field of type array for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_ARRAY_FIELD = new GraphQLObjectType({\n  name: 'SchemaArrayField',\n  description: 'The SchemaArrayField is used to return information of an Array field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_OBJECT_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaObjectFieldInput',\n  description:\n    'The SchemaObjectFieldInput is used to specify a field of type object for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_OBJECT_FIELD = new GraphQLObjectType({\n  name: 'SchemaObjectField',\n  description: 'The SchemaObjectField is used to return information of an Object field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_DATE_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaDateFieldInput',\n  description:\n    'The SchemaDateFieldInput is used to specify a field of type date for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_DATE_FIELD = new GraphQLObjectType({\n  name: 'SchemaDateField',\n  description: 'The SchemaDateField is used to return information of a Date field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_FILE_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaFileFieldInput',\n  description:\n    'The SchemaFileFieldInput is used to specify a field of type file for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_FILE_FIELD = new GraphQLObjectType({\n  name: 'SchemaFileField',\n  description: 'The SchemaFileField is used to return information of a File field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_GEO_POINT_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaGeoPointFieldInput',\n  description:\n    'The SchemaGeoPointFieldInput is used to specify a field of type geo point for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_GEO_POINT_FIELD = new GraphQLObjectType({\n  name: 'SchemaGeoPointField',\n  description: 'The SchemaGeoPointField is used to return information of a Geo Point field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_POLYGON_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaPolygonFieldInput',\n  description:\n    'The SchemaPolygonFieldInput is used to specify a field of type polygon for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_POLYGON_FIELD = new GraphQLObjectType({\n  name: 'SchemaPolygonField',\n  description: 'The SchemaPolygonField is used to return information of a Polygon field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_BYTES_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaBytesFieldInput',\n  description:\n    'The SchemaBytesFieldInput is used to specify a field of type bytes for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_BYTES_FIELD = new GraphQLObjectType({\n  name: 'SchemaBytesField',\n  description: 'The SchemaBytesField is used to return information of a Bytes field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst TARGET_CLASS_ATT = {\n  description: 'This is the name of the target class for the field.',\n  type: new GraphQLNonNull(GraphQLString),\n};\n\nconst SCHEMA_POINTER_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'PointerFieldInput',\n  description:\n    'The PointerFieldInput is used to specify a field of type pointer for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n    targetClassName: TARGET_CLASS_ATT,\n  },\n});\n\nconst SCHEMA_POINTER_FIELD = new GraphQLObjectType({\n  name: 'SchemaPointerField',\n  description: 'The SchemaPointerField is used to return information of a Pointer field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n    targetClassName: TARGET_CLASS_ATT,\n  },\n});\n\nconst SCHEMA_RELATION_FIELD_INPUT = new GraphQLInputObjectType({\n  name: 'RelationFieldInput',\n  description:\n    'The RelationFieldInput is used to specify a field of type relation for an object class schema.',\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n    targetClassName: TARGET_CLASS_ATT,\n  },\n});\n\nconst SCHEMA_RELATION_FIELD = new GraphQLObjectType({\n  name: 'SchemaRelationField',\n  description: 'The SchemaRelationField is used to return information of a Relation field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n    targetClassName: TARGET_CLASS_ATT,\n  },\n});\n\nconst SCHEMA_ACL_FIELD = new GraphQLObjectType({\n  name: 'SchemaACLField',\n  description: 'The SchemaACLField is used to return information of an ACL field.',\n  interfaces: [SCHEMA_FIELD],\n  fields: {\n    name: SCHEMA_FIELD_NAME_ATT,\n  },\n});\n\nconst SCHEMA_FIELDS_INPUT = new GraphQLInputObjectType({\n  name: 'SchemaFieldsInput',\n  description: `The CreateClassSchemaInput type is used to specify the schema for a new object class to be created.`,\n  fields: {\n    addStrings: {\n      description: 'These are the String fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_STRING_FIELD_INPUT)),\n    },\n    addNumbers: {\n      description: 'These are the Number fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_NUMBER_FIELD_INPUT)),\n    },\n    addBooleans: {\n      description: 'These are the Boolean fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_BOOLEAN_FIELD_INPUT)),\n    },\n    addArrays: {\n      description: 'These are the Array fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_ARRAY_FIELD_INPUT)),\n    },\n    addObjects: {\n      description: 'These are the Object fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_OBJECT_FIELD_INPUT)),\n    },\n    addDates: {\n      description: 'These are the Date fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_DATE_FIELD_INPUT)),\n    },\n    addFiles: {\n      description: 'These are the File fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_FILE_FIELD_INPUT)),\n    },\n    addGeoPoint: {\n      description:\n        'This is the Geo Point field to be added to the class schema. Currently it is supported only one GeoPoint field per Class.',\n      type: SCHEMA_GEO_POINT_FIELD_INPUT,\n    },\n    addPolygons: {\n      description: 'These are the Polygon fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_POLYGON_FIELD_INPUT)),\n    },\n    addBytes: {\n      description: 'These are the Bytes fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_BYTES_FIELD_INPUT)),\n    },\n    addPointers: {\n      description: 'These are the Pointer fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_POINTER_FIELD_INPUT)),\n    },\n    addRelations: {\n      description: 'These are the Relation fields to be added to the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_RELATION_FIELD_INPUT)),\n    },\n    remove: {\n      description: 'These are the fields to be removed from the class schema.',\n      type: new GraphQLList(new GraphQLNonNull(SCHEMA_FIELD_INPUT)),\n    },\n  },\n});\n\nconst CLASS_NAME_ATT = {\n  description: 'This is the name of the object class.',\n  type: new GraphQLNonNull(GraphQLString),\n};\n\nconst CLASS = new GraphQLObjectType({\n  name: 'Class',\n  description: `The Class type is used to return the information about an object class.`,\n  fields: {\n    name: CLASS_NAME_ATT,\n    schemaFields: {\n      description: \"These are the schema's fields of the object class.\",\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(SCHEMA_FIELD))),\n    },\n  },\n});\n\nconst load = parseGraphQLSchema => {\n  parseGraphQLSchema.addGraphQLType(SCHEMA_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_STRING_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_STRING_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_NUMBER_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_NUMBER_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_BOOLEAN_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_BOOLEAN_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_ARRAY_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_ARRAY_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_OBJECT_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_OBJECT_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_DATE_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_DATE_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_FILE_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_FILE_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_GEO_POINT_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_GEO_POINT_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_POLYGON_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_POLYGON_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_BYTES_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_BYTES_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_POINTER_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_POINTER_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_RELATION_FIELD_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_RELATION_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_ACL_FIELD, true);\n  parseGraphQLSchema.addGraphQLType(SCHEMA_FIELDS_INPUT, true);\n  parseGraphQLSchema.addGraphQLType(CLASS, true);\n};\n\nexport {\n  SCHEMA_FIELD_NAME_ATT,\n  SCHEMA_FIELD_INPUT,\n  SCHEMA_STRING_FIELD_INPUT,\n  SCHEMA_STRING_FIELD,\n  SCHEMA_NUMBER_FIELD_INPUT,\n  SCHEMA_NUMBER_FIELD,\n  SCHEMA_BOOLEAN_FIELD_INPUT,\n  SCHEMA_BOOLEAN_FIELD,\n  SCHEMA_ARRAY_FIELD_INPUT,\n  SCHEMA_ARRAY_FIELD,\n  SCHEMA_OBJECT_FIELD_INPUT,\n  SCHEMA_OBJECT_FIELD,\n  SCHEMA_DATE_FIELD_INPUT,\n  SCHEMA_DATE_FIELD,\n  SCHEMA_FILE_FIELD_INPUT,\n  SCHEMA_FILE_FIELD,\n  SCHEMA_GEO_POINT_FIELD_INPUT,\n  SCHEMA_GEO_POINT_FIELD,\n  SCHEMA_POLYGON_FIELD_INPUT,\n  SCHEMA_POLYGON_FIELD,\n  SCHEMA_BYTES_FIELD_INPUT,\n  SCHEMA_BYTES_FIELD,\n  TARGET_CLASS_ATT,\n  SCHEMA_POINTER_FIELD_INPUT,\n  SCHEMA_POINTER_FIELD,\n  SCHEMA_RELATION_FIELD_INPUT,\n  SCHEMA_RELATION_FIELD,\n  SCHEMA_ACL_FIELD,\n  SCHEMA_FIELDS_INPUT,\n  CLASS_NAME_ATT,\n  CLASS,\n  load,\n};\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f370658774f7b3751f31efb9e67aa56d6bb5f372"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_a3pt4zoew=function(){return actualCoverage;};}return actualCoverage;}cov_a3pt4zoew();cov_a3pt4zoew().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_a3pt4zoew().s[1]++;exports.load=exports.CLASS=exports.CLASS_NAME_ATT=exports.SCHEMA_FIELDS_INPUT=exports.SCHEMA_ACL_FIELD=exports.SCHEMA_RELATION_FIELD=exports.SCHEMA_RELATION_FIELD_INPUT=exports.SCHEMA_POINTER_FIELD=exports.SCHEMA_POINTER_FIELD_INPUT=exports.TARGET_CLASS_ATT=exports.SCHEMA_BYTES_FIELD=exports.SCHEMA_BYTES_FIELD_INPUT=exports.SCHEMA_POLYGON_FIELD=exports.SCHEMA_POLYGON_FIELD_INPUT=exports.SCHEMA_GEO_POINT_FIELD=exports.SCHEMA_GEO_POINT_FIELD_INPUT=exports.SCHEMA_FILE_FIELD=exports.SCHEMA_FILE_FIELD_INPUT=exports.SCHEMA_DATE_FIELD=exports.SCHEMA_DATE_FIELD_INPUT=exports.SCHEMA_OBJECT_FIELD=exports.SCHEMA_OBJECT_FIELD_INPUT=exports.SCHEMA_ARRAY_FIELD=exports.SCHEMA_ARRAY_FIELD_INPUT=exports.SCHEMA_BOOLEAN_FIELD=exports.SCHEMA_BOOLEAN_FIELD_INPUT=exports.SCHEMA_NUMBER_FIELD=exports.SCHEMA_NUMBER_FIELD_INPUT=exports.SCHEMA_STRING_FIELD=exports.SCHEMA_STRING_FIELD_INPUT=exports.SCHEMA_FIELD_INPUT=exports.SCHEMA_FIELD_NAME_ATT=void 0;var _graphql=(cov_a3pt4zoew().s[2]++,require("graphql"));const SCHEMA_FIELD_NAME_ATT=(cov_a3pt4zoew().s[3]++,{description:'This is the field name.',type:new _graphql.GraphQLNonNull(_graphql.GraphQLString)});cov_a3pt4zoew().s[4]++;exports.SCHEMA_FIELD_NAME_ATT=SCHEMA_FIELD_NAME_ATT;const SCHEMA_FIELD_INPUT=(cov_a3pt4zoew().s[5]++,new _graphql.GraphQLInputObjectType({name:'SchemaFieldInput',description:'The SchemaFieldInput is used to specify a field of an object class schema.',fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[6]++;exports.SCHEMA_FIELD_INPUT=SCHEMA_FIELD_INPUT;const SCHEMA_FIELD=(cov_a3pt4zoew().s[7]++,new _graphql.GraphQLInterfaceType({name:'SchemaField',description:'The SchemaField interface type is used as a base type for the different supported fields of an object class schema.',fields:{name:SCHEMA_FIELD_NAME_ATT},resolveType:value=>{cov_a3pt4zoew().f[0]++;cov_a3pt4zoew().s[8]++;return{String:SCHEMA_STRING_FIELD,Number:SCHEMA_NUMBER_FIELD,Boolean:SCHEMA_BOOLEAN_FIELD,Array:SCHEMA_ARRAY_FIELD,Object:SCHEMA_OBJECT_FIELD,Date:SCHEMA_DATE_FIELD,File:SCHEMA_FILE_FIELD,GeoPoint:SCHEMA_GEO_POINT_FIELD,Polygon:SCHEMA_POLYGON_FIELD,Bytes:SCHEMA_BYTES_FIELD,Pointer:SCHEMA_POINTER_FIELD,Relation:SCHEMA_RELATION_FIELD,ACL:SCHEMA_ACL_FIELD}[value.type];}}));const SCHEMA_STRING_FIELD_INPUT=(cov_a3pt4zoew().s[9]++,new _graphql.GraphQLInputObjectType({name:'SchemaStringFieldInput',description:'The SchemaStringFieldInput is used to specify a field of type string for an object class schema.',fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[10]++;exports.SCHEMA_STRING_FIELD_INPUT=SCHEMA_STRING_FIELD_INPUT;const SCHEMA_STRING_FIELD=(cov_a3pt4zoew().s[11]++,new _graphql.GraphQLObjectType({name:'SchemaStringField',description:'The SchemaStringField is used to return information of a String field.',interfaces:[SCHEMA_FIELD],fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[12]++;exports.SCHEMA_STRING_FIELD=SCHEMA_STRING_FIELD;const SCHEMA_NUMBER_FIELD_INPUT=(cov_a3pt4zoew().s[13]++,new _graphql.GraphQLInputObjectType({name:'SchemaNumberFieldInput',description:'The SchemaNumberFieldInput is used to specify a field of type number for an object class schema.',fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[14]++;exports.SCHEMA_NUMBER_FIELD_INPUT=SCHEMA_NUMBER_FIELD_INPUT;const SCHEMA_NUMBER_FIELD=(cov_a3pt4zoew().s[15]++,new _graphql.GraphQLObjectType({name:'SchemaNumberField',description:'The SchemaNumberField is used to return information of a Number field.',interfaces:[SCHEMA_FIELD],fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[16]++;exports.SCHEMA_NUMBER_FIELD=SCHEMA_NUMBER_FIELD;const SCHEMA_BOOLEAN_FIELD_INPUT=(cov_a3pt4zoew().s[17]++,new _graphql.GraphQLInputObjectType({name:'SchemaBooleanFieldInput',description:'The SchemaBooleanFieldInput is used to specify a field of type boolean for an object class schema.',fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[18]++;exports.SCHEMA_BOOLEAN_FIELD_INPUT=SCHEMA_BOOLEAN_FIELD_INPUT;const SCHEMA_BOOLEAN_FIELD=(cov_a3pt4zoew().s[19]++,new _graphql.GraphQLObjectType({name:'SchemaBooleanField',description:'The SchemaBooleanField is used to return information of a Boolean field.',interfaces:[SCHEMA_FIELD],fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[20]++;exports.SCHEMA_BOOLEAN_FIELD=SCHEMA_BOOLEAN_FIELD;const SCHEMA_ARRAY_FIELD_INPUT=(cov_a3pt4zoew().s[21]++,new _graphql.GraphQLInputObjectType({name:'SchemaArrayFieldInput',description:'The SchemaArrayFieldInput is used to specify a field of type array for an object class schema.',fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[22]++;exports.SCHEMA_ARRAY_FIELD_INPUT=SCHEMA_ARRAY_FIELD_INPUT;const SCHEMA_ARRAY_FIELD=(cov_a3pt4zoew().s[23]++,new _graphql.GraphQLObjectType({name:'SchemaArrayField',description:'The SchemaArrayField is used to return information of an Array field.',interfaces:[SCHEMA_FIELD],fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[24]++;exports.SCHEMA_ARRAY_FIELD=SCHEMA_ARRAY_FIELD;const SCHEMA_OBJECT_FIELD_INPUT=(cov_a3pt4zoew().s[25]++,new _graphql.GraphQLInputObjectType({name:'SchemaObjectFieldInput',description:'The SchemaObjectFieldInput is used to specify a field of type object for an object class schema.',fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[26]++;exports.SCHEMA_OBJECT_FIELD_INPUT=SCHEMA_OBJECT_FIELD_INPUT;const SCHEMA_OBJECT_FIELD=(cov_a3pt4zoew().s[27]++,new _graphql.GraphQLObjectType({name:'SchemaObjectField',description:'The SchemaObjectField is used to return information of an Object field.',interfaces:[SCHEMA_FIELD],fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[28]++;exports.SCHEMA_OBJECT_FIELD=SCHEMA_OBJECT_FIELD;const SCHEMA_DATE_FIELD_INPUT=(cov_a3pt4zoew().s[29]++,new _graphql.GraphQLInputObjectType({name:'SchemaDateFieldInput',description:'The SchemaDateFieldInput is used to specify a field of type date for an object class schema.',fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[30]++;exports.SCHEMA_DATE_FIELD_INPUT=SCHEMA_DATE_FIELD_INPUT;const SCHEMA_DATE_FIELD=(cov_a3pt4zoew().s[31]++,new _graphql.GraphQLObjectType({name:'SchemaDateField',description:'The SchemaDateField is used to return information of a Date field.',interfaces:[SCHEMA_FIELD],fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[32]++;exports.SCHEMA_DATE_FIELD=SCHEMA_DATE_FIELD;const SCHEMA_FILE_FIELD_INPUT=(cov_a3pt4zoew().s[33]++,new _graphql.GraphQLInputObjectType({name:'SchemaFileFieldInput',description:'The SchemaFileFieldInput is used to specify a field of type file for an object class schema.',fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[34]++;exports.SCHEMA_FILE_FIELD_INPUT=SCHEMA_FILE_FIELD_INPUT;const SCHEMA_FILE_FIELD=(cov_a3pt4zoew().s[35]++,new _graphql.GraphQLObjectType({name:'SchemaFileField',description:'The SchemaFileField is used to return information of a File field.',interfaces:[SCHEMA_FIELD],fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[36]++;exports.SCHEMA_FILE_FIELD=SCHEMA_FILE_FIELD;const SCHEMA_GEO_POINT_FIELD_INPUT=(cov_a3pt4zoew().s[37]++,new _graphql.GraphQLInputObjectType({name:'SchemaGeoPointFieldInput',description:'The SchemaGeoPointFieldInput is used to specify a field of type geo point for an object class schema.',fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[38]++;exports.SCHEMA_GEO_POINT_FIELD_INPUT=SCHEMA_GEO_POINT_FIELD_INPUT;const SCHEMA_GEO_POINT_FIELD=(cov_a3pt4zoew().s[39]++,new _graphql.GraphQLObjectType({name:'SchemaGeoPointField',description:'The SchemaGeoPointField is used to return information of a Geo Point field.',interfaces:[SCHEMA_FIELD],fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[40]++;exports.SCHEMA_GEO_POINT_FIELD=SCHEMA_GEO_POINT_FIELD;const SCHEMA_POLYGON_FIELD_INPUT=(cov_a3pt4zoew().s[41]++,new _graphql.GraphQLInputObjectType({name:'SchemaPolygonFieldInput',description:'The SchemaPolygonFieldInput is used to specify a field of type polygon for an object class schema.',fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[42]++;exports.SCHEMA_POLYGON_FIELD_INPUT=SCHEMA_POLYGON_FIELD_INPUT;const SCHEMA_POLYGON_FIELD=(cov_a3pt4zoew().s[43]++,new _graphql.GraphQLObjectType({name:'SchemaPolygonField',description:'The SchemaPolygonField is used to return information of a Polygon field.',interfaces:[SCHEMA_FIELD],fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[44]++;exports.SCHEMA_POLYGON_FIELD=SCHEMA_POLYGON_FIELD;const SCHEMA_BYTES_FIELD_INPUT=(cov_a3pt4zoew().s[45]++,new _graphql.GraphQLInputObjectType({name:'SchemaBytesFieldInput',description:'The SchemaBytesFieldInput is used to specify a field of type bytes for an object class schema.',fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[46]++;exports.SCHEMA_BYTES_FIELD_INPUT=SCHEMA_BYTES_FIELD_INPUT;const SCHEMA_BYTES_FIELD=(cov_a3pt4zoew().s[47]++,new _graphql.GraphQLObjectType({name:'SchemaBytesField',description:'The SchemaBytesField is used to return information of a Bytes field.',interfaces:[SCHEMA_FIELD],fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[48]++;exports.SCHEMA_BYTES_FIELD=SCHEMA_BYTES_FIELD;const TARGET_CLASS_ATT=(cov_a3pt4zoew().s[49]++,{description:'This is the name of the target class for the field.',type:new _graphql.GraphQLNonNull(_graphql.GraphQLString)});cov_a3pt4zoew().s[50]++;exports.TARGET_CLASS_ATT=TARGET_CLASS_ATT;const SCHEMA_POINTER_FIELD_INPUT=(cov_a3pt4zoew().s[51]++,new _graphql.GraphQLInputObjectType({name:'PointerFieldInput',description:'The PointerFieldInput is used to specify a field of type pointer for an object class schema.',fields:{name:SCHEMA_FIELD_NAME_ATT,targetClassName:TARGET_CLASS_ATT}}));cov_a3pt4zoew().s[52]++;exports.SCHEMA_POINTER_FIELD_INPUT=SCHEMA_POINTER_FIELD_INPUT;const SCHEMA_POINTER_FIELD=(cov_a3pt4zoew().s[53]++,new _graphql.GraphQLObjectType({name:'SchemaPointerField',description:'The SchemaPointerField is used to return information of a Pointer field.',interfaces:[SCHEMA_FIELD],fields:{name:SCHEMA_FIELD_NAME_ATT,targetClassName:TARGET_CLASS_ATT}}));cov_a3pt4zoew().s[54]++;exports.SCHEMA_POINTER_FIELD=SCHEMA_POINTER_FIELD;const SCHEMA_RELATION_FIELD_INPUT=(cov_a3pt4zoew().s[55]++,new _graphql.GraphQLInputObjectType({name:'RelationFieldInput',description:'The RelationFieldInput is used to specify a field of type relation for an object class schema.',fields:{name:SCHEMA_FIELD_NAME_ATT,targetClassName:TARGET_CLASS_ATT}}));cov_a3pt4zoew().s[56]++;exports.SCHEMA_RELATION_FIELD_INPUT=SCHEMA_RELATION_FIELD_INPUT;const SCHEMA_RELATION_FIELD=(cov_a3pt4zoew().s[57]++,new _graphql.GraphQLObjectType({name:'SchemaRelationField',description:'The SchemaRelationField is used to return information of a Relation field.',interfaces:[SCHEMA_FIELD],fields:{name:SCHEMA_FIELD_NAME_ATT,targetClassName:TARGET_CLASS_ATT}}));cov_a3pt4zoew().s[58]++;exports.SCHEMA_RELATION_FIELD=SCHEMA_RELATION_FIELD;const SCHEMA_ACL_FIELD=(cov_a3pt4zoew().s[59]++,new _graphql.GraphQLObjectType({name:'SchemaACLField',description:'The SchemaACLField is used to return information of an ACL field.',interfaces:[SCHEMA_FIELD],fields:{name:SCHEMA_FIELD_NAME_ATT}}));cov_a3pt4zoew().s[60]++;exports.SCHEMA_ACL_FIELD=SCHEMA_ACL_FIELD;const SCHEMA_FIELDS_INPUT=(cov_a3pt4zoew().s[61]++,new _graphql.GraphQLInputObjectType({name:'SchemaFieldsInput',description:`The CreateClassSchemaInput type is used to specify the schema for a new object class to be created.`,fields:{addStrings:{description:'These are the String fields to be added to the class schema.',type:new _graphql.GraphQLList(new _graphql.GraphQLNonNull(SCHEMA_STRING_FIELD_INPUT))},addNumbers:{description:'These are the Number fields to be added to the class schema.',type:new _graphql.GraphQLList(new _graphql.GraphQLNonNull(SCHEMA_NUMBER_FIELD_INPUT))},addBooleans:{description:'These are the Boolean fields to be added to the class schema.',type:new _graphql.GraphQLList(new _graphql.GraphQLNonNull(SCHEMA_BOOLEAN_FIELD_INPUT))},addArrays:{description:'These are the Array fields to be added to the class schema.',type:new _graphql.GraphQLList(new _graphql.GraphQLNonNull(SCHEMA_ARRAY_FIELD_INPUT))},addObjects:{description:'These are the Object fields to be added to the class schema.',type:new _graphql.GraphQLList(new _graphql.GraphQLNonNull(SCHEMA_OBJECT_FIELD_INPUT))},addDates:{description:'These are the Date fields to be added to the class schema.',type:new _graphql.GraphQLList(new _graphql.GraphQLNonNull(SCHEMA_DATE_FIELD_INPUT))},addFiles:{description:'These are the File fields to be added to the class schema.',type:new _graphql.GraphQLList(new _graphql.GraphQLNonNull(SCHEMA_FILE_FIELD_INPUT))},addGeoPoint:{description:'This is the Geo Point field to be added to the class schema. Currently it is supported only one GeoPoint field per Class.',type:SCHEMA_GEO_POINT_FIELD_INPUT},addPolygons:{description:'These are the Polygon fields to be added to the class schema.',type:new _graphql.GraphQLList(new _graphql.GraphQLNonNull(SCHEMA_POLYGON_FIELD_INPUT))},addBytes:{description:'These are the Bytes fields to be added to the class schema.',type:new _graphql.GraphQLList(new _graphql.GraphQLNonNull(SCHEMA_BYTES_FIELD_INPUT))},addPointers:{description:'These are the Pointer fields to be added to the class schema.',type:new _graphql.GraphQLList(new _graphql.GraphQLNonNull(SCHEMA_POINTER_FIELD_INPUT))},addRelations:{description:'These are the Relation fields to be added to the class schema.',type:new _graphql.GraphQLList(new _graphql.GraphQLNonNull(SCHEMA_RELATION_FIELD_INPUT))},remove:{description:'These are the fields to be removed from the class schema.',type:new _graphql.GraphQLList(new _graphql.GraphQLNonNull(SCHEMA_FIELD_INPUT))}}}));cov_a3pt4zoew().s[62]++;exports.SCHEMA_FIELDS_INPUT=SCHEMA_FIELDS_INPUT;const CLASS_NAME_ATT=(cov_a3pt4zoew().s[63]++,{description:'This is the name of the object class.',type:new _graphql.GraphQLNonNull(_graphql.GraphQLString)});cov_a3pt4zoew().s[64]++;exports.CLASS_NAME_ATT=CLASS_NAME_ATT;const CLASS=(cov_a3pt4zoew().s[65]++,new _graphql.GraphQLObjectType({name:'Class',description:`The Class type is used to return the information about an object class.`,fields:{name:CLASS_NAME_ATT,schemaFields:{description:"These are the schema's fields of the object class.",type:new _graphql.GraphQLNonNull(new _graphql.GraphQLList(new _graphql.GraphQLNonNull(SCHEMA_FIELD)))}}}));cov_a3pt4zoew().s[66]++;exports.CLASS=CLASS;cov_a3pt4zoew().s[67]++;const load=parseGraphQLSchema=>{cov_a3pt4zoew().f[1]++;cov_a3pt4zoew().s[68]++;parseGraphQLSchema.addGraphQLType(SCHEMA_FIELD_INPUT,true);cov_a3pt4zoew().s[69]++;parseGraphQLSchema.addGraphQLType(SCHEMA_STRING_FIELD_INPUT,true);cov_a3pt4zoew().s[70]++;parseGraphQLSchema.addGraphQLType(SCHEMA_STRING_FIELD,true);cov_a3pt4zoew().s[71]++;parseGraphQLSchema.addGraphQLType(SCHEMA_NUMBER_FIELD_INPUT,true);cov_a3pt4zoew().s[72]++;parseGraphQLSchema.addGraphQLType(SCHEMA_NUMBER_FIELD,true);cov_a3pt4zoew().s[73]++;parseGraphQLSchema.addGraphQLType(SCHEMA_BOOLEAN_FIELD_INPUT,true);cov_a3pt4zoew().s[74]++;parseGraphQLSchema.addGraphQLType(SCHEMA_BOOLEAN_FIELD,true);cov_a3pt4zoew().s[75]++;parseGraphQLSchema.addGraphQLType(SCHEMA_ARRAY_FIELD_INPUT,true);cov_a3pt4zoew().s[76]++;parseGraphQLSchema.addGraphQLType(SCHEMA_ARRAY_FIELD,true);cov_a3pt4zoew().s[77]++;parseGraphQLSchema.addGraphQLType(SCHEMA_OBJECT_FIELD_INPUT,true);cov_a3pt4zoew().s[78]++;parseGraphQLSchema.addGraphQLType(SCHEMA_OBJECT_FIELD,true);cov_a3pt4zoew().s[79]++;parseGraphQLSchema.addGraphQLType(SCHEMA_DATE_FIELD_INPUT,true);cov_a3pt4zoew().s[80]++;parseGraphQLSchema.addGraphQLType(SCHEMA_DATE_FIELD,true);cov_a3pt4zoew().s[81]++;parseGraphQLSchema.addGraphQLType(SCHEMA_FILE_FIELD_INPUT,true);cov_a3pt4zoew().s[82]++;parseGraphQLSchema.addGraphQLType(SCHEMA_FILE_FIELD,true);cov_a3pt4zoew().s[83]++;parseGraphQLSchema.addGraphQLType(SCHEMA_GEO_POINT_FIELD_INPUT,true);cov_a3pt4zoew().s[84]++;parseGraphQLSchema.addGraphQLType(SCHEMA_GEO_POINT_FIELD,true);cov_a3pt4zoew().s[85]++;parseGraphQLSchema.addGraphQLType(SCHEMA_POLYGON_FIELD_INPUT,true);cov_a3pt4zoew().s[86]++;parseGraphQLSchema.addGraphQLType(SCHEMA_POLYGON_FIELD,true);cov_a3pt4zoew().s[87]++;parseGraphQLSchema.addGraphQLType(SCHEMA_BYTES_FIELD_INPUT,true);cov_a3pt4zoew().s[88]++;parseGraphQLSchema.addGraphQLType(SCHEMA_BYTES_FIELD,true);cov_a3pt4zoew().s[89]++;parseGraphQLSchema.addGraphQLType(SCHEMA_POINTER_FIELD_INPUT,true);cov_a3pt4zoew().s[90]++;parseGraphQLSchema.addGraphQLType(SCHEMA_POINTER_FIELD,true);cov_a3pt4zoew().s[91]++;parseGraphQLSchema.addGraphQLType(SCHEMA_RELATION_FIELD_INPUT,true);cov_a3pt4zoew().s[92]++;parseGraphQLSchema.addGraphQLType(SCHEMA_RELATION_FIELD,true);cov_a3pt4zoew().s[93]++;parseGraphQLSchema.addGraphQLType(SCHEMA_ACL_FIELD,true);cov_a3pt4zoew().s[94]++;parseGraphQLSchema.addGraphQLType(SCHEMA_FIELDS_INPUT,true);cov_a3pt4zoew().s[95]++;parseGraphQLSchema.addGraphQLType(CLASS,true);};cov_a3pt4zoew().s[96]++;exports.load=load;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,