"use strict";function cov_23yxm2vkr4(){var path="/parse-server/lib/cryptoUtils.js";var hash="ec2a0792c1511bfb676a4567586d3df7bade368f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/cryptoUtils.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:42}},"2":{start:{line:7,column:0},end:{line:7,column:36}},"3":{start:{line:8,column:0},end:{line:8,column:34}},"4":{start:{line:9,column:0},end:{line:9,column:28}},"5":{start:{line:10,column:0},end:{line:10,column:26}},"6":{start:{line:12,column:14},end:{line:12,column:31}},"7":{start:{line:16,column:2},end:{line:18,column:3}},"8":{start:{line:17,column:4},end:{line:17,column:63}},"9":{start:{line:20,column:2},end:{line:22,column:3}},"10":{start:{line:21,column:4},end:{line:21,column:68}},"11":{start:{line:24,column:2},end:{line:24,column:60}},"12":{start:{line:34,column:2},end:{line:36,column:3}},"13":{start:{line:35,column:4},end:{line:35,column:60}},"14":{start:{line:38,column:16},end:{line:38,column:90}},"15":{start:{line:39,column:17},end:{line:39,column:19}},"16":{start:{line:40,column:16},end:{line:40,column:46}},"17":{start:{line:42,column:2},end:{line:44,column:3}},"18":{start:{line:42,column:15},end:{line:42,column:16}},"19":{start:{line:43,column:4},end:{line:43,column:57}},"20":{start:{line:46,column:2},end:{line:46,column:18}},"21":{start:{line:51,column:2},end:{line:51,column:28}},"22":{start:{line:56,column:2},end:{line:56,column:29}},"23":{start:{line:60,column:2},end:{line:60,column:69}}},fnMap:{"0":{name:"randomHexString",decl:{start:{line:15,column:9},end:{line:15,column:24}},loc:{start:{line:15,column:31},end:{line:25,column:1}},line:15},"1":{name:"randomString",decl:{start:{line:33,column:9},end:{line:33,column:21}},loc:{start:{line:33,column:28},end:{line:47,column:1}},line:33},"2":{name:"newObjectId",decl:{start:{line:50,column:9},end:{line:50,column:20}},loc:{start:{line:50,column:32},end:{line:52,column:1}},line:50},"3":{name:"newToken",decl:{start:{line:55,column:9},end:{line:55,column:17}},loc:{start:{line:55,column:20},end:{line:57,column:1}},line:55},"4":{name:"md5Hash",decl:{start:{line:59,column:9},end:{line:59,column:16}},loc:{start:{line:59,column:25},end:{line:61,column:1}},line:59}},branchMap:{"0":{loc:{start:{line:16,column:2},end:{line:18,column:3}},type:"if",locations:[{start:{line:16,column:2},end:{line:18,column:3}},{start:{line:16,column:2},end:{line:18,column:3}}],line:16},"1":{loc:{start:{line:20,column:2},end:{line:22,column:3}},type:"if",locations:[{start:{line:20,column:2},end:{line:22,column:3}},{start:{line:20,column:2},end:{line:22,column:3}}],line:20},"2":{loc:{start:{line:34,column:2},end:{line:36,column:3}},type:"if",locations:[{start:{line:34,column:2},end:{line:36,column:3}},{start:{line:34,column:2},end:{line:36,column:3}}],line:34},"3":{loc:{start:{line:50,column:21},end:{line:50,column:30}},type:"default-arg",locations:[{start:{line:50,column:28},end:{line:50,column:30}}],line:50}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0]},inputSourceMap:{version:3,sources:["../src/cryptoUtils.js"],names:["randomHexString","size","Error","toString","randomString","chars","objectId","bytes","i","length","readUInt8","newObjectId","newToken","md5Hash","string","update","digest"],mappings:";;;;;;;;;;;AAEA;;AAEA;AACO,SAASA,eAAT,CAAyBC,IAAzB,EAA+C;AACpD,MAAIA,IAAI,KAAK,CAAb,EAAgB;AACd,UAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AACD,MAAID,IAAI,GAAG,CAAP,KAAa,CAAjB,EAAoB;AAClB,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,SAAO,yBAAYD,IAAI,GAAG,CAAnB,EAAsBE,QAAtB,CAA+B,KAA/B,CAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,YAAT,CAAsBH,IAAtB,EAA4C;AACjD,MAAIA,IAAI,KAAK,CAAb,EAAgB;AACd,UAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AACD,QAAMG,KAAK,GAAG,+BAA+B,4BAA/B,GAA8D,YAA5E;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,QAAMC,KAAK,GAAG,yBAAYN,IAAZ,CAAd;;AACA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkC,EAAED,CAApC,EAAuC;AACrCF,IAAAA,QAAQ,IAAID,KAAK,CAACE,KAAK,CAACG,SAAN,CAAgBF,CAAhB,IAAqBH,KAAK,CAACI,MAA5B,CAAjB;AACD;;AACD,SAAOH,QAAP;AACD,C,CAED;;;AACO,SAASK,WAAT,CAAqBV,IAAY,GAAG,EAApC,EAAgD;AACrD,SAAOG,YAAY,CAACH,IAAD,CAAnB;AACD,C,CAED;;;AACO,SAASW,QAAT,GAA4B;AACjC,SAAOZ,eAAe,CAAC,EAAD,CAAtB;AACD;;AAEM,SAASa,OAAT,CAAiBC,MAAjB,EAAyC;AAC9C,SAAO,wBAAW,KAAX,EAAkBC,MAAlB,CAAyBD,MAAzB,EAAiCE,MAAjC,CAAwC,KAAxC,CAAP;AACD",sourcesContent:["/* @flow */\n\nimport { randomBytes, createHash } from 'crypto';\n\n// Returns a new random hex string of the given even size.\nexport function randomHexString(size: number): string {\n  if (size === 0) {\n    throw new Error('Zero-length randomHexString is useless.');\n  }\n  if (size % 2 !== 0) {\n    throw new Error('randomHexString size must be divisible by 2.');\n  }\n  return randomBytes(size / 2).toString('hex');\n}\n\n// Returns a new random alphanumeric string of the given size.\n//\n// Note: to simplify implementation, the result has slight modulo bias,\n// because chars length of 62 doesn't divide the number of all bytes\n// (256) evenly. Such bias is acceptable for most cases when the output\n// length is long enough and doesn't need to be uniform.\nexport function randomString(size: number): string {\n  if (size === 0) {\n    throw new Error('Zero-length randomString is useless.');\n  }\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789';\n  let objectId = '';\n  const bytes = randomBytes(size);\n  for (let i = 0; i < bytes.length; ++i) {\n    objectId += chars[bytes.readUInt8(i) % chars.length];\n  }\n  return objectId;\n}\n\n// Returns a new random alphanumeric string suitable for object ID.\nexport function newObjectId(size: number = 10): string {\n  return randomString(size);\n}\n\n// Returns a new random hex string suitable for secure tokens.\nexport function newToken(): string {\n  return randomHexString(32);\n}\n\nexport function md5Hash(string: string): string {\n  return createHash('md5').update(string).digest('hex');\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ec2a0792c1511bfb676a4567586d3df7bade368f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_23yxm2vkr4=function(){return actualCoverage;};}return actualCoverage;}cov_23yxm2vkr4();cov_23yxm2vkr4().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_23yxm2vkr4().s[1]++;exports.randomHexString=randomHexString;cov_23yxm2vkr4().s[2]++;exports.randomString=randomString;cov_23yxm2vkr4().s[3]++;exports.newObjectId=newObjectId;cov_23yxm2vkr4().s[4]++;exports.newToken=newToken;cov_23yxm2vkr4().s[5]++;exports.md5Hash=md5Hash;var _crypto=(cov_23yxm2vkr4().s[6]++,require("crypto"));// Returns a new random hex string of the given even size.
function randomHexString(size){cov_23yxm2vkr4().f[0]++;cov_23yxm2vkr4().s[7]++;if(size===0){cov_23yxm2vkr4().b[0][0]++;cov_23yxm2vkr4().s[8]++;throw new Error('Zero-length randomHexString is useless.');}else{cov_23yxm2vkr4().b[0][1]++;}cov_23yxm2vkr4().s[9]++;if(size%2!==0){cov_23yxm2vkr4().b[1][0]++;cov_23yxm2vkr4().s[10]++;throw new Error('randomHexString size must be divisible by 2.');}else{cov_23yxm2vkr4().b[1][1]++;}cov_23yxm2vkr4().s[11]++;return(0,_crypto.randomBytes)(size/2).toString('hex');}// Returns a new random alphanumeric string of the given size.
//
// Note: to simplify implementation, the result has slight modulo bias,
// because chars length of 62 doesn't divide the number of all bytes
// (256) evenly. Such bias is acceptable for most cases when the output
// length is long enough and doesn't need to be uniform.
function randomString(size){cov_23yxm2vkr4().f[1]++;cov_23yxm2vkr4().s[12]++;if(size===0){cov_23yxm2vkr4().b[2][0]++;cov_23yxm2vkr4().s[13]++;throw new Error('Zero-length randomString is useless.');}else{cov_23yxm2vkr4().b[2][1]++;}const chars=(cov_23yxm2vkr4().s[14]++,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'+'abcdefghijklmnopqrstuvwxyz'+'0123456789');let objectId=(cov_23yxm2vkr4().s[15]++,'');const bytes=(cov_23yxm2vkr4().s[16]++,(0,_crypto.randomBytes)(size));cov_23yxm2vkr4().s[17]++;for(let i=(cov_23yxm2vkr4().s[18]++,0);i<bytes.length;++i){cov_23yxm2vkr4().s[19]++;objectId+=chars[bytes.readUInt8(i)%chars.length];}cov_23yxm2vkr4().s[20]++;return objectId;}// Returns a new random alphanumeric string suitable for object ID.
function newObjectId(size=(cov_23yxm2vkr4().b[3][0]++,10)){cov_23yxm2vkr4().f[2]++;cov_23yxm2vkr4().s[21]++;return randomString(size);}// Returns a new random hex string suitable for secure tokens.
function newToken(){cov_23yxm2vkr4().f[3]++;cov_23yxm2vkr4().s[22]++;return randomHexString(32);}function md5Hash(string){cov_23yxm2vkr4().f[4]++;cov_23yxm2vkr4().s[23]++;return(0,_crypto.createHash)('md5').update(string).digest('hex');}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcnlwdG9VdGlscy5qcyJdLCJuYW1lcyI6WyJyYW5kb21IZXhTdHJpbmciLCJzaXplIiwiRXJyb3IiLCJ0b1N0cmluZyIsInJhbmRvbVN0cmluZyIsImNoYXJzIiwib2JqZWN0SWQiLCJieXRlcyIsImkiLCJsZW5ndGgiLCJyZWFkVUludDgiLCJuZXdPYmplY3RJZCIsIm5ld1Rva2VuIiwibWQ1SGFzaCIsInN0cmluZyIsInVwZGF0ZSIsImRpZ2VzdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQTtBQUNPLFNBQVNBLGVBQVQsQ0FBeUJDLElBQXpCLEVBQStDO0FBQ3BELE1BQUlBLElBQUksS0FBSyxDQUFiLEVBQWdCO0FBQ2QsVUFBTSxJQUFJQyxLQUFKLENBQVUseUNBQVYsQ0FBTjtBQUNEOztBQUNELE1BQUlELElBQUksR0FBRyxDQUFQLEtBQWEsQ0FBakIsRUFBb0I7QUFDbEIsVUFBTSxJQUFJQyxLQUFKLENBQVUsOENBQVYsQ0FBTjtBQUNEOztBQUNELFNBQU8seUJBQVlELElBQUksR0FBRyxDQUFuQixFQUFzQkUsUUFBdEIsQ0FBK0IsS0FBL0IsQ0FBUDtBQUNELEMsQ0FFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNDLFlBQVQsQ0FBc0JILElBQXRCLEVBQTRDO0FBQ2pELE1BQUlBLElBQUksS0FBSyxDQUFiLEVBQWdCO0FBQ2QsVUFBTSxJQUFJQyxLQUFKLENBQVUsc0NBQVYsQ0FBTjtBQUNEOztBQUNELFFBQU1HLEtBQUssR0FBRywrQkFBK0IsNEJBQS9CLEdBQThELFlBQTVFO0FBQ0EsTUFBSUMsUUFBUSxHQUFHLEVBQWY7QUFDQSxRQUFNQyxLQUFLLEdBQUcseUJBQVlOLElBQVosQ0FBZDs7QUFDQSxPQUFLLElBQUlPLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdELEtBQUssQ0FBQ0UsTUFBMUIsRUFBa0MsRUFBRUQsQ0FBcEMsRUFBdUM7QUFDckNGLElBQUFBLFFBQVEsSUFBSUQsS0FBSyxDQUFDRSxLQUFLLENBQUNHLFNBQU4sQ0FBZ0JGLENBQWhCLElBQXFCSCxLQUFLLENBQUNJLE1BQTVCLENBQWpCO0FBQ0Q7O0FBQ0QsU0FBT0gsUUFBUDtBQUNELEMsQ0FFRDs7O0FBQ08sU0FBU0ssV0FBVCxDQUFxQlYsSUFBWSxHQUFHLEVBQXBDLEVBQWdEO0FBQ3JELFNBQU9HLFlBQVksQ0FBQ0gsSUFBRCxDQUFuQjtBQUNELEMsQ0FFRDs7O0FBQ08sU0FBU1csUUFBVCxHQUE0QjtBQUNqQyxTQUFPWixlQUFlLENBQUMsRUFBRCxDQUF0QjtBQUNEOztBQUVNLFNBQVNhLE9BQVQsQ0FBaUJDLE1BQWpCLEVBQXlDO0FBQzlDLFNBQU8sd0JBQVcsS0FBWCxFQUFrQkMsTUFBbEIsQ0FBeUJELE1BQXpCLEVBQWlDRSxNQUFqQyxDQUF3QyxLQUF4QyxDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgeyByYW5kb21CeXRlcywgY3JlYXRlSGFzaCB9IGZyb20gJ2NyeXB0byc7XG5cbi8vIFJldHVybnMgYSBuZXcgcmFuZG9tIGhleCBzdHJpbmcgb2YgdGhlIGdpdmVuIGV2ZW4gc2l6ZS5cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21IZXhTdHJpbmcoc2l6ZTogbnVtYmVyKTogc3RyaW5nIHtcbiAgaWYgKHNpemUgPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1plcm8tbGVuZ3RoIHJhbmRvbUhleFN0cmluZyBpcyB1c2VsZXNzLicpO1xuICB9XG4gIGlmIChzaXplICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcigncmFuZG9tSGV4U3RyaW5nIHNpemUgbXVzdCBiZSBkaXZpc2libGUgYnkgMi4nKTtcbiAgfVxuICByZXR1cm4gcmFuZG9tQnl0ZXMoc2l6ZSAvIDIpLnRvU3RyaW5nKCdoZXgnKTtcbn1cblxuLy8gUmV0dXJucyBhIG5ldyByYW5kb20gYWxwaGFudW1lcmljIHN0cmluZyBvZiB0aGUgZ2l2ZW4gc2l6ZS5cbi8vXG4vLyBOb3RlOiB0byBzaW1wbGlmeSBpbXBsZW1lbnRhdGlvbiwgdGhlIHJlc3VsdCBoYXMgc2xpZ2h0IG1vZHVsbyBiaWFzLFxuLy8gYmVjYXVzZSBjaGFycyBsZW5ndGggb2YgNjIgZG9lc24ndCBkaXZpZGUgdGhlIG51bWJlciBvZiBhbGwgYnl0ZXNcbi8vICgyNTYpIGV2ZW5seS4gU3VjaCBiaWFzIGlzIGFjY2VwdGFibGUgZm9yIG1vc3QgY2FzZXMgd2hlbiB0aGUgb3V0cHV0XG4vLyBsZW5ndGggaXMgbG9uZyBlbm91Z2ggYW5kIGRvZXNuJ3QgbmVlZCB0byBiZSB1bmlmb3JtLlxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbVN0cmluZyhzaXplOiBudW1iZXIpOiBzdHJpbmcge1xuICBpZiAoc2l6ZSA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignWmVyby1sZW5ndGggcmFuZG9tU3RyaW5nIGlzIHVzZWxlc3MuJyk7XG4gIH1cbiAgY29uc3QgY2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonICsgJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JyArICcwMTIzNDU2Nzg5JztcbiAgbGV0IG9iamVjdElkID0gJyc7XG4gIGNvbnN0IGJ5dGVzID0gcmFuZG9tQnl0ZXMoc2l6ZSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyArK2kpIHtcbiAgICBvYmplY3RJZCArPSBjaGFyc1tieXRlcy5yZWFkVUludDgoaSkgJSBjaGFycy5sZW5ndGhdO1xuICB9XG4gIHJldHVybiBvYmplY3RJZDtcbn1cblxuLy8gUmV0dXJucyBhIG5ldyByYW5kb20gYWxwaGFudW1lcmljIHN0cmluZyBzdWl0YWJsZSBmb3Igb2JqZWN0IElELlxuZXhwb3J0IGZ1bmN0aW9uIG5ld09iamVjdElkKHNpemU6IG51bWJlciA9IDEwKTogc3RyaW5nIHtcbiAgcmV0dXJuIHJhbmRvbVN0cmluZyhzaXplKTtcbn1cblxuLy8gUmV0dXJucyBhIG5ldyByYW5kb20gaGV4IHN0cmluZyBzdWl0YWJsZSBmb3Igc2VjdXJlIHRva2Vucy5cbmV4cG9ydCBmdW5jdGlvbiBuZXdUb2tlbigpOiBzdHJpbmcge1xuICByZXR1cm4gcmFuZG9tSGV4U3RyaW5nKDMyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1kNUhhc2goc3RyaW5nOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gY3JlYXRlSGFzaCgnbWQ1JykudXBkYXRlKHN0cmluZykuZGlnZXN0KCdoZXgnKTtcbn1cbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcnlwdG9VdGlscy5qcyJdLCJuYW1lcyI6WyJzaXplIiwiY2hhcnMiLCJvYmplY3RJZCIsImJ5dGVzIiwiaSIsInJhbmRvbVN0cmluZyIsInJhbmRvbUhleFN0cmluZyJdLCJtYXBwaW5ncyI6IjgwTUFNVTtnY0FKVixHQUFBLENBQUEsT0FBQSwwQkFBQSxPQUFBLENBQUEsUUFBQSxDQUFBLENBQUEsQ0FFQTtBQUNPLFFBQUEsQ0FBQSxlQUFBLENBQUEsSUFBQSxDQUErQyxpREFDcEQsR0FBSUEsSUFBSSxHQUFSLENBQUEsQ0FBZ0Isb0RBQ2QsS0FBTSxJQUFBLENBQUEsS0FBQSxDQUFOLHlDQUFNLENBQU4sQ0FDRCxDQUZELGlDQURvRCx3QkFJcEQsR0FBSUEsSUFBSSxDQUFKQSxDQUFBQSxHQUFKLENBQUEsQ0FBb0IscURBQ2xCLEtBQU0sSUFBQSxDQUFBLEtBQUEsQ0FBTiw4Q0FBTSxDQUFOLENBQ0QsQ0FGRCxpQ0FKb0QseUJBT3BELE1BQU8sQ0FBQSxFQUFBLE9BQUEsQ0FBQSxXQUFBLEVBQVlBLElBQUksQ0FBaEIsQ0FBQSxFQUFBLFFBQUEsQ0FBUCxLQUFPLENBQVAsQyxDQUdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFFBQUEsQ0FBQSxZQUFBLENBQUEsSUFBQSxDQUE0QyxrREFDakQsR0FBSUEsSUFBSSxHQUFSLENBQUEsQ0FBZ0IscURBQ2QsS0FBTSxJQUFBLENBQUEsS0FBQSxDQUFOLHNDQUFNLENBQU4sQ0FDRCxDQUZELGlDQUdBLEtBQU1DLENBQUFBLEtBQUssMkJBQUcsNkJBQUEsNEJBQUEsQ0FBZCxZQUFXLENBQVgsQ0FDQSxHQUFJQyxDQUFBQSxRQUFRLDJCQUFaLEVBQVksQ0FBWixDQUNBLEtBQU1DLENBQUFBLEtBQUssMkJBQUcsQ0FBQSxFQUFBLE9BQUEsQ0FBQSxXQUFBLEVBQWQsSUFBYyxDQUFILENBQVgsQ0FOaUQseUJBT2pELElBQUssR0FBSUMsQ0FBQUEsQ0FBQywyQkFBVixDQUFVLENBQVYsQ0FBZ0JBLENBQUMsQ0FBR0QsS0FBSyxDQUF6QixNQUFBLENBQWtDLEVBQWxDLENBQUEsQ0FBdUMsMEJBQ3JDRCxRQUFRLEVBQUlELEtBQUssQ0FBQ0UsS0FBSyxDQUFMQSxTQUFBQSxDQUFBQSxDQUFBQSxFQUFxQkYsS0FBSyxDQUE1Q0MsTUFBaUIsQ0FBakJBLENBQ0QsQ0FUZ0QseUJBVWpELE1BQUEsQ0FBQSxRQUFBLEMsQ0FHRjtBQUNPLFFBQUEsQ0FBQSxXQUFBLENBQXFCRixJQUFZLDZCQUFqQyxFQUFpQyxDQUFqQyxDQUFnRCxrREFDckQsTUFBT0ssQ0FBQUEsWUFBWSxDQUFuQixJQUFtQixDQUFuQixDLENBR0Y7QUFDTyxRQUFBLENBQUEsUUFBQSxFQUE0QixrREFDakMsTUFBT0MsQ0FBQUEsZUFBZSxDQUF0QixFQUFzQixDQUF0QixDQUNELENBRU0sUUFBQSxDQUFBLE9BQUEsQ0FBQSxNQUFBLENBQXlDLGtEQUM5QyxNQUFPLENBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLENBQUEsTUFBQSxFQUFBLE1BQUEsQ0FBUCxLQUFPLENBQVAsQ0FDRCxDIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuaW1wb3J0IHsgcmFuZG9tQnl0ZXMsIGNyZWF0ZUhhc2ggfSBmcm9tICdjcnlwdG8nO1xuXG4vLyBSZXR1cm5zIGEgbmV3IHJhbmRvbSBoZXggc3RyaW5nIG9mIHRoZSBnaXZlbiBldmVuIHNpemUuXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tSGV4U3RyaW5nKHNpemU6IG51bWJlcik6IHN0cmluZyB7XG4gIGlmIChzaXplID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdaZXJvLWxlbmd0aCByYW5kb21IZXhTdHJpbmcgaXMgdXNlbGVzcy4nKTtcbiAgfVxuICBpZiAoc2l6ZSAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3JhbmRvbUhleFN0cmluZyBzaXplIG11c3QgYmUgZGl2aXNpYmxlIGJ5IDIuJyk7XG4gIH1cbiAgcmV0dXJuIHJhbmRvbUJ5dGVzKHNpemUgLyAyKS50b1N0cmluZygnaGV4Jyk7XG59XG5cbi8vIFJldHVybnMgYSBuZXcgcmFuZG9tIGFscGhhbnVtZXJpYyBzdHJpbmcgb2YgdGhlIGdpdmVuIHNpemUuXG4vL1xuLy8gTm90ZTogdG8gc2ltcGxpZnkgaW1wbGVtZW50YXRpb24sIHRoZSByZXN1bHQgaGFzIHNsaWdodCBtb2R1bG8gYmlhcyxcbi8vIGJlY2F1c2UgY2hhcnMgbGVuZ3RoIG9mIDYyIGRvZXNuJ3QgZGl2aWRlIHRoZSBudW1iZXIgb2YgYWxsIGJ5dGVzXG4vLyAoMjU2KSBldmVubHkuIFN1Y2ggYmlhcyBpcyBhY2NlcHRhYmxlIGZvciBtb3N0IGNhc2VzIHdoZW4gdGhlIG91dHB1dFxuLy8gbGVuZ3RoIGlzIGxvbmcgZW5vdWdoIGFuZCBkb2Vzbid0IG5lZWQgdG8gYmUgdW5pZm9ybS5cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21TdHJpbmcoc2l6ZTogbnVtYmVyKTogc3RyaW5nIHtcbiAgaWYgKHNpemUgPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1plcm8tbGVuZ3RoIHJhbmRvbVN0cmluZyBpcyB1c2VsZXNzLicpO1xuICB9XG4gIGNvbnN0IGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaJyArICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eicgKyAnMDEyMzQ1Njc4OSc7XG4gIGxldCBvYmplY3RJZCA9ICcnO1xuICBjb25zdCBieXRlcyA9IHJhbmRvbUJ5dGVzKHNpemUpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgKytpKSB7XG4gICAgb2JqZWN0SWQgKz0gY2hhcnNbYnl0ZXMucmVhZFVJbnQ4KGkpICUgY2hhcnMubGVuZ3RoXTtcbiAgfVxuICByZXR1cm4gb2JqZWN0SWQ7XG59XG5cbi8vIFJldHVybnMgYSBuZXcgcmFuZG9tIGFscGhhbnVtZXJpYyBzdHJpbmcgc3VpdGFibGUgZm9yIG9iamVjdCBJRC5cbmV4cG9ydCBmdW5jdGlvbiBuZXdPYmplY3RJZChzaXplOiBudW1iZXIgPSAxMCk6IHN0cmluZyB7XG4gIHJldHVybiByYW5kb21TdHJpbmcoc2l6ZSk7XG59XG5cbi8vIFJldHVybnMgYSBuZXcgcmFuZG9tIGhleCBzdHJpbmcgc3VpdGFibGUgZm9yIHNlY3VyZSB0b2tlbnMuXG5leHBvcnQgZnVuY3Rpb24gbmV3VG9rZW4oKTogc3RyaW5nIHtcbiAgcmV0dXJuIHJhbmRvbUhleFN0cmluZygzMik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZDVIYXNoKHN0cmluZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGNyZWF0ZUhhc2goJ21kNScpLnVwZGF0ZShzdHJpbmcpLmRpZ2VzdCgnaGV4Jyk7XG59XG4iXX0=