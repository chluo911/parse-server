{"version":3,"sources":["../../../../src/Adapters/Storage/Postgres/PostgresStorageAdapter.js"],"names":["PostgresRelationDoesNotExistError","PostgresDuplicateRelationError","PostgresDuplicateColumnError","PostgresMissingColumnError","PostgresDuplicateObjectError","PostgresUniqueIndexViolationError","logger","require","debug","args","arguments","concat","slice","length","log","getLogger","apply","parseTypeToPostgresType","type","contents","JSON","stringify","ParseToPosgresComparator","$gt","$lt","$gte","$lte","mongoAggregateToPostgres","$dayOfMonth","$dayOfWeek","$dayOfYear","$isoDayOfWeek","$isoWeekYear","$hour","$minute","$second","$millisecond","$month","$week","$year","toPostgresValue","value","__type","iso","name","transformValue","objectId","emptyCLPS","Object","freeze","find","get","count","create","update","delete","addField","protectedFields","defaultCLPS","toParseSchema","schema","className","fields","_hashed_password","_wperm","_rperm","clps","classLevelPermissions","indexes","toPostgresSchema","_password_history","handleDotFields","object","keys","forEach","fieldName","indexOf","components","split","first","shift","currentObj","next","__op","undefined","transformDotFieldToComponents","map","cmpt","index","transformDotField","join","transformAggregateField","substr","validateKeys","key","includes","Parse","Error","INVALID_NESTED_KEY","joinTablesForSchema","list","field","push","buildWhereClause","query","caseInsensitive","patterns","values","sorts","isArrayField","initialPatternsLength","fieldValue","$exists","authDataMatch","match","$in","$regex","MAX_INT_PLUS_ONE","clauses","clauseValues","subQuery","clause","pattern","orOrAnd","not","$ne","constraintFieldName","point","longitude","latitude","$eq","isInOrNin","Array","isArray","$nin","inPatterns","allowNull","listElem","listIndex","createConstraint","baseArray","notIn","_","flatMap","elt","INVALID_JSON","$all","isAnyValueRegexStartsWith","isAllValuesRegexOrNone","i","processRegexPattern","substring","$containedBy","arr","$text","search","$search","language","$term","$language","$caseSensitive","$diacriticSensitive","$nearSphere","distance","$maxDistance","distanceInKM","$within","$box","box","left","bottom","right","top","$geoWithin","$centerSphere","centerSphere","GeoPoint","GeoPointCoder","isValidJSON","_validate","isNaN","$polygon","polygon","points","coordinates","$geoIntersects","$point","regex","operator","opts","$options","removeWhiteSpace","convertPolygonToSQL","cmp","pgComparator","postgresValue","castType","OPERATION_FORBIDDEN","PostgresStorageAdapter","constructor","uri","collectionPrefix","databaseOptions","_collectionPrefix","enableSchemaHooks","client","pgp","_client","_onchange","_pgp","_uuid","canSortOnJoinTables","watch","callback","createExplainableQuery","analyze","handleShutdown","_stream","done","$pool","end","_listenToSchema","connect","direct","on","data","payload","parse","senderId","none","_notifySchemaChange","catch","error","console","_ensureSchemaCollectionExists","conn","code","classExists","one","a","exists","setClassLevelPermissions","CLPs","task","t","setIndexesWithSchemaFormat","submittedIndexes","existingIndexes","self","Promise","resolve","_id_","_id","deletedIndexes","insertedIndexes","INVALID_QUERY","prototype","hasOwnProperty","call","tx","createIndexes","dropIndexes","createClass","parseSchema","createTable","err","detail","DUPLICATE_VALUE","valuesArray","patternsArray","assign","_email_verify_token_expires_at","_email_verify_token","_account_lockout_expires_at","_failed_login_count","_perishable_token","_perishable_token_expires_at","_password_changed_at","relations","parseType","qs","batch","joinTable","schemaUpgrade","columns","column_name","newColumns","filter","item","addFieldIfNotExists","postgresType","result","any","path","updateFieldOptions","deleteClass","operations","response","helpers","then","deleteAllClasses","now","Date","getTime","results","joins","reduce","classes","queries","deleteFields","fieldNames","idx","getAllClasses","row","getClass","createObject","transactionalSession","columnsArray","geoPoints","provider","pop","initialValues","val","termination","geoPointsInjects","l","columnsPattern","col","valuesPattern","promise","ops","underlyingError","constraint","matches","userInfo","duplicated_field","deleteObjectsByQuery","where","OBJECT_NOT_FOUND","findOneAndUpdate","updateObjectsByQuery","updatePatterns","originalUpdate","dotNotationOptions","generate","jsonb","lastKey","fieldNameIndex","str","amount","objects","keysToIncrement","k","incrementPatterns","c","keysToDelete","deletePatterns","p","updateObject","expectedType","reject","whereClause","upsertOneObject","createValue","skip","limit","sort","explain","hasLimit","hasSkip","wherePattern","limitPattern","skipPattern","sortPattern","sortCopy","sorting","transformKey","memo","originalQuery","postgresObjectToParseObject","targetClass","y","x","coords","parseFloat","createdAt","toISOString","updatedAt","expiresAt","ensureUniqueness","constraintName","constraintPatterns","message","readPreference","estimate","approximate_row_count","distinct","column","isNested","isPointerField","transformer","child","aggregate","pipeline","hint","countField","groupValues","groupPattern","stage","$group","groupByFields","alias","source","operation","$sum","$max","$min","$avg","$project","$match","$or","collapse","element","matchPatterns","$limit","$skip","$sort","order","e","trim","Boolean","parseInt","performInitialization","VolatileClassesSchemas","promises","INVALID_CLASS_NAME","all","sql","misc","jsonObjectSetKeys","array","add","addUnique","remove","containsAll","containsAllRegex","contains","ctx","duration","createIndexesIfNeeded","getIndexes","updateSchemaWithIndexes","updateEstimatedCount","createTransactionalSession","commitTransactionalSession","abortTransactionalSession","ensureIndex","indexName","options","defaultIndexName","indexNameOptions","unique","ar","foundIndex","pt","INTERNAL_SERVER_ERROR","endsWith","replace","s","startsWith","literalizeRegexPart","isStartsWithRegex","firstValuesIsRegex","some","createLiteralRegex","remaining","RegExp","matcher1","result1","prefix","matcher2","result2"],"mappings":"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","sourcesContent":["// @flow\nimport { createClient } from './PostgresClient';\n// @flow-disable-next\nimport Parse from 'parse/node';\n// @flow-disable-next\nimport _ from 'lodash';\n// @flow-disable-next\nimport { v4 as uuidv4 } from 'uuid';\nimport sql from './sql';\n\nconst PostgresRelationDoesNotExistError = '42P01';\nconst PostgresDuplicateRelationError = '42P07';\nconst PostgresDuplicateColumnError = '42701';\nconst PostgresMissingColumnError = '42703';\nconst PostgresDuplicateObjectError = '42710';\nconst PostgresUniqueIndexViolationError = '23505';\nconst logger = require('../../../logger');\n\nconst debug = function (...args: any) {\n  args = ['PG: ' + arguments[0]].concat(args.slice(1, args.length));\n  const log = logger.getLogger();\n  log.debug.apply(log, args);\n};\n\nimport { StorageAdapter } from '../StorageAdapter';\nimport type { SchemaType, QueryType, QueryOptions } from '../StorageAdapter';\n\nconst parseTypeToPostgresType = type => {\n  switch (type.type) {\n    case 'String':\n      return 'text';\n    case 'Date':\n      return 'timestamp with time zone';\n    case 'Object':\n      return 'jsonb';\n    case 'File':\n      return 'text';\n    case 'Boolean':\n      return 'boolean';\n    case 'Pointer':\n      return 'text';\n    case 'Number':\n      return 'double precision';\n    case 'GeoPoint':\n      return 'point';\n    case 'Bytes':\n      return 'jsonb';\n    case 'Polygon':\n      return 'polygon';\n    case 'Array':\n      if (type.contents && type.contents.type === 'String') {\n        return 'text[]';\n      } else {\n        return 'jsonb';\n      }\n    default:\n      throw `no type for ${JSON.stringify(type)} yet`;\n  }\n};\n\nconst ParseToPosgresComparator = {\n  $gt: '>',\n  $lt: '<',\n  $gte: '>=',\n  $lte: '<=',\n};\n\nconst mongoAggregateToPostgres = {\n  $dayOfMonth: 'DAY',\n  $dayOfWeek: 'DOW',\n  $dayOfYear: 'DOY',\n  $isoDayOfWeek: 'ISODOW',\n  $isoWeekYear: 'ISOYEAR',\n  $hour: 'HOUR',\n  $minute: 'MINUTE',\n  $second: 'SECOND',\n  $millisecond: 'MILLISECONDS',\n  $month: 'MONTH',\n  $week: 'WEEK',\n  $year: 'YEAR',\n};\n\nconst toPostgresValue = value => {\n  if (typeof value === 'object') {\n    if (value.__type === 'Date') {\n      return value.iso;\n    }\n    if (value.__type === 'File') {\n      return value.name;\n    }\n  }\n  return value;\n};\n\nconst transformValue = value => {\n  if (typeof value === 'object' && value.__type === 'Pointer') {\n    return value.objectId;\n  }\n  return value;\n};\n\n// Duplicate from then mongo adapter...\nconst emptyCLPS = Object.freeze({\n  find: {},\n  get: {},\n  count: {},\n  create: {},\n  update: {},\n  delete: {},\n  addField: {},\n  protectedFields: {},\n});\n\nconst defaultCLPS = Object.freeze({\n  find: { '*': true },\n  get: { '*': true },\n  count: { '*': true },\n  create: { '*': true },\n  update: { '*': true },\n  delete: { '*': true },\n  addField: { '*': true },\n  protectedFields: { '*': [] },\n});\n\nconst toParseSchema = schema => {\n  if (schema.className === '_User') {\n    delete schema.fields._hashed_password;\n  }\n  if (schema.fields) {\n    delete schema.fields._wperm;\n    delete schema.fields._rperm;\n  }\n  let clps = defaultCLPS;\n  if (schema.classLevelPermissions) {\n    clps = { ...emptyCLPS, ...schema.classLevelPermissions };\n  }\n  let indexes = {};\n  if (schema.indexes) {\n    indexes = { ...schema.indexes };\n  }\n  return {\n    className: schema.className,\n    fields: schema.fields,\n    classLevelPermissions: clps,\n    indexes,\n  };\n};\n\nconst toPostgresSchema = schema => {\n  if (!schema) {\n    return schema;\n  }\n  schema.fields = schema.fields || {};\n  schema.fields._wperm = { type: 'Array', contents: { type: 'String' } };\n  schema.fields._rperm = { type: 'Array', contents: { type: 'String' } };\n  if (schema.className === '_User') {\n    schema.fields._hashed_password = { type: 'String' };\n    schema.fields._password_history = { type: 'Array' };\n  }\n  return schema;\n};\n\nconst handleDotFields = object => {\n  Object.keys(object).forEach(fieldName => {\n    if (fieldName.indexOf('.') > -1) {\n      const components = fieldName.split('.');\n      const first = components.shift();\n      object[first] = object[first] || {};\n      let currentObj = object[first];\n      let next;\n      let value = object[fieldName];\n      if (value && value.__op === 'Delete') {\n        value = undefined;\n      }\n      /* eslint-disable no-cond-assign */\n      while ((next = components.shift())) {\n        /* eslint-enable no-cond-assign */\n        currentObj[next] = currentObj[next] || {};\n        if (components.length === 0) {\n          currentObj[next] = value;\n        }\n        currentObj = currentObj[next];\n      }\n      delete object[fieldName];\n    }\n  });\n  return object;\n};\n\nconst transformDotFieldToComponents = fieldName => {\n  return fieldName.split('.').map((cmpt, index) => {\n    if (index === 0) {\n      return `\"${cmpt}\"`;\n    }\n    return `'${cmpt}'`;\n  });\n};\n\nconst transformDotField = fieldName => {\n  if (fieldName.indexOf('.') === -1) {\n    return `\"${fieldName}\"`;\n  }\n  const components = transformDotFieldToComponents(fieldName);\n  let name = components.slice(0, components.length - 1).join('->');\n  name += '->>' + components[components.length - 1];\n  return name;\n};\n\nconst transformAggregateField = fieldName => {\n  if (typeof fieldName !== 'string') {\n    return fieldName;\n  }\n  if (fieldName === '$_created_at') {\n    return 'createdAt';\n  }\n  if (fieldName === '$_updated_at') {\n    return 'updatedAt';\n  }\n  return fieldName.substr(1);\n};\n\nconst validateKeys = object => {\n  if (typeof object == 'object') {\n    for (const key in object) {\n      if (typeof object[key] == 'object') {\n        validateKeys(object[key]);\n      }\n\n      if (key.includes('$') || key.includes('.')) {\n        throw new Parse.Error(\n          Parse.Error.INVALID_NESTED_KEY,\n          \"Nested keys should not contain the '$' or '.' characters\"\n        );\n      }\n    }\n  }\n};\n\n// Returns the list of join tables on a schema\nconst joinTablesForSchema = schema => {\n  const list = [];\n  if (schema) {\n    Object.keys(schema.fields).forEach(field => {\n      if (schema.fields[field].type === 'Relation') {\n        list.push(`_Join:${field}:${schema.className}`);\n      }\n    });\n  }\n  return list;\n};\n\ninterface WhereClause {\n  pattern: string;\n  values: Array<any>;\n  sorts: Array<any>;\n}\n\nconst buildWhereClause = ({ schema, query, index, caseInsensitive }): WhereClause => {\n  const patterns = [];\n  let values = [];\n  const sorts = [];\n\n  schema = toPostgresSchema(schema);\n  for (const fieldName in query) {\n    const isArrayField =\n      schema.fields && schema.fields[fieldName] && schema.fields[fieldName].type === 'Array';\n    const initialPatternsLength = patterns.length;\n    const fieldValue = query[fieldName];\n\n    // nothing in the schema, it's gonna blow up\n    if (!schema.fields[fieldName]) {\n      // as it won't exist\n      if (fieldValue && fieldValue.$exists === false) {\n        continue;\n      }\n    }\n\n    const authDataMatch = fieldName.match(/^_auth_data_([a-zA-Z0-9_]+)$/);\n    if (authDataMatch) {\n      // TODO: Handle querying by _auth_data_provider, authData is stored in authData field\n      continue;\n    } else if (caseInsensitive && (fieldName === 'username' || fieldName === 'email')) {\n      patterns.push(`LOWER($${index}:name) = LOWER($${index + 1})`);\n      values.push(fieldName, fieldValue);\n      index += 2;\n    } else if (fieldName.indexOf('.') >= 0) {\n      let name = transformDotField(fieldName);\n      if (fieldValue === null) {\n        patterns.push(`$${index}:raw IS NULL`);\n        values.push(name);\n        index += 1;\n        continue;\n      } else {\n        if (fieldValue.$in) {\n          name = transformDotFieldToComponents(fieldName).join('->');\n          patterns.push(`($${index}:raw)::jsonb @> $${index + 1}::jsonb`);\n          values.push(name, JSON.stringify(fieldValue.$in));\n          index += 2;\n        } else if (fieldValue.$regex) {\n          // Handle later\n        } else if (typeof fieldValue !== 'object') {\n          patterns.push(`$${index}:raw = $${index + 1}::text`);\n          values.push(name, fieldValue);\n          index += 2;\n        }\n      }\n    } else if (fieldValue === null || fieldValue === undefined) {\n      patterns.push(`$${index}:name IS NULL`);\n      values.push(fieldName);\n      index += 1;\n      continue;\n    } else if (typeof fieldValue === 'string') {\n      patterns.push(`$${index}:name = $${index + 1}`);\n      values.push(fieldName, fieldValue);\n      index += 2;\n    } else if (typeof fieldValue === 'boolean') {\n      patterns.push(`$${index}:name = $${index + 1}`);\n      // Can't cast boolean to double precision\n      if (schema.fields[fieldName] && schema.fields[fieldName].type === 'Number') {\n        // Should always return zero results\n        const MAX_INT_PLUS_ONE = 9223372036854775808;\n        values.push(fieldName, MAX_INT_PLUS_ONE);\n      } else {\n        values.push(fieldName, fieldValue);\n      }\n      index += 2;\n    } else if (typeof fieldValue === 'number') {\n      patterns.push(`$${index}:name = $${index + 1}`);\n      values.push(fieldName, fieldValue);\n      index += 2;\n    } else if (['$or', '$nor', '$and'].includes(fieldName)) {\n      const clauses = [];\n      const clauseValues = [];\n      fieldValue.forEach(subQuery => {\n        const clause = buildWhereClause({\n          schema,\n          query: subQuery,\n          index,\n          caseInsensitive,\n        });\n        if (clause.pattern.length > 0) {\n          clauses.push(clause.pattern);\n          clauseValues.push(...clause.values);\n          index += clause.values.length;\n        }\n      });\n\n      const orOrAnd = fieldName === '$and' ? ' AND ' : ' OR ';\n      const not = fieldName === '$nor' ? ' NOT ' : '';\n\n      patterns.push(`${not}(${clauses.join(orOrAnd)})`);\n      values.push(...clauseValues);\n    }\n\n    if (fieldValue.$ne !== undefined) {\n      if (isArrayField) {\n        fieldValue.$ne = JSON.stringify([fieldValue.$ne]);\n        patterns.push(`NOT array_contains($${index}:name, $${index + 1})`);\n      } else {\n        if (fieldValue.$ne === null) {\n          patterns.push(`$${index}:name IS NOT NULL`);\n          values.push(fieldName);\n          index += 1;\n          continue;\n        } else {\n          // if not null, we need to manually exclude null\n          if (fieldValue.$ne.__type === 'GeoPoint') {\n            patterns.push(\n              `($${index}:name <> POINT($${index + 1}, $${index + 2}) OR $${index}:name IS NULL)`\n            );\n          } else {\n            if (fieldName.indexOf('.') >= 0) {\n              const constraintFieldName = transformDotField(fieldName);\n              patterns.push(\n                `(${constraintFieldName} <> $${index} OR ${constraintFieldName} IS NULL)`\n              );\n            } else {\n              patterns.push(`($${index}:name <> $${index + 1} OR $${index}:name IS NULL)`);\n            }\n          }\n        }\n      }\n      if (fieldValue.$ne.__type === 'GeoPoint') {\n        const point = fieldValue.$ne;\n        values.push(fieldName, point.longitude, point.latitude);\n        index += 3;\n      } else {\n        // TODO: support arrays\n        values.push(fieldName, fieldValue.$ne);\n        index += 2;\n      }\n    }\n    if (fieldValue.$eq !== undefined) {\n      if (fieldValue.$eq === null) {\n        patterns.push(`$${index}:name IS NULL`);\n        values.push(fieldName);\n        index += 1;\n      } else {\n        if (fieldName.indexOf('.') >= 0) {\n          values.push(fieldValue.$eq);\n          patterns.push(`${transformDotField(fieldName)} = $${index++}`);\n        } else {\n          values.push(fieldName, fieldValue.$eq);\n          patterns.push(`$${index}:name = $${index + 1}`);\n          index += 2;\n        }\n      }\n    }\n    const isInOrNin = Array.isArray(fieldValue.$in) || Array.isArray(fieldValue.$nin);\n    if (\n      Array.isArray(fieldValue.$in) &&\n      isArrayField &&\n      schema.fields[fieldName].contents &&\n      schema.fields[fieldName].contents.type === 'String'\n    ) {\n      const inPatterns = [];\n      let allowNull = false;\n      values.push(fieldName);\n      fieldValue.$in.forEach((listElem, listIndex) => {\n        if (listElem === null) {\n          allowNull = true;\n        } else {\n          values.push(listElem);\n          inPatterns.push(`$${index + 1 + listIndex - (allowNull ? 1 : 0)}`);\n        }\n      });\n      if (allowNull) {\n        patterns.push(`($${index}:name IS NULL OR $${index}:name && ARRAY[${inPatterns.join()}])`);\n      } else {\n        patterns.push(`$${index}:name && ARRAY[${inPatterns.join()}]`);\n      }\n      index = index + 1 + inPatterns.length;\n    } else if (isInOrNin) {\n      var createConstraint = (baseArray, notIn) => {\n        const not = notIn ? ' NOT ' : '';\n        if (baseArray.length > 0) {\n          if (isArrayField) {\n            patterns.push(`${not} array_contains($${index}:name, $${index + 1})`);\n            values.push(fieldName, JSON.stringify(baseArray));\n            index += 2;\n          } else {\n            // Handle Nested Dot Notation Above\n            if (fieldName.indexOf('.') >= 0) {\n              return;\n            }\n            const inPatterns = [];\n            values.push(fieldName);\n            baseArray.forEach((listElem, listIndex) => {\n              if (listElem != null) {\n                values.push(listElem);\n                inPatterns.push(`$${index + 1 + listIndex}`);\n              }\n            });\n            patterns.push(`$${index}:name ${not} IN (${inPatterns.join()})`);\n            index = index + 1 + inPatterns.length;\n          }\n        } else if (!notIn) {\n          values.push(fieldName);\n          patterns.push(`$${index}:name IS NULL`);\n          index = index + 1;\n        } else {\n          // Handle empty array\n          if (notIn) {\n            patterns.push('1 = 1'); // Return all values\n          } else {\n            patterns.push('1 = 2'); // Return no values\n          }\n        }\n      };\n      if (fieldValue.$in) {\n        createConstraint(\n          _.flatMap(fieldValue.$in, elt => elt),\n          false\n        );\n      }\n      if (fieldValue.$nin) {\n        createConstraint(\n          _.flatMap(fieldValue.$nin, elt => elt),\n          true\n        );\n      }\n    } else if (typeof fieldValue.$in !== 'undefined') {\n      throw new Parse.Error(Parse.Error.INVALID_JSON, 'bad $in value');\n    } else if (typeof fieldValue.$nin !== 'undefined') {\n      throw new Parse.Error(Parse.Error.INVALID_JSON, 'bad $nin value');\n    }\n\n    if (Array.isArray(fieldValue.$all) && isArrayField) {\n      if (isAnyValueRegexStartsWith(fieldValue.$all)) {\n        if (!isAllValuesRegexOrNone(fieldValue.$all)) {\n          throw new Parse.Error(\n            Parse.Error.INVALID_JSON,\n            'All $all values must be of regex type or none: ' + fieldValue.$all\n          );\n        }\n\n        for (let i = 0; i < fieldValue.$all.length; i += 1) {\n          const value = processRegexPattern(fieldValue.$all[i].$regex);\n          fieldValue.$all[i] = value.substring(1) + '%';\n        }\n        patterns.push(`array_contains_all_regex($${index}:name, $${index + 1}::jsonb)`);\n      } else {\n        patterns.push(`array_contains_all($${index}:name, $${index + 1}::jsonb)`);\n      }\n      values.push(fieldName, JSON.stringify(fieldValue.$all));\n      index += 2;\n    } else if (Array.isArray(fieldValue.$all)) {\n      if (fieldValue.$all.length === 1) {\n        patterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, fieldValue.$all[0].objectId);\n        index += 2;\n      }\n    }\n\n    if (typeof fieldValue.$exists !== 'undefined') {\n      if (fieldValue.$exists) {\n        patterns.push(`$${index}:name IS NOT NULL`);\n      } else {\n        patterns.push(`$${index}:name IS NULL`);\n      }\n      values.push(fieldName);\n      index += 1;\n    }\n\n    if (fieldValue.$containedBy) {\n      const arr = fieldValue.$containedBy;\n      if (!(arr instanceof Array)) {\n        throw new Parse.Error(Parse.Error.INVALID_JSON, `bad $containedBy: should be an array`);\n      }\n\n      patterns.push(`$${index}:name <@ $${index + 1}::jsonb`);\n      values.push(fieldName, JSON.stringify(arr));\n      index += 2;\n    }\n\n    if (fieldValue.$text) {\n      const search = fieldValue.$text.$search;\n      let language = 'english';\n      if (typeof search !== 'object') {\n        throw new Parse.Error(Parse.Error.INVALID_JSON, `bad $text: $search, should be object`);\n      }\n      if (!search.$term || typeof search.$term !== 'string') {\n        throw new Parse.Error(Parse.Error.INVALID_JSON, `bad $text: $term, should be string`);\n      }\n      if (search.$language && typeof search.$language !== 'string') {\n        throw new Parse.Error(Parse.Error.INVALID_JSON, `bad $text: $language, should be string`);\n      } else if (search.$language) {\n        language = search.$language;\n      }\n      if (search.$caseSensitive && typeof search.$caseSensitive !== 'boolean') {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          `bad $text: $caseSensitive, should be boolean`\n        );\n      } else if (search.$caseSensitive) {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          `bad $text: $caseSensitive not supported, please use $regex or create a separate lower case column.`\n        );\n      }\n      if (search.$diacriticSensitive && typeof search.$diacriticSensitive !== 'boolean') {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          `bad $text: $diacriticSensitive, should be boolean`\n        );\n      } else if (search.$diacriticSensitive === false) {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          `bad $text: $diacriticSensitive - false not supported, install Postgres Unaccent Extension`\n        );\n      }\n      patterns.push(\n        `to_tsvector($${index}, $${index + 1}:name) @@ to_tsquery($${index + 2}, $${index + 3})`\n      );\n      values.push(language, fieldName, language, search.$term);\n      index += 4;\n    }\n\n    if (fieldValue.$nearSphere) {\n      const point = fieldValue.$nearSphere;\n      const distance = fieldValue.$maxDistance;\n      const distanceInKM = distance * 6371 * 1000;\n      patterns.push(\n        `ST_DistanceSphere($${index}:name::geometry, POINT($${index + 1}, $${\n          index + 2\n        })::geometry) <= $${index + 3}`\n      );\n      sorts.push(\n        `ST_DistanceSphere($${index}:name::geometry, POINT($${index + 1}, $${\n          index + 2\n        })::geometry) ASC`\n      );\n      values.push(fieldName, point.longitude, point.latitude, distanceInKM);\n      index += 4;\n    }\n\n    if (fieldValue.$within && fieldValue.$within.$box) {\n      const box = fieldValue.$within.$box;\n      const left = box[0].longitude;\n      const bottom = box[0].latitude;\n      const right = box[1].longitude;\n      const top = box[1].latitude;\n\n      patterns.push(`$${index}:name::point <@ $${index + 1}::box`);\n      values.push(fieldName, `((${left}, ${bottom}), (${right}, ${top}))`);\n      index += 2;\n    }\n\n    if (fieldValue.$geoWithin && fieldValue.$geoWithin.$centerSphere) {\n      const centerSphere = fieldValue.$geoWithin.$centerSphere;\n      if (!(centerSphere instanceof Array) || centerSphere.length < 2) {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          'bad $geoWithin value; $centerSphere should be an array of Parse.GeoPoint and distance'\n        );\n      }\n      // Get point, convert to geo point if necessary and validate\n      let point = centerSphere[0];\n      if (point instanceof Array && point.length === 2) {\n        point = new Parse.GeoPoint(point[1], point[0]);\n      } else if (!GeoPointCoder.isValidJSON(point)) {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          'bad $geoWithin value; $centerSphere geo point invalid'\n        );\n      }\n      Parse.GeoPoint._validate(point.latitude, point.longitude);\n      // Get distance and validate\n      const distance = centerSphere[1];\n      if (isNaN(distance) || distance < 0) {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          'bad $geoWithin value; $centerSphere distance invalid'\n        );\n      }\n      const distanceInKM = distance * 6371 * 1000;\n      patterns.push(\n        `ST_DistanceSphere($${index}:name::geometry, POINT($${index + 1}, $${\n          index + 2\n        })::geometry) <= $${index + 3}`\n      );\n      values.push(fieldName, point.longitude, point.latitude, distanceInKM);\n      index += 4;\n    }\n\n    if (fieldValue.$geoWithin && fieldValue.$geoWithin.$polygon) {\n      const polygon = fieldValue.$geoWithin.$polygon;\n      let points;\n      if (typeof polygon === 'object' && polygon.__type === 'Polygon') {\n        if (!polygon.coordinates || polygon.coordinates.length < 3) {\n          throw new Parse.Error(\n            Parse.Error.INVALID_JSON,\n            'bad $geoWithin value; Polygon.coordinates should contain at least 3 lon/lat pairs'\n          );\n        }\n        points = polygon.coordinates;\n      } else if (polygon instanceof Array) {\n        if (polygon.length < 3) {\n          throw new Parse.Error(\n            Parse.Error.INVALID_JSON,\n            'bad $geoWithin value; $polygon should contain at least 3 GeoPoints'\n          );\n        }\n        points = polygon;\n      } else {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          \"bad $geoWithin value; $polygon should be Polygon object or Array of Parse.GeoPoint's\"\n        );\n      }\n      points = points\n        .map(point => {\n          if (point instanceof Array && point.length === 2) {\n            Parse.GeoPoint._validate(point[1], point[0]);\n            return `(${point[0]}, ${point[1]})`;\n          }\n          if (typeof point !== 'object' || point.__type !== 'GeoPoint') {\n            throw new Parse.Error(Parse.Error.INVALID_JSON, 'bad $geoWithin value');\n          } else {\n            Parse.GeoPoint._validate(point.latitude, point.longitude);\n          }\n          return `(${point.longitude}, ${point.latitude})`;\n        })\n        .join(', ');\n\n      patterns.push(`$${index}:name::point <@ $${index + 1}::polygon`);\n      values.push(fieldName, `(${points})`);\n      index += 2;\n    }\n    if (fieldValue.$geoIntersects && fieldValue.$geoIntersects.$point) {\n      const point = fieldValue.$geoIntersects.$point;\n      if (typeof point !== 'object' || point.__type !== 'GeoPoint') {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          'bad $geoIntersect value; $point should be GeoPoint'\n        );\n      } else {\n        Parse.GeoPoint._validate(point.latitude, point.longitude);\n      }\n      patterns.push(`$${index}:name::polygon @> $${index + 1}::point`);\n      values.push(fieldName, `(${point.longitude}, ${point.latitude})`);\n      index += 2;\n    }\n\n    if (fieldValue.$regex) {\n      let regex = fieldValue.$regex;\n      let operator = '~';\n      const opts = fieldValue.$options;\n      if (opts) {\n        if (opts.indexOf('i') >= 0) {\n          operator = '~*';\n        }\n        if (opts.indexOf('x') >= 0) {\n          regex = removeWhiteSpace(regex);\n        }\n      }\n\n      const name = transformDotField(fieldName);\n      regex = processRegexPattern(regex);\n\n      patterns.push(`$${index}:raw ${operator} '$${index + 1}:raw'`);\n      values.push(name, regex);\n      index += 2;\n    }\n\n    if (fieldValue.__type === 'Pointer') {\n      if (isArrayField) {\n        patterns.push(`array_contains($${index}:name, $${index + 1})`);\n        values.push(fieldName, JSON.stringify([fieldValue]));\n        index += 2;\n      } else {\n        patterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, fieldValue.objectId);\n        index += 2;\n      }\n    }\n\n    if (fieldValue.__type === 'Date') {\n      patterns.push(`$${index}:name = $${index + 1}`);\n      values.push(fieldName, fieldValue.iso);\n      index += 2;\n    }\n\n    if (fieldValue.__type === 'GeoPoint') {\n      patterns.push(`$${index}:name ~= POINT($${index + 1}, $${index + 2})`);\n      values.push(fieldName, fieldValue.longitude, fieldValue.latitude);\n      index += 3;\n    }\n\n    if (fieldValue.__type === 'Polygon') {\n      const value = convertPolygonToSQL(fieldValue.coordinates);\n      patterns.push(`$${index}:name ~= $${index + 1}::polygon`);\n      values.push(fieldName, value);\n      index += 2;\n    }\n\n    Object.keys(ParseToPosgresComparator).forEach(cmp => {\n      if (fieldValue[cmp] || fieldValue[cmp] === 0) {\n        const pgComparator = ParseToPosgresComparator[cmp];\n        const postgresValue = toPostgresValue(fieldValue[cmp]);\n        let constraintFieldName;\n        if (fieldName.indexOf('.') >= 0) {\n          let castType;\n          switch (typeof postgresValue) {\n            case 'number':\n              castType = 'double precision';\n              break;\n            case 'boolean':\n              castType = 'boolean';\n              break;\n            default:\n              castType = undefined;\n          }\n          constraintFieldName = castType\n            ? `CAST ((${transformDotField(fieldName)}) AS ${castType})`\n            : transformDotField(fieldName);\n        } else {\n          constraintFieldName = `$${index++}:name`;\n          values.push(fieldName);\n        }\n        values.push(postgresValue);\n        patterns.push(`${constraintFieldName} ${pgComparator} $${index++}`);\n      }\n    });\n\n    if (initialPatternsLength === patterns.length) {\n      throw new Parse.Error(\n        Parse.Error.OPERATION_FORBIDDEN,\n        `Postgres doesn't support this query type yet ${JSON.stringify(fieldValue)}`\n      );\n    }\n  }\n  values = values.map(transformValue);\n  return { pattern: patterns.join(' AND '), values, sorts };\n};\n\nexport class PostgresStorageAdapter implements StorageAdapter {\n  canSortOnJoinTables: boolean;\n  enableSchemaHooks: boolean;\n\n  // Private\n  _collectionPrefix: string;\n  _client: any;\n  _onchange: any;\n  _pgp: any;\n  _stream: any;\n  _uuid: any;\n\n  constructor({ uri, collectionPrefix = '', databaseOptions = {} }: any) {\n    this._collectionPrefix = collectionPrefix;\n    this.enableSchemaHooks = !!databaseOptions.enableSchemaHooks;\n    delete databaseOptions.enableSchemaHooks;\n\n    const { client, pgp } = createClient(uri, databaseOptions);\n    this._client = client;\n    this._onchange = () => {};\n    this._pgp = pgp;\n    this._uuid = uuidv4();\n    this.canSortOnJoinTables = false;\n  }\n\n  watch(callback: () => void): void {\n    this._onchange = callback;\n  }\n\n  //Note that analyze=true will run the query, executing INSERTS, DELETES, etc.\n  createExplainableQuery(query: string, analyze: boolean = false) {\n    if (analyze) {\n      return 'EXPLAIN (ANALYZE, FORMAT JSON) ' + query;\n    } else {\n      return 'EXPLAIN (FORMAT JSON) ' + query;\n    }\n  }\n\n  handleShutdown() {\n    if (this._stream) {\n      this._stream.done();\n      delete this._stream;\n    }\n    if (!this._client) {\n      return;\n    }\n    this._client.$pool.end();\n  }\n\n  async _listenToSchema() {\n    if (!this._stream && this.enableSchemaHooks) {\n      this._stream = await this._client.connect({ direct: true });\n      this._stream.client.on('notification', data => {\n        const payload = JSON.parse(data.payload);\n        if (payload.senderId !== this._uuid) {\n          this._onchange();\n        }\n      });\n      await this._stream.none('LISTEN $1~', 'schema.change');\n    }\n  }\n\n  _notifySchemaChange() {\n    if (this._stream) {\n      this._stream\n        .none('NOTIFY $1~, $2', ['schema.change', { senderId: this._uuid }])\n        .catch(error => {\n          console.log('Failed to Notify:', error); // unlikely to ever happen\n        });\n    }\n  }\n\n  async _ensureSchemaCollectionExists(conn: any) {\n    conn = conn || this._client;\n    await conn\n      .none(\n        'CREATE TABLE IF NOT EXISTS \"_SCHEMA\" ( \"className\" varChar(120), \"schema\" jsonb, \"isParseClass\" bool, PRIMARY KEY (\"className\") )'\n      )\n      .catch(error => {\n        if (\n          error.code === PostgresDuplicateRelationError ||\n          error.code === PostgresUniqueIndexViolationError ||\n          error.code === PostgresDuplicateObjectError\n        ) {\n          // Table already exists, must have been created by a different request. Ignore error.\n        } else {\n          throw error;\n        }\n      });\n  }\n\n  async classExists(name: string) {\n    return this._client.one(\n      'SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = $1)',\n      [name],\n      a => a.exists\n    );\n  }\n\n  async setClassLevelPermissions(className: string, CLPs: any) {\n    await this._client.task('set-class-level-permissions', async t => {\n      const values = [className, 'schema', 'classLevelPermissions', JSON.stringify(CLPs)];\n      await t.none(\n        `UPDATE \"_SCHEMA\" SET $2:name = json_object_set_key($2:name, $3::text, $4::jsonb) WHERE \"className\" = $1`,\n        values\n      );\n    });\n    this._notifySchemaChange();\n  }\n\n  async setIndexesWithSchemaFormat(\n    className: string,\n    submittedIndexes: any,\n    existingIndexes: any = {},\n    fields: any,\n    conn: ?any\n  ): Promise<void> {\n    conn = conn || this._client;\n    const self = this;\n    if (submittedIndexes === undefined) {\n      return Promise.resolve();\n    }\n    if (Object.keys(existingIndexes).length === 0) {\n      existingIndexes = { _id_: { _id: 1 } };\n    }\n    const deletedIndexes = [];\n    const insertedIndexes = [];\n    Object.keys(submittedIndexes).forEach(name => {\n      const field = submittedIndexes[name];\n      if (existingIndexes[name] && field.__op !== 'Delete') {\n        throw new Parse.Error(Parse.Error.INVALID_QUERY, `Index ${name} exists, cannot update.`);\n      }\n      if (!existingIndexes[name] && field.__op === 'Delete') {\n        throw new Parse.Error(\n          Parse.Error.INVALID_QUERY,\n          `Index ${name} does not exist, cannot delete.`\n        );\n      }\n      if (field.__op === 'Delete') {\n        deletedIndexes.push(name);\n        delete existingIndexes[name];\n      } else {\n        Object.keys(field).forEach(key => {\n          if (!Object.prototype.hasOwnProperty.call(fields, key)) {\n            throw new Parse.Error(\n              Parse.Error.INVALID_QUERY,\n              `Field ${key} does not exist, cannot add index.`\n            );\n          }\n        });\n        existingIndexes[name] = field;\n        insertedIndexes.push({\n          key: field,\n          name,\n        });\n      }\n    });\n    await conn.tx('set-indexes-with-schema-format', async t => {\n      if (insertedIndexes.length > 0) {\n        await self.createIndexes(className, insertedIndexes, t);\n      }\n      if (deletedIndexes.length > 0) {\n        await self.dropIndexes(className, deletedIndexes, t);\n      }\n      await t.none(\n        'UPDATE \"_SCHEMA\" SET $2:name = json_object_set_key($2:name, $3::text, $4::jsonb) WHERE \"className\" = $1',\n        [className, 'schema', 'indexes', JSON.stringify(existingIndexes)]\n      );\n    });\n    this._notifySchemaChange();\n  }\n\n  async createClass(className: string, schema: SchemaType, conn: ?any) {\n    conn = conn || this._client;\n    const parseSchema = await conn\n      .tx('create-class', async t => {\n        await this.createTable(className, schema, t);\n        await t.none(\n          'INSERT INTO \"_SCHEMA\" (\"className\", \"schema\", \"isParseClass\") VALUES ($<className>, $<schema>, true)',\n          { className, schema }\n        );\n        await this.setIndexesWithSchemaFormat(className, schema.indexes, {}, schema.fields, t);\n        return toParseSchema(schema);\n      })\n      .catch(err => {\n        if (err.code === PostgresUniqueIndexViolationError && err.detail.includes(className)) {\n          throw new Parse.Error(Parse.Error.DUPLICATE_VALUE, `Class ${className} already exists.`);\n        }\n        throw err;\n      });\n    this._notifySchemaChange();\n    return parseSchema;\n  }\n\n  // Just create a table, do not insert in schema\n  async createTable(className: string, schema: SchemaType, conn: any) {\n    conn = conn || this._client;\n    debug('createTable');\n    const valuesArray = [];\n    const patternsArray = [];\n    const fields = Object.assign({}, schema.fields);\n    if (className === '_User') {\n      fields._email_verify_token_expires_at = { type: 'Date' };\n      fields._email_verify_token = { type: 'String' };\n      fields._account_lockout_expires_at = { type: 'Date' };\n      fields._failed_login_count = { type: 'Number' };\n      fields._perishable_token = { type: 'String' };\n      fields._perishable_token_expires_at = { type: 'Date' };\n      fields._password_changed_at = { type: 'Date' };\n      fields._password_history = { type: 'Array' };\n    }\n    let index = 2;\n    const relations = [];\n    Object.keys(fields).forEach(fieldName => {\n      const parseType = fields[fieldName];\n      // Skip when it's a relation\n      // We'll create the tables later\n      if (parseType.type === 'Relation') {\n        relations.push(fieldName);\n        return;\n      }\n      if (['_rperm', '_wperm'].indexOf(fieldName) >= 0) {\n        parseType.contents = { type: 'String' };\n      }\n      valuesArray.push(fieldName);\n      valuesArray.push(parseTypeToPostgresType(parseType));\n      patternsArray.push(`$${index}:name $${index + 1}:raw`);\n      if (fieldName === 'objectId') {\n        patternsArray.push(`PRIMARY KEY ($${index}:name)`);\n      }\n      index = index + 2;\n    });\n    const qs = `CREATE TABLE IF NOT EXISTS $1:name (${patternsArray.join()})`;\n    const values = [className, ...valuesArray];\n\n    return conn.task('create-table', async t => {\n      try {\n        await t.none(qs, values);\n      } catch (error) {\n        if (error.code !== PostgresDuplicateRelationError) {\n          throw error;\n        }\n        // ELSE: Table already exists, must have been created by a different request. Ignore the error.\n      }\n      await t.tx('create-table-tx', tx => {\n        return tx.batch(\n          relations.map(fieldName => {\n            return tx.none(\n              'CREATE TABLE IF NOT EXISTS $<joinTable:name> (\"relatedId\" varChar(120), \"owningId\" varChar(120), PRIMARY KEY(\"relatedId\", \"owningId\") )',\n              { joinTable: `_Join:${fieldName}:${className}` }\n            );\n          })\n        );\n      });\n    });\n  }\n\n  async schemaUpgrade(className: string, schema: SchemaType, conn: any) {\n    debug('schemaUpgrade');\n    conn = conn || this._client;\n    const self = this;\n\n    await conn.task('schema-upgrade', async t => {\n      const columns = await t.map(\n        'SELECT column_name FROM information_schema.columns WHERE table_name = $<className>',\n        { className },\n        a => a.column_name\n      );\n      const newColumns = Object.keys(schema.fields)\n        .filter(item => columns.indexOf(item) === -1)\n        .map(fieldName => self.addFieldIfNotExists(className, fieldName, schema.fields[fieldName]));\n\n      await t.batch(newColumns);\n    });\n  }\n\n  async addFieldIfNotExists(className: string, fieldName: string, type: any) {\n    // TODO: Must be revised for invalid logic...\n    debug('addFieldIfNotExists');\n    const self = this;\n    await this._client.tx('add-field-if-not-exists', async t => {\n      if (type.type !== 'Relation') {\n        try {\n          await t.none(\n            'ALTER TABLE $<className:name> ADD COLUMN IF NOT EXISTS $<fieldName:name> $<postgresType:raw>',\n            {\n              className,\n              fieldName,\n              postgresType: parseTypeToPostgresType(type),\n            }\n          );\n        } catch (error) {\n          if (error.code === PostgresRelationDoesNotExistError) {\n            return self.createClass(className, { fields: { [fieldName]: type } }, t);\n          }\n          if (error.code !== PostgresDuplicateColumnError) {\n            throw error;\n          }\n          // Column already exists, created by other request. Carry on to see if it's the right type.\n        }\n      } else {\n        await t.none(\n          'CREATE TABLE IF NOT EXISTS $<joinTable:name> (\"relatedId\" varChar(120), \"owningId\" varChar(120), PRIMARY KEY(\"relatedId\", \"owningId\") )',\n          { joinTable: `_Join:${fieldName}:${className}` }\n        );\n      }\n\n      const result = await t.any(\n        'SELECT \"schema\" FROM \"_SCHEMA\" WHERE \"className\" = $<className> and (\"schema\"::json->\\'fields\\'->$<fieldName>) is not null',\n        { className, fieldName }\n      );\n\n      if (result[0]) {\n        throw 'Attempted to add a field that already exists';\n      } else {\n        const path = `{fields,${fieldName}}`;\n        await t.none(\n          'UPDATE \"_SCHEMA\" SET \"schema\"=jsonb_set(\"schema\", $<path>, $<type>)  WHERE \"className\"=$<className>',\n          { path, type, className }\n        );\n      }\n    });\n    this._notifySchemaChange();\n  }\n\n  async updateFieldOptions(className: string, fieldName: string, type: any) {\n    await this._client.tx('update-schema-field-options', async t => {\n      const path = `{fields,${fieldName}}`;\n      await t.none(\n        'UPDATE \"_SCHEMA\" SET \"schema\"=jsonb_set(\"schema\", $<path>, $<type>)  WHERE \"className\"=$<className>',\n        { path, type, className }\n      );\n    });\n  }\n\n  // Drops a collection. Resolves with true if it was a Parse Schema (eg. _User, Custom, etc.)\n  // and resolves with false if it wasn't (eg. a join table). Rejects if deletion was impossible.\n  async deleteClass(className: string) {\n    const operations = [\n      { query: `DROP TABLE IF EXISTS $1:name`, values: [className] },\n      {\n        query: `DELETE FROM \"_SCHEMA\" WHERE \"className\" = $1`,\n        values: [className],\n      },\n    ];\n    const response = await this._client\n      .tx(t => t.none(this._pgp.helpers.concat(operations)))\n      .then(() => className.indexOf('_Join:') != 0); // resolves with false when _Join table\n\n    this._notifySchemaChange();\n    return response;\n  }\n\n  // Delete all data known to this adapter. Used for testing.\n  async deleteAllClasses() {\n    const now = new Date().getTime();\n    const helpers = this._pgp.helpers;\n    debug('deleteAllClasses');\n\n    await this._client\n      .task('delete-all-classes', async t => {\n        try {\n          const results = await t.any('SELECT * FROM \"_SCHEMA\"');\n          const joins = results.reduce((list: Array<string>, schema: any) => {\n            return list.concat(joinTablesForSchema(schema.schema));\n          }, []);\n          const classes = [\n            '_SCHEMA',\n            '_PushStatus',\n            '_JobStatus',\n            '_JobSchedule',\n            '_Hooks',\n            '_GlobalConfig',\n            '_GraphQLConfig',\n            '_Audience',\n            '_Idempotency',\n            ...results.map(result => result.className),\n            ...joins,\n          ];\n          const queries = classes.map(className => ({\n            query: 'DROP TABLE IF EXISTS $<className:name>',\n            values: { className },\n          }));\n          await t.tx(tx => tx.none(helpers.concat(queries)));\n        } catch (error) {\n          if (error.code !== PostgresRelationDoesNotExistError) {\n            throw error;\n          }\n          // No _SCHEMA collection. Don't delete anything.\n        }\n      })\n      .then(() => {\n        debug(`deleteAllClasses done in ${new Date().getTime() - now}`);\n      });\n  }\n\n  // Remove the column and all the data. For Relations, the _Join collection is handled\n  // specially, this function does not delete _Join columns. It should, however, indicate\n  // that the relation fields does not exist anymore. In mongo, this means removing it from\n  // the _SCHEMA collection.  There should be no actual data in the collection under the same name\n  // as the relation column, so it's fine to attempt to delete it. If the fields listed to be\n  // deleted do not exist, this function should return successfully anyways. Checking for\n  // attempts to delete non-existent fields is the responsibility of Parse Server.\n\n  // This function is not obligated to delete fields atomically. It is given the field\n  // names in a list so that databases that are capable of deleting fields atomically\n  // may do so.\n\n  // Returns a Promise.\n  async deleteFields(className: string, schema: SchemaType, fieldNames: string[]): Promise<void> {\n    debug('deleteFields');\n    fieldNames = fieldNames.reduce((list: Array<string>, fieldName: string) => {\n      const field = schema.fields[fieldName];\n      if (field.type !== 'Relation') {\n        list.push(fieldName);\n      }\n      delete schema.fields[fieldName];\n      return list;\n    }, []);\n\n    const values = [className, ...fieldNames];\n    const columns = fieldNames\n      .map((name, idx) => {\n        return `$${idx + 2}:name`;\n      })\n      .join(', DROP COLUMN');\n\n    await this._client.tx('delete-fields', async t => {\n      await t.none('UPDATE \"_SCHEMA\" SET \"schema\" = $<schema> WHERE \"className\" = $<className>', {\n        schema,\n        className,\n      });\n      if (values.length > 1) {\n        await t.none(`ALTER TABLE $1:name DROP COLUMN IF EXISTS ${columns}`, values);\n      }\n    });\n    this._notifySchemaChange();\n  }\n\n  // Return a promise for all schemas known to this adapter, in Parse format. In case the\n  // schemas cannot be retrieved, returns a promise that rejects. Requirements for the\n  // rejection reason are TBD.\n  async getAllClasses() {\n    return this._client.task('get-all-classes', async t => {\n      return await t.map('SELECT * FROM \"_SCHEMA\"', null, row =>\n        toParseSchema({ className: row.className, ...row.schema })\n      );\n    });\n  }\n\n  // Return a promise for the schema with the given name, in Parse format. If\n  // this adapter doesn't know about the schema, return a promise that rejects with\n  // undefined as the reason.\n  async getClass(className: string) {\n    debug('getClass');\n    return this._client\n      .any('SELECT * FROM \"_SCHEMA\" WHERE \"className\" = $<className>', {\n        className,\n      })\n      .then(result => {\n        if (result.length !== 1) {\n          throw undefined;\n        }\n        return result[0].schema;\n      })\n      .then(toParseSchema);\n  }\n\n  // TODO: remove the mongo format dependency in the return value\n  async createObject(\n    className: string,\n    schema: SchemaType,\n    object: any,\n    transactionalSession: ?any\n  ) {\n    debug('createObject');\n    let columnsArray = [];\n    const valuesArray = [];\n    schema = toPostgresSchema(schema);\n    const geoPoints = {};\n\n    object = handleDotFields(object);\n\n    validateKeys(object);\n\n    Object.keys(object).forEach(fieldName => {\n      if (object[fieldName] === null) {\n        return;\n      }\n      var authDataMatch = fieldName.match(/^_auth_data_([a-zA-Z0-9_]+)$/);\n      if (authDataMatch) {\n        var provider = authDataMatch[1];\n        object['authData'] = object['authData'] || {};\n        object['authData'][provider] = object[fieldName];\n        delete object[fieldName];\n        fieldName = 'authData';\n      }\n\n      columnsArray.push(fieldName);\n      if (!schema.fields[fieldName] && className === '_User') {\n        if (\n          fieldName === '_email_verify_token' ||\n          fieldName === '_failed_login_count' ||\n          fieldName === '_perishable_token' ||\n          fieldName === '_password_history'\n        ) {\n          valuesArray.push(object[fieldName]);\n        }\n\n        if (fieldName === '_email_verify_token_expires_at') {\n          if (object[fieldName]) {\n            valuesArray.push(object[fieldName].iso);\n          } else {\n            valuesArray.push(null);\n          }\n        }\n\n        if (\n          fieldName === '_account_lockout_expires_at' ||\n          fieldName === '_perishable_token_expires_at' ||\n          fieldName === '_password_changed_at'\n        ) {\n          if (object[fieldName]) {\n            valuesArray.push(object[fieldName].iso);\n          } else {\n            valuesArray.push(null);\n          }\n        }\n        return;\n      }\n      switch (schema.fields[fieldName].type) {\n        case 'Date':\n          if (object[fieldName]) {\n            valuesArray.push(object[fieldName].iso);\n          } else {\n            valuesArray.push(null);\n          }\n          break;\n        case 'Pointer':\n          valuesArray.push(object[fieldName].objectId);\n          break;\n        case 'Array':\n          if (['_rperm', '_wperm'].indexOf(fieldName) >= 0) {\n            valuesArray.push(object[fieldName]);\n          } else {\n            valuesArray.push(JSON.stringify(object[fieldName]));\n          }\n          break;\n        case 'Object':\n        case 'Bytes':\n        case 'String':\n        case 'Number':\n        case 'Boolean':\n          valuesArray.push(object[fieldName]);\n          break;\n        case 'File':\n          valuesArray.push(object[fieldName].name);\n          break;\n        case 'Polygon': {\n          const value = convertPolygonToSQL(object[fieldName].coordinates);\n          valuesArray.push(value);\n          break;\n        }\n        case 'GeoPoint':\n          // pop the point and process later\n          geoPoints[fieldName] = object[fieldName];\n          columnsArray.pop();\n          break;\n        default:\n          throw `Type ${schema.fields[fieldName].type} not supported yet`;\n      }\n    });\n\n    columnsArray = columnsArray.concat(Object.keys(geoPoints));\n    const initialValues = valuesArray.map((val, index) => {\n      let termination = '';\n      const fieldName = columnsArray[index];\n      if (['_rperm', '_wperm'].indexOf(fieldName) >= 0) {\n        termination = '::text[]';\n      } else if (schema.fields[fieldName] && schema.fields[fieldName].type === 'Array') {\n        termination = '::jsonb';\n      }\n      return `$${index + 2 + columnsArray.length}${termination}`;\n    });\n    const geoPointsInjects = Object.keys(geoPoints).map(key => {\n      const value = geoPoints[key];\n      valuesArray.push(value.longitude, value.latitude);\n      const l = valuesArray.length + columnsArray.length;\n      return `POINT($${l}, $${l + 1})`;\n    });\n\n    const columnsPattern = columnsArray.map((col, index) => `$${index + 2}:name`).join();\n    const valuesPattern = initialValues.concat(geoPointsInjects).join();\n\n    const qs = `INSERT INTO $1:name (${columnsPattern}) VALUES (${valuesPattern})`;\n    const values = [className, ...columnsArray, ...valuesArray];\n    const promise = (transactionalSession ? transactionalSession.t : this._client)\n      .none(qs, values)\n      .then(() => ({ ops: [object] }))\n      .catch(error => {\n        if (error.code === PostgresUniqueIndexViolationError) {\n          const err = new Parse.Error(\n            Parse.Error.DUPLICATE_VALUE,\n            'A duplicate value for a field with unique values was provided'\n          );\n          err.underlyingError = error;\n          if (error.constraint) {\n            const matches = error.constraint.match(/unique_([a-zA-Z]+)/);\n            if (matches && Array.isArray(matches)) {\n              err.userInfo = { duplicated_field: matches[1] };\n            }\n          }\n          error = err;\n        }\n        throw error;\n      });\n    if (transactionalSession) {\n      transactionalSession.batch.push(promise);\n    }\n    return promise;\n  }\n\n  // Remove all objects that match the given Parse Query.\n  // If no objects match, reject with OBJECT_NOT_FOUND. If objects are found and deleted, resolve with undefined.\n  // If there is some other error, reject with INTERNAL_SERVER_ERROR.\n  async deleteObjectsByQuery(\n    className: string,\n    schema: SchemaType,\n    query: QueryType,\n    transactionalSession: ?any\n  ) {\n    debug('deleteObjectsByQuery');\n    const values = [className];\n    const index = 2;\n    const where = buildWhereClause({\n      schema,\n      index,\n      query,\n      caseInsensitive: false,\n    });\n    values.push(...where.values);\n    if (Object.keys(query).length === 0) {\n      where.pattern = 'TRUE';\n    }\n    const qs = `WITH deleted AS (DELETE FROM $1:name WHERE ${where.pattern} RETURNING *) SELECT count(*) FROM deleted`;\n    const promise = (transactionalSession ? transactionalSession.t : this._client)\n      .one(qs, values, a => +a.count)\n      .then(count => {\n        if (count === 0) {\n          throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Object not found.');\n        } else {\n          return count;\n        }\n      })\n      .catch(error => {\n        if (error.code !== PostgresRelationDoesNotExistError) {\n          throw error;\n        }\n        // ELSE: Don't delete anything if doesn't exist\n      });\n    if (transactionalSession) {\n      transactionalSession.batch.push(promise);\n    }\n    return promise;\n  }\n  // Return value not currently well specified.\n  async findOneAndUpdate(\n    className: string,\n    schema: SchemaType,\n    query: QueryType,\n    update: any,\n    transactionalSession: ?any\n  ): Promise<any> {\n    debug('findOneAndUpdate');\n    return this.updateObjectsByQuery(className, schema, query, update, transactionalSession).then(\n      val => val[0]\n    );\n  }\n\n  // Apply the update to all objects that match the given Parse Query.\n  async updateObjectsByQuery(\n    className: string,\n    schema: SchemaType,\n    query: QueryType,\n    update: any,\n    transactionalSession: ?any\n  ): Promise<[any]> {\n    debug('updateObjectsByQuery');\n    const updatePatterns = [];\n    const values = [className];\n    let index = 2;\n    schema = toPostgresSchema(schema);\n\n    const originalUpdate = { ...update };\n\n    // Set flag for dot notation fields\n    const dotNotationOptions = {};\n    Object.keys(update).forEach(fieldName => {\n      if (fieldName.indexOf('.') > -1) {\n        const components = fieldName.split('.');\n        const first = components.shift();\n        dotNotationOptions[first] = true;\n      } else {\n        dotNotationOptions[fieldName] = false;\n      }\n    });\n    update = handleDotFields(update);\n    // Resolve authData first,\n    // So we don't end up with multiple key updates\n    for (const fieldName in update) {\n      const authDataMatch = fieldName.match(/^_auth_data_([a-zA-Z0-9_]+)$/);\n      if (authDataMatch) {\n        var provider = authDataMatch[1];\n        const value = update[fieldName];\n        delete update[fieldName];\n        update['authData'] = update['authData'] || {};\n        update['authData'][provider] = value;\n      }\n    }\n\n    for (const fieldName in update) {\n      const fieldValue = update[fieldName];\n      // Drop any undefined values.\n      if (typeof fieldValue === 'undefined') {\n        delete update[fieldName];\n      } else if (fieldValue === null) {\n        updatePatterns.push(`$${index}:name = NULL`);\n        values.push(fieldName);\n        index += 1;\n      } else if (fieldName == 'authData') {\n        // This recursively sets the json_object\n        // Only 1 level deep\n        const generate = (jsonb: string, key: string, value: any) => {\n          return `json_object_set_key(COALESCE(${jsonb}, '{}'::jsonb), ${key}, ${value})::jsonb`;\n        };\n        const lastKey = `$${index}:name`;\n        const fieldNameIndex = index;\n        index += 1;\n        values.push(fieldName);\n        const update = Object.keys(fieldValue).reduce((lastKey: string, key: string) => {\n          const str = generate(lastKey, `$${index}::text`, `$${index + 1}::jsonb`);\n          index += 2;\n          let value = fieldValue[key];\n          if (value) {\n            if (value.__op === 'Delete') {\n              value = null;\n            } else {\n              value = JSON.stringify(value);\n            }\n          }\n          values.push(key, value);\n          return str;\n        }, lastKey);\n        updatePatterns.push(`$${fieldNameIndex}:name = ${update}`);\n      } else if (fieldValue.__op === 'Increment') {\n        updatePatterns.push(`$${index}:name = COALESCE($${index}:name, 0) + $${index + 1}`);\n        values.push(fieldName, fieldValue.amount);\n        index += 2;\n      } else if (fieldValue.__op === 'Add') {\n        updatePatterns.push(\n          `$${index}:name = array_add(COALESCE($${index}:name, '[]'::jsonb), $${index + 1}::jsonb)`\n        );\n        values.push(fieldName, JSON.stringify(fieldValue.objects));\n        index += 2;\n      } else if (fieldValue.__op === 'Delete') {\n        updatePatterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, null);\n        index += 2;\n      } else if (fieldValue.__op === 'Remove') {\n        updatePatterns.push(\n          `$${index}:name = array_remove(COALESCE($${index}:name, '[]'::jsonb), $${\n            index + 1\n          }::jsonb)`\n        );\n        values.push(fieldName, JSON.stringify(fieldValue.objects));\n        index += 2;\n      } else if (fieldValue.__op === 'AddUnique') {\n        updatePatterns.push(\n          `$${index}:name = array_add_unique(COALESCE($${index}:name, '[]'::jsonb), $${\n            index + 1\n          }::jsonb)`\n        );\n        values.push(fieldName, JSON.stringify(fieldValue.objects));\n        index += 2;\n      } else if (fieldName === 'updatedAt') {\n        //TODO: stop special casing this. It should check for __type === 'Date' and use .iso\n        updatePatterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, fieldValue);\n        index += 2;\n      } else if (typeof fieldValue === 'string') {\n        updatePatterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, fieldValue);\n        index += 2;\n      } else if (typeof fieldValue === 'boolean') {\n        updatePatterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, fieldValue);\n        index += 2;\n      } else if (fieldValue.__type === 'Pointer') {\n        updatePatterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, fieldValue.objectId);\n        index += 2;\n      } else if (fieldValue.__type === 'Date') {\n        updatePatterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, toPostgresValue(fieldValue));\n        index += 2;\n      } else if (fieldValue instanceof Date) {\n        updatePatterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, fieldValue);\n        index += 2;\n      } else if (fieldValue.__type === 'File') {\n        updatePatterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, toPostgresValue(fieldValue));\n        index += 2;\n      } else if (fieldValue.__type === 'GeoPoint') {\n        updatePatterns.push(`$${index}:name = POINT($${index + 1}, $${index + 2})`);\n        values.push(fieldName, fieldValue.longitude, fieldValue.latitude);\n        index += 3;\n      } else if (fieldValue.__type === 'Polygon') {\n        const value = convertPolygonToSQL(fieldValue.coordinates);\n        updatePatterns.push(`$${index}:name = $${index + 1}::polygon`);\n        values.push(fieldName, value);\n        index += 2;\n      } else if (fieldValue.__type === 'Relation') {\n        // noop\n      } else if (typeof fieldValue === 'number') {\n        updatePatterns.push(`$${index}:name = $${index + 1}`);\n        values.push(fieldName, fieldValue);\n        index += 2;\n      } else if (\n        typeof fieldValue === 'object' &&\n        schema.fields[fieldName] &&\n        schema.fields[fieldName].type === 'Object'\n      ) {\n        // Gather keys to increment\n        const keysToIncrement = Object.keys(originalUpdate)\n          .filter(k => {\n            // choose top level fields that have a delete operation set\n            // Note that Object.keys is iterating over the **original** update object\n            // and that some of the keys of the original update could be null or undefined:\n            // (See the above check `if (fieldValue === null || typeof fieldValue == \"undefined\")`)\n            const value = originalUpdate[k];\n            return (\n              value &&\n              value.__op === 'Increment' &&\n              k.split('.').length === 2 &&\n              k.split('.')[0] === fieldName\n            );\n          })\n          .map(k => k.split('.')[1]);\n\n        let incrementPatterns = '';\n        if (keysToIncrement.length > 0) {\n          incrementPatterns =\n            ' || ' +\n            keysToIncrement\n              .map(c => {\n                const amount = fieldValue[c].amount;\n                return `CONCAT('{\"${c}\":', COALESCE($${index}:name->>'${c}','0')::int + ${amount}, '}')::jsonb`;\n              })\n              .join(' || ');\n          // Strip the keys\n          keysToIncrement.forEach(key => {\n            delete fieldValue[key];\n          });\n        }\n\n        const keysToDelete: Array<string> = Object.keys(originalUpdate)\n          .filter(k => {\n            // choose top level fields that have a delete operation set.\n            const value = originalUpdate[k];\n            return (\n              value &&\n              value.__op === 'Delete' &&\n              k.split('.').length === 2 &&\n              k.split('.')[0] === fieldName\n            );\n          })\n          .map(k => k.split('.')[1]);\n\n        const deletePatterns = keysToDelete.reduce((p: string, c: string, i: number) => {\n          return p + ` - '$${index + 1 + i}:value'`;\n        }, '');\n        // Override Object\n        let updateObject = \"'{}'::jsonb\";\n\n        if (dotNotationOptions[fieldName]) {\n          // Merge Object\n          updateObject = `COALESCE($${index}:name, '{}'::jsonb)`;\n        }\n        updatePatterns.push(\n          `$${index}:name = (${updateObject} ${deletePatterns} ${incrementPatterns} || $${\n            index + 1 + keysToDelete.length\n          }::jsonb )`\n        );\n        values.push(fieldName, ...keysToDelete, JSON.stringify(fieldValue));\n        index += 2 + keysToDelete.length;\n      } else if (\n        Array.isArray(fieldValue) &&\n        schema.fields[fieldName] &&\n        schema.fields[fieldName].type === 'Array'\n      ) {\n        const expectedType = parseTypeToPostgresType(schema.fields[fieldName]);\n        if (expectedType === 'text[]') {\n          updatePatterns.push(`$${index}:name = $${index + 1}::text[]`);\n          values.push(fieldName, fieldValue);\n          index += 2;\n        } else {\n          updatePatterns.push(`$${index}:name = $${index + 1}::jsonb`);\n          values.push(fieldName, JSON.stringify(fieldValue));\n          index += 2;\n        }\n      } else {\n        debug('Not supported update', { fieldName, fieldValue });\n        return Promise.reject(\n          new Parse.Error(\n            Parse.Error.OPERATION_FORBIDDEN,\n            `Postgres doesn't support update ${JSON.stringify(fieldValue)} yet`\n          )\n        );\n      }\n    }\n\n    const where = buildWhereClause({\n      schema,\n      index,\n      query,\n      caseInsensitive: false,\n    });\n    values.push(...where.values);\n\n    const whereClause = where.pattern.length > 0 ? `WHERE ${where.pattern}` : '';\n    const qs = `UPDATE $1:name SET ${updatePatterns.join()} ${whereClause} RETURNING *`;\n    const promise = (transactionalSession ? transactionalSession.t : this._client).any(qs, values);\n    if (transactionalSession) {\n      transactionalSession.batch.push(promise);\n    }\n    return promise;\n  }\n\n  // Hopefully, we can get rid of this. It's only used for config and hooks.\n  upsertOneObject(\n    className: string,\n    schema: SchemaType,\n    query: QueryType,\n    update: any,\n    transactionalSession: ?any\n  ) {\n    debug('upsertOneObject');\n    const createValue = Object.assign({}, query, update);\n    return this.createObject(className, schema, createValue, transactionalSession).catch(error => {\n      // ignore duplicate value errors as it's upsert\n      if (error.code !== Parse.Error.DUPLICATE_VALUE) {\n        throw error;\n      }\n      return this.findOneAndUpdate(className, schema, query, update, transactionalSession);\n    });\n  }\n\n  find(\n    className: string,\n    schema: SchemaType,\n    query: QueryType,\n    { skip, limit, sort, keys, caseInsensitive, explain }: QueryOptions\n  ) {\n    debug('find');\n    const hasLimit = limit !== undefined;\n    const hasSkip = skip !== undefined;\n    let values = [className];\n    const where = buildWhereClause({\n      schema,\n      query,\n      index: 2,\n      caseInsensitive,\n    });\n    values.push(...where.values);\n\n    const wherePattern = where.pattern.length > 0 ? `WHERE ${where.pattern}` : '';\n    const limitPattern = hasLimit ? `LIMIT $${values.length + 1}` : '';\n    if (hasLimit) {\n      values.push(limit);\n    }\n    const skipPattern = hasSkip ? `OFFSET $${values.length + 1}` : '';\n    if (hasSkip) {\n      values.push(skip);\n    }\n\n    let sortPattern = '';\n    if (sort) {\n      const sortCopy: any = sort;\n      const sorting = Object.keys(sort)\n        .map(key => {\n          const transformKey = transformDotFieldToComponents(key).join('->');\n          // Using $idx pattern gives:  non-integer constant in ORDER BY\n          if (sortCopy[key] === 1) {\n            return `${transformKey} ASC`;\n          }\n          return `${transformKey} DESC`;\n        })\n        .join();\n      sortPattern = sort !== undefined && Object.keys(sort).length > 0 ? `ORDER BY ${sorting}` : '';\n    }\n    if (where.sorts && Object.keys((where.sorts: any)).length > 0) {\n      sortPattern = `ORDER BY ${where.sorts.join()}`;\n    }\n\n    let columns = '*';\n    if (keys) {\n      // Exclude empty keys\n      // Replace ACL by it's keys\n      keys = keys.reduce((memo, key) => {\n        if (key === 'ACL') {\n          memo.push('_rperm');\n          memo.push('_wperm');\n        } else if (\n          key.length > 0 &&\n          // Remove selected field not referenced in the schema\n          // Relation is not a column in postgres\n          // $score is a Parse special field and is also not a column\n          ((schema.fields[key] && schema.fields[key].type !== 'Relation') || key === '$score')\n        ) {\n          memo.push(key);\n        }\n        return memo;\n      }, []);\n      columns = keys\n        .map((key, index) => {\n          if (key === '$score') {\n            return `ts_rank_cd(to_tsvector($${2}, $${3}:name), to_tsquery($${4}, $${5}), 32) as score`;\n          }\n          return `$${index + values.length + 1}:name`;\n        })\n        .join();\n      values = values.concat(keys);\n    }\n\n    const originalQuery = `SELECT ${columns} FROM $1:name ${wherePattern} ${sortPattern} ${limitPattern} ${skipPattern}`;\n    const qs = explain ? this.createExplainableQuery(originalQuery) : originalQuery;\n    return this._client\n      .any(qs, values)\n      .catch(error => {\n        // Query on non existing table, don't crash\n        if (error.code !== PostgresRelationDoesNotExistError) {\n          throw error;\n        }\n        return [];\n      })\n      .then(results => {\n        if (explain) {\n          return results;\n        }\n        return results.map(object => this.postgresObjectToParseObject(className, object, schema));\n      });\n  }\n\n  // Converts from a postgres-format object to a REST-format object.\n  // Does not strip out anything based on a lack of authentication.\n  postgresObjectToParseObject(className: string, object: any, schema: any) {\n    Object.keys(schema.fields).forEach(fieldName => {\n      if (schema.fields[fieldName].type === 'Pointer' && object[fieldName]) {\n        object[fieldName] = {\n          objectId: object[fieldName],\n          __type: 'Pointer',\n          className: schema.fields[fieldName].targetClass,\n        };\n      }\n      if (schema.fields[fieldName].type === 'Relation') {\n        object[fieldName] = {\n          __type: 'Relation',\n          className: schema.fields[fieldName].targetClass,\n        };\n      }\n      if (object[fieldName] && schema.fields[fieldName].type === 'GeoPoint') {\n        object[fieldName] = {\n          __type: 'GeoPoint',\n          latitude: object[fieldName].y,\n          longitude: object[fieldName].x,\n        };\n      }\n      if (object[fieldName] && schema.fields[fieldName].type === 'Polygon') {\n        let coords = object[fieldName];\n        coords = coords.substr(2, coords.length - 4).split('),(');\n        coords = coords.map(point => {\n          return [parseFloat(point.split(',')[1]), parseFloat(point.split(',')[0])];\n        });\n        object[fieldName] = {\n          __type: 'Polygon',\n          coordinates: coords,\n        };\n      }\n      if (object[fieldName] && schema.fields[fieldName].type === 'File') {\n        object[fieldName] = {\n          __type: 'File',\n          name: object[fieldName],\n        };\n      }\n    });\n    //TODO: remove this reliance on the mongo format. DB adapter shouldn't know there is a difference between created at and any other date field.\n    if (object.createdAt) {\n      object.createdAt = object.createdAt.toISOString();\n    }\n    if (object.updatedAt) {\n      object.updatedAt = object.updatedAt.toISOString();\n    }\n    if (object.expiresAt) {\n      object.expiresAt = {\n        __type: 'Date',\n        iso: object.expiresAt.toISOString(),\n      };\n    }\n    if (object._email_verify_token_expires_at) {\n      object._email_verify_token_expires_at = {\n        __type: 'Date',\n        iso: object._email_verify_token_expires_at.toISOString(),\n      };\n    }\n    if (object._account_lockout_expires_at) {\n      object._account_lockout_expires_at = {\n        __type: 'Date',\n        iso: object._account_lockout_expires_at.toISOString(),\n      };\n    }\n    if (object._perishable_token_expires_at) {\n      object._perishable_token_expires_at = {\n        __type: 'Date',\n        iso: object._perishable_token_expires_at.toISOString(),\n      };\n    }\n    if (object._password_changed_at) {\n      object._password_changed_at = {\n        __type: 'Date',\n        iso: object._password_changed_at.toISOString(),\n      };\n    }\n\n    for (const fieldName in object) {\n      if (object[fieldName] === null) {\n        delete object[fieldName];\n      }\n      if (object[fieldName] instanceof Date) {\n        object[fieldName] = {\n          __type: 'Date',\n          iso: object[fieldName].toISOString(),\n        };\n      }\n    }\n\n    return object;\n  }\n\n  // Create a unique index. Unique indexes on nullable fields are not allowed. Since we don't\n  // currently know which fields are nullable and which aren't, we ignore that criteria.\n  // As such, we shouldn't expose this function to users of parse until we have an out-of-band\n  // Way of determining if a field is nullable. Undefined doesn't count against uniqueness,\n  // which is why we use sparse indexes.\n  async ensureUniqueness(className: string, schema: SchemaType, fieldNames: string[]) {\n    const constraintName = `${className}_unique_${fieldNames.sort().join('_')}`;\n    const constraintPatterns = fieldNames.map((fieldName, index) => `$${index + 3}:name`);\n    const qs = `CREATE UNIQUE INDEX IF NOT EXISTS $2:name ON $1:name(${constraintPatterns.join()})`;\n    return this._client.none(qs, [className, constraintName, ...fieldNames]).catch(error => {\n      if (error.code === PostgresDuplicateRelationError && error.message.includes(constraintName)) {\n        // Index already exists. Ignore error.\n      } else if (\n        error.code === PostgresUniqueIndexViolationError &&\n        error.message.includes(constraintName)\n      ) {\n        // Cast the error into the proper parse error\n        throw new Parse.Error(\n          Parse.Error.DUPLICATE_VALUE,\n          'A duplicate value for a field with unique values was provided'\n        );\n      } else {\n        throw error;\n      }\n    });\n  }\n\n  // Executes a count.\n  async count(\n    className: string,\n    schema: SchemaType,\n    query: QueryType,\n    readPreference?: string,\n    estimate?: boolean = true\n  ) {\n    debug('count');\n    const values = [className];\n    const where = buildWhereClause({\n      schema,\n      query,\n      index: 2,\n      caseInsensitive: false,\n    });\n    values.push(...where.values);\n\n    const wherePattern = where.pattern.length > 0 ? `WHERE ${where.pattern}` : '';\n    let qs = '';\n\n    if (where.pattern.length > 0 || !estimate) {\n      qs = `SELECT count(*) FROM $1:name ${wherePattern}`;\n    } else {\n      qs = 'SELECT reltuples AS approximate_row_count FROM pg_class WHERE relname = $1';\n    }\n\n    return this._client\n      .one(qs, values, a => {\n        if (a.approximate_row_count == null || a.approximate_row_count == -1) {\n          return !isNaN(+a.count) ? +a.count : 0;\n        } else {\n          return +a.approximate_row_count;\n        }\n      })\n      .catch(error => {\n        if (error.code !== PostgresRelationDoesNotExistError) {\n          throw error;\n        }\n        return 0;\n      });\n  }\n\n  async distinct(className: string, schema: SchemaType, query: QueryType, fieldName: string) {\n    debug('distinct');\n    let field = fieldName;\n    let column = fieldName;\n    const isNested = fieldName.indexOf('.') >= 0;\n    if (isNested) {\n      field = transformDotFieldToComponents(fieldName).join('->');\n      column = fieldName.split('.')[0];\n    }\n    const isArrayField =\n      schema.fields && schema.fields[fieldName] && schema.fields[fieldName].type === 'Array';\n    const isPointerField =\n      schema.fields && schema.fields[fieldName] && schema.fields[fieldName].type === 'Pointer';\n    const values = [field, column, className];\n    const where = buildWhereClause({\n      schema,\n      query,\n      index: 4,\n      caseInsensitive: false,\n    });\n    values.push(...where.values);\n\n    const wherePattern = where.pattern.length > 0 ? `WHERE ${where.pattern}` : '';\n    const transformer = isArrayField ? 'jsonb_array_elements' : 'ON';\n    let qs = `SELECT DISTINCT ${transformer}($1:name) $2:name FROM $3:name ${wherePattern}`;\n    if (isNested) {\n      qs = `SELECT DISTINCT ${transformer}($1:raw) $2:raw FROM $3:name ${wherePattern}`;\n    }\n    return this._client\n      .any(qs, values)\n      .catch(error => {\n        if (error.code === PostgresMissingColumnError) {\n          return [];\n        }\n        throw error;\n      })\n      .then(results => {\n        if (!isNested) {\n          results = results.filter(object => object[field] !== null);\n          return results.map(object => {\n            if (!isPointerField) {\n              return object[field];\n            }\n            return {\n              __type: 'Pointer',\n              className: schema.fields[fieldName].targetClass,\n              objectId: object[field],\n            };\n          });\n        }\n        const child = fieldName.split('.')[1];\n        return results.map(object => object[column][child]);\n      })\n      .then(results =>\n        results.map(object => this.postgresObjectToParseObject(className, object, schema))\n      );\n  }\n\n  async aggregate(\n    className: string,\n    schema: any,\n    pipeline: any,\n    readPreference: ?string,\n    hint: ?mixed,\n    explain?: boolean\n  ) {\n    debug('aggregate');\n    const values = [className];\n    let index: number = 2;\n    let columns: string[] = [];\n    let countField = null;\n    let groupValues = null;\n    let wherePattern = '';\n    let limitPattern = '';\n    let skipPattern = '';\n    let sortPattern = '';\n    let groupPattern = '';\n    for (let i = 0; i < pipeline.length; i += 1) {\n      const stage = pipeline[i];\n      if (stage.$group) {\n        for (const field in stage.$group) {\n          const value = stage.$group[field];\n          if (value === null || value === undefined) {\n            continue;\n          }\n          if (field === '_id' && typeof value === 'string' && value !== '') {\n            columns.push(`$${index}:name AS \"objectId\"`);\n            groupPattern = `GROUP BY $${index}:name`;\n            values.push(transformAggregateField(value));\n            index += 1;\n            continue;\n          }\n          if (field === '_id' && typeof value === 'object' && Object.keys(value).length !== 0) {\n            groupValues = value;\n            const groupByFields = [];\n            for (const alias in value) {\n              if (typeof value[alias] === 'string' && value[alias]) {\n                const source = transformAggregateField(value[alias]);\n                if (!groupByFields.includes(`\"${source}\"`)) {\n                  groupByFields.push(`\"${source}\"`);\n                }\n                values.push(source, alias);\n                columns.push(`$${index}:name AS $${index + 1}:name`);\n                index += 2;\n              } else {\n                const operation = Object.keys(value[alias])[0];\n                const source = transformAggregateField(value[alias][operation]);\n                if (mongoAggregateToPostgres[operation]) {\n                  if (!groupByFields.includes(`\"${source}\"`)) {\n                    groupByFields.push(`\"${source}\"`);\n                  }\n                  columns.push(\n                    `EXTRACT(${\n                      mongoAggregateToPostgres[operation]\n                    } FROM $${index}:name AT TIME ZONE 'UTC')::integer AS $${index + 1}:name`\n                  );\n                  values.push(source, alias);\n                  index += 2;\n                }\n              }\n            }\n            groupPattern = `GROUP BY $${index}:raw`;\n            values.push(groupByFields.join());\n            index += 1;\n            continue;\n          }\n          if (typeof value === 'object') {\n            if (value.$sum) {\n              if (typeof value.$sum === 'string') {\n                columns.push(`SUM($${index}:name) AS $${index + 1}:name`);\n                values.push(transformAggregateField(value.$sum), field);\n                index += 2;\n              } else {\n                countField = field;\n                columns.push(`COUNT(*) AS $${index}:name`);\n                values.push(field);\n                index += 1;\n              }\n            }\n            if (value.$max) {\n              columns.push(`MAX($${index}:name) AS $${index + 1}:name`);\n              values.push(transformAggregateField(value.$max), field);\n              index += 2;\n            }\n            if (value.$min) {\n              columns.push(`MIN($${index}:name) AS $${index + 1}:name`);\n              values.push(transformAggregateField(value.$min), field);\n              index += 2;\n            }\n            if (value.$avg) {\n              columns.push(`AVG($${index}:name) AS $${index + 1}:name`);\n              values.push(transformAggregateField(value.$avg), field);\n              index += 2;\n            }\n          }\n        }\n      } else {\n        columns.push('*');\n      }\n      if (stage.$project) {\n        if (columns.includes('*')) {\n          columns = [];\n        }\n        for (const field in stage.$project) {\n          const value = stage.$project[field];\n          if (value === 1 || value === true) {\n            columns.push(`$${index}:name`);\n            values.push(field);\n            index += 1;\n          }\n        }\n      }\n      if (stage.$match) {\n        const patterns = [];\n        const orOrAnd = Object.prototype.hasOwnProperty.call(stage.$match, '$or')\n          ? ' OR '\n          : ' AND ';\n\n        if (stage.$match.$or) {\n          const collapse = {};\n          stage.$match.$or.forEach(element => {\n            for (const key in element) {\n              collapse[key] = element[key];\n            }\n          });\n          stage.$match = collapse;\n        }\n        for (const field in stage.$match) {\n          const value = stage.$match[field];\n          const matchPatterns = [];\n          Object.keys(ParseToPosgresComparator).forEach(cmp => {\n            if (value[cmp]) {\n              const pgComparator = ParseToPosgresComparator[cmp];\n              matchPatterns.push(`$${index}:name ${pgComparator} $${index + 1}`);\n              values.push(field, toPostgresValue(value[cmp]));\n              index += 2;\n            }\n          });\n          if (matchPatterns.length > 0) {\n            patterns.push(`(${matchPatterns.join(' AND ')})`);\n          }\n          if (schema.fields[field] && schema.fields[field].type && matchPatterns.length === 0) {\n            patterns.push(`$${index}:name = $${index + 1}`);\n            values.push(field, value);\n            index += 2;\n          }\n        }\n        wherePattern = patterns.length > 0 ? `WHERE ${patterns.join(` ${orOrAnd} `)}` : '';\n      }\n      if (stage.$limit) {\n        limitPattern = `LIMIT $${index}`;\n        values.push(stage.$limit);\n        index += 1;\n      }\n      if (stage.$skip) {\n        skipPattern = `OFFSET $${index}`;\n        values.push(stage.$skip);\n        index += 1;\n      }\n      if (stage.$sort) {\n        const sort = stage.$sort;\n        const keys = Object.keys(sort);\n        const sorting = keys\n          .map(key => {\n            const transformer = sort[key] === 1 ? 'ASC' : 'DESC';\n            const order = `$${index}:name ${transformer}`;\n            index += 1;\n            return order;\n          })\n          .join();\n        values.push(...keys);\n        sortPattern = sort !== undefined && sorting.length > 0 ? `ORDER BY ${sorting}` : '';\n      }\n    }\n\n    if (groupPattern) {\n      columns.forEach((e, i, a) => {\n        if (e && e.trim() === '*') {\n          a[i] = '';\n        }\n      });\n    }\n\n    const originalQuery = `SELECT ${columns\n      .filter(Boolean)\n      .join()} FROM $1:name ${wherePattern} ${skipPattern} ${groupPattern} ${sortPattern} ${limitPattern}`;\n    const qs = explain ? this.createExplainableQuery(originalQuery) : originalQuery;\n    return this._client.any(qs, values).then(a => {\n      if (explain) {\n        return a;\n      }\n      const results = a.map(object => this.postgresObjectToParseObject(className, object, schema));\n      results.forEach(result => {\n        if (!Object.prototype.hasOwnProperty.call(result, 'objectId')) {\n          result.objectId = null;\n        }\n        if (groupValues) {\n          result.objectId = {};\n          for (const key in groupValues) {\n            result.objectId[key] = result[key];\n            delete result[key];\n          }\n        }\n        if (countField) {\n          result[countField] = parseInt(result[countField], 10);\n        }\n      });\n      return results;\n    });\n  }\n\n  async performInitialization({ VolatileClassesSchemas }: any) {\n    // TODO: This method needs to be rewritten to make proper use of connections (@vitaly-t)\n    debug('performInitialization');\n    await this._ensureSchemaCollectionExists();\n    const promises = VolatileClassesSchemas.map(schema => {\n      return this.createTable(schema.className, schema)\n        .catch(err => {\n          if (\n            err.code === PostgresDuplicateRelationError ||\n            err.code === Parse.Error.INVALID_CLASS_NAME\n          ) {\n            return Promise.resolve();\n          }\n          throw err;\n        })\n        .then(() => this.schemaUpgrade(schema.className, schema));\n    });\n    promises.push(this._listenToSchema());\n    return Promise.all(promises)\n      .then(() => {\n        return this._client.tx('perform-initialization', async t => {\n          await t.none(sql.misc.jsonObjectSetKeys);\n          await t.none(sql.array.add);\n          await t.none(sql.array.addUnique);\n          await t.none(sql.array.remove);\n          await t.none(sql.array.containsAll);\n          await t.none(sql.array.containsAllRegex);\n          await t.none(sql.array.contains);\n          return t.ctx;\n        });\n      })\n      .then(ctx => {\n        debug(`initializationDone in ${ctx.duration}`);\n      })\n      .catch(error => {\n        /* eslint-disable no-console */\n        console.error(error);\n      });\n  }\n\n  async createIndexes(className: string, indexes: any, conn: ?any): Promise<void> {\n    return (conn || this._client).tx(t =>\n      t.batch(\n        indexes.map(i => {\n          return t.none('CREATE INDEX IF NOT EXISTS $1:name ON $2:name ($3:name)', [\n            i.name,\n            className,\n            i.key,\n          ]);\n        })\n      )\n    );\n  }\n\n  async createIndexesIfNeeded(\n    className: string,\n    fieldName: string,\n    type: any,\n    conn: ?any\n  ): Promise<void> {\n    await (conn || this._client).none('CREATE INDEX IF NOT EXISTS $1:name ON $2:name ($3:name)', [\n      fieldName,\n      className,\n      type,\n    ]);\n  }\n\n  async dropIndexes(className: string, indexes: any, conn: any): Promise<void> {\n    const queries = indexes.map(i => ({\n      query: 'DROP INDEX $1:name',\n      values: i,\n    }));\n    await (conn || this._client).tx(t => t.none(this._pgp.helpers.concat(queries)));\n  }\n\n  async getIndexes(className: string) {\n    const qs = 'SELECT * FROM pg_indexes WHERE tablename = ${className}';\n    return this._client.any(qs, { className });\n  }\n\n  async updateSchemaWithIndexes(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  // Used for testing purposes\n  async updateEstimatedCount(className: string) {\n    return this._client.none('ANALYZE $1:name', [className]);\n  }\n\n  async createTransactionalSession(): Promise<any> {\n    return new Promise(resolve => {\n      const transactionalSession = {};\n      transactionalSession.result = this._client.tx(t => {\n        transactionalSession.t = t;\n        transactionalSession.promise = new Promise(resolve => {\n          transactionalSession.resolve = resolve;\n        });\n        transactionalSession.batch = [];\n        resolve(transactionalSession);\n        return transactionalSession.promise;\n      });\n    });\n  }\n\n  commitTransactionalSession(transactionalSession: any): Promise<void> {\n    transactionalSession.resolve(transactionalSession.t.batch(transactionalSession.batch));\n    return transactionalSession.result;\n  }\n\n  abortTransactionalSession(transactionalSession: any): Promise<void> {\n    const result = transactionalSession.result.catch();\n    transactionalSession.batch.push(Promise.reject());\n    transactionalSession.resolve(transactionalSession.t.batch(transactionalSession.batch));\n    return result;\n  }\n\n  async ensureIndex(\n    className: string,\n    schema: SchemaType,\n    fieldNames: string[],\n    indexName: ?string,\n    caseInsensitive: boolean = false,\n    options?: Object = {}\n  ): Promise<any> {\n    const conn = options.conn !== undefined ? options.conn : this._client;\n    const defaultIndexName = `parse_default_${fieldNames.sort().join('_')}`;\n    const indexNameOptions: Object =\n      indexName != null ? { name: indexName } : { name: defaultIndexName };\n    const constraintPatterns = caseInsensitive\n      ? fieldNames.map((fieldName, index) => `lower($${index + 3}:name) varchar_pattern_ops`)\n      : fieldNames.map((fieldName, index) => `$${index + 3}:name`);\n    const qs = `CREATE INDEX IF NOT EXISTS $1:name ON $2:name (${constraintPatterns.join()})`;\n    await conn.none(qs, [indexNameOptions.name, className, ...fieldNames]).catch(error => {\n      if (\n        error.code === PostgresDuplicateRelationError &&\n        error.message.includes(indexNameOptions.name)\n      ) {\n        // Index already exists. Ignore error.\n      } else if (\n        error.code === PostgresUniqueIndexViolationError &&\n        error.message.includes(indexNameOptions.name)\n      ) {\n        // Cast the error into the proper parse error\n        throw new Parse.Error(\n          Parse.Error.DUPLICATE_VALUE,\n          'A duplicate value for a field with unique values was provided'\n        );\n      } else {\n        throw error;\n      }\n    });\n  }\n}\n\nfunction convertPolygonToSQL(polygon) {\n  if (polygon.length < 3) {\n    throw new Parse.Error(Parse.Error.INVALID_JSON, `Polygon must have at least 3 values`);\n  }\n  if (\n    polygon[0][0] !== polygon[polygon.length - 1][0] ||\n    polygon[0][1] !== polygon[polygon.length - 1][1]\n  ) {\n    polygon.push(polygon[0]);\n  }\n  const unique = polygon.filter((item, index, ar) => {\n    let foundIndex = -1;\n    for (let i = 0; i < ar.length; i += 1) {\n      const pt = ar[i];\n      if (pt[0] === item[0] && pt[1] === item[1]) {\n        foundIndex = i;\n        break;\n      }\n    }\n    return foundIndex === index;\n  });\n  if (unique.length < 3) {\n    throw new Parse.Error(\n      Parse.Error.INTERNAL_SERVER_ERROR,\n      'GeoJSON: Loop must have at least 3 different vertices'\n    );\n  }\n  const points = polygon\n    .map(point => {\n      Parse.GeoPoint._validate(parseFloat(point[1]), parseFloat(point[0]));\n      return `(${point[1]}, ${point[0]})`;\n    })\n    .join(', ');\n  return `(${points})`;\n}\n\nfunction removeWhiteSpace(regex) {\n  if (!regex.endsWith('\\n')) {\n    regex += '\\n';\n  }\n\n  // remove non escaped comments\n  return (\n    regex\n      .replace(/([^\\\\])#.*\\n/gim, '$1')\n      // remove lines starting with a comment\n      .replace(/^#.*\\n/gim, '')\n      // remove non escaped whitespace\n      .replace(/([^\\\\])\\s+/gim, '$1')\n      // remove whitespace at the beginning of a line\n      .replace(/^\\s+/, '')\n      .trim()\n  );\n}\n\nfunction processRegexPattern(s) {\n  if (s && s.startsWith('^')) {\n    // regex for startsWith\n    return '^' + literalizeRegexPart(s.slice(1));\n  } else if (s && s.endsWith('$')) {\n    // regex for endsWith\n    return literalizeRegexPart(s.slice(0, s.length - 1)) + '$';\n  }\n\n  // regex for contains\n  return literalizeRegexPart(s);\n}\n\nfunction isStartsWithRegex(value) {\n  if (!value || typeof value !== 'string' || !value.startsWith('^')) {\n    return false;\n  }\n\n  const matches = value.match(/\\^\\\\Q.*\\\\E/);\n  return !!matches;\n}\n\nfunction isAllValuesRegexOrNone(values) {\n  if (!values || !Array.isArray(values) || values.length === 0) {\n    return true;\n  }\n\n  const firstValuesIsRegex = isStartsWithRegex(values[0].$regex);\n  if (values.length === 1) {\n    return firstValuesIsRegex;\n  }\n\n  for (let i = 1, length = values.length; i < length; ++i) {\n    if (firstValuesIsRegex !== isStartsWithRegex(values[i].$regex)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isAnyValueRegexStartsWith(values) {\n  return values.some(function (value) {\n    return isStartsWithRegex(value.$regex);\n  });\n}\n\nfunction createLiteralRegex(remaining) {\n  return remaining\n    .split('')\n    .map(c => {\n      const regex = RegExp('[0-9 ]|\\\\p{L}', 'u'); // Support all unicode letter chars\n      if (c.match(regex) !== null) {\n        // don't escape alphanumeric characters\n        return c;\n      }\n      // escape everything else (single quotes with single quotes, everything else with a backslash)\n      return c === `'` ? `''` : `\\\\${c}`;\n    })\n    .join('');\n}\n\nfunction literalizeRegexPart(s: string) {\n  const matcher1 = /\\\\Q((?!\\\\E).*)\\\\E$/;\n  const result1: any = s.match(matcher1);\n  if (result1 && result1.length > 1 && result1.index > -1) {\n    // process regex that has a beginning and an end specified for the literal text\n    const prefix = s.substr(0, result1.index);\n    const remaining = result1[1];\n\n    return literalizeRegexPart(prefix) + createLiteralRegex(remaining);\n  }\n\n  // process regex that has a beginning specified for the literal text\n  const matcher2 = /\\\\Q((?!\\\\E).*)$/;\n  const result2: any = s.match(matcher2);\n  if (result2 && result2.length > 1 && result2.index > -1) {\n    const prefix = s.substr(0, result2.index);\n    const remaining = result2[1];\n\n    return literalizeRegexPart(prefix) + createLiteralRegex(remaining);\n  }\n\n  // remove all instances of \\Q and \\E from the remaining text & escape single quotes\n  return s\n    .replace(/([^\\\\])(\\\\E)/, '$1')\n    .replace(/([^\\\\])(\\\\Q)/, '$1')\n    .replace(/^\\\\E/, '')\n    .replace(/^\\\\Q/, '')\n    .replace(/([^'])'/, `$1''`)\n    .replace(/^'([^'])/, `''$1`);\n}\n\nvar GeoPointCoder = {\n  isValidJSON(value) {\n    return typeof value === 'object' && value !== null && value.__type === 'GeoPoint';\n  },\n};\n\nexport default PostgresStorageAdapter;\n"]}