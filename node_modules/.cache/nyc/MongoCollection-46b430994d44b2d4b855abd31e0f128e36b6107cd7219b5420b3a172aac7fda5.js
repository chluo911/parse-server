"use strict";function cov_1i7qanjabb(){var path="/parse-server/lib/Adapters/Storage/Mongo/MongoCollection.js";var hash="ef8bef7ecfce9a73bbecd5100cacf981e3803ef2";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Adapters/Storage/Mongo/MongoCollection.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:25}},"2":{start:{line:8,column:16},end:{line:8,column:34}},"3":{start:{line:10,column:19},end:{line:10,column:37}},"4":{start:{line:14,column:4},end:{line:14,column:44}},"5":{start:{line:34,column:4},end:{line:39,column:5}},"6":{start:{line:35,column:6},end:{line:35,column:25}},"7":{start:{line:36,column:6},end:{line:38,column:8}},"8":{start:{line:41,column:4},end:{line:78,column:7}},"9":{start:{line:53,column:6},end:{line:55,column:7}},"10":{start:{line:54,column:8},end:{line:54,column:20}},"11":{start:{line:58,column:18},end:{line:58,column:66}},"12":{start:{line:60,column:6},end:{line:62,column:7}},"13":{start:{line:61,column:8},end:{line:61,column:20}},"14":{start:{line:64,column:18},end:{line:64,column:20}},"15":{start:{line:65,column:6},end:{line:65,column:24}},"16":{start:{line:66,column:6},end:{line:77,column:10}},"17":{start:{line:67,column:18},end:{line:77,column:8}},"18":{start:{line:86,column:4},end:{line:89,column:6}},"19":{start:{line:103,column:24},end:{line:109,column:6}},"20":{start:{line:111,column:4},end:{line:113,column:5}},"21":{start:{line:112,column:6},end:{line:112,column:50}},"22":{start:{line:115,column:4},end:{line:117,column:5}},"23":{start:{line:116,column:6},end:{line:116,column:90}},"24":{start:{line:119,column:4},end:{line:121,column:5}},"25":{start:{line:120,column:6},end:{line:120,column:57}},"26":{start:{line:123,column:4},end:{line:123,column:78}},"27":{start:{line:138,column:4},end:{line:142,column:5}},"28":{start:{line:139,column:6},end:{line:141,column:9}},"29":{start:{line:144,column:27},end:{line:151,column:6}},"30":{start:{line:153,column:4},end:{line:153,column:26}},"31":{start:{line:157,column:4},end:{line:157,column:56}},"32":{start:{line:166,column:4},end:{line:171,column:17}},"33":{start:{line:175,column:4},end:{line:177,column:7}},"34":{start:{line:184,column:4},end:{line:187,column:7}},"35":{start:{line:191,column:4},end:{line:191,column:58}},"36":{start:{line:195,column:4},end:{line:197,column:7}},"37":{start:{line:201,column:4},end:{line:203,column:7}},"38":{start:{line:207,column:4},end:{line:219,column:7}},"39":{start:{line:208,column:6},end:{line:218,column:9}},"40":{start:{line:213,column:8},end:{line:217,column:9}},"41":{start:{line:214,column:10},end:{line:214,column:24}},"42":{start:{line:216,column:10},end:{line:216,column:20}},"43":{start:{line:223,column:4},end:{line:223,column:40}},"44":{start:{line:228,column:0},end:{line:228,column:34}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:2},end:{line:13,column:3}},loc:{start:{line:13,column:31},end:{line:15,column:3}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:22,column:2},end:{line:22,column:3}},loc:{start:{line:32,column:10},end:{line:79,column:3}},line:32},"2":{name:"(anonymous_2)",decl:{start:{line:51,column:13},end:{line:51,column:14}},loc:{start:{line:51,column:22},end:{line:78,column:5}},line:51},"3":{name:"(anonymous_3)",decl:{start:{line:67,column:12},end:{line:67,column:13}},loc:{start:{line:67,column:18},end:{line:77,column:8}},line:67},"4":{name:"(anonymous_4)",decl:{start:{line:85,column:2},end:{line:85,column:3}},loc:{start:{line:85,column:36},end:{line:90,column:3}},line:85},"5":{name:"(anonymous_5)",decl:{start:{line:92,column:2},end:{line:92,column:3}},loc:{start:{line:102,column:10},end:{line:124,column:3}},line:102},"6":{name:"(anonymous_6)",decl:{start:{line:126,column:2},end:{line:126,column:3}},loc:{start:{line:133,column:10},end:{line:154,column:3}},line:133},"7":{name:"(anonymous_7)",decl:{start:{line:156,column:2},end:{line:156,column:3}},loc:{start:{line:156,column:25},end:{line:158,column:3}},line:156},"8":{name:"(anonymous_8)",decl:{start:{line:160,column:2},end:{line:160,column:3}},loc:{start:{line:165,column:10},end:{line:172,column:3}},line:165},"9":{name:"(anonymous_9)",decl:{start:{line:174,column:2},end:{line:174,column:3}},loc:{start:{line:174,column:29},end:{line:178,column:3}},line:174},"10":{name:"(anonymous_10)",decl:{start:{line:183,column:2},end:{line:183,column:3}},loc:{start:{line:183,column:36},end:{line:188,column:3}},line:183},"11":{name:"(anonymous_11)",decl:{start:{line:190,column:2},end:{line:190,column:3}},loc:{start:{line:190,column:27},end:{line:192,column:3}},line:190},"12":{name:"(anonymous_12)",decl:{start:{line:194,column:2},end:{line:194,column:3}},loc:{start:{line:194,column:37},end:{line:198,column:3}},line:194},"13":{name:"(anonymous_13)",decl:{start:{line:200,column:2},end:{line:200,column:3}},loc:{start:{line:200,column:29},end:{line:204,column:3}},line:200},"14":{name:"(anonymous_14)",decl:{start:{line:206,column:2},end:{line:206,column:3}},loc:{start:{line:206,column:53},end:{line:220,column:3}},line:206},"15":{name:"(anonymous_15)",decl:{start:{line:207,column:23},end:{line:207,column:24}},loc:{start:{line:207,column:44},end:{line:219,column:5}},line:207},"16":{name:"(anonymous_16)",decl:{start:{line:212,column:9},end:{line:212,column:10}},loc:{start:{line:212,column:18},end:{line:218,column:7}},line:212},"17":{name:"(anonymous_17)",decl:{start:{line:222,column:2},end:{line:222,column:3}},loc:{start:{line:222,column:9},end:{line:224,column:3}},line:222}},branchMap:{"0":{loc:{start:{line:22,column:14},end:{line:32,column:8}},type:"default-arg",locations:[{start:{line:32,column:6},end:{line:32,column:8}}],line:22},"1":{loc:{start:{line:34,column:4},end:{line:39,column:5}},type:"if",locations:[{start:{line:34,column:4},end:{line:39,column:5}},{start:{line:34,column:4},end:{line:39,column:5}}],line:34},"2":{loc:{start:{line:34,column:8},end:{line:34,column:27}},type:"binary-expr",locations:[{start:{line:34,column:8},end:{line:34,column:12}},{start:{line:34,column:16},end:{line:34,column:27}}],line:34},"3":{loc:{start:{line:53,column:6},end:{line:55,column:7}},type:"if",locations:[{start:{line:53,column:6},end:{line:55,column:7}},{start:{line:53,column:6},end:{line:55,column:7}}],line:53},"4":{loc:{start:{line:53,column:10},end:{line:53,column:90}},type:"binary-expr",locations:[{start:{line:53,column:10},end:{line:53,column:29}},{start:{line:53,column:33},end:{line:53,column:90}}],line:53},"5":{loc:{start:{line:60,column:6},end:{line:62,column:7}},type:"if",locations:[{start:{line:60,column:6},end:{line:62,column:7}},{start:{line:60,column:6},end:{line:62,column:7}}],line:60},"6":{loc:{start:{line:92,column:18},end:{line:102,column:8}},type:"default-arg",locations:[{start:{line:102,column:6},end:{line:102,column:8}}],line:92},"7":{loc:{start:{line:111,column:4},end:{line:113,column:5}},type:"if",locations:[{start:{line:111,column:4},end:{line:113,column:5}},{start:{line:111,column:4},end:{line:113,column:5}}],line:111},"8":{loc:{start:{line:115,column:4},end:{line:117,column:5}},type:"if",locations:[{start:{line:115,column:4},end:{line:117,column:5}},{start:{line:115,column:4},end:{line:117,column:5}}],line:115},"9":{loc:{start:{line:119,column:4},end:{line:121,column:5}},type:"if",locations:[{start:{line:119,column:4},end:{line:121,column:5}},{start:{line:119,column:4},end:{line:121,column:5}}],line:119},"10":{loc:{start:{line:123,column:11},end:{line:123,column:77}},type:"cond-expr",locations:[{start:{line:123,column:21},end:{line:123,column:51}},{start:{line:123,column:54},end:{line:123,column:77}}],line:123},"11":{loc:{start:{line:126,column:15},end:{line:133,column:8}},type:"default-arg",locations:[{start:{line:133,column:6},end:{line:133,column:8}}],line:126},"12":{loc:{start:{line:138,column:4},end:{line:142,column:5}},type:"if",locations:[{start:{line:138,column:4},end:{line:142,column:5}},{start:{line:138,column:4},end:{line:142,column:5}}],line:138},"13":{loc:{start:{line:138,column:8},end:{line:138,column:63}},type:"binary-expr",locations:[{start:{line:138,column:8},end:{line:138,column:33}},{start:{line:138,column:37},end:{line:138,column:63}}],line:138},"14":{loc:{start:{line:160,column:22},end:{line:165,column:8}},type:"default-arg",locations:[{start:{line:165,column:6},end:{line:165,column:8}}],line:160},"15":{loc:{start:{line:213,column:8},end:{line:217,column:9}},type:"if",locations:[{start:{line:213,column:8},end:{line:217,column:9}},{start:{line:213,column:8},end:{line:217,column:9}}],line:213}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},b:{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0],"12":[0,0],"13":[0,0],"14":[0],"15":[0,0]},inputSourceMap:{version:3,sources:["../../../../src/Adapters/Storage/Mongo/MongoCollection.js"],names:["mongodb","require","Collection","MongoCollection","constructor","mongoCollection","_mongoCollection","find","query","skip","limit","sort","keys","maxTimeMS","readPreference","hint","caseInsensitive","explain","$score","score","$meta","_rawFind","catch","error","code","message","match","key","index","createIndex","then","caseInsensitiveCollation","locale","strength","findOperation","project","collation","toArray","count","Object","length","estimatedDocumentCount","countOperation","countDocuments","distinct","field","aggregate","pipeline","insertOne","object","session","upsertOne","update","updateOne","upsert","updateMany","deleteMany","_ensureSparseUniqueIndexInBackground","indexRequest","Promise","resolve","reject","unique","background","sparse","drop"],mappings:"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",sourcesContent:["const mongodb = require('mongodb');\nconst Collection = mongodb.Collection;\n\nexport default class MongoCollection {\n  _mongoCollection: Collection;\n\n  constructor(mongoCollection: Collection) {\n    this._mongoCollection = mongoCollection;\n  }\n\n  // Does a find with \"smart indexing\".\n  // Currently this just means, if it needs a geoindex and there is\n  // none, then build the geoindex.\n  // This could be improved a lot but it's not clear if that's a good\n  // idea. Or even if this behavior is a good idea.\n  find(\n    query,\n    { skip, limit, sort, keys, maxTimeMS, readPreference, hint, caseInsensitive, explain } = {}\n  ) {\n    // Support for Full Text Search - $text\n    if (keys && keys.$score) {\n      delete keys.$score;\n      keys.score = { $meta: 'textScore' };\n    }\n    return this._rawFind(query, {\n      skip,\n      limit,\n      sort,\n      keys,\n      maxTimeMS,\n      readPreference,\n      hint,\n      caseInsensitive,\n      explain,\n    }).catch(error => {\n      // Check for \"no geoindex\" error\n      if (error.code != 17007 && !error.message.match(/unable to find index for .geoNear/)) {\n        throw error;\n      }\n      // Figure out what key needs an index\n      const key = error.message.match(/field=([A-Za-z_0-9]+) /)[1];\n      if (!key) {\n        throw error;\n      }\n\n      var index = {};\n      index[key] = '2d';\n      return (\n        this._mongoCollection\n          .createIndex(index)\n          // Retry, but just once.\n          .then(() =>\n            this._rawFind(query, {\n              skip,\n              limit,\n              sort,\n              keys,\n              maxTimeMS,\n              readPreference,\n              hint,\n              caseInsensitive,\n              explain,\n            })\n          )\n      );\n    });\n  }\n\n  /**\n   * Collation to support case insensitive queries\n   */\n  static caseInsensitiveCollation() {\n    return { locale: 'en_US', strength: 2 };\n  }\n\n  _rawFind(\n    query,\n    { skip, limit, sort, keys, maxTimeMS, readPreference, hint, caseInsensitive, explain } = {}\n  ) {\n    let findOperation = this._mongoCollection.find(query, {\n      skip,\n      limit,\n      sort,\n      readPreference,\n      hint,\n    });\n\n    if (keys) {\n      findOperation = findOperation.project(keys);\n    }\n\n    if (caseInsensitive) {\n      findOperation = findOperation.collation(MongoCollection.caseInsensitiveCollation());\n    }\n\n    if (maxTimeMS) {\n      findOperation = findOperation.maxTimeMS(maxTimeMS);\n    }\n\n    return explain ? findOperation.explain(explain) : findOperation.toArray();\n  }\n\n  count(query, { skip, limit, sort, maxTimeMS, readPreference, hint } = {}) {\n    // If query is empty, then use estimatedDocumentCount instead.\n    // This is due to countDocuments performing a scan,\n    // which greatly increases execution time when being run on large collections.\n    // See https://github.com/Automattic/mongoose/issues/6713 for more info regarding this problem.\n    if (typeof query !== 'object' || !Object.keys(query).length) {\n      return this._mongoCollection.estimatedDocumentCount({\n        maxTimeMS,\n      });\n    }\n\n    const countOperation = this._mongoCollection.countDocuments(query, {\n      skip,\n      limit,\n      sort,\n      maxTimeMS,\n      readPreference,\n      hint,\n    });\n\n    return countOperation;\n  }\n\n  distinct(field, query) {\n    return this._mongoCollection.distinct(field, query);\n  }\n\n  aggregate(pipeline, { maxTimeMS, readPreference, hint, explain } = {}) {\n    return this._mongoCollection\n      .aggregate(pipeline, { maxTimeMS, readPreference, hint, explain })\n      .toArray();\n  }\n\n  insertOne(object, session) {\n    return this._mongoCollection.insertOne(object, { session });\n  }\n\n  // Atomically updates data in the database for a single (first) object that matched the query\n  // If there is nothing that matches the query - does insert\n  // Postgres Note: `INSERT ... ON CONFLICT UPDATE` that is available since 9.5.\n  upsertOne(query, update, session) {\n    return this._mongoCollection.updateOne(query, update, {\n      upsert: true,\n      session,\n    });\n  }\n\n  updateOne(query, update) {\n    return this._mongoCollection.updateOne(query, update);\n  }\n\n  updateMany(query, update, session) {\n    return this._mongoCollection.updateMany(query, update, { session });\n  }\n\n  deleteMany(query, session) {\n    return this._mongoCollection.deleteMany(query, { session });\n  }\n\n  _ensureSparseUniqueIndexInBackground(indexRequest) {\n    return new Promise((resolve, reject) => {\n      this._mongoCollection.createIndex(\n        indexRequest,\n        { unique: true, background: true, sparse: true },\n        error => {\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        }\n      );\n    });\n  }\n\n  drop() {\n    return this._mongoCollection.drop();\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ef8bef7ecfce9a73bbecd5100cacf981e3803ef2"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1i7qanjabb=function(){return actualCoverage;};}return actualCoverage;}cov_1i7qanjabb();cov_1i7qanjabb().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1i7qanjabb().s[1]++;exports.default=void 0;const mongodb=(cov_1i7qanjabb().s[2]++,require('mongodb'));const Collection=(cov_1i7qanjabb().s[3]++,mongodb.Collection);class MongoCollection{constructor(mongoCollection){cov_1i7qanjabb().f[0]++;cov_1i7qanjabb().s[4]++;this._mongoCollection=mongoCollection;}// Does a find with "smart indexing".
// Currently this just means, if it needs a geoindex and there is
// none, then build the geoindex.
// This could be improved a lot but it's not clear if that's a good
// idea. Or even if this behavior is a good idea.
find(query,{skip,limit,sort,keys,maxTimeMS,readPreference,hint,caseInsensitive,explain}=(cov_1i7qanjabb().b[0][0]++,{})){cov_1i7qanjabb().f[1]++;cov_1i7qanjabb().s[5]++;// Support for Full Text Search - $text
if((cov_1i7qanjabb().b[2][0]++,keys)&&(cov_1i7qanjabb().b[2][1]++,keys.$score)){cov_1i7qanjabb().b[1][0]++;cov_1i7qanjabb().s[6]++;delete keys.$score;cov_1i7qanjabb().s[7]++;keys.score={$meta:'textScore'};}else{cov_1i7qanjabb().b[1][1]++;}cov_1i7qanjabb().s[8]++;return this._rawFind(query,{skip,limit,sort,keys,maxTimeMS,readPreference,hint,caseInsensitive,explain}).catch(error=>{cov_1i7qanjabb().f[2]++;cov_1i7qanjabb().s[9]++;// Check for "no geoindex" error
if((cov_1i7qanjabb().b[4][0]++,error.code!=17007)&&(cov_1i7qanjabb().b[4][1]++,!error.message.match(/unable to find index for .geoNear/))){cov_1i7qanjabb().b[3][0]++;cov_1i7qanjabb().s[10]++;throw error;}else{cov_1i7qanjabb().b[3][1]++;}// Figure out what key needs an index
const key=(cov_1i7qanjabb().s[11]++,error.message.match(/field=([A-Za-z_0-9]+) /)[1]);cov_1i7qanjabb().s[12]++;if(!key){cov_1i7qanjabb().b[5][0]++;cov_1i7qanjabb().s[13]++;throw error;}else{cov_1i7qanjabb().b[5][1]++;}var index=(cov_1i7qanjabb().s[14]++,{});cov_1i7qanjabb().s[15]++;index[key]='2d';cov_1i7qanjabb().s[16]++;return this._mongoCollection.createIndex(index)// Retry, but just once.
.then(()=>{cov_1i7qanjabb().f[3]++;cov_1i7qanjabb().s[17]++;return this._rawFind(query,{skip,limit,sort,keys,maxTimeMS,readPreference,hint,caseInsensitive,explain});});});}/**
   * Collation to support case insensitive queries
   */static caseInsensitiveCollation(){cov_1i7qanjabb().f[4]++;cov_1i7qanjabb().s[18]++;return{locale:'en_US',strength:2};}_rawFind(query,{skip,limit,sort,keys,maxTimeMS,readPreference,hint,caseInsensitive,explain}=(cov_1i7qanjabb().b[6][0]++,{})){cov_1i7qanjabb().f[5]++;let findOperation=(cov_1i7qanjabb().s[19]++,this._mongoCollection.find(query,{skip,limit,sort,readPreference,hint}));cov_1i7qanjabb().s[20]++;if(keys){cov_1i7qanjabb().b[7][0]++;cov_1i7qanjabb().s[21]++;findOperation=findOperation.project(keys);}else{cov_1i7qanjabb().b[7][1]++;}cov_1i7qanjabb().s[22]++;if(caseInsensitive){cov_1i7qanjabb().b[8][0]++;cov_1i7qanjabb().s[23]++;findOperation=findOperation.collation(MongoCollection.caseInsensitiveCollation());}else{cov_1i7qanjabb().b[8][1]++;}cov_1i7qanjabb().s[24]++;if(maxTimeMS){cov_1i7qanjabb().b[9][0]++;cov_1i7qanjabb().s[25]++;findOperation=findOperation.maxTimeMS(maxTimeMS);}else{cov_1i7qanjabb().b[9][1]++;}cov_1i7qanjabb().s[26]++;return explain?(cov_1i7qanjabb().b[10][0]++,findOperation.explain(explain)):(cov_1i7qanjabb().b[10][1]++,findOperation.toArray());}count(query,{skip,limit,sort,maxTimeMS,readPreference,hint}=(cov_1i7qanjabb().b[11][0]++,{})){cov_1i7qanjabb().f[6]++;cov_1i7qanjabb().s[27]++;// If query is empty, then use estimatedDocumentCount instead.
// This is due to countDocuments performing a scan,
// which greatly increases execution time when being run on large collections.
// See https://github.com/Automattic/mongoose/issues/6713 for more info regarding this problem.
if((cov_1i7qanjabb().b[13][0]++,typeof query!=='object')||(cov_1i7qanjabb().b[13][1]++,!Object.keys(query).length)){cov_1i7qanjabb().b[12][0]++;cov_1i7qanjabb().s[28]++;return this._mongoCollection.estimatedDocumentCount({maxTimeMS});}else{cov_1i7qanjabb().b[12][1]++;}const countOperation=(cov_1i7qanjabb().s[29]++,this._mongoCollection.countDocuments(query,{skip,limit,sort,maxTimeMS,readPreference,hint}));cov_1i7qanjabb().s[30]++;return countOperation;}distinct(field,query){cov_1i7qanjabb().f[7]++;cov_1i7qanjabb().s[31]++;return this._mongoCollection.distinct(field,query);}aggregate(pipeline,{maxTimeMS,readPreference,hint,explain}=(cov_1i7qanjabb().b[14][0]++,{})){cov_1i7qanjabb().f[8]++;cov_1i7qanjabb().s[32]++;return this._mongoCollection.aggregate(pipeline,{maxTimeMS,readPreference,hint,explain}).toArray();}insertOne(object,session){cov_1i7qanjabb().f[9]++;cov_1i7qanjabb().s[33]++;return this._mongoCollection.insertOne(object,{session});}// Atomically updates data in the database for a single (first) object that matched the query
// If there is nothing that matches the query - does insert
// Postgres Note: `INSERT ... ON CONFLICT UPDATE` that is available since 9.5.
upsertOne(query,update,session){cov_1i7qanjabb().f[10]++;cov_1i7qanjabb().s[34]++;return this._mongoCollection.updateOne(query,update,{upsert:true,session});}updateOne(query,update){cov_1i7qanjabb().f[11]++;cov_1i7qanjabb().s[35]++;return this._mongoCollection.updateOne(query,update);}updateMany(query,update,session){cov_1i7qanjabb().f[12]++;cov_1i7qanjabb().s[36]++;return this._mongoCollection.updateMany(query,update,{session});}deleteMany(query,session){cov_1i7qanjabb().f[13]++;cov_1i7qanjabb().s[37]++;return this._mongoCollection.deleteMany(query,{session});}_ensureSparseUniqueIndexInBackground(indexRequest){cov_1i7qanjabb().f[14]++;cov_1i7qanjabb().s[38]++;return new Promise((resolve,reject)=>{cov_1i7qanjabb().f[15]++;cov_1i7qanjabb().s[39]++;this._mongoCollection.createIndex(indexRequest,{unique:true,background:true,sparse:true},error=>{cov_1i7qanjabb().f[16]++;cov_1i7qanjabb().s[40]++;if(error){cov_1i7qanjabb().b[15][0]++;cov_1i7qanjabb().s[41]++;reject(error);}else{cov_1i7qanjabb().b[15][1]++;cov_1i7qanjabb().s[42]++;resolve();}});});}drop(){cov_1i7qanjabb().f[17]++;cov_1i7qanjabb().s[43]++;return this._mongoCollection.drop();}}cov_1i7qanjabb().s[44]++;exports.default=MongoCollection;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9BZGFwdGVycy9TdG9yYWdlL01vbmdvL01vbmdvQ29sbGVjdGlvbi5qcyJdLCJuYW1lcyI6WyJtb25nb2RiIiwicmVxdWlyZSIsIkNvbGxlY3Rpb24iLCJNb25nb0NvbGxlY3Rpb24iLCJjb25zdHJ1Y3RvciIsIm1vbmdvQ29sbGVjdGlvbiIsIl9tb25nb0NvbGxlY3Rpb24iLCJmaW5kIiwicXVlcnkiLCJza2lwIiwibGltaXQiLCJzb3J0Iiwia2V5cyIsIm1heFRpbWVNUyIsInJlYWRQcmVmZXJlbmNlIiwiaGludCIsImNhc2VJbnNlbnNpdGl2ZSIsImV4cGxhaW4iLCIkc2NvcmUiLCJzY29yZSIsIiRtZXRhIiwiX3Jhd0ZpbmQiLCJjYXRjaCIsImVycm9yIiwiY29kZSIsIm1lc3NhZ2UiLCJtYXRjaCIsImtleSIsImluZGV4IiwiY3JlYXRlSW5kZXgiLCJ0aGVuIiwiY2FzZUluc2Vuc2l0aXZlQ29sbGF0aW9uIiwibG9jYWxlIiwic3RyZW5ndGgiLCJmaW5kT3BlcmF0aW9uIiwicHJvamVjdCIsImNvbGxhdGlvbiIsInRvQXJyYXkiLCJjb3VudCIsIk9iamVjdCIsImxlbmd0aCIsImVzdGltYXRlZERvY3VtZW50Q291bnQiLCJjb3VudE9wZXJhdGlvbiIsImNvdW50RG9jdW1lbnRzIiwiZGlzdGluY3QiLCJmaWVsZCIsImFnZ3JlZ2F0ZSIsInBpcGVsaW5lIiwiaW5zZXJ0T25lIiwib2JqZWN0Iiwic2Vzc2lvbiIsInVwc2VydE9uZSIsInVwZGF0ZSIsInVwZGF0ZU9uZSIsInVwc2VydCIsInVwZGF0ZU1hbnkiLCJkZWxldGVNYW55IiwiX2Vuc3VyZVNwYXJzZVVuaXF1ZUluZGV4SW5CYWNrZ3JvdW5kIiwiaW5kZXhSZXF1ZXN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ1bmlxdWUiLCJiYWNrZ3JvdW5kIiwic3BhcnNlIiwiZHJvcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLE1BQU1BLE9BQU8sR0FBR0Ms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QU8sS0FBSzNELGdCQUFMLENBQXNCMkQsSUFBdEIsRUFBUDtBQUNEOztBQWhMa0MiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtb25nb2RiID0gcmVxdWlyZSgnbW9uZ29kYicpO1xuY29uc3QgQ29sbGVjdGlvbiA9IG1vbmdvZGIuQ29sbGVjdGlvbjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9uZ29Db2xsZWN0aW9uIHtcbiAgX21vbmdvQ29sbGVjdGlvbjogQ29sbGVjdGlvbjtcblxuICBjb25zdHJ1Y3Rvcihtb25nb0NvbGxlY3Rpb246IENvbGxlY3Rpb24pIHtcbiAgICB0aGlzLl9tb25nb0NvbGxlY3Rpb24gPSBtb25nb0NvbGxlY3Rpb247XG4gIH1cblxuICAvLyBEb2VzIGEgZmluZCB3aXRoIFwic21hcnQgaW5kZXhpbmdcIi5cbiAgLy8gQ3VycmVudGx5IHRoaXMganVzdCBtZWFucywgaWYgaXQgbmVlZHMgYSBnZW9pbmRleCBhbmQgdGhlcmUgaXNcbiAgLy8gbm9uZSwgdGhlbiBidWlsZCB0aGUgZ2VvaW5kZXguXG4gIC8vIFRoaXMgY291bGQgYmUgaW1wcm92ZWQgYSBsb3QgYnV0IGl0J3Mgbm90IGNsZWFyIGlmIHRoYXQncyBhIGdvb2RcbiAgLy8gaWRlYS4gT3IgZXZlbiBpZiB0aGlzIGJlaGF2aW9yIGlzIGEgZ29vZCBpZGVhLlxuICBmaW5kKFxuICAgIHF1ZXJ5LFxuICAgIHsgc2tpcCwgbGltaXQsIHNvcnQsIGtleXMsIG1heFRpbWVNUywgcmVhZFByZWZlcmVuY2UsIGhpbnQsIGNhc2VJbnNlbnNpdGl2ZSwgZXhwbGFpbiB9ID0ge31cbiAgKSB7XG4gICAgLy8gU3VwcG9ydCBmb3IgRnVsbCBUZXh0IFNlYXJjaCAtICR0ZXh0XG4gICAgaWYgKGtleXMgJiYga2V5cy4kc2NvcmUpIHtcbiAgICAgIGRlbGV0ZSBrZXlzLiRzY29yZTtcbiAgICAgIGtleXMuc2NvcmUgPSB7ICRtZXRhOiAndGV4dFNjb3JlJyB9O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmF3RmluZChxdWVyeSwge1xuICAgICAgc2tpcCxcbiAgICAgIGxpbWl0LFxuICAgICAgc29ydCxcbiAgICAgIGtleXMsXG4gICAgICBtYXhUaW1lTVMsXG4gICAgICByZWFkUHJlZmVyZW5jZSxcbiAgICAgIGhpbnQsXG4gICAgICBjYXNlSW5zZW5zaXRpdmUsXG4gICAgICBleHBsYWluLFxuICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIC8vIENoZWNrIGZvciBcIm5vIGdlb2luZGV4XCIgZXJyb3JcbiAgICAgIGlmIChlcnJvci5jb2RlICE9IDE3MDA3ICYmICFlcnJvci5tZXNzYWdlLm1hdGNoKC91bmFibGUgdG8gZmluZCBpbmRleCBmb3IgLmdlb05lYXIvKSkge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICAgIC8vIEZpZ3VyZSBvdXQgd2hhdCBrZXkgbmVlZHMgYW4gaW5kZXhcbiAgICAgIGNvbnN0IGtleSA9IGVycm9yLm1lc3NhZ2UubWF0Y2goL2ZpZWxkPShbQS1aYS16XzAtOV0rKSAvKVsxXTtcbiAgICAgIGlmICgha2V5KSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXggPSB7fTtcbiAgICAgIGluZGV4W2tleV0gPSAnMmQnO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5fbW9uZ29Db2xsZWN0aW9uXG4gICAgICAgICAgLmNyZWF0ZUluZGV4KGluZGV4KVxuICAgICAgICAgIC8vIFJldHJ5LCBidXQganVzdCBvbmNlLlxuICAgICAgICAgIC50aGVuKCgpID0+XG4gICAgICAgICAgICB0aGlzLl9yYXdGaW5kKHF1ZXJ5LCB7XG4gICAgICAgICAgICAgIHNraXAsXG4gICAgICAgICAgICAgIGxpbWl0LFxuICAgICAgICAgICAgICBzb3J0LFxuICAgICAgICAgICAgICBrZXlzLFxuICAgICAgICAgICAgICBtYXhUaW1lTVMsXG4gICAgICAgICAgICAgIHJlYWRQcmVmZXJlbmNlLFxuICAgICAgICAgICAgICBoaW50LFxuICAgICAgICAgICAgICBjYXNlSW5zZW5zaXRpdmUsXG4gICAgICAgICAgICAgIGV4cGxhaW4sXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ29sbGF0aW9uIHRvIHN1cHBvcnQgY2FzZSBpbnNlbnNpdGl2ZSBxdWVyaWVzXG4gICAqL1xuICBzdGF0aWMgY2FzZUluc2Vuc2l0aXZlQ29sbGF0aW9uKCkge1xuICAgIHJldHVybiB7IGxvY2FsZTogJ2VuX1VTJywgc3RyZW5ndGg6IDIgfTtcbiAgfVxuXG4gIF9yYXdGaW5kKFxuICAgIHF1ZXJ5LFxuICAgIHsgc2tpcCwgbGltaXQsIHNvcnQsIGtleXMsIG1heFRpbWVNUywgcmVhZFByZWZlcmVuY2UsIGhpbnQsIGNhc2VJbnNlbnNpdGl2ZSwgZXhwbGFpbiB9ID0ge31cbiAgKSB7XG4gICAgbGV0IGZpbmRPcGVyYXRpb24gPSB0aGlzLl9tb25nb0NvbGxlY3Rpb24uZmluZChxdWVyeSwge1xuICAgICAgc2tpcCxcbiAgICAgIGxpbWl0LFxuICAgICAgc29ydCxcbiAgICAgIHJlYWRQcmVmZXJlbmNlLFxuICAgICAgaGludCxcbiAgICB9KTtcblxuICAgIGlmIChrZXlzKSB7XG4gICAgICBmaW5kT3BlcmF0aW9uID0gZmluZE9wZXJhdGlvbi5wcm9qZWN0KGtleXMpO1xuICAgIH1cblxuICAgIGlmIChjYXNlSW5zZW5zaXRpdmUpIHtcbiAgICAgIGZpbmRPcGVyYXRpb24gPSBmaW5kT3BlcmF0aW9uLmNvbGxhdGlvbihNb25nb0NvbGxlY3Rpb24uY2FzZUluc2Vuc2l0aXZlQ29sbGF0aW9uKCkpO1xuICAgIH1cblxuICAgIGlmIChtYXhUaW1lTVMpIHtcbiAgICAgIGZpbmRPcGVyYXRpb24gPSBmaW5kT3BlcmF0aW9uLm1heFRpbWVNUyhtYXhUaW1lTVMpO1xuICAgIH1cblxuICAgIHJldHVybiBleHBsYWluID8gZmluZE9wZXJhdGlvbi5leHBsYWluKGV4cGxhaW4pIDogZmluZE9wZXJhdGlvbi50b0FycmF5KCk7XG4gIH1cblxuICBjb3VudChxdWVyeSwgeyBza2lwLCBsaW1pdCwgc29ydCwgbWF4VGltZU1TLCByZWFkUHJlZmVyZW5jZSwgaGludCB9ID0ge30pIHtcbiAgICAvLyBJZiBxdWVyeSBpcyBlbXB0eSwgdGhlbiB1c2UgZXN0aW1hdGVkRG9jdW1lbnRDb3VudCBpbnN0ZWFkLlxuICAgIC8vIFRoaXMgaXMgZHVlIHRvIGNvdW50RG9jdW1lbnRzIHBlcmZvcm1pbmcgYSBzY2FuLFxuICAgIC8vIHdoaWNoIGdyZWF0bHkgaW5jcmVhc2VzIGV4ZWN1dGlvbiB0aW1lIHdoZW4gYmVpbmcgcnVuIG9uIGxhcmdlIGNvbGxlY3Rpb25zLlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9tb25nb29zZS9pc3N1ZXMvNjcxMyBmb3IgbW9yZSBpbmZvIHJlZ2FyZGluZyB0aGlzIHByb2JsZW0uXG4gICAgaWYgKHR5cGVvZiBxdWVyeSAhPT0gJ29iamVjdCcgfHwgIU9iamVjdC5rZXlzKHF1ZXJ5KS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tb25nb0NvbGxlY3Rpb24uZXN0aW1hdGVkRG9jdW1lbnRDb3VudCh7XG4gICAgICAgIG1heFRpbWVNUyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGNvdW50T3BlcmF0aW9uID0gdGhpcy5fbW9uZ29Db2xsZWN0aW9uLmNvdW50RG9jdW1lbnRzKHF1ZXJ5LCB7XG4gICAgICBza2lwLFxuICAgICAgbGltaXQsXG4gICAgICBzb3J0LFxuICAgICAgbWF4VGltZU1TLFxuICAgICAgcmVhZFByZWZlcmVuY2UsXG4gICAgICBoaW50LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvdW50T3BlcmF0aW9uO1xuICB9XG5cbiAgZGlzdGluY3QoZmllbGQsIHF1ZXJ5KSB7XG4gICAgcmV0dXJuIHRoaXMuX21vbmdvQ29sbGVjdGlvbi5kaXN0aW5jdChmaWVsZCwgcXVlcnkpO1xuICB9XG5cbiAgYWdncmVnYXRlKHBpcGVsaW5lLCB7IG1heFRpbWVNUywgcmVhZFByZWZlcmVuY2UsIGhpbnQsIGV4cGxhaW4gfSA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuX21vbmdvQ29sbGVjdGlvblxuICAgICAgLmFnZ3JlZ2F0ZShwaXBlbGluZSwgeyBtYXhUaW1lTVMsIHJlYWRQcmVmZXJlbmNlLCBoaW50LCBleHBsYWluIH0pXG4gICAgICAudG9BcnJheSgpO1xuICB9XG5cbiAgaW5zZXJ0T25lKG9iamVjdCwgc2Vzc2lvbikge1xuICAgIHJldHVybiB0aGlzLl9tb25nb0NvbGxlY3Rpb24uaW5zZXJ0T25lKG9iamVjdCwgeyBzZXNzaW9uIH0pO1xuICB9XG5cbiAgLy8gQXRvbWljYWxseSB1cGRhdGVzIGRhdGEgaW4gdGhlIGRhdGFiYXNlIGZvciBhIHNpbmdsZSAoZmlyc3QpIG9iamVjdCB0aGF0IG1hdGNoZWQgdGhlIHF1ZXJ5XG4gIC8vIElmIHRoZXJlIGlzIG5vdGhpbmcgdGhhdCBtYXRjaGVzIHRoZSBxdWVyeSAtIGRvZXMgaW5zZXJ0XG4gIC8vIFBvc3RncmVzIE5vdGU6IGBJTlNFUlQgLi4uIE9OIENPTkZMSUNUIFVQREFURWAgdGhhdCBpcyBhdmFpbGFibGUgc2luY2UgOS41LlxuICB1cHNlcnRPbmUocXVlcnksIHVwZGF0ZSwgc2Vzc2lvbikge1xuICAgIHJldHVybiB0aGlzLl9tb25nb0NvbGxlY3Rpb24udXBkYXRlT25lKHF1ZXJ5LCB1cGRhdGUsIHtcbiAgICAgIHVwc2VydDogdHJ1ZSxcbiAgICAgIHNlc3Npb24sXG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVPbmUocXVlcnksIHVwZGF0ZSkge1xuICAgIHJldHVybiB0aGlzLl9tb25nb0NvbGxlY3Rpb24udXBkYXRlT25lKHF1ZXJ5LCB1cGRhdGUpO1xuICB9XG5cbiAgdXBkYXRlTWFueShxdWVyeSwgdXBkYXRlLCBzZXNzaW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vbmdvQ29sbGVjdGlvbi51cGRhdGVNYW55KHF1ZXJ5LCB1cGRhdGUsIHsgc2Vzc2lvbiB9KTtcbiAgfVxuXG4gIGRlbGV0ZU1hbnkocXVlcnksIHNlc3Npb24pIHtcbiAgICByZXR1cm4gdGhpcy5fbW9uZ29Db2xsZWN0aW9uLmRlbGV0ZU1hbnkocXVlcnksIHsgc2Vzc2lvbiB9KTtcbiAgfVxuXG4gIF9lbnN1cmVTcGFyc2VVbmlxdWVJbmRleEluQmFja2dyb3VuZChpbmRleFJlcXVlc3QpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5fbW9uZ29Db2xsZWN0aW9uLmNyZWF0ZUluZGV4KFxuICAgICAgICBpbmRleFJlcXVlc3QsXG4gICAgICAgIHsgdW5pcXVlOiB0cnVlLCBiYWNrZ3JvdW5kOiB0cnVlLCBzcGFyc2U6IHRydWUgfSxcbiAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIGRyb3AoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vbmdvQ29sbGVjdGlvbi5kcm9wKCk7XG4gIH1cbn1cbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,