"use strict";function cov_a5wke21zs(){var path="/parse-server/lib/Security/CheckGroups/CheckGroupDatabase.js";var hash="4ec52d56d2d817493d3652814a6d90ae41bd0799";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Security/CheckGroups/CheckGroupDatabase.js",statementMap:{"0":{start:{line:3,column:13},end:{line:3,column:32}},"1":{start:{line:5,column:18},end:{line:5,column:66}},"2":{start:{line:7,column:14},end:{line:7,column:61}},"3":{start:{line:9,column:12},end:{line:9,column:57}},"4":{start:{line:11,column:39},end:{line:11,column:93}},"5":{start:{line:23,column:4},end:{line:23,column:22}},"6":{start:{line:27,column:19},end:{line:27,column:67}},"7":{start:{line:29,column:28},end:{line:29,column:51}},"8":{start:{line:30,column:24},end:{line:30,column:44}},"9":{start:{line:31,column:4},end:{line:51,column:8}},"10":{start:{line:36,column:25},end:{line:36,column:63}},"11":{start:{line:37,column:29},end:{line:37,column:51}},"12":{start:{line:38,column:29},end:{line:38,column:51}},"13":{start:{line:39,column:27},end:{line:39,column:46}},"14":{start:{line:40,column:37},end:{line:40,column:56}},"15":{start:{line:42,column:8},end:{line:44,column:9}},"16":{start:{line:43,column:10},end:{line:43,column:18}},"17":{start:{line:47,column:8},end:{line:49,column:9}},"18":{start:{line:48,column:10},end:{line:48,column:18}},"19":{start:{line:56,column:0},end:{line:56,column:36}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:11,column:9},end:{line:11,column:31}},loc:{start:{line:11,column:37},end:{line:11,column:95}},line:11},"1":{name:"(anonymous_1)",decl:{start:{line:22,column:2},end:{line:22,column:3}},loc:{start:{line:22,column:12},end:{line:24,column:3}},line:22},"2":{name:"(anonymous_2)",decl:{start:{line:26,column:2},end:{line:26,column:3}},loc:{start:{line:26,column:14},end:{line:52,column:3}},line:26},"3":{name:"(anonymous_3)",decl:{start:{line:35,column:13},end:{line:35,column:14}},loc:{start:{line:35,column:19},end:{line:50,column:7}},line:35}},branchMap:{"0":{loc:{start:{line:11,column:46},end:{line:11,column:92}},type:"cond-expr",locations:[{start:{line:11,column:70},end:{line:11,column:73}},{start:{line:11,column:76},end:{line:11,column:92}}],line:11},"1":{loc:{start:{line:11,column:46},end:{line:11,column:67}},type:"binary-expr",locations:[{start:{line:11,column:46},end:{line:11,column:49}},{start:{line:11,column:53},end:{line:11,column:67}}],line:11},"2":{loc:{start:{line:42,column:8},end:{line:44,column:9}},type:"if",locations:[{start:{line:42,column:8},end:{line:44,column:9}},{start:{line:42,column:8},end:{line:44,column:9}}],line:42},"3":{loc:{start:{line:47,column:8},end:{line:49,column:9}},type:"if",locations:[{start:{line:47,column:8},end:{line:49,column:9}},{start:{line:47,column:8},end:{line:49,column:9}}],line:47}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},inputSourceMap:{version:3,sources:["../../../src/Security/CheckGroups/CheckGroupDatabase.js"],names:["CheckGroupDatabase","CheckGroup","setName","setChecks","config","Config","get","Parse","applicationId","databaseAdapter","database","adapter","databaseUrl","_uri","Check","title","warning","solution","check","password","match","hasUpperCase","test","hasLowerCase","hasNumbers","hasNonAlphasNumerics","length","module","exports"],mappings:";;AAIA;;AACA;;AACA;;AACA;;;;AAPA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA,MAAMA,kBAAN,SAAiCC,mBAAjC,CAA4C;AAC1CC,EAAAA,OAAO,GAAG;AACR,WAAO,UAAP;AACD;;AACDC,EAAAA,SAAS,GAAG;AACV,UAAMC,MAAM,GAAGC,gBAAOC,GAAP,CAAWC,cAAMC,aAAjB,CAAf;;AACA,UAAMC,eAAe,GAAGL,MAAM,CAACM,QAAP,CAAgBC,OAAxC;AACA,UAAMC,WAAW,GAAGH,eAAe,CAACI,IAApC;AACA,WAAO,CACL,IAAIC,YAAJ,CAAU;AACRC,MAAAA,KAAK,EAAE,0BADC;AAERC,MAAAA,OAAO,EAAE,0EAFD;AAGRC,MAAAA,QAAQ,EAAE,qIAHF;AAIRC,MAAAA,KAAK,EAAE,MAAM;AACX,cAAMC,QAAQ,GAAGP,WAAW,CAACQ,KAAZ,CAAkB,gBAAlB,EAAoC,CAApC,CAAjB;AACA,cAAMC,YAAY,GAAG,QAAQC,IAAR,CAAaH,QAAb,CAArB;AACA,cAAMI,YAAY,GAAG,QAAQD,IAAR,CAAaH,QAAb,CAArB;AACA,cAAMK,UAAU,GAAG,KAAKF,IAAL,CAAUH,QAAV,CAAnB;AACA,cAAMM,oBAAoB,GAAG,KAAKH,IAAL,CAAUH,QAAV,CAA7B,CALW,CAMX;;AACA,YAAIA,QAAQ,CAACO,MAAT,GAAkB,EAAtB,EAA0B;AACxB,gBAAM,CAAN;AACD,SATU,CAUX;;;AACA,YAAIL,YAAY,GAAGE,YAAf,GAA8BC,UAA9B,GAA2CC,oBAA3C,GAAkE,CAAtE,EAAyE;AACvE,gBAAM,CAAN;AACD;AACF;AAlBO,KAAV,CADK,CAAP;AAsBD;;AA9ByC;;AAiC5CE,MAAM,CAACC,OAAP,GAAiB5B,kBAAjB",sourcesContent:["/**\n * @module SecurityCheck\n */\n\nimport { Check } from '../Check';\nimport CheckGroup from '../CheckGroup';\nimport Config from '../../Config';\nimport Parse from 'parse/node';\n\n/**\n* The security checks group for Parse Server configuration.\n* Checks common Parse Server parameters such as access keys.\n*/\nclass CheckGroupDatabase extends CheckGroup {\n  setName() {\n    return 'Database';\n  }\n  setChecks() {\n    const config = Config.get(Parse.applicationId);\n    const databaseAdapter = config.database.adapter;\n    const databaseUrl = databaseAdapter._uri;\n    return [\n      new Check({\n        title: 'Secure database password',\n        warning: 'The database password is insecure and vulnerable to brute force attacks.',\n        solution: 'Choose a longer and/or more complex password with a combination of upper- and lowercase characters, numbers and special characters.',\n        check: () => {\n          const password = databaseUrl.match(/\\/\\/\\S+:(\\S+)@/)[1];\n          const hasUpperCase = /[A-Z]/.test(password);\n          const hasLowerCase = /[a-z]/.test(password);\n          const hasNumbers = /\\d/.test(password);\n          const hasNonAlphasNumerics = /\\W/.test(password);\n          // Ensure length\n          if (password.length < 14) {\n            throw 1;\n          }\n          // Ensure at least 3 out of 4 requirements passed\n          if (hasUpperCase + hasLowerCase + hasNumbers + hasNonAlphasNumerics < 3) {\n            throw 1;\n          }\n        },\n      }),\n    ];\n  }\n}\n\nmodule.exports = CheckGroupDatabase;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"4ec52d56d2d817493d3652814a6d90ae41bd0799"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_a5wke21zs=function(){return actualCoverage;};}return actualCoverage;}cov_a5wke21zs();var _Check=(cov_a5wke21zs().s[0]++,require("../Check"));var _CheckGroup=(cov_a5wke21zs().s[1]++,_interopRequireDefault(require("../CheckGroup")));var _Config=(cov_a5wke21zs().s[2]++,_interopRequireDefault(require("../../Config")));var _node=(cov_a5wke21zs().s[3]++,_interopRequireDefault(require("parse/node")));function _interopRequireDefault(obj){cov_a5wke21zs().f[0]++;cov_a5wke21zs().s[4]++;return(cov_a5wke21zs().b[1][0]++,obj)&&(cov_a5wke21zs().b[1][1]++,obj.__esModule)?(cov_a5wke21zs().b[0][0]++,obj):(cov_a5wke21zs().b[0][1]++,{default:obj});}/**
 * @module SecurityCheck
 */ /**
* The security checks group for Parse Server configuration.
* Checks common Parse Server parameters such as access keys.
*/class CheckGroupDatabase extends(_CheckGroup.default){setName(){cov_a5wke21zs().f[1]++;cov_a5wke21zs().s[5]++;return'Database';}setChecks(){cov_a5wke21zs().f[2]++;const config=(cov_a5wke21zs().s[6]++,_Config.default.get(_node.default.applicationId));const databaseAdapter=(cov_a5wke21zs().s[7]++,config.database.adapter);const databaseUrl=(cov_a5wke21zs().s[8]++,databaseAdapter._uri);cov_a5wke21zs().s[9]++;return[new _Check.Check({title:'Secure database password',warning:'The database password is insecure and vulnerable to brute force attacks.',solution:'Choose a longer and/or more complex password with a combination of upper- and lowercase characters, numbers and special characters.',check:()=>{cov_a5wke21zs().f[3]++;const password=(cov_a5wke21zs().s[10]++,databaseUrl.match(/\/\/\S+:(\S+)@/)[1]);const hasUpperCase=(cov_a5wke21zs().s[11]++,/[A-Z]/.test(password));const hasLowerCase=(cov_a5wke21zs().s[12]++,/[a-z]/.test(password));const hasNumbers=(cov_a5wke21zs().s[13]++,/\d/.test(password));const hasNonAlphasNumerics=(cov_a5wke21zs().s[14]++,/\W/.test(password));// Ensure length
cov_a5wke21zs().s[15]++;if(password.length<14){cov_a5wke21zs().b[2][0]++;cov_a5wke21zs().s[16]++;throw 1;}else{cov_a5wke21zs().b[2][1]++;}// Ensure at least 3 out of 4 requirements passed
cov_a5wke21zs().s[17]++;if(hasUpperCase+hasLowerCase+hasNumbers+hasNonAlphasNumerics<3){cov_a5wke21zs().b[3][0]++;cov_a5wke21zs().s[18]++;throw 1;}else{cov_a5wke21zs().b[3][1]++;}}})];}}cov_a5wke21zs().s[19]++;module.exports=CheckGroupDatabase;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9TZWN1cml0eS9DaGVja0dyb3Vwcy9DaGVja0dyb3VwRGF0YWJhc2UuanMiXSwibmFtZXMiOlsiQ2hlY2tHcm91cERhdGFiYXNlIiwiQ2hlY2tHcm91cCIsInNldE5hbWUiLCJzZXRDaGVja3MiLCJjb25maWciLCJDb25maWciLCJnZXQiLCJQYXJzZSIsImFwcGxpY2F0aW9uSWQiLCJkYXRhYmFzZUFkYXB0ZXIiLCJkYXRhYmFzZSIsImFkYXB0ZXIiLCJkYXRhYmFzZVVybCIsIl91cmkiLCJDaGVjayIsInRpdGxlIiwid2FybmluZyIsInNvbHV0aW9uIiwiY2hlY2siLCJwYXNzd29yZCIsIm1hdGNoIiwiaGFzVXBwZXJDYXNlIiwidGVzdCIsImhhc0xvd2VyQ2FzZSIsImhhc051bWJlcnMiLCJoYXNOb25BbHBoYXNOdW1lcmljcyIsImxlbmd0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBSUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFQQTtBQUNBO0FBQ0E7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxrQkFBTixTQUFpQ0MsbUJBQWpDLENBQTRDO0FBQzFDQyxFQUFBQSxPQUFPLEdBQUc7QUFDUixXQUFPLFVBQVA7QUFDRDs7QUFDREMsRUFBQUEsU0FBUyxHQUFHO0FBQ1YsVUFBTUMsTUFBTSxHQUFHQyxnQkFBT0MsR0FBUCxDQUFXQyxjQUFNQyxhQUFqQixDQUFmOztBQUNBLFVBQU1DLGVBQWUsR0FBR0wsTUFBTSxDQUFDTSxRQUFQLENBQWdCQyxPQUF4QztBQUNBLFVBQU1DLFdBQVcsR0FBR0gsZUFBZSxDQUFDSSxJQUFwQztBQUNBLFdBQU8sQ0FDTCxJQUFJQyxZQUFKLENBQVU7QUFDUkMsTUFBQUEsS0FBSyxFQUFFLDBCQURDO0FBRVJDLE1BQUFBLE9BQU8sRUFBRSwwRUFGRDtBQUdSQyxNQUFBQSxRQUFRLEVBQUUscUlBSEY7QUFJUkMsTUFBQUEsS0FBSyxFQUFFLE1BQU07QUFDWCxjQUFNQyxRQUFRLEdBQUdQLFdBQVcsQ0FBQ1EsS0FBWixDQUFrQixnQkFBbEIsRUFBb0MsQ0FBcEMsQ0FBakI7QUFDQSxjQUFNQyxZQUFZLEdBQUcsUUFBUUMsSUFBUixDQUFhSCxRQUFiLENBQXJCO0FBQ0EsY0FBTUksWUFBWSxHQUFHLFFBQVFELElBQVIsQ0FBYUgsUUFBYixDQUFyQjtBQUNBLGNBQU1LLFVBQVUsR0FBRyxLQUFLRixJQUFMLENBQVVILFFBQVYsQ0FBbkI7QUFDQSxjQUFNTSxvQkFBb0IsR0FBRyxLQUFLSCxJQUFMLENBQVVILFFBQVYsQ0FBN0IsQ0FMVyxDQU1YOztBQUNBLFlBQUlBLFFBQVEsQ0FBQ08sTUFBVCxHQUFrQixFQUF0QixFQUEwQjtBQUN4QixnQkFBTSxDQUFOO0FBQ0QsU0FUVSxDQVVYOzs7QUFDQSxZQUFJTCxZQUFZLEdBQUdFLFlBQWYsR0FBOEJDLFVBQTlCLEdBQTJDQyxvQkFBM0MsR0FBa0UsQ0FBdEUsRUFBeUU7QUFDdkUsZ0JBQU0sQ0FBTjtBQUNEO0FBQ0Y7QUFsQk8sS0FBVixDQURLLENBQVA7QUFzQkQ7O0FBOUJ5Qzs7QUFpQzVDRSxNQUFNLENBQUNDLE9BQVAsR0FBaUI1QixrQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgU2VjdXJpdHlDaGVja1xuICovXG5cbmltcG9ydCB7IENoZWNrIH0gZnJvbSAnLi4vQ2hlY2snO1xuaW1wb3J0IENoZWNrR3JvdXAgZnJvbSAnLi4vQ2hlY2tHcm91cCc7XG5pbXBvcnQgQ29uZmlnIGZyb20gJy4uLy4uL0NvbmZpZyc7XG5pbXBvcnQgUGFyc2UgZnJvbSAncGFyc2Uvbm9kZSc7XG5cbi8qKlxuKiBUaGUgc2VjdXJpdHkgY2hlY2tzIGdyb3VwIGZvciBQYXJzZSBTZXJ2ZXIgY29uZmlndXJhdGlvbi5cbiogQ2hlY2tzIGNvbW1vbiBQYXJzZSBTZXJ2ZXIgcGFyYW1ldGVycyBzdWNoIGFzIGFjY2VzcyBrZXlzLlxuKi9cbmNsYXNzIENoZWNrR3JvdXBEYXRhYmFzZSBleHRlbmRzIENoZWNrR3JvdXAge1xuICBzZXROYW1lKCkge1xuICAgIHJldHVybiAnRGF0YWJhc2UnO1xuICB9XG4gIHNldENoZWNrcygpIHtcbiAgICBjb25zdCBjb25maWcgPSBDb25maWcuZ2V0KFBhcnNlLmFwcGxpY2F0aW9uSWQpO1xuICAgIGNvbnN0IGRhdGFiYXNlQWRhcHRlciA9IGNvbmZpZy5kYXRhYmFzZS5hZGFwdGVyO1xuICAgIGNvbnN0IGRhdGFiYXNlVXJsID0gZGF0YWJhc2VBZGFwdGVyLl91cmk7XG4gICAgcmV0dXJuIFtcbiAgICAgIG5ldyBDaGVjayh7XG4gICAgICAgIHRpdGxlOiAnU2VjdXJlIGRhdGFiYXNlIHBhc3N3b3JkJyxcbiAgICAgICAgd2FybmluZzogJ1RoZSBkYXRhYmFzZSBwYXNzd29yZCBpcyBpbnNlY3VyZSBhbmQgdnVsbmVyYWJsZSB0byBicnV0ZSBmb3JjZSBhdHRhY2tzLicsXG4gICAgICAgIHNvbHV0aW9uOiAnQ2hvb3NlIGEgbG9uZ2VyIGFuZC9vciBtb3JlIGNvbXBsZXggcGFzc3dvcmQgd2l0aCBhIGNvbWJpbmF0aW9uIG9mIHVwcGVyLSBhbmQgbG93ZXJjYXNlIGNoYXJhY3RlcnMsIG51bWJlcnMgYW5kIHNwZWNpYWwgY2hhcmFjdGVycy4nLFxuICAgICAgICBjaGVjazogKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHBhc3N3b3JkID0gZGF0YWJhc2VVcmwubWF0Y2goL1xcL1xcL1xcUys6KFxcUyspQC8pWzFdO1xuICAgICAgICAgIGNvbnN0IGhhc1VwcGVyQ2FzZSA9IC9bQS1aXS8udGVzdChwYXNzd29yZCk7XG4gICAgICAgICAgY29uc3QgaGFzTG93ZXJDYXNlID0gL1thLXpdLy50ZXN0KHBhc3N3b3JkKTtcbiAgICAgICAgICBjb25zdCBoYXNOdW1iZXJzID0gL1xcZC8udGVzdChwYXNzd29yZCk7XG4gICAgICAgICAgY29uc3QgaGFzTm9uQWxwaGFzTnVtZXJpY3MgPSAvXFxXLy50ZXN0KHBhc3N3b3JkKTtcbiAgICAgICAgICAvLyBFbnN1cmUgbGVuZ3RoXG4gICAgICAgICAgaWYgKHBhc3N3b3JkLmxlbmd0aCA8IDE0KSB7XG4gICAgICAgICAgICB0aHJvdyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBFbnN1cmUgYXQgbGVhc3QgMyBvdXQgb2YgNCByZXF1aXJlbWVudHMgcGFzc2VkXG4gICAgICAgICAgaWYgKGhhc1VwcGVyQ2FzZSArIGhhc0xvd2VyQ2FzZSArIGhhc051bWJlcnMgKyBoYXNOb25BbHBoYXNOdW1lcmljcyA8IDMpIHtcbiAgICAgICAgICAgIHRocm93IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENoZWNrR3JvdXBEYXRhYmFzZTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9TZWN1cml0eS9DaGVja0dyb3Vwcy9DaGVja0dyb3VwRGF0YWJhc2UuanMiXSwibmFtZXMiOlsiQ2hlY2tHcm91cCIsInNldE5hbWUiLCJzZXRDaGVja3MiLCJjb25maWciLCJDb25maWciLCJQYXJzZSIsImRhdGFiYXNlQWRhcHRlciIsImRhdGFiYXNlVXJsIiwiQ2hlY2siLCJ0aXRsZSIsIndhcm5pbmciLCJzb2x1dGlvbiIsImNoZWNrIiwicGFzc3dvcmQiLCJoYXNVcHBlckNhc2UiLCJoYXNMb3dlckNhc2UiLCJoYXNOdW1iZXJzIiwiaGFzTm9uQWxwaGFzTnVtZXJpY3MiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiI7eUZBSUEsR0FBQSxDQUFBLE1BQUEseUJBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBLENBQ0EsR0FBQSxDQUFBLFdBQUEseUJBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBLENBQUEsQ0FBQSxDQUNBLEdBQUEsQ0FBQSxPQUFBLHlCQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQSxDQUFBLENBQUEsQ0FDQSxHQUFBLENBQUEsS0FBQSx5QkFBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxZQUFBLENBQUEsQ0FBQSxDQUFBLEMsZ1BBUEE7QUFDQTtBQUNBLEcsQ0FPQTtBQUNBO0FBQ0E7QUFDQSxFQUNBLEtBQUEsQ0FBQSxrQkFBQSxTQUFpQ0EsV0FBQUEsQ0FBakMsT0FBQSxDQUE0QyxDQUMxQ0MsT0FBTyxFQUFHLCtDQUNSLE1BQUEsVUFBQSxDQUNELENBQ0RDLFNBQVMsRUFBRyx3QkFDVixLQUFNQyxDQUFBQSxNQUFNLHlCQUFHQyxPQUFBQSxDQUFBQSxPQUFBQSxDQUFBQSxHQUFBQSxDQUFXQyxLQUFBQSxDQUFBQSxPQUFBQSxDQUExQixhQUFlRCxDQUFILENBQVosQ0FDQSxLQUFNRSxDQUFBQSxlQUFlLHlCQUFHSCxNQUFNLENBQU5BLFFBQUFBLENBQXhCLE9BQXFCLENBQXJCLENBQ0EsS0FBTUksQ0FBQUEsV0FBVyx5QkFBR0QsZUFBZSxDQUFuQyxJQUFpQixDQUFqQixDQUhVLHVCQUlWLE1BQU8sQ0FDTCxHQUFJRSxDQUFBQSxNQUFBQSxDQUFKLEtBQUEsQ0FBVSxDQUNSQyxLQUFLLENBREcsMEJBQUEsQ0FFUkMsT0FBTyxDQUZDLDBFQUFBLENBR1JDLFFBQVEsQ0FIQSxxSUFBQSxDQUlSQyxLQUFLLENBQUUsSUFBTSx3QkFDWCxLQUFNQyxDQUFBQSxRQUFRLDBCQUFHTixXQUFXLENBQVhBLEtBQUFBLENBQUFBLGdCQUFBQSxFQUFqQixDQUFpQkEsQ0FBSCxDQUFkLENBQ0EsS0FBTU8sQ0FBQUEsWUFBWSwwQkFBRyxRQUFBLElBQUEsQ0FBckIsUUFBcUIsQ0FBSCxDQUFsQixDQUNBLEtBQU1DLENBQUFBLFlBQVksMEJBQUcsUUFBQSxJQUFBLENBQXJCLFFBQXFCLENBQUgsQ0FBbEIsQ0FDQSxLQUFNQyxDQUFBQSxVQUFVLDBCQUFHLEtBQUEsSUFBQSxDQUFuQixRQUFtQixDQUFILENBQWhCLENBQ0EsS0FBTUMsQ0FBQUEsb0JBQW9CLDBCQUFHLEtBQUEsSUFBQSxDQUxsQixRQUtrQixDQUFILENBQTFCLENBQ0E7QUFOVyx3QkFPWCxHQUFJSixRQUFRLENBQVJBLE1BQUFBLENBQUosRUFBQSxDQUEwQixtREFDeEIsS0FBQSxFQUFBLENBUlMsQ0FPWCxnQ0FHQTtBQVZXLHdCQVdYLEdBQUlDLFlBQVksQ0FBWkEsWUFBQUEsQ0FBQUEsVUFBQUEsQ0FBQUEsb0JBQUFBLENBQUosQ0FBQSxDQUF5RSxtREFDdkUsS0FBQSxFQUFBLENBQ0QsQ0FGRCxnQ0FHRCxDQWxCTyxDQUFWLENBREssQ0FBUCxDQXNCRCxDQTlCeUMsQyx3QkFpQzVDSSxNQUFNLENBQU5BLE9BQUFBLENBQUFBLGtCQUFBQSxDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbW9kdWxlIFNlY3VyaXR5Q2hlY2tcbiAqL1xuXG5pbXBvcnQgeyBDaGVjayB9IGZyb20gJy4uL0NoZWNrJztcbmltcG9ydCBDaGVja0dyb3VwIGZyb20gJy4uL0NoZWNrR3JvdXAnO1xuaW1wb3J0IENvbmZpZyBmcm9tICcuLi8uLi9Db25maWcnO1xuaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuXG4vKipcbiogVGhlIHNlY3VyaXR5IGNoZWNrcyBncm91cCBmb3IgUGFyc2UgU2VydmVyIGNvbmZpZ3VyYXRpb24uXG4qIENoZWNrcyBjb21tb24gUGFyc2UgU2VydmVyIHBhcmFtZXRlcnMgc3VjaCBhcyBhY2Nlc3Mga2V5cy5cbiovXG5jbGFzcyBDaGVja0dyb3VwRGF0YWJhc2UgZXh0ZW5kcyBDaGVja0dyb3VwIHtcbiAgc2V0TmFtZSgpIHtcbiAgICByZXR1cm4gJ0RhdGFiYXNlJztcbiAgfVxuICBzZXRDaGVja3MoKSB7XG4gICAgY29uc3QgY29uZmlnID0gQ29uZmlnLmdldChQYXJzZS5hcHBsaWNhdGlvbklkKTtcbiAgICBjb25zdCBkYXRhYmFzZUFkYXB0ZXIgPSBjb25maWcuZGF0YWJhc2UuYWRhcHRlcjtcbiAgICBjb25zdCBkYXRhYmFzZVVybCA9IGRhdGFiYXNlQWRhcHRlci5fdXJpO1xuICAgIHJldHVybiBbXG4gICAgICBuZXcgQ2hlY2soe1xuICAgICAgICB0aXRsZTogJ1NlY3VyZSBkYXRhYmFzZSBwYXNzd29yZCcsXG4gICAgICAgIHdhcm5pbmc6ICdUaGUgZGF0YWJhc2UgcGFzc3dvcmQgaXMgaW5zZWN1cmUgYW5kIHZ1bG5lcmFibGUgdG8gYnJ1dGUgZm9yY2UgYXR0YWNrcy4nLFxuICAgICAgICBzb2x1dGlvbjogJ0Nob29zZSBhIGxvbmdlciBhbmQvb3IgbW9yZSBjb21wbGV4IHBhc3N3b3JkIHdpdGggYSBjb21iaW5hdGlvbiBvZiB1cHBlci0gYW5kIGxvd2VyY2FzZSBjaGFyYWN0ZXJzLCBudW1iZXJzIGFuZCBzcGVjaWFsIGNoYXJhY3RlcnMuJyxcbiAgICAgICAgY2hlY2s6ICgpID0+IHtcbiAgICAgICAgICBjb25zdCBwYXNzd29yZCA9IGRhdGFiYXNlVXJsLm1hdGNoKC9cXC9cXC9cXFMrOihcXFMrKUAvKVsxXTtcbiAgICAgICAgICBjb25zdCBoYXNVcHBlckNhc2UgPSAvW0EtWl0vLnRlc3QocGFzc3dvcmQpO1xuICAgICAgICAgIGNvbnN0IGhhc0xvd2VyQ2FzZSA9IC9bYS16XS8udGVzdChwYXNzd29yZCk7XG4gICAgICAgICAgY29uc3QgaGFzTnVtYmVycyA9IC9cXGQvLnRlc3QocGFzc3dvcmQpO1xuICAgICAgICAgIGNvbnN0IGhhc05vbkFscGhhc051bWVyaWNzID0gL1xcVy8udGVzdChwYXNzd29yZCk7XG4gICAgICAgICAgLy8gRW5zdXJlIGxlbmd0aFxuICAgICAgICAgIGlmIChwYXNzd29yZC5sZW5ndGggPCAxNCkge1xuICAgICAgICAgICAgdGhyb3cgMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gRW5zdXJlIGF0IGxlYXN0IDMgb3V0IG9mIDQgcmVxdWlyZW1lbnRzIHBhc3NlZFxuICAgICAgICAgIGlmIChoYXNVcHBlckNhc2UgKyBoYXNMb3dlckNhc2UgKyBoYXNOdW1iZXJzICsgaGFzTm9uQWxwaGFzTnVtZXJpY3MgPCAzKSB7XG4gICAgICAgICAgICB0aHJvdyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgIF07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDaGVja0dyb3VwRGF0YWJhc2U7XG4iXX0=