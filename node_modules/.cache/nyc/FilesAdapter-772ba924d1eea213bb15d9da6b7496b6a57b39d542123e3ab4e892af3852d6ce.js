"use strict";function cov_1siqojci52(){var path="/parse-server/lib/Adapters/Files/FilesAdapter.js";var hash="9ef2feab5b8b37d66ff85bb488f8f39f902d7645";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Adapters/Files/FilesAdapter.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:44}},"2":{start:{line:7,column:0},end:{line:7,column:48}},"3":{start:{line:9,column:12},end:{line:9,column:57}},"4":{start:{line:11,column:39},end:{line:11,column:93}},"5":{start:{line:118,column:0},end:{line:118,column:36}},"6":{start:{line:121,column:2},end:{line:123,column:3}},"7":{start:{line:122,column:4},end:{line:122,column:96}},"8":{start:{line:125,column:15},end:{line:125,column:49}},"9":{start:{line:127,column:2},end:{line:129,column:3}},"10":{start:{line:128,column:4},end:{line:128,column:115}},"11":{start:{line:131,column:2},end:{line:131,column:14}},"12":{start:{line:134,column:15},end:{line:134,column:27}},"13":{start:{line:135,column:0},end:{line:135,column:27}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:11,column:9},end:{line:11,column:31}},loc:{start:{line:11,column:37},end:{line:11,column:95}},line:11},"1":{name:"(anonymous_1)",decl:{start:{line:52,column:2},end:{line:52,column:3}},loc:{start:{line:52,column:51},end:{line:52,column:53}},line:52},"2":{name:"(anonymous_2)",decl:{start:{line:61,column:2},end:{line:61,column:3}},loc:{start:{line:61,column:23},end:{line:61,column:25}},line:61},"3":{name:"(anonymous_3)",decl:{start:{line:70,column:2},end:{line:70,column:3}},loc:{start:{line:70,column:24},end:{line:70,column:26}},line:70},"4":{name:"(anonymous_4)",decl:{start:{line:80,column:2},end:{line:80,column:3}},loc:{start:{line:80,column:36},end:{line:80,column:38}},line:80},"5":{name:"validateFilename",decl:{start:{line:120,column:9},end:{line:120,column:25}},loc:{start:{line:120,column:36},end:{line:132,column:1}},line:120}},branchMap:{"0":{loc:{start:{line:11,column:46},end:{line:11,column:92}},type:"cond-expr",locations:[{start:{line:11,column:70},end:{line:11,column:73}},{start:{line:11,column:76},end:{line:11,column:92}}],line:11},"1":{loc:{start:{line:11,column:46},end:{line:11,column:67}},type:"binary-expr",locations:[{start:{line:11,column:46},end:{line:11,column:49}},{start:{line:11,column:53},end:{line:11,column:67}}],line:11},"2":{loc:{start:{line:121,column:2},end:{line:123,column:3}},type:"if",locations:[{start:{line:121,column:2},end:{line:123,column:3}},{start:{line:121,column:2},end:{line:123,column:3}}],line:121},"3":{loc:{start:{line:127,column:2},end:{line:129,column:3}},type:"if",locations:[{start:{line:127,column:2},end:{line:129,column:3}},{start:{line:127,column:2},end:{line:129,column:3}}],line:127}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},inputSourceMap:{version:3,sources:["../../../src/Adapters/Files/FilesAdapter.js"],names:["FilesAdapter","createFile","filename","data","contentType","options","deleteFile","getFileData","getFileLocation","config","validateFilename","length","Parse","Error","INVALID_FILE_NAME","regx","match"],mappings:";;;;;;;;AAmBA;;;;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AACA;AACA;AACA;AACO,MAAMA,YAAN,CAAmB;AACxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,UAAU,CAACC,QAAD,EAAmBC,IAAnB,EAAyBC,WAAzB,EAA8CC,OAA9C,EAAwE,CAAE;AAEpF;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,UAAU,CAACJ,QAAD,EAA4B,CAAE;AAExC;AACF;AACA;AACA;AACA;AACA;;;AACEK,EAAAA,WAAW,CAACL,QAAD,EAAiC,CAAE;AAE9C;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEM,EAAAA,eAAe,CAACC,MAAD,EAAiBP,QAAjB,EAA2C,CAAE;AAE5D;AACF;AACA;AACA;AACA;AACA;AACE;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;;AAEA;AACF;AACA;AACA;AACA;AACA;AACE;;;AAlEwB;AAqE1B;AACA;AACA;AACA;AACA;AACA;;;;;AACO,SAASQ,gBAAT,CAA0BR,QAA1B,EAAkD;AACvD,MAAIA,QAAQ,CAACS,MAAT,GAAkB,GAAtB,EAA2B;AACzB,WAAO,IAAIC,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYC,iBAA5B,EAA+C,oBAA/C,CAAP;AACD;;AAED,QAAMC,IAAI,GAAG,kCAAb;;AACA,MAAI,CAACb,QAAQ,CAACc,KAAT,CAAeD,IAAf,CAAL,EAA2B;AACzB,WAAO,IAAIH,cAAMC,KAAV,CAAgBD,cAAMC,KAAN,CAAYC,iBAA5B,EAA+C,uCAA/C,CAAP;AACD;;AACD,SAAO,IAAP;AACD;;eAEcd,Y",sourcesContent:["/*eslint no-unused-vars: \"off\"*/\n// Files Adapter\n//\n// Allows you to change the file storage mechanism.\n//\n// Adapter classes must implement the following functions:\n// * createFile(filename, data, contentType)\n// * deleteFile(filename)\n// * getFileData(filename)\n// * getFileLocation(config, filename)\n// Adapter classes should implement the following functions:\n// * validateFilename(filename)\n// * handleFileStream(filename, req, res, contentType)\n//\n// Default is GridFSBucketAdapter, which requires mongo\n// and for the API server to be using the DatabaseController with Mongo\n// database adapter.\n\nimport type { Config } from '../../Config';\nimport Parse from 'parse/node';\n/**\n * @module Adapters\n */\n/**\n * @interface FilesAdapter\n */\nexport class FilesAdapter {\n  /** Responsible for storing the file in order to be retrieved later by its filename\n   *\n   * @param {string} filename - the filename to save\n   * @param {*} data - the buffer of data from the file\n   * @param {string} contentType - the supposed contentType\n   * @discussion the contentType can be undefined if the controller was not able to determine it\n   * @param {object} options - (Optional) options to be passed to file adapter (S3 File Adapter Only)\n   * - tags: object containing key value pairs that will be stored with file\n   * - metadata: object containing key value pairs that will be sotred with file (https://docs.aws.amazon.com/AmazonS3/latest/user-guide/add-object-metadata.html)\n   * @discussion options are not supported by all file adapters. Check the your adapter's documentation for compatibility\n   *\n   * @return {Promise} a promise that should fail if the storage didn't succeed\n   */\n  createFile(filename: string, data, contentType: string, options: Object): Promise {}\n\n  /** Responsible for deleting the specified file\n   *\n   * @param {string} filename - the filename to delete\n   *\n   * @return {Promise} a promise that should fail if the deletion didn't succeed\n   */\n  deleteFile(filename: string): Promise {}\n\n  /** Responsible for retrieving the data of the specified file\n   *\n   * @param {string} filename - the name of file to retrieve\n   *\n   * @return {Promise} a promise that should pass with the file data or fail on error\n   */\n  getFileData(filename: string): Promise<any> {}\n\n  /** Returns an absolute URL where the file can be accessed\n   *\n   * @param {Config} config - server configuration\n   * @param {string} filename\n   *\n   * @return {string} Absolute URL\n   */\n  getFileLocation(config: Config, filename: string): string {}\n\n  /** Validate a filename for this adapter type\n   *\n   * @param {string} filename\n   *\n   * @returns {null|Parse.Error} null if there are no errors\n   */\n  // validateFilename(filename: string): ?Parse.Error {}\n\n  /** Handles Byte-Range Requests for Streaming\n   *\n   * @param {string} filename\n   * @param {object} req\n   * @param {object} res\n   * @param {string} contentType\n   *\n   * @returns {Promise} Data for byte range\n   */\n  // handleFileStream(filename: string, res: any, req: any, contentType: string): Promise\n\n  /** Responsible for retrieving metadata and tags\n   *\n   * @param {string} filename - the filename to retrieve metadata\n   *\n   * @return {Promise} a promise that should pass with metadata\n   */\n  // getMetadata(filename: string): Promise<any> {}\n}\n\n/**\n * Simple filename validation\n *\n * @param filename\n * @returns {null|Parse.Error}\n */\nexport function validateFilename(filename): ?Parse.Error {\n  if (filename.length > 128) {\n    return new Parse.Error(Parse.Error.INVALID_FILE_NAME, 'Filename too long.');\n  }\n\n  const regx = /^[_a-zA-Z0-9][a-zA-Z0-9@. ~_-]*$/;\n  if (!filename.match(regx)) {\n    return new Parse.Error(Parse.Error.INVALID_FILE_NAME, 'Filename contains invalid characters.');\n  }\n  return null;\n}\n\nexport default FilesAdapter;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"9ef2feab5b8b37d66ff85bb488f8f39f902d7645"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1siqojci52=function(){return actualCoverage;};}return actualCoverage;}cov_1siqojci52();cov_1siqojci52().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1siqojci52().s[1]++;exports.validateFilename=validateFilename;cov_1siqojci52().s[2]++;exports.default=exports.FilesAdapter=void 0;var _node=(cov_1siqojci52().s[3]++,_interopRequireDefault(require("parse/node")));function _interopRequireDefault(obj){cov_1siqojci52().f[0]++;cov_1siqojci52().s[4]++;return(cov_1siqojci52().b[1][0]++,obj)&&(cov_1siqojci52().b[1][1]++,obj.__esModule)?(cov_1siqojci52().b[0][0]++,obj):(cov_1siqojci52().b[0][1]++,{default:obj});}/*eslint no-unused-vars: "off"*/ // Files Adapter
//
// Allows you to change the file storage mechanism.
//
// Adapter classes must implement the following functions:
// * createFile(filename, data, contentType)
// * deleteFile(filename)
// * getFileData(filename)
// * getFileLocation(config, filename)
// Adapter classes should implement the following functions:
// * validateFilename(filename)
// * handleFileStream(filename, req, res, contentType)
//
// Default is GridFSBucketAdapter, which requires mongo
// and for the API server to be using the DatabaseController with Mongo
// database adapter.
/**
 * @module Adapters
 */ /**
 * @interface FilesAdapter
 */class FilesAdapter{/** Responsible for storing the file in order to be retrieved later by its filename
   *
   * @param {string} filename - the filename to save
   * @param {*} data - the buffer of data from the file
   * @param {string} contentType - the supposed contentType
   * @discussion the contentType can be undefined if the controller was not able to determine it
   * @param {object} options - (Optional) options to be passed to file adapter (S3 File Adapter Only)
   * - tags: object containing key value pairs that will be stored with file
   * - metadata: object containing key value pairs that will be sotred with file (https://docs.aws.amazon.com/AmazonS3/latest/user-guide/add-object-metadata.html)
   * @discussion options are not supported by all file adapters. Check the your adapter's documentation for compatibility
   *
   * @return {Promise} a promise that should fail if the storage didn't succeed
   */createFile(filename,data,contentType,options){cov_1siqojci52().f[1]++;}/** Responsible for deleting the specified file
   *
   * @param {string} filename - the filename to delete
   *
   * @return {Promise} a promise that should fail if the deletion didn't succeed
   */deleteFile(filename){cov_1siqojci52().f[2]++;}/** Responsible for retrieving the data of the specified file
   *
   * @param {string} filename - the name of file to retrieve
   *
   * @return {Promise} a promise that should pass with the file data or fail on error
   */getFileData(filename){cov_1siqojci52().f[3]++;}/** Returns an absolute URL where the file can be accessed
   *
   * @param {Config} config - server configuration
   * @param {string} filename
   *
   * @return {string} Absolute URL
   */getFileLocation(config,filename){cov_1siqojci52().f[4]++;}/** Validate a filename for this adapter type
   *
   * @param {string} filename
   *
   * @returns {null|Parse.Error} null if there are no errors
   */ // validateFilename(filename: string): ?Parse.Error {}
/** Handles Byte-Range Requests for Streaming
   *
   * @param {string} filename
   * @param {object} req
   * @param {object} res
   * @param {string} contentType
   *
   * @returns {Promise} Data for byte range
   */ // handleFileStream(filename: string, res: any, req: any, contentType: string): Promise
/** Responsible for retrieving metadata and tags
   *
   * @param {string} filename - the filename to retrieve metadata
   *
   * @return {Promise} a promise that should pass with metadata
   */ // getMetadata(filename: string): Promise<any> {}
}/**
 * Simple filename validation
 *
 * @param filename
 * @returns {null|Parse.Error}
 */cov_1siqojci52().s[5]++;exports.FilesAdapter=FilesAdapter;function validateFilename(filename){cov_1siqojci52().f[5]++;cov_1siqojci52().s[6]++;if(filename.length>128){cov_1siqojci52().b[2][0]++;cov_1siqojci52().s[7]++;return new _node.default.Error(_node.default.Error.INVALID_FILE_NAME,'Filename too long.');}else{cov_1siqojci52().b[2][1]++;}const regx=(cov_1siqojci52().s[8]++,/^[_a-zA-Z0-9][a-zA-Z0-9@. ~_-]*$/);cov_1siqojci52().s[9]++;if(!filename.match(regx)){cov_1siqojci52().b[3][0]++;cov_1siqojci52().s[10]++;return new _node.default.Error(_node.default.Error.INVALID_FILE_NAME,'Filename contains invalid characters.');}else{cov_1siqojci52().b[3][1]++;}cov_1siqojci52().s[11]++;return null;}var _default=(cov_1siqojci52().s[12]++,FilesAdapter);cov_1siqojci52().s[13]++;exports.default=_default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9GaWxlcy9GaWxlc0FkYXB0ZXIuanMiXSwibmFtZXMiOlsiRmlsZXNBZGFwdGVyIiwiY3JlYXRlRmlsZSIsImZpbGVuYW1lIiwiZGF0YSIsImNvbnRlbnRUeXBlIiwib3B0aW9ucyIsImRlbGV0ZUZpbGUiLCJnZXRGaWxlRGF0YSIsImdldEZpbGVMb2NhdGlvbiIsImNvbmZpZyIsInZhbGlkYXRlRmlsZW5hbWUiLCJsZW5ndGgiLCJQYXJzZSIsIkVycm9yIiwiSU5WQUxJRF9GSUxFX05BTUUiLCJyZWd4IiwibWF0Y2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBbUJBOzs7O0FBbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1BLFlBQU4sQ0FBbUI7QUFDeEI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRUMsRUFBQUEsVUFBVSxDQUFDQyxRQUFELEVBQW1CQyxJQUFuQixFQUF5QkMsV0FBekIsRUFBOENDLE9BQTlDLEVBQXdFLENBQUU7QUFFcEY7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDRUMsRUFBQUEsVUFBVSxDQUFDSixRQUFELEVBQTRCLENBQUU7QUFFeEM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDRUssRUFBQUEsV0FBVyxDQUFDTCxRQUFELEVBQWlDLENBQUU7QUFFOUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNFTSxFQUFBQSxlQUFlLENBQUNDLE1BQUQsRUFBaUJQLFFBQWpCLEVBQTJDLENBQUU7QUFFNUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7O0FBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7O0FBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7OztBQWxFd0I7QUFxRTFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFDTyxTQUFTUSxnQkFBVCxDQUEwQlIsUUFBMUIsRUFBa0Q7QUFDdkQsTUFBSUEsUUFBUSxDQUFDUyxNQUFULEdBQWtCLEdBQXRCLEVBQTJCO0FBQ3pCLFdBQU8sSUFBSUMsY0FBTUMsS0FBVixDQUFnQkQsY0FBTUMsS0FBTixDQUFZQyxpQkFBNUIsRUFBK0Msb0JBQS9DLENBQVA7QUFDRDs7QUFFRCxRQUFNQyxJQUFJLEdBQUcsa0NBQWI7O0FBQ0EsTUFBSSxDQUFDYixRQUFRLENBQUNjLEtBQVQsQ0FBZUQsSUFBZixDQUFMLEVBQTJCO0FBQ3pCLFdBQU8sSUFBSUgsY0FBTUMsS0FBVixDQUFnQkQsY0FBTUMsS0FBTixDQUFZQyxpQkFBNUIsRUFBK0MsdUNBQS9DLENBQVA7QUFDRDs7QUFDRCxTQUFPLElBQVA7QUFDRDs7ZUFFY2QsWSIsInNvdXJjZXNDb250ZW50IjpbIi8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiKi9cbi8vIEZpbGVzIEFkYXB0ZXJcbi8vXG4vLyBBbGxvd3MgeW91IHRvIGNoYW5nZSB0aGUgZmlsZSBzdG9yYWdlIG1lY2hhbmlzbS5cbi8vXG4vLyBBZGFwdGVyIGNsYXNzZXMgbXVzdCBpbXBsZW1lbnQgdGhlIGZvbGxvd2luZyBmdW5jdGlvbnM6XG4vLyAqIGNyZWF0ZUZpbGUoZmlsZW5hbWUsIGRhdGEsIGNvbnRlbnRUeXBlKVxuLy8gKiBkZWxldGVGaWxlKGZpbGVuYW1lKVxuLy8gKiBnZXRGaWxlRGF0YShmaWxlbmFtZSlcbi8vICogZ2V0RmlsZUxvY2F0aW9uKGNvbmZpZywgZmlsZW5hbWUpXG4vLyBBZGFwdGVyIGNsYXNzZXMgc2hvdWxkIGltcGxlbWVudCB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uczpcbi8vICogdmFsaWRhdGVGaWxlbmFtZShmaWxlbmFtZSlcbi8vICogaGFuZGxlRmlsZVN0cmVhbShmaWxlbmFtZSwgcmVxLCByZXMsIGNvbnRlbnRUeXBlKVxuLy9cbi8vIERlZmF1bHQgaXMgR3JpZEZTQnVja2V0QWRhcHRlciwgd2hpY2ggcmVxdWlyZXMgbW9uZ29cbi8vIGFuZCBmb3IgdGhlIEFQSSBzZXJ2ZXIgdG8gYmUgdXNpbmcgdGhlIERhdGFiYXNlQ29udHJvbGxlciB3aXRoIE1vbmdvXG4vLyBkYXRhYmFzZSBhZGFwdGVyLlxuXG5pbXBvcnQgdHlwZSB7IENvbmZpZyB9IGZyb20gJy4uLy4uL0NvbmZpZyc7XG5pbXBvcnQgUGFyc2UgZnJvbSAncGFyc2Uvbm9kZSc7XG4vKipcbiAqIEBtb2R1bGUgQWRhcHRlcnNcbiAqL1xuLyoqXG4gKiBAaW50ZXJmYWNlIEZpbGVzQWRhcHRlclxuICovXG5leHBvcnQgY2xhc3MgRmlsZXNBZGFwdGVyIHtcbiAgLyoqIFJlc3BvbnNpYmxlIGZvciBzdG9yaW5nIHRoZSBmaWxlIGluIG9yZGVyIHRvIGJlIHJldHJpZXZlZCBsYXRlciBieSBpdHMgZmlsZW5hbWVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVuYW1lIC0gdGhlIGZpbGVuYW1lIHRvIHNhdmVcbiAgICogQHBhcmFtIHsqfSBkYXRhIC0gdGhlIGJ1ZmZlciBvZiBkYXRhIGZyb20gdGhlIGZpbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRUeXBlIC0gdGhlIHN1cHBvc2VkIGNvbnRlbnRUeXBlXG4gICAqIEBkaXNjdXNzaW9uIHRoZSBjb250ZW50VHlwZSBjYW4gYmUgdW5kZWZpbmVkIGlmIHRoZSBjb250cm9sbGVyIHdhcyBub3QgYWJsZSB0byBkZXRlcm1pbmUgaXRcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSAoT3B0aW9uYWwpIG9wdGlvbnMgdG8gYmUgcGFzc2VkIHRvIGZpbGUgYWRhcHRlciAoUzMgRmlsZSBBZGFwdGVyIE9ubHkpXG4gICAqIC0gdGFnczogb2JqZWN0IGNvbnRhaW5pbmcga2V5IHZhbHVlIHBhaXJzIHRoYXQgd2lsbCBiZSBzdG9yZWQgd2l0aCBmaWxlXG4gICAqIC0gbWV0YWRhdGE6IG9iamVjdCBjb250YWluaW5nIGtleSB2YWx1ZSBwYWlycyB0aGF0IHdpbGwgYmUgc290cmVkIHdpdGggZmlsZSAoaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FtYXpvblMzL2xhdGVzdC91c2VyLWd1aWRlL2FkZC1vYmplY3QtbWV0YWRhdGEuaHRtbClcbiAgICogQGRpc2N1c3Npb24gb3B0aW9ucyBhcmUgbm90IHN1cHBvcnRlZCBieSBhbGwgZmlsZSBhZGFwdGVycy4gQ2hlY2sgdGhlIHlvdXIgYWRhcHRlcidzIGRvY3VtZW50YXRpb24gZm9yIGNvbXBhdGliaWxpdHlcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHRoYXQgc2hvdWxkIGZhaWwgaWYgdGhlIHN0b3JhZ2UgZGlkbid0IHN1Y2NlZWRcbiAgICovXG4gIGNyZWF0ZUZpbGUoZmlsZW5hbWU6IHN0cmluZywgZGF0YSwgY29udGVudFR5cGU6IHN0cmluZywgb3B0aW9uczogT2JqZWN0KTogUHJvbWlzZSB7fVxuXG4gIC8qKiBSZXNwb25zaWJsZSBmb3IgZGVsZXRpbmcgdGhlIHNwZWNpZmllZCBmaWxlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZSAtIHRoZSBmaWxlbmFtZSB0byBkZWxldGVcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHRoYXQgc2hvdWxkIGZhaWwgaWYgdGhlIGRlbGV0aW9uIGRpZG4ndCBzdWNjZWVkXG4gICAqL1xuICBkZWxldGVGaWxlKGZpbGVuYW1lOiBzdHJpbmcpOiBQcm9taXNlIHt9XG5cbiAgLyoqIFJlc3BvbnNpYmxlIGZvciByZXRyaWV2aW5nIHRoZSBkYXRhIG9mIHRoZSBzcGVjaWZpZWQgZmlsZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWUgLSB0aGUgbmFtZSBvZiBmaWxlIHRvIHJldHJpZXZlXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSB0aGF0IHNob3VsZCBwYXNzIHdpdGggdGhlIGZpbGUgZGF0YSBvciBmYWlsIG9uIGVycm9yXG4gICAqL1xuICBnZXRGaWxlRGF0YShmaWxlbmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHt9XG5cbiAgLyoqIFJldHVybnMgYW4gYWJzb2x1dGUgVVJMIHdoZXJlIHRoZSBmaWxlIGNhbiBiZSBhY2Nlc3NlZFxuICAgKlxuICAgKiBAcGFyYW0ge0NvbmZpZ30gY29uZmlnIC0gc2VydmVyIGNvbmZpZ3VyYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVuYW1lXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gQWJzb2x1dGUgVVJMXG4gICAqL1xuICBnZXRGaWxlTG9jYXRpb24oY29uZmlnOiBDb25maWcsIGZpbGVuYW1lOiBzdHJpbmcpOiBzdHJpbmcge31cblxuICAvKiogVmFsaWRhdGUgYSBmaWxlbmFtZSBmb3IgdGhpcyBhZGFwdGVyIHR5cGVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVuYW1lXG4gICAqXG4gICAqIEByZXR1cm5zIHtudWxsfFBhcnNlLkVycm9yfSBudWxsIGlmIHRoZXJlIGFyZSBubyBlcnJvcnNcbiAgICovXG4gIC8vIHZhbGlkYXRlRmlsZW5hbWUoZmlsZW5hbWU6IHN0cmluZyk6ID9QYXJzZS5FcnJvciB7fVxuXG4gIC8qKiBIYW5kbGVzIEJ5dGUtUmFuZ2UgUmVxdWVzdHMgZm9yIFN0cmVhbWluZ1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWVcbiAgICogQHBhcmFtIHtvYmplY3R9IHJlcVxuICAgKiBAcGFyYW0ge29iamVjdH0gcmVzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50VHlwZVxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gRGF0YSBmb3IgYnl0ZSByYW5nZVxuICAgKi9cbiAgLy8gaGFuZGxlRmlsZVN0cmVhbShmaWxlbmFtZTogc3RyaW5nLCByZXM6IGFueSwgcmVxOiBhbnksIGNvbnRlbnRUeXBlOiBzdHJpbmcpOiBQcm9taXNlXG5cbiAgLyoqIFJlc3BvbnNpYmxlIGZvciByZXRyaWV2aW5nIG1ldGFkYXRhIGFuZCB0YWdzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZSAtIHRoZSBmaWxlbmFtZSB0byByZXRyaWV2ZSBtZXRhZGF0YVxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCBzaG91bGQgcGFzcyB3aXRoIG1ldGFkYXRhXG4gICAqL1xuICAvLyBnZXRNZXRhZGF0YShmaWxlbmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHt9XG59XG5cbi8qKlxuICogU2ltcGxlIGZpbGVuYW1lIHZhbGlkYXRpb25cbiAqXG4gKiBAcGFyYW0gZmlsZW5hbWVcbiAqIEByZXR1cm5zIHtudWxsfFBhcnNlLkVycm9yfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVGaWxlbmFtZShmaWxlbmFtZSk6ID9QYXJzZS5FcnJvciB7XG4gIGlmIChmaWxlbmFtZS5sZW5ndGggPiAxMjgpIHtcbiAgICByZXR1cm4gbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLklOVkFMSURfRklMRV9OQU1FLCAnRmlsZW5hbWUgdG9vIGxvbmcuJyk7XG4gIH1cblxuICBjb25zdCByZWd4ID0gL15bX2EtekEtWjAtOV1bYS16QS1aMC05QC4gfl8tXSokLztcbiAgaWYgKCFmaWxlbmFtZS5tYXRjaChyZWd4KSkge1xuICAgIHJldHVybiBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuSU5WQUxJRF9GSUxFX05BTUUsICdGaWxlbmFtZSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMuJyk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpbGVzQWRhcHRlcjtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9GaWxlcy9GaWxlc0FkYXB0ZXIuanMiXSwibmFtZXMiOlsiY3JlYXRlRmlsZSIsImRlbGV0ZUZpbGUiLCJnZXRGaWxlRGF0YSIsImdldEZpbGVMb2NhdGlvbiIsImZpbGVuYW1lIiwiUGFyc2UiLCJyZWd4IiwiRmlsZXNBZGFwdGVyIl0sIm1hcHBpbmdzIjoiaTRRQUdBO2tUQWdCQSxHQUFBLENBQUEsS0FBQSwwQkFBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxZQUFBLENBQUEsQ0FBQSxDQUFBLEMsc1BBbkJBLGdDLENBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0EsRyxDQUNBO0FBQ0E7QUFDQSxHQUNPLEtBQUEsQ0FBQSxZQUFtQixDQUN4QjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUNFQSxVQUFVLENBQUEsUUFBQSxDQUFBLElBQUEsQ0FBQSxXQUFBLENBQUEsT0FBQSxDQUF3RSx5QkFBRSxDQUVwRjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FDRUMsVUFBVSxDQUFBLFFBQUEsQ0FBNEIseUJBQUUsQ0FFeEM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQ0VDLFdBQVcsQ0FBQSxRQUFBLENBQWlDLHlCQUFFLENBRTlDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQ0VDLGVBQWUsQ0FBQSxNQUFBLENBQUEsUUFBQSxDQUEyQyx5QkFBRSxDQUU1RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0E5QzBCLENBK0N4QjtBQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQXpEMEIsQ0EwRHhCO0FBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBakUwQixDQWtFeEI7QUFsRXdCLENBcUUxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRywwREFDTyxRQUFBLENBQUEsZ0JBQUEsQ0FBQSxRQUFBLENBQWtELGlEQUN2RCxHQUFJQyxRQUFRLENBQVJBLE1BQUFBLENBQUosR0FBQSxDQUEyQixvREFDekIsTUFBTyxJQUFJQyxDQUFBQSxLQUFBQSxDQUFBQSxPQUFBQSxDQUFKLEtBQUEsQ0FBZ0JBLEtBQUFBLENBQUFBLE9BQUFBLENBQUFBLEtBQUFBLENBQWhCLGlCQUFBLENBQVAsb0JBQU8sQ0FBUCxDQUNELENBRkQsaUNBSUEsS0FBTUMsQ0FBQUEsSUFBSSwwQkFBVixrQ0FBVSxDQUFWLENBTHVELHdCQU12RCxHQUFJLENBQUNGLFFBQVEsQ0FBUkEsS0FBQUEsQ0FBTCxJQUFLQSxDQUFMLENBQTJCLHFEQUN6QixNQUFPLElBQUlDLENBQUFBLEtBQUFBLENBQUFBLE9BQUFBLENBQUosS0FBQSxDQUFnQkEsS0FBQUEsQ0FBQUEsT0FBQUEsQ0FBQUEsS0FBQUEsQ0FBaEIsaUJBQUEsQ0FBUCx1Q0FBTyxDQUFQLENBQ0QsQ0FGRCxpQ0FOdUQseUJBU3ZELE1BQUEsS0FBQSxDQUNELEMsdUNBRWNFLFkiLCJzb3VyY2VzQ29udGVudCI6WyIvKmVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiovXG4vLyBGaWxlcyBBZGFwdGVyXG4vL1xuLy8gQWxsb3dzIHlvdSB0byBjaGFuZ2UgdGhlIGZpbGUgc3RvcmFnZSBtZWNoYW5pc20uXG4vL1xuLy8gQWRhcHRlciBjbGFzc2VzIG11c3QgaW1wbGVtZW50IHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zOlxuLy8gKiBjcmVhdGVGaWxlKGZpbGVuYW1lLCBkYXRhLCBjb250ZW50VHlwZSlcbi8vICogZGVsZXRlRmlsZShmaWxlbmFtZSlcbi8vICogZ2V0RmlsZURhdGEoZmlsZW5hbWUpXG4vLyAqIGdldEZpbGVMb2NhdGlvbihjb25maWcsIGZpbGVuYW1lKVxuLy8gQWRhcHRlciBjbGFzc2VzIHNob3VsZCBpbXBsZW1lbnQgdGhlIGZvbGxvd2luZyBmdW5jdGlvbnM6XG4vLyAqIHZhbGlkYXRlRmlsZW5hbWUoZmlsZW5hbWUpXG4vLyAqIGhhbmRsZUZpbGVTdHJlYW0oZmlsZW5hbWUsIHJlcSwgcmVzLCBjb250ZW50VHlwZSlcbi8vXG4vLyBEZWZhdWx0IGlzIEdyaWRGU0J1Y2tldEFkYXB0ZXIsIHdoaWNoIHJlcXVpcmVzIG1vbmdvXG4vLyBhbmQgZm9yIHRoZSBBUEkgc2VydmVyIHRvIGJlIHVzaW5nIHRoZSBEYXRhYmFzZUNvbnRyb2xsZXIgd2l0aCBNb25nb1xuLy8gZGF0YWJhc2UgYWRhcHRlci5cblxuaW1wb3J0IHR5cGUgeyBDb25maWcgfSBmcm9tICcuLi8uLi9Db25maWcnO1xuaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuLyoqXG4gKiBAbW9kdWxlIEFkYXB0ZXJzXG4gKi9cbi8qKlxuICogQGludGVyZmFjZSBGaWxlc0FkYXB0ZXJcbiAqL1xuZXhwb3J0IGNsYXNzIEZpbGVzQWRhcHRlciB7XG4gIC8qKiBSZXNwb25zaWJsZSBmb3Igc3RvcmluZyB0aGUgZmlsZSBpbiBvcmRlciB0byBiZSByZXRyaWV2ZWQgbGF0ZXIgYnkgaXRzIGZpbGVuYW1lXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZSAtIHRoZSBmaWxlbmFtZSB0byBzYXZlXG4gICAqIEBwYXJhbSB7Kn0gZGF0YSAtIHRoZSBidWZmZXIgb2YgZGF0YSBmcm9tIHRoZSBmaWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50VHlwZSAtIHRoZSBzdXBwb3NlZCBjb250ZW50VHlwZVxuICAgKiBAZGlzY3Vzc2lvbiB0aGUgY29udGVudFR5cGUgY2FuIGJlIHVuZGVmaW5lZCBpZiB0aGUgY29udHJvbGxlciB3YXMgbm90IGFibGUgdG8gZGV0ZXJtaW5lIGl0XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gKE9wdGlvbmFsKSBvcHRpb25zIHRvIGJlIHBhc3NlZCB0byBmaWxlIGFkYXB0ZXIgKFMzIEZpbGUgQWRhcHRlciBPbmx5KVxuICAgKiAtIHRhZ3M6IG9iamVjdCBjb250YWluaW5nIGtleSB2YWx1ZSBwYWlycyB0aGF0IHdpbGwgYmUgc3RvcmVkIHdpdGggZmlsZVxuICAgKiAtIG1ldGFkYXRhOiBvYmplY3QgY29udGFpbmluZyBrZXkgdmFsdWUgcGFpcnMgdGhhdCB3aWxsIGJlIHNvdHJlZCB3aXRoIGZpbGUgKGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BbWF6b25TMy9sYXRlc3QvdXNlci1ndWlkZS9hZGQtb2JqZWN0LW1ldGFkYXRhLmh0bWwpXG4gICAqIEBkaXNjdXNzaW9uIG9wdGlvbnMgYXJlIG5vdCBzdXBwb3J0ZWQgYnkgYWxsIGZpbGUgYWRhcHRlcnMuIENoZWNrIHRoZSB5b3VyIGFkYXB0ZXIncyBkb2N1bWVudGF0aW9uIGZvciBjb21wYXRpYmlsaXR5XG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSB0aGF0IHNob3VsZCBmYWlsIGlmIHRoZSBzdG9yYWdlIGRpZG4ndCBzdWNjZWVkXG4gICAqL1xuICBjcmVhdGVGaWxlKGZpbGVuYW1lOiBzdHJpbmcsIGRhdGEsIGNvbnRlbnRUeXBlOiBzdHJpbmcsIG9wdGlvbnM6IE9iamVjdCk6IFByb21pc2Uge31cblxuICAvKiogUmVzcG9uc2libGUgZm9yIGRlbGV0aW5nIHRoZSBzcGVjaWZpZWQgZmlsZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWUgLSB0aGUgZmlsZW5hbWUgdG8gZGVsZXRlXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSB0aGF0IHNob3VsZCBmYWlsIGlmIHRoZSBkZWxldGlvbiBkaWRuJ3Qgc3VjY2VlZFxuICAgKi9cbiAgZGVsZXRlRmlsZShmaWxlbmFtZTogc3RyaW5nKTogUHJvbWlzZSB7fVxuXG4gIC8qKiBSZXNwb25zaWJsZSBmb3IgcmV0cmlldmluZyB0aGUgZGF0YSBvZiB0aGUgc3BlY2lmaWVkIGZpbGVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVuYW1lIC0gdGhlIG5hbWUgb2YgZmlsZSB0byByZXRyaWV2ZVxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCBzaG91bGQgcGFzcyB3aXRoIHRoZSBmaWxlIGRhdGEgb3IgZmFpbCBvbiBlcnJvclxuICAgKi9cbiAgZ2V0RmlsZURhdGEoZmlsZW5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7fVxuXG4gIC8qKiBSZXR1cm5zIGFuIGFic29sdXRlIFVSTCB3aGVyZSB0aGUgZmlsZSBjYW4gYmUgYWNjZXNzZWRcbiAgICpcbiAgICogQHBhcmFtIHtDb25maWd9IGNvbmZpZyAtIHNlcnZlciBjb25maWd1cmF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZVxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IEFic29sdXRlIFVSTFxuICAgKi9cbiAgZ2V0RmlsZUxvY2F0aW9uKGNvbmZpZzogQ29uZmlnLCBmaWxlbmFtZTogc3RyaW5nKTogc3RyaW5nIHt9XG5cbiAgLyoqIFZhbGlkYXRlIGEgZmlsZW5hbWUgZm9yIHRoaXMgYWRhcHRlciB0eXBlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZVxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVsbHxQYXJzZS5FcnJvcn0gbnVsbCBpZiB0aGVyZSBhcmUgbm8gZXJyb3JzXG4gICAqL1xuICAvLyB2YWxpZGF0ZUZpbGVuYW1lKGZpbGVuYW1lOiBzdHJpbmcpOiA/UGFyc2UuRXJyb3Ige31cblxuICAvKiogSGFuZGxlcyBCeXRlLVJhbmdlIFJlcXVlc3RzIGZvciBTdHJlYW1pbmdcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVuYW1lXG4gICAqIEBwYXJhbSB7b2JqZWN0fSByZXFcbiAgICogQHBhcmFtIHtvYmplY3R9IHJlc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFR5cGVcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9IERhdGEgZm9yIGJ5dGUgcmFuZ2VcbiAgICovXG4gIC8vIGhhbmRsZUZpbGVTdHJlYW0oZmlsZW5hbWU6IHN0cmluZywgcmVzOiBhbnksIHJlcTogYW55LCBjb250ZW50VHlwZTogc3RyaW5nKTogUHJvbWlzZVxuXG4gIC8qKiBSZXNwb25zaWJsZSBmb3IgcmV0cmlldmluZyBtZXRhZGF0YSBhbmQgdGFnc1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWUgLSB0aGUgZmlsZW5hbWUgdG8gcmV0cmlldmUgbWV0YWRhdGFcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHRoYXQgc2hvdWxkIHBhc3Mgd2l0aCBtZXRhZGF0YVxuICAgKi9cbiAgLy8gZ2V0TWV0YWRhdGEoZmlsZW5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7fVxufVxuXG4vKipcbiAqIFNpbXBsZSBmaWxlbmFtZSB2YWxpZGF0aW9uXG4gKlxuICogQHBhcmFtIGZpbGVuYW1lXG4gKiBAcmV0dXJucyB7bnVsbHxQYXJzZS5FcnJvcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRmlsZW5hbWUoZmlsZW5hbWUpOiA/UGFyc2UuRXJyb3Ige1xuICBpZiAoZmlsZW5hbWUubGVuZ3RoID4gMTI4KSB7XG4gICAgcmV0dXJuIG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5JTlZBTElEX0ZJTEVfTkFNRSwgJ0ZpbGVuYW1lIHRvbyBsb25nLicpO1xuICB9XG5cbiAgY29uc3QgcmVneCA9IC9eW19hLXpBLVowLTldW2EtekEtWjAtOUAuIH5fLV0qJC87XG4gIGlmICghZmlsZW5hbWUubWF0Y2gocmVneCkpIHtcbiAgICByZXR1cm4gbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLklOVkFMSURfRklMRV9OQU1FLCAnRmlsZW5hbWUgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzLicpO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBGaWxlc0FkYXB0ZXI7XG4iXX0=