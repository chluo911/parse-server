{"version":3,"sources":["../../src/Routers/SessionsRouter.js"],"names":["SessionsRouter","ClassesRouter","className","handleMe","req","info","sessionToken","Parse","Error","INVALID_SESSION_TOKEN","rest","find","config","Auth","master","undefined","clientSDK","context","then","response","results","length","handleUpdateToRevocableSession","user","auth","OBJECT_NOT_FOUND","sessionData","createSession","RestWrite","userId","id","createdWith","action","installationId","database","update","objectId","__op","Promise","resolve","mountRoutes","route","handleFind","handleGet","handleCreate","handleUpdate","handleDelete"],"mappings":"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","sourcesContent":["import ClassesRouter from './ClassesRouter';\nimport Parse from 'parse/node';\nimport rest from '../rest';\nimport Auth from '../Auth';\nimport RestWrite from '../RestWrite';\n\nexport class SessionsRouter extends ClassesRouter {\n  className() {\n    return '_Session';\n  }\n\n  handleMe(req) {\n    // TODO: Verify correct behavior\n    if (!req.info || !req.info.sessionToken) {\n      throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Session token required.');\n    }\n    return rest\n      .find(\n        req.config,\n        Auth.master(req.config),\n        '_Session',\n        { sessionToken: req.info.sessionToken },\n        undefined,\n        req.info.clientSDK,\n        req.info.context\n      )\n      .then(response => {\n        if (!response.results || response.results.length == 0) {\n          throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Session token not found.');\n        }\n        return {\n          response: response.results[0],\n        };\n      });\n  }\n\n  handleUpdateToRevocableSession(req) {\n    const config = req.config;\n    const user = req.auth.user;\n    // Issue #2720\n    // Calling without a session token would result in a not found user\n    if (!user) {\n      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'invalid session');\n    }\n    const { sessionData, createSession } = RestWrite.createSession(config, {\n      userId: user.id,\n      createdWith: {\n        action: 'upgrade',\n      },\n      installationId: req.auth.installationId,\n    });\n\n    return createSession()\n      .then(() => {\n        // delete the session token, use the db to skip beforeSave\n        return config.database.update(\n          '_User',\n          {\n            objectId: user.id,\n          },\n          {\n            sessionToken: { __op: 'Delete' },\n          }\n        );\n      })\n      .then(() => {\n        return Promise.resolve({ response: sessionData });\n      });\n  }\n\n  mountRoutes() {\n    this.route('GET', '/sessions/me', req => {\n      return this.handleMe(req);\n    });\n    this.route('GET', '/sessions', req => {\n      return this.handleFind(req);\n    });\n    this.route('GET', '/sessions/:objectId', req => {\n      return this.handleGet(req);\n    });\n    this.route('POST', '/sessions', req => {\n      return this.handleCreate(req);\n    });\n    this.route('PUT', '/sessions/:objectId', req => {\n      return this.handleUpdate(req);\n    });\n    this.route('DELETE', '/sessions/:objectId', req => {\n      return this.handleDelete(req);\n    });\n    this.route('POST', '/upgradeToRevocableSession', req => {\n      return this.handleUpdateToRevocableSession(req);\n    });\n  }\n}\n\nexport default SessionsRouter;\n"]}