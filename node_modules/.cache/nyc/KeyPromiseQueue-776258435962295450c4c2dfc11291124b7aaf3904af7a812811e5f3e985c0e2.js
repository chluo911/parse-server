"use strict";function cov_ly7uheg6y(){var path="/parse-server/lib/KeyPromiseQueue.js";var hash="f6d38854acbcce6d7ddc366bb922b807ec6ec587";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/KeyPromiseQueue.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:33}},"2":{start:{line:14,column:4},end:{line:14,column:20}},"3":{start:{line:18,column:18},end:{line:18,column:36}},"4":{start:{line:19,column:20},end:{line:19,column:28}},"5":{start:{line:20,column:26},end:{line:20,column:49}},"6":{start:{line:21,column:29},end:{line:24,column:6}},"7":{start:{line:22,column:6},end:{line:22,column:24}},"8":{start:{line:23,column:6},end:{line:23,column:20}},"9":{start:{line:25,column:4},end:{line:25,column:32}},"10":{start:{line:26,column:4},end:{line:26,column:28}},"11":{start:{line:30,column:16},end:{line:30,column:31}},"12":{start:{line:32,column:4},end:{line:35,column:5}},"13":{start:{line:33,column:6},end:{line:33,column:37}},"14":{start:{line:34,column:6},end:{line:34,column:30}},"15":{start:{line:37,column:4},end:{line:37,column:15}},"16":{start:{line:38,column:4},end:{line:38,column:17}},"17":{start:{line:42,column:18},end:{line:42,column:33}},"18":{start:{line:44,column:4},end:{line:46,column:5}},"19":{start:{line:45,column:6},end:{line:45,column:13}},"20":{start:{line:48,column:4},end:{line:48,column:15}},"21":{start:{line:50,column:4},end:{line:53,column:5}},"22":{start:{line:51,column:6},end:{line:51,column:29}},"23":{start:{line:52,column:6},end:{line:52,column:13}},"24":{start:{line:58,column:0},end:{line:58,column:42}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:2},end:{line:13,column:3}},loc:{start:{line:13,column:16},end:{line:15,column:3}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:17,column:2},end:{line:17,column:3}},loc:{start:{line:17,column:26},end:{line:27,column:3}},line:17},"2":{name:"(anonymous_2)",decl:{start:{line:21,column:48},end:{line:21,column:49}},loc:{start:{line:21,column:58},end:{line:24,column:5}},line:21},"3":{name:"(anonymous_3)",decl:{start:{line:29,column:2},end:{line:29,column:3}},loc:{start:{line:29,column:16},end:{line:39,column:3}},line:29},"4":{name:"(anonymous_4)",decl:{start:{line:41,column:2},end:{line:41,column:3}},loc:{start:{line:41,column:15},end:{line:54,column:3}},line:41}},branchMap:{"0":{loc:{start:{line:32,column:4},end:{line:35,column:5}},type:"if",locations:[{start:{line:32,column:4},end:{line:35,column:5}},{start:{line:32,column:4},end:{line:35,column:5}}],line:32},"1":{loc:{start:{line:44,column:4},end:{line:46,column:5}},type:"if",locations:[{start:{line:44,column:4},end:{line:46,column:5}},{start:{line:44,column:4},end:{line:46,column:5}}],line:44},"2":{loc:{start:{line:50,column:4},end:{line:53,column:5}},type:"if",locations:[{start:{line:50,column:4},end:{line:53,column:5}},{start:{line:50,column:4},end:{line:53,column:5}}],line:50}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},inputSourceMap:{version:3,sources:["../src/KeyPromiseQueue.js"],names:["KeyPromiseQueue","constructor","queue","enqueue","key","operation","tuple","beforeOp","toAwait","nextOperation","then","wrappedOperation","result","afterOp","Promise","resolve"],mappings:";;;;;;;AAAA;AACA;AACA;AACA;AACO,MAAMA,eAAN,CAAsB;AAC3BC,EAAAA,WAAW,GAAG;AACZ,SAAKC,KAAL,GAAa,EAAb;AACD;;AAEDC,EAAAA,OAAO,CAACC,GAAD,EAAMC,SAAN,EAAiB;AACtB,UAAMC,KAAK,GAAG,KAAKC,QAAL,CAAcH,GAAd,CAAd;AACA,UAAMI,OAAO,GAAGF,KAAK,CAAC,CAAD,CAArB;AACA,UAAMG,aAAa,GAAGD,OAAO,CAACE,IAAR,CAAaL,SAAb,CAAtB;AACA,UAAMM,gBAAgB,GAAGF,aAAa,CAACC,IAAd,CAAmBE,MAAM,IAAI;AACpD,WAAKC,OAAL,CAAaT,GAAb;AACA,aAAOQ,MAAP;AACD,KAHwB,CAAzB;AAIAN,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAWK,gBAAX;AACA,WAAOA,gBAAP;AACD;;AAEDJ,EAAAA,QAAQ,CAACH,GAAD,EAAM;AACZ,QAAIE,KAAK,GAAG,KAAKJ,KAAL,CAAWE,GAAX,CAAZ;;AACA,QAAI,CAACE,KAAL,EAAY;AACVA,MAAAA,KAAK,GAAG,CAAC,CAAD,EAAIQ,OAAO,CAACC,OAAR,EAAJ,CAAR;AACA,WAAKb,KAAL,CAAWE,GAAX,IAAkBE,KAAlB;AACD;;AACDA,IAAAA,KAAK,CAAC,CAAD,CAAL;AACA,WAAOA,KAAP;AACD;;AAEDO,EAAAA,OAAO,CAACT,GAAD,EAAM;AACX,UAAME,KAAK,GAAG,KAAKJ,KAAL,CAAWE,GAAX,CAAd;;AACA,QAAI,CAACE,KAAL,EAAY;AACV;AACD;;AACDA,IAAAA,KAAK,CAAC,CAAD,CAAL;;AACA,QAAIA,KAAK,CAAC,CAAD,CAAL,IAAY,CAAhB,EAAmB;AACjB,aAAO,KAAKJ,KAAL,CAAWE,GAAX,CAAP;AACA;AACD;AACF;;AArC0B",sourcesContent:["// KeyPromiseQueue is a simple promise queue\n// used to queue operations per key basis.\n// Once the tail promise in the key-queue fulfills,\n// the chain on that key will be cleared.\nexport class KeyPromiseQueue {\n  constructor() {\n    this.queue = {};\n  }\n\n  enqueue(key, operation) {\n    const tuple = this.beforeOp(key);\n    const toAwait = tuple[1];\n    const nextOperation = toAwait.then(operation);\n    const wrappedOperation = nextOperation.then(result => {\n      this.afterOp(key);\n      return result;\n    });\n    tuple[1] = wrappedOperation;\n    return wrappedOperation;\n  }\n\n  beforeOp(key) {\n    let tuple = this.queue[key];\n    if (!tuple) {\n      tuple = [0, Promise.resolve()];\n      this.queue[key] = tuple;\n    }\n    tuple[0]++;\n    return tuple;\n  }\n\n  afterOp(key) {\n    const tuple = this.queue[key];\n    if (!tuple) {\n      return;\n    }\n    tuple[0]--;\n    if (tuple[0] <= 0) {\n      delete this.queue[key];\n      return;\n    }\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f6d38854acbcce6d7ddc366bb922b807ec6ec587"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_ly7uheg6y=function(){return actualCoverage;};}return actualCoverage;}cov_ly7uheg6y();cov_ly7uheg6y().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_ly7uheg6y().s[1]++;exports.KeyPromiseQueue=void 0;// KeyPromiseQueue is a simple promise queue
// used to queue operations per key basis.
// Once the tail promise in the key-queue fulfills,
// the chain on that key will be cleared.
class KeyPromiseQueue{constructor(){cov_ly7uheg6y().f[0]++;cov_ly7uheg6y().s[2]++;this.queue={};}enqueue(key,operation){cov_ly7uheg6y().f[1]++;const tuple=(cov_ly7uheg6y().s[3]++,this.beforeOp(key));const toAwait=(cov_ly7uheg6y().s[4]++,tuple[1]);const nextOperation=(cov_ly7uheg6y().s[5]++,toAwait.then(operation));const wrappedOperation=(cov_ly7uheg6y().s[6]++,nextOperation.then(result=>{cov_ly7uheg6y().f[2]++;cov_ly7uheg6y().s[7]++;this.afterOp(key);cov_ly7uheg6y().s[8]++;return result;}));cov_ly7uheg6y().s[9]++;tuple[1]=wrappedOperation;cov_ly7uheg6y().s[10]++;return wrappedOperation;}beforeOp(key){cov_ly7uheg6y().f[3]++;let tuple=(cov_ly7uheg6y().s[11]++,this.queue[key]);cov_ly7uheg6y().s[12]++;if(!tuple){cov_ly7uheg6y().b[0][0]++;cov_ly7uheg6y().s[13]++;tuple=[0,Promise.resolve()];cov_ly7uheg6y().s[14]++;this.queue[key]=tuple;}else{cov_ly7uheg6y().b[0][1]++;}cov_ly7uheg6y().s[15]++;tuple[0]++;cov_ly7uheg6y().s[16]++;return tuple;}afterOp(key){cov_ly7uheg6y().f[4]++;const tuple=(cov_ly7uheg6y().s[17]++,this.queue[key]);cov_ly7uheg6y().s[18]++;if(!tuple){cov_ly7uheg6y().b[1][0]++;cov_ly7uheg6y().s[19]++;return;}else{cov_ly7uheg6y().b[1][1]++;}cov_ly7uheg6y().s[20]++;tuple[0]--;cov_ly7uheg6y().s[21]++;if(tuple[0]<=0){cov_ly7uheg6y().b[2][0]++;cov_ly7uheg6y().s[22]++;delete this.queue[key];cov_ly7uheg6y().s[23]++;return;}else{cov_ly7uheg6y().b[2][1]++;}}}cov_ly7uheg6y().s[24]++;exports.KeyPromiseQueue=KeyPromiseQueue;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9LZXlQcm9taXNlUXVldWUuanMiXSwibmFtZXMiOlsiS2V5UHJvbWlzZVF1ZXVlIiwiY29uc3RydWN0b3IiLCJxdWV1ZSIsImVucXVldWUiLCJrZXkiLCJvcGVyYXRpb24iLCJ0dXBsZSIsImJlZm9yZU9wIiwidG9Bd2FpdCIsIm5leHRPcGVyYXRpb24iLCJ0aGVuIiwid3JhcHBlZE9wZXJhdGlvbiIsInJlc3VsdCIsImFmdGVyT3AiLCJQcm9taXNlIiwicmVzb2x2ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsZUFBTixDQUFzQjtBQUMzQkMsRUFBQUEsV0FBVyxHQUFHO0FBQ1osU0FBS0MsS0FBTCxHQUFhLEVBQWI7QUFDRDs7QUFFREMsRUFBQUEsT0FBTyxDQUFDQyxHQUFELEVBQU1DLFNBQU4sRUFBaUI7QUFDdEIsVUFBTUMsS0FBSyxHQUFHLEtBQUtDLFFBQUwsQ0FBY0gsR0FBZCxDQUFkO0FBQ0EsVUFBTUksT0FBTyxHQUFHRixLQUFLLENBQUMsQ0FBRCxDQUFyQjtBQUNBLFVBQU1HLGFBQWEsR0FBR0QsT0FBTyxDQUFDRSxJQUFSLENBQWFMLFNBQWIsQ0FBdEI7QUFDQSxVQUFNTSxnQkFBZ0IsR0FBR0YsYUFBYSxDQUFDQyxJQUFkLENBQW1CRSxNQUFNLElBQUk7QUFDcEQsV0FBS0MsT0FBTCxDQUFhVCxHQUFiO0FBQ0EsYUFBT1EsTUFBUDtBQUNELEtBSHdCLENBQXpCO0FBSUFOLElBQUFBLEtBQUssQ0FBQyxDQUFELENBQUwsR0FBV0ssZ0JBQVg7QUFDQSxXQUFPQSxnQkFBUDtBQUNEOztBQUVESixFQUFBQSxRQUFRLENBQUNILEdBQUQsRUFBTTtBQUNaLFFBQUlFLEtBQUssR0FBRyxLQUFLSixLQUFMLENBQVdFLEdBQVgsQ0FBWjs7QUFDQSxRQUFJLENBQUNFLEtBQUwsRUFBWTtBQUNWQSxNQUFBQSxLQUFLLEdBQUcsQ0FBQyxDQUFELEVBQUlRLE9BQU8sQ0FBQ0MsT0FBUixFQUFKLENBQVI7QUFDQSxXQUFLYixLQUFMLENBQVdFLEdBQVgsSUFBa0JFLEtBQWxCO0FBQ0Q7O0FBQ0RBLElBQUFBLEtBQUssQ0FBQyxDQUFELENBQUw7QUFDQSxXQUFPQSxLQUFQO0FBQ0Q7O0FBRURPLEVBQUFBLE9BQU8sQ0FBQ1QsR0FBRCxFQUFNO0FBQ1gsVUFBTUUsS0FBSyxHQUFHLEtBQUtKLEtBQUwsQ0FBV0UsR0FBWCxDQUFkOztBQUNBLFFBQUksQ0FBQ0UsS0FBTCxFQUFZO0FBQ1Y7QUFDRDs7QUFDREEsSUFBQUEsS0FBSyxDQUFDLENBQUQsQ0FBTDs7QUFDQSxRQUFJQSxLQUFLLENBQUMsQ0FBRCxDQUFMLElBQVksQ0FBaEIsRUFBbUI7QUFDakIsYUFBTyxLQUFLSixLQUFMLENBQVdFLEdBQVgsQ0FBUDtBQUNBO0FBQ0Q7QUFDRjs7QUFyQzBCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gS2V5UHJvbWlzZVF1ZXVlIGlzIGEgc2ltcGxlIHByb21pc2UgcXVldWVcbi8vIHVzZWQgdG8gcXVldWUgb3BlcmF0aW9ucyBwZXIga2V5IGJhc2lzLlxuLy8gT25jZSB0aGUgdGFpbCBwcm9taXNlIGluIHRoZSBrZXktcXVldWUgZnVsZmlsbHMsXG4vLyB0aGUgY2hhaW4gb24gdGhhdCBrZXkgd2lsbCBiZSBjbGVhcmVkLlxuZXhwb3J0IGNsYXNzIEtleVByb21pc2VRdWV1ZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucXVldWUgPSB7fTtcbiAgfVxuXG4gIGVucXVldWUoa2V5LCBvcGVyYXRpb24pIHtcbiAgICBjb25zdCB0dXBsZSA9IHRoaXMuYmVmb3JlT3Aoa2V5KTtcbiAgICBjb25zdCB0b0F3YWl0ID0gdHVwbGVbMV07XG4gICAgY29uc3QgbmV4dE9wZXJhdGlvbiA9IHRvQXdhaXQudGhlbihvcGVyYXRpb24pO1xuICAgIGNvbnN0IHdyYXBwZWRPcGVyYXRpb24gPSBuZXh0T3BlcmF0aW9uLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgIHRoaXMuYWZ0ZXJPcChrZXkpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbiAgICB0dXBsZVsxXSA9IHdyYXBwZWRPcGVyYXRpb247XG4gICAgcmV0dXJuIHdyYXBwZWRPcGVyYXRpb247XG4gIH1cblxuICBiZWZvcmVPcChrZXkpIHtcbiAgICBsZXQgdHVwbGUgPSB0aGlzLnF1ZXVlW2tleV07XG4gICAgaWYgKCF0dXBsZSkge1xuICAgICAgdHVwbGUgPSBbMCwgUHJvbWlzZS5yZXNvbHZlKCldO1xuICAgICAgdGhpcy5xdWV1ZVtrZXldID0gdHVwbGU7XG4gICAgfVxuICAgIHR1cGxlWzBdKys7XG4gICAgcmV0dXJuIHR1cGxlO1xuICB9XG5cbiAgYWZ0ZXJPcChrZXkpIHtcbiAgICBjb25zdCB0dXBsZSA9IHRoaXMucXVldWVba2V5XTtcbiAgICBpZiAoIXR1cGxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHR1cGxlWzBdLS07XG4gICAgaWYgKHR1cGxlWzBdIDw9IDApIHtcbiAgICAgIGRlbGV0ZSB0aGlzLnF1ZXVlW2tleV07XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG59XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9LZXlQcm9taXNlUXVldWUuanMiXSwibmFtZXMiOlsiY29uc3RydWN0b3IiLCJlbnF1ZXVlIiwidHVwbGUiLCJ0b0F3YWl0IiwibmV4dE9wZXJhdGlvbiIsIndyYXBwZWRPcGVyYXRpb24iLCJyZXN1bHQiLCJiZWZvcmVPcCIsIlByb21pc2UiLCJhZnRlck9wIl0sIm1hcHBpbmdzIjoiOytOQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sS0FBQSxDQUFBLGVBQXNCLENBQzNCQSxXQUFXLEVBQUcsK0NBQ1osS0FBQSxLQUFBLENBQUEsRUFBQSxDQUNELENBRURDLE9BQU8sQ0FBQSxHQUFBLENBQUEsU0FBQSxDQUFpQix3QkFDdEIsS0FBTUMsQ0FBQUEsS0FBSyx5QkFBRyxLQUFBLFFBQUEsQ0FBZCxHQUFjLENBQUgsQ0FBWCxDQUNBLEtBQU1DLENBQUFBLE9BQU8seUJBQUdELEtBQUssQ0FBckIsQ0FBcUIsQ0FBUixDQUFiLENBQ0EsS0FBTUUsQ0FBQUEsYUFBYSx5QkFBR0QsT0FBTyxDQUFQQSxJQUFBQSxDQUF0QixTQUFzQkEsQ0FBSCxDQUFuQixDQUNBLEtBQU1FLENBQUFBLGdCQUFnQix5QkFBRyxhQUFhLENBQWIsSUFBQSxDQUFtQkMsTUFBTSxFQUFJLCtDQUNwRCxLQUFBLE9BQUEsQ0FBQSxHQUFBLEVBRG9ELHVCQUVwRCxNQUFBLENBQUEsTUFBQSxDQUZGLENBQXlCLENBQUgsQ0FBdEIsQ0FKc0IsdUJBUXRCSixLQUFLLENBQUxBLENBQUssQ0FBTEEsQ0FBQUEsZ0JBQUFBLENBUnNCLHdCQVN0QixNQUFBLENBQUEsZ0JBQUEsQ0FDRCxDQUVESyxRQUFRLENBQUEsR0FBQSxDQUFNLHdCQUNaLEdBQUlMLENBQUFBLEtBQUssMEJBQUcsS0FBQSxLQUFBLENBQVosR0FBWSxDQUFILENBQVQsQ0FEWSx3QkFFWixHQUFJLENBQUosS0FBQSxDQUFZLG1EQUNWQSxLQUFLLENBQUcsQ0FBQSxDQUFBLENBQUlNLE9BQU8sQ0FBbkJOLE9BQVlNLEVBQUosQ0FBUk4sQ0FEVSx3QkFFVixLQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsS0FBQSxDQUNELENBSEQsZ0NBRlksd0JBTVpBLEtBQUssQ0FBTEEsQ0FBSyxDQUFMQSxHQU5ZLHdCQU9aLE1BQUEsQ0FBQSxLQUFBLENBQ0QsQ0FFRE8sT0FBTyxDQUFBLEdBQUEsQ0FBTSx3QkFDWCxLQUFNUCxDQUFBQSxLQUFLLDBCQUFHLEtBQUEsS0FBQSxDQUFkLEdBQWMsQ0FBSCxDQUFYLENBRFcsd0JBRVgsR0FBSSxDQUFKLEtBQUEsQ0FBWSxtREFDVixPQUNELENBRkQsZ0NBRlcsd0JBS1hBLEtBQUssQ0FBTEEsQ0FBSyxDQUFMQSxHQUxXLHdCQU1YLEdBQUlBLEtBQUssQ0FBTEEsQ0FBSyxDQUFMQSxFQUFKLENBQUEsQ0FBbUIsbURBQ2pCLE1BQU8sTUFBQSxLQUFBLENBQVAsR0FBTyxDQUFQLENBRGlCLHdCQUVqQixPQUNELENBSEQsZ0NBSUQsQ0FyQzBCLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBLZXlQcm9taXNlUXVldWUgaXMgYSBzaW1wbGUgcHJvbWlzZSBxdWV1ZVxuLy8gdXNlZCB0byBxdWV1ZSBvcGVyYXRpb25zIHBlciBrZXkgYmFzaXMuXG4vLyBPbmNlIHRoZSB0YWlsIHByb21pc2UgaW4gdGhlIGtleS1xdWV1ZSBmdWxmaWxscyxcbi8vIHRoZSBjaGFpbiBvbiB0aGF0IGtleSB3aWxsIGJlIGNsZWFyZWQuXG5leHBvcnQgY2xhc3MgS2V5UHJvbWlzZVF1ZXVlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5xdWV1ZSA9IHt9O1xuICB9XG5cbiAgZW5xdWV1ZShrZXksIG9wZXJhdGlvbikge1xuICAgIGNvbnN0IHR1cGxlID0gdGhpcy5iZWZvcmVPcChrZXkpO1xuICAgIGNvbnN0IHRvQXdhaXQgPSB0dXBsZVsxXTtcbiAgICBjb25zdCBuZXh0T3BlcmF0aW9uID0gdG9Bd2FpdC50aGVuKG9wZXJhdGlvbik7XG4gICAgY29uc3Qgd3JhcHBlZE9wZXJhdGlvbiA9IG5leHRPcGVyYXRpb24udGhlbihyZXN1bHQgPT4ge1xuICAgICAgdGhpcy5hZnRlck9wKGtleSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuICAgIHR1cGxlWzFdID0gd3JhcHBlZE9wZXJhdGlvbjtcbiAgICByZXR1cm4gd3JhcHBlZE9wZXJhdGlvbjtcbiAgfVxuXG4gIGJlZm9yZU9wKGtleSkge1xuICAgIGxldCB0dXBsZSA9IHRoaXMucXVldWVba2V5XTtcbiAgICBpZiAoIXR1cGxlKSB7XG4gICAgICB0dXBsZSA9IFswLCBQcm9taXNlLnJlc29sdmUoKV07XG4gICAgICB0aGlzLnF1ZXVlW2tleV0gPSB0dXBsZTtcbiAgICB9XG4gICAgdHVwbGVbMF0rKztcbiAgICByZXR1cm4gdHVwbGU7XG4gIH1cblxuICBhZnRlck9wKGtleSkge1xuICAgIGNvbnN0IHR1cGxlID0gdGhpcy5xdWV1ZVtrZXldO1xuICAgIGlmICghdHVwbGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHVwbGVbMF0tLTtcbiAgICBpZiAodHVwbGVbMF0gPD0gMCkge1xuICAgICAgZGVsZXRlIHRoaXMucXVldWVba2V5XTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbn1cbiJdfQ==