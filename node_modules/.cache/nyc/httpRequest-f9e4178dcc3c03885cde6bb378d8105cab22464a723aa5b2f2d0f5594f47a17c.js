"use strict";function cov_1b7kmgixe9(){var path="/parse-server/lib/cloud-code/httpRequest.js";var hash="9dd2919be9bf42e19dada3dff230586ab527fd61";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/cloud-code/httpRequest.js",statementMap:{"0":{start:{line:3,column:20},end:{line:3,column:69}},"1":{start:{line:5,column:19},end:{line:5,column:65}},"2":{start:{line:7,column:14},end:{line:7,column:58}},"3":{start:{line:9,column:23},end:{line:9,column:50}},"4":{start:{line:11,column:11},end:{line:11,column:25}},"5":{start:{line:13,column:39},end:{line:13,column:93}},"6":{start:{line:15,column:16},end:{line:18,column:1}},"7":{start:{line:21,column:2},end:{line:37,column:4}},"8":{start:{line:22,column:19},end:{line:22,column:21}},"9":{start:{line:23,column:4},end:{line:25,column:7}},"10":{start:{line:24,column:6},end:{line:24,column:25}},"11":{start:{line:26,column:4},end:{line:35,column:7}},"12":{start:{line:27,column:19},end:{line:27,column:40}},"13":{start:{line:28,column:27},end:{line:28,column:68}},"14":{start:{line:30,column:6},end:{line:34,column:7}},"15":{start:{line:31,column:8},end:{line:31,column:36}},"16":{start:{line:33,column:8},end:{line:33,column:37}},"17":{start:{line:36,column:4},end:{line:36,column:33}},"18":{start:{line:40,column:19},end:{line:80,column:1}},"19":{start:{line:44,column:2},end:{line:49,column:3}},"20":{start:{line:45,column:4},end:{line:48,column:6}},"21":{start:{line:51,column:24},end:{line:53,column:4}},"22":{start:{line:52,column:4},end:{line:52,column:46}},"23":{start:{line:55,column:2},end:{line:74,column:3}},"24":{start:{line:58,column:4},end:{line:58,column:48}},"25":{start:{line:59,column:4},end:{line:59,column:66}},"26":{start:{line:67,column:22},end:{line:67,column:40}},"27":{start:{line:69,column:4},end:{line:73,column:5}},"28":{start:{line:70,column:6},end:{line:70,column:34}},"29":{start:{line:71,column:11},end:{line:73,column:5}},"30":{start:{line:72,column:6},end:{line:72,column:50}},"31":{start:{line:76,column:2},end:{line:79,column:4}},"32":{start:{line:108,column:0},end:{line:177,column:2}},"33":{start:{line:111,column:2},end:{line:115,column:3}},"34":{start:{line:112,column:4},end:{line:112,column:39}},"35":{start:{line:114,column:4},end:{line:114,column:29}},"36":{start:{line:117,column:2},end:{line:117,column:56}},"37":{start:{line:119,column:2},end:{line:123,column:3}},"38":{start:{line:120,column:4},end:{line:120,column:32}},"39":{start:{line:121,column:9},end:{line:123,column:3}},"40":{start:{line:122,column:4},end:{line:122,column:60}},"41":{start:{line:125,column:17},end:{line:125,column:38}},"42":{start:{line:127,column:2},end:{line:129,column:3}},"43":{start:{line:128,column:4},end:{line:128,column:66}},"44":{start:{line:131,column:25},end:{line:139,column:3}},"45":{start:{line:141,column:2},end:{line:147,column:3}},"46":{start:{line:142,column:4},end:{line:146,column:7}},"47":{start:{line:143,column:6},end:{line:145,column:7}},"48":{start:{line:144,column:8},end:{line:144,column:43}},"49":{start:{line:149,column:2},end:{line:151,column:3}},"50":{start:{line:150,column:4},end:{line:150,column:86}},"51":{start:{line:153,column:2},end:{line:155,column:3}},"52":{start:{line:154,column:4},end:{line:154,column:35}},"53":{start:{line:157,column:2},end:{line:159,column:3}},"54":{start:{line:158,column:4},end:{line:158,column:76}},"55":{start:{line:161,column:2},end:{line:163,column:3}},"56":{start:{line:162,column:4},end:{line:162,column:41}},"57":{start:{line:165,column:2},end:{line:176,column:5}},"58":{start:{line:166,column:16},end:{line:166,column:86}},"59":{start:{line:168,column:4},end:{line:170,column:5}},"60":{start:{line:169,column:6},end:{line:169,column:30}},"61":{start:{line:172,column:4},end:{line:174,column:7}},"62":{start:{line:173,column:6},end:{line:173,column:20}},"63":{start:{line:175,column:4},end:{line:175,column:14}},"64":{start:{line:191,column:0},end:{line:191,column:39}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:13,column:9},end:{line:13,column:31}},loc:{start:{line:13,column:37},end:{line:13,column:95}},line:13},"1":{name:"makeCallback",decl:{start:{line:20,column:9},end:{line:20,column:21}},loc:{start:{line:20,column:39},end:{line:38,column:1}},line:20},"2":{name:"(anonymous_2)",decl:{start:{line:21,column:9},end:{line:21,column:10}},loc:{start:{line:21,column:29},end:{line:37,column:3}},line:21},"3":{name:"(anonymous_3)",decl:{start:{line:23,column:24},end:{line:23,column:25}},loc:{start:{line:23,column:33},end:{line:25,column:5}},line:23},"4":{name:"(anonymous_4)",decl:{start:{line:26,column:23},end:{line:26,column:24}},loc:{start:{line:26,column:29},end:{line:35,column:5}},line:26},"5":{name:"(anonymous_5)",decl:{start:{line:40,column:19},end:{line:40,column:20}},loc:{start:{line:43,column:3},end:{line:80,column:1}},line:43},"6":{name:"(anonymous_6)",decl:{start:{line:51,column:52},end:{line:51,column:53}},loc:{start:{line:51,column:59},end:{line:53,column:3}},line:51},"7":{name:"httpRequest",decl:{start:{line:108,column:26},end:{line:108,column:37}},loc:{start:{line:108,column:47},end:{line:177,column:1}},line:108},"8":{name:"(anonymous_8)",decl:{start:{line:142,column:48},end:{line:142,column:49}},loc:{start:{line:142,column:55},end:{line:146,column:5}},line:142},"9":{name:"(anonymous_9)",decl:{start:{line:165,column:21},end:{line:165,column:22}},loc:{start:{line:165,column:42},end:{line:176,column:3}},line:165},"10":{name:"(anonymous_10)",decl:{start:{line:172,column:20},end:{line:172,column:21}},loc:{start:{line:172,column:29},end:{line:174,column:5}},line:172}},branchMap:{"0":{loc:{start:{line:13,column:46},end:{line:13,column:92}},type:"cond-expr",locations:[{start:{line:13,column:70},end:{line:13,column:73}},{start:{line:13,column:76},end:{line:13,column:92}}],line:13},"1":{loc:{start:{line:13,column:46},end:{line:13,column:67}},type:"binary-expr",locations:[{start:{line:13,column:46},end:{line:13,column:49}},{start:{line:13,column:53},end:{line:13,column:67}}],line:13},"2":{loc:{start:{line:30,column:6},end:{line:34,column:7}},type:"if",locations:[{start:{line:30,column:6},end:{line:34,column:7}},{start:{line:30,column:6},end:{line:34,column:7}}],line:30},"3":{loc:{start:{line:30,column:10},end:{line:30,column:65}},type:"binary-expr",locations:[{start:{line:30,column:10},end:{line:30,column:35}},{start:{line:30,column:39},end:{line:30,column:65}}],line:30},"4":{loc:{start:{line:42,column:2},end:{line:42,column:14}},type:"default-arg",locations:[{start:{line:42,column:12},end:{line:42,column:14}}],line:42},"5":{loc:{start:{line:44,column:2},end:{line:49,column:3}},type:"if",locations:[{start:{line:44,column:2},end:{line:49,column:3}},{start:{line:44,column:2},end:{line:49,column:3}}],line:44},"6":{loc:{start:{line:55,column:2},end:{line:74,column:3}},type:"if",locations:[{start:{line:55,column:2},end:{line:74,column:3}},{start:{line:55,column:2},end:{line:74,column:3}}],line:55},"7":{loc:{start:{line:69,column:4},end:{line:73,column:5}},type:"if",locations:[{start:{line:69,column:4},end:{line:73,column:5}},{start:{line:69,column:4},end:{line:73,column:5}}],line:69},"8":{loc:{start:{line:71,column:11},end:{line:73,column:5}},type:"if",locations:[{start:{line:71,column:11},end:{line:73,column:5}},{start:{line:71,column:11},end:{line:73,column:5}}],line:71},"9":{loc:{start:{line:119,column:2},end:{line:123,column:3}},type:"if",locations:[{start:{line:119,column:2},end:{line:123,column:3}},{start:{line:119,column:2},end:{line:123,column:3}}],line:119},"10":{loc:{start:{line:121,column:9},end:{line:123,column:3}},type:"if",locations:[{start:{line:121,column:9},end:{line:123,column:3}},{start:{line:121,column:9},end:{line:123,column:3}}],line:121},"11":{loc:{start:{line:127,column:2},end:{line:129,column:3}},type:"if",locations:[{start:{line:127,column:2},end:{line:129,column:3}},{start:{line:127,column:2},end:{line:129,column:3}}],line:127},"12":{loc:{start:{line:141,column:2},end:{line:147,column:3}},type:"if",locations:[{start:{line:141,column:2},end:{line:147,column:3}},{start:{line:141,column:2},end:{line:147,column:3}}],line:141},"13":{loc:{start:{line:143,column:6},end:{line:145,column:7}},type:"if",locations:[{start:{line:143,column:6},end:{line:145,column:7}},{start:{line:143,column:6},end:{line:145,column:7}}],line:143},"14":{loc:{start:{line:149,column:2},end:{line:151,column:3}},type:"if",locations:[{start:{line:149,column:2},end:{line:151,column:3}},{start:{line:149,column:2},end:{line:151,column:3}}],line:149},"15":{loc:{start:{line:153,column:2},end:{line:155,column:3}},type:"if",locations:[{start:{line:153,column:2},end:{line:155,column:3}},{start:{line:153,column:2},end:{line:155,column:3}}],line:153},"16":{loc:{start:{line:157,column:2},end:{line:159,column:3}},type:"if",locations:[{start:{line:157,column:2},end:{line:159,column:3}},{start:{line:157,column:2},end:{line:159,column:3}}],line:157},"17":{loc:{start:{line:161,column:2},end:{line:163,column:3}},type:"if",locations:[{start:{line:161,column:2},end:{line:163,column:3}},{start:{line:161,column:2},end:{line:163,column:3}}],line:161},"18":{loc:{start:{line:168,column:4},end:{line:170,column:5}},type:"if",locations:[{start:{line:168,column:4},end:{line:170,column:5}},{start:{line:168,column:4},end:{line:170,column:5}}],line:168}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0]},inputSourceMap:{version:3,sources:["../../src/cloud-code/httpRequest.js"],names:["clients","http","https","makeCallback","resolve","reject","response","chunks","on","chunk","push","body","Buffer","concat","httpResponse","HTTPResponse","status","encodeBody","headers","contentTypeKeys","Object","keys","filter","key","match","length","querystring","stringify","log","error","contentType","JSON","module","exports","httpRequest","options","url","e","Promise","assign","params","qs","parse","client","protocol","requestOptions","method","port","Number","path","pathname","hostname","encoding","followRedirects","forEach","search","query","auth","agent","req","request","write","end"],mappings:"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",sourcesContent:["import HTTPResponse from './HTTPResponse';\nimport querystring from 'querystring';\nimport log from '../logger';\nimport { http, https } from 'follow-redirects';\nimport { parse } from 'url';\n\nconst clients = {\n  'http:': http,\n  'https:': https,\n};\n\nfunction makeCallback(resolve, reject) {\n  return function (response) {\n    const chunks = [];\n    response.on('data', chunk => {\n      chunks.push(chunk);\n    });\n    response.on('end', () => {\n      const body = Buffer.concat(chunks);\n      const httpResponse = new HTTPResponse(response, body);\n\n      // Consider <200 && >= 400 as errors\n      if (httpResponse.status < 200 || httpResponse.status >= 400) {\n        return reject(httpResponse);\n      } else {\n        return resolve(httpResponse);\n      }\n    });\n    response.on('error', reject);\n  };\n}\n\nconst encodeBody = function ({ body, headers = {} }) {\n  if (typeof body !== 'object') {\n    return { body, headers };\n  }\n  var contentTypeKeys = Object.keys(headers).filter(key => {\n    return key.match(/content-type/i) != null;\n  });\n\n  if (contentTypeKeys.length == 0) {\n    // no content type\n    //  As per https://parse.com/docs/cloudcode/guide#cloud-code-advanced-sending-a-post-request the default encoding is supposedly x-www-form-urlencoded\n\n    body = querystring.stringify(body);\n    headers['Content-Type'] = 'application/x-www-form-urlencoded';\n  } else {\n    /* istanbul ignore next */\n    if (contentTypeKeys.length > 1) {\n      log.error('Parse.Cloud.httpRequest', 'multiple content-type headers are set.');\n    }\n    // There maybe many, we'll just take the 1st one\n    var contentType = contentTypeKeys[0];\n    if (headers[contentType].match(/application\\/json/i)) {\n      body = JSON.stringify(body);\n    } else if (headers[contentType].match(/application\\/x-www-form-urlencoded/i)) {\n      body = querystring.stringify(body);\n    }\n  }\n  return { body, headers };\n};\n\n/**\n * Makes an HTTP Request.\n *\n * **Available in Cloud Code only.**\n *\n * By default, Parse.Cloud.httpRequest does not follow redirects caused by HTTP 3xx response codes. You can use the followRedirects option in the {@link Parse.Cloud.HTTPOptions} object to change this behavior.\n *\n * Sample request:\n * ```\n * Parse.Cloud.httpRequest({\n *   url: 'http://www.parse.com/'\n * }).then(function(httpResponse) {\n *   // success\n *   console.log(httpResponse.text);\n * },function(httpResponse) {\n *   // error\n *   console.error('Request failed with response code ' + httpResponse.status);\n * });\n * ```\n *\n * @method httpRequest\n * @name Parse.Cloud.httpRequest\n * @param {Parse.Cloud.HTTPOptions} options The Parse.Cloud.HTTPOptions object that makes the request.\n * @return {Promise<Parse.Cloud.HTTPResponse>} A promise that will be resolved with a {@link Parse.Cloud.HTTPResponse} object when the request completes.\n */\nmodule.exports = function httpRequest(options) {\n  let url;\n  try {\n    url = parse(options.url);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n  options = Object.assign(options, encodeBody(options));\n  // support params options\n  if (typeof options.params === 'object') {\n    options.qs = options.params;\n  } else if (typeof options.params === 'string') {\n    options.qs = querystring.parse(options.params);\n  }\n  const client = clients[url.protocol];\n  if (!client) {\n    return Promise.reject(`Unsupported protocol ${url.protocol}`);\n  }\n  const requestOptions = {\n    method: options.method,\n    port: Number(url.port),\n    path: url.pathname,\n    hostname: url.hostname,\n    headers: options.headers,\n    encoding: null,\n    followRedirects: options.followRedirects === true,\n  };\n  if (requestOptions.headers) {\n    Object.keys(requestOptions.headers).forEach(key => {\n      if (typeof requestOptions.headers[key] === 'undefined') {\n        delete requestOptions.headers[key];\n      }\n    });\n  }\n  if (url.search) {\n    options.qs = Object.assign({}, options.qs, querystring.parse(url.query));\n  }\n  if (url.auth) {\n    requestOptions.auth = url.auth;\n  }\n  if (options.qs) {\n    requestOptions.path += `?${querystring.stringify(options.qs)}`;\n  }\n  if (options.agent) {\n    requestOptions.agent = options.agent;\n  }\n  return new Promise((resolve, reject) => {\n    const req = client.request(requestOptions, makeCallback(resolve, reject, options));\n    if (options.body) {\n      req.write(options.body);\n    }\n    req.on('error', error => {\n      reject(error);\n    });\n    req.end();\n  });\n};\n\n/**\n * @typedef Parse.Cloud.HTTPOptions\n * @property {String|Object} body The body of the request. If it is a JSON object, then the Content-Type set in the headers must be application/x-www-form-urlencoded or application/json. You can also set this to a {@link Buffer} object to send raw bytes. If you use a Buffer, you should also set the Content-Type header explicitly to describe what these bytes represent.\n * @property {function} error The function that is called when the request fails. It will be passed a Parse.Cloud.HTTPResponse object.\n * @property {Boolean} followRedirects Whether to follow redirects caused by HTTP 3xx responses. Defaults to false.\n * @property {Object} headers The headers for the request.\n * @property {String} method The method of the request. GET, POST, PUT, DELETE, HEAD, and OPTIONS are supported. Will default to GET if not specified.\n * @property {String|Object} params The query portion of the url. You can pass a JSON object of key value pairs like params: {q : 'Sean Plott'} or a raw string like params:q=Sean Plott.\n * @property {function} success The function that is called when the request successfully completes. It will be passed a Parse.Cloud.HTTPResponse object.\n * @property {string} url The url to send the request to.\n */\n\nmodule.exports.encodeBody = encodeBody;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"9dd2919be9bf42e19dada3dff230586ab527fd61"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1b7kmgixe9=function(){return actualCoverage;};}return actualCoverage;}cov_1b7kmgixe9();var _HTTPResponse=(cov_1b7kmgixe9().s[0]++,_interopRequireDefault(require("./HTTPResponse")));var _querystring=(cov_1b7kmgixe9().s[1]++,_interopRequireDefault(require("querystring")));var _logger=(cov_1b7kmgixe9().s[2]++,_interopRequireDefault(require("../logger")));var _followRedirects=(cov_1b7kmgixe9().s[3]++,require("follow-redirects"));var _url=(cov_1b7kmgixe9().s[4]++,require("url"));function _interopRequireDefault(obj){cov_1b7kmgixe9().f[0]++;cov_1b7kmgixe9().s[5]++;return(cov_1b7kmgixe9().b[1][0]++,obj)&&(cov_1b7kmgixe9().b[1][1]++,obj.__esModule)?(cov_1b7kmgixe9().b[0][0]++,obj):(cov_1b7kmgixe9().b[0][1]++,{default:obj});}const clients=(cov_1b7kmgixe9().s[6]++,{'http:':_followRedirects.http,'https:':_followRedirects.https});function makeCallback(resolve,reject){cov_1b7kmgixe9().f[1]++;cov_1b7kmgixe9().s[7]++;return function(response){cov_1b7kmgixe9().f[2]++;const chunks=(cov_1b7kmgixe9().s[8]++,[]);cov_1b7kmgixe9().s[9]++;response.on('data',chunk=>{cov_1b7kmgixe9().f[3]++;cov_1b7kmgixe9().s[10]++;chunks.push(chunk);});cov_1b7kmgixe9().s[11]++;response.on('end',()=>{cov_1b7kmgixe9().f[4]++;const body=(cov_1b7kmgixe9().s[12]++,Buffer.concat(chunks));const httpResponse=(cov_1b7kmgixe9().s[13]++,new _HTTPResponse.default(response,body));// Consider <200 && >= 400 as errors
cov_1b7kmgixe9().s[14]++;if((cov_1b7kmgixe9().b[3][0]++,httpResponse.status<200)||(cov_1b7kmgixe9().b[3][1]++,httpResponse.status>=400)){cov_1b7kmgixe9().b[2][0]++;cov_1b7kmgixe9().s[15]++;return reject(httpResponse);}else{cov_1b7kmgixe9().b[2][1]++;cov_1b7kmgixe9().s[16]++;return resolve(httpResponse);}});cov_1b7kmgixe9().s[17]++;response.on('error',reject);};}cov_1b7kmgixe9().s[18]++;const encodeBody=function({body,headers=(cov_1b7kmgixe9().b[4][0]++,{})}){cov_1b7kmgixe9().f[5]++;cov_1b7kmgixe9().s[19]++;if(typeof body!=='object'){cov_1b7kmgixe9().b[5][0]++;cov_1b7kmgixe9().s[20]++;return{body,headers};}else{cov_1b7kmgixe9().b[5][1]++;}var contentTypeKeys=(cov_1b7kmgixe9().s[21]++,Object.keys(headers).filter(key=>{cov_1b7kmgixe9().f[6]++;cov_1b7kmgixe9().s[22]++;return key.match(/content-type/i)!=null;}));cov_1b7kmgixe9().s[23]++;if(contentTypeKeys.length==0){cov_1b7kmgixe9().b[6][0]++;cov_1b7kmgixe9().s[24]++;// no content type
//  As per https://parse.com/docs/cloudcode/guide#cloud-code-advanced-sending-a-post-request the default encoding is supposedly x-www-form-urlencoded
body=_querystring.default.stringify(body);cov_1b7kmgixe9().s[25]++;headers['Content-Type']='application/x-www-form-urlencoded';}else{cov_1b7kmgixe9().b[6][1]++;/* istanbul ignore next */if(contentTypeKeys.length>1){_logger.default.error('Parse.Cloud.httpRequest','multiple content-type headers are set.');}// There maybe many, we'll just take the 1st one
var contentType=(cov_1b7kmgixe9().s[26]++,contentTypeKeys[0]);cov_1b7kmgixe9().s[27]++;if(headers[contentType].match(/application\/json/i)){cov_1b7kmgixe9().b[7][0]++;cov_1b7kmgixe9().s[28]++;body=JSON.stringify(body);}else{cov_1b7kmgixe9().b[7][1]++;cov_1b7kmgixe9().s[29]++;if(headers[contentType].match(/application\/x-www-form-urlencoded/i)){cov_1b7kmgixe9().b[8][0]++;cov_1b7kmgixe9().s[30]++;body=_querystring.default.stringify(body);}else{cov_1b7kmgixe9().b[8][1]++;}}}cov_1b7kmgixe9().s[31]++;return{body,headers};};/**
 * Makes an HTTP Request.
 *
 * **Available in Cloud Code only.**
 *
 * By default, Parse.Cloud.httpRequest does not follow redirects caused by HTTP 3xx response codes. You can use the followRedirects option in the {@link Parse.Cloud.HTTPOptions} object to change this behavior.
 *
 * Sample request:
 * ```
 * Parse.Cloud.httpRequest({
 *   url: 'http://www.parse.com/'
 * }).then(function(httpResponse) {
 *   // success
 *   console.log(httpResponse.text);
 * },function(httpResponse) {
 *   // error
 *   console.error('Request failed with response code ' + httpResponse.status);
 * });
 * ```
 *
 * @method httpRequest
 * @name Parse.Cloud.httpRequest
 * @param {Parse.Cloud.HTTPOptions} options The Parse.Cloud.HTTPOptions object that makes the request.
 * @return {Promise<Parse.Cloud.HTTPResponse>} A promise that will be resolved with a {@link Parse.Cloud.HTTPResponse} object when the request completes.
 */cov_1b7kmgixe9().s[32]++;module.exports=function httpRequest(options){cov_1b7kmgixe9().f[7]++;let url;cov_1b7kmgixe9().s[33]++;try{cov_1b7kmgixe9().s[34]++;url=(0,_url.parse)(options.url);}catch(e){cov_1b7kmgixe9().s[35]++;return Promise.reject(e);}cov_1b7kmgixe9().s[36]++;options=Object.assign(options,encodeBody(options));// support params options
cov_1b7kmgixe9().s[37]++;if(typeof options.params==='object'){cov_1b7kmgixe9().b[9][0]++;cov_1b7kmgixe9().s[38]++;options.qs=options.params;}else{cov_1b7kmgixe9().b[9][1]++;cov_1b7kmgixe9().s[39]++;if(typeof options.params==='string'){cov_1b7kmgixe9().b[10][0]++;cov_1b7kmgixe9().s[40]++;options.qs=_querystring.default.parse(options.params);}else{cov_1b7kmgixe9().b[10][1]++;}}const client=(cov_1b7kmgixe9().s[41]++,clients[url.protocol]);cov_1b7kmgixe9().s[42]++;if(!client){cov_1b7kmgixe9().b[11][0]++;cov_1b7kmgixe9().s[43]++;return Promise.reject(`Unsupported protocol ${url.protocol}`);}else{cov_1b7kmgixe9().b[11][1]++;}const requestOptions=(cov_1b7kmgixe9().s[44]++,{method:options.method,port:Number(url.port),path:url.pathname,hostname:url.hostname,headers:options.headers,encoding:null,followRedirects:options.followRedirects===true});cov_1b7kmgixe9().s[45]++;if(requestOptions.headers){cov_1b7kmgixe9().b[12][0]++;cov_1b7kmgixe9().s[46]++;Object.keys(requestOptions.headers).forEach(key=>{cov_1b7kmgixe9().f[8]++;cov_1b7kmgixe9().s[47]++;if(typeof requestOptions.headers[key]==='undefined'){cov_1b7kmgixe9().b[13][0]++;cov_1b7kmgixe9().s[48]++;delete requestOptions.headers[key];}else{cov_1b7kmgixe9().b[13][1]++;}});}else{cov_1b7kmgixe9().b[12][1]++;}cov_1b7kmgixe9().s[49]++;if(url.search){cov_1b7kmgixe9().b[14][0]++;cov_1b7kmgixe9().s[50]++;options.qs=Object.assign({},options.qs,_querystring.default.parse(url.query));}else{cov_1b7kmgixe9().b[14][1]++;}cov_1b7kmgixe9().s[51]++;if(url.auth){cov_1b7kmgixe9().b[15][0]++;cov_1b7kmgixe9().s[52]++;requestOptions.auth=url.auth;}else{cov_1b7kmgixe9().b[15][1]++;}cov_1b7kmgixe9().s[53]++;if(options.qs){cov_1b7kmgixe9().b[16][0]++;cov_1b7kmgixe9().s[54]++;requestOptions.path+=`?${_querystring.default.stringify(options.qs)}`;}else{cov_1b7kmgixe9().b[16][1]++;}cov_1b7kmgixe9().s[55]++;if(options.agent){cov_1b7kmgixe9().b[17][0]++;cov_1b7kmgixe9().s[56]++;requestOptions.agent=options.agent;}else{cov_1b7kmgixe9().b[17][1]++;}cov_1b7kmgixe9().s[57]++;return new Promise((resolve,reject)=>{cov_1b7kmgixe9().f[9]++;const req=(cov_1b7kmgixe9().s[58]++,client.request(requestOptions,makeCallback(resolve,reject,options)));cov_1b7kmgixe9().s[59]++;if(options.body){cov_1b7kmgixe9().b[18][0]++;cov_1b7kmgixe9().s[60]++;req.write(options.body);}else{cov_1b7kmgixe9().b[18][1]++;}cov_1b7kmgixe9().s[61]++;req.on('error',error=>{cov_1b7kmgixe9().f[10]++;cov_1b7kmgixe9().s[62]++;reject(error);});cov_1b7kmgixe9().s[63]++;req.end();});};/**
 * @typedef Parse.Cloud.HTTPOptions
 * @property {String|Object} body The body of the request. If it is a JSON object, then the Content-Type set in the headers must be application/x-www-form-urlencoded or application/json. You can also set this to a {@link Buffer} object to send raw bytes. If you use a Buffer, you should also set the Content-Type header explicitly to describe what these bytes represent.
 * @property {function} error The function that is called when the request fails. It will be passed a Parse.Cloud.HTTPResponse object.
 * @property {Boolean} followRedirects Whether to follow redirects caused by HTTP 3xx responses. Defaults to false.
 * @property {Object} headers The headers for the request.
 * @property {String} method The method of the request. GET, POST, PUT, DELETE, HEAD, and OPTIONS are supported. Will default to GET if not specified.
 * @property {String|Object} params The query portion of the url. You can pass a JSON object of key value pairs like params: {q : 'Sean Plott'} or a raw string like params:q=Sean Plott.
 * @property {function} success The function that is called when the request successfully completes. It will be passed a Parse.Cloud.HTTPResponse object.
 * @property {string} url The url to send the request to.
 */cov_1b7kmgixe9().s[64]++;module.exports.encodeBody=encodeBody;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,