{"version":3,"sources":["../../src/GraphQL/ParseGraphQLSchema.js"],"names":["RESERVED_GRAPHQL_TYPE_NAMES","RESERVED_GRAPHQL_QUERY_NAMES","RESERVED_GRAPHQL_MUTATION_NAMES","ParseGraphQLSchema","constructor","params","parseGraphQLController","databaseController","log","graphQLCustomTypeDefs","appId","schemaCache","SchemaCache","load","parseGraphQLConfig","_initializeSchemaAndConfig","parseClasses","_getClassesForSchema","functionNames","_getFunctionNames","functionNamesString","JSON","stringify","_hasSchemaInputChanged","graphQLSchema","parseClassTypes","viewerType","graphQLAutoSchema","graphQLTypes","graphQLQueries","graphQLMutations","graphQLSubscriptions","graphQLSchemaDirectivesDefinitions","graphQLSchemaDirectives","relayNodeInterface","defaultGraphQLTypes","defaultRelaySchema","schemaTypes","_getParseClassesWithConfig","forEach","parseClass","parseClassConfig","className","Object","keys","fields","fieldName","startsWith","orderedFields","sort","parseClassQueries","parseClassMutations","loadArrayResult","defaultGraphQLQueries","defaultGraphQLMutations","graphQLQuery","undefined","length","GraphQLObjectType","name","description","addGraphQLType","graphQLMutation","graphQLSubscription","GraphQLSchema","types","query","mutation","subscription","schemaDirectives","getTypeMap","customGraphQLSchemaTypeMap","_typeMap","findAndReplaceLastType","parent","key","ofType","customGraphQLSchemaTypeKey","customGraphQLSchemaType","autoGraphQLSchemaType","getFields","_fields","fieldKey","field","directivesDefinitionsSchema","autoSchema","stitchSchemas","schemas","mergeDirectives","graphQLSchemaTypeMap","graphQLSchemaTypeName","graphQLSchemaType","definitions","graphQLCustomTypeDef","find","definition","value","graphQLSchemaTypeFieldMap","graphQLSchemaTypeFieldName","graphQLSchemaTypeField","astNode","SchemaDirectiveVisitor","visitSchemaDirectives","type","throwError","ignoreReserved","ignoreConnection","includes","existingType","endsWith","message","Error","warn","push","addGraphQLQuery","addGraphQLMutation","handleError","error","Parse","stack","schemaController","Promise","all","loadSchema","getGraphQLConfig","enabledForClasses","disabledForClasses","allClasses","getAllClasses","Array","isArray","includedClasses","filter","clazz","isUsersClassDisabled","some","classConfigs","sortClasses","a","b","map","c","functionName","test","parseCachedClasses","thisParseClassesObj","reduce","acc","clzz","newParseCachedClasses"],"mappings":"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","sourcesContent":["import Parse from 'parse/node';\nimport { GraphQLSchema, GraphQLObjectType, DocumentNode, GraphQLNamedType } from 'graphql';\nimport { stitchSchemas } from '@graphql-tools/stitch';\nimport { isDeepStrictEqual } from 'util';\nimport { SchemaDirectiveVisitor } from '@graphql-tools/utils';\nimport requiredParameter from '../requiredParameter';\nimport * as defaultGraphQLTypes from './loaders/defaultGraphQLTypes';\nimport * as parseClassTypes from './loaders/parseClassTypes';\nimport * as parseClassQueries from './loaders/parseClassQueries';\nimport * as parseClassMutations from './loaders/parseClassMutations';\nimport * as defaultGraphQLQueries from './loaders/defaultGraphQLQueries';\nimport * as defaultGraphQLMutations from './loaders/defaultGraphQLMutations';\nimport ParseGraphQLController, { ParseGraphQLConfig } from '../Controllers/ParseGraphQLController';\nimport DatabaseController from '../Controllers/DatabaseController';\nimport SchemaCache from '../Adapters/Cache/SchemaCache';\nimport { toGraphQLError } from './parseGraphQLUtils';\nimport * as schemaDirectives from './loaders/schemaDirectives';\nimport * as schemaTypes from './loaders/schemaTypes';\nimport { getFunctionNames } from '../triggers';\nimport * as defaultRelaySchema from './loaders/defaultRelaySchema';\n\nconst RESERVED_GRAPHQL_TYPE_NAMES = [\n  'String',\n  'Boolean',\n  'Int',\n  'Float',\n  'ID',\n  'ArrayResult',\n  'Query',\n  'Mutation',\n  'Subscription',\n  'CreateFileInput',\n  'CreateFilePayload',\n  'Viewer',\n  'SignUpInput',\n  'SignUpPayload',\n  'LogInInput',\n  'LogInPayload',\n  'LogOutInput',\n  'LogOutPayload',\n  'CloudCodeFunction',\n  'CallCloudCodeInput',\n  'CallCloudCodePayload',\n  'CreateClassInput',\n  'CreateClassPayload',\n  'UpdateClassInput',\n  'UpdateClassPayload',\n  'DeleteClassInput',\n  'DeleteClassPayload',\n  'PageInfo',\n];\nconst RESERVED_GRAPHQL_QUERY_NAMES = ['health', 'viewer', 'class', 'classes'];\nconst RESERVED_GRAPHQL_MUTATION_NAMES = [\n  'signUp',\n  'logIn',\n  'logOut',\n  'createFile',\n  'callCloudCode',\n  'createClass',\n  'updateClass',\n  'deleteClass',\n];\n\nclass ParseGraphQLSchema {\n  databaseController: DatabaseController;\n  parseGraphQLController: ParseGraphQLController;\n  parseGraphQLConfig: ParseGraphQLConfig;\n  log: any;\n  appId: string;\n  graphQLCustomTypeDefs: ?(string | GraphQLSchema | DocumentNode | GraphQLNamedType[]);\n  schemaCache: any;\n\n  constructor(\n    params: {\n      databaseController: DatabaseController,\n      parseGraphQLController: ParseGraphQLController,\n      log: any,\n      appId: string,\n      graphQLCustomTypeDefs: ?(string | GraphQLSchema | DocumentNode | GraphQLNamedType[]),\n    } = {}\n  ) {\n    this.parseGraphQLController =\n      params.parseGraphQLController ||\n      requiredParameter('You must provide a parseGraphQLController instance!');\n    this.databaseController =\n      params.databaseController ||\n      requiredParameter('You must provide a databaseController instance!');\n    this.log = params.log || requiredParameter('You must provide a log instance!');\n    this.graphQLCustomTypeDefs = params.graphQLCustomTypeDefs;\n    this.appId = params.appId || requiredParameter('You must provide the appId!');\n    this.schemaCache = SchemaCache;\n  }\n\n  async load() {\n    const { parseGraphQLConfig } = await this._initializeSchemaAndConfig();\n    const parseClasses = await this._getClassesForSchema(parseGraphQLConfig);\n    const functionNames = await this._getFunctionNames();\n    const functionNamesString = JSON.stringify(functionNames);\n\n    if (\n      !this._hasSchemaInputChanged({\n        parseClasses,\n        parseGraphQLConfig,\n        functionNamesString,\n      })\n    ) {\n      return this.graphQLSchema;\n    }\n\n    this.parseClasses = parseClasses;\n    this.parseGraphQLConfig = parseGraphQLConfig;\n    this.functionNames = functionNames;\n    this.functionNamesString = functionNamesString;\n    this.parseClassTypes = {};\n    this.viewerType = null;\n    this.graphQLAutoSchema = null;\n    this.graphQLSchema = null;\n    this.graphQLTypes = [];\n    this.graphQLQueries = {};\n    this.graphQLMutations = {};\n    this.graphQLSubscriptions = {};\n    this.graphQLSchemaDirectivesDefinitions = null;\n    this.graphQLSchemaDirectives = {};\n    this.relayNodeInterface = null;\n\n    defaultGraphQLTypes.load(this);\n    defaultRelaySchema.load(this);\n    schemaTypes.load(this);\n\n    this._getParseClassesWithConfig(parseClasses, parseGraphQLConfig).forEach(\n      ([parseClass, parseClassConfig]) => {\n        // Some times schema return the _auth_data_ field\n        // it will lead to unstable graphql generation order\n        if (parseClass.className === '_User') {\n          Object.keys(parseClass.fields).forEach(fieldName => {\n            if (fieldName.startsWith('_auth_data_')) {\n              delete parseClass.fields[fieldName];\n            }\n          });\n        }\n\n        // Fields order inside the schema seems to not be consistent across\n        // restart so we need to ensure an alphabetical order\n        // also it's better for the playground documentation\n        const orderedFields = {};\n        Object.keys(parseClass.fields)\n          .sort()\n          .forEach(fieldName => {\n            orderedFields[fieldName] = parseClass.fields[fieldName];\n          });\n        parseClass.fields = orderedFields;\n        parseClassTypes.load(this, parseClass, parseClassConfig);\n        parseClassQueries.load(this, parseClass, parseClassConfig);\n        parseClassMutations.load(this, parseClass, parseClassConfig);\n      }\n    );\n\n    defaultGraphQLTypes.loadArrayResult(this, parseClasses);\n    defaultGraphQLQueries.load(this);\n    defaultGraphQLMutations.load(this);\n\n    let graphQLQuery = undefined;\n    if (Object.keys(this.graphQLQueries).length > 0) {\n      graphQLQuery = new GraphQLObjectType({\n        name: 'Query',\n        description: 'Query is the top level type for queries.',\n        fields: this.graphQLQueries,\n      });\n      this.addGraphQLType(graphQLQuery, true, true);\n    }\n\n    let graphQLMutation = undefined;\n    if (Object.keys(this.graphQLMutations).length > 0) {\n      graphQLMutation = new GraphQLObjectType({\n        name: 'Mutation',\n        description: 'Mutation is the top level type for mutations.',\n        fields: this.graphQLMutations,\n      });\n      this.addGraphQLType(graphQLMutation, true, true);\n    }\n\n    let graphQLSubscription = undefined;\n    if (Object.keys(this.graphQLSubscriptions).length > 0) {\n      graphQLSubscription = new GraphQLObjectType({\n        name: 'Subscription',\n        description: 'Subscription is the top level type for subscriptions.',\n        fields: this.graphQLSubscriptions,\n      });\n      this.addGraphQLType(graphQLSubscription, true, true);\n    }\n\n    this.graphQLAutoSchema = new GraphQLSchema({\n      types: this.graphQLTypes,\n      query: graphQLQuery,\n      mutation: graphQLMutation,\n      subscription: graphQLSubscription,\n    });\n\n    if (this.graphQLCustomTypeDefs) {\n      schemaDirectives.load(this);\n\n      if (typeof this.graphQLCustomTypeDefs.getTypeMap === 'function') {\n        // In following code we use underscore attr to avoid js var un ref\n        const customGraphQLSchemaTypeMap = this.graphQLCustomTypeDefs._typeMap;\n        const findAndReplaceLastType = (parent, key) => {\n          if (parent[key].name) {\n            if (\n              this.graphQLAutoSchema._typeMap[parent[key].name] &&\n              this.graphQLAutoSchema._typeMap[parent[key].name] !== parent[key]\n            ) {\n              // To avoid unresolved field on overloaded schema\n              // replace the final type with the auto schema one\n              parent[key] = this.graphQLAutoSchema._typeMap[parent[key].name];\n            }\n          } else {\n            if (parent[key].ofType) {\n              findAndReplaceLastType(parent[key], 'ofType');\n            }\n          }\n        };\n        // Add non shared types from custom schema to auto schema\n        // note: some non shared types can use some shared types\n        // so this code need to be ran before the shared types addition\n        // we use sort to ensure schema consistency over restarts\n        Object.keys(customGraphQLSchemaTypeMap)\n          .sort()\n          .forEach(customGraphQLSchemaTypeKey => {\n            const customGraphQLSchemaType = customGraphQLSchemaTypeMap[customGraphQLSchemaTypeKey];\n            if (\n              !customGraphQLSchemaType ||\n              !customGraphQLSchemaType.name ||\n              customGraphQLSchemaType.name.startsWith('__')\n            ) {\n              return;\n            }\n            const autoGraphQLSchemaType = this.graphQLAutoSchema._typeMap[\n              customGraphQLSchemaType.name\n            ];\n            if (!autoGraphQLSchemaType) {\n              this.graphQLAutoSchema._typeMap[\n                customGraphQLSchemaType.name\n              ] = customGraphQLSchemaType;\n            }\n          });\n        // Handle shared types\n        // We pass through each type and ensure that all sub field types are replaced\n        // we use sort to ensure schema consistency over restarts\n        Object.keys(customGraphQLSchemaTypeMap)\n          .sort()\n          .forEach(customGraphQLSchemaTypeKey => {\n            const customGraphQLSchemaType = customGraphQLSchemaTypeMap[customGraphQLSchemaTypeKey];\n            if (\n              !customGraphQLSchemaType ||\n              !customGraphQLSchemaType.name ||\n              customGraphQLSchemaType.name.startsWith('__')\n            ) {\n              return;\n            }\n            const autoGraphQLSchemaType = this.graphQLAutoSchema._typeMap[\n              customGraphQLSchemaType.name\n            ];\n\n            if (autoGraphQLSchemaType && typeof customGraphQLSchemaType.getFields === 'function') {\n              Object.keys(customGraphQLSchemaType._fields)\n                .sort()\n                .forEach(fieldKey => {\n                  const field = customGraphQLSchemaType._fields[fieldKey];\n                  findAndReplaceLastType(field, 'type');\n                  autoGraphQLSchemaType._fields[field.name] = field;\n                });\n            }\n          });\n        this.graphQLSchema = this.graphQLAutoSchema;\n      } else if (typeof this.graphQLCustomTypeDefs === 'function') {\n        this.graphQLSchema = await this.graphQLCustomTypeDefs({\n          directivesDefinitionsSchema: this.graphQLSchemaDirectivesDefinitions,\n          autoSchema: this.graphQLAutoSchema,\n          stitchSchemas,\n        });\n      } else {\n        this.graphQLSchema = stitchSchemas({\n          schemas: [\n            this.graphQLSchemaDirectivesDefinitions,\n            this.graphQLAutoSchema,\n            this.graphQLCustomTypeDefs,\n          ],\n          mergeDirectives: true,\n        });\n      }\n\n      // Only merge directive when string schema provided\n      const graphQLSchemaTypeMap = this.graphQLSchema.getTypeMap();\n      Object.keys(graphQLSchemaTypeMap).forEach(graphQLSchemaTypeName => {\n        const graphQLSchemaType = graphQLSchemaTypeMap[graphQLSchemaTypeName];\n        if (\n          typeof graphQLSchemaType.getFields === 'function' &&\n          this.graphQLCustomTypeDefs.definitions\n        ) {\n          const graphQLCustomTypeDef = this.graphQLCustomTypeDefs.definitions.find(\n            definition => definition.name.value === graphQLSchemaTypeName\n          );\n          if (graphQLCustomTypeDef) {\n            const graphQLSchemaTypeFieldMap = graphQLSchemaType.getFields();\n            Object.keys(graphQLSchemaTypeFieldMap).forEach(graphQLSchemaTypeFieldName => {\n              const graphQLSchemaTypeField = graphQLSchemaTypeFieldMap[graphQLSchemaTypeFieldName];\n              if (!graphQLSchemaTypeField.astNode) {\n                const astNode = graphQLCustomTypeDef.fields.find(\n                  field => field.name.value === graphQLSchemaTypeFieldName\n                );\n                if (astNode) {\n                  graphQLSchemaTypeField.astNode = astNode;\n                }\n              }\n            });\n          }\n        }\n      });\n\n      SchemaDirectiveVisitor.visitSchemaDirectives(\n        this.graphQLSchema,\n        this.graphQLSchemaDirectives\n      );\n    } else {\n      this.graphQLSchema = this.graphQLAutoSchema;\n    }\n\n    return this.graphQLSchema;\n  }\n\n  addGraphQLType(type, throwError = false, ignoreReserved = false, ignoreConnection = false) {\n    if (\n      (!ignoreReserved && RESERVED_GRAPHQL_TYPE_NAMES.includes(type.name)) ||\n      this.graphQLTypes.find(existingType => existingType.name === type.name) ||\n      (!ignoreConnection && type.name.endsWith('Connection'))\n    ) {\n      const message = `Type ${type.name} could not be added to the auto schema because it collided with an existing type.`;\n      if (throwError) {\n        throw new Error(message);\n      }\n      this.log.warn(message);\n      return undefined;\n    }\n    this.graphQLTypes.push(type);\n    return type;\n  }\n\n  addGraphQLQuery(fieldName, field, throwError = false, ignoreReserved = false) {\n    if (\n      (!ignoreReserved && RESERVED_GRAPHQL_QUERY_NAMES.includes(fieldName)) ||\n      this.graphQLQueries[fieldName]\n    ) {\n      const message = `Query ${fieldName} could not be added to the auto schema because it collided with an existing field.`;\n      if (throwError) {\n        throw new Error(message);\n      }\n      this.log.warn(message);\n      return undefined;\n    }\n    this.graphQLQueries[fieldName] = field;\n    return field;\n  }\n\n  addGraphQLMutation(fieldName, field, throwError = false, ignoreReserved = false) {\n    if (\n      (!ignoreReserved && RESERVED_GRAPHQL_MUTATION_NAMES.includes(fieldName)) ||\n      this.graphQLMutations[fieldName]\n    ) {\n      const message = `Mutation ${fieldName} could not be added to the auto schema because it collided with an existing field.`;\n      if (throwError) {\n        throw new Error(message);\n      }\n      this.log.warn(message);\n      return undefined;\n    }\n    this.graphQLMutations[fieldName] = field;\n    return field;\n  }\n\n  handleError(error) {\n    if (error instanceof Parse.Error) {\n      this.log.error('Parse error: ', error);\n    } else {\n      this.log.error('Uncaught internal server error.', error, error.stack);\n    }\n    throw toGraphQLError(error);\n  }\n\n  async _initializeSchemaAndConfig() {\n    const [schemaController, parseGraphQLConfig] = await Promise.all([\n      this.databaseController.loadSchema(),\n      this.parseGraphQLController.getGraphQLConfig(),\n    ]);\n\n    this.schemaController = schemaController;\n\n    return {\n      parseGraphQLConfig,\n    };\n  }\n\n  /**\n   * Gets all classes found by the `schemaController`\n   * minus those filtered out by the app's parseGraphQLConfig.\n   */\n  async _getClassesForSchema(parseGraphQLConfig: ParseGraphQLConfig) {\n    const { enabledForClasses, disabledForClasses } = parseGraphQLConfig;\n    const allClasses = await this.schemaController.getAllClasses();\n\n    if (Array.isArray(enabledForClasses) || Array.isArray(disabledForClasses)) {\n      let includedClasses = allClasses;\n      if (enabledForClasses) {\n        includedClasses = allClasses.filter(clazz => {\n          return enabledForClasses.includes(clazz.className);\n        });\n      }\n      if (disabledForClasses) {\n        // Classes included in `enabledForClasses` that\n        // are also present in `disabledForClasses` will\n        // still be filtered out\n        includedClasses = includedClasses.filter(clazz => {\n          return !disabledForClasses.includes(clazz.className);\n        });\n      }\n\n      this.isUsersClassDisabled = !includedClasses.some(clazz => {\n        return clazz.className === '_User';\n      });\n\n      return includedClasses;\n    } else {\n      return allClasses;\n    }\n  }\n\n  /**\n   * This method returns a list of tuples\n   * that provide the parseClass along with\n   * its parseClassConfig where provided.\n   */\n  _getParseClassesWithConfig(parseClasses, parseGraphQLConfig: ParseGraphQLConfig) {\n    const { classConfigs } = parseGraphQLConfig;\n\n    // Make sures that the default classes and classes that\n    // starts with capitalized letter will be generated first.\n    const sortClasses = (a, b) => {\n      a = a.className;\n      b = b.className;\n      if (a[0] === '_') {\n        if (b[0] !== '_') {\n          return -1;\n        }\n      }\n      if (b[0] === '_') {\n        if (a[0] !== '_') {\n          return 1;\n        }\n      }\n      if (a === b) {\n        return 0;\n      } else if (a < b) {\n        return -1;\n      } else {\n        return 1;\n      }\n    };\n\n    return parseClasses.sort(sortClasses).map(parseClass => {\n      let parseClassConfig;\n      if (classConfigs) {\n        parseClassConfig = classConfigs.find(c => c.className === parseClass.className);\n      }\n      return [parseClass, parseClassConfig];\n    });\n  }\n\n  async _getFunctionNames() {\n    return await getFunctionNames(this.appId).filter(functionName => {\n      if (/^[_a-zA-Z][_a-zA-Z0-9]*$/.test(functionName)) {\n        return true;\n      } else {\n        this.log.warn(\n          `Function ${functionName} could not be added to the auto schema because GraphQL names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/.`\n        );\n        return false;\n      }\n    });\n  }\n\n  /**\n   * Checks for changes to the parseClasses\n   * objects (i.e. database schema) or to\n   * the parseGraphQLConfig object. If no\n   * changes are found, return true;\n   */\n  _hasSchemaInputChanged(params: {\n    parseClasses: any,\n    parseGraphQLConfig: ?ParseGraphQLConfig,\n    functionNamesString: string,\n  }): boolean {\n    const { parseClasses, parseGraphQLConfig, functionNamesString } = params;\n\n    // First init\n    if (!this.parseCachedClasses || !this.graphQLSchema) {\n      const thisParseClassesObj = parseClasses.reduce((acc, clzz) => {\n        acc[clzz.className] = clzz;\n        return acc;\n      }, {});\n      this.parseCachedClasses = thisParseClassesObj;\n      return true;\n    }\n\n    const newParseCachedClasses = parseClasses.reduce((acc, clzz) => {\n      acc[clzz.className] = clzz;\n      return acc;\n    }, {});\n\n    if (\n      isDeepStrictEqual(this.parseGraphQLConfig, parseGraphQLConfig) &&\n      this.functionNamesString === functionNamesString &&\n      isDeepStrictEqual(this.parseCachedClasses, newParseCachedClasses)\n    ) {\n      return false;\n    }\n\n    this.parseCachedClasses = newParseCachedClasses;\n    return true;\n  }\n}\n\nexport { ParseGraphQLSchema };\n"]}