"use strict";function cov_2dvpxuvknb(){var path="/parse-server/lib/batch.js";var hash="65c22c5e72fdc0721c277062f7b94944e61eb616";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/batch.js",statementMap:{"0":{start:{line:3,column:14},end:{line:3,column:41}},"1":{start:{line:5,column:12},end:{line:5,column:26}},"2":{start:{line:7,column:13},end:{line:7,column:28}},"3":{start:{line:10,column:18},end:{line:10,column:26}},"4":{start:{line:13,column:2},end:{line:15,column:5}},"5":{start:{line:14,column:4},end:{line:14,column:36}},"6":{start:{line:19,column:2},end:{line:21,column:3}},"7":{start:{line:20,column:4},end:{line:20,column:26}},"8":{start:{line:23,column:2},end:{line:23,column:19}},"9":{start:{line:27,column:2},end:{line:27,column:58}},"10":{start:{line:28,column:2},end:{line:28,column:76}},"11":{start:{line:29,column:26},end:{line:29,column:63}},"12":{start:{line:30,column:18},end:{line:30,column:55}},"13":{start:{line:32,column:27},end:{line:39,column:3}},"14":{start:{line:34,column:4},end:{line:36,column:5}},"15":{start:{line:35,column:6},end:{line:35,column:96}},"16":{start:{line:38,column:4},end:{line:38,column:69}},"17":{start:{line:41,column:2},end:{line:56,column:3}},"18":{start:{line:42,column:22},end:{line:42,column:36}},"19":{start:{line:43,column:23},end:{line:43,column:43}},"20":{start:{line:45,column:4},end:{line:45,column:26}},"21":{start:{line:46,column:4},end:{line:55,column:6}},"22":{start:{line:49,column:30},end:{line:49,column:63}},"23":{start:{line:50,column:31},end:{line:50,column:65}},"24":{start:{line:51,column:30},end:{line:51,column:170}},"25":{start:{line:52,column:22},end:{line:52,column:94}},"26":{start:{line:54,column:6},end:{line:54,column:39}},"27":{start:{line:58,column:2},end:{line:58,column:26}},"28":{start:{line:64,column:2},end:{line:66,column:3}},"29":{start:{line:65,column:4},end:{line:65,column:81}},"30":{start:{line:73,column:2},end:{line:75,column:3}},"31":{start:{line:74,column:4},end:{line:74,column:70}},"32":{start:{line:77,column:27},end:{line:77,column:122}},"33":{start:{line:79,column:16},end:{line:137,column:3}},"34":{start:{line:80,column:25},end:{line:80,column:42}},"35":{start:{line:82,column:4},end:{line:84,column:5}},"36":{start:{line:83,column:6},end:{line:83,column:72}},"37":{start:{line:86,column:4},end:{line:136,column:7}},"38":{start:{line:87,column:23},end:{line:108,column:8}},"39":{start:{line:88,column:29},end:{line:88,column:63}},"40":{start:{line:90,column:24},end:{line:95,column:9}},"41":{start:{line:96,column:8},end:{line:107,column:11}},"42":{start:{line:97,column:10},end:{line:99,column:12}},"43":{start:{line:101,column:10},end:{line:106,column:12}},"44":{start:{line:109,column:6},end:{line:135,column:9}},"45":{start:{line:110,column:8},end:{line:128,column:9}},"46":{start:{line:111,column:10},end:{line:123,column:11}},"47":{start:{line:111,column:37},end:{line:111,column:69}},"48":{start:{line:112,column:12},end:{line:116,column:15}},"49":{start:{line:113,column:14},end:{line:115,column:17}},"50":{start:{line:118,column:12},end:{line:122,column:15}},"51":{start:{line:119,column:14},end:{line:121,column:16}},"52":{start:{line:125,column:10},end:{line:127,column:12}},"53":{start:{line:130,column:8},end:{line:132,column:9}},"54":{start:{line:130,column:72},end:{line:130,column:139}},"55":{start:{line:131,column:10},end:{line:131,column:47}},"56":{start:{line:134,column:8},end:{line:134,column:20}},"57":{start:{line:139,column:2},end:{line:139,column:18}},"58":{start:{line:142,column:0},end:{line:145,column:2}}},fnMap:{"0":{name:"mountOnto",decl:{start:{line:12,column:9},end:{line:12,column:18}},loc:{start:{line:12,column:27},end:{line:16,column:1}},line:12},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:34},end:{line:13,column:35}},loc:{start:{line:13,column:41},end:{line:15,column:3}},line:13},"2":{name:"parseURL",decl:{start:{line:18,column:9},end:{line:18,column:17}},loc:{start:{line:18,column:23},end:{line:24,column:1}},line:18},"3":{name:"makeBatchRoutingPathFunction",decl:{start:{line:26,column:9},end:{line:26,column:37}},loc:{start:{line:26,column:79},end:{line:59,column:1}},line:26},"4":{name:"(anonymous_4)",decl:{start:{line:32,column:27},end:{line:32,column:28}},loc:{start:{line:32,column:50},end:{line:39,column:3}},line:32},"5":{name:"(anonymous_5)",decl:{start:{line:46,column:11},end:{line:46,column:12}},loc:{start:{line:46,column:34},end:{line:55,column:5}},line:46},"6":{name:"handleBatch",decl:{start:{line:63,column:9},end:{line:63,column:20}},loc:{start:{line:63,column:34},end:{line:140,column:1}},line:63},"7":{name:"(anonymous_7)",decl:{start:{line:79,column:16},end:{line:79,column:17}},loc:{start:{line:79,column:38},end:{line:137,column:3}},line:79},"8":{name:"(anonymous_8)",decl:{start:{line:86,column:31},end:{line:86,column:32}},loc:{start:{line:86,column:37},end:{line:136,column:5}},line:86},"9":{name:"(anonymous_9)",decl:{start:{line:87,column:45},end:{line:87,column:46}},loc:{start:{line:87,column:60},end:{line:108,column:7}},line:87},"10":{name:"(anonymous_10)",decl:{start:{line:96,column:86},end:{line:96,column:87}},loc:{start:{line:96,column:98},end:{line:100,column:9}},line:96},"11":{name:"(anonymous_11)",decl:{start:{line:100,column:11},end:{line:100,column:12}},loc:{start:{line:100,column:20},end:{line:107,column:9}},line:100},"12":{name:"(anonymous_12)",decl:{start:{line:109,column:40},end:{line:109,column:41}},loc:{start:{line:109,column:51},end:{line:129,column:7}},line:109},"13":{name:"(anonymous_13)",decl:{start:{line:111,column:27},end:{line:111,column:28}},loc:{start:{line:111,column:37},end:{line:111,column:69}},line:111},"14":{name:"(anonymous_14)",decl:{start:{line:112,column:72},end:{line:112,column:73}},loc:{start:{line:112,column:78},end:{line:116,column:13}},line:112},"15":{name:"(anonymous_15)",decl:{start:{line:118,column:73},end:{line:118,column:74}},loc:{start:{line:118,column:79},end:{line:122,column:13}},line:118},"16":{name:"(anonymous_16)",decl:{start:{line:129,column:15},end:{line:129,column:16}},loc:{start:{line:129,column:24},end:{line:135,column:7}},line:129},"17":{name:"(anonymous_17)",decl:{start:{line:130,column:59},end:{line:130,column:60}},loc:{start:{line:130,column:72},end:{line:130,column:139}},line:130}},branchMap:{"0":{loc:{start:{line:19,column:2},end:{line:21,column:3}},type:"if",locations:[{start:{line:19,column:2},end:{line:21,column:3}},{start:{line:19,column:2},end:{line:21,column:3}}],line:19},"1":{loc:{start:{line:27,column:14},end:{line:27,column:57}},type:"cond-expr",locations:[{start:{line:27,column:26},end:{line:27,column:45}},{start:{line:27,column:48},end:{line:27,column:57}}],line:27},"2":{loc:{start:{line:28,column:20},end:{line:28,column:75}},type:"cond-expr",locations:[{start:{line:28,column:38},end:{line:28,column:63}},{start:{line:28,column:66},end:{line:28,column:75}}],line:28},"3":{loc:{start:{line:34,column:4},end:{line:36,column:5}},type:"if",locations:[{start:{line:34,column:4},end:{line:36,column:5}},{start:{line:34,column:4},end:{line:36,column:5}}],line:34},"4":{loc:{start:{line:41,column:2},end:{line:56,column:3}},type:"if",locations:[{start:{line:41,column:2},end:{line:56,column:3}},{start:{line:41,column:2},end:{line:56,column:3}}],line:41},"5":{loc:{start:{line:41,column:6},end:{line:41,column:76}},type:"binary-expr",locations:[{start:{line:41,column:6},end:{line:41,column:15}},{start:{line:41,column:19},end:{line:41,column:34}},{start:{line:41,column:38},end:{line:41,column:76}}],line:41},"6":{loc:{start:{line:51,column:30},end:{line:51,column:170}},type:"cond-expr",locations:[{start:{line:51,column:68},end:{line:51,column:113}},{start:{line:51,column:116},end:{line:51,column:170}}],line:51},"7":{loc:{start:{line:51,column:30},end:{line:51,column:65}},type:"binary-expr",locations:[{start:{line:51,column:30},end:{line:51,column:45}},{start:{line:51,column:49},end:{line:51,column:65}}],line:51},"8":{loc:{start:{line:51,column:116},end:{line:51,column:170}},type:"cond-expr",locations:[{start:{line:51,column:134},end:{line:51,column:150}},{start:{line:51,column:153},end:{line:51,column:170}}],line:51},"9":{loc:{start:{line:64,column:2},end:{line:66,column:3}},type:"if",locations:[{start:{line:64,column:2},end:{line:66,column:3}},{start:{line:64,column:2},end:{line:66,column:3}}],line:64},"10":{loc:{start:{line:73,column:2},end:{line:75,column:3}},type:"if",locations:[{start:{line:73,column:2},end:{line:75,column:3}},{start:{line:73,column:2},end:{line:75,column:3}}],line:73},"11":{loc:{start:{line:82,column:4},end:{line:84,column:5}},type:"if",locations:[{start:{line:82,column:4},end:{line:84,column:5}},{start:{line:82,column:4},end:{line:84,column:5}}],line:82},"12":{loc:{start:{line:110,column:8},end:{line:128,column:9}},type:"if",locations:[{start:{line:110,column:8},end:{line:128,column:9}},{start:{line:110,column:8},end:{line:128,column:9}}],line:110},"13":{loc:{start:{line:111,column:10},end:{line:123,column:11}},type:"if",locations:[{start:{line:111,column:10},end:{line:123,column:11}},{start:{line:111,column:10},end:{line:123,column:11}}],line:111},"14":{loc:{start:{line:130,column:8},end:{line:132,column:9}},type:"if",locations:[{start:{line:130,column:8},end:{line:132,column:9}},{start:{line:130,column:8},end:{line:132,column:9}}],line:130},"15":{loc:{start:{line:130,column:12},end:{line:130,column:166}},type:"binary-expr",locations:[{start:{line:130,column:12},end:{line:130,column:17}},{start:{line:130,column:21},end:{line:130,column:35}},{start:{line:130,column:39},end:{line:130,column:140}},{start:{line:130,column:144},end:{line:130,column:166}}],line:130},"16":{loc:{start:{line:130,column:72},end:{line:130,column:139}},type:"binary-expr",locations:[{start:{line:130,column:72},end:{line:130,column:107}},{start:{line:130,column:111},end:{line:130,column:139}}],line:130}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0,0],"16":[0,0]},inputSourceMap:{version:3,sources:["../src/batch.js"],names:["Parse","require","url","path","batchPath","mountOnto","router","route","req","handleBatch","parseURL","URL","parse","undefined","makeBatchRoutingPathFunction","originalUrl","serverURL","publicServerURL","apiPrefixLength","length","apiPrefix","slice","makeRoutablePath","requestPath","Error","INVALID_JSON","posix","join","localPath","publicPath","startsWithLocal","startsWith","startsWithPublic","pathLengthToUse","Math","max","newPath","Array","isArray","body","requests","endsWith","config","batch","transactionRetries","initialPromise","Promise","resolve","transaction","database","createTransactionalSession","then","promises","map","restRequest","routablePath","request","auth","info","tryRouteRequest","method","response","success","error","code","message","all","results","find","result","abortTransactionalSession","reject","commitTransactionalSession","catch","errorItem","module","exports"],mappings:"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",sourcesContent:["const Parse = require('parse/node').Parse;\nconst url = require('url');\nconst path = require('path');\n// These methods handle batch requests.\nconst batchPath = '/batch';\n\n// Mounts a batch-handler onto a PromiseRouter.\nfunction mountOnto(router) {\n  router.route('POST', batchPath, req => {\n    return handleBatch(router, req);\n  });\n}\n\nfunction parseURL(URL) {\n  if (typeof URL === 'string') {\n    return url.parse(URL);\n  }\n  return undefined;\n}\n\nfunction makeBatchRoutingPathFunction(originalUrl, serverURL, publicServerURL) {\n  serverURL = serverURL ? parseURL(serverURL) : undefined;\n  publicServerURL = publicServerURL ? parseURL(publicServerURL) : undefined;\n\n  const apiPrefixLength = originalUrl.length - batchPath.length;\n  let apiPrefix = originalUrl.slice(0, apiPrefixLength);\n\n  const makeRoutablePath = function (requestPath) {\n    // The routablePath is the path minus the api prefix\n    if (requestPath.slice(0, apiPrefix.length) != apiPrefix) {\n      throw new Parse.Error(Parse.Error.INVALID_JSON, 'cannot route batch path ' + requestPath);\n    }\n    return path.posix.join('/', requestPath.slice(apiPrefix.length));\n  };\n\n  if (serverURL && publicServerURL && serverURL.path != publicServerURL.path) {\n    const localPath = serverURL.path;\n    const publicPath = publicServerURL.path;\n\n    // Override the api prefix\n    apiPrefix = localPath;\n    return function (requestPath) {\n      // Figure out which server url was used by figuring out which\n      // path more closely matches requestPath\n      const startsWithLocal = requestPath.startsWith(localPath);\n      const startsWithPublic = requestPath.startsWith(publicPath);\n      const pathLengthToUse =\n        startsWithLocal && startsWithPublic\n          ? Math.max(localPath.length, publicPath.length)\n          : startsWithLocal\n            ? localPath.length\n            : publicPath.length;\n\n      const newPath = path.posix.join('/', localPath, '/', requestPath.slice(pathLengthToUse));\n\n      // Use the method for local routing\n      return makeRoutablePath(newPath);\n    };\n  }\n\n  return makeRoutablePath;\n}\n\n// Returns a promise for a {response} object.\n// TODO: pass along auth correctly\nfunction handleBatch(router, req) {\n  if (!Array.isArray(req.body.requests)) {\n    throw new Parse.Error(Parse.Error.INVALID_JSON, 'requests must be an array');\n  }\n\n  // The batch paths are all from the root of our domain.\n  // That means they include the API prefix, that the API is mounted\n  // to. However, our promise router does not route the api prefix. So\n  // we need to figure out the API prefix, so that we can strip it\n  // from all the subrequests.\n  if (!req.originalUrl.endsWith(batchPath)) {\n    throw 'internal routing problem - expected url to end with batch';\n  }\n\n  const makeRoutablePath = makeBatchRoutingPathFunction(\n    req.originalUrl,\n    req.config.serverURL,\n    req.config.publicServerURL\n  );\n\n  const batch = transactionRetries => {\n    let initialPromise = Promise.resolve();\n    if (req.body.transaction === true) {\n      initialPromise = req.config.database.createTransactionalSession();\n    }\n\n    return initialPromise.then(() => {\n      const promises = req.body.requests.map(restRequest => {\n        const routablePath = makeRoutablePath(restRequest.path);\n\n        // Construct a request that we can send to a handler\n        const request = {\n          body: restRequest.body,\n          config: req.config,\n          auth: req.auth,\n          info: req.info,\n        };\n\n        return router.tryRouteRequest(restRequest.method, routablePath, request).then(\n          response => {\n            return { success: response.response };\n          },\n          error => {\n            return { error: { code: error.code, error: error.message } };\n          }\n        );\n      });\n\n      return Promise.all(promises)\n        .then(results => {\n          if (req.body.transaction === true) {\n            if (results.find(result => typeof result.error === 'object')) {\n              return req.config.database.abortTransactionalSession().then(() => {\n                return Promise.reject({ response: results });\n              });\n            } else {\n              return req.config.database.commitTransactionalSession().then(() => {\n                return { response: results };\n              });\n            }\n          } else {\n            return { response: results };\n          }\n        })\n        .catch(error => {\n          if (\n            error &&\n            error.response &&\n            error.response.find(\n              errorItem => typeof errorItem.error === 'object' && errorItem.error.code === 251\n            ) &&\n            transactionRetries > 0\n          ) {\n            return batch(transactionRetries - 1);\n          }\n          throw error;\n        });\n    });\n  };\n  return batch(5);\n}\n\nmodule.exports = {\n  mountOnto,\n  makeBatchRoutingPathFunction,\n};\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"65c22c5e72fdc0721c277062f7b94944e61eb616"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2dvpxuvknb=function(){return actualCoverage;};}return actualCoverage;}cov_2dvpxuvknb();const Parse=(cov_2dvpxuvknb().s[0]++,require('parse/node').Parse);const url=(cov_2dvpxuvknb().s[1]++,require('url'));const path=(cov_2dvpxuvknb().s[2]++,require('path'));// These methods handle batch requests.
const batchPath=(cov_2dvpxuvknb().s[3]++,'/batch');// Mounts a batch-handler onto a PromiseRouter.
function mountOnto(router){cov_2dvpxuvknb().f[0]++;cov_2dvpxuvknb().s[4]++;router.route('POST',batchPath,req=>{cov_2dvpxuvknb().f[1]++;cov_2dvpxuvknb().s[5]++;return handleBatch(router,req);});}function parseURL(URL){cov_2dvpxuvknb().f[2]++;cov_2dvpxuvknb().s[6]++;if(typeof URL==='string'){cov_2dvpxuvknb().b[0][0]++;cov_2dvpxuvknb().s[7]++;return url.parse(URL);}else{cov_2dvpxuvknb().b[0][1]++;}cov_2dvpxuvknb().s[8]++;return undefined;}function makeBatchRoutingPathFunction(originalUrl,serverURL,publicServerURL){cov_2dvpxuvknb().f[3]++;cov_2dvpxuvknb().s[9]++;serverURL=serverURL?(cov_2dvpxuvknb().b[1][0]++,parseURL(serverURL)):(cov_2dvpxuvknb().b[1][1]++,undefined);cov_2dvpxuvknb().s[10]++;publicServerURL=publicServerURL?(cov_2dvpxuvknb().b[2][0]++,parseURL(publicServerURL)):(cov_2dvpxuvknb().b[2][1]++,undefined);const apiPrefixLength=(cov_2dvpxuvknb().s[11]++,originalUrl.length-batchPath.length);let apiPrefix=(cov_2dvpxuvknb().s[12]++,originalUrl.slice(0,apiPrefixLength));cov_2dvpxuvknb().s[13]++;const makeRoutablePath=function(requestPath){cov_2dvpxuvknb().f[4]++;cov_2dvpxuvknb().s[14]++;// The routablePath is the path minus the api prefix
if(requestPath.slice(0,apiPrefix.length)!=apiPrefix){cov_2dvpxuvknb().b[3][0]++;cov_2dvpxuvknb().s[15]++;throw new Parse.Error(Parse.Error.INVALID_JSON,'cannot route batch path '+requestPath);}else{cov_2dvpxuvknb().b[3][1]++;}cov_2dvpxuvknb().s[16]++;return path.posix.join('/',requestPath.slice(apiPrefix.length));};cov_2dvpxuvknb().s[17]++;if((cov_2dvpxuvknb().b[5][0]++,serverURL)&&(cov_2dvpxuvknb().b[5][1]++,publicServerURL)&&(cov_2dvpxuvknb().b[5][2]++,serverURL.path!=publicServerURL.path)){cov_2dvpxuvknb().b[4][0]++;const localPath=(cov_2dvpxuvknb().s[18]++,serverURL.path);const publicPath=(cov_2dvpxuvknb().s[19]++,publicServerURL.path);// Override the api prefix
cov_2dvpxuvknb().s[20]++;apiPrefix=localPath;cov_2dvpxuvknb().s[21]++;return function(requestPath){cov_2dvpxuvknb().f[5]++;// Figure out which server url was used by figuring out which
// path more closely matches requestPath
const startsWithLocal=(cov_2dvpxuvknb().s[22]++,requestPath.startsWith(localPath));const startsWithPublic=(cov_2dvpxuvknb().s[23]++,requestPath.startsWith(publicPath));const pathLengthToUse=(cov_2dvpxuvknb().s[24]++,(cov_2dvpxuvknb().b[7][0]++,startsWithLocal)&&(cov_2dvpxuvknb().b[7][1]++,startsWithPublic)?(cov_2dvpxuvknb().b[6][0]++,Math.max(localPath.length,publicPath.length)):(cov_2dvpxuvknb().b[6][1]++,startsWithLocal?(cov_2dvpxuvknb().b[8][0]++,localPath.length):(cov_2dvpxuvknb().b[8][1]++,publicPath.length)));const newPath=(cov_2dvpxuvknb().s[25]++,path.posix.join('/',localPath,'/',requestPath.slice(pathLengthToUse)));// Use the method for local routing
cov_2dvpxuvknb().s[26]++;return makeRoutablePath(newPath);};}else{cov_2dvpxuvknb().b[4][1]++;}cov_2dvpxuvknb().s[27]++;return makeRoutablePath;}// Returns a promise for a {response} object.
// TODO: pass along auth correctly
function handleBatch(router,req){cov_2dvpxuvknb().f[6]++;cov_2dvpxuvknb().s[28]++;if(!Array.isArray(req.body.requests)){cov_2dvpxuvknb().b[9][0]++;cov_2dvpxuvknb().s[29]++;throw new Parse.Error(Parse.Error.INVALID_JSON,'requests must be an array');}else{cov_2dvpxuvknb().b[9][1]++;}// The batch paths are all from the root of our domain.
// That means they include the API prefix, that the API is mounted
// to. However, our promise router does not route the api prefix. So
// we need to figure out the API prefix, so that we can strip it
// from all the subrequests.
cov_2dvpxuvknb().s[30]++;if(!req.originalUrl.endsWith(batchPath)){cov_2dvpxuvknb().b[10][0]++;cov_2dvpxuvknb().s[31]++;throw'internal routing problem - expected url to end with batch';}else{cov_2dvpxuvknb().b[10][1]++;}const makeRoutablePath=(cov_2dvpxuvknb().s[32]++,makeBatchRoutingPathFunction(req.originalUrl,req.config.serverURL,req.config.publicServerURL));cov_2dvpxuvknb().s[33]++;const batch=transactionRetries=>{cov_2dvpxuvknb().f[7]++;let initialPromise=(cov_2dvpxuvknb().s[34]++,Promise.resolve());cov_2dvpxuvknb().s[35]++;if(req.body.transaction===true){cov_2dvpxuvknb().b[11][0]++;cov_2dvpxuvknb().s[36]++;initialPromise=req.config.database.createTransactionalSession();}else{cov_2dvpxuvknb().b[11][1]++;}cov_2dvpxuvknb().s[37]++;return initialPromise.then(()=>{cov_2dvpxuvknb().f[8]++;const promises=(cov_2dvpxuvknb().s[38]++,req.body.requests.map(restRequest=>{cov_2dvpxuvknb().f[9]++;const routablePath=(cov_2dvpxuvknb().s[39]++,makeRoutablePath(restRequest.path));// Construct a request that we can send to a handler
const request=(cov_2dvpxuvknb().s[40]++,{body:restRequest.body,config:req.config,auth:req.auth,info:req.info});cov_2dvpxuvknb().s[41]++;return router.tryRouteRequest(restRequest.method,routablePath,request).then(response=>{cov_2dvpxuvknb().f[10]++;cov_2dvpxuvknb().s[42]++;return{success:response.response};},error=>{cov_2dvpxuvknb().f[11]++;cov_2dvpxuvknb().s[43]++;return{error:{code:error.code,error:error.message}};});}));cov_2dvpxuvknb().s[44]++;return Promise.all(promises).then(results=>{cov_2dvpxuvknb().f[12]++;cov_2dvpxuvknb().s[45]++;if(req.body.transaction===true){cov_2dvpxuvknb().b[12][0]++;cov_2dvpxuvknb().s[46]++;if(results.find(result=>{cov_2dvpxuvknb().f[13]++;cov_2dvpxuvknb().s[47]++;return typeof result.error==='object';})){cov_2dvpxuvknb().b[13][0]++;cov_2dvpxuvknb().s[48]++;return req.config.database.abortTransactionalSession().then(()=>{cov_2dvpxuvknb().f[14]++;cov_2dvpxuvknb().s[49]++;return Promise.reject({response:results});});}else{cov_2dvpxuvknb().b[13][1]++;cov_2dvpxuvknb().s[50]++;return req.config.database.commitTransactionalSession().then(()=>{cov_2dvpxuvknb().f[15]++;cov_2dvpxuvknb().s[51]++;return{response:results};});}}else{cov_2dvpxuvknb().b[12][1]++;cov_2dvpxuvknb().s[52]++;return{response:results};}}).catch(error=>{cov_2dvpxuvknb().f[16]++;cov_2dvpxuvknb().s[53]++;if((cov_2dvpxuvknb().b[15][0]++,error)&&(cov_2dvpxuvknb().b[15][1]++,error.response)&&(cov_2dvpxuvknb().b[15][2]++,error.response.find(errorItem=>{cov_2dvpxuvknb().f[17]++;cov_2dvpxuvknb().s[54]++;return(cov_2dvpxuvknb().b[16][0]++,typeof errorItem.error==='object')&&(cov_2dvpxuvknb().b[16][1]++,errorItem.error.code===251);}))&&(cov_2dvpxuvknb().b[15][3]++,transactionRetries>0)){cov_2dvpxuvknb().b[14][0]++;cov_2dvpxuvknb().s[55]++;return batch(transactionRetries-1);}else{cov_2dvpxuvknb().b[14][1]++;}cov_2dvpxuvknb().s[56]++;throw error;});});};cov_2dvpxuvknb().s[57]++;return batch(5);}cov_2dvpxuvknb().s[58]++;module.exports={mountOnto,makeBatchRoutingPathFunction};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9iYXRjaC5qcyJdLCJuYW1lcyI6WyJQYXJzZSIsInJlcXVpcmUiLCJ1cmwiLCJwYXRoIiwiYmF0Y2hQYXRoIiwibW91bnRPbnRvIiwicm91dGVyIiwicm91dGUiLCJyZXEiLCJoYW5kbGVCYXRjaCIsInBhcnNlVVJMIiwiVVJMIiwicGFyc2UiLCJ1bmRlZmluZWQiLCJtYWtlQmF0Y2hSb3V0aW5nUGF0aEZ1bmN0aW9uIiwib3JpZ2luYWxVcmwiLCJzZXJ2ZXJVUkwiLCJwdWJsaWNTZXJ2ZXJVUkwiLCJhcGlQcmVmaXhMZW5ndGgiLCJsZW5ndGgiLCJhcGlQcmVmaXgiLCJzbGljZSIsIm1ha2VSb3V0YWJsZVBhdGgiLCJyZXF1ZXN0UGF0aCIsIkVycm9yIiwiSU5WQUxJRF9KU09OIiwicG9zaXgiLCJqb2luIiwibG9jYWxQYXRoIiwicHVibGljUGF0aCIsInN0YXJ0c1dpdGhMb2NhbCIsInN0YXJ0c1dpdGgiLCJzdGFydHNXaXRoUHVibGljIiwicGF0aExlbmd0aFRvVXNlIiwiTWF0aCIsIm1heCIsIm5ld1BhdGgiLCJBcnJheSIsImlzQXJyYXkiLCJib2R5IiwicmVxdWVzdHMiLCJlbmRzV2l0aCIsImNvbmZpZyIsImJhdGNoIiwidHJhbnNhY3Rpb25SZXRyaWVzIiwiaW5pdGlhbFByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRyYW5zYWN0aW9uIiwiZGF0YWJhc2UiLCJjcmVhdGVUcmFuc2FjdGlvbmFsU2Vzc2lvbiIsInRoZW4iLCJwcm9taXNlcyIsIm1hcCIsInJlc3RSZXF1ZXN0Iiwicm91dGFibGVQYXRoIiwicmVxdWVzdCIsImF1dGgiLCJpbmZvIiwidHJ5Um91dGVSZXF1ZXN0IiwibWV0aG9kIiwicmVzcG9uc2UiLCJzdWNjZXNzIiwiZXJyb3IiLCJjb2RlIiwibWVzc2FnZSIsImFsbCIsInJlc3VsdHMiLCJmaW5kIiwicmVzdWx0IiwiYWJvcnRUcmFuc2FjdGlvbmFsU2Vzc2lvbiIsInJlamVjdCIsImNvbW1pdFRyYW5zYWN0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ZnZFLEVBQUFBLFNBRGU7QUFFZlMsRUFBQUE7QUFGZSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFBhcnNlID0gcmVxdWlyZSgncGFyc2Uvbm9kZScpLlBhcnNlO1xuY29uc3QgdXJsID0gcmVxdWlyZSgndXJsJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuLy8gVGhlc2UgbWV0aG9kcyBoYW5kbGUgYmF0Y2ggcmVxdWVzdHMuXG5jb25zdCBiYXRjaFBhdGggPSAnL2JhdGNoJztcblxuLy8gTW91bnRzIGEgYmF0Y2gtaGFuZGxlciBvbnRvIGEgUHJvbWlzZVJvdXRlci5cbmZ1bmN0aW9uIG1vdW50T250byhyb3V0ZXIpIHtcbiAgcm91dGVyLnJvdXRlKCdQT1NUJywgYmF0Y2hQYXRoLCByZXEgPT4ge1xuICAgIHJldHVybiBoYW5kbGVCYXRjaChyb3V0ZXIsIHJlcSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVSTChVUkwpIHtcbiAgaWYgKHR5cGVvZiBVUkwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHVybC5wYXJzZShVUkwpO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIG1ha2VCYXRjaFJvdXRpbmdQYXRoRnVuY3Rpb24ob3JpZ2luYWxVcmwsIHNlcnZlclVSTCwgcHVibGljU2VydmVyVVJMKSB7XG4gIHNlcnZlclVSTCA9IHNlcnZlclVSTCA/IHBhcnNlVVJMKHNlcnZlclVSTCkgOiB1bmRlZmluZWQ7XG4gIHB1YmxpY1NlcnZlclVSTCA9IHB1YmxpY1NlcnZlclVSTCA/IHBhcnNlVVJMKHB1YmxpY1NlcnZlclVSTCkgOiB1bmRlZmluZWQ7XG5cbiAgY29uc3QgYXBpUHJlZml4TGVuZ3RoID0gb3JpZ2luYWxVcmwubGVuZ3RoIC0gYmF0Y2hQYXRoLmxlbmd0aDtcbiAgbGV0IGFwaVByZWZpeCA9IG9yaWdpbmFsVXJsLnNsaWNlKDAsIGFwaVByZWZpeExlbmd0aCk7XG5cbiAgY29uc3QgbWFrZVJvdXRhYmxlUGF0aCA9IGZ1bmN0aW9uIChyZXF1ZXN0UGF0aCkge1xuICAgIC8vIFRoZSByb3V0YWJsZVBhdGggaXMgdGhlIHBhdGggbWludXMgdGhlIGFwaSBwcmVmaXhcbiAgICBpZiAocmVxdWVzdFBhdGguc2xpY2UoMCwgYXBpUHJlZml4Lmxlbmd0aCkgIT0gYXBpUHJlZml4KSB7XG4gICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuSU5WQUxJRF9KU09OLCAnY2Fubm90IHJvdXRlIGJhdGNoIHBhdGggJyArIHJlcXVlc3RQYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGgucG9zaXguam9pbignLycsIHJlcXVlc3RQYXRoLnNsaWNlKGFwaVByZWZpeC5sZW5ndGgpKTtcbiAgfTtcblxuICBpZiAoc2VydmVyVVJMICYmIHB1YmxpY1NlcnZlclVSTCAmJiBzZXJ2ZXJVUkwucGF0aCAhPSBwdWJsaWNTZXJ2ZXJVUkwucGF0aCkge1xuICAgIGNvbnN0IGxvY2FsUGF0aCA9IHNlcnZlclVSTC5wYXRoO1xuICAgIGNvbnN0IHB1YmxpY1BhdGggPSBwdWJsaWNTZXJ2ZXJVUkwucGF0aDtcblxuICAgIC8vIE92ZXJyaWRlIHRoZSBhcGkgcHJlZml4XG4gICAgYXBpUHJlZml4ID0gbG9jYWxQYXRoO1xuICAgIHJldHVybiBmdW5jdGlvbiAocmVxdWVzdFBhdGgpIHtcbiAgICAgIC8vIEZpZ3VyZSBvdXQgd2hpY2ggc2VydmVyIHVybCB3YXMgdXNlZCBieSBmaWd1cmluZyBvdXQgd2hpY2hcbiAgICAgIC8vIHBhdGggbW9yZSBjbG9zZWx5IG1hdGNoZXMgcmVxdWVzdFBhdGhcbiAgICAgIGNvbnN0IHN0YXJ0c1dpdGhMb2NhbCA9IHJlcXVlc3RQYXRoLnN0YXJ0c1dpdGgobG9jYWxQYXRoKTtcbiAgICAgIGNvbnN0IHN0YXJ0c1dpdGhQdWJsaWMgPSByZXF1ZXN0UGF0aC5zdGFydHNXaXRoKHB1YmxpY1BhdGgpO1xuICAgICAgY29uc3QgcGF0aExlbmd0aFRvVXNlID1cbiAgICAgICAgc3RhcnRzV2l0aExvY2FsICYmIHN0YXJ0c1dpdGhQdWJsaWNcbiAgICAgICAgICA/IE1hdGgubWF4KGxvY2FsUGF0aC5sZW5ndGgsIHB1YmxpY1BhdGgubGVuZ3RoKVxuICAgICAgICAgIDogc3RhcnRzV2l0aExvY2FsXG4gICAgICAgICAgICA/IGxvY2FsUGF0aC5sZW5ndGhcbiAgICAgICAgICAgIDogcHVibGljUGF0aC5sZW5ndGg7XG5cbiAgICAgIGNvbnN0IG5ld1BhdGggPSBwYXRoLnBvc2l4LmpvaW4oJy8nLCBsb2NhbFBhdGgsICcvJywgcmVxdWVzdFBhdGguc2xpY2UocGF0aExlbmd0aFRvVXNlKSk7XG5cbiAgICAgIC8vIFVzZSB0aGUgbWV0aG9kIGZvciBsb2NhbCByb3V0aW5nXG4gICAgICByZXR1cm4gbWFrZVJvdXRhYmxlUGF0aChuZXdQYXRoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIG1ha2VSb3V0YWJsZVBhdGg7XG59XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIGZvciBhIHtyZXNwb25zZX0gb2JqZWN0LlxuLy8gVE9ETzogcGFzcyBhbG9uZyBhdXRoIGNvcnJlY3RseVxuZnVuY3Rpb24gaGFuZGxlQmF0Y2gocm91dGVyLCByZXEpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHJlcS5ib2R5LnJlcXVlc3RzKSkge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5JTlZBTElEX0pTT04sICdyZXF1ZXN0cyBtdXN0IGJlIGFuIGFycmF5Jyk7XG4gIH1cblxuICAvLyBUaGUgYmF0Y2ggcGF0aHMgYXJlIGFsbCBmcm9tIHRoZSByb290IG9mIG91ciBkb21haW4uXG4gIC8vIFRoYXQgbWVhbnMgdGhleSBpbmNsdWRlIHRoZSBBUEkgcHJlZml4LCB0aGF0IHRoZSBBUEkgaXMgbW91bnRlZFxuICAvLyB0by4gSG93ZXZlciwgb3VyIHByb21pc2Ugcm91dGVyIGRvZXMgbm90IHJvdXRlIHRoZSBhcGkgcHJlZml4LiBTb1xuICAvLyB3ZSBuZWVkIHRvIGZpZ3VyZSBvdXQgdGhlIEFQSSBwcmVmaXgsIHNvIHRoYXQgd2UgY2FuIHN0cmlwIGl0XG4gIC8vIGZyb20gYWxsIHRoZSBzdWJyZXF1ZXN0cy5cbiAgaWYgKCFyZXEub3JpZ2luYWxVcmwuZW5kc1dpdGgoYmF0Y2hQYXRoKSkge1xuICAgIHRocm93ICdpbnRlcm5hbCByb3V0aW5nIHByb2JsZW0gLSBleHBlY3RlZCB1cmwgdG8gZW5kIHdpdGggYmF0Y2gnO1xuICB9XG5cbiAgY29uc3QgbWFrZVJvdXRhYmxlUGF0aCA9IG1ha2VCYXRjaFJvdXRpbmdQYXRoRnVuY3Rpb24oXG4gICAgcmVxLm9yaWdpbmFsVXJsLFxuICAgIHJlcS5jb25maWcuc2VydmVyVVJMLFxuICAgIHJlcS5jb25maWcucHVibGljU2VydmVyVVJMXG4gICk7XG5cbiAgY29uc3QgYmF0Y2ggPSB0cmFuc2FjdGlvblJldHJpZXMgPT4ge1xuICAgIGxldCBpbml0aWFsUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIGlmIChyZXEuYm9keS50cmFuc2FjdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgaW5pdGlhbFByb21pc2UgPSByZXEuY29uZmlnLmRhdGFiYXNlLmNyZWF0ZVRyYW5zYWN0aW9uYWxTZXNzaW9uKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluaXRpYWxQcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc3QgcHJvbWlzZXMgPSByZXEuYm9keS5yZXF1ZXN0cy5tYXAocmVzdFJlcXVlc3QgPT4ge1xuICAgICAgICBjb25zdCByb3V0YWJsZVBhdGggPSBtYWtlUm91dGFibGVQYXRoKHJlc3RSZXF1ZXN0LnBhdGgpO1xuXG4gICAgICAgIC8vIENvbnN0cnVjdCBhIHJlcXVlc3QgdGhhdCB3ZSBjYW4gc2VuZCB0byBhIGhhbmRsZXJcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHtcbiAgICAgICAgICBib2R5OiByZXN0UmVxdWVzdC5ib2R5LFxuICAgICAgICAgIGNvbmZpZzogcmVxLmNvbmZpZyxcbiAgICAgICAgICBhdXRoOiByZXEuYXV0aCxcbiAgICAgICAgICBpbmZvOiByZXEuaW5mbyxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gcm91dGVyLnRyeVJvdXRlUmVxdWVzdChyZXN0UmVxdWVzdC5tZXRob2QsIHJvdXRhYmxlUGF0aCwgcmVxdWVzdCkudGhlbihcbiAgICAgICAgICByZXNwb25zZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiByZXNwb25zZS5yZXNwb25zZSB9O1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3I6IHsgY29kZTogZXJyb3IuY29kZSwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICAgIC50aGVuKHJlc3VsdHMgPT4ge1xuICAgICAgICAgIGlmIChyZXEuYm9keS50cmFuc2FjdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdHMuZmluZChyZXN1bHQgPT4gdHlwZW9mIHJlc3VsdC5lcnJvciA9PT0gJ29iamVjdCcpKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXEuY29uZmlnLmRhdGFiYXNlLmFib3J0VHJhbnNhY3Rpb25hbFNlc3Npb24oKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoeyByZXNwb25zZTogcmVzdWx0cyB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gcmVxLmNvbmZpZy5kYXRhYmFzZS5jb21taXRUcmFuc2FjdGlvbmFsU2Vzc2lvbigpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHJlc3BvbnNlOiByZXN1bHRzIH07XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4geyByZXNwb25zZTogcmVzdWx0cyB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBlcnJvciAmJlxuICAgICAgICAgICAgZXJyb3IucmVzcG9uc2UgJiZcbiAgICAgICAgICAgIGVycm9yLnJlc3BvbnNlLmZpbmQoXG4gICAgICAgICAgICAgIGVycm9ySXRlbSA9PiB0eXBlb2YgZXJyb3JJdGVtLmVycm9yID09PSAnb2JqZWN0JyAmJiBlcnJvckl0ZW0uZXJyb3IuY29kZSA9PT0gMjUxXG4gICAgICAgICAgICApICYmXG4gICAgICAgICAgICB0cmFuc2FjdGlvblJldHJpZXMgPiAwXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gYmF0Y2godHJhbnNhY3Rpb25SZXRyaWVzIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIGJhdGNoKDUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbW91bnRPbnRvLFxuICBtYWtlQmF0Y2hSb3V0aW5nUGF0aEZ1bmN0aW9uLFxufTtcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,