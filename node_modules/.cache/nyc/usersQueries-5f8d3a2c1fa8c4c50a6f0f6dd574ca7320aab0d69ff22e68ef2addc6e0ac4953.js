"use strict";function cov_26v7rr2ydf(){var path="/parse-server/lib/GraphQL/loaders/usersQueries.js";var hash="00ebe824b75ea487b3164af716c6784d0453998c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/GraphQL/loaders/usersQueries.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:56}},"2":{start:{line:8,column:15},end:{line:8,column:33}},"3":{start:{line:10,column:25},end:{line:10,column:79}},"4":{start:{line:12,column:12},end:{line:12,column:57}},"5":{start:{line:14,column:12},end:{line:14,column:57}},"6":{start:{line:16,column:23},end:{line:16,column:51}},"7":{start:{line:18,column:12},end:{line:18,column:33}},"8":{start:{line:20,column:39},end:{line:20,column:93}},"9":{start:{line:22,column:32},end:{line:86,column:1}},"10":{start:{line:26,column:6},end:{line:26,column:13}},"11":{start:{line:28,column:2},end:{line:30,column:3}},"12":{start:{line:29,column:4},end:{line:29,column:102}},"13":{start:{line:32,column:23},end:{line:32,column:40}},"14":{start:{line:33,column:25},end:{line:33,column:157}},"15":{start:{line:33,column:84},end:{line:33,column:112}},"16":{start:{line:33,column:127},end:{line:33,column:156}},"17":{start:{line:34,column:25},end:{line:34,column:84}},"18":{start:{line:37,column:6},end:{line:37,column:20}},"19":{start:{line:40,column:6},end:{line:40,column:20}},"20":{start:{line:42,column:2},end:{line:48,column:3}},"21":{start:{line:43,column:4},end:{line:45,column:6}},"22":{start:{line:46,column:9},end:{line:48,column:3}},"23":{start:{line:47,column:4},end:{line:47,column:21}},"24":{start:{line:50,column:2},end:{line:60,column:3}},"25":{start:{line:53,column:4},end:{line:59,column:7}},"26":{start:{line:62,column:18},end:{line:62,column:20}},"27":{start:{line:64,column:2},end:{line:66,column:3}},"28":{start:{line:65,column:4},end:{line:65,column:66}},"29":{start:{line:65,column:46},end:{line:65,column:54}},"30":{start:{line:68,column:2},end:{line:70,column:3}},"31":{start:{line:69,column:4},end:{line:69,column:82}},"32":{start:{line:69,column:57},end:{line:69,column:70}},"33":{start:{line:72,column:19},end:{line:75,column:47}},"34":{start:{line:77,column:2},end:{line:85,column:3}},"35":{start:{line:78,column:4},end:{line:78,column:102}},"36":{start:{line:80,column:17},end:{line:80,column:36}},"37":{start:{line:81,column:4},end:{line:84,column:6}},"38":{start:{line:88,column:0},end:{line:88,column:58}},"39":{start:{line:90,column:13},end:{line:108,column:1}},"40":{start:{line:91,column:2},end:{line:93,column:3}},"41":{start:{line:92,column:4},end:{line:92,column:11}},"42":{start:{line:95,column:2},end:{line:107,column:17}},"43":{start:{line:100,column:6},end:{line:104,column:7}},"44":{start:{line:101,column:8},end:{line:101,column:81}},"45":{start:{line:103,column:8},end:{line:103,column:42}},"46":{start:{line:110,column:0},end:{line:110,column:20}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:20,column:9},end:{line:20,column:31}},loc:{start:{line:20,column:37},end:{line:20,column:95}},line:20},"1":{name:"(anonymous_1)",decl:{start:{line:22,column:32},end:{line:22,column:33}},loc:{start:{line:22,column:82},end:{line:86,column:1}},line:22},"2":{name:"(anonymous_2)",decl:{start:{line:33,column:75},end:{line:33,column:76}},loc:{start:{line:33,column:84},end:{line:33,column:112}},line:33},"3":{name:"(anonymous_3)",decl:{start:{line:33,column:118},end:{line:33,column:119}},loc:{start:{line:33,column:127},end:{line:33,column:156}},line:33},"4":{name:"(anonymous_4)",decl:{start:{line:65,column:39},end:{line:65,column:40}},loc:{start:{line:65,column:46},end:{line:65,column:54}},line:65},"5":{name:"(anonymous_5)",decl:{start:{line:69,column:45},end:{line:69,column:46}},loc:{start:{line:69,column:57},end:{line:69,column:70}},line:69},"6":{name:"(anonymous_6)",decl:{start:{line:90,column:13},end:{line:90,column:14}},loc:{start:{line:90,column:35},end:{line:108,column:1}},line:90},"7":{name:"(anonymous_7)",decl:{start:{line:99,column:4},end:{line:99,column:5}},loc:{start:{line:99,column:54},end:{line:105,column:5}},line:99}},branchMap:{"0":{loc:{start:{line:20,column:46},end:{line:20,column:92}},type:"cond-expr",locations:[{start:{line:20,column:70},end:{line:20,column:73}},{start:{line:20,column:76},end:{line:20,column:92}}],line:20},"1":{loc:{start:{line:20,column:46},end:{line:20,column:67}},type:"binary-expr",locations:[{start:{line:20,column:46},end:{line:20,column:49}},{start:{line:20,column:53},end:{line:20,column:67}}],line:20},"2":{loc:{start:{line:28,column:2},end:{line:30,column:3}},type:"if",locations:[{start:{line:28,column:2},end:{line:30,column:3}},{start:{line:28,column:2},end:{line:30,column:3}}],line:28},"3":{loc:{start:{line:28,column:6},end:{line:28,column:33}},type:"binary-expr",locations:[{start:{line:28,column:6},end:{line:28,column:11}},{start:{line:28,column:15},end:{line:28,column:33}}],line:28},"4":{loc:{start:{line:42,column:2},end:{line:48,column:3}},type:"if",locations:[{start:{line:42,column:2},end:{line:48,column:3}},{start:{line:42,column:2},end:{line:48,column:3}}],line:42},"5":{loc:{start:{line:42,column:6},end:{line:42,column:33}},type:"binary-expr",locations:[{start:{line:42,column:6},end:{line:42,column:12}},{start:{line:42,column:16},end:{line:42,column:21}},{start:{line:42,column:25},end:{line:42,column:33}}],line:42},"6":{loc:{start:{line:46,column:9},end:{line:48,column:3}},type:"if",locations:[{start:{line:46,column:9},end:{line:48,column:3}},{start:{line:46,column:9},end:{line:48,column:3}}],line:46},"7":{loc:{start:{line:46,column:13},end:{line:46,column:29}},type:"binary-expr",locations:[{start:{line:46,column:13},end:{line:46,column:17}},{start:{line:46,column:21},end:{line:46,column:29}}],line:46},"8":{loc:{start:{line:50,column:2},end:{line:60,column:3}},type:"if",locations:[{start:{line:50,column:2},end:{line:60,column:3}},{start:{line:50,column:2},end:{line:60,column:3}}],line:50},"9":{loc:{start:{line:64,column:2},end:{line:66,column:3}},type:"if",locations:[{start:{line:64,column:2},end:{line:66,column:3}},{start:{line:64,column:2},end:{line:66,column:3}}],line:64},"10":{loc:{start:{line:68,column:2},end:{line:70,column:3}},type:"if",locations:[{start:{line:68,column:2},end:{line:70,column:3}},{start:{line:68,column:2},end:{line:70,column:3}}],line:68},"11":{loc:{start:{line:77,column:2},end:{line:85,column:3}},type:"if",locations:[{start:{line:77,column:2},end:{line:85,column:3}},{start:{line:77,column:2},end:{line:85,column:3}}],line:77},"12":{loc:{start:{line:77,column:6},end:{line:77,column:55}},type:"binary-expr",locations:[{start:{line:77,column:6},end:{line:77,column:23}},{start:{line:77,column:27},end:{line:77,column:55}}],line:77},"13":{loc:{start:{line:91,column:2},end:{line:93,column:3}},type:"if",locations:[{start:{line:91,column:2},end:{line:93,column:3}},{start:{line:91,column:2},end:{line:93,column:3}}],line:91}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},inputSourceMap:{version:3,sources:["../../../src/GraphQL/loaders/usersQueries.js"],names:["getUserFromSessionToken","context","queryInfo","keysPrefix","userId","info","config","sessionToken","Parse","Error","INVALID_SESSION_TOKEN","selectedFields","filter","field","startsWith","map","replace","keysAndInclude","keys","include","auth","Auth","isMaster","user","id","options","split","key","join","included","response","rest","find","objectId","clientVersion","results","length","load","parseGraphQLSchema","isUsersClassDisabled","addGraphQLQuery","description","type","GraphQLNonNull","viewerType","resolve","_source","_args","e","handleError"],mappings:"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",sourcesContent:["import { GraphQLNonNull } from 'graphql';\nimport getFieldNames from 'graphql-list-fields';\nimport Parse from 'parse/node';\nimport rest from '../../rest';\nimport { extractKeysAndInclude } from './parseClassTypes';\nimport { Auth } from '../../Auth';\n\nconst getUserFromSessionToken = async (context, queryInfo, keysPrefix, userId) => {\n  const { info, config } = context;\n  if (!info || !info.sessionToken) {\n    throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Invalid session token');\n  }\n  const sessionToken = info.sessionToken;\n  const selectedFields = getFieldNames(queryInfo)\n    .filter(field => field.startsWith(keysPrefix))\n    .map(field => field.replace(keysPrefix, ''));\n\n  const keysAndInclude = extractKeysAndInclude(selectedFields);\n  const { keys } = keysAndInclude;\n  let { include } = keysAndInclude;\n\n  if (userId && !keys && !include) {\n    return {\n      sessionToken,\n    };\n  } else if (keys && !include) {\n    include = 'user';\n  }\n\n  if (userId) {\n    // We need to re create the auth context\n    // to avoid security breach if userId is provided\n    context.auth = new Auth({\n      config,\n      isMaster: context.auth.isMaster,\n      user: { id: userId },\n    });\n  }\n\n  const options = {};\n  if (keys) {\n    options.keys = keys\n      .split(',')\n      .map(key => `${key}`)\n      .join(',');\n  }\n  if (include) {\n    options.include = include\n      .split(',')\n      .map(included => `${included}`)\n      .join(',');\n  }\n\n  const response = await rest.find(\n    config,\n    context.auth,\n    '_User',\n    // Get the user it self from auth object\n    { objectId: context.auth.user.id },\n    options,\n    info.clientVersion,\n    info.context\n  );\n  if (!response.results || response.results.length == 0) {\n    throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Invalid session token');\n  } else {\n    const user = response.results[0];\n    return {\n      sessionToken,\n      user,\n    };\n  }\n};\n\nconst load = parseGraphQLSchema => {\n  if (parseGraphQLSchema.isUsersClassDisabled) {\n    return;\n  }\n\n  parseGraphQLSchema.addGraphQLQuery(\n    'viewer',\n    {\n      description: 'The viewer query can be used to return the current user data.',\n      type: new GraphQLNonNull(parseGraphQLSchema.viewerType),\n      async resolve(_source, _args, context, queryInfo) {\n        try {\n          return await getUserFromSessionToken(context, queryInfo, 'user.', false);\n        } catch (e) {\n          parseGraphQLSchema.handleError(e);\n        }\n      },\n    },\n    true,\n    true\n  );\n};\n\nexport { load, getUserFromSessionToken };\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"00ebe824b75ea487b3164af716c6784d0453998c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_26v7rr2ydf=function(){return actualCoverage;};}return actualCoverage;}cov_26v7rr2ydf();cov_26v7rr2ydf().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_26v7rr2ydf().s[1]++;exports.getUserFromSessionToken=exports.load=void 0;var _graphql=(cov_26v7rr2ydf().s[2]++,require("graphql"));var _graphqlListFields=(cov_26v7rr2ydf().s[3]++,_interopRequireDefault(require("graphql-list-fields")));var _node=(cov_26v7rr2ydf().s[4]++,_interopRequireDefault(require("parse/node")));var _rest=(cov_26v7rr2ydf().s[5]++,_interopRequireDefault(require("../../rest")));var _parseClassTypes=(cov_26v7rr2ydf().s[6]++,require("./parseClassTypes"));var _Auth=(cov_26v7rr2ydf().s[7]++,require("../../Auth"));function _interopRequireDefault(obj){cov_26v7rr2ydf().f[0]++;cov_26v7rr2ydf().s[8]++;return(cov_26v7rr2ydf().b[1][0]++,obj)&&(cov_26v7rr2ydf().b[1][1]++,obj.__esModule)?(cov_26v7rr2ydf().b[0][0]++,obj):(cov_26v7rr2ydf().b[0][1]++,{default:obj});}cov_26v7rr2ydf().s[9]++;const getUserFromSessionToken=async(context,queryInfo,keysPrefix,userId)=>{cov_26v7rr2ydf().f[1]++;const{info,config}=(cov_26v7rr2ydf().s[10]++,context);cov_26v7rr2ydf().s[11]++;if((cov_26v7rr2ydf().b[3][0]++,!info)||(cov_26v7rr2ydf().b[3][1]++,!info.sessionToken)){cov_26v7rr2ydf().b[2][0]++;cov_26v7rr2ydf().s[12]++;throw new _node.default.Error(_node.default.Error.INVALID_SESSION_TOKEN,'Invalid session token');}else{cov_26v7rr2ydf().b[2][1]++;}const sessionToken=(cov_26v7rr2ydf().s[13]++,info.sessionToken);const selectedFields=(cov_26v7rr2ydf().s[14]++,(0,_graphqlListFields.default)(queryInfo).filter(field=>{cov_26v7rr2ydf().f[2]++;cov_26v7rr2ydf().s[15]++;return field.startsWith(keysPrefix);}).map(field=>{cov_26v7rr2ydf().f[3]++;cov_26v7rr2ydf().s[16]++;return field.replace(keysPrefix,'');}));const keysAndInclude=(cov_26v7rr2ydf().s[17]++,(0,_parseClassTypes.extractKeysAndInclude)(selectedFields));const{keys}=(cov_26v7rr2ydf().s[18]++,keysAndInclude);let{include}=(cov_26v7rr2ydf().s[19]++,keysAndInclude);cov_26v7rr2ydf().s[20]++;if((cov_26v7rr2ydf().b[5][0]++,userId)&&(cov_26v7rr2ydf().b[5][1]++,!keys)&&(cov_26v7rr2ydf().b[5][2]++,!include)){cov_26v7rr2ydf().b[4][0]++;cov_26v7rr2ydf().s[21]++;return{sessionToken};}else{cov_26v7rr2ydf().b[4][1]++;cov_26v7rr2ydf().s[22]++;if((cov_26v7rr2ydf().b[7][0]++,keys)&&(cov_26v7rr2ydf().b[7][1]++,!include)){cov_26v7rr2ydf().b[6][0]++;cov_26v7rr2ydf().s[23]++;include='user';}else{cov_26v7rr2ydf().b[6][1]++;}}cov_26v7rr2ydf().s[24]++;if(userId){cov_26v7rr2ydf().b[8][0]++;cov_26v7rr2ydf().s[25]++;// We need to re create the auth context
// to avoid security breach if userId is provided
context.auth=new _Auth.Auth({config,isMaster:context.auth.isMaster,user:{id:userId}});}else{cov_26v7rr2ydf().b[8][1]++;}const options=(cov_26v7rr2ydf().s[26]++,{});cov_26v7rr2ydf().s[27]++;if(keys){cov_26v7rr2ydf().b[9][0]++;cov_26v7rr2ydf().s[28]++;options.keys=keys.split(',').map(key=>{cov_26v7rr2ydf().f[4]++;cov_26v7rr2ydf().s[29]++;return`${key}`;}).join(',');}else{cov_26v7rr2ydf().b[9][1]++;}cov_26v7rr2ydf().s[30]++;if(include){cov_26v7rr2ydf().b[10][0]++;cov_26v7rr2ydf().s[31]++;options.include=include.split(',').map(included=>{cov_26v7rr2ydf().f[5]++;cov_26v7rr2ydf().s[32]++;return`${included}`;}).join(',');}else{cov_26v7rr2ydf().b[10][1]++;}const response=(cov_26v7rr2ydf().s[33]++,await _rest.default.find(config,context.auth,'_User',// Get the user it self from auth object
{objectId:context.auth.user.id},options,info.clientVersion,info.context));cov_26v7rr2ydf().s[34]++;if((cov_26v7rr2ydf().b[12][0]++,!response.results)||(cov_26v7rr2ydf().b[12][1]++,response.results.length==0)){cov_26v7rr2ydf().b[11][0]++;cov_26v7rr2ydf().s[35]++;throw new _node.default.Error(_node.default.Error.INVALID_SESSION_TOKEN,'Invalid session token');}else{cov_26v7rr2ydf().b[11][1]++;const user=(cov_26v7rr2ydf().s[36]++,response.results[0]);cov_26v7rr2ydf().s[37]++;return{sessionToken,user};}};cov_26v7rr2ydf().s[38]++;exports.getUserFromSessionToken=getUserFromSessionToken;cov_26v7rr2ydf().s[39]++;const load=parseGraphQLSchema=>{cov_26v7rr2ydf().f[6]++;cov_26v7rr2ydf().s[40]++;if(parseGraphQLSchema.isUsersClassDisabled){cov_26v7rr2ydf().b[13][0]++;cov_26v7rr2ydf().s[41]++;return;}else{cov_26v7rr2ydf().b[13][1]++;}cov_26v7rr2ydf().s[42]++;parseGraphQLSchema.addGraphQLQuery('viewer',{description:'The viewer query can be used to return the current user data.',type:new _graphql.GraphQLNonNull(parseGraphQLSchema.viewerType),async resolve(_source,_args,context,queryInfo){cov_26v7rr2ydf().f[7]++;cov_26v7rr2ydf().s[43]++;try{cov_26v7rr2ydf().s[44]++;return await getUserFromSessionToken(context,queryInfo,'user.',false);}catch(e){cov_26v7rr2ydf().s[45]++;parseGraphQLSchema.handleError(e);}}},true,true);};cov_26v7rr2ydf().s[46]++;exports.load=load;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9HcmFwaFFML2xvYWRlcnMvdXNlcnNRdWVyaWVzLmpzIl0sIm5hbWVzIjpbImdldFVzZXJGcm9tU2Vzc2lvblRva2VuIiwiY29udGV4dCIsInF1ZXJ5SW5mbyIsImtleXNQcmVmaXgiLCJ1c2VySWQiLCJpbmZvIiwiY29uZmlnIiwic2Vzc2lvblRva2VuIiwiUGFyc2UiLCJFcnJvciIsIklOVkFMSURfU0VTU0lPTl9UT0tFTiIsInNlbGVjdGVkRmllbGRzIiwiZmlsdGVyIiwiZmllbGQiLCJzdGFydHNXaXRoIiwibWFwIiwicmVwbGFjZSIsImtleXNBbmRJbmNsdWRlIiwia2V5cyIsImluY2x1ZGUiLCJhdXRoIiwiQXV0aCIsImlzTWFzdGVyIiwidXNlciIsImlkIiwib3B0aW9ucyIsInNwbGl0Iiwia2V5Iiwiam9pbiIsImluY2x1ZGVkIiwicmVzcG9uc2UiLCJyZXN0IiwiZmluZCIsIm9iamVjdElkIiwiY2xpZW50VmVyc2lvbiIsInJlc3VsdHMiLCJsZW5ndGgiLCJsb2FkIiwicGFyc2VHcmFwaFFMU2NoZW1hIiwiaXNVc2Vyc0NsYXNzRGlzYWJsZWQiLCJhZGRHcmFwaFFMUXVlcnkiLCJkZXNjcmlwdGlvbiIsInR5cGUiLCJHcmFwaFFMTm9uTnVsbCIsInZpZXdlclR5cGUiLCJyZXNvbHZlIiwiX3NvdXJjZSIsIl9hcmdzIiwiZSIsImhhbmRsZUVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxNQUFNQSx1QkFBdUIsR0FBRyxPQUFPQyxPQUFQLEVBQWdCQyxTQUFoQixFQUEyQkMsVUFBM0IsRUFBdUNDLE1BQXZDLEtBQWtEO0FBQ2hGLFFBQU07QUFBRUMsSUFBQUEsSUFBRjtBQUFRQyxJQUFBQTtBQUFSLE1BQW1CTCxPQUF6Qjs7QUFDQSxNQUFJLENBQUNJLElBQUQsSUFBUyxDQUFDQSxJQUFJLENBQUNFLFlBQW5CLEVBQWlDO0FBQy9CLFVBQU0sSUFB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Q0FBQ0UsZUFBbkIsQ0FDRSxRQURGLEVBRUU7QUFDRUMsSUFBQUEsV0FBVyxFQUFFLCtEQURmO0FBRUVDLElBQUFBLElBQUksRUFBRSxJQUFJQyx1QkFBSixDQUFtQkwsa0JBQWtCLENBQUNNLFVBQXRDLENBRlI7O0FBR0UsVUFBTUMsT0FBTixDQUFjQyxPQUFkLEVBQXVCQyxLQUF2QixFQUE4QjlDLE9BQTlCLEVBQXVDQyxTQUF2QyxFQUFrRDtBQUNoRCxVQUFJO0FBQ0YsZUFBTyxNQUFNRix1QkFBdUIsQ0FBQ0MsT0FBRCxFQUFVQyxTQUFWLEVBQXFCLE9BQXJCLEVBQThCLEtBQTlCLENBQXBDO0FBQ0QsT0FGRCxDQUVFLE9BQU84QyxDQUFQLEVBQVU7QUFDVlYsUUFBQUEsa0JBQWtCLENBQUNXLFdBQW5CLENBQStCRCxDQUEvQjtBQUNEO0FBQ0Y7O0FBVEgsR0FGRixFQWFFLElBYkYsRUFjRSxJQWRGO0FBZ0JELENBckJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JhcGhRTE5vbk51bGwgfSBmcm9tICdncmFwaHFsJztcbmltcG9ydCBnZXRGaWVsZE5hbWVzIGZyb20gJ2dyYXBocWwtbGlzdC1maWVsZHMnO1xuaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuaW1wb3J0IHJlc3QgZnJvbSAnLi4vLi4vcmVzdCc7XG5pbXBvcnQgeyBleHRyYWN0S2V5c0FuZEluY2x1ZGUgfSBmcm9tICcuL3BhcnNlQ2xhc3NUeXBlcyc7XG5pbXBvcnQgeyBBdXRoIH0gZnJvbSAnLi4vLi4vQXV0aCc7XG5cbmNvbnN0IGdldFVzZXJGcm9tU2Vzc2lvblRva2VuID0gYXN5bmMgKGNvbnRleHQsIHF1ZXJ5SW5mbywga2V5c1ByZWZpeCwgdXNlcklkKSA9PiB7XG4gIGNvbnN0IHsgaW5mbywgY29uZmlnIH0gPSBjb250ZXh0O1xuICBpZiAoIWluZm8gfHwgIWluZm8uc2Vzc2lvblRva2VuKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLklOVkFMSURfU0VTU0lPTl9UT0tFTiwgJ0ludmFsaWQgc2Vzc2lvbiB0b2tlbicpO1xuICB9XG4gIGNvbnN0IHNlc3Npb25Ub2tlbiA9IGluZm8uc2Vzc2lvblRva2VuO1xuICBjb25zdCBzZWxlY3RlZEZpZWxkcyA9IGdldEZpZWxkTmFtZXMocXVlcnlJbmZvKVxuICAgIC5maWx0ZXIoZmllbGQgPT4gZmllbGQuc3RhcnRzV2l0aChrZXlzUHJlZml4KSlcbiAgICAubWFwKGZpZWxkID0+IGZpZWxkLnJlcGxhY2Uoa2V5c1ByZWZpeCwgJycpKTtcblxuICBjb25zdCBrZXlzQW5kSW5jbHVkZSA9IGV4dHJhY3RLZXlzQW5kSW5jbHVkZShzZWxlY3RlZEZpZWxkcyk7XG4gIGNvbnN0IHsga2V5cyB9ID0ga2V5c0FuZEluY2x1ZGU7XG4gIGxldCB7IGluY2x1ZGUgfSA9IGtleXNBbmRJbmNsdWRlO1xuXG4gIGlmICh1c2VySWQgJiYgIWtleXMgJiYgIWluY2x1ZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2Vzc2lvblRva2VuLFxuICAgIH07XG4gIH0gZWxzZSBpZiAoa2V5cyAmJiAhaW5jbHVkZSkge1xuICAgIGluY2x1ZGUgPSAndXNlcic7XG4gIH1cblxuICBpZiAodXNlcklkKSB7XG4gICAgLy8gV2UgbmVlZCB0byByZSBjcmVhdGUgdGhlIGF1dGggY29udGV4dFxuICAgIC8vIHRvIGF2b2lkIHNlY3VyaXR5IGJyZWFjaCBpZiB1c2VySWQgaXMgcHJvdmlkZWRcbiAgICBjb250ZXh0LmF1dGggPSBuZXcgQXV0aCh7XG4gICAgICBjb25maWcsXG4gICAgICBpc01hc3RlcjogY29udGV4dC5hdXRoLmlzTWFzdGVyLFxuICAgICAgdXNlcjogeyBpZDogdXNlcklkIH0sXG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBvcHRpb25zID0ge307XG4gIGlmIChrZXlzKSB7XG4gICAgb3B0aW9ucy5rZXlzID0ga2V5c1xuICAgICAgLnNwbGl0KCcsJylcbiAgICAgIC5tYXAoa2V5ID0+IGAke2tleX1gKVxuICAgICAgLmpvaW4oJywnKTtcbiAgfVxuICBpZiAoaW5jbHVkZSkge1xuICAgIG9wdGlvbnMuaW5jbHVkZSA9IGluY2x1ZGVcbiAgICAgIC5zcGxpdCgnLCcpXG4gICAgICAubWFwKGluY2x1ZGVkID0+IGAke2luY2x1ZGVkfWApXG4gICAgICAuam9pbignLCcpO1xuICB9XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXN0LmZpbmQoXG4gICAgY29uZmlnLFxuICAgIGNvbnRleHQuYXV0aCxcbiAgICAnX1VzZXInLFxuICAgIC8vIEdldCB0aGUgdXNlciBpdCBzZWxmIGZyb20gYXV0aCBvYmplY3RcbiAgICB7IG9iamVjdElkOiBjb250ZXh0LmF1dGgudXNlci5pZCB9LFxuICAgIG9wdGlvbnMsXG4gICAgaW5mby5jbGllbnRWZXJzaW9uLFxuICAgIGluZm8uY29udGV4dFxuICApO1xuICBpZiAoIXJlc3BvbnNlLnJlc3VsdHMgfHwgcmVzcG9uc2UucmVzdWx0cy5sZW5ndGggPT0gMCkge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5JTlZBTElEX1NFU1NJT05fVE9LRU4sICdJbnZhbGlkIHNlc3Npb24gdG9rZW4nKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB1c2VyID0gcmVzcG9uc2UucmVzdWx0c1swXTtcbiAgICByZXR1cm4ge1xuICAgICAgc2Vzc2lvblRva2VuLFxuICAgICAgdXNlcixcbiAgICB9O1xuICB9XG59O1xuXG5jb25zdCBsb2FkID0gcGFyc2VHcmFwaFFMU2NoZW1hID0+IHtcbiAgaWYgKHBhcnNlR3JhcGhRTFNjaGVtYS5pc1VzZXJzQ2xhc3NEaXNhYmxlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHBhcnNlR3JhcGhRTFNjaGVtYS5hZGRHcmFwaFFMUXVlcnkoXG4gICAgJ3ZpZXdlcicsXG4gICAge1xuICAgICAgZGVzY3JpcHRpb246ICdUaGUgdmlld2VyIHF1ZXJ5IGNhbiBiZSB1c2VkIHRvIHJldHVybiB0aGUgY3VycmVudCB1c2VyIGRhdGEuJyxcbiAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChwYXJzZUdyYXBoUUxTY2hlbWEudmlld2VyVHlwZSksXG4gICAgICBhc3luYyByZXNvbHZlKF9zb3VyY2UsIF9hcmdzLCBjb250ZXh0LCBxdWVyeUluZm8pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gYXdhaXQgZ2V0VXNlckZyb21TZXNzaW9uVG9rZW4oY29udGV4dCwgcXVlcnlJbmZvLCAndXNlci4nLCBmYWxzZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBwYXJzZUdyYXBoUUxTY2hlbWEuaGFuZGxlRXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgICB0cnVlLFxuICAgIHRydWVcbiAgKTtcbn07XG5cbmV4cG9ydCB7IGxvYWQsIGdldFVzZXJGcm9tU2Vzc2lvblRva2VuIH07XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,