{"version":3,"sources":["../../src/Deprecator/Deprecations.js"],"names":["module","exports","optionKey","changeNewDefault","solution"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,CACf;AACEC,EAAAA,SAAS,EAAE,cADb;AAEEC,EAAAA,gBAAgB,EAAE,MAFpB;AAGEC,EAAAA,QAAQ,EACN;AAJJ,CADe,EAOf;AAAEF,EAAAA,SAAS,EAAE,qBAAb;AAAoCC,EAAAA,gBAAgB,EAAE;AAAtD,CAPe,CAAjB","sourcesContent":["/**\n * The deprecations.\n *\n * Add deprecations to the array using the following keys:\n * - `optionKey` {String}: The option key incl. its path, e.g. `security.enableCheck`.\n * - `envKey` {String}: The environment key, e.g. `PARSE_SERVER_SECURITY`.\n * - `changeNewKey` {String}: Set the new key name if the current key will be replaced,\n * or set to an empty string if the current key will be removed without replacement.\n * - `changeNewDefault` {String}: Set the new default value if the key's default value\n * will change in a future version.\n * - `solution`: The instruction to resolve this deprecation warning. Optional. This\n * instruction must not include the deprecation warning which is auto-generated.\n * It should only contain additional instruction regarding the deprecation if\n * necessary.\n *\n * If there are no deprecations, this must return an empty array.\n */\nmodule.exports = [\n  {\n    optionKey: 'directAccess',\n    changeNewDefault: 'true',\n    solution:\n      \"Additionally, the environment variable 'PARSE_SERVER_ENABLE_EXPERIMENTAL_DIRECT_ACCESS' will be deprecated and renamed to 'PARSE_SERVER_DIRECT_ACCESS' in a future version; it is currently possible to use either one.\",\n  },\n  { optionKey: 'enforcePrivateUsers', changeNewDefault: 'true' },\n];\n"]}