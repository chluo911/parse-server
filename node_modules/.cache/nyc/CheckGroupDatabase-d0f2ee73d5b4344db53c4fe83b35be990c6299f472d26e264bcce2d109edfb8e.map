{"version":3,"sources":["../../../src/Security/CheckGroups/CheckGroupDatabase.js"],"names":["CheckGroupDatabase","CheckGroup","setName","setChecks","config","Config","get","Parse","applicationId","databaseAdapter","database","adapter","databaseUrl","_uri","Check","title","warning","solution","check","password","match","hasUpperCase","test","hasLowerCase","hasNumbers","hasNonAlphasNumerics","length","module","exports"],"mappings":";;AAIA;;AACA;;AACA;;AACA;;;;AAPA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA,MAAMA,kBAAN,SAAiCC,mBAAjC,CAA4C;AAC1CC,EAAAA,OAAO,GAAG;AACR,WAAO,UAAP;AACD;;AACDC,EAAAA,SAAS,GAAG;AACV,UAAMC,MAAM,GAAGC,gBAAOC,GAAP,CAAWC,cAAMC,aAAjB,CAAf;;AACA,UAAMC,eAAe,GAAGL,MAAM,CAACM,QAAP,CAAgBC,OAAxC;AACA,UAAMC,WAAW,GAAGH,eAAe,CAACI,IAApC;AACA,WAAO,CACL,IAAIC,YAAJ,CAAU;AACRC,MAAAA,KAAK,EAAE,0BADC;AAERC,MAAAA,OAAO,EAAE,0EAFD;AAGRC,MAAAA,QAAQ,EAAE,qIAHF;AAIRC,MAAAA,KAAK,EAAE,MAAM;AACX,cAAMC,QAAQ,GAAGP,WAAW,CAACQ,KAAZ,CAAkB,gBAAlB,EAAoC,CAApC,CAAjB;AACA,cAAMC,YAAY,GAAG,QAAQC,IAAR,CAAaH,QAAb,CAArB;AACA,cAAMI,YAAY,GAAG,QAAQD,IAAR,CAAaH,QAAb,CAArB;AACA,cAAMK,UAAU,GAAG,KAAKF,IAAL,CAAUH,QAAV,CAAnB;AACA,cAAMM,oBAAoB,GAAG,KAAKH,IAAL,CAAUH,QAAV,CAA7B,CALW,CAMX;;AACA,YAAIA,QAAQ,CAACO,MAAT,GAAkB,EAAtB,EAA0B;AACxB,gBAAM,CAAN;AACD,SATU,CAUX;;;AACA,YAAIL,YAAY,GAAGE,YAAf,GAA8BC,UAA9B,GAA2CC,oBAA3C,GAAkE,CAAtE,EAAyE;AACvE,gBAAM,CAAN;AACD;AACF;AAlBO,KAAV,CADK,CAAP;AAsBD;;AA9ByC;;AAiC5CE,MAAM,CAACC,OAAP,GAAiB5B,kBAAjB","sourcesContent":["/**\n * @module SecurityCheck\n */\n\nimport { Check } from '../Check';\nimport CheckGroup from '../CheckGroup';\nimport Config from '../../Config';\nimport Parse from 'parse/node';\n\n/**\n* The security checks group for Parse Server configuration.\n* Checks common Parse Server parameters such as access keys.\n*/\nclass CheckGroupDatabase extends CheckGroup {\n  setName() {\n    return 'Database';\n  }\n  setChecks() {\n    const config = Config.get(Parse.applicationId);\n    const databaseAdapter = config.database.adapter;\n    const databaseUrl = databaseAdapter._uri;\n    return [\n      new Check({\n        title: 'Secure database password',\n        warning: 'The database password is insecure and vulnerable to brute force attacks.',\n        solution: 'Choose a longer and/or more complex password with a combination of upper- and lowercase characters, numbers and special characters.',\n        check: () => {\n          const password = databaseUrl.match(/\\/\\/\\S+:(\\S+)@/)[1];\n          const hasUpperCase = /[A-Z]/.test(password);\n          const hasLowerCase = /[a-z]/.test(password);\n          const hasNumbers = /\\d/.test(password);\n          const hasNonAlphasNumerics = /\\W/.test(password);\n          // Ensure length\n          if (password.length < 14) {\n            throw 1;\n          }\n          // Ensure at least 3 out of 4 requirements passed\n          if (hasUpperCase + hasLowerCase + hasNumbers + hasNonAlphasNumerics < 3) {\n            throw 1;\n          }\n        },\n      }),\n    ];\n  }\n}\n\nmodule.exports = CheckGroupDatabase;\n"]}