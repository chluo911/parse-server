"use strict";function cov_hs1npx9xj(){var path="/parse-server/lib/Auth.js";var hash="2b745e961ce91ef3e34ffeec23552b35df34b43a";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Auth.js",statementMap:{"0":{start:{line:3,column:18},end:{line:3,column:40}},"1":{start:{line:5,column:14},end:{line:5,column:35}},"2":{start:{line:18,column:2},end:{line:18,column:23}},"3":{start:{line:19,column:2},end:{line:19,column:77}},"4":{start:{line:20,column:2},end:{line:20,column:39}},"5":{start:{line:21,column:2},end:{line:21,column:27}},"6":{start:{line:22,column:2},end:{line:22,column:19}},"7":{start:{line:23,column:2},end:{line:23,column:31}},"8":{start:{line:26,column:2},end:{line:26,column:22}},"9":{start:{line:27,column:2},end:{line:27,column:28}},"10":{start:{line:28,column:2},end:{line:28,column:26}},"11":{start:{line:33,column:0},end:{line:43,column:2}},"12":{start:{line:34,column:2},end:{line:36,column:3}},"13":{start:{line:35,column:4},end:{line:35,column:17}},"14":{start:{line:38,column:2},end:{line:40,column:3}},"15":{start:{line:39,column:4},end:{line:39,column:17}},"16":{start:{line:42,column:2},end:{line:42,column:14}},"17":{start:{line:47,column:2},end:{line:50,column:5}},"18":{start:{line:55,column:2},end:{line:59,column:5}},"19":{start:{line:64,column:2},end:{line:67,column:5}},"20":{start:{line:71,column:31},end:{line:139,column:1}},"21":{start:{line:77,column:2},end:{line:77,column:72}},"22":{start:{line:79,column:2},end:{line:92,column:3}},"23":{start:{line:80,column:21},end:{line:80,column:65}},"24":{start:{line:82,column:4},end:{line:91,column:5}},"25":{start:{line:83,column:25},end:{line:83,column:56}},"26":{start:{line:84,column:6},end:{line:90,column:10}},"27":{start:{line:96,column:2},end:{line:109,column:3}},"28":{start:{line:97,column:24},end:{line:100,column:5}},"29":{start:{line:101,column:18},end:{line:103,column:19}},"30":{start:{line:104,column:4},end:{line:104,column:46}},"31":{start:{line:106,column:4},end:{line:108,column:33}},"32":{start:{line:108,column:19},end:{line:108,column:31}},"33":{start:{line:111,column:2},end:{line:113,column:3}},"34":{start:{line:112,column:4},end:{line:112,column:86}},"35":{start:{line:115,column:14},end:{line:115,column:24}},"36":{start:{line:116,column:20},end:{line:116,column:89}},"37":{start:{line:118,column:2},end:{line:120,column:3}},"38":{start:{line:119,column:4},end:{line:119,column:90}},"39":{start:{line:122,column:14},end:{line:122,column:32}},"40":{start:{line:123,column:2},end:{line:123,column:22}},"41":{start:{line:124,column:2},end:{line:124,column:29}},"42":{start:{line:125,column:2},end:{line:125,column:37}},"43":{start:{line:127,column:2},end:{line:129,column:3}},"44":{start:{line:128,column:4},end:{line:128,column:48}},"45":{start:{line:131,column:21},end:{line:131,column:47}},"46":{start:{line:132,column:2},end:{line:138,column:5}},"47":{start:{line:141,column:35},end:{line:169,column:1}},"48":{start:{line:146,column:20},end:{line:148,column:3}},"49":{start:{line:149,column:14},end:{line:151,column:17}},"50":{start:{line:152,column:2},end:{line:168,column:5}},"51":{start:{line:153,column:18},end:{line:153,column:34}},"52":{start:{line:155,column:4},end:{line:157,column:5}},"53":{start:{line:156,column:6},end:{line:156,column:95}},"54":{start:{line:159,column:16},end:{line:159,column:26}},"55":{start:{line:160,column:4},end:{line:160,column:28}},"56":{start:{line:161,column:23},end:{line:161,column:49}},"57":{start:{line:162,column:4},end:{line:167,column:7}},"58":{start:{line:172,column:0},end:{line:187,column:2}},"59":{start:{line:173,column:2},end:{line:175,column:3}},"60":{start:{line:174,column:4},end:{line:174,column:31}},"61":{start:{line:177,column:2},end:{line:179,column:3}},"62":{start:{line:178,column:4},end:{line:178,column:43}},"63":{start:{line:181,column:2},end:{line:183,column:3}},"64":{start:{line:182,column:4},end:{line:182,column:28}},"65":{start:{line:185,column:2},end:{line:185,column:39}},"66":{start:{line:186,column:2},end:{line:186,column:26}},"67":{start:{line:189,column:0},end:{line:209,column:2}},"68":{start:{line:191,column:18},end:{line:191,column:20}},"69":{start:{line:193,column:2},end:{line:206,column:3}},"70":{start:{line:194,column:22},end:{line:200,column:5}},"71":{start:{line:201,column:4},end:{line:201,column:119}},"72":{start:{line:201,column:97},end:{line:201,column:117}},"73":{start:{line:203,column:4},end:{line:205,column:7}},"74":{start:{line:203,column:81},end:{line:203,column:110}},"75":{start:{line:208,column:2},end:{line:208,column:17}},"76":{start:{line:212,column:0},end:{line:251,column:2}},"77":{start:{line:213,column:2},end:{line:221,column:3}},"78":{start:{line:214,column:24},end:{line:214,column:73}},"79":{start:{line:216,column:4},end:{line:220,column:5}},"80":{start:{line:217,column:6},end:{line:217,column:31}},"81":{start:{line:218,column:6},end:{line:218,column:35}},"82":{start:{line:219,column:6},end:{line:219,column:25}},"83":{start:{line:224,column:18},end:{line:224,column:46}},"84":{start:{line:226,column:2},end:{line:232,column:3}},"85":{start:{line:227,column:4},end:{line:227,column:24}},"86":{start:{line:228,column:4},end:{line:228,column:29}},"87":{start:{line:229,column:4},end:{line:229,column:28}},"88":{start:{line:230,column:4},end:{line:230,column:22}},"89":{start:{line:231,column:4},end:{line:231,column:26}},"90":{start:{line:234,column:19},end:{line:241,column:4}},"91":{start:{line:235,column:4},end:{line:235,column:25}},"92":{start:{line:236,column:4},end:{line:236,column:27}},"93":{start:{line:237,column:4},end:{line:237,column:13}},"94":{start:{line:243,column:20},end:{line:243,column:88}},"95":{start:{line:244,column:2},end:{line:246,column:5}},"96":{start:{line:245,column:4},end:{line:245,column:23}},"97":{start:{line:247,column:2},end:{line:247,column:27}},"98":{start:{line:248,column:2},end:{line:248,column:26}},"99":{start:{line:249,column:2},end:{line:249,column:20}},"100":{start:{line:250,column:2},end:{line:250,column:24}},"101":{start:{line:253,column:0},end:{line:260,column:2}},"102":{start:{line:254,column:2},end:{line:256,column:3}},"103":{start:{line:255,column:4},end:{line:255,column:17}},"104":{start:{line:258,column:2},end:{line:258,column:72}},"105":{start:{line:259,column:2},end:{line:259,column:14}},"106":{start:{line:262,column:0},end:{line:290,column:2}},"107":{start:{line:263,column:18},end:{line:263,column:20}},"108":{start:{line:265,column:2},end:{line:287,column:3}},"109":{start:{line:266,column:4},end:{line:272,column:7}},"110":{start:{line:267,column:19},end:{line:267,column:47}},"111":{start:{line:268,column:6},end:{line:268,column:19}},"112":{start:{line:269,column:6},end:{line:269,column:18}},"113":{start:{line:270,column:23},end:{line:270,column:52}},"114":{start:{line:274,column:18},end:{line:280,column:6}},"115":{start:{line:275,column:6},end:{line:279,column:8}},"116":{start:{line:281,column:22},end:{line:285,column:5}},"117":{start:{line:286,column:4},end:{line:286,column:119}},"118":{start:{line:286,column:97},end:{line:286,column:117}},"119":{start:{line:289,column:2},end:{line:289,column:17}},"120":{start:{line:293,column:0},end:{line:326,column:2}},"121":{start:{line:294,column:14},end:{line:298,column:4}},"122":{start:{line:295,column:23},end:{line:295,column:52}},"123":{start:{line:296,column:4},end:{line:296,column:32}},"124":{start:{line:297,column:4},end:{line:297,column:22}},"125":{start:{line:300,column:2},end:{line:302,column:3}},"126":{start:{line:301,column:4},end:{line:301,column:48}},"127":{start:{line:304,column:2},end:{line:325,column:5}},"128":{start:{line:306,column:4},end:{line:308,column:5}},"129":{start:{line:307,column:6},end:{line:307,column:36}},"130":{start:{line:311,column:22},end:{line:318,column:6}},"131":{start:{line:312,column:6},end:{line:312,column:33}},"132":{start:{line:313,column:6},end:{line:313,column:35}},"133":{start:{line:314,column:6},end:{line:314,column:18}},"134":{start:{line:320,column:4},end:{line:320,column:42}},"135":{start:{line:322,column:4},end:{line:322,column:80}},"136":{start:{line:324,column:4},end:{line:324,column:48}},"137":{start:{line:328,column:0},end:{line:335,column:2}}},fnMap:{"0":{name:"Auth",decl:{start:{line:10,column:9},end:{line:10,column:13}},loc:{start:{line:17,column:3},end:{line:29,column:1}},line:17},"1":{name:"(anonymous_1)",decl:{start:{line:33,column:35},end:{line:33,column:36}},loc:{start:{line:33,column:47},end:{line:43,column:1}},line:33},"2":{name:"master",decl:{start:{line:46,column:9},end:{line:46,column:15}},loc:{start:{line:46,column:24},end:{line:51,column:1}},line:46},"3":{name:"readOnly",decl:{start:{line:54,column:9},end:{line:54,column:17}},loc:{start:{line:54,column:26},end:{line:60,column:1}},line:54},"4":{name:"nobody",decl:{start:{line:63,column:9},end:{line:63,column:15}},loc:{start:{line:63,column:24},end:{line:68,column:1}},line:63},"5":{name:"(anonymous_5)",decl:{start:{line:71,column:31},end:{line:71,column:32}},loc:{start:{line:76,column:3},end:{line:139,column:1}},line:76},"6":{name:"(anonymous_6)",decl:{start:{line:108,column:12},end:{line:108,column:13}},loc:{start:{line:108,column:19},end:{line:108,column:31}},line:108},"7":{name:"(anonymous_7)",decl:{start:{line:141,column:35},end:{line:141,column:36}},loc:{start:{line:145,column:3},end:{line:169,column:1}},line:145},"8":{name:"(anonymous_8)",decl:{start:{line:152,column:30},end:{line:152,column:31}},loc:{start:{line:152,column:42},end:{line:168,column:3}},line:152},"9":{name:"(anonymous_9)",decl:{start:{line:172,column:30},end:{line:172,column:31}},loc:{start:{line:172,column:42},end:{line:187,column:1}},line:172},"10":{name:"(anonymous_10)",decl:{start:{line:189,column:33},end:{line:189,column:34}},loc:{start:{line:189,column:51},end:{line:209,column:1}},line:189},"11":{name:"(anonymous_11)",decl:{start:{line:201,column:87},end:{line:201,column:88}},loc:{start:{line:201,column:97},end:{line:201,column:117}},line:201},"12":{name:"(anonymous_12)",decl:{start:{line:203,column:71},end:{line:203,column:72}},loc:{start:{line:203,column:81},end:{line:203,column:110}},line:203},"13":{name:"(anonymous_13)",decl:{start:{line:212,column:28},end:{line:212,column:29}},loc:{start:{line:212,column:46},end:{line:251,column:1}},line:212},"14":{name:"(anonymous_14)",decl:{start:{line:234,column:34},end:{line:234,column:35}},loc:{start:{line:234,column:44},end:{line:238,column:3}},line:234},"15":{name:"(anonymous_15)",decl:{start:{line:244,column:33},end:{line:244,column:34}},loc:{start:{line:244,column:38},end:{line:246,column:3}},line:244},"16":{name:"(anonymous_16)",decl:{start:{line:253,column:28},end:{line:253,column:29}},loc:{start:{line:253,column:40},end:{line:260,column:1}},line:253},"17":{name:"(anonymous_17)",decl:{start:{line:262,column:31},end:{line:262,column:32}},loc:{start:{line:262,column:52},end:{line:290,column:1}},line:262},"18":{name:"(anonymous_18)",decl:{start:{line:266,column:67},end:{line:266,column:68}},loc:{start:{line:266,column:73},end:{line:270,column:5}},line:266},"19":{name:"(anonymous_19)",decl:{start:{line:270,column:13},end:{line:270,column:14}},loc:{start:{line:270,column:23},end:{line:270,column:52}},line:270},"20":{name:"(anonymous_20)",decl:{start:{line:274,column:26},end:{line:274,column:27}},loc:{start:{line:274,column:32},end:{line:280,column:5}},line:274},"21":{name:"(anonymous_21)",decl:{start:{line:286,column:87},end:{line:286,column:88}},loc:{start:{line:286,column:97},end:{line:286,column:117}},line:286},"22":{name:"(anonymous_22)",decl:{start:{line:293,column:45},end:{line:293,column:46}},loc:{start:{line:293,column:95},end:{line:326,column:1}},line:293},"23":{name:"(anonymous_23)",decl:{start:{line:294,column:29},end:{line:294,column:30}},loc:{start:{line:294,column:39},end:{line:298,column:3}},line:294},"24":{name:"(anonymous_24)",decl:{start:{line:304,column:38},end:{line:304,column:39}},loc:{start:{line:304,column:49},end:{line:323,column:3}},line:304},"25":{name:"(anonymous_25)",decl:{start:{line:311,column:37},end:{line:311,column:38}},loc:{start:{line:311,column:53},end:{line:315,column:5}},line:311},"26":{name:"(anonymous_26)",decl:{start:{line:323,column:10},end:{line:323,column:11}},loc:{start:{line:323,column:19},end:{line:325,column:3}},line:323}},branchMap:{"0":{loc:{start:{line:12,column:2},end:{line:12,column:29}},type:"default-arg",locations:[{start:{line:12,column:20},end:{line:12,column:29}}],line:12},"1":{loc:{start:{line:13,column:2},end:{line:13,column:18}},type:"default-arg",locations:[{start:{line:13,column:13},end:{line:13,column:18}}],line:13},"2":{loc:{start:{line:14,column:2},end:{line:14,column:20}},type:"default-arg",locations:[{start:{line:14,column:15},end:{line:14,column:20}}],line:14},"3":{loc:{start:{line:19,column:25},end:{line:19,column:76}},type:"binary-expr",locations:[{start:{line:19,column:25},end:{line:19,column:40}},{start:{line:19,column:44},end:{line:19,column:50}},{start:{line:19,column:54},end:{line:19,column:76}}],line:19},"4":{loc:{start:{line:34,column:2},end:{line:36,column:3}},type:"if",locations:[{start:{line:34,column:2},end:{line:36,column:3}},{start:{line:34,column:2},end:{line:36,column:3}}],line:34},"5":{loc:{start:{line:38,column:2},end:{line:40,column:3}},type:"if",locations:[{start:{line:38,column:2},end:{line:40,column:3}},{start:{line:38,column:2},end:{line:40,column:3}}],line:38},"6":{loc:{start:{line:77,column:20},end:{line:77,column:71}},type:"binary-expr",locations:[{start:{line:77,column:20},end:{line:77,column:35}},{start:{line:77,column:39},end:{line:77,column:45}},{start:{line:77,column:49},end:{line:77,column:71}}],line:77},"7":{loc:{start:{line:79,column:2},end:{line:92,column:3}},type:"if",locations:[{start:{line:79,column:2},end:{line:92,column:3}},{start:{line:79,column:2},end:{line:92,column:3}}],line:79},"8":{loc:{start:{line:82,column:4},end:{line:91,column:5}},type:"if",locations:[{start:{line:82,column:4},end:{line:91,column:5}},{start:{line:82,column:4},end:{line:91,column:5}}],line:82},"9":{loc:{start:{line:96,column:2},end:{line:109,column:3}},type:"if",locations:[{start:{line:96,column:2},end:{line:109,column:3}},{start:{line:96,column:2},end:{line:109,column:3}}],line:96},"10":{loc:{start:{line:111,column:2},end:{line:113,column:3}},type:"if",locations:[{start:{line:111,column:2},end:{line:113,column:3}},{start:{line:111,column:2},end:{line:113,column:3}}],line:111},"11":{loc:{start:{line:111,column:6},end:{line:111,column:49}},type:"binary-expr",locations:[{start:{line:111,column:6},end:{line:111,column:26}},{start:{line:111,column:30},end:{line:111,column:49}}],line:111},"12":{loc:{start:{line:116,column:20},end:{line:116,column:89}},type:"cond-expr",locations:[{start:{line:116,column:43},end:{line:116,column:77}},{start:{line:116,column:80},end:{line:116,column:89}}],line:116},"13":{loc:{start:{line:118,column:2},end:{line:120,column:3}},type:"if",locations:[{start:{line:118,column:2},end:{line:120,column:3}},{start:{line:118,column:2},end:{line:120,column:3}}],line:118},"14":{loc:{start:{line:127,column:2},end:{line:129,column:3}},type:"if",locations:[{start:{line:127,column:2},end:{line:129,column:3}},{start:{line:127,column:2},end:{line:129,column:3}}],line:127},"15":{loc:{start:{line:155,column:4},end:{line:157,column:5}},type:"if",locations:[{start:{line:155,column:4},end:{line:157,column:5}},{start:{line:155,column:4},end:{line:157,column:5}}],line:155},"16":{loc:{start:{line:173,column:2},end:{line:175,column:3}},type:"if",locations:[{start:{line:173,column:2},end:{line:175,column:3}},{start:{line:173,column:2},end:{line:175,column:3}}],line:173},"17":{loc:{start:{line:173,column:6},end:{line:173,column:33}},type:"binary-expr",locations:[{start:{line:173,column:6},end:{line:173,column:19}},{start:{line:173,column:23},end:{line:173,column:33}}],line:173},"18":{loc:{start:{line:177,column:2},end:{line:179,column:3}},type:"if",locations:[{start:{line:177,column:2},end:{line:179,column:3}},{start:{line:177,column:2},end:{line:179,column:3}}],line:177},"19":{loc:{start:{line:181,column:2},end:{line:183,column:3}},type:"if",locations:[{start:{line:181,column:2},end:{line:183,column:3}},{start:{line:181,column:2},end:{line:183,column:3}}],line:181},"20":{loc:{start:{line:193,column:2},end:{line:206,column:3}},type:"if",locations:[{start:{line:193,column:2},end:{line:206,column:3}},{start:{line:193,column:2},end:{line:206,column:3}}],line:193},"21":{loc:{start:{line:213,column:2},end:{line:221,column:3}},type:"if",locations:[{start:{line:213,column:2},end:{line:221,column:3}},{start:{line:213,column:2},end:{line:221,column:3}}],line:213},"22":{loc:{start:{line:216,column:4},end:{line:220,column:5}},type:"if",locations:[{start:{line:216,column:4},end:{line:220,column:5}},{start:{line:216,column:4},end:{line:220,column:5}}],line:216},"23":{loc:{start:{line:226,column:2},end:{line:232,column:3}},type:"if",locations:[{start:{line:226,column:2},end:{line:232,column:3}},{start:{line:226,column:2},end:{line:232,column:3}}],line:226},"24":{loc:{start:{line:254,column:2},end:{line:256,column:3}},type:"if",locations:[{start:{line:254,column:2},end:{line:256,column:3}},{start:{line:254,column:2},end:{line:256,column:3}}],line:254},"25":{loc:{start:{line:265,column:2},end:{line:287,column:3}},type:"if",locations:[{start:{line:265,column:2},end:{line:287,column:3}},{start:{line:265,column:2},end:{line:287,column:3}}],line:265},"26":{loc:{start:{line:293,column:64},end:{line:293,column:74}},type:"default-arg",locations:[{start:{line:293,column:72},end:{line:293,column:74}}],line:293},"27":{loc:{start:{line:293,column:76},end:{line:293,column:93}},type:"default-arg",locations:[{start:{line:293,column:91},end:{line:293,column:93}}],line:293},"28":{loc:{start:{line:300,column:2},end:{line:302,column:3}},type:"if",locations:[{start:{line:300,column:2},end:{line:302,column:3}},{start:{line:300,column:2},end:{line:302,column:3}}],line:300},"29":{loc:{start:{line:306,column:4},end:{line:308,column:5}},type:"if",locations:[{start:{line:306,column:4},end:{line:308,column:5}},{start:{line:306,column:4},end:{line:308,column:5}}],line:306}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},b:{"0":[0],"1":[0],"2":[0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0],"27":[0],"28":[0,0],"29":[0,0]},inputSourceMap:{version:3,sources:["../src/Auth.js"],names:["RestQuery","require","Parse","Auth","config","cacheController","undefined","isMaster","isReadOnly","user","installationId","userRoles","fetchedRoles","rolePromise","prototype","isUnauthenticated","master","readOnly","nobody","getAuthForSessionToken","sessionToken","userJSON","get","cachedUser","Object","fromJSON","Promise","resolve","results","restOptions","limit","include","query","execute","Query","Session","equalTo","find","useMasterKey","map","obj","toJSON","length","Error","INVALID_SESSION_TOKEN","now","Date","expiresAt","iso","password","put","userObject","getAuthForLegacySessionToken","then","response","className","getUserRoles","_loadRoles","getRolesForUser","restWhere","users","__type","objectId","id","each","result","push","Role","cachedRoles","role","cacheRoles","rolesMap","reduce","m","r","names","name","ids","roleNames","_getAllRolesNamesForRoleIds","Array","getRolesByIds","ins","containedIn","roles","$in","roleIDs","queriedRoles","filter","roleID","wasQueried","Set","resultMap","memo","concat","module","exports"],mappings:"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",sourcesContent:["const RestQuery = require('./RestQuery');\nconst Parse = require('parse/node');\n\n// An Auth object tells you who is requesting something and whether\n// the master key was used.\n// userObject is a Parse.User and can be null if there's no user.\nfunction Auth({\n  config,\n  cacheController = undefined,\n  isMaster = false,\n  isReadOnly = false,\n  user,\n  installationId,\n}) {\n  this.config = config;\n  this.cacheController = cacheController || (config && config.cacheController);\n  this.installationId = installationId;\n  this.isMaster = isMaster;\n  this.user = user;\n  this.isReadOnly = isReadOnly;\n\n  // Assuming a users roles won't change during a single request, we'll\n  // only load them once.\n  this.userRoles = [];\n  this.fetchedRoles = false;\n  this.rolePromise = null;\n}\n\n// Whether this auth could possibly modify the given user id.\n// It still could be forbidden via ACLs even if this returns true.\nAuth.prototype.isUnauthenticated = function () {\n  if (this.isMaster) {\n    return false;\n  }\n  if (this.user) {\n    return false;\n  }\n  return true;\n};\n\n// A helper to get a master-level Auth object\nfunction master(config) {\n  return new Auth({ config, isMaster: true });\n}\n\n// A helper to get a master-level Auth object\nfunction readOnly(config) {\n  return new Auth({ config, isMaster: true, isReadOnly: true });\n}\n\n// A helper to get a nobody-level Auth object\nfunction nobody(config) {\n  return new Auth({ config, isMaster: false });\n}\n\n// Returns a promise that resolves to an Auth object\nconst getAuthForSessionToken = async function ({\n  config,\n  cacheController,\n  sessionToken,\n  installationId,\n}) {\n  cacheController = cacheController || (config && config.cacheController);\n  if (cacheController) {\n    const userJSON = await cacheController.user.get(sessionToken);\n    if (userJSON) {\n      const cachedUser = Parse.Object.fromJSON(userJSON);\n      return Promise.resolve(\n        new Auth({\n          config,\n          cacheController,\n          isMaster: false,\n          installationId,\n          user: cachedUser,\n        })\n      );\n    }\n  }\n\n  let results;\n  if (config) {\n    const restOptions = {\n      limit: 1,\n      include: 'user',\n    };\n\n    const query = new RestQuery(config, master(config), '_Session', { sessionToken }, restOptions);\n    results = (await query.execute()).results;\n  } else {\n    results = (\n      await new Parse.Query(Parse.Session)\n        .limit(1)\n        .include('user')\n        .equalTo('sessionToken', sessionToken)\n        .find({ useMasterKey: true })\n    ).map(obj => obj.toJSON());\n  }\n\n  if (results.length !== 1 || !results[0]['user']) {\n    throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Invalid session token');\n  }\n  const now = new Date(),\n    expiresAt = results[0].expiresAt ? new Date(results[0].expiresAt.iso) : undefined;\n  if (expiresAt < now) {\n    throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Session token is expired.');\n  }\n  const obj = results[0]['user'];\n  delete obj.password;\n  obj['className'] = '_User';\n  obj['sessionToken'] = sessionToken;\n  if (cacheController) {\n    cacheController.user.put(sessionToken, obj);\n  }\n  const userObject = Parse.Object.fromJSON(obj);\n  return new Auth({\n    config,\n    cacheController,\n    isMaster: false,\n    installationId,\n    user: userObject,\n  });\n};\n\nvar getAuthForLegacySessionToken = function ({ config, sessionToken, installationId }) {\n  var restOptions = {\n    limit: 1,\n  };\n  var query = new RestQuery(config, master(config), '_User', { sessionToken }, restOptions);\n  return query.execute().then(response => {\n    var results = response.results;\n    if (results.length !== 1) {\n      throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'invalid legacy session token');\n    }\n    const obj = results[0];\n    obj.className = '_User';\n    const userObject = Parse.Object.fromJSON(obj);\n    return new Auth({\n      config,\n      isMaster: false,\n      installationId,\n      user: userObject,\n    });\n  });\n};\n\n// Returns a promise that resolves to an array of role names\nAuth.prototype.getUserRoles = function () {\n  if (this.isMaster || !this.user) {\n    return Promise.resolve([]);\n  }\n  if (this.fetchedRoles) {\n    return Promise.resolve(this.userRoles);\n  }\n  if (this.rolePromise) {\n    return this.rolePromise;\n  }\n  this.rolePromise = this._loadRoles();\n  return this.rolePromise;\n};\n\nAuth.prototype.getRolesForUser = async function () {\n  //Stack all Parse.Role\n  const results = [];\n  if (this.config) {\n    const restWhere = {\n      users: {\n        __type: 'Pointer',\n        className: '_User',\n        objectId: this.user.id,\n      },\n    };\n    await new RestQuery(this.config, master(this.config), '_Role', restWhere, {}).each(result =>\n      results.push(result)\n    );\n  } else {\n    await new Parse.Query(Parse.Role)\n      .equalTo('users', this.user)\n      .each(result => results.push(result.toJSON()), { useMasterKey: true });\n  }\n  return results;\n};\n\n// Iterates through the role tree and compiles a user's roles\nAuth.prototype._loadRoles = async function () {\n  if (this.cacheController) {\n    const cachedRoles = await this.cacheController.role.get(this.user.id);\n    if (cachedRoles != null) {\n      this.fetchedRoles = true;\n      this.userRoles = cachedRoles;\n      return cachedRoles;\n    }\n  }\n\n  // First get the role ids this user is directly a member of\n  const results = await this.getRolesForUser();\n  if (!results.length) {\n    this.userRoles = [];\n    this.fetchedRoles = true;\n    this.rolePromise = null;\n\n    this.cacheRoles();\n    return this.userRoles;\n  }\n\n  const rolesMap = results.reduce(\n    (m, r) => {\n      m.names.push(r.name);\n      m.ids.push(r.objectId);\n      return m;\n    },\n    { ids: [], names: [] }\n  );\n\n  // run the recursive finding\n  const roleNames = await this._getAllRolesNamesForRoleIds(rolesMap.ids, rolesMap.names);\n  this.userRoles = roleNames.map(r => {\n    return 'role:' + r;\n  });\n  this.fetchedRoles = true;\n  this.rolePromise = null;\n  this.cacheRoles();\n  return this.userRoles;\n};\n\nAuth.prototype.cacheRoles = function () {\n  if (!this.cacheController) {\n    return false;\n  }\n  this.cacheController.role.put(this.user.id, Array(...this.userRoles));\n  return true;\n};\n\nAuth.prototype.getRolesByIds = async function (ins) {\n  const results = [];\n  // Build an OR query across all parentRoles\n  if (!this.config) {\n    await new Parse.Query(Parse.Role)\n      .containedIn(\n        'roles',\n        ins.map(id => {\n          const role = new Parse.Object(Parse.Role);\n          role.id = id;\n          return role;\n        })\n      )\n      .each(result => results.push(result.toJSON()), { useMasterKey: true });\n  } else {\n    const roles = ins.map(id => {\n      return {\n        __type: 'Pointer',\n        className: '_Role',\n        objectId: id,\n      };\n    });\n    const restWhere = { roles: { $in: roles } };\n    await new RestQuery(this.config, master(this.config), '_Role', restWhere, {}).each(result =>\n      results.push(result)\n    );\n  }\n  return results;\n};\n\n// Given a list of roleIds, find all the parent roles, returns a promise with all names\nAuth.prototype._getAllRolesNamesForRoleIds = function (roleIDs, names = [], queriedRoles = {}) {\n  const ins = roleIDs.filter(roleID => {\n    const wasQueried = queriedRoles[roleID] !== true;\n    queriedRoles[roleID] = true;\n    return wasQueried;\n  });\n\n  // all roles are accounted for, return the names\n  if (ins.length == 0) {\n    return Promise.resolve([...new Set(names)]);\n  }\n\n  return this.getRolesByIds(ins)\n    .then(results => {\n      // Nothing found\n      if (!results.length) {\n        return Promise.resolve(names);\n      }\n      // Map the results with all Ids and names\n      const resultMap = results.reduce(\n        (memo, role) => {\n          memo.names.push(role.name);\n          memo.ids.push(role.objectId);\n          return memo;\n        },\n        { ids: [], names: [] }\n      );\n      // store the new found names\n      names = names.concat(resultMap.names);\n      // find the next ones, circular roles will be cut\n      return this._getAllRolesNamesForRoleIds(resultMap.ids, names, queriedRoles);\n    })\n    .then(names => {\n      return Promise.resolve([...new Set(names)]);\n    });\n};\n\nmodule.exports = {\n  Auth,\n  master,\n  nobody,\n  readOnly,\n  getAuthForSessionToken,\n  getAuthForLegacySessionToken,\n};\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"2b745e961ce91ef3e34ffeec23552b35df34b43a"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_hs1npx9xj=function(){return actualCoverage;};}return actualCoverage;}cov_hs1npx9xj();const RestQuery=(cov_hs1npx9xj().s[0]++,require('./RestQuery'));const Parse=(cov_hs1npx9xj().s[1]++,require('parse/node'));// An Auth object tells you who is requesting something and whether
// the master key was used.
// userObject is a Parse.User and can be null if there's no user.
function Auth({config,cacheController=(cov_hs1npx9xj().b[0][0]++,undefined),isMaster=(cov_hs1npx9xj().b[1][0]++,false),isReadOnly=(cov_hs1npx9xj().b[2][0]++,false),user,installationId}){cov_hs1npx9xj().f[0]++;cov_hs1npx9xj().s[2]++;this.config=config;cov_hs1npx9xj().s[3]++;this.cacheController=(cov_hs1npx9xj().b[3][0]++,cacheController)||(cov_hs1npx9xj().b[3][1]++,config)&&(cov_hs1npx9xj().b[3][2]++,config.cacheController);cov_hs1npx9xj().s[4]++;this.installationId=installationId;cov_hs1npx9xj().s[5]++;this.isMaster=isMaster;cov_hs1npx9xj().s[6]++;this.user=user;cov_hs1npx9xj().s[7]++;this.isReadOnly=isReadOnly;// Assuming a users roles won't change during a single request, we'll
// only load them once.
cov_hs1npx9xj().s[8]++;this.userRoles=[];cov_hs1npx9xj().s[9]++;this.fetchedRoles=false;cov_hs1npx9xj().s[10]++;this.rolePromise=null;}// Whether this auth could possibly modify the given user id.
// It still could be forbidden via ACLs even if this returns true.
cov_hs1npx9xj().s[11]++;Auth.prototype.isUnauthenticated=function(){cov_hs1npx9xj().f[1]++;cov_hs1npx9xj().s[12]++;if(this.isMaster){cov_hs1npx9xj().b[4][0]++;cov_hs1npx9xj().s[13]++;return false;}else{cov_hs1npx9xj().b[4][1]++;}cov_hs1npx9xj().s[14]++;if(this.user){cov_hs1npx9xj().b[5][0]++;cov_hs1npx9xj().s[15]++;return false;}else{cov_hs1npx9xj().b[5][1]++;}cov_hs1npx9xj().s[16]++;return true;};// A helper to get a master-level Auth object
function master(config){cov_hs1npx9xj().f[2]++;cov_hs1npx9xj().s[17]++;return new Auth({config,isMaster:true});}// A helper to get a master-level Auth object
function readOnly(config){cov_hs1npx9xj().f[3]++;cov_hs1npx9xj().s[18]++;return new Auth({config,isMaster:true,isReadOnly:true});}// A helper to get a nobody-level Auth object
function nobody(config){cov_hs1npx9xj().f[4]++;cov_hs1npx9xj().s[19]++;return new Auth({config,isMaster:false});}// Returns a promise that resolves to an Auth object
cov_hs1npx9xj().s[20]++;const getAuthForSessionToken=async function({config,cacheController,sessionToken,installationId}){cov_hs1npx9xj().f[5]++;cov_hs1npx9xj().s[21]++;cacheController=(cov_hs1npx9xj().b[6][0]++,cacheController)||(cov_hs1npx9xj().b[6][1]++,config)&&(cov_hs1npx9xj().b[6][2]++,config.cacheController);cov_hs1npx9xj().s[22]++;if(cacheController){cov_hs1npx9xj().b[7][0]++;const userJSON=(cov_hs1npx9xj().s[23]++,await cacheController.user.get(sessionToken));cov_hs1npx9xj().s[24]++;if(userJSON){cov_hs1npx9xj().b[8][0]++;const cachedUser=(cov_hs1npx9xj().s[25]++,Parse.Object.fromJSON(userJSON));cov_hs1npx9xj().s[26]++;return Promise.resolve(new Auth({config,cacheController,isMaster:false,installationId,user:cachedUser}));}else{cov_hs1npx9xj().b[8][1]++;}}else{cov_hs1npx9xj().b[7][1]++;}let results;cov_hs1npx9xj().s[27]++;if(config){cov_hs1npx9xj().b[9][0]++;const restOptions=(cov_hs1npx9xj().s[28]++,{limit:1,include:'user'});const query=(cov_hs1npx9xj().s[29]++,new RestQuery(config,master(config),'_Session',{sessionToken},restOptions));cov_hs1npx9xj().s[30]++;results=(await query.execute()).results;}else{cov_hs1npx9xj().b[9][1]++;cov_hs1npx9xj().s[31]++;results=(await new Parse.Query(Parse.Session).limit(1).include('user').equalTo('sessionToken',sessionToken).find({useMasterKey:true})).map(obj=>{cov_hs1npx9xj().f[6]++;cov_hs1npx9xj().s[32]++;return obj.toJSON();});}cov_hs1npx9xj().s[33]++;if((cov_hs1npx9xj().b[11][0]++,results.length!==1)||(cov_hs1npx9xj().b[11][1]++,!results[0]['user'])){cov_hs1npx9xj().b[10][0]++;cov_hs1npx9xj().s[34]++;throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN,'Invalid session token');}else{cov_hs1npx9xj().b[10][1]++;}const now=(cov_hs1npx9xj().s[35]++,new Date()),expiresAt=(cov_hs1npx9xj().s[36]++,results[0].expiresAt?(cov_hs1npx9xj().b[12][0]++,new Date(results[0].expiresAt.iso)):(cov_hs1npx9xj().b[12][1]++,undefined));cov_hs1npx9xj().s[37]++;if(expiresAt<now){cov_hs1npx9xj().b[13][0]++;cov_hs1npx9xj().s[38]++;throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN,'Session token is expired.');}else{cov_hs1npx9xj().b[13][1]++;}const obj=(cov_hs1npx9xj().s[39]++,results[0]['user']);cov_hs1npx9xj().s[40]++;delete obj.password;cov_hs1npx9xj().s[41]++;obj['className']='_User';cov_hs1npx9xj().s[42]++;obj['sessionToken']=sessionToken;cov_hs1npx9xj().s[43]++;if(cacheController){cov_hs1npx9xj().b[14][0]++;cov_hs1npx9xj().s[44]++;cacheController.user.put(sessionToken,obj);}else{cov_hs1npx9xj().b[14][1]++;}const userObject=(cov_hs1npx9xj().s[45]++,Parse.Object.fromJSON(obj));cov_hs1npx9xj().s[46]++;return new Auth({config,cacheController,isMaster:false,installationId,user:userObject});};cov_hs1npx9xj().s[47]++;var getAuthForLegacySessionToken=function({config,sessionToken,installationId}){cov_hs1npx9xj().f[7]++;var restOptions=(cov_hs1npx9xj().s[48]++,{limit:1});var query=(cov_hs1npx9xj().s[49]++,new RestQuery(config,master(config),'_User',{sessionToken},restOptions));cov_hs1npx9xj().s[50]++;return query.execute().then(response=>{cov_hs1npx9xj().f[8]++;var results=(cov_hs1npx9xj().s[51]++,response.results);cov_hs1npx9xj().s[52]++;if(results.length!==1){cov_hs1npx9xj().b[15][0]++;cov_hs1npx9xj().s[53]++;throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN,'invalid legacy session token');}else{cov_hs1npx9xj().b[15][1]++;}const obj=(cov_hs1npx9xj().s[54]++,results[0]);cov_hs1npx9xj().s[55]++;obj.className='_User';const userObject=(cov_hs1npx9xj().s[56]++,Parse.Object.fromJSON(obj));cov_hs1npx9xj().s[57]++;return new Auth({config,isMaster:false,installationId,user:userObject});});};// Returns a promise that resolves to an array of role names
cov_hs1npx9xj().s[58]++;Auth.prototype.getUserRoles=function(){cov_hs1npx9xj().f[9]++;cov_hs1npx9xj().s[59]++;if((cov_hs1npx9xj().b[17][0]++,this.isMaster)||(cov_hs1npx9xj().b[17][1]++,!this.user)){cov_hs1npx9xj().b[16][0]++;cov_hs1npx9xj().s[60]++;return Promise.resolve([]);}else{cov_hs1npx9xj().b[16][1]++;}cov_hs1npx9xj().s[61]++;if(this.fetchedRoles){cov_hs1npx9xj().b[18][0]++;cov_hs1npx9xj().s[62]++;return Promise.resolve(this.userRoles);}else{cov_hs1npx9xj().b[18][1]++;}cov_hs1npx9xj().s[63]++;if(this.rolePromise){cov_hs1npx9xj().b[19][0]++;cov_hs1npx9xj().s[64]++;return this.rolePromise;}else{cov_hs1npx9xj().b[19][1]++;}cov_hs1npx9xj().s[65]++;this.rolePromise=this._loadRoles();cov_hs1npx9xj().s[66]++;return this.rolePromise;};cov_hs1npx9xj().s[67]++;Auth.prototype.getRolesForUser=async function(){cov_hs1npx9xj().f[10]++;//Stack all Parse.Role
const results=(cov_hs1npx9xj().s[68]++,[]);cov_hs1npx9xj().s[69]++;if(this.config){cov_hs1npx9xj().b[20][0]++;const restWhere=(cov_hs1npx9xj().s[70]++,{users:{__type:'Pointer',className:'_User',objectId:this.user.id}});cov_hs1npx9xj().s[71]++;await new RestQuery(this.config,master(this.config),'_Role',restWhere,{}).each(result=>{cov_hs1npx9xj().f[11]++;cov_hs1npx9xj().s[72]++;return results.push(result);});}else{cov_hs1npx9xj().b[20][1]++;cov_hs1npx9xj().s[73]++;await new Parse.Query(Parse.Role).equalTo('users',this.user).each(result=>{cov_hs1npx9xj().f[12]++;cov_hs1npx9xj().s[74]++;return results.push(result.toJSON());},{useMasterKey:true});}cov_hs1npx9xj().s[75]++;return results;};// Iterates through the role tree and compiles a user's roles
cov_hs1npx9xj().s[76]++;Auth.prototype._loadRoles=async function(){cov_hs1npx9xj().f[13]++;cov_hs1npx9xj().s[77]++;if(this.cacheController){cov_hs1npx9xj().b[21][0]++;const cachedRoles=(cov_hs1npx9xj().s[78]++,await this.cacheController.role.get(this.user.id));cov_hs1npx9xj().s[79]++;if(cachedRoles!=null){cov_hs1npx9xj().b[22][0]++;cov_hs1npx9xj().s[80]++;this.fetchedRoles=true;cov_hs1npx9xj().s[81]++;this.userRoles=cachedRoles;cov_hs1npx9xj().s[82]++;return cachedRoles;}else{cov_hs1npx9xj().b[22][1]++;}}else{cov_hs1npx9xj().b[21][1]++;}// First get the role ids this user is directly a member of
const results=(cov_hs1npx9xj().s[83]++,await this.getRolesForUser());cov_hs1npx9xj().s[84]++;if(!results.length){cov_hs1npx9xj().b[23][0]++;cov_hs1npx9xj().s[85]++;this.userRoles=[];cov_hs1npx9xj().s[86]++;this.fetchedRoles=true;cov_hs1npx9xj().s[87]++;this.rolePromise=null;cov_hs1npx9xj().s[88]++;this.cacheRoles();cov_hs1npx9xj().s[89]++;return this.userRoles;}else{cov_hs1npx9xj().b[23][1]++;}const rolesMap=(cov_hs1npx9xj().s[90]++,results.reduce((m,r)=>{cov_hs1npx9xj().f[14]++;cov_hs1npx9xj().s[91]++;m.names.push(r.name);cov_hs1npx9xj().s[92]++;m.ids.push(r.objectId);cov_hs1npx9xj().s[93]++;return m;},{ids:[],names:[]}));// run the recursive finding
const roleNames=(cov_hs1npx9xj().s[94]++,await this._getAllRolesNamesForRoleIds(rolesMap.ids,rolesMap.names));cov_hs1npx9xj().s[95]++;this.userRoles=roleNames.map(r=>{cov_hs1npx9xj().f[15]++;cov_hs1npx9xj().s[96]++;return'role:'+r;});cov_hs1npx9xj().s[97]++;this.fetchedRoles=true;cov_hs1npx9xj().s[98]++;this.rolePromise=null;cov_hs1npx9xj().s[99]++;this.cacheRoles();cov_hs1npx9xj().s[100]++;return this.userRoles;};cov_hs1npx9xj().s[101]++;Auth.prototype.cacheRoles=function(){cov_hs1npx9xj().f[16]++;cov_hs1npx9xj().s[102]++;if(!this.cacheController){cov_hs1npx9xj().b[24][0]++;cov_hs1npx9xj().s[103]++;return false;}else{cov_hs1npx9xj().b[24][1]++;}cov_hs1npx9xj().s[104]++;this.cacheController.role.put(this.user.id,Array(...this.userRoles));cov_hs1npx9xj().s[105]++;return true;};cov_hs1npx9xj().s[106]++;Auth.prototype.getRolesByIds=async function(ins){cov_hs1npx9xj().f[17]++;const results=(cov_hs1npx9xj().s[107]++,[]);// Build an OR query across all parentRoles
cov_hs1npx9xj().s[108]++;if(!this.config){cov_hs1npx9xj().b[25][0]++;cov_hs1npx9xj().s[109]++;await new Parse.Query(Parse.Role).containedIn('roles',ins.map(id=>{cov_hs1npx9xj().f[18]++;const role=(cov_hs1npx9xj().s[110]++,new Parse.Object(Parse.Role));cov_hs1npx9xj().s[111]++;role.id=id;cov_hs1npx9xj().s[112]++;return role;})).each(result=>{cov_hs1npx9xj().f[19]++;cov_hs1npx9xj().s[113]++;return results.push(result.toJSON());},{useMasterKey:true});}else{cov_hs1npx9xj().b[25][1]++;const roles=(cov_hs1npx9xj().s[114]++,ins.map(id=>{cov_hs1npx9xj().f[20]++;cov_hs1npx9xj().s[115]++;return{__type:'Pointer',className:'_Role',objectId:id};}));const restWhere=(cov_hs1npx9xj().s[116]++,{roles:{$in:roles}});cov_hs1npx9xj().s[117]++;await new RestQuery(this.config,master(this.config),'_Role',restWhere,{}).each(result=>{cov_hs1npx9xj().f[21]++;cov_hs1npx9xj().s[118]++;return results.push(result);});}cov_hs1npx9xj().s[119]++;return results;};// Given a list of roleIds, find all the parent roles, returns a promise with all names
cov_hs1npx9xj().s[120]++;Auth.prototype._getAllRolesNamesForRoleIds=function(roleIDs,names=(cov_hs1npx9xj().b[26][0]++,[]),queriedRoles=(cov_hs1npx9xj().b[27][0]++,{})){cov_hs1npx9xj().f[22]++;const ins=(cov_hs1npx9xj().s[121]++,roleIDs.filter(roleID=>{cov_hs1npx9xj().f[23]++;const wasQueried=(cov_hs1npx9xj().s[122]++,queriedRoles[roleID]!==true);cov_hs1npx9xj().s[123]++;queriedRoles[roleID]=true;cov_hs1npx9xj().s[124]++;return wasQueried;}));// all roles are accounted for, return the names
cov_hs1npx9xj().s[125]++;if(ins.length==0){cov_hs1npx9xj().b[28][0]++;cov_hs1npx9xj().s[126]++;return Promise.resolve([...new Set(names)]);}else{cov_hs1npx9xj().b[28][1]++;}cov_hs1npx9xj().s[127]++;return this.getRolesByIds(ins).then(results=>{cov_hs1npx9xj().f[24]++;cov_hs1npx9xj().s[128]++;// Nothing found
if(!results.length){cov_hs1npx9xj().b[29][0]++;cov_hs1npx9xj().s[129]++;return Promise.resolve(names);}else{cov_hs1npx9xj().b[29][1]++;}// Map the results with all Ids and names
const resultMap=(cov_hs1npx9xj().s[130]++,results.reduce((memo,role)=>{cov_hs1npx9xj().f[25]++;cov_hs1npx9xj().s[131]++;memo.names.push(role.name);cov_hs1npx9xj().s[132]++;memo.ids.push(role.objectId);cov_hs1npx9xj().s[133]++;return memo;},{ids:[],names:[]}));// store the new found names
cov_hs1npx9xj().s[134]++;names=names.concat(resultMap.names);// find the next ones, circular roles will be cut
cov_hs1npx9xj().s[135]++;return this._getAllRolesNamesForRoleIds(resultMap.ids,names,queriedRoles);}).then(names=>{cov_hs1npx9xj().f[26]++;cov_hs1npx9xj().s[136]++;return Promise.resolve([...new Set(names)]);});};cov_hs1npx9xj().s[137]++;module.exports={Auth,master,nobody,readOnly,getAuthForSessionToken,getAuthForLegacySessionToken};//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9BdXRoLmpzIl0sIm5hbWVzIjpbIlJlc3RRdWVyeSIsInJlcXVpcmUiLCJQYXJzZSIsImNhY2hlQ29udHJvbGxlciIsImlzTWFzdGVyIiwiaXNSZWFkT25seSIsImluc3RhbGxhdGlvbklkIiwiY29uZmlnIiwiQXV0aCIsImdldEF1dGhGb3JTZXNzaW9uVG9rZW4iLCJ1c2VySlNPTiIsImNhY2hlZFVzZXIiLCJ1c2VyIiwicmVzdE9wdGlvbnMiLCJsaW1pdCIsImluY2x1ZGUiLCJxdWVyeSIsIm1hc3RlciIsInNlc3Npb25Ub2tlbiIsInJlc3VsdHMiLCJ1c2VNYXN0ZXJLZXkiLCJvYmoiLCJub3ciLCJleHBpcmVzQXQiLCJ1c2VyT2JqZWN0IiwiZ2V0QXV0aEZvckxlZ2FjeVNlc3Npb25Ub2tlbiIsInJlc3BvbnNlIiwiUHJvbWlzZSIsInJlc3RXaGVyZSIsInVzZXJzIiwiX190eXBlIiwiY2xhc3NOYW1lIiwib2JqZWN0SWQiLCJpZCIsInJlc3VsdCIsImNhY2hlZFJvbGVzIiwicm9sZXNNYXAiLCJtIiwiciIsImlkcyIsIm5hbWVzIiwicm9sZU5hbWVzIiwiQXJyYXkiLCJyb2xlIiwicm9sZXMiLCIkaW4iLCJxdWVyaWVkUm9sZXMiLCJpbnMiLCJyb2xlSUQiLCJ3YXNRdWVyaWVkIiwicmVzdWx0TWFwIiwibWVtbyIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6Im01ckNBWUVNO3lGQVpGLEtBQU1OLENBQUFBLFNBQVMseUJBQUdDLE9BQU8sQ0FBekIsYUFBeUIsQ0FBVixDQUFmLENBQ0EsS0FBTUMsQ0FBQUEsS0FBSyx5QkFBR0QsT0FBTyxDQUFyQixZQUFxQixDQUFWLENBQVgsQ0FFQTtBQUNBO0FBQ0E7QUFDQSxRQUFBLENBQUEsSUFBQSxDQUFjLENBQUEsTUFBQSxDQUVaRSxlQUFlLDRCQUZILFNBRUcsQ0FGSCxDQUdaQyxRQUFRLDRCQUhJLEtBR0osQ0FISSxDQUlaQyxVQUFVLDRCQUpFLEtBSUYsQ0FKRSxDQUFBLElBQUEsQ0FNWkMsY0FO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QU8sTUFBQSwyQkFBQSxDQUFpQ1UsU0FBUyxDQUExQyxHQUFBLENBQUEsS0FBQSxDQUFQLFlBQU8sQ0FBUCxDQWxCRyxDQUFBLEVBQUEsSUFBQSxDQW9CQ1YsS0FBSyxFQUFJLGtEQUNiLE1BQU9iLENBQUFBLE9BQU8sQ0FBUEEsT0FBQUEsQ0FBZ0IsQ0FBQyxHQUFHLEdBQUEsQ0FBQSxHQUFBLENBQTNCLEtBQTJCLENBQUosQ0FBaEJBLENBQVAsQ0FyQkosQ0FBTyxDQUFQLENBWkZuQixDQUFBQSxDLHlCQXFDQTRDLE1BQU0sQ0FBTkEsT0FBQUEsQ0FBaUIsQ0FBQSxJQUFBLENBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxRQUFBLENBQUEsc0JBQUEsQ0FNZjNCLDRCQU5lLENBQWpCMkIsQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlc3RRdWVyeSA9IHJlcXVpcmUoJy4vUmVzdFF1ZXJ5Jyk7XG5jb25zdCBQYXJzZSA9IHJlcXVpcmUoJ3BhcnNlL25vZGUnKTtcblxuLy8gQW4gQXV0aCBvYmplY3QgdGVsbHMgeW91IHdobyBpcyByZXF1ZXN0aW5nIHNvbWV0aGluZyBhbmQgd2hldGhlclxuLy8gdGhlIG1hc3RlciBrZXkgd2FzIHVzZWQuXG4vLyB1c2VyT2JqZWN0IGlzIGEgUGFyc2UuVXNlciBhbmQgY2FuIGJlIG51bGwgaWYgdGhlcmUncyBubyB1c2VyLlxuZnVuY3Rpb24gQXV0aCh7XG4gIGNvbmZpZyxcbiAgY2FjaGVDb250cm9sbGVyID0gdW5kZWZpbmVkLFxuICBpc01hc3RlciA9IGZhbHNlLFxuICBpc1JlYWRPbmx5ID0gZmFsc2UsXG4gIHVzZXIsXG4gIGluc3RhbGxhdGlvbklkLFxufSkge1xuICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgdGhpcy5jYWNoZUNvbnRyb2xsZXIgPSBjYWNoZUNvbnRyb2xsZXIgfHwgKGNvbmZpZyAmJiBjb25maWcuY2FjaGVDb250cm9sbGVyKTtcbiAgdGhpcy5pbnN0YWxsYXRpb25JZCA9IGluc3RhbGxhdGlvbklkO1xuICB0aGlzLmlzTWFzdGVyID0gaXNNYXN0ZXI7XG4gIHRoaXMudXNlciA9IHVzZXI7XG4gIHRoaXMuaXNSZWFkT25seSA9IGlzUmVhZE9ubHk7XG5cbiAgLy8gQXNzdW1pbmcgYSB1c2VycyByb2xlcyB3b24ndCBjaGFuZ2UgZHVyaW5nIGEgc2luZ2xlIHJlcXVlc3QsIHdlJ2xsXG4gIC8vIG9ubHkgbG9hZCB0aGVtIG9uY2UuXG4gIHRoaXMudXNlclJvbGVzID0gW107XG4gIHRoaXMuZmV0Y2hlZFJvbGVzID0gZmFsc2U7XG4gIHRoaXMucm9sZVByb21pc2UgPSBudWxsO1xufVxuXG4vLyBXaGV0aGVyIHRoaXMgYXV0aCBjb3VsZCBwb3NzaWJseSBtb2RpZnkgdGhlIGdpdmVuIHVzZXIgaWQuXG4vLyBJdCBzdGlsbCBjb3VsZCBiZSBmb3JiaWRkZW4gdmlhIEFDTHMgZXZlbiBpZiB0aGlzIHJldHVybnMgdHJ1ZS5cbkF1dGgucHJvdG90eXBlLmlzVW5hdXRoZW50aWNhdGVkID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5pc01hc3Rlcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodGhpcy51c2VyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuLy8gQSBoZWxwZXIgdG8gZ2V0IGEgbWFzdGVyLWxldmVsIEF1dGggb2JqZWN0XG5mdW5jdGlvbiBtYXN0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgQXV0aCh7IGNvbmZpZywgaXNNYXN0ZXI6IHRydWUgfSk7XG59XG5cbi8vIEEgaGVscGVyIHRvIGdldCBhIG1hc3Rlci1sZXZlbCBBdXRoIG9iamVjdFxuZnVuY3Rpb24gcmVhZE9ubHkoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgQXV0aCh7IGNvbmZpZywgaXNNYXN0ZXI6IHRydWUsIGlzUmVhZE9ubHk6IHRydWUgfSk7XG59XG5cbi8vIEEgaGVscGVyIHRvIGdldCBhIG5vYm9keS1sZXZlbCBBdXRoIG9iamVjdFxuZnVuY3Rpb24gbm9ib2R5KGNvbmZpZykge1xuICByZXR1cm4gbmV3IEF1dGgoeyBjb25maWcsIGlzTWFzdGVyOiBmYWxzZSB9KTtcbn1cblxuLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBBdXRoIG9iamVjdFxuY29uc3QgZ2V0QXV0aEZvclNlc3Npb25Ub2tlbiA9IGFzeW5jIGZ1bmN0aW9uICh7XG4gIGNvbmZpZyxcbiAgY2FjaGVDb250cm9sbGVyLFxuICBzZXNzaW9uVG9rZW4sXG4gIGluc3RhbGxhdGlvbklkLFxufSkge1xuICBjYWNoZUNvbnRyb2xsZXIgPSBjYWNoZUNvbnRyb2xsZXIgfHwgKGNvbmZpZyAmJiBjb25maWcuY2FjaGVDb250cm9sbGVyKTtcbiAgaWYgKGNhY2hlQ29udHJvbGxlcikge1xuICAgIGNvbnN0IHVzZXJKU09OID0gYXdhaXQgY2FjaGVDb250cm9sbGVyLnVzZXIuZ2V0KHNlc3Npb25Ub2tlbik7XG4gICAgaWYgKHVzZXJKU09OKSB7XG4gICAgICBjb25zdCBjYWNoZWRVc2VyID0gUGFyc2UuT2JqZWN0LmZyb21KU09OKHVzZXJKU09OKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgIG5ldyBBdXRoKHtcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgY2FjaGVDb250cm9sbGVyLFxuICAgICAgICAgIGlzTWFzdGVyOiBmYWxzZSxcbiAgICAgICAgICBpbnN0YWxsYXRpb25JZCxcbiAgICAgICAgICB1c2VyOiBjYWNoZWRVc2VyLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBsZXQgcmVzdWx0cztcbiAgaWYgKGNvbmZpZykge1xuICAgIGNvbnN0IHJlc3RPcHRpb25zID0ge1xuICAgICAgbGltaXQ6IDEsXG4gICAgICBpbmNsdWRlOiAndXNlcicsXG4gICAgfTtcblxuICAgIGNvbnN0IHF1ZXJ5ID0gbmV3IFJlc3RRdWVyeShjb25maWcsIG1hc3Rlcihjb25maWcpLCAnX1Nlc3Npb24nLCB7IHNlc3Npb25Ub2tlbiB9LCByZXN0T3B0aW9ucyk7XG4gICAgcmVzdWx0cyA9IChhd2FpdCBxdWVyeS5leGVjdXRlKCkpLnJlc3VsdHM7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0cyA9IChcbiAgICAgIGF3YWl0IG5ldyBQYXJzZS5RdWVyeShQYXJzZS5TZXNzaW9uKVxuICAgICAgICAubGltaXQoMSlcbiAgICAgICAgLmluY2x1ZGUoJ3VzZXInKVxuICAgICAgICAuZXF1YWxUbygnc2Vzc2lvblRva2VuJywgc2Vzc2lvblRva2VuKVxuICAgICAgICAuZmluZCh7IHVzZU1hc3RlcktleTogdHJ1ZSB9KVxuICAgICkubWFwKG9iaiA9PiBvYmoudG9KU09OKCkpO1xuICB9XG5cbiAgaWYgKHJlc3VsdHMubGVuZ3RoICE9PSAxIHx8ICFyZXN1bHRzWzBdWyd1c2VyJ10pIHtcbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuSU5WQUxJRF9TRVNTSU9OX1RPS0VOLCAnSW52YWxpZCBzZXNzaW9uIHRva2VuJyk7XG4gIH1cbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKSxcbiAgICBleHBpcmVzQXQgPSByZXN1bHRzWzBdLmV4cGlyZXNBdCA/IG5ldyBEYXRlKHJlc3VsdHNbMF0uZXhwaXJlc0F0LmlzbykgOiB1bmRlZmluZWQ7XG4gIGlmIChleHBpcmVzQXQgPCBub3cpIHtcbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuSU5WQUxJRF9TRVNTSU9OX1RPS0VOLCAnU2Vzc2lvbiB0b2tlbiBpcyBleHBpcmVkLicpO1xuICB9XG4gIGNvbnN0IG9iaiA9IHJlc3VsdHNbMF1bJ3VzZXInXTtcbiAgZGVsZXRlIG9iai5wYXNzd29yZDtcbiAgb2JqWydjbGFzc05hbWUnXSA9ICdfVXNlcic7XG4gIG9ialsnc2Vzc2lvblRva2VuJ10gPSBzZXNzaW9uVG9rZW47XG4gIGlmIChjYWNoZUNvbnRyb2xsZXIpIHtcbiAgICBjYWNoZUNvbnRyb2xsZXIudXNlci5wdXQoc2Vzc2lvblRva2VuLCBvYmopO1xuICB9XG4gIGNvbnN0IHVzZXJPYmplY3QgPSBQYXJzZS5PYmplY3QuZnJvbUpTT04ob2JqKTtcbiAgcmV0dXJuIG5ldyBBdXRoKHtcbiAgICBjb25maWcsXG4gICAgY2FjaGVDb250cm9sbGVyLFxuICAgIGlzTWFzdGVyOiBmYWxzZSxcbiAgICBpbnN0YWxsYXRpb25JZCxcbiAgICB1c2VyOiB1c2VyT2JqZWN0LFxuICB9KTtcbn07XG5cbnZhciBnZXRBdXRoRm9yTGVnYWN5U2Vzc2lvblRva2VuID0gZnVuY3Rpb24gKHsgY29uZmlnLCBzZXNzaW9uVG9rZW4sIGluc3RhbGxhdGlvbklkIH0pIHtcbiAgdmFyIHJlc3RPcHRpb25zID0ge1xuICAgIGxpbWl0OiAxLFxuICB9O1xuICB2YXIgcXVlcnkgPSBuZXcgUmVzdFF1ZXJ5KGNvbmZpZywgbWFzdGVyKGNvbmZpZyksICdfVXNlcicsIHsgc2Vzc2lvblRva2VuIH0sIHJlc3RPcHRpb25zKTtcbiAgcmV0dXJuIHF1ZXJ5LmV4ZWN1dGUoKS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICB2YXIgcmVzdWx0cyA9IHJlc3BvbnNlLnJlc3VsdHM7XG4gICAgaWYgKHJlc3VsdHMubGVuZ3RoICE9PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuSU5WQUxJRF9TRVNTSU9OX1RPS0VOLCAnaW52YWxpZCBsZWdhY3kgc2Vzc2lvbiB0b2tlbicpO1xuICAgIH1cbiAgICBjb25zdCBvYmogPSByZXN1bHRzWzBdO1xuICAgIG9iai5jbGFzc05hbWUgPSAnX1VzZXInO1xuICAgIGNvbnN0IHVzZXJPYmplY3QgPSBQYXJzZS5PYmplY3QuZnJvbUpTT04ob2JqKTtcbiAgICByZXR1cm4gbmV3IEF1dGgoe1xuICAgICAgY29uZmlnLFxuICAgICAgaXNNYXN0ZXI6IGZhbHNlLFxuICAgICAgaW5zdGFsbGF0aW9uSWQsXG4gICAgICB1c2VyOiB1c2VyT2JqZWN0LFxuICAgIH0pO1xuICB9KTtcbn07XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYW4gYXJyYXkgb2Ygcm9sZSBuYW1lc1xuQXV0aC5wcm90b3R5cGUuZ2V0VXNlclJvbGVzID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5pc01hc3RlciB8fCAhdGhpcy51c2VyKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbXSk7XG4gIH1cbiAgaWYgKHRoaXMuZmV0Y2hlZFJvbGVzKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLnVzZXJSb2xlcyk7XG4gIH1cbiAgaWYgKHRoaXMucm9sZVByb21pc2UpIHtcbiAgICByZXR1cm4gdGhpcy5yb2xlUHJvbWlzZTtcbiAgfVxuICB0aGlzLnJvbGVQcm9taXNlID0gdGhpcy5fbG9hZFJvbGVzKCk7XG4gIHJldHVybiB0aGlzLnJvbGVQcm9taXNlO1xufTtcblxuQXV0aC5wcm90b3R5cGUuZ2V0Um9sZXNGb3JVc2VyID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAvL1N0YWNrIGFsbCBQYXJzZS5Sb2xlXG4gIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgaWYgKHRoaXMuY29uZmlnKSB7XG4gICAgY29uc3QgcmVzdFdoZXJlID0ge1xuICAgICAgdXNlcnM6IHtcbiAgICAgICAgX190eXBlOiAnUG9pbnRlcicsXG4gICAgICAgIGNsYXNzTmFtZTogJ19Vc2VyJyxcbiAgICAgICAgb2JqZWN0SWQ6IHRoaXMudXNlci5pZCxcbiAgICAgIH0sXG4gICAgfTtcbiAgICBhd2FpdCBuZXcgUmVzdFF1ZXJ5KHRoaXMuY29uZmlnLCBtYXN0ZXIodGhpcy5jb25maWcpLCAnX1JvbGUnLCByZXN0V2hlcmUsIHt9KS5lYWNoKHJlc3VsdCA9PlxuICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdClcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IG5ldyBQYXJzZS5RdWVyeShQYXJzZS5Sb2xlKVxuICAgICAgLmVxdWFsVG8oJ3VzZXJzJywgdGhpcy51c2VyKVxuICAgICAgLmVhY2gocmVzdWx0ID0+IHJlc3VsdHMucHVzaChyZXN1bHQudG9KU09OKCkpLCB7IHVzZU1hc3RlcktleTogdHJ1ZSB9KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIEl0ZXJhdGVzIHRocm91Z2ggdGhlIHJvbGUgdHJlZSBhbmQgY29tcGlsZXMgYSB1c2VyJ3Mgcm9sZXNcbkF1dGgucHJvdG90eXBlLl9sb2FkUm9sZXMgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlQ29udHJvbGxlcikge1xuICAgIGNvbnN0IGNhY2hlZFJvbGVzID0gYXdhaXQgdGhpcy5jYWNoZUNvbnRyb2xsZXIucm9sZS5nZXQodGhpcy51c2VyLmlkKTtcbiAgICBpZiAoY2FjaGVkUm9sZXMgIT0gbnVsbCkge1xuICAgICAgdGhpcy5mZXRjaGVkUm9sZXMgPSB0cnVlO1xuICAgICAgdGhpcy51c2VyUm9sZXMgPSBjYWNoZWRSb2xlcztcbiAgICAgIHJldHVybiBjYWNoZWRSb2xlcztcbiAgICB9XG4gIH1cblxuICAvLyBGaXJzdCBnZXQgdGhlIHJvbGUgaWRzIHRoaXMgdXNlciBpcyBkaXJlY3RseSBhIG1lbWJlciBvZlxuICBjb25zdCByZXN1bHRzID0gYXdhaXQgdGhpcy5nZXRSb2xlc0ZvclVzZXIoKTtcbiAgaWYgKCFyZXN1bHRzLmxlbmd0aCkge1xuICAgIHRoaXMudXNlclJvbGVzID0gW107XG4gICAgdGhpcy5mZXRjaGVkUm9sZXMgPSB0cnVlO1xuICAgIHRoaXMucm9sZVByb21pc2UgPSBudWxsO1xuXG4gICAgdGhpcy5jYWNoZVJvbGVzKCk7XG4gICAgcmV0dXJuIHRoaXMudXNlclJvbGVzO1xuICB9XG5cbiAgY29uc3Qgcm9sZXNNYXAgPSByZXN1bHRzLnJlZHVjZShcbiAgICAobSwgcikgPT4ge1xuICAgICAgbS5uYW1lcy5wdXNoKHIubmFtZSk7XG4gICAgICBtLmlkcy5wdXNoKHIub2JqZWN0SWQpO1xuICAgICAgcmV0dXJuIG07XG4gICAgfSxcbiAgICB7IGlkczogW10sIG5hbWVzOiBbXSB9XG4gICk7XG5cbiAgLy8gcnVuIHRoZSByZWN1cnNpdmUgZmluZGluZ1xuICBjb25zdCByb2xlTmFtZXMgPSBhd2FpdCB0aGlzLl9nZXRBbGxSb2xlc05hbWVzRm9yUm9sZUlkcyhyb2xlc01hcC5pZHMsIHJvbGVzTWFwLm5hbWVzKTtcbiAgdGhpcy51c2VyUm9sZXMgPSByb2xlTmFtZXMubWFwKHIgPT4ge1xuICAgIHJldHVybiAncm9sZTonICsgcjtcbiAgfSk7XG4gIHRoaXMuZmV0Y2hlZFJvbGVzID0gdHJ1ZTtcbiAgdGhpcy5yb2xlUHJvbWlzZSA9IG51bGw7XG4gIHRoaXMuY2FjaGVSb2xlcygpO1xuICByZXR1cm4gdGhpcy51c2VyUm9sZXM7XG59O1xuXG5BdXRoLnByb3RvdHlwZS5jYWNoZVJvbGVzID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuY2FjaGVDb250cm9sbGVyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHRoaXMuY2FjaGVDb250cm9sbGVyLnJvbGUucHV0KHRoaXMudXNlci5pZCwgQXJyYXkoLi4udGhpcy51c2VyUm9sZXMpKTtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5BdXRoLnByb3RvdHlwZS5nZXRSb2xlc0J5SWRzID0gYXN5bmMgZnVuY3Rpb24gKGlucykge1xuICBjb25zdCByZXN1bHRzID0gW107XG4gIC8vIEJ1aWxkIGFuIE9SIHF1ZXJ5IGFjcm9zcyBhbGwgcGFyZW50Um9sZXNcbiAgaWYgKCF0aGlzLmNvbmZpZykge1xuICAgIGF3YWl0IG5ldyBQYXJzZS5RdWVyeShQYXJzZS5Sb2xlKVxuICAgICAgLmNvbnRhaW5lZEluKFxuICAgICAgICAncm9sZXMnLFxuICAgICAgICBpbnMubWFwKGlkID0+IHtcbiAgICAgICAgICBjb25zdCByb2xlID0gbmV3IFBhcnNlLk9iamVjdChQYXJzZS5Sb2xlKTtcbiAgICAgICAgICByb2xlLmlkID0gaWQ7XG4gICAgICAgICAgcmV0dXJuIHJvbGU7XG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICAuZWFjaChyZXN1bHQgPT4gcmVzdWx0cy5wdXNoKHJlc3VsdC50b0pTT04oKSksIHsgdXNlTWFzdGVyS2V5OiB0cnVlIH0pO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHJvbGVzID0gaW5zLm1hcChpZCA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBfX3R5cGU6ICdQb2ludGVyJyxcbiAgICAgICAgY2xhc3NOYW1lOiAnX1JvbGUnLFxuICAgICAgICBvYmplY3RJZDogaWQsXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IHJlc3RXaGVyZSA9IHsgcm9sZXM6IHsgJGluOiByb2xlcyB9IH07XG4gICAgYXdhaXQgbmV3IFJlc3RRdWVyeSh0aGlzLmNvbmZpZywgbWFzdGVyKHRoaXMuY29uZmlnKSwgJ19Sb2xlJywgcmVzdFdoZXJlLCB7fSkuZWFjaChyZXN1bHQgPT5cbiAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIEdpdmVuIGEgbGlzdCBvZiByb2xlSWRzLCBmaW5kIGFsbCB0aGUgcGFyZW50IHJvbGVzLCByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFsbCBuYW1lc1xuQXV0aC5wcm90b3R5cGUuX2dldEFsbFJvbGVzTmFtZXNGb3JSb2xlSWRzID0gZnVuY3Rpb24gKHJvbGVJRHMsIG5hbWVzID0gW10sIHF1ZXJpZWRSb2xlcyA9IHt9KSB7XG4gIGNvbnN0IGlucyA9IHJvbGVJRHMuZmlsdGVyKHJvbGVJRCA9PiB7XG4gICAgY29uc3Qgd2FzUXVlcmllZCA9IHF1ZXJpZWRSb2xlc1tyb2xlSURdICE9PSB0cnVlO1xuICAgIHF1ZXJpZWRSb2xlc1tyb2xlSURdID0gdHJ1ZTtcbiAgICByZXR1cm4gd2FzUXVlcmllZDtcbiAgfSk7XG5cbiAgLy8gYWxsIHJvbGVzIGFyZSBhY2NvdW50ZWQgZm9yLCByZXR1cm4gdGhlIG5hbWVzXG4gIGlmIChpbnMubGVuZ3RoID09IDApIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFsuLi5uZXcgU2V0KG5hbWVzKV0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZ2V0Um9sZXNCeUlkcyhpbnMpXG4gICAgLnRoZW4ocmVzdWx0cyA9PiB7XG4gICAgICAvLyBOb3RoaW5nIGZvdW5kXG4gICAgICBpZiAoIXJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmFtZXMpO1xuICAgICAgfVxuICAgICAgLy8gTWFwIHRoZSByZXN1bHRzIHdpdGggYWxsIElkcyBhbmQgbmFtZXNcbiAgICAgIGNvbnN0IHJlc3VsdE1hcCA9IHJlc3VsdHMucmVkdWNlKFxuICAgICAgICAobWVtbywgcm9sZSkgPT4ge1xuICAgICAgICAgIG1lbW8ubmFtZXMucHVzaChyb2xlLm5hbWUpO1xuICAgICAgICAgIG1lbW8uaWRzLnB1c2gocm9sZS5vYmplY3RJZCk7XG4gICAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICAgIH0sXG4gICAgICAgIHsgaWRzOiBbXSwgbmFtZXM6IFtdIH1cbiAgICAgICk7XG4gICAgICAvLyBzdG9yZSB0aGUgbmV3IGZvdW5kIG5hbWVzXG4gICAgICBuYW1lcyA9IG5hbWVzLmNvbmNhdChyZXN1bHRNYXAubmFtZXMpO1xuICAgICAgLy8gZmluZCB0aGUgbmV4dCBvbmVzLCBjaXJjdWxhciByb2xlcyB3aWxsIGJlIGN1dFxuICAgICAgcmV0dXJuIHRoaXMuX2dldEFsbFJvbGVzTmFtZXNGb3JSb2xlSWRzKHJlc3VsdE1hcC5pZHMsIG5hbWVzLCBxdWVyaWVkUm9sZXMpO1xuICAgIH0pXG4gICAgLnRoZW4obmFtZXMgPT4ge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbLi4ubmV3IFNldChuYW1lcyldKTtcbiAgICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBdXRoLFxuICBtYXN0ZXIsXG4gIG5vYm9keSxcbiAgcmVhZE9ubHksXG4gIGdldEF1dGhGb3JTZXNzaW9uVG9rZW4sXG4gIGdldEF1dGhGb3JMZWdhY3lTZXNzaW9uVG9rZW4sXG59O1xuIl19