"use strict";function cov_mmt0j70b7(){var path="/parse-server/lib/cloud-code/Parse.Cloud.js";var hash="72aa572c8ec98a3cb82c320b8e617c3caef89167";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/cloud-code/Parse.Cloud.js",statementMap:{"0":{start:{line:3,column:12},end:{line:3,column:33}},"1":{start:{line:5,column:15},end:{line:5,column:62}},"2":{start:{line:7,column:18},end:{line:7,column:77}},"3":{start:{line:9,column:39},end:{line:9,column:93}},"4":{start:{line:11,column:49},end:{line:11,column:96}},"5":{start:{line:11,column:84},end:{line:11,column:96}},"6":{start:{line:11,column:121},end:{line:11,column:134}},"7":{start:{line:11,column:159},end:{line:11,column:172}},"8":{start:{line:11,column:174},end:{line:11,column:309}},"9":{start:{line:11,column:234},end:{line:11,column:292}},"10":{start:{line:13,column:53},end:{line:13,column:111}},"11":{start:{line:13,column:98},end:{line:13,column:109}},"12":{start:{line:13,column:112},end:{line:13,column:214}},"13":{start:{line:13,column:188},end:{line:13,column:212}},"14":{start:{line:13,column:227},end:{line:13,column:264}},"15":{start:{line:13,column:266},end:{line:13,column:321}},"16":{start:{line:13,column:297},end:{line:13,column:319}},"17":{start:{line:13,column:335},end:{line:13,column:337}},"18":{start:{line:13,column:367},end:{line:13,column:423}},"19":{start:{line:13,column:425},end:{line:13,column:726}},"20":{start:{line:13,column:448},end:{line:13,column:724}},"21":{start:{line:13,column:534},end:{line:13,column:606}},"22":{start:{line:13,column:608},end:{line:13,column:722}},"23":{start:{line:13,column:646},end:{line:13,column:687}},"24":{start:{line:13,column:697},end:{line:13,column:720}},"25":{start:{line:13,column:727},end:{line:13,column:748}},"26":{start:{line:13,column:749},end:{line:13,column:787}},"27":{start:{line:13,column:762},end:{line:13,column:785}},"28":{start:{line:13,column:788},end:{line:13,column:802}},"29":{start:{line:15,column:15},end:{line:15,column:35}},"30":{start:{line:18,column:2},end:{line:18,column:99}},"31":{start:{line:22,column:2},end:{line:24,column:3}},"32":{start:{line:23,column:4},end:{line:23,column:11}},"33":{start:{line:26,column:23},end:{line:33,column:3}},"34":{start:{line:34,column:22},end:{line:43,column:3}},"35":{start:{line:45,column:18},end:{line:62,column:3}},"36":{start:{line:46,column:4},end:{line:48,column:5}},"37":{start:{line:47,column:6},end:{line:47,column:21}},"38":{start:{line:50,column:4},end:{line:52,column:5}},"39":{start:{line:51,column:6},end:{line:51,column:16}},"40":{start:{line:54,column:17},end:{line:54,column:26}},"41":{start:{line:56,column:4},end:{line:59,column:5}},"42":{start:{line:57,column:20},end:{line:57,column:67}},"43":{start:{line:58,column:6},end:{line:58,column:59}},"44":{start:{line:61,column:4},end:{line:61,column:16}},"45":{start:{line:64,column:19},end:{line:77,column:3}},"46":{start:{line:65,column:22},end:{line:65,column:31}},"47":{start:{line:67,column:4},end:{line:69,column:5}},"48":{start:{line:68,column:6},end:{line:68,column:82}},"49":{start:{line:71,column:18},end:{line:71,column:54}},"50":{start:{line:71,column:40},end:{line:71,column:53}},"51":{start:{line:72,column:17},end:{line:72,column:40}},"52":{start:{line:74,column:4},end:{line:76,column:5}},"53":{start:{line:75,column:6},end:{line:75,column:113}},"54":{start:{line:79,column:2},end:{line:97,column:3}},"55":{start:{line:80,column:4},end:{line:80,column:47}},"56":{start:{line:82,column:4},end:{line:96,column:5}},"57":{start:{line:83,column:21},end:{line:83,column:35}},"58":{start:{line:85,column:6},end:{line:87,column:7}},"59":{start:{line:86,column:8},end:{line:86,column:17}},"60":{start:{line:89,column:6},end:{line:95,column:7}},"61":{start:{line:90,column:21},end:{line:90,column:34}},"62":{start:{line:92,column:8},end:{line:94,column:9}},"63":{start:{line:93,column:10},end:{line:93,column:55}},"64":{start:{line:112,column:17},end:{line:112,column:19}},"65":{start:{line:137,column:0},end:{line:140,column:2}},"66":{start:{line:138,column:2},end:{line:138,column:39}},"67":{start:{line:139,column:2},end:{line:139,column:92}},"68":{start:{line:154,column:0},end:{line:156,column:2}},"69":{start:{line:155,column:2},end:{line:155,column:68}},"70":{start:{line:185,column:0},end:{line:189,column:2}},"71":{start:{line:186,column:20},end:{line:186,column:53}},"72":{start:{line:187,column:2},end:{line:187,column:39}},"73":{start:{line:188,column:2},end:{line:188,column:115}},"74":{start:{line:216,column:0},end:{line:220,column:2}},"75":{start:{line:217,column:20},end:{line:217,column:53}},"76":{start:{line:218,column:2},end:{line:218,column:39}},"77":{start:{line:219,column:2},end:{line:219,column:117}},"78":{start:{line:246,column:0},end:{line:257,column:2}},"79":{start:{line:247,column:18},end:{line:247,column:25}},"80":{start:{line:249,column:2},end:{line:254,column:3}},"81":{start:{line:252,column:4},end:{line:252,column:47}},"82":{start:{line:253,column:4},end:{line:253,column:27}},"83":{start:{line:256,column:2},end:{line:256,column:97}},"84":{start:{line:279,column:0},end:{line:290,column:2}},"85":{start:{line:280,column:18},end:{line:280,column:25}},"86":{start:{line:282,column:2},end:{line:287,column:3}},"87":{start:{line:285,column:4},end:{line:285,column:47}},"88":{start:{line:286,column:4},end:{line:286,column:27}},"89":{start:{line:289,column:2},end:{line:289,column:96}},"90":{start:{line:311,column:0},end:{line:322,column:2}},"91":{start:{line:312,column:18},end:{line:312,column:28}},"92":{start:{line:314,column:2},end:{line:319,column:3}},"93":{start:{line:317,column:4},end:{line:317,column:47}},"94":{start:{line:318,column:4},end:{line:318,column:27}},"95":{start:{line:321,column:2},end:{line:321,column:97}},"96":{start:{line:350,column:0},end:{line:354,column:2}},"97":{start:{line:351,column:20},end:{line:351,column:53}},"98":{start:{line:352,column:2},end:{line:352,column:39}},"99":{start:{line:353,column:2},end:{line:353,column:114}},"100":{start:{line:381,column:0},end:{line:385,column:2}},"101":{start:{line:382,column:20},end:{line:382,column:53}},"102":{start:{line:383,column:2},end:{line:383,column:39}},"103":{start:{line:384,column:2},end:{line:384,column:116}},"104":{start:{line:412,column:0},end:{line:416,column:2}},"105":{start:{line:413,column:20},end:{line:413,column:53}},"106":{start:{line:414,column:2},end:{line:414,column:39}},"107":{start:{line:415,column:2},end:{line:415,column:115}},"108":{start:{line:443,column:0},end:{line:447,column:2}},"109":{start:{line:444,column:20},end:{line:444,column:53}},"110":{start:{line:445,column:2},end:{line:445,column:39}},"111":{start:{line:446,column:2},end:{line:446,column:114}},"112":{start:{line:472,column:0},end:{line:475,column:2}},"113":{start:{line:473,column:2},end:{line:473,column:39}},"114":{start:{line:474,column:2},end:{line:474,column:112}},"115":{start:{line:500,column:0},end:{line:503,column:2}},"116":{start:{line:501,column:2},end:{line:501,column:39}},"117":{start:{line:502,column:2},end:{line:502,column:111}},"118":{start:{line:528,column:0},end:{line:531,column:2}},"119":{start:{line:529,column:2},end:{line:529,column:39}},"120":{start:{line:530,column:2},end:{line:530,column:114}},"121":{start:{line:556,column:0},end:{line:559,column:2}},"122":{start:{line:557,column:2},end:{line:557,column:39}},"123":{start:{line:558,column:2},end:{line:558,column:113}},"124":{start:{line:584,column:0},end:{line:587,column:2}},"125":{start:{line:585,column:2},end:{line:585,column:39}},"126":{start:{line:586,column:2},end:{line:586,column:114}},"127":{start:{line:609,column:0},end:{line:619,column:2}},"128":{start:{line:610,column:17},end:{line:610,column:54}},"129":{start:{line:611,column:23},end:{line:611,column:52}},"130":{start:{line:613,column:2},end:{line:616,column:3}},"131":{start:{line:614,column:4},end:{line:614,column:114}},"132":{start:{line:615,column:4},end:{line:615,column:11}},"133":{start:{line:618,column:2},end:{line:618,column:37}},"134":{start:{line:646,column:0},end:{line:650,column:2}},"135":{start:{line:647,column:2},end:{line:647,column:39}},"136":{start:{line:648,column:20},end:{line:648,column:53}},"137":{start:{line:649,column:2},end:{line:649,column:120}},"138":{start:{line:652,column:0},end:{line:654,column:2}},"139":{start:{line:653,column:2},end:{line:653,column:72}},"140":{start:{line:680,column:0},end:{line:684,column:2}},"141":{start:{line:681,column:20},end:{line:681,column:53}},"142":{start:{line:682,column:2},end:{line:682,column:39}},"143":{start:{line:683,column:2},end:{line:683,column:115}},"144":{start:{line:686,column:0},end:{line:688,column:2}},"145":{start:{line:687,column:2},end:{line:687,column:28}},"146":{start:{line:690,column:0},end:{line:693,column:2}},"147":{start:{line:692,column:2},end:{line:692,column:237}},"148":{start:{line:695,column:16},end:{line:695,column:40}},"149":{start:{line:697,column:0},end:{line:704,column:2}},"150":{start:{line:698,column:2},end:{line:701,column:5}},"151":{start:{line:703,column:2},end:{line:703,column:23}},"152":{start:{line:706,column:0},end:{line:706,column:28}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:9,column:9},end:{line:9,column:31}},loc:{start:{line:9,column:37},end:{line:9,column:95}},line:9},"1":{name:"_getRequireWildcardCache",decl:{start:{line:11,column:9},end:{line:11,column:33}},loc:{start:{line:11,column:47},end:{line:11,column:311}},line:11},"2":{name:"(anonymous_2)",decl:{start:{line:11,column:209},end:{line:11,column:210}},loc:{start:{line:11,column:232},end:{line:11,column:294}},line:11},"3":{name:"_interopRequireWildcard",decl:{start:{line:13,column:9},end:{line:13,column:32}},loc:{start:{line:13,column:51},end:{line:13,column:804}},line:13},"4":{name:"isParseObjectConstructor",decl:{start:{line:17,column:9},end:{line:17,column:33}},loc:{start:{line:17,column:42},end:{line:19,column:1}},line:17},"5":{name:"validateValidator",decl:{start:{line:21,column:9},end:{line:21,column:26}},loc:{start:{line:21,column:38},end:{line:98,column:1}},line:21},"6":{name:"(anonymous_6)",decl:{start:{line:45,column:18},end:{line:45,column:19}},loc:{start:{line:45,column:24},end:{line:62,column:3}},line:45},"7":{name:"(anonymous_7)",decl:{start:{line:64,column:19},end:{line:64,column:20}},loc:{start:{line:64,column:50},end:{line:77,column:3}},line:64},"8":{name:"(anonymous_8)",decl:{start:{line:71,column:32},end:{line:71,column:33}},loc:{start:{line:71,column:40},end:{line:71,column:53}},line:71},"9":{name:"(anonymous_9)",decl:{start:{line:137,column:20},end:{line:137,column:21}},loc:{start:{line:137,column:72},end:{line:140,column:1}},line:137},"10":{name:"(anonymous_10)",decl:{start:{line:154,column:17},end:{line:154,column:18}},loc:{start:{line:154,column:50},end:{line:156,column:1}},line:154},"11":{name:"(anonymous_11)",decl:{start:{line:185,column:24},end:{line:185,column:25}},loc:{start:{line:185,column:74},end:{line:189,column:1}},line:185},"12":{name:"(anonymous_12)",decl:{start:{line:216,column:26},end:{line:216,column:27}},loc:{start:{line:216,column:76},end:{line:220,column:1}},line:216},"13":{name:"(anonymous_13)",decl:{start:{line:246,column:25},end:{line:246,column:26}},loc:{start:{line:246,column:44},end:{line:257,column:1}},line:246},"14":{name:"(anonymous_14)",decl:{start:{line:279,column:24},end:{line:279,column:25}},loc:{start:{line:279,column:43},end:{line:290,column:1}},line:279},"15":{name:"(anonymous_15)",decl:{start:{line:311,column:25},end:{line:311,column:26}},loc:{start:{line:311,column:44},end:{line:322,column:1}},line:311},"16":{name:"(anonymous_16)",decl:{start:{line:350,column:23},end:{line:350,column:24}},loc:{start:{line:350,column:73},end:{line:354,column:1}},line:350},"17":{name:"(anonymous_17)",decl:{start:{line:381,column:25},end:{line:381,column:26}},loc:{start:{line:381,column:75},end:{line:385,column:1}},line:381},"18":{name:"(anonymous_18)",decl:{start:{line:412,column:24},end:{line:412,column:25}},loc:{start:{line:412,column:74},end:{line:416,column:1}},line:412},"19":{name:"(anonymous_19)",decl:{start:{line:443,column:23},end:{line:443,column:24}},loc:{start:{line:443,column:73},end:{line:447,column:1}},line:443},"20":{name:"(anonymous_20)",decl:{start:{line:472,column:28},end:{line:472,column:29}},loc:{start:{line:472,column:66},end:{line:475,column:1}},line:472},"21":{name:"(anonymous_21)",decl:{start:{line:500,column:27},end:{line:500,column:28}},loc:{start:{line:500,column:65},end:{line:503,column:1}},line:500},"22":{name:"(anonymous_22)",decl:{start:{line:528,column:30},end:{line:528,column:31}},loc:{start:{line:528,column:68},end:{line:531,column:1}},line:528},"23":{name:"(anonymous_23)",decl:{start:{line:556,column:29},end:{line:556,column:30}},loc:{start:{line:556,column:67},end:{line:559,column:1}},line:556},"24":{name:"(anonymous_24)",decl:{start:{line:584,column:27},end:{line:584,column:28}},loc:{start:{line:584,column:65},end:{line:587,column:1}},line:584},"25":{name:"(anonymous_25)",decl:{start:{line:609,column:23},end:{line:609,column:24}},loc:{start:{line:609,column:39},end:{line:619,column:1}},line:609},"26":{name:"(anonymous_26)",decl:{start:{line:646,column:29},end:{line:646,column:30}},loc:{start:{line:646,column:79},end:{line:650,column:1}},line:646},"27":{name:"(anonymous_27)",decl:{start:{line:652,column:30},end:{line:652,column:31}},loc:{start:{line:652,column:49},end:{line:654,column:1}},line:652},"28":{name:"(anonymous_28)",decl:{start:{line:680,column:33},end:{line:680,column:34}},loc:{start:{line:680,column:83},end:{line:684,column:1}},line:680},"29":{name:"(anonymous_29)",decl:{start:{line:686,column:29},end:{line:686,column:30}},loc:{start:{line:686,column:35},end:{line:688,column:1}},line:686},"30":{name:"(anonymous_30)",decl:{start:{line:690,column:26},end:{line:690,column:27}},loc:{start:{line:690,column:32},end:{line:693,column:1}},line:690},"31":{name:"(anonymous_31)",decl:{start:{line:697,column:25},end:{line:697,column:26}},loc:{start:{line:697,column:33},end:{line:704,column:1}},line:697}},branchMap:{"0":{loc:{start:{line:9,column:46},end:{line:9,column:92}},type:"cond-expr",locations:[{start:{line:9,column:70},end:{line:9,column:73}},{start:{line:9,column:76},end:{line:9,column:92}}],line:9},"1":{loc:{start:{line:9,column:46},end:{line:9,column:67}},type:"binary-expr",locations:[{start:{line:9,column:46},end:{line:9,column:49}},{start:{line:9,column:53},end:{line:9,column:67}}],line:9},"2":{loc:{start:{line:11,column:49},end:{line:11,column:96}},type:"if",locations:[{start:{line:11,column:49},end:{line:11,column:96}},{start:{line:11,column:49},end:{line:11,column:96}}],line:11},"3":{loc:{start:{line:11,column:241},end:{line:11,column:291}},type:"cond-expr",locations:[{start:{line:11,column:255},end:{line:11,column:271}},{start:{line:11,column:274},end:{line:11,column:291}}],line:11},"4":{loc:{start:{line:13,column:53},end:{line:13,column:111}},type:"if",locations:[{start:{line:13,column:53},end:{line:13,column:111}},{start:{line:13,column:53},end:{line:13,column:111}}],line:13},"5":{loc:{start:{line:13,column:57},end:{line:13,column:94}},type:"binary-expr",locations:[{start:{line:13,column:57},end:{line:13,column:69}},{start:{line:13,column:73},end:{line:13,column:76}},{start:{line:13,column:80},end:{line:13,column:94}}],line:13},"6":{loc:{start:{line:13,column:112},end:{line:13,column:214}},type:"if",locations:[{start:{line:13,column:112},end:{line:13,column:214}},{start:{line:13,column:112},end:{line:13,column:214}}],line:13},"7":{loc:{start:{line:13,column:116},end:{line:13,column:184}},type:"binary-expr",locations:[{start:{line:13,column:116},end:{line:13,column:128}},{start:{line:13,column:132},end:{line:13,column:155}},{start:{line:13,column:159},end:{line:13,column:184}}],line:13},"8":{loc:{start:{line:13,column:266},end:{line:13,column:321}},type:"if",locations:[{start:{line:13,column:266},end:{line:13,column:321}},{start:{line:13,column:266},end:{line:13,column:321}}],line:13},"9":{loc:{start:{line:13,column:270},end:{line:13,column:293}},type:"binary-expr",locations:[{start:{line:13,column:270},end:{line:13,column:275}},{start:{line:13,column:279},end:{line:13,column:293}}],line:13},"10":{loc:{start:{line:13,column:367},end:{line:13,column:423}},type:"binary-expr",locations:[{start:{line:13,column:367},end:{line:13,column:388}},{start:{line:13,column:392},end:{line:13,column:423}}],line:13},"11":{loc:{start:{line:13,column:448},end:{line:13,column:724}},type:"if",locations:[{start:{line:13,column:448},end:{line:13,column:724}},{start:{line:13,column:448},end:{line:13,column:724}}],line:13},"12":{loc:{start:{line:13,column:452},end:{line:13,column:519}},type:"binary-expr",locations:[{start:{line:13,column:452},end:{line:13,column:469}},{start:{line:13,column:473},end:{line:13,column:519}}],line:13},"13":{loc:{start:{line:13,column:534},end:{line:13,column:606}},type:"cond-expr",locations:[{start:{line:13,column:558},end:{line:13,column:599}},{start:{line:13,column:602},end:{line:13,column:606}}],line:13},"14":{loc:{start:{line:13,column:608},end:{line:13,column:722}},type:"if",locations:[{start:{line:13,column:608},end:{line:13,column:722}},{start:{line:13,column:608},end:{line:13,column:722}}],line:13},"15":{loc:{start:{line:13,column:612},end:{line:13,column:642}},type:"binary-expr",locations:[{start:{line:13,column:612},end:{line:13,column:616}},{start:{line:13,column:621},end:{line:13,column:629}},{start:{line:13,column:633},end:{line:13,column:641}}],line:13},"16":{loc:{start:{line:13,column:749},end:{line:13,column:787}},type:"if",locations:[{start:{line:13,column:749},end:{line:13,column:787}},{start:{line:13,column:749},end:{line:13,column:787}}],line:13},"17":{loc:{start:{line:18,column:9},end:{line:18,column:98}},type:"binary-expr",locations:[{start:{line:18,column:9},end:{line:18,column:37}},{start:{line:18,column:41},end:{line:18,column:98}}],line:18},"18":{loc:{start:{line:22,column:2},end:{line:24,column:3}},type:"if",locations:[{start:{line:22,column:2},end:{line:24,column:3}},{start:{line:22,column:2},end:{line:24,column:3}}],line:22},"19":{loc:{start:{line:22,column:6},end:{line:22,column:51}},type:"binary-expr",locations:[{start:{line:22,column:6},end:{line:22,column:16}},{start:{line:22,column:20},end:{line:22,column:51}}],line:22},"20":{loc:{start:{line:46,column:4},end:{line:48,column:5}},type:"if",locations:[{start:{line:46,column:4},end:{line:48,column:5}},{start:{line:46,column:4},end:{line:48,column:5}}],line:46},"21":{loc:{start:{line:50,column:4},end:{line:52,column:5}},type:"if",locations:[{start:{line:50,column:4},end:{line:52,column:5}},{start:{line:50,column:4},end:{line:52,column:5}}],line:50},"22":{loc:{start:{line:50,column:8},end:{line:50,column:41}},type:"binary-expr",locations:[{start:{line:50,column:8},end:{line:50,column:20}},{start:{line:50,column:24},end:{line:50,column:41}}],line:50},"23":{loc:{start:{line:56,column:4},end:{line:59,column:5}},type:"if",locations:[{start:{line:56,column:4},end:{line:59,column:5}},{start:{line:56,column:4},end:{line:59,column:5}}],line:56},"24":{loc:{start:{line:57,column:20},end:{line:57,column:67}},type:"binary-expr",locations:[{start:{line:57,column:20},end:{line:57,column:22}},{start:{line:57,column:26},end:{line:57,column:67}}],line:57},"25":{loc:{start:{line:58,column:14},end:{line:58,column:43}},type:"cond-expr",locations:[{start:{line:58,column:22},end:{line:58,column:30}},{start:{line:58,column:33},end:{line:58,column:43}}],line:58},"26":{loc:{start:{line:67,column:4},end:{line:69,column:5}},type:"if",locations:[{start:{line:67,column:4},end:{line:69,column:5}},{start:{line:67,column:4},end:{line:69,column:5}}],line:67},"27":{loc:{start:{line:74,column:4},end:{line:76,column:5}},type:"if",locations:[{start:{line:74,column:4},end:{line:76,column:5}},{start:{line:74,column:4},end:{line:76,column:5}}],line:74},"28":{loc:{start:{line:74,column:8},end:{line:74,column:55}},type:"binary-expr",locations:[{start:{line:74,column:8},end:{line:74,column:29}},{start:{line:74,column:33},end:{line:74,column:55}}],line:74},"29":{loc:{start:{line:82,column:4},end:{line:96,column:5}},type:"if",locations:[{start:{line:82,column:4},end:{line:96,column:5}},{start:{line:82,column:4},end:{line:96,column:5}}],line:82},"30":{loc:{start:{line:82,column:8},end:{line:82,column:53}},type:"binary-expr",locations:[{start:{line:82,column:8},end:{line:82,column:24}},{start:{line:82,column:28},end:{line:82,column:53}}],line:82},"31":{loc:{start:{line:85,column:6},end:{line:87,column:7}},type:"if",locations:[{start:{line:85,column:6},end:{line:87,column:7}},{start:{line:85,column:6},end:{line:87,column:7}}],line:85},"32":{loc:{start:{line:249,column:2},end:{line:254,column:3}},type:"if",locations:[{start:{line:249,column:2},end:{line:254,column:3}},{start:{line:249,column:2},end:{line:254,column:3}}],line:249},"33":{loc:{start:{line:249,column:6},end:{line:249,column:70}},type:"binary-expr",locations:[{start:{line:249,column:6},end:{line:249,column:33}},{start:{line:249,column:37},end:{line:249,column:70}}],line:249},"34":{loc:{start:{line:282,column:2},end:{line:287,column:3}},type:"if",locations:[{start:{line:282,column:2},end:{line:287,column:3}},{start:{line:282,column:2},end:{line:287,column:3}}],line:282},"35":{loc:{start:{line:282,column:6},end:{line:282,column:70}},type:"binary-expr",locations:[{start:{line:282,column:6},end:{line:282,column:33}},{start:{line:282,column:37},end:{line:282,column:70}}],line:282},"36":{loc:{start:{line:314,column:2},end:{line:319,column:3}},type:"if",locations:[{start:{line:314,column:2},end:{line:319,column:3}},{start:{line:314,column:2},end:{line:319,column:3}}],line:314},"37":{loc:{start:{line:314,column:6},end:{line:314,column:70}},type:"binary-expr",locations:[{start:{line:314,column:6},end:{line:314,column:33}},{start:{line:314,column:37},end:{line:314,column:70}}],line:314},"38":{loc:{start:{line:613,column:2},end:{line:616,column:3}},type:"if",locations:[{start:{line:613,column:2},end:{line:616,column:3}},{start:{line:613,column:2},end:{line:616,column:3}}],line:613}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0]},inputSourceMap:{version:3,sources:["../../src/cloud-code/Parse.Cloud.js"],names:["Config","require","isParseObjectConstructor","object","Object","prototype","hasOwnProperty","call","validateValidator","validator","fieldOptions","type","constant","Boolean","default","options","Array","required","error","String","allowedKeys","requireUser","requireAnyUserRoles","requireAllUserRoles","requireMaster","validateMasterKey","skipWithMasterKey","requireUserKeys","fields","getType","fn","isArray","match","toString","toLowerCase","checkKey","key","data","validatorParam","parameter","types","map","includes","join","values","value","subKey","ParseCloud","define","functionName","handler","validationHandler","triggers","addFunction","Parse","applicationId","job","addJob","beforeSave","parseClass","className","getClassName","addTrigger","Types","beforeDelete","beforeLogin","arguments","afterLogin","afterLogout","afterSave","afterDelete","beforeFind","afterFind","beforeSaveFile","addFileTrigger","afterSaveFile","beforeDeleteFile","afterDeleteFile","beforeConnect","addConnectTrigger","sendEmail","config","get","emailAdapter","userController","adapter","loggerController","sendMail","beforeSubscribe","onLiveQueryEvent","addLiveQueryEventHandler","afterLiveQueryEvent","afterEvent","_removeAllHooks","_unregisterAll","useMasterKey","console","warn","request","httpRequest","opts","Deprecator","logRuntimeDeprecation","usage","solution","module","exports"],mappings:"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AuB2B,IAAI,CAACS,MAAD,CAA3B,CAAR;AACD;AACF;AACF;AACF;AACF;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAEA,IAAIC,UAAU,GAAG,EAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,UAAU,CAACC,MAAX,GAAoB,UAAUC,YAAV,EAAwBC,OAAxB,EAAiCC,iBAAjC,EAAoD;AACtE3C,EAAAA,iBAAiB,CAAC2C,iBAAD,CAAjB;AACAC,EAAAA,QAAQ,CAACC,WAAT,CAAqBJ,YAArB,EAAmCC,OAAnC,EAA4CC,iBAA5C,EAA+DG,YAAMC,aAArE;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAR,UAAU,CAACS,GAAX,GAAiB,UAAUP,YAAV,EAAwBC,OAAxB,EAAiC;AAChDE,EAAAA,QAAQ,CAACK,MAAT,CAAgBR,YAAhB,EAA8BC,OAA9B,EAAuCI,YAAMC,aAA7C;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAR,UAAU,CAACW,UAAX,GAAwB,UAAUC,UAAV,EAAsBT,OAAtB,EAA+BC,iBAA/B,EAAkD;AACxE,QAAMS,SAAS,GAAGR,QAAQ,CAACS,YAAT,CAAsBF,UAAtB,CAAlB;AACAnD,EAAAA,iBAAiB,CAAC2C,iBAAD,CAAjB;AACAC,EAAAA,QAAQ,CAACU,UAAT,CACEV,QAAQ,CAACW,KAAT,CAAeL,UADjB,EAEEE,SAFF,EAGEV,OAHF,EAIEI,YAAMC,aAJR,EAKEJ,iBALF;AAOD,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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:["import { Parse } from 'parse/node';\nimport * as triggers from '../triggers';\nimport Deprecator from '../Deprecator/Deprecator';\nconst Config = require('../Config');\n\nfunction isParseObjectConstructor(object) {\n  return typeof object === 'function' && Object.prototype.hasOwnProperty.call(object, 'className');\n}\n\nfunction validateValidator(validator) {\n  if (!validator || typeof validator === 'function') {\n    return;\n  }\n  const fieldOptions = {\n    type: ['Any'],\n    constant: [Boolean],\n    default: ['Any'],\n    options: [Array, 'function', 'Any'],\n    required: [Boolean],\n    error: [String],\n  };\n  const allowedKeys = {\n    requireUser: [Boolean],\n    requireAnyUserRoles: [Array, 'function'],\n    requireAllUserRoles: [Array, 'function'],\n    requireMaster: [Boolean],\n    validateMasterKey: [Boolean],\n    skipWithMasterKey: [Boolean],\n    requireUserKeys: [Array, Object],\n    fields: [Array, Object],\n  };\n  const getType = fn => {\n    if (Array.isArray(fn)) {\n      return 'array';\n    }\n    if (fn === 'Any' || fn === 'function') {\n      return fn;\n    }\n    const type = typeof fn;\n    if (typeof fn === 'function') {\n      const match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n      return (match ? match[1] : 'function').toLowerCase();\n    }\n    return type;\n  };\n  const checkKey = (key, data, validatorParam) => {\n    const parameter = data[key];\n    if (!parameter) {\n      throw `${key} is not a supported parameter for Cloud Function validations.`;\n    }\n    const types = parameter.map(type => getType(type));\n    const type = getType(validatorParam);\n    if (!types.includes(type) && !types.includes('Any')) {\n      throw `Invalid type for Cloud Function validation key ${key}. Expected ${types.join(\n        '|'\n      )}, actual ${type}`;\n    }\n  };\n  for (const key in validator) {\n    checkKey(key, allowedKeys, validator[key]);\n    if (key === 'fields' || key === 'requireUserKeys') {\n      const values = validator[key];\n      if (Array.isArray(values)) {\n        continue;\n      }\n      for (const value in values) {\n        const data = values[value];\n        for (const subKey in data) {\n          checkKey(subKey, fieldOptions, data[subKey]);\n        }\n      }\n    }\n  }\n}\n/** @namespace\n * @name Parse\n * @description The Parse SDK.\n *  see [api docs](https://docs.parseplatform.org/js/api) and [guide](https://docs.parseplatform.org/js/guide)\n */\n\n/** @namespace\n * @name Parse.Cloud\n * @memberof Parse\n * @description The Parse Cloud Code SDK.\n */\n\nvar ParseCloud = {};\n/**\n * Defines a Cloud Function.\n *\n * **Available in Cloud Code only.**\n *\n * ```\n * Parse.Cloud.define('functionName', (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.define('functionName', (request) => {\n *   // code here\n * }, { ...validationObject });\n * ```\n *\n * @static\n * @memberof Parse.Cloud\n * @param {String} name The name of the Cloud Function\n * @param {Function} data The Cloud Function to register. This function can be an async function and should take one parameter a {@link Parse.Cloud.FunctionRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.FunctionRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.define = function (functionName, handler, validationHandler) {\n  validateValidator(validationHandler);\n  triggers.addFunction(functionName, handler, validationHandler, Parse.applicationId);\n};\n\n/**\n * Defines a Background Job.\n *\n * **Available in Cloud Code only.**\n *\n * @method job\n * @name Parse.Cloud.job\n * @param {String} name The name of the Background Job\n * @param {Function} func The Background Job to register. This function can be async should take a single parameters a {@link Parse.Cloud.JobRequest}\n *\n */\nParseCloud.job = function (functionName, handler) {\n  triggers.addJob(functionName, handler, Parse.applicationId);\n};\n\n/**\n *\n * Registers a before save function.\n *\n * **Available in Cloud Code only.**\n *\n * If you want to use beforeSave for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.\n *\n * ```\n * Parse.Cloud.beforeSave('MyCustomClass', (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.beforeSave(Parse.User, (request) => {\n *   // code here\n * }, { ...validationObject })\n * ```\n *\n * @method beforeSave\n * @name Parse.Cloud.beforeSave\n * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the after save function for. This can instead be a String that is the className of the subclass.\n * @param {Function} func The function to run before a save. This function can be async and should take one parameter a {@link Parse.Cloud.TriggerRequest};\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.TriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.beforeSave = function (parseClass, handler, validationHandler) {\n  const className = triggers.getClassName(parseClass);\n  validateValidator(validationHandler);\n  triggers.addTrigger(\n    triggers.Types.beforeSave,\n    className,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Registers a before delete function.\n *\n * **Available in Cloud Code only.**\n *\n * If you want to use beforeDelete for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.\n * ```\n * Parse.Cloud.beforeDelete('MyCustomClass', (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.beforeDelete(Parse.User, (request) => {\n *   // code here\n * }, { ...validationObject })\n *```\n *\n * @method beforeDelete\n * @name Parse.Cloud.beforeDelete\n * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the before delete function for. This can instead be a String that is the className of the subclass.\n * @param {Function} func The function to run before a delete. This function can be async and should take one parameter, a {@link Parse.Cloud.TriggerRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.TriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.beforeDelete = function (parseClass, handler, validationHandler) {\n  const className = triggers.getClassName(parseClass);\n  validateValidator(validationHandler);\n  triggers.addTrigger(\n    triggers.Types.beforeDelete,\n    className,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n *\n * Registers the before login function.\n *\n * **Available in Cloud Code only.**\n *\n * This function provides further control\n * in validating a login attempt. Specifically,\n * it is triggered after a user enters\n * correct credentials (or other valid authData),\n * but prior to a session being generated.\n *\n * ```\n * Parse.Cloud.beforeLogin((request) => {\n *   // code here\n * })\n *\n * ```\n *\n * @method beforeLogin\n * @name Parse.Cloud.beforeLogin\n * @param {Function} func The function to run before a login. This function can be async and should take one parameter a {@link Parse.Cloud.TriggerRequest};\n */\nParseCloud.beforeLogin = function (handler) {\n  let className = '_User';\n  if (typeof handler === 'string' || isParseObjectConstructor(handler)) {\n    // validation will occur downstream, this is to maintain internal\n    // code consistency with the other hook types.\n    className = triggers.getClassName(handler);\n    handler = arguments[1];\n  }\n  triggers.addTrigger(triggers.Types.beforeLogin, className, handler, Parse.applicationId);\n};\n\n/**\n *\n * Registers the after login function.\n *\n * **Available in Cloud Code only.**\n *\n * This function is triggered after a user logs in successfully,\n * and after a _Session object has been created.\n *\n * ```\n * Parse.Cloud.afterLogin((request) => {\n *   // code here\n * });\n * ```\n *\n * @method afterLogin\n * @name Parse.Cloud.afterLogin\n * @param {Function} func The function to run after a login. This function can be async and should take one parameter a {@link Parse.Cloud.TriggerRequest};\n */\nParseCloud.afterLogin = function (handler) {\n  let className = '_User';\n  if (typeof handler === 'string' || isParseObjectConstructor(handler)) {\n    // validation will occur downstream, this is to maintain internal\n    // code consistency with the other hook types.\n    className = triggers.getClassName(handler);\n    handler = arguments[1];\n  }\n  triggers.addTrigger(triggers.Types.afterLogin, className, handler, Parse.applicationId);\n};\n\n/**\n *\n * Registers the after logout function.\n *\n * **Available in Cloud Code only.**\n *\n * This function is triggered after a user logs out.\n *\n * ```\n * Parse.Cloud.afterLogout((request) => {\n *   // code here\n * });\n * ```\n *\n * @method afterLogout\n * @name Parse.Cloud.afterLogout\n * @param {Function} func The function to run after a logout. This function can be async and should take one parameter a {@link Parse.Cloud.TriggerRequest};\n */\nParseCloud.afterLogout = function (handler) {\n  let className = '_Session';\n  if (typeof handler === 'string' || isParseObjectConstructor(handler)) {\n    // validation will occur downstream, this is to maintain internal\n    // code consistency with the other hook types.\n    className = triggers.getClassName(handler);\n    handler = arguments[1];\n  }\n  triggers.addTrigger(triggers.Types.afterLogout, className, handler, Parse.applicationId);\n};\n\n/**\n * Registers an after save function.\n *\n * **Available in Cloud Code only.**\n *\n * If you want to use afterSave for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.\n *\n * ```\n * Parse.Cloud.afterSave('MyCustomClass', async function(request) {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.afterSave(Parse.User, async function(request) {\n *   // code here\n * }, { ...validationObject });\n * ```\n *\n * @method afterSave\n * @name Parse.Cloud.afterSave\n * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the after save function for. This can instead be a String that is the className of the subclass.\n * @param {Function} func The function to run after a save. This function can be an async function and should take just one parameter, {@link Parse.Cloud.TriggerRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.TriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.afterSave = function (parseClass, handler, validationHandler) {\n  const className = triggers.getClassName(parseClass);\n  validateValidator(validationHandler);\n  triggers.addTrigger(\n    triggers.Types.afterSave,\n    className,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Registers an after delete function.\n *\n * **Available in Cloud Code only.**\n *\n * If you want to use afterDelete for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.\n * ```\n * Parse.Cloud.afterDelete('MyCustomClass', async (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.afterDelete(Parse.User, async (request) => {\n *   // code here\n * }, { ...validationObject });\n *```\n *\n * @method afterDelete\n * @name Parse.Cloud.afterDelete\n * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the after delete function for. This can instead be a String that is the className of the subclass.\n * @param {Function} func The function to run after a delete. This function can be async and should take just one parameter, {@link Parse.Cloud.TriggerRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.TriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.afterDelete = function (parseClass, handler, validationHandler) {\n  const className = triggers.getClassName(parseClass);\n  validateValidator(validationHandler);\n  triggers.addTrigger(\n    triggers.Types.afterDelete,\n    className,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Registers a before find function.\n *\n * **Available in Cloud Code only.**\n *\n * If you want to use beforeFind for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.\n * ```\n * Parse.Cloud.beforeFind('MyCustomClass', async (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.beforeFind(Parse.User, async (request) => {\n *   // code here\n * }, { ...validationObject });\n *```\n *\n * @method beforeFind\n * @name Parse.Cloud.beforeFind\n * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the before find function for. This can instead be a String that is the className of the subclass.\n * @param {Function} func The function to run before a find. This function can be async and should take just one parameter, {@link Parse.Cloud.BeforeFindRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.BeforeFindRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.beforeFind = function (parseClass, handler, validationHandler) {\n  const className = triggers.getClassName(parseClass);\n  validateValidator(validationHandler);\n  triggers.addTrigger(\n    triggers.Types.beforeFind,\n    className,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Registers an after find function.\n *\n * **Available in Cloud Code only.**\n *\n * If you want to use afterFind for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.\n * ```\n * Parse.Cloud.afterFind('MyCustomClass', async (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.afterFind(Parse.User, async (request) => {\n *   // code here\n * }, { ...validationObject });\n *```\n *\n * @method afterFind\n * @name Parse.Cloud.afterFind\n * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the after find function for. This can instead be a String that is the className of the subclass.\n * @param {Function} func The function to run before a find. This function can be async and should take just one parameter, {@link Parse.Cloud.AfterFindRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.AfterFindRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.afterFind = function (parseClass, handler, validationHandler) {\n  const className = triggers.getClassName(parseClass);\n  validateValidator(validationHandler);\n  triggers.addTrigger(\n    triggers.Types.afterFind,\n    className,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Registers a before save file function.\n *\n * **Available in Cloud Code only.**\n *\n * ```\n * Parse.Cloud.beforeSaveFile(async (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.beforeSaveFile(async (request) => {\n *   // code here\n * }, { ...validationObject });\n *```\n *\n * @method beforeSaveFile\n * @name Parse.Cloud.beforeSaveFile\n * @param {Function} func The function to run before saving a file. This function can be async and should take just one parameter, {@link Parse.Cloud.FileTriggerRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.FileTriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.beforeSaveFile = function (handler, validationHandler) {\n  validateValidator(validationHandler);\n  triggers.addFileTrigger(\n    triggers.Types.beforeSaveFile,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Registers an after save file function.\n *\n * **Available in Cloud Code only.**\n *\n * ```\n * Parse.Cloud.afterSaveFile(async (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.afterSaveFile(async (request) => {\n *  // code here\n * }, { ...validationObject });\n *```\n *\n * @method afterSaveFile\n * @name Parse.Cloud.afterSaveFile\n * @param {Function} func The function to run after saving a file. This function can be async and should take just one parameter, {@link Parse.Cloud.FileTriggerRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.FileTriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.afterSaveFile = function (handler, validationHandler) {\n  validateValidator(validationHandler);\n  triggers.addFileTrigger(\n    triggers.Types.afterSaveFile,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Registers a before delete file function.\n *\n * **Available in Cloud Code only.**\n *\n * ```\n * Parse.Cloud.beforeDeleteFile(async (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.beforeDeleteFile(async (request) => {\n *   // code here\n * }, { ...validationObject });\n *```\n *\n * @method beforeDeleteFile\n * @name Parse.Cloud.beforeDeleteFile\n * @param {Function} func The function to run before deleting a file. This function can be async and should take just one parameter, {@link Parse.Cloud.FileTriggerRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.FileTriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.beforeDeleteFile = function (handler, validationHandler) {\n  validateValidator(validationHandler);\n  triggers.addFileTrigger(\n    triggers.Types.beforeDeleteFile,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Registers an after delete file function.\n *\n * **Available in Cloud Code only.**\n *\n * ```\n * Parse.Cloud.afterDeleteFile(async (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.afterDeleteFile(async (request) => {\n *   // code here\n * }, { ...validationObject });\n *```\n *\n * @method afterDeleteFile\n * @name Parse.Cloud.afterDeleteFile\n * @param {Function} func The function to after before deleting a file. This function can be async and should take just one parameter, {@link Parse.Cloud.FileTriggerRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.FileTriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.afterDeleteFile = function (handler, validationHandler) {\n  validateValidator(validationHandler);\n  triggers.addFileTrigger(\n    triggers.Types.afterDeleteFile,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Registers a before live query server connect function.\n *\n * **Available in Cloud Code only.**\n *\n * ```\n * Parse.Cloud.beforeConnect(async (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.beforeConnect(async (request) => {\n *   // code here\n * }, { ...validationObject });\n *```\n *\n * @method beforeConnect\n * @name Parse.Cloud.beforeConnect\n * @param {Function} func The function to before connection is made. This function can be async and should take just one parameter, {@link Parse.Cloud.ConnectTriggerRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.ConnectTriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.beforeConnect = function (handler, validationHandler) {\n  validateValidator(validationHandler);\n  triggers.addConnectTrigger(\n    triggers.Types.beforeConnect,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\n/**\n * Sends an email through the Parse Server mail adapter.\n *\n * **Available in Cloud Code only.**\n * **Requires a mail adapter to be configured for Parse Server.**\n *\n * ```\n * Parse.Cloud.sendEmail({\n *   from: 'Example <test@example.com>',\n *   to: 'contact@example.com',\n *   subject: 'Test email',\n *   text: 'This email is a test.'\n * });\n *```\n *\n * @method sendEmail\n * @name Parse.Cloud.sendEmail\n * @param {Object} data The object of the mail data to send.\n */\nParseCloud.sendEmail = function (data) {\n  const config = Config.get(Parse.applicationId);\n  const emailAdapter = config.userController.adapter;\n  if (!emailAdapter) {\n    config.loggerController.error(\n      'Failed to send email because no mail adapter is configured for Parse Server.'\n    );\n    return;\n  }\n  return emailAdapter.sendMail(data);\n};\n\n/**\n * Registers a before live query subscription function.\n *\n * **Available in Cloud Code only.**\n *\n * If you want to use beforeSubscribe for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.\n * ```\n * Parse.Cloud.beforeSubscribe('MyCustomClass', (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.beforeSubscribe(Parse.User, (request) => {\n *   // code here\n * }, { ...validationObject });\n *```\n *\n * @method beforeSubscribe\n * @name Parse.Cloud.beforeSubscribe\n * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the before subscription function for. This can instead be a String that is the className of the subclass.\n * @param {Function} func The function to run before a subscription. This function can be async and should take one parameter, a {@link Parse.Cloud.TriggerRequest}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.TriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.beforeSubscribe = function (parseClass, handler, validationHandler) {\n  validateValidator(validationHandler);\n  const className = triggers.getClassName(parseClass);\n  triggers.addTrigger(\n    triggers.Types.beforeSubscribe,\n    className,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\nParseCloud.onLiveQueryEvent = function (handler) {\n  triggers.addLiveQueryEventHandler(handler, Parse.applicationId);\n};\n\n/**\n * Registers an after live query server event function.\n *\n * **Available in Cloud Code only.**\n *\n * ```\n * Parse.Cloud.afterLiveQueryEvent('MyCustomClass', (request) => {\n *   // code here\n * }, (request) => {\n *   // validation code here\n * });\n *\n * Parse.Cloud.afterLiveQueryEvent('MyCustomClass', (request) => {\n *   // code here\n * }, { ...validationObject });\n *```\n *\n * @method afterLiveQueryEvent\n * @name Parse.Cloud.afterLiveQueryEvent\n * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the after live query event function for. This can instead be a String that is the className of the subclass.\n * @param {Function} func The function to run after a live query event. This function can be async and should take one parameter, a {@link Parse.Cloud.LiveQueryEventTrigger}.\n * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.LiveQueryEventTrigger}, or a {@link Parse.Cloud.ValidatorObject}.\n */\nParseCloud.afterLiveQueryEvent = function (parseClass, handler, validationHandler) {\n  const className = triggers.getClassName(parseClass);\n  validateValidator(validationHandler);\n  triggers.addTrigger(\n    triggers.Types.afterEvent,\n    className,\n    handler,\n    Parse.applicationId,\n    validationHandler\n  );\n};\n\nParseCloud._removeAllHooks = () => {\n  triggers._unregisterAll();\n};\n\nParseCloud.useMasterKey = () => {\n  // eslint-disable-next-line\n  console.warn(\n    'Parse.Cloud.useMasterKey is deprecated (and has no effect anymore) on parse-server, please refer to the cloud code migration notes: http://docs.parseplatform.org/parse-server/guide/#master-key-must-be-passed-explicitly'\n  );\n};\n\nconst request = require('./httpRequest');\nParseCloud.httpRequest = opts => {\n  Deprecator.logRuntimeDeprecation({\n    usage: 'Parse.Cloud.httpRequest',\n    solution: 'Use a http request library instead.',\n  });\n  return request(opts);\n};\n\nmodule.exports = ParseCloud;\n\n/**\n * @interface Parse.Cloud.TriggerRequest\n * @property {String} installationId If set, the installationId triggering the request.\n * @property {Boolean} master If true, means the master key was used.\n * @property {Parse.User} user If set, the user that made the request.\n * @property {Parse.Object} object The object triggering the hook.\n * @property {String} ip The IP address of the client making the request.\n * @property {Object} headers The original HTTP headers for the request.\n * @property {String} triggerName The name of the trigger (`beforeSave`, `afterSave`, ...)\n * @property {Object} log The current logger inside Parse Server.\n * @property {Parse.Object} original If set, the object, as currently stored.\n */\n\n/**\n * @interface Parse.Cloud.FileTriggerRequest\n * @property {String} installationId If set, the installationId triggering the request.\n * @property {Boolean} master If true, means the master key was used.\n * @property {Parse.User} user If set, the user that made the request.\n * @property {Parse.File} file The file that triggered the hook.\n * @property {Integer} fileSize The size of the file in bytes.\n * @property {Integer} contentLength The value from Content-Length header\n * @property {String} ip The IP address of the client making the request.\n * @property {Object} headers The original HTTP headers for the request.\n * @property {String} triggerName The name of the trigger (`beforeSaveFile`, `afterSaveFile`)\n * @property {Object} log The current logger inside Parse Server.\n */\n\n/**\n * @interface Parse.Cloud.ConnectTriggerRequest\n * @property {String} installationId If set, the installationId triggering the request.\n * @property {Boolean} useMasterKey If true, means the master key was used.\n * @property {Parse.User} user If set, the user that made the request.\n * @property {Integer} clients The number of clients connected.\n * @property {Integer} subscriptions The number of subscriptions connected.\n * @property {String} sessionToken If set, the session of the user that made the request.\n */\n\n/**\n * @interface Parse.Cloud.LiveQueryEventTrigger\n * @property {String} installationId If set, the installationId triggering the request.\n * @property {Boolean} useMasterKey If true, means the master key was used.\n * @property {Parse.User} user If set, the user that made the request.\n * @property {String} sessionToken If set, the session of the user that made the request.\n * @property {String} event The live query event that triggered the request.\n * @property {Parse.Object} object The object triggering the hook.\n * @property {Parse.Object} original If set, the object, as currently stored.\n * @property {Integer} clients The number of clients connected.\n * @property {Integer} subscriptions The number of subscriptions connected.\n * @property {Boolean} sendEvent If the LiveQuery event should be sent to the client. Set to false to prevent LiveQuery from pushing to the client.\n */\n\n/**\n * @interface Parse.Cloud.BeforeFindRequest\n * @property {String} installationId If set, the installationId triggering the request.\n * @property {Boolean} master If true, means the master key was used.\n * @property {Parse.User} user If set, the user that made the request.\n * @property {Parse.Query} query The query triggering the hook.\n * @property {String} ip The IP address of the client making the request.\n * @property {Object} headers The original HTTP headers for the request.\n * @property {String} triggerName The name of the trigger (`beforeSave`, `afterSave`, ...)\n * @property {Object} log The current logger inside Parse Server.\n * @property {Boolean} isGet wether the query a `get` or a `find`\n */\n\n/**\n * @interface Parse.Cloud.AfterFindRequest\n * @property {String} installationId If set, the installationId triggering the request.\n * @property {Boolean} master If true, means the master key was used.\n * @property {Parse.User} user If set, the user that made the request.\n * @property {Parse.Query} query The query triggering the hook.\n * @property {Array<Parse.Object>} results The results the query yielded.\n * @property {String} ip The IP address of the client making the request.\n * @property {Object} headers The original HTTP headers for the request.\n * @property {String} triggerName The name of the trigger (`beforeSave`, `afterSave`, ...)\n * @property {Object} log The current logger inside Parse Server.\n */\n\n/**\n * @interface Parse.Cloud.FunctionRequest\n * @property {String} installationId If set, the installationId triggering the request.\n * @property {Boolean} master If true, means the master key was used.\n * @property {Parse.User} user If set, the user that made the request.\n * @property {Object} params The params passed to the cloud function.\n */\n\n/**\n * @interface Parse.Cloud.JobRequest\n * @property {Object} params The params passed to the background job.\n * @property {function} message If message is called with a string argument, will update the current message to be stored in the job status.\n */\n\n/**\n * @interface Parse.Cloud.ValidatorObject\n * @property {Boolean} requireUser whether the cloud trigger requires a user.\n * @property {Boolean} requireMaster whether the cloud trigger requires a master key.\n * @property {Boolean} validateMasterKey whether the validator should run if masterKey is provided. Defaults to false.\n * @property {Boolean} skipWithMasterKey whether the cloud code function should be ignored using a masterKey.\n *\n * @property {Array<String>|Object} requireUserKeys If set, keys required on request.user to make the request.\n * @property {String} requireUserKeys.field If requireUserKeys is an object, name of field to validate on request user\n * @property {Array|function|Any} requireUserKeys.field.options array of options that the field can be, function to validate field, or single value. Throw an error if value is invalid.\n * @property {String} requireUserKeys.field.error custom error message if field is invalid.\n *\n * @property {Array<String>|function}requireAnyUserRoles If set, request.user has to be part of at least one roles name to make the request. If set to a function, function must return role names.\n * @property {Array<String>|function}requireAllUserRoles If set, request.user has to be part all roles name to make the request. If set to a function, function must return role names.\n *\n * @property {Object|Array<String>} fields if an array of strings, validator will look for keys in request.params, and throw if not provided. If Object, fields to validate. If the trigger is a cloud function, `request.params` will be validated, otherwise `request.object`.\n * @property {String} fields.field name of field to validate.\n * @property {String} fields.field.type expected type of data for field.\n * @property {Boolean} fields.field.constant whether the field can be modified on the object.\n * @property {Any} fields.field.default default value if field is `null`, or initial value `constant` is `true`.\n * @property {Array|function|Any} fields.field.options array of options that the field can be, function to validate field, or single value. Throw an error if value is invalid.\n * @property {String} fields.field.error custom error message if field is invalid.\n */\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"72aa572c8ec98a3cb82c320b8e617c3caef89167"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_mmt0j70b7=function(){return actualCoverage;};}return actualCoverage;}cov_mmt0j70b7();var _node=(cov_mmt0j70b7().s[0]++,require("parse/node"));var triggers=(cov_mmt0j70b7().s[1]++,_interopRequireWildcard(require("../triggers")));var _Deprecator=(cov_mmt0j70b7().s[2]++,_interopRequireDefault(require("../Deprecator/Deprecator")));function _interopRequireDefault(obj){cov_mmt0j70b7().f[0]++;cov_mmt0j70b7().s[3]++;return(cov_mmt0j70b7().b[1][0]++,obj)&&(cov_mmt0j70b7().b[1][1]++,obj.__esModule)?(cov_mmt0j70b7().b[0][0]++,obj):(cov_mmt0j70b7().b[0][1]++,{default:obj});}function _getRequireWildcardCache(nodeInterop){cov_mmt0j70b7().f[1]++;cov_mmt0j70b7().s[4]++;if(typeof WeakMap!=="function"){cov_mmt0j70b7().b[2][0]++;cov_mmt0j70b7().s[5]++;return null;}else{cov_mmt0j70b7().b[2][1]++;}var cacheBabelInterop=(cov_mmt0j70b7().s[6]++,new WeakMap());var cacheNodeInterop=(cov_mmt0j70b7().s[7]++,new WeakMap());cov_mmt0j70b7().s[8]++;return(_getRequireWildcardCache=function(nodeInterop){cov_mmt0j70b7().f[2]++;cov_mmt0j70b7().s[9]++;return nodeInterop?(cov_mmt0j70b7().b[3][0]++,cacheNodeInterop):(cov_mmt0j70b7().b[3][1]++,cacheBabelInterop);})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){cov_mmt0j70b7().f[3]++;cov_mmt0j70b7().s[10]++;if((cov_mmt0j70b7().b[5][0]++,!nodeInterop)&&(cov_mmt0j70b7().b[5][1]++,obj)&&(cov_mmt0j70b7().b[5][2]++,obj.__esModule)){cov_mmt0j70b7().b[4][0]++;cov_mmt0j70b7().s[11]++;return obj;}else{cov_mmt0j70b7().b[4][1]++;}cov_mmt0j70b7().s[12]++;if((cov_mmt0j70b7().b[7][0]++,obj===null)||(cov_mmt0j70b7().b[7][1]++,typeof obj!=="object")&&(cov_mmt0j70b7().b[7][2]++,typeof obj!=="function")){cov_mmt0j70b7().b[6][0]++;cov_mmt0j70b7().s[13]++;return{default:obj};}else{cov_mmt0j70b7().b[6][1]++;}var cache=(cov_mmt0j70b7().s[14]++,_getRequireWildcardCache(nodeInterop));cov_mmt0j70b7().s[15]++;if((cov_mmt0j70b7().b[9][0]++,cache)&&(cov_mmt0j70b7().b[9][1]++,cache.has(obj))){cov_mmt0j70b7().b[8][0]++;cov_mmt0j70b7().s[16]++;return cache.get(obj);}else{cov_mmt0j70b7().b[8][1]++;}var newObj=(cov_mmt0j70b7().s[17]++,{});var hasPropertyDescriptor=(cov_mmt0j70b7().s[18]++,(cov_mmt0j70b7().b[10][0]++,Object.defineProperty)&&(cov_mmt0j70b7().b[10][1]++,Object.getOwnPropertyDescriptor));cov_mmt0j70b7().s[19]++;for(var key in obj){cov_mmt0j70b7().s[20]++;if((cov_mmt0j70b7().b[12][0]++,key!=="default")&&(cov_mmt0j70b7().b[12][1]++,Object.prototype.hasOwnProperty.call(obj,key))){cov_mmt0j70b7().b[11][0]++;var desc=(cov_mmt0j70b7().s[21]++,hasPropertyDescriptor?(cov_mmt0j70b7().b[13][0]++,Object.getOwnPropertyDescriptor(obj,key)):(cov_mmt0j70b7().b[13][1]++,null));cov_mmt0j70b7().s[22]++;if((cov_mmt0j70b7().b[15][0]++,desc)&&((cov_mmt0j70b7().b[15][1]++,desc.get)||(cov_mmt0j70b7().b[15][2]++,desc.set))){cov_mmt0j70b7().b[14][0]++;cov_mmt0j70b7().s[23]++;Object.defineProperty(newObj,key,desc);}else{cov_mmt0j70b7().b[14][1]++;cov_mmt0j70b7().s[24]++;newObj[key]=obj[key];}}else{cov_mmt0j70b7().b[11][1]++;}}cov_mmt0j70b7().s[25]++;newObj.default=obj;cov_mmt0j70b7().s[26]++;if(cache){cov_mmt0j70b7().b[16][0]++;cov_mmt0j70b7().s[27]++;cache.set(obj,newObj);}else{cov_mmt0j70b7().b[16][1]++;}cov_mmt0j70b7().s[28]++;return newObj;}const Config=(cov_mmt0j70b7().s[29]++,require('../Config'));function isParseObjectConstructor(object){cov_mmt0j70b7().f[4]++;cov_mmt0j70b7().s[30]++;return(cov_mmt0j70b7().b[17][0]++,typeof object==='function')&&(cov_mmt0j70b7().b[17][1]++,Object.prototype.hasOwnProperty.call(object,'className'));}function validateValidator(validator){cov_mmt0j70b7().f[5]++;cov_mmt0j70b7().s[31]++;if((cov_mmt0j70b7().b[19][0]++,!validator)||(cov_mmt0j70b7().b[19][1]++,typeof validator==='function')){cov_mmt0j70b7().b[18][0]++;cov_mmt0j70b7().s[32]++;return;}else{cov_mmt0j70b7().b[18][1]++;}const fieldOptions=(cov_mmt0j70b7().s[33]++,{type:['Any'],constant:[Boolean],default:['Any'],options:[Array,'function','Any'],required:[Boolean],error:[String]});const allowedKeys=(cov_mmt0j70b7().s[34]++,{requireUser:[Boolean],requireAnyUserRoles:[Array,'function'],requireAllUserRoles:[Array,'function'],requireMaster:[Boolean],validateMasterKey:[Boolean],skipWithMasterKey:[Boolean],requireUserKeys:[Array,Object],fields:[Array,Object]});cov_mmt0j70b7().s[35]++;const getType=fn=>{cov_mmt0j70b7().f[6]++;cov_mmt0j70b7().s[36]++;if(Array.isArray(fn)){cov_mmt0j70b7().b[20][0]++;cov_mmt0j70b7().s[37]++;return'array';}else{cov_mmt0j70b7().b[20][1]++;}cov_mmt0j70b7().s[38]++;if((cov_mmt0j70b7().b[22][0]++,fn==='Any')||(cov_mmt0j70b7().b[22][1]++,fn==='function')){cov_mmt0j70b7().b[21][0]++;cov_mmt0j70b7().s[39]++;return fn;}else{cov_mmt0j70b7().b[21][1]++;}const type=(cov_mmt0j70b7().s[40]++,typeof fn);cov_mmt0j70b7().s[41]++;if(typeof fn==='function'){cov_mmt0j70b7().b[23][0]++;const match=(cov_mmt0j70b7().s[42]++,(cov_mmt0j70b7().b[24][0]++,fn)&&(cov_mmt0j70b7().b[24][1]++,fn.toString().match(/^\s*function (\w+)/)));cov_mmt0j70b7().s[43]++;return(match?(cov_mmt0j70b7().b[25][0]++,match[1]):(cov_mmt0j70b7().b[25][1]++,'function')).toLowerCase();}else{cov_mmt0j70b7().b[23][1]++;}cov_mmt0j70b7().s[44]++;return type;};cov_mmt0j70b7().s[45]++;const checkKey=(key,data,validatorParam)=>{cov_mmt0j70b7().f[7]++;const parameter=(cov_mmt0j70b7().s[46]++,data[key]);cov_mmt0j70b7().s[47]++;if(!parameter){cov_mmt0j70b7().b[26][0]++;cov_mmt0j70b7().s[48]++;throw`${key} is not a supported parameter for Cloud Function validations.`;}else{cov_mmt0j70b7().b[26][1]++;}const types=(cov_mmt0j70b7().s[49]++,parameter.map(type=>{cov_mmt0j70b7().f[8]++;cov_mmt0j70b7().s[50]++;return getType(type);}));const type=(cov_mmt0j70b7().s[51]++,getType(validatorParam));cov_mmt0j70b7().s[52]++;if((cov_mmt0j70b7().b[28][0]++,!types.includes(type))&&(cov_mmt0j70b7().b[28][1]++,!types.includes('Any'))){cov_mmt0j70b7().b[27][0]++;cov_mmt0j70b7().s[53]++;throw`Invalid type for Cloud Function validation key ${key}. Expected ${types.join('|')}, actual ${type}`;}else{cov_mmt0j70b7().b[27][1]++;}};cov_mmt0j70b7().s[54]++;for(const key in validator){cov_mmt0j70b7().s[55]++;checkKey(key,allowedKeys,validator[key]);cov_mmt0j70b7().s[56]++;if((cov_mmt0j70b7().b[30][0]++,key==='fields')||(cov_mmt0j70b7().b[30][1]++,key==='requireUserKeys')){cov_mmt0j70b7().b[29][0]++;const values=(cov_mmt0j70b7().s[57]++,validator[key]);cov_mmt0j70b7().s[58]++;if(Array.isArray(values)){cov_mmt0j70b7().b[31][0]++;cov_mmt0j70b7().s[59]++;continue;}else{cov_mmt0j70b7().b[31][1]++;}cov_mmt0j70b7().s[60]++;for(const value in values){const data=(cov_mmt0j70b7().s[61]++,values[value]);cov_mmt0j70b7().s[62]++;for(const subKey in data){cov_mmt0j70b7().s[63]++;checkKey(subKey,fieldOptions,data[subKey]);}}}else{cov_mmt0j70b7().b[29][1]++;}}}/** @namespace
 * @name Parse
 * @description The Parse SDK.
 *  see [api docs](https://docs.parseplatform.org/js/api) and [guide](https://docs.parseplatform.org/js/guide)
 */ /** @namespace
 * @name Parse.Cloud
 * @memberof Parse
 * @description The Parse Cloud Code SDK.
 */var ParseCloud=(cov_mmt0j70b7().s[64]++,{});/**
 * Defines a Cloud Function.
 *
 * **Available in Cloud Code only.**
 *
 * ```
 * Parse.Cloud.define('functionName', (request) => {
 *   // code here
 * }, (request) => {
 *   // validation code here
 * });
 *
 * Parse.Cloud.define('functionName', (request) => {
 *   // code here
 * }, { ...validationObject });
 * ```
 *
 * @static
 * @memberof Parse.Cloud
 * @param {String} name The name of the Cloud Function
 * @param {Function} data The Cloud Function to register. This function can be an async function and should take one parameter a {@link Parse.Cloud.FunctionRequest}.
 * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.FunctionRequest}, or a {@link Parse.Cloud.ValidatorObject}.
 */cov_mmt0j70b7().s[65]++;ParseCloud.define=function(functionName,handler,validationHandler){cov_mmt0j70b7().f[9]++;cov_mmt0j70b7().s[66]++;validateValidator(validationHandler);cov_mmt0j70b7().s[67]++;triggers.addFunction(functionName,handler,validationHandler,_node.Parse.applicationId);};/**
 * Defines a Background Job.
 *
 * **Available in Cloud Code only.**
 *
 * @method job
 * @name Parse.Cloud.job
 * @param {String} name The name of the Background Job
 * @param {Function} func The Background Job to register. This function can be async should take a single parameters a {@link Parse.Cloud.JobRequest}
 *
 */cov_mmt0j70b7().s[68]++;ParseCloud.job=function(functionName,handler){cov_mmt0j70b7().f[10]++;cov_mmt0j70b7().s[69]++;triggers.addJob(functionName,handler,_node.Parse.applicationId);};/**
 *
 * Registers a before save function.
 *
 * **Available in Cloud Code only.**
 *
 * If you want to use beforeSave for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.
 *
 * ```
 * Parse.Cloud.beforeSave('MyCustomClass', (request) => {
 *   // code here
 * }, (request) => {
 *   // validation code here
 * });
 *
 * Parse.Cloud.beforeSave(Parse.User, (request) => {
 *   // code here
 * }, { ...validationObject })
 * ```
 *
 * @method beforeSave
 * @name Parse.Cloud.beforeSave
 * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the after save function for. This can instead be a String that is the className of the subclass.
 * @param {Function} func The function to run before a save. This function can be async and should take one parameter a {@link Parse.Cloud.TriggerRequest};
 * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.TriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.
 */cov_mmt0j70b7().s[70]++;ParseCloud.beforeSave=function(parseClass,handler,validationHandler){cov_mmt0j70b7().f[11]++;const className=(cov_mmt0j70b7().s[71]++,triggers.getClassName(parseClass));cov_mmt0j70b7().s[72]++;validateValidator(validationHandler);cov_mmt0j70b7().s[73]++;triggers.addTrigger(triggers.Types.beforeSave,className,handler,_node.Parse.applicationId,validationHandler);};/**
 * Registers a before delete function.
 *
 * **Available in Cloud Code only.**
 *
 * If you want to use beforeDelete for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.
 * ```
 * Parse.Cloud.beforeDelete('MyCustomClass', (request) => {
 *   // code here
 * }, (request) => {
 *   // validation code here
 * });
 *
 * Parse.Cloud.beforeDelete(Parse.User, (request) => {
 *   // code here
 * }, { ...validationObject })
 *```
 *
 * @method beforeDelete
 * @name Parse.Cloud.beforeDelete
 * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the before delete function for. This can instead be a String that is the className of the subclass.
 * @param {Function} func The function to run before a delete. This function can be async and should take one parameter, a {@link Parse.Cloud.TriggerRequest}.
 * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.TriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.
 */cov_mmt0j70b7().s[74]++;ParseCloud.beforeDelete=function(parseClass,handler,validationHandler){cov_mmt0j70b7().f[12]++;const className=(cov_mmt0j70b7().s[75]++,triggers.getClassName(parseClass));cov_mmt0j70b7().s[76]++;validateValidator(validationHandler);cov_mmt0j70b7().s[77]++;triggers.addTrigger(triggers.Types.beforeDelete,className,handler,_node.Parse.applicationId,validationHandler);};/**
 *
 * Registers the before login function.
 *
 * **Available in Cloud Code only.**
 *
 * This function provides further control
 * in validating a login attempt. Specifically,
 * it is triggered after a user enters
 * correct credentials (or other valid authData),
 * but prior to a session being generated.
 *
 * ```
 * Parse.Cloud.beforeLogin((request) => {
 *   // code here
 * })
 *
 * ```
 *
 * @method beforeLogin
 * @name Parse.Cloud.beforeLogin
 * @param {Function} func The function to run before a login. This function can be async and should take one parameter a {@link Parse.Cloud.TriggerRequest};
 */cov_mmt0j70b7().s[78]++;ParseCloud.beforeLogin=function(handler){cov_mmt0j70b7().f[13]++;let className=(cov_mmt0j70b7().s[79]++,'_User');cov_mmt0j70b7().s[80]++;if((cov_mmt0j70b7().b[33][0]++,typeof handler==='string')||(cov_mmt0j70b7().b[33][1]++,isParseObjectConstructor(handler))){cov_mmt0j70b7().b[32][0]++;cov_mmt0j70b7().s[81]++;// validation will occur downstream, this is to maintain internal
// code consistency with the other hook types.
className=triggers.getClassName(handler);cov_mmt0j70b7().s[82]++;handler=arguments[1];}else{cov_mmt0j70b7().b[32][1]++;}cov_mmt0j70b7().s[83]++;triggers.addTrigger(triggers.Types.beforeLogin,className,handler,_node.Parse.applicationId);};/**
 *
 * Registers the after login function.
 *
 * **Available in Cloud Code only.**
 *
 * This function is triggered after a user logs in successfully,
 * and after a _Session object has been created.
 *
 * ```
 * Parse.Cloud.afterLogin((request) => {
 *   // code here
 * });
 * ```
 *
 * @method afterLogin
 * @name Parse.Cloud.afterLogin
 * @param {Function} func The function to run after a login. This function can be async and should take one parameter a {@link Parse.Cloud.TriggerRequest};
 */cov_mmt0j70b7().s[84]++;ParseCloud.afterLogin=function(handler){cov_mmt0j70b7().f[14]++;let className=(cov_mmt0j70b7().s[85]++,'_User');cov_mmt0j70b7().s[86]++;if((cov_mmt0j70b7().b[35][0]++,typeof handler==='string')||(cov_mmt0j70b7().b[35][1]++,isParseObjectConstructor(handler))){cov_mmt0j70b7().b[34][0]++;cov_mmt0j70b7().s[87]++;// validation will occur downstream, this is to maintain internal
// code consistency with the other hook types.
className=triggers.getClassName(handler);cov_mmt0j70b7().s[88]++;handler=arguments[1];}else{cov_mmt0j70b7().b[34][1]++;}cov_mmt0j70b7().s[89]++;triggers.addTrigger(triggers.Types.afterLogin,className,handler,_node.Parse.applicationId);};/**
 *
 * Registers the after logout function.
 *
 * **Available in Cloud Code only.**
 *
 * This function is triggered after a user logs out.
 *
 * ```
 * Parse.Cloud.afterLogout((request) => {
 *   // code here
 * });
 * ```
 *
 * @method afterLogout
 * @name Parse.Cloud.afterLogout
 * @param {Function} func The function to run after a logout. This function can be async and should take one parameter a {@link Parse.Cloud.TriggerRequest};
 */cov_mmt0j70b7().s[90]++;ParseCloud.afterLogout=function(handler){cov_mmt0j70b7().f[15]++;let className=(cov_mmt0j70b7().s[91]++,'_Session');cov_mmt0j70b7().s[92]++;if((cov_mmt0j70b7().b[37][0]++,typeof handler==='string')||(cov_mmt0j70b7().b[37][1]++,isParseObjectConstructor(handler))){cov_mmt0j70b7().b[36][0]++;cov_mmt0j70b7().s[93]++;// validation will occur downstream, this is to maintain internal
// code consistency with the other hook types.
className=triggers.getClassName(handler);cov_mmt0j70b7().s[94]++;handler=arguments[1];}else{cov_mmt0j70b7().b[36][1]++;}cov_mmt0j70b7().s[95]++;triggers.addTrigger(triggers.Types.afterLogout,className,handler,_node.Parse.applicationId);};/**
 * Registers an after save function.
 *
 * **Available in Cloud Code only.**
 *
 * If you want to use afterSave for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.
 *
 * ```
 * Parse.Cloud.afterSave('MyCustomClass', async function(request) {
 *   // code here
 * }, (request) => {
 *   // validation code here
 * });
 *
 * Parse.Cloud.afterSave(Parse.User, async function(request) {
 *   // code here
 * }, { ...validationObject });
 * ```
 *
 * @method afterSave
 * @name Parse.Cloud.afterSave
 * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the after save function for. This can instead be a String that is the className of the subclass.
 * @param {Function} func The function to run after a save. This function can be an async function and should take just one parameter, {@link Parse.Cloud.TriggerRequest}.
 * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.TriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.
 */cov_mmt0j70b7().s[96]++;ParseCloud.afterSave=function(parseClass,handler,validationHandler){cov_mmt0j70b7().f[16]++;const className=(cov_mmt0j70b7().s[97]++,triggers.getClassName(parseClass));cov_mmt0j70b7().s[98]++;validateValidator(validationHandler);cov_mmt0j70b7().s[99]++;triggers.addTrigger(triggers.Types.afterSave,className,handler,_node.Parse.applicationId,validationHandler);};/**
 * Registers an after delete function.
 *
 * **Available in Cloud Code only.**
 *
 * If you want to use afterDelete for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.
 * ```
 * Parse.Cloud.afterDelete('MyCustomClass', async (request) => {
 *   // code here
 * }, (request) => {
 *   // validation code here
 * });
 *
 * Parse.Cloud.afterDelete(Parse.User, async (request) => {
 *   // code here
 * }, { ...validationObject });
 *```
 *
 * @method afterDelete
 * @name Parse.Cloud.afterDelete
 * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the after delete function for. This can instead be a String that is the className of the subclass.
 * @param {Function} func The function to run after a delete. This function can be async and should take just one parameter, {@link Parse.Cloud.TriggerRequest}.
 * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.TriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.
 */cov_mmt0j70b7().s[100]++;ParseCloud.afterDelete=function(parseClass,handler,validationHandler){cov_mmt0j70b7().f[17]++;const className=(cov_mmt0j70b7().s[101]++,triggers.getClassName(parseClass));cov_mmt0j70b7().s[102]++;validateValidator(validationHandler);cov_mmt0j70b7().s[103]++;triggers.addTrigger(triggers.Types.afterDelete,className,handler,_node.Parse.applicationId,validationHandler);};/**
 * Registers a before find function.
 *
 * **Available in Cloud Code only.**
 *
 * If you want to use beforeFind for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.
 * ```
 * Parse.Cloud.beforeFind('MyCustomClass', async (request) => {
 *   // code here
 * }, (request) => {
 *   // validation code here
 * });
 *
 * Parse.Cloud.beforeFind(Parse.User, async (request) => {
 *   // code here
 * }, { ...validationObject });
 *```
 *
 * @method beforeFind
 * @name Parse.Cloud.beforeFind
 * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the before find function for. This can instead be a String that is the className of the subclass.
 * @param {Function} func The function to run before a find. This function can be async and should take just one parameter, {@link Parse.Cloud.BeforeFindRequest}.
 * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.BeforeFindRequest}, or a {@link Parse.Cloud.ValidatorObject}.
 */cov_mmt0j70b7().s[104]++;ParseCloud.beforeFind=function(parseClass,handler,validationHandler){cov_mmt0j70b7().f[18]++;const className=(cov_mmt0j70b7().s[105]++,triggers.getClassName(parseClass));cov_mmt0j70b7().s[106]++;validateValidator(validationHandler);cov_mmt0j70b7().s[107]++;triggers.addTrigger(triggers.Types.beforeFind,className,handler,_node.Parse.applicationId,validationHandler);};/**
 * Registers an after find function.
 *
 * **Available in Cloud Code only.**
 *
 * If you want to use afterFind for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.
 * ```
 * Parse.Cloud.afterFind('MyCustomClass', async (request) => {
 *   // code here
 * }, (request) => {
 *   // validation code here
 * });
 *
 * Parse.Cloud.afterFind(Parse.User, async (request) => {
 *   // code here
 * }, { ...validationObject });
 *```
 *
 * @method afterFind
 * @name Parse.Cloud.afterFind
 * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the after find function for. This can instead be a String that is the className of the subclass.
 * @param {Function} func The function to run before a find. This function can be async and should take just one parameter, {@link Parse.Cloud.AfterFindRequest}.
 * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.AfterFindRequest}, or a {@link Parse.Cloud.ValidatorObject}.
 */cov_mmt0j70b7().s[108]++;ParseCloud.afterFind=function(parseClass,handler,validationHandler){cov_mmt0j70b7().f[19]++;const className=(cov_mmt0j70b7().s[109]++,triggers.getClassName(parseClass));cov_mmt0j70b7().s[110]++;validateValidator(validationHandler);cov_mmt0j70b7().s[111]++;triggers.addTrigger(triggers.Types.afterFind,className,handler,_node.Parse.applicationId,validationHandler);};/**
 * Registers a before save file function.
 *
 * **Available in Cloud Code only.**
 *
 * ```
 * Parse.Cloud.beforeSaveFile(async (request) => {
 *   // code here
 * }, (request) => {
 *   // validation code here
 * });
 *
 * Parse.Cloud.beforeSaveFile(async (request) => {
 *   // code here
 * }, { ...validationObject });
 *```
 *
 * @method beforeSaveFile
 * @name Parse.Cloud.beforeSaveFile
 * @param {Function} func The function to run before saving a file. This function can be async and should take just one parameter, {@link Parse.Cloud.FileTriggerRequest}.
 * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.FileTriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.
 */cov_mmt0j70b7().s[112]++;ParseCloud.beforeSaveFile=function(handler,validationHandler){cov_mmt0j70b7().f[20]++;cov_mmt0j70b7().s[113]++;validateValidator(validationHandler);cov_mmt0j70b7().s[114]++;triggers.addFileTrigger(triggers.Types.beforeSaveFile,handler,_node.Parse.applicationId,validationHandler);};/**
 * Registers an after save file function.
 *
 * **Available in Cloud Code only.**
 *
 * ```
 * Parse.Cloud.afterSaveFile(async (request) => {
 *   // code here
 * }, (request) => {
 *   // validation code here
 * });
 *
 * Parse.Cloud.afterSaveFile(async (request) => {
 *  // code here
 * }, { ...validationObject });
 *```
 *
 * @method afterSaveFile
 * @name Parse.Cloud.afterSaveFile
 * @param {Function} func The function to run after saving a file. This function can be async and should take just one parameter, {@link Parse.Cloud.FileTriggerRequest}.
 * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.FileTriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.
 */cov_mmt0j70b7().s[115]++;ParseCloud.afterSaveFile=function(handler,validationHandler){cov_mmt0j70b7().f[21]++;cov_mmt0j70b7().s[116]++;validateValidator(validationHandler);cov_mmt0j70b7().s[117]++;triggers.addFileTrigger(triggers.Types.afterSaveFile,handler,_node.Parse.applicationId,validationHandler);};/**
 * Registers a before delete file function.
 *
 * **Available in Cloud Code only.**
 *
 * ```
 * Parse.Cloud.beforeDeleteFile(async (request) => {
 *   // code here
 * }, (request) => {
 *   // validation code here
 * });
 *
 * Parse.Cloud.beforeDeleteFile(async (request) => {
 *   // code here
 * }, { ...validationObject });
 *```
 *
 * @method beforeDeleteFile
 * @name Parse.Cloud.beforeDeleteFile
 * @param {Function} func The function to run before deleting a file. This function can be async and should take just one parameter, {@link Parse.Cloud.FileTriggerRequest}.
 * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.FileTriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.
 */cov_mmt0j70b7().s[118]++;ParseCloud.beforeDeleteFile=function(handler,validationHandler){cov_mmt0j70b7().f[22]++;cov_mmt0j70b7().s[119]++;validateValidator(validationHandler);cov_mmt0j70b7().s[120]++;triggers.addFileTrigger(triggers.Types.beforeDeleteFile,handler,_node.Parse.applicationId,validationHandler);};/**
 * Registers an after delete file function.
 *
 * **Available in Cloud Code only.**
 *
 * ```
 * Parse.Cloud.afterDeleteFile(async (request) => {
 *   // code here
 * }, (request) => {
 *   // validation code here
 * });
 *
 * Parse.Cloud.afterDeleteFile(async (request) => {
 *   // code here
 * }, { ...validationObject });
 *```
 *
 * @method afterDeleteFile
 * @name Parse.Cloud.afterDeleteFile
 * @param {Function} func The function to after before deleting a file. This function can be async and should take just one parameter, {@link Parse.Cloud.FileTriggerRequest}.
 * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.FileTriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.
 */cov_mmt0j70b7().s[121]++;ParseCloud.afterDeleteFile=function(handler,validationHandler){cov_mmt0j70b7().f[23]++;cov_mmt0j70b7().s[122]++;validateValidator(validationHandler);cov_mmt0j70b7().s[123]++;triggers.addFileTrigger(triggers.Types.afterDeleteFile,handler,_node.Parse.applicationId,validationHandler);};/**
 * Registers a before live query server connect function.
 *
 * **Available in Cloud Code only.**
 *
 * ```
 * Parse.Cloud.beforeConnect(async (request) => {
 *   // code here
 * }, (request) => {
 *   // validation code here
 * });
 *
 * Parse.Cloud.beforeConnect(async (request) => {
 *   // code here
 * }, { ...validationObject });
 *```
 *
 * @method beforeConnect
 * @name Parse.Cloud.beforeConnect
 * @param {Function} func The function to before connection is made. This function can be async and should take just one parameter, {@link Parse.Cloud.ConnectTriggerRequest}.
 * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.ConnectTriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.
 */cov_mmt0j70b7().s[124]++;ParseCloud.beforeConnect=function(handler,validationHandler){cov_mmt0j70b7().f[24]++;cov_mmt0j70b7().s[125]++;validateValidator(validationHandler);cov_mmt0j70b7().s[126]++;triggers.addConnectTrigger(triggers.Types.beforeConnect,handler,_node.Parse.applicationId,validationHandler);};/**
 * Sends an email through the Parse Server mail adapter.
 *
 * **Available in Cloud Code only.**
 * **Requires a mail adapter to be configured for Parse Server.**
 *
 * ```
 * Parse.Cloud.sendEmail({
 *   from: 'Example <test@example.com>',
 *   to: 'contact@example.com',
 *   subject: 'Test email',
 *   text: 'This email is a test.'
 * });
 *```
 *
 * @method sendEmail
 * @name Parse.Cloud.sendEmail
 * @param {Object} data The object of the mail data to send.
 */cov_mmt0j70b7().s[127]++;ParseCloud.sendEmail=function(data){cov_mmt0j70b7().f[25]++;const config=(cov_mmt0j70b7().s[128]++,Config.get(_node.Parse.applicationId));const emailAdapter=(cov_mmt0j70b7().s[129]++,config.userController.adapter);cov_mmt0j70b7().s[130]++;if(!emailAdapter){cov_mmt0j70b7().b[38][0]++;cov_mmt0j70b7().s[131]++;config.loggerController.error('Failed to send email because no mail adapter is configured for Parse Server.');cov_mmt0j70b7().s[132]++;return;}else{cov_mmt0j70b7().b[38][1]++;}cov_mmt0j70b7().s[133]++;return emailAdapter.sendMail(data);};/**
 * Registers a before live query subscription function.
 *
 * **Available in Cloud Code only.**
 *
 * If you want to use beforeSubscribe for a predefined class in the Parse JavaScript SDK (e.g. {@link Parse.User}), you should pass the class itself and not the String for arg1.
 * ```
 * Parse.Cloud.beforeSubscribe('MyCustomClass', (request) => {
 *   // code here
 * }, (request) => {
 *   // validation code here
 * });
 *
 * Parse.Cloud.beforeSubscribe(Parse.User, (request) => {
 *   // code here
 * }, { ...validationObject });
 *```
 *
 * @method beforeSubscribe
 * @name Parse.Cloud.beforeSubscribe
 * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the before subscription function for. This can instead be a String that is the className of the subclass.
 * @param {Function} func The function to run before a subscription. This function can be async and should take one parameter, a {@link Parse.Cloud.TriggerRequest}.
 * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.TriggerRequest}, or a {@link Parse.Cloud.ValidatorObject}.
 */cov_mmt0j70b7().s[134]++;ParseCloud.beforeSubscribe=function(parseClass,handler,validationHandler){cov_mmt0j70b7().f[26]++;cov_mmt0j70b7().s[135]++;validateValidator(validationHandler);const className=(cov_mmt0j70b7().s[136]++,triggers.getClassName(parseClass));cov_mmt0j70b7().s[137]++;triggers.addTrigger(triggers.Types.beforeSubscribe,className,handler,_node.Parse.applicationId,validationHandler);};cov_mmt0j70b7().s[138]++;ParseCloud.onLiveQueryEvent=function(handler){cov_mmt0j70b7().f[27]++;cov_mmt0j70b7().s[139]++;triggers.addLiveQueryEventHandler(handler,_node.Parse.applicationId);};/**
 * Registers an after live query server event function.
 *
 * **Available in Cloud Code only.**
 *
 * ```
 * Parse.Cloud.afterLiveQueryEvent('MyCustomClass', (request) => {
 *   // code here
 * }, (request) => {
 *   // validation code here
 * });
 *
 * Parse.Cloud.afterLiveQueryEvent('MyCustomClass', (request) => {
 *   // code here
 * }, { ...validationObject });
 *```
 *
 * @method afterLiveQueryEvent
 * @name Parse.Cloud.afterLiveQueryEvent
 * @param {(String|Parse.Object)} arg1 The Parse.Object subclass to register the after live query event function for. This can instead be a String that is the className of the subclass.
 * @param {Function} func The function to run after a live query event. This function can be async and should take one parameter, a {@link Parse.Cloud.LiveQueryEventTrigger}.
 * @param {(Object|Function)} validator An optional function to help validating cloud code. This function can be an async function and should take one parameter a {@link Parse.Cloud.LiveQueryEventTrigger}, or a {@link Parse.Cloud.ValidatorObject}.
 */cov_mmt0j70b7().s[140]++;ParseCloud.afterLiveQueryEvent=function(parseClass,handler,validationHandler){cov_mmt0j70b7().f[28]++;const className=(cov_mmt0j70b7().s[141]++,triggers.getClassName(parseClass));cov_mmt0j70b7().s[142]++;validateValidator(validationHandler);cov_mmt0j70b7().s[143]++;triggers.addTrigger(triggers.Types.afterEvent,className,handler,_node.Parse.applicationId,validationHandler);};cov_mmt0j70b7().s[144]++;ParseCloud._removeAllHooks=()=>{cov_mmt0j70b7().f[29]++;cov_mmt0j70b7().s[145]++;triggers._unregisterAll();};cov_mmt0j70b7().s[146]++;ParseCloud.useMasterKey=()=>{cov_mmt0j70b7().f[30]++;cov_mmt0j70b7().s[147]++;// eslint-disable-next-line
console.warn('Parse.Cloud.useMasterKey is deprecated (and has no effect anymore) on parse-server, please refer to the cloud code migration notes: http://docs.parseplatform.org/parse-server/guide/#master-key-must-be-passed-explicitly');};const request=(cov_mmt0j70b7().s[148]++,require('./httpRequest'));cov_mmt0j70b7().s[149]++;ParseCloud.httpRequest=opts=>{cov_mmt0j70b7().f[31]++;cov_mmt0j70b7().s[150]++;_Deprecator.default.logRuntimeDeprecation({usage:'Parse.Cloud.httpRequest',solution:'Use a http request library instead.'});cov_mmt0j70b7().s[151]++;return request(opts);};cov_mmt0j70b7().s[152]++;module.exports=ParseCloud;/**
 * @interface Parse.Cloud.TriggerRequest
 * @property {String} installationId If set, the installationId triggering the request.
 * @property {Boolean} master If true, means the master key was used.
 * @property {Parse.User} user If set, the user that made the request.
 * @property {Parse.Object} object The object triggering the hook.
 * @property {String} ip The IP address of the client making the request.
 * @property {Object} headers The original HTTP headers for the request.
 * @property {String} triggerName The name of the trigger (`beforeSave`, `afterSave`, ...)
 * @property {Object} log The current logger inside Parse Server.
 * @property {Parse.Object} original If set, the object, as currently stored.
 */ /**
 * @interface Parse.Cloud.FileTriggerRequest
 * @property {String} installationId If set, the installationId triggering the request.
 * @property {Boolean} master If true, means the master key was used.
 * @property {Parse.User} user If set, the user that made the request.
 * @property {Parse.File} file The file that triggered the hook.
 * @property {Integer} fileSize The size of the file in bytes.
 * @property {Integer} contentLength The value from Content-Length header
 * @property {String} ip The IP address of the client making the request.
 * @property {Object} headers The original HTTP headers for the request.
 * @property {String} triggerName The name of the trigger (`beforeSaveFile`, `afterSaveFile`)
 * @property {Object} log The current logger inside Parse Server.
 */ /**
 * @interface Parse.Cloud.ConnectTriggerRequest
 * @property {String} installationId If set, the installationId triggering the request.
 * @property {Boolean} useMasterKey If true, means the master key was used.
 * @property {Parse.User} user If set, the user that made the request.
 * @property {Integer} clients The number of clients connected.
 * @property {Integer} subscriptions The number of subscriptions connected.
 * @property {String} sessionToken If set, the session of the user that made the request.
 */ /**
 * @interface Parse.Cloud.LiveQueryEventTrigger
 * @property {String} installationId If set, the installationId triggering the request.
 * @property {Boolean} useMasterKey If true, means the master key was used.
 * @property {Parse.User} user If set, the user that made the request.
 * @property {String} sessionToken If set, the session of the user that made the request.
 * @property {String} event The live query event that triggered the request.
 * @property {Parse.Object} object The object triggering the hook.
 * @property {Parse.Object} original If set, the object, as currently stored.
 * @property {Integer} clients The number of clients connected.
 * @property {Integer} subscriptions The number of subscriptions connected.
 * @property {Boolean} sendEvent If the LiveQuery event should be sent to the client. Set to false to prevent LiveQuery from pushing to the client.
 */ /**
 * @interface Parse.Cloud.BeforeFindRequest
 * @property {String} installationId If set, the installationId triggering the request.
 * @property {Boolean} master If true, means the master key was used.
 * @property {Parse.User} user If set, the user that made the request.
 * @property {Parse.Query} query The query triggering the hook.
 * @property {String} ip The IP address of the client making the request.
 * @property {Object} headers The original HTTP headers for the request.
 * @property {String} triggerName The name of the trigger (`beforeSave`, `afterSave`, ...)
 * @property {Object} log The current logger inside Parse Server.
 * @property {Boolean} isGet wether the query a `get` or a `find`
 */ /**
 * @interface Parse.Cloud.AfterFindRequest
 * @property {String} installationId If set, the installationId triggering the request.
 * @property {Boolean} master If true, means the master key was used.
 * @property {Parse.User} user If set, the user that made the request.
 * @property {Parse.Query} query The query triggering the hook.
 * @property {Array<Parse.Object>} results The results the query yielded.
 * @property {String} ip The IP address of the client making the request.
 * @property {Object} headers The original HTTP headers for the request.
 * @property {String} triggerName The name of the trigger (`beforeSave`, `afterSave`, ...)
 * @property {Object} log The current logger inside Parse Server.
 */ /**
 * @interface Parse.Cloud.FunctionRequest
 * @property {String} installationId If set, the installationId triggering the request.
 * @property {Boolean} master If true, means the master key was used.
 * @property {Parse.User} user If set, the user that made the request.
 * @property {Object} params The params passed to the cloud function.
 */ /**
 * @interface Parse.Cloud.JobRequest
 * @property {Object} params The params passed to the background job.
 * @property {function} message If message is called with a string argument, will update the current message to be stored in the job status.
 */ /**
 * @interface Parse.Cloud.ValidatorObject
 * @property {Boolean} requireUser whether the cloud trigger requires a user.
 * @property {Boolean} requireMaster whether the cloud trigger requires a master key.
 * @property {Boolean} validateMasterKey whether the validator should run if masterKey is provided. Defaults to false.
 * @property {Boolean} skipWithMasterKey whether the cloud code function should be ignored using a masterKey.
 *
 * @property {Array<String>|Object} requireUserKeys If set, keys required on request.user to make the request.
 * @property {String} requireUserKeys.field If requireUserKeys is an object, name of field to validate on request user
 * @property {Array|function|Any} requireUserKeys.field.options array of options that the field can be, function to validate field, or single value. Throw an error if value is invalid.
 * @property {String} requireUserKeys.field.error custom error message if field is invalid.
 *
 * @property {Array<String>|function}requireAnyUserRoles If set, request.user has to be part of at least one roles name to make the request. If set to a function, function must return role names.
 * @property {Array<String>|function}requireAllUserRoles If set, request.user has to be part all roles name to make the request. If set to a function, function must return role names.
 *
 * @property {Object|Array<String>} fields if an array of strings, validator will look for keys in request.params, and throw if not provided. If Object, fields to validate. If the trigger is a cloud function, `request.params` will be validated, otherwise `request.object`.
 * @property {String} fields.field name of field to validate.
 * @property {String} fields.field.type expected type of data for field.
 * @property {Boolean} fields.field.constant whether the field can be modified on the object.
 * @property {Any} fields.field.default default value if field is `null`, or initial value `constant` is `true`.
 * @property {Array|function|Any} fields.field.options array of options that the field can be, function to validate field, or single value. Throw an error if value is invalid.
 * @property {String} fields.field.error custom error message if field is invalid.
 */ //# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,