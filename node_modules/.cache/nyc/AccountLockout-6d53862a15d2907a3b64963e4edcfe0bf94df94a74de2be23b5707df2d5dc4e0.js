"use strict";function cov_1ir9drndyn(){var path="/parse-server/lib/AccountLockout.js";var hash="998eb5ddab4ca0f4964b188da4962e39a571cf06";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/AccountLockout.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:50}},"2":{start:{line:8,column:12},end:{line:8,column:57}},"3":{start:{line:10,column:39},end:{line:10,column:93}},"4":{start:{line:15,column:4},end:{line:15,column:22}},"5":{start:{line:16,column:4},end:{line:16,column:26}},"6":{start:{line:24,column:18},end:{line:26,column:5}},"7":{start:{line:27,column:25},end:{line:29,column:5}},"8":{start:{line:30,column:4},end:{line:30,column:70}},"9":{start:{line:38,column:18},end:{line:43,column:5}},"10":{start:{line:44,column:4},end:{line:50,column:7}},"11":{start:{line:45,column:6},end:{line:49,column:7}},"12":{start:{line:46,column:8},end:{line:46,column:20}},"13":{start:{line:48,column:8},end:{line:48,column:21}},"14":{start:{line:59,column:4},end:{line:63,column:7}},"15":{start:{line:60,column:6},end:{line:62,column:7}},"16":{start:{line:61,column:8},end:{line:61,column:44}},"17":{start:{line:71,column:18},end:{line:73,column:5}},"18":{start:{line:74,column:25},end:{line:79,column:5}},"19":{start:{line:80,column:4},end:{line:80,column:70}},"20":{start:{line:90,column:18},end:{line:95,column:5}},"21":{start:{line:96,column:16},end:{line:96,column:26}},"22":{start:{line:97,column:25},end:{line:99,column:5}},"23":{start:{line:100,column:4},end:{line:106,column:7}},"24":{start:{line:101,column:6},end:{line:105,column:7}},"25":{start:{line:102,column:8},end:{line:102,column:15}},"26":{start:{line:104,column:8},end:{line:104,column:18}},"27":{start:{line:117,column:18},end:{line:125,column:5}},"28":{start:{line:126,column:4},end:{line:130,column:7}},"29":{start:{line:127,column:6},end:{line:129,column:7}},"30":{start:{line:128,column:8},end:{line:128,column:219}},"31":{start:{line:142,column:4},end:{line:146,column:7}},"32":{start:{line:143,column:6},end:{line:143,column:47}},"33":{start:{line:145,column:6},end:{line:145,column:42}},"34":{start:{line:154,column:4},end:{line:156,column:5}},"35":{start:{line:155,column:6},end:{line:155,column:31}},"36":{start:{line:158,column:4},end:{line:164,column:7}},"37":{start:{line:159,column:6},end:{line:163,column:7}},"38":{start:{line:160,column:8},end:{line:160,column:44}},"39":{start:{line:162,column:8},end:{line:162,column:48}},"40":{start:{line:172,column:4},end:{line:174,column:5}},"41":{start:{line:173,column:6},end:{line:173,column:31}},"42":{start:{line:176,column:4},end:{line:185,column:7}},"43":{start:{line:190,column:0},end:{line:190,column:40}},"44":{start:{line:191,column:15},end:{line:191,column:29}},"45":{start:{line:192,column:0},end:{line:192,column:27}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:10,column:9},end:{line:10,column:31}},loc:{start:{line:10,column:37},end:{line:10,column:95}},line:10},"1":{name:"(anonymous_1)",decl:{start:{line:14,column:2},end:{line:14,column:3}},loc:{start:{line:14,column:28},end:{line:17,column:3}},line:14},"2":{name:"(anonymous_2)",decl:{start:{line:23,column:2},end:{line:23,column:3}},loc:{start:{line:23,column:30},end:{line:31,column:3}},line:23},"3":{name:"(anonymous_3)",decl:{start:{line:37,column:2},end:{line:37,column:3}},loc:{start:{line:37,column:27},end:{line:51,column:3}},line:37},"4":{name:"(anonymous_4)",decl:{start:{line:44,column:59},end:{line:44,column:60}},loc:{start:{line:44,column:68},end:{line:50,column:5}},line:44},"5":{name:"(anonymous_5)",decl:{start:{line:58,column:2},end:{line:58,column:3}},loc:{start:{line:58,column:26},end:{line:64,column:3}},line:58},"6":{name:"(anonymous_6)",decl:{start:{line:59,column:46},end:{line:59,column:47}},loc:{start:{line:59,column:71},end:{line:63,column:5}},line:59},"7":{name:"(anonymous_7)",decl:{start:{line:70,column:2},end:{line:70,column:3}},loc:{start:{line:70,column:31},end:{line:81,column:3}},line:70},"8":{name:"(anonymous_8)",decl:{start:{line:89,column:2},end:{line:89,column:3}},loc:{start:{line:89,column:26},end:{line:107,column:3}},line:89},"9":{name:"(anonymous_9)",decl:{start:{line:100,column:76},end:{line:100,column:77}},loc:{start:{line:100,column:83},end:{line:106,column:5}},line:100},"10":{name:"(anonymous_10)",decl:{start:{line:116,column:2},end:{line:116,column:3}},loc:{start:{line:116,column:15},end:{line:131,column:3}},line:116},"11":{name:"(anonymous_11)",decl:{start:{line:126,column:59},end:{line:126,column:60}},loc:{start:{line:126,column:68},end:{line:130,column:5}},line:126},"12":{name:"(anonymous_12)",decl:{start:{line:141,column:2},end:{line:141,column:3}},loc:{start:{line:141,column:30},end:{line:147,column:3}},line:141},"13":{name:"(anonymous_13)",decl:{start:{line:142,column:45},end:{line:142,column:46}},loc:{start:{line:142,column:51},end:{line:144,column:5}},line:142},"14":{name:"(anonymous_14)",decl:{start:{line:144,column:12},end:{line:144,column:13}},loc:{start:{line:144,column:18},end:{line:146,column:5}},line:144},"15":{name:"(anonymous_15)",decl:{start:{line:153,column:2},end:{line:153,column:3}},loc:{start:{line:153,column:38},end:{line:165,column:3}},line:153},"16":{name:"(anonymous_16)",decl:{start:{line:158,column:34},end:{line:158,column:35}},loc:{start:{line:158,column:40},end:{line:164,column:5}},line:158},"17":{name:"(anonymous_17)",decl:{start:{line:171,column:2},end:{line:171,column:3}},loc:{start:{line:171,column:18},end:{line:186,column:3}},line:171}},branchMap:{"0":{loc:{start:{line:10,column:46},end:{line:10,column:92}},type:"cond-expr",locations:[{start:{line:10,column:70},end:{line:10,column:73}},{start:{line:10,column:76},end:{line:10,column:92}}],line:10},"1":{loc:{start:{line:10,column:46},end:{line:10,column:67}},type:"binary-expr",locations:[{start:{line:10,column:46},end:{line:10,column:49}},{start:{line:10,column:53},end:{line:10,column:67}}],line:10},"2":{loc:{start:{line:45,column:6},end:{line:49,column:7}},type:"if",locations:[{start:{line:45,column:6},end:{line:49,column:7}},{start:{line:45,column:6},end:{line:49,column:7}}],line:45},"3":{loc:{start:{line:45,column:10},end:{line:45,column:50}},type:"binary-expr",locations:[{start:{line:45,column:10},end:{line:45,column:30}},{start:{line:45,column:34},end:{line:45,column:50}}],line:45},"4":{loc:{start:{line:60,column:6},end:{line:62,column:7}},type:"if",locations:[{start:{line:60,column:6},end:{line:62,column:7}},{start:{line:60,column:6},end:{line:62,column:7}}],line:60},"5":{loc:{start:{line:101,column:6},end:{line:105,column:7}},type:"if",locations:[{start:{line:101,column:6},end:{line:105,column:7}},{start:{line:101,column:6},end:{line:105,column:7}}],line:101},"6":{loc:{start:{line:101,column:10},end:{line:101,column:132}},type:"binary-expr",locations:[{start:{line:101,column:10},end:{line:101,column:13}},{start:{line:101,column:17},end:{line:101,column:25}},{start:{line:101,column:29},end:{line:101,column:40}},{start:{line:101,column:44},end:{line:101,column:93}},{start:{line:101,column:97},end:{line:101,column:132}}],line:101},"7":{loc:{start:{line:127,column:6},end:{line:129,column:7}},type:"if",locations:[{start:{line:127,column:6},end:{line:129,column:7}},{start:{line:127,column:6},end:{line:129,column:7}}],line:127},"8":{loc:{start:{line:127,column:10},end:{line:127,column:50}},type:"binary-expr",locations:[{start:{line:127,column:10},end:{line:127,column:30}},{start:{line:127,column:34},end:{line:127,column:50}}],line:127},"9":{loc:{start:{line:154,column:4},end:{line:156,column:5}},type:"if",locations:[{start:{line:154,column:4},end:{line:156,column:5}},{start:{line:154,column:4},end:{line:156,column:5}}],line:154},"10":{loc:{start:{line:159,column:6},end:{line:163,column:7}},type:"if",locations:[{start:{line:159,column:6},end:{line:163,column:7}},{start:{line:159,column:6},end:{line:163,column:7}}],line:159},"11":{loc:{start:{line:172,column:4},end:{line:174,column:5}},type:"if",locations:[{start:{line:172,column:4},end:{line:174,column:5}},{start:{line:172,column:4},end:{line:174,column:5}}],line:172},"12":{loc:{start:{line:172,column:8},end:{line:172,column:90}},type:"binary-expr",locations:[{start:{line:172,column:8},end:{line:172,column:36}},{start:{line:172,column:40},end:{line:172,column:90}}],line:172}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},inputSourceMap:{version:3,sources:["../src/AccountLockout.js"],names:["AccountLockout","constructor","user","config","_user","_config","_setFailedLoginCount","value","query","username","updateFields","_failed_login_count","database","update","_isFailedLoginCountSet","$exists","find","then","users","Array","isArray","length","_initFailedLoginCount","failedLoginCountIsSet","_incrementFailedLoginCount","__op","amount","_setLockoutExpiration","$gte","accountLockout","threshold","now","Date","_account_lockout_expires_at","Parse","_encode","getTime","duration","catch","err","code","message","Error","OBJECT_NOT_FOUND","_notLocked","$gt","_handleFailedLoginAttempt","handleLoginAttempt","loginSuccessful","Promise","resolve","unlockAccount","unlockOnPasswordReset"],mappings:"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",sourcesContent:["// This class handles the Account Lockout Policy settings.\nimport Parse from 'parse/node';\n\nexport class AccountLockout {\n  constructor(user, config) {\n    this._user = user;\n    this._config = config;\n  }\n\n  /**\n   * set _failed_login_count to value\n   */\n  _setFailedLoginCount(value) {\n    const query = {\n      username: this._user.username,\n    };\n\n    const updateFields = {\n      _failed_login_count: value,\n    };\n\n    return this._config.database.update('_User', query, updateFields);\n  }\n\n  /**\n   * check if the _failed_login_count field has been set\n   */\n  _isFailedLoginCountSet() {\n    const query = {\n      username: this._user.username,\n      _failed_login_count: { $exists: true },\n    };\n\n    return this._config.database.find('_User', query).then(users => {\n      if (Array.isArray(users) && users.length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n  }\n\n  /**\n   * if _failed_login_count is NOT set then set it to 0\n   * else do nothing\n   */\n  _initFailedLoginCount() {\n    return this._isFailedLoginCountSet().then(failedLoginCountIsSet => {\n      if (!failedLoginCountIsSet) {\n        return this._setFailedLoginCount(0);\n      }\n    });\n  }\n\n  /**\n   * increment _failed_login_count by 1\n   */\n  _incrementFailedLoginCount() {\n    const query = {\n      username: this._user.username,\n    };\n\n    const updateFields = {\n      _failed_login_count: { __op: 'Increment', amount: 1 },\n    };\n\n    return this._config.database.update('_User', query, updateFields);\n  }\n\n  /**\n   * if the failed login count is greater than the threshold\n   * then sets lockout expiration to 'currenttime + accountPolicy.duration', i.e., account is locked out for the next 'accountPolicy.duration' minutes\n   * else do nothing\n   */\n  _setLockoutExpiration() {\n    const query = {\n      username: this._user.username,\n      _failed_login_count: { $gte: this._config.accountLockout.threshold },\n    };\n\n    const now = new Date();\n\n    const updateFields = {\n      _account_lockout_expires_at: Parse._encode(\n        new Date(now.getTime() + this._config.accountLockout.duration * 60 * 1000)\n      ),\n    };\n\n    return this._config.database.update('_User', query, updateFields).catch(err => {\n      if (\n        err &&\n        err.code &&\n        err.message &&\n        err.code === Parse.Error.OBJECT_NOT_FOUND &&\n        err.message === 'Object not found.'\n      ) {\n        return; // nothing to update so we are good\n      } else {\n        throw err; // unknown error\n      }\n    });\n  }\n\n  /**\n   * if _account_lockout_expires_at > current_time and _failed_login_count > threshold\n   *   reject with account locked error\n   * else\n   *   resolve\n   */\n  _notLocked() {\n    const query = {\n      username: this._user.username,\n      _account_lockout_expires_at: { $gt: Parse._encode(new Date()) },\n      _failed_login_count: { $gte: this._config.accountLockout.threshold },\n    };\n\n    return this._config.database.find('_User', query).then(users => {\n      if (Array.isArray(users) && users.length > 0) {\n        throw new Parse.Error(\n          Parse.Error.OBJECT_NOT_FOUND,\n          'Your account is locked due to multiple failed login attempts. Please try again after ' +\n            this._config.accountLockout.duration +\n            ' minute(s)'\n        );\n      }\n    });\n  }\n\n  /**\n   * set and/or increment _failed_login_count\n   * if _failed_login_count > threshold\n   *   set the _account_lockout_expires_at to current_time + accountPolicy.duration\n   * else\n   *   do nothing\n   */\n  _handleFailedLoginAttempt() {\n    return this._initFailedLoginCount()\n      .then(() => {\n        return this._incrementFailedLoginCount();\n      })\n      .then(() => {\n        return this._setLockoutExpiration();\n      });\n  }\n\n  /**\n   * handle login attempt if the Account Lockout Policy is enabled\n   */\n  handleLoginAttempt(loginSuccessful) {\n    if (!this._config.accountLockout) {\n      return Promise.resolve();\n    }\n    return this._notLocked().then(() => {\n      if (loginSuccessful) {\n        return this._setFailedLoginCount(0);\n      } else {\n        return this._handleFailedLoginAttempt();\n      }\n    });\n  }\n\n  /**\n   * Removes the account lockout.\n   */\n  unlockAccount() {\n    if (!this._config.accountLockout || !this._config.accountLockout.unlockOnPasswordReset) {\n      return Promise.resolve();\n    }\n    return this._config.database.update(\n      '_User',\n      { username: this._user.username },\n      {\n        _failed_login_count: { __op: 'Delete' },\n        _account_lockout_expires_at: { __op: 'Delete' },\n      }\n    );\n  }\n}\n\nexport default AccountLockout;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"998eb5ddab4ca0f4964b188da4962e39a571cf06"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1ir9drndyn=function(){return actualCoverage;};}return actualCoverage;}cov_1ir9drndyn();cov_1ir9drndyn().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1ir9drndyn().s[1]++;exports.default=exports.AccountLockout=void 0;var _node=(cov_1ir9drndyn().s[2]++,_interopRequireDefault(require("parse/node")));function _interopRequireDefault(obj){cov_1ir9drndyn().f[0]++;cov_1ir9drndyn().s[3]++;return(cov_1ir9drndyn().b[1][0]++,obj)&&(cov_1ir9drndyn().b[1][1]++,obj.__esModule)?(cov_1ir9drndyn().b[0][0]++,obj):(cov_1ir9drndyn().b[0][1]++,{default:obj});}// This class handles the Account Lockout Policy settings.
class AccountLockout{constructor(user,config){cov_1ir9drndyn().f[1]++;cov_1ir9drndyn().s[4]++;this._user=user;cov_1ir9drndyn().s[5]++;this._config=config;}/**
   * set _failed_login_count to value
   */_setFailedLoginCount(value){cov_1ir9drndyn().f[2]++;const query=(cov_1ir9drndyn().s[6]++,{username:this._user.username});const updateFields=(cov_1ir9drndyn().s[7]++,{_failed_login_count:value});cov_1ir9drndyn().s[8]++;return this._config.database.update('_User',query,updateFields);}/**
   * check if the _failed_login_count field has been set
   */_isFailedLoginCountSet(){cov_1ir9drndyn().f[3]++;const query=(cov_1ir9drndyn().s[9]++,{username:this._user.username,_failed_login_count:{$exists:true}});cov_1ir9drndyn().s[10]++;return this._config.database.find('_User',query).then(users=>{cov_1ir9drndyn().f[4]++;cov_1ir9drndyn().s[11]++;if((cov_1ir9drndyn().b[3][0]++,Array.isArray(users))&&(cov_1ir9drndyn().b[3][1]++,users.length>0)){cov_1ir9drndyn().b[2][0]++;cov_1ir9drndyn().s[12]++;return true;}else{cov_1ir9drndyn().b[2][1]++;cov_1ir9drndyn().s[13]++;return false;}});}/**
   * if _failed_login_count is NOT set then set it to 0
   * else do nothing
   */_initFailedLoginCount(){cov_1ir9drndyn().f[5]++;cov_1ir9drndyn().s[14]++;return this._isFailedLoginCountSet().then(failedLoginCountIsSet=>{cov_1ir9drndyn().f[6]++;cov_1ir9drndyn().s[15]++;if(!failedLoginCountIsSet){cov_1ir9drndyn().b[4][0]++;cov_1ir9drndyn().s[16]++;return this._setFailedLoginCount(0);}else{cov_1ir9drndyn().b[4][1]++;}});}/**
   * increment _failed_login_count by 1
   */_incrementFailedLoginCount(){cov_1ir9drndyn().f[7]++;const query=(cov_1ir9drndyn().s[17]++,{username:this._user.username});const updateFields=(cov_1ir9drndyn().s[18]++,{_failed_login_count:{__op:'Increment',amount:1}});cov_1ir9drndyn().s[19]++;return this._config.database.update('_User',query,updateFields);}/**
   * if the failed login count is greater than the threshold
   * then sets lockout expiration to 'currenttime + accountPolicy.duration', i.e., account is locked out for the next 'accountPolicy.duration' minutes
   * else do nothing
   */_setLockoutExpiration(){cov_1ir9drndyn().f[8]++;const query=(cov_1ir9drndyn().s[20]++,{username:this._user.username,_failed_login_count:{$gte:this._config.accountLockout.threshold}});const now=(cov_1ir9drndyn().s[21]++,new Date());const updateFields=(cov_1ir9drndyn().s[22]++,{_account_lockout_expires_at:_node.default._encode(new Date(now.getTime()+this._config.accountLockout.duration*60*1000))});cov_1ir9drndyn().s[23]++;return this._config.database.update('_User',query,updateFields).catch(err=>{cov_1ir9drndyn().f[9]++;cov_1ir9drndyn().s[24]++;if((cov_1ir9drndyn().b[6][0]++,err)&&(cov_1ir9drndyn().b[6][1]++,err.code)&&(cov_1ir9drndyn().b[6][2]++,err.message)&&(cov_1ir9drndyn().b[6][3]++,err.code===_node.default.Error.OBJECT_NOT_FOUND)&&(cov_1ir9drndyn().b[6][4]++,err.message==='Object not found.')){cov_1ir9drndyn().b[5][0]++;cov_1ir9drndyn().s[25]++;return;// nothing to update so we are good
}else{cov_1ir9drndyn().b[5][1]++;cov_1ir9drndyn().s[26]++;throw err;// unknown error
}});}/**
   * if _account_lockout_expires_at > current_time and _failed_login_count > threshold
   *   reject with account locked error
   * else
   *   resolve
   */_notLocked(){cov_1ir9drndyn().f[10]++;const query=(cov_1ir9drndyn().s[27]++,{username:this._user.username,_account_lockout_expires_at:{$gt:_node.default._encode(new Date())},_failed_login_count:{$gte:this._config.accountLockout.threshold}});cov_1ir9drndyn().s[28]++;return this._config.database.find('_User',query).then(users=>{cov_1ir9drndyn().f[11]++;cov_1ir9drndyn().s[29]++;if((cov_1ir9drndyn().b[8][0]++,Array.isArray(users))&&(cov_1ir9drndyn().b[8][1]++,users.length>0)){cov_1ir9drndyn().b[7][0]++;cov_1ir9drndyn().s[30]++;throw new _node.default.Error(_node.default.Error.OBJECT_NOT_FOUND,'Your account is locked due to multiple failed login attempts. Please try again after '+this._config.accountLockout.duration+' minute(s)');}else{cov_1ir9drndyn().b[7][1]++;}});}/**
   * set and/or increment _failed_login_count
   * if _failed_login_count > threshold
   *   set the _account_lockout_expires_at to current_time + accountPolicy.duration
   * else
   *   do nothing
   */_handleFailedLoginAttempt(){cov_1ir9drndyn().f[12]++;cov_1ir9drndyn().s[31]++;return this._initFailedLoginCount().then(()=>{cov_1ir9drndyn().f[13]++;cov_1ir9drndyn().s[32]++;return this._incrementFailedLoginCount();}).then(()=>{cov_1ir9drndyn().f[14]++;cov_1ir9drndyn().s[33]++;return this._setLockoutExpiration();});}/**
   * handle login attempt if the Account Lockout Policy is enabled
   */handleLoginAttempt(loginSuccessful){cov_1ir9drndyn().f[15]++;cov_1ir9drndyn().s[34]++;if(!this._config.accountLockout){cov_1ir9drndyn().b[9][0]++;cov_1ir9drndyn().s[35]++;return Promise.resolve();}else{cov_1ir9drndyn().b[9][1]++;}cov_1ir9drndyn().s[36]++;return this._notLocked().then(()=>{cov_1ir9drndyn().f[16]++;cov_1ir9drndyn().s[37]++;if(loginSuccessful){cov_1ir9drndyn().b[10][0]++;cov_1ir9drndyn().s[38]++;return this._setFailedLoginCount(0);}else{cov_1ir9drndyn().b[10][1]++;cov_1ir9drndyn().s[39]++;return this._handleFailedLoginAttempt();}});}/**
   * Removes the account lockout.
   */unlockAccount(){cov_1ir9drndyn().f[17]++;cov_1ir9drndyn().s[40]++;if((cov_1ir9drndyn().b[12][0]++,!this._config.accountLockout)||(cov_1ir9drndyn().b[12][1]++,!this._config.accountLockout.unlockOnPasswordReset)){cov_1ir9drndyn().b[11][0]++;cov_1ir9drndyn().s[41]++;return Promise.resolve();}else{cov_1ir9drndyn().b[11][1]++;}cov_1ir9drndyn().s[42]++;return this._config.database.update('_User',{username:this._user.username},{_failed_login_count:{__op:'Delete'},_account_lockout_expires_at:{__op:'Delete'}});}}cov_1ir9drndyn().s[43]++;exports.AccountLockout=AccountLockout;var _default=(cov_1ir9drndyn().s[44]++,AccountLockout);cov_1ir9drndyn().s[45]++;exports.default=_default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,