"use strict";function cov_21qgmu8kjv(){var path="/parse-server/lib/SchemaMigrations/Migrations.js";var hash="f3a3bea53a13c6325398643e2de7302de4a9db97";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/SchemaMigrations/Migrations.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:32}},"2":{start:{line:7,column:0},end:{line:7,column:21}},"3":{start:{line:12,column:16},end:{line:12,column:18}},"4":{start:{line:14,column:4},end:{line:20,column:5}},"5":{start:{line:16,column:6},end:{line:19,column:7}},"6":{start:{line:17,column:8},end:{line:17,column:32}},"7":{start:{line:18,column:8},end:{line:18,column:29}},"8":{start:{line:22,column:4},end:{line:22,column:15}},"9":{start:{line:27,column:0},end:{line:27,column:18}},"10":{start:{line:33,column:2},end:{line:33,column:31}},"11":{start:{line:34,column:2},end:{line:34,column:16}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:11,column:2},end:{line:11,column:3}},loc:{start:{line:11,column:22},end:{line:23,column:3}},line:11},"1":{name:"makeSchema",decl:{start:{line:29,column:9},end:{line:29,column:19}},loc:{start:{line:29,column:39},end:{line:35,column:1}},line:29}},branchMap:{"0":{loc:{start:{line:17,column:18},end:{line:17,column:31}},type:"binary-expr",locations:[{start:{line:17,column:18},end:{line:17,column:25}},{start:{line:17,column:29},end:{line:17,column:31}}],line:17}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0,"1":0},b:{"0":[0,0]},inputSourceMap:{version:3,sources:["../../src/SchemaMigrations/Migrations.js"],names:["CLP","allow","perms","out","perm","ops","Object","entries","op","makeSchema","className","schema"],mappings:";;;;;;;;AAiDA;AAsBO,MAAMA,GAAN,CAAU;AACH,SAALC,KAAK,CAACC,KAAD,EAAkD;AAC5D,UAAMC,GAAG,GAAG,EAAZ;;AAEA,SAAK,MAAM,CAACC,IAAD,EAAOC,GAAP,CAAX,IAA0BC,MAAM,CAACC,OAAP,CAAeL,KAAf,CAA1B,EAAiD;AAC/C;AACA,WAAK,MAAMM,EAAX,IAAiBH,GAAjB,EAAsB;AACpBF,QAAAA,GAAG,CAACK,EAAD,CAAH,GAAUL,GAAG,CAACK,EAAD,CAAH,IAAW,EAArB;AACAL,QAAAA,GAAG,CAACK,EAAD,CAAH,CAAQJ,IAAR,IAAgB,IAAhB;AACD;AACF;;AAED,WAAOD,GAAP;AACD;;AAbc;;;;AAgBV,SAASM,UAAT,CAAoBC,SAApB,EAA8CC,MAA9C,EAA8E;AACnF;AACA;AACA;AACAA,EAAAA,MAAM,CAACD,SAAP,GAAmBA,SAAnB;AAEA,SAAOC,MAAP;AACD",sourcesContent:["// @flow\n\nexport type FieldValueType =\n  | 'String'\n  | 'Boolean'\n  | 'File'\n  | 'Number'\n  | 'Relation'\n  | 'Pointer'\n  | 'Date'\n  | 'GeoPoint'\n  | 'Polygon'\n  | 'Array'\n  | 'Object'\n  | 'ACL';\n\nexport interface FieldType {\n  type: FieldValueType;\n  required?: boolean;\n  defaultValue?: mixed;\n  targetClass?: string;\n}\n\ntype ClassNameType = '_User' | '_Role' | string;\n\nexport interface ProtectedFieldsInterface {\n  [key: string]: string[];\n}\n\nexport interface IndexInterface {\n  [key: string]: number;\n}\n\nexport interface IndexesInterface {\n  [key: string]: IndexInterface;\n}\n\nexport interface SchemaOptions {\n  definitions: JSONSchema[];\n  strict: ?boolean;\n  deleteExtraFields: ?boolean;\n  recreateModifiedFields: ?boolean;\n  lockSchemas: ?boolean;\n  /* Callback when server has started and before running schemas migration operations if schemas key provided */\n  beforeMigration: ?() => void | Promise<void>;\n  afterMigration: ?() => void | Promise<void>;\n}\n\nexport type CLPOperation = 'find' | 'count' | 'get' | 'update' | 'create' | 'delete';\n// @Typescript 4.1+ // type CLPPermission = 'requiresAuthentication' | '*' |  `user:${string}` | `role:${string}`\n\ntype CLPValue = { [key: string]: boolean };\ntype CLPData = { [key: string]: CLPOperation[] };\ntype CLPInterface = { [key: string]: CLPValue };\n\nexport interface JSONSchema {\n  className: ClassNameType;\n  fields?: { [key: string]: FieldType };\n  indexes?: IndexesInterface;\n  classLevelPermissions?: {\n    find?: CLPValue,\n    count?: CLPValue,\n    get?: CLPValue,\n    update?: CLPValue,\n    create?: CLPValue,\n    delete?: CLPValue,\n    addField?: CLPValue,\n    protectedFields?: ProtectedFieldsInterface,\n  };\n}\n\nexport class CLP {\n  static allow(perms: { [key: string]: CLPData }): CLPInterface {\n    const out = {};\n\n    for (const [perm, ops] of Object.entries(perms)) {\n      // @flow-disable-next Property `@@iterator` is missing in mixed [1] but exists in `$Iterable` [2].\n      for (const op of ops) {\n        out[op] = out[op] || {};\n        out[op][perm] = true;\n      }\n    }\n\n    return out;\n  }\n}\n\nexport function makeSchema(className: ClassNameType, schema: JSONSchema): JSONSchema {\n  // This function solve two things:\n  // 1. It provides auto-completion to the users who are implementing schemas\n  // 2. It allows forward-compatible point in order to allow future changes to the internal structure of JSONSchema without affecting all the users\n  schema.className = className;\n\n  return schema;\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f3a3bea53a13c6325398643e2de7302de4a9db97"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_21qgmu8kjv=function(){return actualCoverage;};}return actualCoverage;}cov_21qgmu8kjv();cov_21qgmu8kjv().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_21qgmu8kjv().s[1]++;exports.makeSchema=makeSchema;cov_21qgmu8kjv().s[2]++;exports.CLP=void 0;// @Typescript 4.1+ // type CLPPermission = 'requiresAuthentication' | '*' |  `user:${string}` | `role:${string}`
class CLP{static allow(perms){cov_21qgmu8kjv().f[0]++;const out=(cov_21qgmu8kjv().s[3]++,{});cov_21qgmu8kjv().s[4]++;for(const[perm,ops]of Object.entries(perms)){cov_21qgmu8kjv().s[5]++;// -disable-next Property `@@iterator` is missing in mixed [1] but exists in `$Iterable` [2].
for(const op of ops){cov_21qgmu8kjv().s[6]++;out[op]=(cov_21qgmu8kjv().b[0][0]++,out[op])||(cov_21qgmu8kjv().b[0][1]++,{});cov_21qgmu8kjv().s[7]++;out[op][perm]=true;}}cov_21qgmu8kjv().s[8]++;return out;}}cov_21qgmu8kjv().s[9]++;exports.CLP=CLP;function makeSchema(className,schema){cov_21qgmu8kjv().f[1]++;cov_21qgmu8kjv().s[10]++;// This function solve two things:
// 1. It provides auto-completion to the users who are implementing schemas
// 2. It allows forward-compatible point in order to allow future changes to the internal structure of JSONSchema without affecting all the users
schema.className=className;cov_21qgmu8kjv().s[11]++;return schema;}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TY2hlbWFNaWdyYXRpb25zL01pZ3JhdGlvbnMuanMiXSwibmFtZXMiOlsiQ0xQIiwiYWxsb3ciLCJwZXJtcyIsIm91dCIsInBlcm0iLCJvcHMiLCJPYmplY3QiLCJlbnRyaWVzIiwib3AiLCJtYWtlU2NoZW1hIiwiY2xhc3NOYW1lIiwic2NoZW1hIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQWlEQTtBQXNCTyxNQUFNQSxHQUFOLENBQVU7QUFDSCxTQUFMQyxLQUFLLENBQUNDLEtBQUQsRUFBa0Q7QUFDNUQsVUFBTUMsR0FBRyxHQUFHLEVBQVo7O0FBRUEsU0FBSyxNQUFNLENBQUNDLElBQUQsRUFBT0MsR0FBUCxDQUFYLElBQTBCQyxNQUFNLENBQUNDLE9BQVAsQ0FBZUwsS0FBZixDQUExQixFQUFpRDtBQUMvQztBQUNBLFdBQUssTUFBTU0sRUFBWCxJQUFpQkgsR0FBakIsRUFBc0I7QUFDcEJGLFFBQUFBLEdBQUcsQ0FBQ0ssRUFBRCxDQUFILEdBQVVMLEdBQUcsQ0FBQ0ssRUFBRCxDQUFILElBQVcsRUFBckI7QUFDQUwsUUFBQUEsR0FBRyxDQUFDSyxFQUFELENBQUgsQ0FBUUosSUFBUixJQUFnQixJQUFoQjtBQUNEO0FBQ0Y7O0FBRUQsV0FBT0QsR0FBUDtBQUNEOztBQWJjOzs7O0FBZ0JWLFNBQVNNLFVBQVQsQ0FBb0JDLFNBQXBCLEVBQThDQyxNQUE5QyxFQUE4RTtBQUNuRjtBQUNBO0FBQ0E7QUFDQUEsRUFBQUEsTUFBTSxDQUFDRCxTQUFQLEdBQW1CQSxTQUFuQjtBQUVBLFNBQU9DLE1BQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmV4cG9ydCB0eXBlIEZpZWxkVmFsdWVUeXBlID1cbiAgfCAnU3RyaW5nJ1xuICB8ICdCb29sZWFuJ1xuICB8ICdGaWxlJ1xuICB8ICdOdW1iZXInXG4gIHwgJ1JlbGF0aW9uJ1xuICB8ICdQb2ludGVyJ1xuICB8ICdEYXRlJ1xuICB8ICdHZW9Qb2ludCdcbiAgfCAnUG9seWdvbidcbiAgfCAnQXJyYXknXG4gIHwgJ09iamVjdCdcbiAgfCAnQUNMJztcblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZFR5cGUge1xuICB0eXBlOiBGaWVsZFZhbHVlVHlwZTtcbiAgcmVxdWlyZWQ/OiBib29sZWFuO1xuICBkZWZhdWx0VmFsdWU/OiBtaXhlZDtcbiAgdGFyZ2V0Q2xhc3M/OiBzdHJpbmc7XG59XG5cbnR5cGUgQ2xhc3NOYW1lVHlwZSA9ICdfVXNlcicgfCAnX1JvbGUnIHwgc3RyaW5nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFByb3RlY3RlZEZpZWxkc0ludGVyZmFjZSB7XG4gIFtrZXk6IHN0cmluZ106IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluZGV4SW50ZXJmYWNlIHtcbiAgW2tleTogc3RyaW5nXTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluZGV4ZXNJbnRlcmZhY2Uge1xuICBba2V5OiBzdHJpbmddOiBJbmRleEludGVyZmFjZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTY2hlbWFPcHRpb25zIHtcbiAgZGVmaW5pdGlvbnM6IEpTT05TY2hlbWFbXTtcbiAgc3RyaWN0OiA/Ym9vbGVhbjtcbiAgZGVsZXRlRXh0cmFGaWVsZHM6ID9ib29sZWFuO1xuICByZWNyZWF0ZU1vZGlmaWVkRmllbGRzOiA/Ym9vbGVhbjtcbiAgbG9ja1NjaGVtYXM6ID9ib29sZWFuO1xuICAvKiBDYWxsYmFjayB3aGVuIHNlcnZlciBoYXMgc3RhcnRlZCBhbmQgYmVmb3JlIHJ1bm5pbmcgc2NoZW1hcyBtaWdyYXRpb24gb3BlcmF0aW9ucyBpZiBzY2hlbWFzIGtleSBwcm92aWRlZCAqL1xuICBiZWZvcmVNaWdyYXRpb246ID8oKSA9PiB2b2lkIHwgUHJvbWlzZTx2b2lkPjtcbiAgYWZ0ZXJNaWdyYXRpb246ID8oKSA9PiB2b2lkIHwgUHJvbWlzZTx2b2lkPjtcbn1cblxuZXhwb3J0IHR5cGUgQ0xQT3BlcmF0aW9uID0gJ2ZpbmQnIHwgJ2NvdW50JyB8ICdnZXQnIHwgJ3VwZGF0ZScgfCAnY3JlYXRlJyB8ICdkZWxldGUnO1xuLy8gQFR5cGVzY3JpcHQgNC4xKyAvLyB0eXBlIENMUFBlcm1pc3Npb24gPSAncmVxdWlyZXNBdXRoZW50aWNhdGlvbicgfCAnKicgfCAgYHVzZXI6JHtzdHJpbmd9YCB8IGByb2xlOiR7c3RyaW5nfWBcblxudHlwZSBDTFBWYWx1ZSA9IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9O1xudHlwZSBDTFBEYXRhID0geyBba2V5OiBzdHJpbmddOiBDTFBPcGVyYXRpb25bXSB9O1xudHlwZSBDTFBJbnRlcmZhY2UgPSB7IFtrZXk6IHN0cmluZ106IENMUFZhbHVlIH07XG5cbmV4cG9ydCBpbnRlcmZhY2UgSlNPTlNjaGVtYSB7XG4gIGNsYXNzTmFtZTogQ2xhc3NOYW1lVHlwZTtcbiAgZmllbGRzPzogeyBba2V5OiBzdHJpbmddOiBGaWVsZFR5cGUgfTtcbiAgaW5kZXhlcz86IEluZGV4ZXNJbnRlcmZhY2U7XG4gIGNsYXNzTGV2ZWxQZXJtaXNzaW9ucz86IHtcbiAgICBmaW5kPzogQ0xQVmFsdWUsXG4gICAgY291bnQ/OiBDTFBWYWx1ZSxcbiAgICBnZXQ/OiBDTFBWYWx1ZSxcbiAgICB1cGRhdGU/OiBDTFBWYWx1ZSxcbiAgICBjcmVhdGU/OiBDTFBWYWx1ZSxcbiAgICBkZWxldGU/OiBDTFBWYWx1ZSxcbiAgICBhZGRGaWVsZD86IENMUFZhbHVlLFxuICAgIHByb3RlY3RlZEZpZWxkcz86IFByb3RlY3RlZEZpZWxkc0ludGVyZmFjZSxcbiAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIENMUCB7XG4gIHN0YXRpYyBhbGxvdyhwZXJtczogeyBba2V5OiBzdHJpbmddOiBDTFBEYXRhIH0pOiBDTFBJbnRlcmZhY2Uge1xuICAgIGNvbnN0IG91dCA9IHt9O1xuXG4gICAgZm9yIChjb25zdCBbcGVybSwgb3BzXSBvZiBPYmplY3QuZW50cmllcyhwZXJtcykpIHtcbiAgICAgIC8vIEBmbG93LWRpc2FibGUtbmV4dCBQcm9wZXJ0eSBgQEBpdGVyYXRvcmAgaXMgbWlzc2luZyBpbiBtaXhlZCBbMV0gYnV0IGV4aXN0cyBpbiBgJEl0ZXJhYmxlYCBbMl0uXG4gICAgICBmb3IgKGNvbnN0IG9wIG9mIG9wcykge1xuICAgICAgICBvdXRbb3BdID0gb3V0W29wXSB8fCB7fTtcbiAgICAgICAgb3V0W29wXVtwZXJtXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZVNjaGVtYShjbGFzc05hbWU6IENsYXNzTmFtZVR5cGUsIHNjaGVtYTogSlNPTlNjaGVtYSk6IEpTT05TY2hlbWEge1xuICAvLyBUaGlzIGZ1bmN0aW9uIHNvbHZlIHR3byB0aGluZ3M6XG4gIC8vIDEuIEl0IHByb3ZpZGVzIGF1dG8tY29tcGxldGlvbiB0byB0aGUgdXNlcnMgd2hvIGFyZSBpbXBsZW1lbnRpbmcgc2NoZW1hc1xuICAvLyAyLiBJdCBhbGxvd3MgZm9yd2FyZC1jb21wYXRpYmxlIHBvaW50IGluIG9yZGVyIHRvIGFsbG93IGZ1dHVyZSBjaGFuZ2VzIHRvIHRoZSBpbnRlcm5hbCBzdHJ1Y3R1cmUgb2YgSlNPTlNjaGVtYSB3aXRob3V0IGFmZmVjdGluZyBhbGwgdGhlIHVzZXJzXG4gIHNjaGVtYS5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG5cbiAgcmV0dXJuIHNjaGVtYTtcbn1cbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TY2hlbWFNaWdyYXRpb25zL01pZ3JhdGlvbnMuanMiXSwibmFtZXMiOlsiYWxsb3ciLCJvdXQiLCJPYmplY3QiLCJzY2hlbWEiXSwibWFwcGluZ3MiOiJ5aUtBNkVXOzZRQTVCWDtBQXNCTyxLQUFBLENBQUEsR0FBVSxDQUNILE1BQUxBLENBQUFBLEtBQUssQ0FBQSxLQUFBLENBQWtELHlCQUM1RCxLQUFNQyxDQUFBQSxHQUFHLDBCQUFULEVBQVMsQ0FBVCxDQUQ0RCx3QkFHNUQsSUFBSyxLQUFNLENBQUEsSUFBQSxDQUFYLEdBQVcsQ0FBWCxFQUEwQkMsQ0FBQUEsTUFBTSxDQUFOQSxPQUFBQSxDQUExQixLQUEwQkEsQ0FBMUIsQ0FBaUQseUJBQy9DO0FBQ0EsSUFBSyxLQUFMLENBQUEsRUFBQSxHQUFBLENBQUEsR0FBQSxDQUFzQix5QkFDcEJELEdBQUcsQ0FBSEEsRUFBRyxDQUFIQSxDQUFVQSw0QkFBQUEsR0FBRyxDQUFIQSxFQUFHLENBQUhBLCtCQUFWQSxFQUFVQSxDQUFWQSxDQURvQix3QkFFcEJBLEdBQUcsQ0FBSEEsRUFBRyxDQUFIQSxDQUFBQSxJQUFBQSxFQUFBQSxJQUFBQSxDQUNELENBQ0YsQ0FUMkQsd0JBVzVELE1BQUEsQ0FBQSxHQUFBLENBQ0QsQ0FiYyxDLHdDQWdCVixRQUFBLENBQUEsVUFBQSxDQUFBLFNBQUEsQ0FBQSxNQUFBLENBQThFLGtEQUNuRjtBQUNBO0FBQ0E7QUFDQUUsTUFBTSxDQUFOQSxTQUFBQSxDQUFBQSxTQUFBQSxDQUptRix5QkFNbkYsTUFBQSxDQUFBLE1BQUEsQ0FDRCxDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuZXhwb3J0IHR5cGUgRmllbGRWYWx1ZVR5cGUgPVxuICB8ICdTdHJpbmcnXG4gIHwgJ0Jvb2xlYW4nXG4gIHwgJ0ZpbGUnXG4gIHwgJ051bWJlcidcbiAgfCAnUmVsYXRpb24nXG4gIHwgJ1BvaW50ZXInXG4gIHwgJ0RhdGUnXG4gIHwgJ0dlb1BvaW50J1xuICB8ICdQb2x5Z29uJ1xuICB8ICdBcnJheSdcbiAgfCAnT2JqZWN0J1xuICB8ICdBQ0wnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpZWxkVHlwZSB7XG4gIHR5cGU6IEZpZWxkVmFsdWVUeXBlO1xuICByZXF1aXJlZD86IGJvb2xlYW47XG4gIGRlZmF1bHRWYWx1ZT86IG1peGVkO1xuICB0YXJnZXRDbGFzcz86IHN0cmluZztcbn1cblxudHlwZSBDbGFzc05hbWVUeXBlID0gJ19Vc2VyJyB8ICdfUm9sZScgfCBzdHJpbmc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvdGVjdGVkRmllbGRzSW50ZXJmYWNlIHtcbiAgW2tleTogc3RyaW5nXTogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5kZXhJbnRlcmZhY2Uge1xuICBba2V5OiBzdHJpbmddOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5kZXhlc0ludGVyZmFjZSB7XG4gIFtrZXk6IHN0cmluZ106IEluZGV4SW50ZXJmYWNlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNjaGVtYU9wdGlvbnMge1xuICBkZWZpbml0aW9uczogSlNPTlNjaGVtYVtdO1xuICBzdHJpY3Q6ID9ib29sZWFuO1xuICBkZWxldGVFeHRyYUZpZWxkczogP2Jvb2xlYW47XG4gIHJlY3JlYXRlTW9kaWZpZWRGaWVsZHM6ID9ib29sZWFuO1xuICBsb2NrU2NoZW1hczogP2Jvb2xlYW47XG4gIC8qIENhbGxiYWNrIHdoZW4gc2VydmVyIGhhcyBzdGFydGVkIGFuZCBiZWZvcmUgcnVubmluZyBzY2hlbWFzIG1pZ3JhdGlvbiBvcGVyYXRpb25zIGlmIHNjaGVtYXMga2V5IHByb3ZpZGVkICovXG4gIGJlZm9yZU1pZ3JhdGlvbjogPygpID0+IHZvaWQgfCBQcm9taXNlPHZvaWQ+O1xuICBhZnRlck1pZ3JhdGlvbjogPygpID0+IHZvaWQgfCBQcm9taXNlPHZvaWQ+O1xufVxuXG5leHBvcnQgdHlwZSBDTFBPcGVyYXRpb24gPSAnZmluZCcgfCAnY291bnQnIHwgJ2dldCcgfCAndXBkYXRlJyB8ICdjcmVhdGUnIHwgJ2RlbGV0ZSc7XG4vLyBAVHlwZXNjcmlwdCA0LjErIC8vIHR5cGUgQ0xQUGVybWlzc2lvbiA9ICdyZXF1aXJlc0F1dGhlbnRpY2F0aW9uJyB8ICcqJyB8ICBgdXNlcjoke3N0cmluZ31gIHwgYHJvbGU6JHtzdHJpbmd9YFxuXG50eXBlIENMUFZhbHVlID0geyBba2V5OiBzdHJpbmddOiBib29sZWFuIH07XG50eXBlIENMUERhdGEgPSB7IFtrZXk6IHN0cmluZ106IENMUE9wZXJhdGlvbltdIH07XG50eXBlIENMUEludGVyZmFjZSA9IHsgW2tleTogc3RyaW5nXTogQ0xQVmFsdWUgfTtcblxuZXhwb3J0IGludGVyZmFjZSBKU09OU2NoZW1hIHtcbiAgY2xhc3NOYW1lOiBDbGFzc05hbWVUeXBlO1xuICBmaWVsZHM/OiB7IFtrZXk6IHN0cmluZ106IEZpZWxkVHlwZSB9O1xuICBpbmRleGVzPzogSW5kZXhlc0ludGVyZmFjZTtcbiAgY2xhc3NMZXZlbFBlcm1pc3Npb25zPzoge1xuICAgIGZpbmQ/OiBDTFBWYWx1ZSxcbiAgICBjb3VudD86IENMUFZhbHVlLFxuICAgIGdldD86IENMUFZhbHVlLFxuICAgIHVwZGF0ZT86IENMUFZhbHVlLFxuICAgIGNyZWF0ZT86IENMUFZhbHVlLFxuICAgIGRlbGV0ZT86IENMUFZhbHVlLFxuICAgIGFkZEZpZWxkPzogQ0xQVmFsdWUsXG4gICAgcHJvdGVjdGVkRmllbGRzPzogUHJvdGVjdGVkRmllbGRzSW50ZXJmYWNlLFxuICB9O1xufVxuXG5leHBvcnQgY2xhc3MgQ0xQIHtcbiAgc3RhdGljIGFsbG93KHBlcm1zOiB7IFtrZXk6IHN0cmluZ106IENMUERhdGEgfSk6IENMUEludGVyZmFjZSB7XG4gICAgY29uc3Qgb3V0ID0ge307XG5cbiAgICBmb3IgKGNvbnN0IFtwZXJtLCBvcHNdIG9mIE9iamVjdC5lbnRyaWVzKHBlcm1zKSkge1xuICAgICAgLy8gQGZsb3ctZGlzYWJsZS1uZXh0IFByb3BlcnR5IGBAQGl0ZXJhdG9yYCBpcyBtaXNzaW5nIGluIG1peGVkIFsxXSBidXQgZXhpc3RzIGluIGAkSXRlcmFibGVgIFsyXS5cbiAgICAgIGZvciAoY29uc3Qgb3Agb2Ygb3BzKSB7XG4gICAgICAgIG91dFtvcF0gPSBvdXRbb3BdIHx8IHt9O1xuICAgICAgICBvdXRbb3BdW3Blcm1dID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlU2NoZW1hKGNsYXNzTmFtZTogQ2xhc3NOYW1lVHlwZSwgc2NoZW1hOiBKU09OU2NoZW1hKTogSlNPTlNjaGVtYSB7XG4gIC8vIFRoaXMgZnVuY3Rpb24gc29sdmUgdHdvIHRoaW5nczpcbiAgLy8gMS4gSXQgcHJvdmlkZXMgYXV0by1jb21wbGV0aW9uIHRvIHRoZSB1c2VycyB3aG8gYXJlIGltcGxlbWVudGluZyBzY2hlbWFzXG4gIC8vIDIuIEl0IGFsbG93cyBmb3J3YXJkLWNvbXBhdGlibGUgcG9pbnQgaW4gb3JkZXIgdG8gYWxsb3cgZnV0dXJlIGNoYW5nZXMgdG8gdGhlIGludGVybmFsIHN0cnVjdHVyZSBvZiBKU09OU2NoZW1hIHdpdGhvdXQgYWZmZWN0aW5nIGFsbCB0aGUgdXNlcnNcbiAgc2NoZW1hLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcblxuICByZXR1cm4gc2NoZW1hO1xufVxuIl19