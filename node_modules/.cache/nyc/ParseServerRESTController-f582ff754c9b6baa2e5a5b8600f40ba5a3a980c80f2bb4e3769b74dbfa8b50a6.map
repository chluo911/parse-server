{"version":3,"sources":["../src/ParseServerRESTController.js"],"names":["Config","require","Auth","RESTController","URL","Parse","getSessionToken","options","sessionToken","Promise","resolve","getAuth","config","installationId","useMasterKey","isMaster","then","getAuthForSessionToken","ParseServerRESTController","applicationId","router","handleRequest","method","path","data","args","arguments","get","serverURL","parse","indexOf","slice","length","batch","transactionRetries","initialPromise","transaction","database","createTransactionalSession","promises","requests","map","request","body","response","returnStatus","status","_status","success","error","code","message","all","result","find","resultItem","abortTransactionalSession","reject","commitTransactionalSession","catch","errorItem","query","auth","info","context","tryRouteRequest","resp","err","Error","INVALID_JSON","apply","ajax","handleError"],"mappings":"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","sourcesContent":["const Config = require('./Config');\nconst Auth = require('./Auth');\nconst RESTController = require('parse/lib/node/RESTController');\nconst URL = require('url');\nconst Parse = require('parse/node');\n\nfunction getSessionToken(options) {\n  if (options && typeof options.sessionToken === 'string') {\n    return Promise.resolve(options.sessionToken);\n  }\n  return Promise.resolve(null);\n}\n\nfunction getAuth(options = {}, config) {\n  const installationId = options.installationId || 'cloud';\n  if (options.useMasterKey) {\n    return Promise.resolve(new Auth.Auth({ config, isMaster: true, installationId }));\n  }\n  return getSessionToken(options).then(sessionToken => {\n    if (sessionToken) {\n      options.sessionToken = sessionToken;\n      return Auth.getAuthForSessionToken({\n        config,\n        sessionToken: sessionToken,\n        installationId,\n      });\n    } else {\n      return Promise.resolve(new Auth.Auth({ config, installationId }));\n    }\n  });\n}\n\nfunction ParseServerRESTController(applicationId, router) {\n  function handleRequest(method, path, data = {}, options = {}, config) {\n    // Store the arguments, for later use if internal fails\n    const args = arguments;\n\n    if (!config) {\n      config = Config.get(applicationId);\n    }\n    const serverURL = URL.parse(config.serverURL);\n    if (path.indexOf(serverURL.path) === 0) {\n      path = path.slice(serverURL.path.length, path.length);\n    }\n\n    if (path[0] !== '/') {\n      path = '/' + path;\n    }\n\n    if (path === '/batch') {\n      const batch = transactionRetries => {\n        let initialPromise = Promise.resolve();\n        if (data.transaction === true) {\n          initialPromise = config.database.createTransactionalSession();\n        }\n        return initialPromise.then(() => {\n          const promises = data.requests.map(request => {\n            return handleRequest(request.method, request.path, request.body, options, config).then(\n              response => {\n                if (options.returnStatus) {\n                  const status = response._status;\n                  delete response._status;\n                  return { success: response, _status: status };\n                }\n                return { success: response };\n              },\n              error => {\n                return {\n                  error: { code: error.code, error: error.message },\n                };\n              }\n            );\n          });\n          return Promise.all(promises)\n            .then(result => {\n              if (data.transaction === true) {\n                if (result.find(resultItem => typeof resultItem.error === 'object')) {\n                  return config.database.abortTransactionalSession().then(() => {\n                    return Promise.reject(result);\n                  });\n                } else {\n                  return config.database.commitTransactionalSession().then(() => {\n                    return result;\n                  });\n                }\n              } else {\n                return result;\n              }\n            })\n            .catch(error => {\n              if (\n                error &&\n                error.find(\n                  errorItem => typeof errorItem.error === 'object' && errorItem.error.code === 251\n                ) &&\n                transactionRetries > 0\n              ) {\n                return batch(transactionRetries - 1);\n              }\n              throw error;\n            });\n        });\n      };\n      return batch(5);\n    }\n\n    let query;\n    if (method === 'GET') {\n      query = data;\n    }\n\n    return new Promise((resolve, reject) => {\n      getAuth(options, config).then(auth => {\n        const request = {\n          body: data,\n          config,\n          auth,\n          info: {\n            applicationId: applicationId,\n            sessionToken: options.sessionToken,\n            installationId: options.installationId,\n            context: options.context || {},\n          },\n          query,\n        };\n        return Promise.resolve()\n          .then(() => {\n            return router.tryRouteRequest(method, path, request);\n          })\n          .then(\n            resp => {\n              const { response, status } = resp;\n              if (options.returnStatus) {\n                resolve({ ...response, _status: status });\n              } else {\n                resolve(response);\n              }\n            },\n            err => {\n              if (\n                err instanceof Parse.Error &&\n                err.code == Parse.Error.INVALID_JSON &&\n                err.message == `cannot route ${method} ${path}`\n              ) {\n                RESTController.request.apply(null, args).then(resolve, reject);\n              } else {\n                reject(err);\n              }\n            }\n          );\n      }, reject);\n    });\n  }\n\n  return {\n    request: handleRequest,\n    ajax: RESTController.ajax,\n    handleError: RESTController.handleError,\n  };\n}\n\nexport default ParseServerRESTController;\nexport { ParseServerRESTController };\n"]}