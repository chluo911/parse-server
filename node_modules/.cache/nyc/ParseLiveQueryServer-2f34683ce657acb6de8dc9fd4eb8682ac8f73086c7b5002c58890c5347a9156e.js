"use strict";function cov_2lbe1hdols(){var path="/parse-server/lib/LiveQuery/ParseLiveQueryServer.js";var hash="dc29efe731df9903e8a9d6c37090df7855094470";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/LiveQuery/ParseLiveQueryServer.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:38}},"2":{start:{line:8,column:10},end:{line:8,column:48}},"3":{start:{line:10,column:12},end:{line:10,column:57}},"4":{start:{line:12,column:20},end:{line:12,column:45}},"5":{start:{line:14,column:14},end:{line:14,column:33}},"6":{start:{line:16,column:28},end:{line:16,column:61}},"7":{start:{line:18,column:14},end:{line:18,column:58}},"8":{start:{line:20,column:21},end:{line:20,column:71}},"9":{start:{line:22,column:18},end:{line:22,column:41}},"10":{start:{line:24,column:19},end:{line:24,column:43}},"11":{start:{line:26,column:24},end:{line:26,column:90}},"12":{start:{line:28,column:14},end:{line:28,column:55}},"13":{start:{line:30,column:12},end:{line:30,column:27}},"14":{start:{line:32,column:16},end:{line:32,column:38}},"15":{start:{line:34,column:12},end:{line:34,column:30}},"16":{start:{line:36,column:19},end:{line:36,column:44}},"17":{start:{line:38,column:16},end:{line:38,column:60}},"18":{start:{line:40,column:19},end:{line:40,column:76}},"19":{start:{line:42,column:39},end:{line:42,column:93}},"20":{start:{line:48,column:4},end:{line:48,column:25}},"21":{start:{line:49,column:4},end:{line:49,column:29}},"22":{start:{line:50,column:4},end:{line:50,column:35}},"23":{start:{line:51,column:4},end:{line:51,column:25}},"24":{start:{line:52,column:4},end:{line:52,column:63}},"25":{start:{line:53,column:4},end:{line:53,column:67}},"26":{start:{line:55,column:21},end:{line:55,column:42}},"27":{start:{line:56,column:4},end:{line:56,column:30}},"28":{start:{line:58,column:4},end:{line:60,column:5}},"29":{start:{line:59,column:6},end:{line:59,column:44}},"30":{start:{line:62,column:4},end:{line:62,column:64}},"31":{start:{line:65,column:4},end:{line:65,column:49}},"32":{start:{line:67,column:22},end:{line:67,column:65}},"33":{start:{line:68,column:4},end:{line:68,column:40}},"34":{start:{line:70,column:4},end:{line:70,column:90}},"35":{start:{line:74,column:4},end:{line:74,column:83}},"36":{start:{line:75,column:4},end:{line:75,column:58}},"37":{start:{line:79,column:4},end:{line:83,column:7}},"38":{start:{line:85,column:4},end:{line:85,column:146}},"39":{start:{line:85,column:105},end:{line:85,column:136}},"40":{start:{line:87,column:4},end:{line:87,column:72}},"41":{start:{line:88,column:4},end:{line:88,column:73}},"42":{start:{line:89,column:4},end:{line:89,column:75}},"43":{start:{line:92,column:4},end:{line:114,column:7}},"44":{start:{line:93,column:6},end:{line:93,column:66}},"45":{start:{line:97,column:6},end:{line:103,column:7}},"46":{start:{line:98,column:8},end:{line:98,column:41}},"47":{start:{line:100,column:8},end:{line:100,column:72}},"48":{start:{line:102,column:8},end:{line:102,column:15}},"49":{start:{line:105,column:6},end:{line:105,column:40}},"50":{start:{line:107,column:6},end:{line:113,column:7}},"51":{start:{line:108,column:8},end:{line:108,column:35}},"52":{start:{line:109,column:13},end:{line:113,column:7}},"53":{start:{line:110,column:8},end:{line:110,column:37}},"54":{start:{line:112,column:8},end:{line:112,column:90}},"55":{start:{line:121,column:31},end:{line:121,column:57}},"56":{start:{line:123,column:4},end:{line:123,column:68}},"57":{start:{line:125,column:20},end:{line:125,column:48}},"58":{start:{line:126,column:22},end:{line:126,column:57}},"59":{start:{line:128,column:4},end:{line:128,column:49}},"60":{start:{line:130,column:4},end:{line:130,column:45}},"61":{start:{line:132,column:32},end:{line:132,column:59}},"62":{start:{line:134,column:4},end:{line:143,column:5}},"63":{start:{line:135,column:6},end:{line:135,column:71}},"64":{start:{line:137,column:6},end:{line:137,column:48}},"65":{start:{line:138,column:6},end:{line:138,column:56}},"66":{start:{line:140,column:6},end:{line:140,column:52}},"67":{start:{line:142,column:6},end:{line:142,column:48}},"68":{start:{line:149,column:4},end:{line:149,column:86}},"69":{start:{line:151,column:29},end:{line:151,column:64}},"70":{start:{line:152,column:34},end:{line:152,column:63}},"71":{start:{line:153,column:22},end:{line:153,column:50}},"72":{start:{line:155,column:4},end:{line:155,column:94}},"73":{start:{line:157,column:4},end:{line:157,column:77}},"74":{start:{line:159,column:31},end:{line:159,column:64}},"75":{start:{line:161,column:4},end:{line:165,column:5}},"76":{start:{line:162,column:6},end:{line:162,column:88}},"77":{start:{line:164,column:6},end:{line:164,column:13}},"78":{start:{line:167,column:4},end:{line:243,column:5}},"79":{start:{line:168,column:36},end:{line:168,column:95}},"80":{start:{line:170,column:6},end:{line:172,column:7}},"81":{start:{line:171,column:8},end:{line:171,column:17}},"82":{start:{line:174,column:6},end:{line:242,column:7}},"83":{start:{line:175,column:23},end:{line:175,column:49}},"84":{start:{line:177,column:8},end:{line:179,column:9}},"85":{start:{line:178,column:10},end:{line:178,column:19}},"86":{start:{line:181,column:8},end:{line:241,column:11}},"87":{start:{line:182,column:22},end:{line:182,column:57}},"88":{start:{line:184,column:21},end:{line:184,column:62}},"89":{start:{line:186,column:20},end:{line:186,column:22}},"90":{start:{line:188,column:10},end:{line:240,column:11}},"91":{start:{line:189,column:12},end:{line:189,column:109}},"92":{start:{line:190,column:30},end:{line:190,column:76}},"93":{start:{line:192,column:12},end:{line:194,column:13}},"94":{start:{line:193,column:14},end:{line:193,column:26}},"95":{start:{line:196,column:12},end:{line:205,column:14}},"96":{start:{line:206,column:28},end:{line:206,column:107}},"97":{start:{line:208,column:12},end:{line:220,column:13}},"98":{start:{line:209,column:27},end:{line:209,column:74}},"99":{start:{line:211,column:14},end:{line:213,column:15}},"100":{start:{line:212,column:16},end:{line:212,column:37}},"101":{start:{line:215,column:14},end:{line:217,column:15}},"102":{start:{line:216,column:16},end:{line:216,column:71}},"103":{start:{line:219,column:14},end:{line:219,column:93}},"104":{start:{line:222,column:12},end:{line:224,column:13}},"105":{start:{line:223,column:14},end:{line:223,column:21}},"106":{start:{line:226,column:12},end:{line:228,column:13}},"107":{start:{line:227,column:14},end:{line:227,column:115}},"108":{start:{line:230,column:12},end:{line:233,column:13}},"109":{start:{line:231,column:14},end:{line:231,column:53}},"110":{start:{line:232,column:14},end:{line:232,column:49}},"111":{start:{line:235,column:12},end:{line:235,column:61}},"112":{start:{line:237,column:12},end:{line:237,column:151}},"113":{start:{line:239,column:12},end:{line:239,column:190}},"114":{start:{line:249,column:4},end:{line:249,column:84}},"115":{start:{line:251,column:30},end:{line:251,column:34}},"116":{start:{line:253,column:4},end:{line:255,column:5}},"117":{start:{line:254,column:6},end:{line:254,column:65}},"118":{start:{line:257,column:34},end:{line:257,column:63}},"119":{start:{line:258,column:29},end:{line:258,column:64}},"120":{start:{line:259,column:22},end:{line:259,column:50}},"121":{start:{line:261,column:4},end:{line:261,column:94}},"122":{start:{line:263,column:4},end:{line:263,column:77}},"123":{start:{line:265,column:31},end:{line:265,column:64}},"124":{start:{line:267,column:4},end:{line:271,column:5}},"125":{start:{line:268,column:6},end:{line:268,column:88}},"126":{start:{line:270,column:6},end:{line:270,column:13}},"127":{start:{line:273,column:4},end:{line:403,column:5}},"128":{start:{line:274,column:44},end:{line:274,column:104}},"129":{start:{line:276,column:43},end:{line:276,column:102}},"130":{start:{line:278,column:6},end:{line:402,column:7}},"131":{start:{line:279,column:23},end:{line:279,column:49}},"132":{start:{line:281,column:8},end:{line:283,column:9}},"133":{start:{line:282,column:10},end:{line:282,column:19}},"134":{start:{line:285,column:8},end:{line:401,column:11}},"135":{start:{line:290,column:10},end:{line:300,column:11}},"136":{start:{line:291,column:12},end:{line:291,column:64}},"137":{start:{line:295,column:12},end:{line:297,column:13}},"138":{start:{line:296,column:14},end:{line:296,column:65}},"139":{start:{line:299,column:12},end:{line:299,column:90}},"140":{start:{line:305,column:20},end:{line:305,column:22}},"141":{start:{line:307,column:10},end:{line:312,column:11}},"142":{start:{line:308,column:12},end:{line:308,column:63}},"143":{start:{line:310,column:31},end:{line:310,column:66}},"144":{start:{line:311,column:12},end:{line:311,column:88}},"145":{start:{line:314,column:10},end:{line:400,column:11}},"146":{start:{line:315,column:23},end:{line:315,column:64}},"147":{start:{line:317,column:12},end:{line:317,column:109}},"148":{start:{line:318,column:58},end:{line:318,column:132}},"149":{start:{line:320,column:12},end:{line:320,column:258}},"150":{start:{line:325,column:12},end:{line:337,column:13}},"151":{start:{line:326,column:14},end:{line:326,column:30}},"152":{start:{line:327,column:19},end:{line:337,column:13}},"153":{start:{line:328,column:14},end:{line:328,column:29}},"154":{start:{line:329,column:19},end:{line:337,column:13}},"155":{start:{line:330,column:14},end:{line:334,column:15}},"156":{start:{line:331,column:16},end:{line:331,column:31}},"157":{start:{line:333,column:16},end:{line:333,column:32}},"158":{start:{line:336,column:14},end:{line:336,column:26}},"159":{start:{line:339,column:12},end:{line:349,column:14}},"160":{start:{line:350,column:28},end:{line:350,column:107}},"161":{start:{line:352,column:12},end:{line:368,column:13}},"162":{start:{line:353,column:14},end:{line:355,column:15}},"163":{start:{line:354,column:16},end:{line:354,column:71}},"164":{start:{line:357,column:14},end:{line:359,column:15}},"165":{start:{line:358,column:16},end:{line:358,column:75}},"166":{start:{line:361,column:27},end:{line:361,column:74}},"167":{start:{line:363,column:14},end:{line:365,column:15}},"168":{start:{line:364,column:16},end:{line:364,column:37}},"169":{start:{line:367,column:14},end:{line:367,column:93}},"170":{start:{line:370,column:12},end:{line:372,column:13}},"171":{start:{line:371,column:14},end:{line:371,column:21}},"172":{start:{line:374,column:12},end:{line:376,column:13}},"173":{start:{line:375,column:14},end:{line:375,column:115}},"174":{start:{line:378,column:12},end:{line:380,column:13}},"175":{start:{line:379,column:14},end:{line:379,column:120}},"176":{start:{line:382,column:12},end:{line:389,column:13}},"177":{start:{line:385,column:14},end:{line:385,column:53}},"178":{start:{line:386,column:14},end:{line:386,column:153}},"179":{start:{line:387,column:14},end:{line:387,column:49}},"180":{start:{line:388,column:14},end:{line:388,column:152}},"181":{start:{line:391,column:33},end:{line:391,column:96}},"182":{start:{line:393,column:12},end:{line:395,column:13}},"183":{start:{line:394,column:14},end:{line:394,column:87}},"184":{start:{line:397,column:12},end:{line:397,column:151}},"185":{start:{line:399,column:12},end:{line:399,column:190}},"186":{start:{line:407,column:4},end:{line:456,column:7}},"187":{start:{line:408,column:6},end:{line:416,column:7}},"188":{start:{line:409,column:8},end:{line:415,column:9}},"189":{start:{line:410,column:10},end:{line:410,column:40}},"190":{start:{line:412,column:10},end:{line:412,column:71}},"191":{start:{line:414,column:10},end:{line:414,column:17}},"192":{start:{line:418,column:6},end:{line:418,column:54}},"193":{start:{line:421,column:6},end:{line:427,column:7}},"194":{start:{line:422,column:8},end:{line:422,column:79}},"195":{start:{line:424,column:8},end:{line:424,column:85}},"196":{start:{line:426,column:8},end:{line:426,column:15}},"197":{start:{line:429,column:6},end:{line:455,column:7}},"198":{start:{line:431,column:10},end:{line:431,column:55}},"199":{start:{line:433,column:10},end:{line:433,column:16}},"200":{start:{line:436,column:10},end:{line:436,column:57}},"201":{start:{line:438,column:10},end:{line:438,column:16}},"202":{start:{line:441,column:10},end:{line:441,column:66}},"203":{start:{line:443,column:10},end:{line:443,column:16}},"204":{start:{line:446,column:10},end:{line:446,column:59}},"205":{start:{line:448,column:10},end:{line:448,column:16}},"206":{start:{line:451,column:10},end:{line:451,column:79}},"207":{start:{line:453,column:10},end:{line:453,column:69}},"208":{start:{line:457,column:4},end:{line:507,column:7}},"209":{start:{line:458,column:6},end:{line:458,column:76}},"210":{start:{line:460,column:23},end:{line:460,column:46}},"211":{start:{line:462,column:6},end:{line:473,column:7}},"212":{start:{line:463,column:8},end:{line:468,column:11}},"213":{start:{line:470,column:8},end:{line:470,column:79}},"214":{start:{line:472,column:8},end:{line:472,column:15}},"215":{start:{line:476,column:21},end:{line:476,column:47}},"216":{start:{line:477,column:6},end:{line:477,column:36}},"217":{start:{line:479,column:6},end:{line:493,column:7}},"218":{start:{line:480,column:29},end:{line:480,column:58}},"219":{start:{line:481,column:8},end:{line:481,column:67}},"220":{start:{line:483,column:35},end:{line:483,column:81}},"221":{start:{line:485,column:8},end:{line:487,column:9}},"222":{start:{line:486,column:10},end:{line:486,column:55}},"223":{start:{line:490,column:8},end:{line:492,column:9}},"224":{start:{line:491,column:10},end:{line:491,column:60}},"225":{start:{line:495,column:6},end:{line:495,column:71}},"226":{start:{line:497,column:6},end:{line:497,column:83}},"227":{start:{line:499,column:6},end:{line:506,column:9}},"228":{start:{line:508,column:4},end:{line:512,column:7}},"229":{start:{line:517,column:4},end:{line:519,column:5}},"230":{start:{line:518,column:6},end:{line:518,column:19}},"231":{start:{line:521,column:4},end:{line:521,column:74}},"232":{start:{line:525,column:4},end:{line:527,column:5}},"233":{start:{line:526,column:6},end:{line:526,column:33}},"234":{start:{line:529,column:22},end:{line:529,column:54}},"235":{start:{line:531,column:4},end:{line:533,column:5}},"236":{start:{line:532,column:6},end:{line:532,column:23}},"237":{start:{line:535,column:24},end:{line:555,column:6}},"238":{start:{line:539,column:6},end:{line:542,column:8}},"239":{start:{line:545,column:21},end:{line:545,column:23}},"240":{start:{line:547,column:6},end:{line:552,column:7}},"241":{start:{line:548,column:8},end:{line:548,column:29}},"242":{start:{line:549,column:8},end:{line:549,column:92}},"243":{start:{line:551,column:8},end:{line:551,column:41}},"244":{start:{line:554,column:6},end:{line:554,column:20}},"245":{start:{line:556,column:4},end:{line:556,column:50}},"246":{start:{line:557,column:4},end:{line:557,column:23}},"247":{start:{line:562,column:29},end:{line:562,column:66}},"248":{start:{line:563,column:21},end:{line:563,column:26}},"249":{start:{line:566,column:4},end:{line:574,column:5}},"250":{start:{line:569,column:10},end:{line:569,column:74}},"251":{start:{line:571,column:6},end:{line:573,column:7}},"252":{start:{line:572,column:8},end:{line:572,column:30}},"253":{start:{line:576,column:4},end:{line:583,column:5}},"254":{start:{line:577,column:6},end:{line:577,column:112}},"255":{start:{line:578,column:6},end:{line:578,column:18}},"256":{start:{line:580,column:6},end:{line:580,column:85}},"257":{start:{line:582,column:6},end:{line:582,column:19}},"258":{start:{line:598,column:4},end:{line:598,column:126}},"259":{start:{line:602,column:4},end:{line:604,column:5}},"260":{start:{line:603,column:6},end:{line:603,column:19}},"261":{start:{line:609,column:8},end:{line:609,column:48}},"262":{start:{line:613,column:4},end:{line:615,column:5}},"263":{start:{line:614,column:6},end:{line:614,column:19}},"264":{start:{line:617,column:46},end:{line:617,column:71}},"265":{start:{line:619,column:4},end:{line:621,column:5}},"266":{start:{line:620,column:6},end:{line:620,column:18}},"267":{start:{line:624,column:4},end:{line:644,column:7}},"268":{start:{line:626,column:28},end:{line:626,column:97}},"269":{start:{line:626,column:73},end:{line:626,column:96}},"270":{start:{line:628,column:6},end:{line:630,column:7}},"271":{start:{line:629,column:8},end:{line:629,column:21}},"272":{start:{line:632,column:24},end:{line:632,column:49}},"273":{start:{line:634,column:6},end:{line:639,column:7}},"274":{start:{line:636,column:8},end:{line:638,column:9}},"275":{start:{line:637,column:10},end:{line:637,column:22}},"276":{start:{line:641,column:6},end:{line:641,column:19}},"277":{start:{line:643,column:6},end:{line:643,column:19}},"278":{start:{line:648,column:33},end:{line:656,column:5}},"279":{start:{line:649,column:31},end:{line:649,column:68}},"280":{start:{line:651,column:6},end:{line:653,column:7}},"281":{start:{line:652,column:8},end:{line:652,column:35}},"282":{start:{line:655,column:6},end:{line:655,column:66}},"283":{start:{line:658,column:4},end:{line:660,column:5}},"284":{start:{line:659,column:6},end:{line:659,column:44}},"285":{start:{line:662,column:4},end:{line:664,column:5}},"286":{start:{line:663,column:6},end:{line:663,column:13}},"287":{start:{line:668,column:8},end:{line:668,column:55}},"288":{start:{line:669,column:4},end:{line:669,column:16}},"289":{start:{line:674,column:4},end:{line:676,column:5}},"290":{start:{line:675,column:6},end:{line:675,column:18}},"291":{start:{line:679,column:29},end:{line:679,column:66}},"292":{start:{line:681,column:4},end:{line:683,column:5}},"293":{start:{line:682,column:6},end:{line:682,column:19}},"294":{start:{line:685,column:30},end:{line:685,column:59}},"295":{start:{line:686,column:31},end:{line:686,column:50}},"296":{start:{line:688,column:4},end:{line:690,column:5}},"297":{start:{line:689,column:6},end:{line:689,column:18}},"298":{start:{line:692,column:4},end:{line:694,column:5}},"299":{start:{line:693,column:6},end:{line:693,column:18}},"300":{start:{line:696,column:4},end:{line:696,column:17}},"301":{start:{line:700,column:4},end:{line:706,column:5}},"302":{start:{line:701,column:6},end:{line:701,column:81}},"303":{start:{line:703,column:6},end:{line:703,column:59}},"304":{start:{line:705,column:6},end:{line:705,column:13}},"305":{start:{line:708,column:25},end:{line:708,column:67}},"306":{start:{line:710,column:21},end:{line:710,column:36}},"307":{start:{line:711,column:19},end:{line:711,column:123}},"308":{start:{line:713,column:4},end:{line:746,column:5}},"309":{start:{line:714,column:18},end:{line:722,column:7}},"310":{start:{line:723,column:22},end:{line:723,column:105}},"311":{start:{line:725,column:6},end:{line:733,column:7}},"312":{start:{line:726,column:21},end:{line:726,column:94}},"313":{start:{line:728,column:8},end:{line:730,column:9}},"314":{start:{line:729,column:10},end:{line:729,column:31}},"315":{start:{line:732,column:8},end:{line:732,column:86}},"316":{start:{line:735,column:6},end:{line:735,column:41}},"317":{start:{line:736,column:6},end:{line:736,column:56}},"318":{start:{line:738,column:6},end:{line:738,column:76}},"319":{start:{line:740,column:6},end:{line:740,column:27}},"320":{start:{line:741,column:6},end:{line:741,column:52}},"321":{start:{line:743,column:6},end:{line:743,column:127}},"322":{start:{line:745,column:6},end:{line:745,column:136}},"323":{start:{line:750,column:4},end:{line:752,column:5}},"324":{start:{line:751,column:6},end:{line:751,column:19}},"325":{start:{line:754,column:4},end:{line:756,column:5}},"326":{start:{line:755,column:6},end:{line:755,column:19}},"327":{start:{line:758,column:4},end:{line:758,column:64}},"328":{start:{line:762,column:4},end:{line:764,column:5}},"329":{start:{line:763,column:6},end:{line:763,column:18}},"330":{start:{line:766,column:18},end:{line:766,column:23}},"331":{start:{line:768,column:4},end:{line:775,column:5}},"332":{start:{line:769,column:6},end:{line:771,column:7}},"333":{start:{line:770,column:8},end:{line:770,column:17}},"334":{start:{line:773,column:6},end:{line:773,column:21}},"335":{start:{line:774,column:6},end:{line:774,column:12}},"336":{start:{line:777,column:4},end:{line:777,column:19}},"337":{start:{line:782,column:4},end:{line:788,column:5}},"338":{start:{line:783,column:6},end:{line:783,column:130}},"339":{start:{line:785,column:6},end:{line:785,column:108}},"340":{start:{line:787,column:6},end:{line:787,column:13}},"341":{start:{line:790,column:19},end:{line:790,column:60}},"342":{start:{line:791,column:22},end:{line:791,column:45}},"343":{start:{line:792,column:21},end:{line:792,column:26}},"344":{start:{line:794,column:4},end:{line:888,column:5}},"345":{start:{line:795,column:22},end:{line:795,column:106}},"346":{start:{line:797,column:6},end:{line:816,column:7}},"347":{start:{line:798,column:21},end:{line:798,column:98}},"348":{start:{line:799,column:8},end:{line:799,column:26}},"349":{start:{line:801,column:8},end:{line:803,column:9}},"350":{start:{line:802,column:10},end:{line:802,column:35}},"351":{start:{line:805,column:27},end:{line:805,column:61}},"352":{start:{line:806,column:8},end:{line:806,column:43}},"353":{start:{line:807,column:8},end:{line:807,column:35}},"354":{start:{line:808,column:8},end:{line:808,column:96}},"355":{start:{line:809,column:22},end:{line:809,column:44}},"356":{start:{line:811,column:8},end:{line:813,column:9}},"357":{start:{line:812,column:10},end:{line:812,column:47}},"358":{start:{line:815,column:8},end:{line:815,column:30}},"359":{start:{line:818,column:6},end:{line:834,column:7}},"360":{start:{line:819,column:8},end:{line:825,column:9}},"361":{start:{line:820,column:23},end:{line:820,column:100}},"362":{start:{line:822,column:10},end:{line:824,column:11}},"363":{start:{line:823,column:12},end:{line:823,column:37}},"364":{start:{line:827,column:8},end:{line:833,column:9}},"365":{start:{line:828,column:10},end:{line:828,column:62}},"366":{start:{line:829,column:15},end:{line:833,column:9}},"367":{start:{line:830,column:10},end:{line:830,column:145}},"368":{start:{line:832,column:10},end:{line:832,column:17}},"369":{start:{line:837,column:31},end:{line:837,column:72}},"370":{start:{line:839,column:6},end:{line:841,column:7}},"371":{start:{line:840,column:8},end:{line:840,column:53}},"372":{start:{line:843,column:33},end:{line:843,column:66}},"373":{start:{line:846,column:6},end:{line:851,column:7}},"374":{start:{line:847,column:8},end:{line:847,column:64}},"375":{start:{line:849,column:8},end:{line:849,column:104}},"376":{start:{line:850,column:8},end:{line:850,column:63}},"377":{start:{line:854,column:31},end:{line:856,column:7}},"378":{start:{line:858,column:6},end:{line:860,column:7}},"379":{start:{line:859,column:8},end:{line:859,column:55}},"380":{start:{line:862,column:6},end:{line:864,column:7}},"381":{start:{line:863,column:8},end:{line:863,column:61}},"382":{start:{line:866,column:6},end:{line:866,column:70}},"383":{start:{line:868,column:6},end:{line:868,column:85}},"384":{start:{line:869,column:6},end:{line:869,column:46}},"385":{start:{line:871,column:6},end:{line:871,column:113}},"386":{start:{line:873,column:6},end:{line:873,column:78}},"387":{start:{line:875,column:6},end:{line:883,column:9}},"388":{start:{line:885,column:6},end:{line:885,column:134}},"389":{start:{line:887,column:6},end:{line:887,column:150}},"390":{start:{line:892,column:4},end:{line:892,column:60}},"391":{start:{line:894,column:4},end:{line:894,column:51}},"392":{start:{line:899,column:4},end:{line:905,column:5}},"393":{start:{line:900,column:6},end:{line:900,column:132}},"394":{start:{line:902,column:6},end:{line:902,column:110}},"395":{start:{line:904,column:6},end:{line:904,column:13}},"396":{start:{line:907,column:22},end:{line:907,column:39}},"397":{start:{line:908,column:19},end:{line:908,column:60}},"398":{start:{line:910,column:4},end:{line:916,column:5}},"399":{start:{line:911,column:6},end:{line:911,column:184}},"400":{start:{line:913,column:6},end:{line:913,column:83}},"401":{start:{line:915,column:6},end:{line:915,column:13}},"402":{start:{line:918,column:29},end:{line:918,column:66}},"403":{start:{line:920,column:4},end:{line:926,column:5}},"404":{start:{line:921,column:6},end:{line:921,column:225}},"405":{start:{line:923,column:6},end:{line:923,column:131}},"406":{start:{line:925,column:6},end:{line:925,column:13}},"407":{start:{line:929,column:4},end:{line:929,column:45}},"408":{start:{line:931,column:25},end:{line:931,column:54}},"409":{start:{line:932,column:22},end:{line:932,column:44}},"410":{start:{line:933,column:4},end:{line:933,column:78}},"411":{start:{line:935,column:31},end:{line:935,column:64}},"412":{start:{line:937,column:4},end:{line:939,column:5}},"413":{start:{line:938,column:6},end:{line:938,column:51}},"414":{start:{line:942,column:4},end:{line:944,column:5}},"415":{start:{line:943,column:6},end:{line:943,column:43}},"416":{start:{line:946,column:4},end:{line:954,column:7}},"417":{start:{line:956,column:4},end:{line:958,column:5}},"418":{start:{line:957,column:6},end:{line:957,column:13}},"419":{start:{line:960,column:4},end:{line:960,column:46}},"420":{start:{line:962,column:4},end:{line:962,column:110}},"421":{start:{line:967,column:0},end:{line:967,column:52}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:42,column:9},end:{line:42,column:31}},loc:{start:{line:42,column:37},end:{line:42,column:95}},line:42},"1":{name:"(anonymous_1)",decl:{start:{line:47,column:2},end:{line:47,column:3}},loc:{start:{line:47,column:59},end:{line:115,column:3}},line:47},"2":{name:"(anonymous_2)",decl:{start:{line:85,column:87},end:{line:85,column:88}},loc:{start:{line:85,column:105},end:{line:85,column:136}},line:85},"3":{name:"(anonymous_3)",decl:{start:{line:92,column:34},end:{line:92,column:35}},loc:{start:{line:92,column:59},end:{line:114,column:5}},line:92},"4":{name:"(anonymous_4)",decl:{start:{line:119,column:2},end:{line:119,column:3}},loc:{start:{line:119,column:31},end:{line:144,column:3}},line:119},"5":{name:"(anonymous_5)",decl:{start:{line:148,column:2},end:{line:148,column:3}},loc:{start:{line:148,column:32},end:{line:244,column:3}},line:148},"6":{name:"(anonymous_6)",decl:{start:{line:181,column:27},end:{line:181,column:28}},loc:{start:{line:181,column:46},end:{line:241,column:9}},line:181},"7":{name:"(anonymous_7)",decl:{start:{line:248,column:2},end:{line:248,column:3}},loc:{start:{line:248,column:30},end:{line:404,column:3}},line:248},"8":{name:"(anonymous_8)",decl:{start:{line:285,column:27},end:{line:285,column:28}},loc:{start:{line:285,column:46},end:{line:401,column:9}},line:285},"9":{name:"(anonymous_9)",decl:{start:{line:406,column:2},end:{line:406,column:3}},loc:{start:{line:406,column:29},end:{line:513,column:3}},line:406},"10":{name:"(anonymous_10)",decl:{start:{line:407,column:33},end:{line:407,column:34}},loc:{start:{line:407,column:44},end:{line:456,column:5}},line:407},"11":{name:"(anonymous_11)",decl:{start:{line:457,column:36},end:{line:457,column:37}},loc:{start:{line:457,column:42},end:{line:507,column:5}},line:457},"12":{name:"(anonymous_12)",decl:{start:{line:515,column:2},end:{line:515,column:3}},loc:{start:{line:515,column:50},end:{line:522,column:3}},line:515},"13":{name:"(anonymous_13)",decl:{start:{line:524,column:2},end:{line:524,column:3}},loc:{start:{line:524,column:39},end:{line:558,column:3}},line:524},"14":{name:"(anonymous_14)",decl:{start:{line:538,column:12},end:{line:538,column:13}},loc:{start:{line:538,column:20},end:{line:543,column:5}},line:538},"15":{name:"(anonymous_15)",decl:{start:{line:543,column:13},end:{line:543,column:14}},loc:{start:{line:543,column:22},end:{line:555,column:5}},line:543},"16":{name:"(anonymous_16)",decl:{start:{line:560,column:2},end:{line:560,column:3}},loc:{start:{line:560,column:74},end:{line:595,column:3}},line:560},"17":{name:"(anonymous_17)",decl:{start:{line:597,column:2},end:{line:597,column:3}},loc:{start:{line:597,column:26},end:{line:599,column:3}},line:597},"18":{name:"(anonymous_18)",decl:{start:{line:601,column:2},end:{line:601,column:3}},loc:{start:{line:601,column:31},end:{line:645,column:3}},line:601},"19":{name:"(anonymous_19)",decl:{start:{line:624,column:34},end:{line:624,column:35}},loc:{start:{line:624,column:46},end:{line:642,column:5}},line:624},"20":{name:"(anonymous_20)",decl:{start:{line:626,column:66},end:{line:626,column:67}},loc:{start:{line:626,column:73},end:{line:626,column:96}},line:626},"21":{name:"(anonymous_21)",decl:{start:{line:642,column:13},end:{line:642,column:14}},loc:{start:{line:642,column:19},end:{line:644,column:5}},line:642},"22":{name:"(anonymous_22)",decl:{start:{line:647,column:2},end:{line:647,column:3}},loc:{start:{line:647,column:59},end:{line:670,column:3}},line:647},"23":{name:"(anonymous_23)",decl:{start:{line:648,column:33},end:{line:648,column:34}},loc:{start:{line:648,column:39},end:{line:656,column:5}},line:648},"24":{name:"(anonymous_24)",decl:{start:{line:672,column:2},end:{line:672,column:3}},loc:{start:{line:672,column:44},end:{line:697,column:3}},line:672},"25":{name:"(anonymous_25)",decl:{start:{line:699,column:2},end:{line:699,column:3}},loc:{start:{line:699,column:48},end:{line:747,column:3}},line:699},"26":{name:"(anonymous_26)",decl:{start:{line:749,column:2},end:{line:749,column:3}},loc:{start:{line:749,column:40},end:{line:759,column:3}},line:749},"27":{name:"(anonymous_27)",decl:{start:{line:761,column:2},end:{line:761,column:3}},loc:{start:{line:761,column:40},end:{line:778,column:3}},line:761},"28":{name:"(anonymous_28)",decl:{start:{line:780,column:2},end:{line:780,column:3}},loc:{start:{line:780,column:50},end:{line:889,column:3}},line:780},"29":{name:"(anonymous_29)",decl:{start:{line:891,column:2},end:{line:891,column:3}},loc:{start:{line:891,column:53},end:{line:895,column:3}},line:891},"30":{name:"(anonymous_30)",decl:{start:{line:897,column:2},end:{line:897,column:3}},loc:{start:{line:897,column:67},end:{line:963,column:3}},line:897}},branchMap:{"0":{loc:{start:{line:42,column:46},end:{line:42,column:92}},type:"cond-expr",locations:[{start:{line:42,column:70},end:{line:42,column:73}},{start:{line:42,column:76},end:{line:42,column:92}}],line:42},"1":{loc:{start:{line:42,column:46},end:{line:42,column:67}},type:"binary-expr",locations:[{start:{line:42,column:46},end:{line:42,column:49}},{start:{line:42,column:53},end:{line:42,column:67}}],line:42},"2":{loc:{start:{line:47,column:22},end:{line:47,column:33}},type:"default-arg",locations:[{start:{line:47,column:31},end:{line:47,column:33}}],line:47},"3":{loc:{start:{line:47,column:35},end:{line:47,column:57}},type:"default-arg",locations:[{start:{line:47,column:55},end:{line:47,column:57}}],line:47},"4":{loc:{start:{line:52,column:19},end:{line:52,column:62}},type:"binary-expr",locations:[{start:{line:52,column:19},end:{line:52,column:31}},{start:{line:52,column:35},end:{line:52,column:62}}],line:52},"5":{loc:{start:{line:53,column:23},end:{line:53,column:66}},type:"binary-expr",locations:[{start:{line:53,column:23},end:{line:53,column:39}},{start:{line:53,column:43},end:{line:53,column:66}}],line:53},"6":{loc:{start:{line:55,column:21},end:{line:55,column:42}},type:"binary-expr",locations:[{start:{line:55,column:21},end:{line:55,column:36}},{start:{line:55,column:40},end:{line:55,column:42}}],line:55},"7":{loc:{start:{line:67,column:22},end:{line:67,column:65}},type:"binary-expr",locations:[{start:{line:67,column:22},end:{line:67,column:38}},{start:{line:67,column:42},end:{line:67,column:65}}],line:67},"8":{loc:{start:{line:75,column:26},end:{line:75,column:57}},type:"binary-expr",locations:[{start:{line:75,column:26},end:{line:75,column:45}},{start:{line:75,column:49},end:{line:75,column:57}}],line:75},"9":{loc:{start:{line:107,column:6},end:{line:113,column:7}},type:"if",locations:[{start:{line:107,column:6},end:{line:113,column:7}},{start:{line:107,column:6},end:{line:113,column:7}}],line:107},"10":{loc:{start:{line:109,column:13},end:{line:113,column:7}},type:"if",locations:[{start:{line:109,column:13},end:{line:113,column:7}},{start:{line:109,column:13},end:{line:113,column:7}}],line:109},"11":{loc:{start:{line:134,column:4},end:{line:143,column:5}},type:"if",locations:[{start:{line:134,column:4},end:{line:143,column:5}},{start:{line:134,column:4},end:{line:143,column:5}}],line:134},"12":{loc:{start:{line:161,column:4},end:{line:165,column:5}},type:"if",locations:[{start:{line:161,column:4},end:{line:165,column:5}},{start:{line:161,column:4},end:{line:165,column:5}}],line:161},"13":{loc:{start:{line:170,column:6},end:{line:172,column:7}},type:"if",locations:[{start:{line:170,column:6},end:{line:172,column:7}},{start:{line:170,column:6},end:{line:172,column:7}}],line:170},"14":{loc:{start:{line:177,column:8},end:{line:179,column:9}},type:"if",locations:[{start:{line:177,column:8},end:{line:179,column:9}},{start:{line:177,column:8},end:{line:179,column:9}}],line:177},"15":{loc:{start:{line:192,column:12},end:{line:194,column:13}},type:"if",locations:[{start:{line:192,column:12},end:{line:194,column:13}},{start:{line:192,column:12},end:{line:194,column:13}}],line:192},"16":{loc:{start:{line:208,column:12},end:{line:220,column:13}},type:"if",locations:[{start:{line:208,column:12},end:{line:220,column:13}},{start:{line:208,column:12},end:{line:220,column:13}}],line:208},"17":{loc:{start:{line:211,column:14},end:{line:213,column:15}},type:"if",locations:[{start:{line:211,column:14},end:{line:213,column:15}},{start:{line:211,column:14},end:{line:213,column:15}}],line:211},"18":{loc:{start:{line:211,column:18},end:{line:211,column:35}},type:"binary-expr",locations:[{start:{line:211,column:18},end:{line:211,column:22}},{start:{line:211,column:26},end:{line:211,column:35}}],line:211},"19":{loc:{start:{line:215,column:14},end:{line:217,column:15}},type:"if",locations:[{start:{line:215,column:14},end:{line:217,column:15}},{start:{line:215,column:14},end:{line:217,column:15}}],line:215},"20":{loc:{start:{line:222,column:12},end:{line:224,column:13}},type:"if",locations:[{start:{line:222,column:12},end:{line:224,column:13}},{start:{line:222,column:12},end:{line:224,column:13}}],line:222},"21":{loc:{start:{line:226,column:12},end:{line:228,column:13}},type:"if",locations:[{start:{line:226,column:12},end:{line:228,column:13}},{start:{line:226,column:12},end:{line:228,column:13}}],line:226},"22":{loc:{start:{line:226,column:16},end:{line:226,column:69}},type:"binary-expr",locations:[{start:{line:226,column:16},end:{line:226,column:26}},{start:{line:226,column:30},end:{line:226,column:69}}],line:226},"23":{loc:{start:{line:227,column:80},end:{line:227,column:113}},type:"binary-expr",locations:[{start:{line:227,column:80},end:{line:227,column:100}},{start:{line:227,column:104},end:{line:227,column:113}}],line:227},"24":{loc:{start:{line:230,column:12},end:{line:233,column:13}},type:"if",locations:[{start:{line:230,column:12},end:{line:233,column:13}},{start:{line:230,column:12},end:{line:233,column:13}}],line:230},"25":{loc:{start:{line:230,column:16},end:{line:230,column:129}},type:"binary-expr",locations:[{start:{line:230,column:17},end:{line:230,column:57}},{start:{line:230,column:61},end:{line:230,column:104}},{start:{line:230,column:109},end:{line:230,column:129}}],line:230},"26":{loc:{start:{line:237,column:60},end:{line:237,column:107}},type:"binary-expr",locations:[{start:{line:237,column:60},end:{line:237,column:70}},{start:{line:237,column:74},end:{line:237,column:107}}],line:237},"27":{loc:{start:{line:237,column:109},end:{line:237,column:131}},type:"binary-expr",locations:[{start:{line:237,column:109},end:{line:237,column:122}},{start:{line:237,column:126},end:{line:237,column:131}}],line:237},"28":{loc:{start:{line:253,column:4},end:{line:255,column:5}},type:"if",locations:[{start:{line:253,column:4},end:{line:255,column:5}},{start:{line:253,column:4},end:{line:255,column:5}}],line:253},"29":{loc:{start:{line:267,column:4},end:{line:271,column:5}},type:"if",locations:[{start:{line:267,column:4},end:{line:271,column:5}},{start:{line:267,column:4},end:{line:271,column:5}}],line:267},"30":{loc:{start:{line:281,column:8},end:{line:283,column:9}},type:"if",locations:[{start:{line:281,column:8},end:{line:283,column:9}},{start:{line:281,column:8},end:{line:283,column:9}}],line:281},"31":{loc:{start:{line:290,column:10},end:{line:300,column:11}},type:"if",locations:[{start:{line:290,column:10},end:{line:300,column:11}},{start:{line:290,column:10},end:{line:300,column:11}}],line:290},"32":{loc:{start:{line:295,column:12},end:{line:297,column:13}},type:"if",locations:[{start:{line:295,column:12},end:{line:297,column:13}},{start:{line:295,column:12},end:{line:297,column:13}}],line:295},"33":{loc:{start:{line:307,column:10},end:{line:312,column:11}},type:"if",locations:[{start:{line:307,column:10},end:{line:312,column:11}},{start:{line:307,column:10},end:{line:312,column:11}}],line:307},"34":{loc:{start:{line:325,column:12},end:{line:337,column:13}},type:"if",locations:[{start:{line:325,column:12},end:{line:337,column:13}},{start:{line:325,column:12},end:{line:337,column:13}}],line:325},"35":{loc:{start:{line:325,column:16},end:{line:325,column:53}},type:"binary-expr",locations:[{start:{line:325,column:16},end:{line:325,column:33}},{start:{line:325,column:37},end:{line:325,column:53}}],line:325},"36":{loc:{start:{line:327,column:19},end:{line:337,column:13}},type:"if",locations:[{start:{line:327,column:19},end:{line:337,column:13}},{start:{line:327,column:19},end:{line:337,column:13}}],line:327},"37":{loc:{start:{line:327,column:23},end:{line:327,column:61}},type:"binary-expr",locations:[{start:{line:327,column:23},end:{line:327,column:40}},{start:{line:327,column:44},end:{line:327,column:61}}],line:327},"38":{loc:{start:{line:329,column:19},end:{line:337,column:13}},type:"if",locations:[{start:{line:329,column:19},end:{line:337,column:13}},{start:{line:329,column:19},end:{line:337,column:13}}],line:329},"39":{loc:{start:{line:329,column:23},end:{line:329,column:61}},type:"binary-expr",locations:[{start:{line:329,column:23},end:{line:329,column:41}},{start:{line:329,column:45},end:{line:329,column:61}}],line:329},"40":{loc:{start:{line:330,column:14},end:{line:334,column:15}},type:"if",locations:[{start:{line:330,column:14},end:{line:334,column:15}},{start:{line:330,column:14},end:{line:334,column:15}}],line:330},"41":{loc:{start:{line:352,column:12},end:{line:368,column:13}},type:"if",locations:[{start:{line:352,column:12},end:{line:368,column:13}},{start:{line:352,column:12},end:{line:368,column:13}}],line:352},"42":{loc:{start:{line:353,column:14},end:{line:355,column:15}},type:"if",locations:[{start:{line:353,column:14},end:{line:355,column:15}},{start:{line:353,column:14},end:{line:355,column:15}}],line:353},"43":{loc:{start:{line:357,column:14},end:{line:359,column:15}},type:"if",locations:[{start:{line:357,column:14},end:{line:359,column:15}},{start:{line:357,column:14},end:{line:359,column:15}}],line:357},"44":{loc:{start:{line:363,column:14},end:{line:365,column:15}},type:"if",locations:[{start:{line:363,column:14},end:{line:365,column:15}},{start:{line:363,column:14},end:{line:365,column:15}}],line:363},"45":{loc:{start:{line:363,column:18},end:{line:363,column:35}},type:"binary-expr",locations:[{start:{line:363,column:18},end:{line:363,column:22}},{start:{line:363,column:26},end:{line:363,column:35}}],line:363},"46":{loc:{start:{line:370,column:12},end:{line:372,column:13}},type:"if",locations:[{start:{line:370,column:12},end:{line:372,column:13}},{start:{line:370,column:12},end:{line:372,column:13}}],line:370},"47":{loc:{start:{line:374,column:12},end:{line:376,column:13}},type:"if",locations:[{start:{line:374,column:12},end:{line:376,column:13}},{start:{line:374,column:12},end:{line:376,column:13}}],line:374},"48":{loc:{start:{line:374,column:16},end:{line:374,column:69}},type:"binary-expr",locations:[{start:{line:374,column:16},end:{line:374,column:26}},{start:{line:374,column:30},end:{line:374,column:69}}],line:374},"49":{loc:{start:{line:375,column:80},end:{line:375,column:113}},type:"binary-expr",locations:[{start:{line:375,column:80},end:{line:375,column:100}},{start:{line:375,column:104},end:{line:375,column:113}}],line:375},"50":{loc:{start:{line:378,column:12},end:{line:380,column:13}},type:"if",locations:[{start:{line:378,column:12},end:{line:380,column:13}},{start:{line:378,column:12},end:{line:380,column:13}}],line:378},"51":{loc:{start:{line:378,column:16},end:{line:378,column:73}},type:"binary-expr",locations:[{start:{line:378,column:16},end:{line:378,column:28}},{start:{line:378,column:32},end:{line:378,column:73}}],line:378},"52":{loc:{start:{line:379,column:83},end:{line:379,column:118}},type:"binary-expr",locations:[{start:{line:379,column:83},end:{line:379,column:105}},{start:{line:379,column:109},end:{line:379,column:118}}],line:379},"53":{loc:{start:{line:382,column:12},end:{line:389,column:13}},type:"if",locations:[{start:{line:382,column:12},end:{line:389,column:13}},{start:{line:382,column:12},end:{line:389,column:13}}],line:382},"54":{loc:{start:{line:382,column:16},end:{line:382,column:129}},type:"binary-expr",locations:[{start:{line:382,column:17},end:{line:382,column:57}},{start:{line:382,column:61},end:{line:382,column:104}},{start:{line:382,column:109},end:{line:382,column:129}}],line:382},"55":{loc:{start:{line:386,column:14},end:{line:386,column:152}},type:"cond-expr",locations:[{start:{line:386,column:105},end:{line:386,column:109}},{start:{line:386,column:112},end:{line:386,column:152}}],line:386},"56":{loc:{start:{line:386,column:14},end:{line:386,column:102}},type:"binary-expr",locations:[{start:{line:386,column:14},end:{line:386,column:67}},{start:{line:386,column:71},end:{line:386,column:102}}],line:386},"57":{loc:{start:{line:388,column:14},end:{line:388,column:151}},type:"cond-expr",locations:[{start:{line:388,column:107},end:{line:388,column:111}},{start:{line:388,column:114},end:{line:388,column:151}}],line:388},"58":{loc:{start:{line:388,column:14},end:{line:388,column:104}},type:"binary-expr",locations:[{start:{line:388,column:14},end:{line:388,column:68}},{start:{line:388,column:72},end:{line:388,column:104}}],line:388},"59":{loc:{start:{line:393,column:12},end:{line:395,column:13}},type:"if",locations:[{start:{line:393,column:12},end:{line:395,column:13}},{start:{line:393,column:12},end:{line:395,column:13}}],line:393},"60":{loc:{start:{line:397,column:60},end:{line:397,column:107}},type:"binary-expr",locations:[{start:{line:397,column:60},end:{line:397,column:70}},{start:{line:397,column:74},end:{line:397,column:107}}],line:397},"61":{loc:{start:{line:397,column:109},end:{line:397,column:131}},type:"binary-expr",locations:[{start:{line:397,column:109},end:{line:397,column:122}},{start:{line:397,column:126},end:{line:397,column:131}}],line:397},"62":{loc:{start:{line:408,column:6},end:{line:416,column:7}},type:"if",locations:[{start:{line:408,column:6},end:{line:416,column:7}},{start:{line:408,column:6},end:{line:416,column:7}}],line:408},"63":{loc:{start:{line:421,column:6},end:{line:427,column:7}},type:"if",locations:[{start:{line:421,column:6},end:{line:427,column:7}},{start:{line:421,column:6},end:{line:427,column:7}}],line:421},"64":{loc:{start:{line:421,column:10},end:{line:421,column:145}},type:"binary-expr",locations:[{start:{line:421,column:10},end:{line:421,column:75}},{start:{line:421,column:79},end:{line:421,column:145}}],line:421},"65":{loc:{start:{line:429,column:6},end:{line:455,column:7}},type:"switch",locations:[{start:{line:430,column:8},end:{line:433,column:16}},{start:{line:435,column:8},end:{line:438,column:16}},{start:{line:440,column:8},end:{line:443,column:16}},{start:{line:445,column:8},end:{line:448,column:16}},{start:{line:450,column:8},end:{line:453,column:69}}],line:429},"66":{loc:{start:{line:462,column:6},end:{line:473,column:7}},type:"if",locations:[{start:{line:462,column:6},end:{line:473,column:7}},{start:{line:462,column:6},end:{line:473,column:7}}],line:462},"67":{loc:{start:{line:485,column:8},end:{line:487,column:9}},type:"if",locations:[{start:{line:485,column:8},end:{line:487,column:9}},{start:{line:485,column:8},end:{line:487,column:9}}],line:485},"68":{loc:{start:{line:490,column:8},end:{line:492,column:9}},type:"if",locations:[{start:{line:490,column:8},end:{line:492,column:9}},{start:{line:490,column:8},end:{line:492,column:9}}],line:490},"69":{loc:{start:{line:517,column:4},end:{line:519,column:5}},type:"if",locations:[{start:{line:517,column:4},end:{line:519,column:5}},{start:{line:517,column:4},end:{line:519,column:5}}],line:517},"70":{loc:{start:{line:525,column:4},end:{line:527,column:5}},type:"if",locations:[{start:{line:525,column:4},end:{line:527,column:5}},{start:{line:525,column:4},end:{line:527,column:5}}],line:525},"71":{loc:{start:{line:531,column:4},end:{line:533,column:5}},type:"if",locations:[{start:{line:531,column:4},end:{line:533,column:5}},{start:{line:531,column:4},end:{line:533,column:5}}],line:531},"72":{loc:{start:{line:541,column:16},end:{line:541,column:49}},type:"binary-expr",locations:[{start:{line:541,column:16},end:{line:541,column:20}},{start:{line:541,column:24},end:{line:541,column:33}},{start:{line:541,column:37},end:{line:541,column:49}}],line:541},"73":{loc:{start:{line:547,column:6},end:{line:552,column:7}},type:"if",locations:[{start:{line:547,column:6},end:{line:552,column:7}},{start:{line:547,column:6},end:{line:552,column:7}}],line:547},"74":{loc:{start:{line:547,column:10},end:{line:547,column:75}},type:"binary-expr",locations:[{start:{line:547,column:10},end:{line:547,column:15}},{start:{line:547,column:19},end:{line:547,column:75}}],line:547},"75":{loc:{start:{line:566,column:4},end:{line:574,column:5}},type:"if",locations:[{start:{line:566,column:4},end:{line:574,column:5}},{start:{line:566,column:4},end:{line:574,column:5}}],line:566},"76":{loc:{start:{line:571,column:6},end:{line:573,column:7}},type:"if",locations:[{start:{line:571,column:6},end:{line:573,column:7}},{start:{line:571,column:6},end:{line:573,column:7}}],line:571},"77":{loc:{start:{line:598,column:11},end:{line:598,column:125}},type:"cond-expr",locations:[{start:{line:598,column:111},end:{line:598,column:116}},{start:{line:598,column:119},end:{line:598,column:125}}],line:598},"78":{loc:{start:{line:598,column:11},end:{line:598,column:108}},type:"binary-expr",locations:[{start:{line:598,column:11},end:{line:598,column:36}},{start:{line:598,column:40},end:{line:598,column:70}},{start:{line:598,column:74},end:{line:598,column:108}}],line:598},"79":{loc:{start:{line:602,column:4},end:{line:604,column:5}},type:"if",locations:[{start:{line:602,column:4},end:{line:604,column:5}},{start:{line:602,column:4},end:{line:604,column:5}}],line:602},"80":{loc:{start:{line:613,column:4},end:{line:615,column:5}},type:"if",locations:[{start:{line:613,column:4},end:{line:615,column:5}},{start:{line:613,column:4},end:{line:615,column:5}}],line:613},"81":{loc:{start:{line:613,column:8},end:{line:613,column:24}},type:"binary-expr",locations:[{start:{line:613,column:8},end:{line:613,column:13}},{start:{line:613,column:17},end:{line:613,column:24}}],line:613},"82":{loc:{start:{line:619,column:4},end:{line:621,column:5}},type:"if",locations:[{start:{line:619,column:4},end:{line:621,column:5}},{start:{line:619,column:4},end:{line:621,column:5}}],line:619},"83":{loc:{start:{line:628,column:6},end:{line:630,column:7}},type:"if",locations:[{start:{line:628,column:6},end:{line:630,column:7}},{start:{line:628,column:6},end:{line:630,column:7}}],line:628},"84":{loc:{start:{line:636,column:8},end:{line:638,column:9}},type:"if",locations:[{start:{line:636,column:8},end:{line:638,column:9}},{start:{line:636,column:8},end:{line:638,column:9}}],line:636},"85":{loc:{start:{line:651,column:6},end:{line:653,column:7}},type:"if",locations:[{start:{line:651,column:6},end:{line:653,column:7}},{start:{line:651,column:6},end:{line:653,column:7}}],line:651},"86":{loc:{start:{line:655,column:13},end:{line:655,column:65}},type:"binary-expr",locations:[{start:{line:655,column:13},end:{line:655,column:42}},{start:{line:655,column:46},end:{line:655,column:65}}],line:655},"87":{loc:{start:{line:658,column:4},end:{line:660,column:5}},type:"if",locations:[{start:{line:658,column:4},end:{line:660,column:5}},{start:{line:658,column:4},end:{line:660,column:5}}],line:658},"88":{loc:{start:{line:662,column:4},end:{line:664,column:5}},type:"if",locations:[{start:{line:662,column:4},end:{line:664,column:5}},{start:{line:662,column:4},end:{line:664,column:5}}],line:662},"89":{loc:{start:{line:674,column:4},end:{line:676,column:5}},type:"if",locations:[{start:{line:674,column:4},end:{line:676,column:5}},{start:{line:674,column:4},end:{line:676,column:5}}],line:674},"90":{loc:{start:{line:674,column:8},end:{line:674,column:64}},type:"binary-expr",locations:[{start:{line:674,column:8},end:{line:674,column:12}},{start:{line:674,column:16},end:{line:674,column:41}},{start:{line:674,column:45},end:{line:674,column:64}}],line:674},"91":{loc:{start:{line:681,column:4},end:{line:683,column:5}},type:"if",locations:[{start:{line:681,column:4},end:{line:683,column:5}},{start:{line:681,column:4},end:{line:683,column:5}}],line:681},"92":{loc:{start:{line:688,column:4},end:{line:690,column:5}},type:"if",locations:[{start:{line:688,column:4},end:{line:690,column:5}},{start:{line:688,column:4},end:{line:690,column:5}}],line:688},"93":{loc:{start:{line:692,column:4},end:{line:694,column:5}},type:"if",locations:[{start:{line:692,column:4},end:{line:694,column:5}},{start:{line:692,column:4},end:{line:694,column:5}}],line:692},"94":{loc:{start:{line:700,column:4},end:{line:706,column:5}},type:"if",locations:[{start:{line:700,column:4},end:{line:706,column:5}},{start:{line:700,column:4},end:{line:706,column:5}}],line:700},"95":{loc:{start:{line:725,column:6},end:{line:733,column:7}},type:"if",locations:[{start:{line:725,column:6},end:{line:733,column:7}},{start:{line:725,column:6},end:{line:733,column:7}}],line:725},"96":{loc:{start:{line:728,column:8},end:{line:730,column:9}},type:"if",locations:[{start:{line:728,column:8},end:{line:730,column:9}},{start:{line:728,column:8},end:{line:730,column:9}}],line:728},"97":{loc:{start:{line:728,column:12},end:{line:728,column:29}},type:"binary-expr",locations:[{start:{line:728,column:12},end:{line:728,column:16}},{start:{line:728,column:20},end:{line:728,column:29}}],line:728},"98":{loc:{start:{line:743,column:47},end:{line:743,column:94}},type:"binary-expr",locations:[{start:{line:743,column:47},end:{line:743,column:57}},{start:{line:743,column:61},end:{line:743,column:94}}],line:743},"99":{loc:{start:{line:743,column:96},end:{line:743,column:118}},type:"binary-expr",locations:[{start:{line:743,column:96},end:{line:743,column:109}},{start:{line:743,column:113},end:{line:743,column:118}}],line:743},"100":{loc:{start:{line:750,column:4},end:{line:752,column:5}},type:"if",locations:[{start:{line:750,column:4},end:{line:752,column:5}},{start:{line:750,column:4},end:{line:752,column:5}}],line:750},"101":{loc:{start:{line:750,column:8},end:{line:750,column:84}},type:"binary-expr",locations:[{start:{line:750,column:8},end:{line:750,column:22}},{start:{line:750,column:26},end:{line:750,column:49}},{start:{line:750,column:53},end:{line:750,column:84}}],line:750},"102":{loc:{start:{line:754,column:4},end:{line:756,column:5}},type:"if",locations:[{start:{line:754,column:4},end:{line:756,column:5}},{start:{line:754,column:4},end:{line:756,column:5}}],line:754},"103":{loc:{start:{line:754,column:8},end:{line:754,column:79}},type:"binary-expr",locations:[{start:{line:754,column:8},end:{line:754,column:16}},{start:{line:754,column:20},end:{line:754,column:79}}],line:754},"104":{loc:{start:{line:762,column:4},end:{line:764,column:5}},type:"if",locations:[{start:{line:762,column:4},end:{line:764,column:5}},{start:{line:762,column:4},end:{line:764,column:5}}],line:762},"105":{loc:{start:{line:762,column:8},end:{line:762,column:49}},type:"binary-expr",locations:[{start:{line:762,column:8},end:{line:762,column:22}},{start:{line:762,column:26},end:{line:762,column:49}}],line:762},"106":{loc:{start:{line:769,column:6},end:{line:771,column:7}},type:"if",locations:[{start:{line:769,column:6},end:{line:771,column:7}},{start:{line:769,column:6},end:{line:771,column:7}}],line:769},"107":{loc:{start:{line:769,column:10},end:{line:769,column:50}},type:"binary-expr",locations:[{start:{line:769,column:10},end:{line:769,column:23}},{start:{line:769,column:27},end:{line:769,column:50}}],line:769},"108":{loc:{start:{line:782,column:4},end:{line:788,column:5}},type:"if",locations:[{start:{line:782,column:4},end:{line:788,column:5}},{start:{line:782,column:4},end:{line:788,column:5}}],line:782},"109":{loc:{start:{line:797,column:6},end:{line:816,column:7}},type:"if",locations:[{start:{line:797,column:6},end:{line:816,column:7}},{start:{line:797,column:6},end:{line:816,column:7}}],line:797},"110":{loc:{start:{line:801,column:8},end:{line:803,column:9}},type:"if",locations:[{start:{line:801,column:8},end:{line:803,column:9}},{start:{line:801,column:8},end:{line:803,column:9}}],line:801},"111":{loc:{start:{line:801,column:12},end:{line:801,column:29}},type:"binary-expr",locations:[{start:{line:801,column:12},end:{line:801,column:16}},{start:{line:801,column:20},end:{line:801,column:29}}],line:801},"112":{loc:{start:{line:811,column:8},end:{line:813,column:9}},type:"if",locations:[{start:{line:811,column:8},end:{line:813,column:9}},{start:{line:811,column:8},end:{line:813,column:9}}],line:811},"113":{loc:{start:{line:818,column:6},end:{line:834,column:7}},type:"if",locations:[{start:{line:818,column:6},end:{line:834,column:7}},{start:{line:818,column:6},end:{line:834,column:7}}],line:818},"114":{loc:{start:{line:819,column:8},end:{line:825,column:9}},type:"if",locations:[{start:{line:819,column:8},end:{line:825,column:9}},{start:{line:819,column:8},end:{line:825,column:9}}],line:819},"115":{loc:{start:{line:822,column:10},end:{line:824,column:11}},type:"if",locations:[{start:{line:822,column:10},end:{line:824,column:11}},{start:{line:822,column:10},end:{line:824,column:11}}],line:822},"116":{loc:{start:{line:822,column:14},end:{line:822,column:31}},type:"binary-expr",locations:[{start:{line:822,column:14},end:{line:822,column:18}},{start:{line:822,column:22},end:{line:822,column:31}}],line:822},"117":{loc:{start:{line:827,column:8},end:{line:833,column:9}},type:"if",locations:[{start:{line:827,column:8},end:{line:833,column:9}},{start:{line:827,column:8},end:{line:833,column:9}}],line:827},"118":{loc:{start:{line:829,column:15},end:{line:833,column:9}},type:"if",locations:[{start:{line:829,column:15},end:{line:833,column:9}},{start:{line:829,column:15},end:{line:833,column:9}}],line:829},"119":{loc:{start:{line:839,column:6},end:{line:841,column:7}},type:"if",locations:[{start:{line:839,column:6},end:{line:841,column:7}},{start:{line:839,column:6},end:{line:841,column:7}}],line:839},"120":{loc:{start:{line:846,column:6},end:{line:851,column:7}},type:"if",locations:[{start:{line:846,column:6},end:{line:851,column:7}},{start:{line:846,column:6},end:{line:851,column:7}}],line:846},"121":{loc:{start:{line:858,column:6},end:{line:860,column:7}},type:"if",locations:[{start:{line:858,column:6},end:{line:860,column:7}},{start:{line:858,column:6},end:{line:860,column:7}}],line:858},"122":{loc:{start:{line:862,column:6},end:{line:864,column:7}},type:"if",locations:[{start:{line:862,column:6},end:{line:864,column:7}},{start:{line:862,column:6},end:{line:864,column:7}}],line:862},"123":{loc:{start:{line:885,column:47},end:{line:885,column:90}},type:"binary-expr",locations:[{start:{line:885,column:47},end:{line:885,column:53}},{start:{line:885,column:57},end:{line:885,column:90}}],line:885},"124":{loc:{start:{line:885,column:92},end:{line:885,column:106}},type:"binary-expr",locations:[{start:{line:885,column:92},end:{line:885,column:101}},{start:{line:885,column:105},end:{line:885,column:106}}],line:885},"125":{loc:{start:{line:897,column:46},end:{line:897,column:65}},type:"default-arg",locations:[{start:{line:897,column:61},end:{line:897,column:65}}],line:897},"126":{loc:{start:{line:899,column:4},end:{line:905,column:5}},type:"if",locations:[{start:{line:899,column:4},end:{line:905,column:5}},{start:{line:899,column:4},end:{line:905,column:5}}],line:899},"127":{loc:{start:{line:910,column:4},end:{line:916,column:5}},type:"if",locations:[{start:{line:910,column:4},end:{line:916,column:5}},{start:{line:910,column:4},end:{line:916,column:5}}],line:910},"128":{loc:{start:{line:920,column:4},end:{line:926,column:5}},type:"if",locations:[{start:{line:920,column:4},end:{line:926,column:5}},{start:{line:920,column:4},end:{line:926,column:5}}],line:920},"129":{loc:{start:{line:937,column:4},end:{line:939,column:5}},type:"if",locations:[{start:{line:937,column:4},end:{line:939,column:5}},{start:{line:937,column:4},end:{line:939,column:5}}],line:937},"130":{loc:{start:{line:942,column:4},end:{line:944,column:5}},type:"if",locations:[{start:{line:942,column:4},end:{line:944,column:5}},{start:{line:942,column:4},end:{line:944,column:5}}],line:942},"131":{loc:{start:{line:956,column:4},end:{line:958,column:5}},type:"if",locations:[{start:{line:956,column:4},end:{line:958,column:5}},{start:{line:956,column:4},end:{line:958,column:5}}],line:956}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},b:{"0":[0,0],"1":[0,0],"2":[0],"3":[0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0,0,0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0],"113":[0,0],"114":[0,0],"115":[0,0],"116":[0,0],"117":[0,0],"118":[0,0],"119":[0,0],"120":[0,0],"121":[0,0],"122":[0,0],"123":[0,0],"124":[0,0],"125":[0],"126":[0,0],"127":[0,0],"128":[0,0],"129":[0,0],"130":[0,0],"131":[0,0]},inputSourceMap:{version:3,sources:["../../src/LiveQuery/ParseLiveQueryServer.js"],names:["ParseLiveQueryServer","constructor","server","config","parseServerConfig","clients","Map","subscriptions","appId","Parse","applicationId","masterKey","keyPairs","key","Object","keys","set","logger","verbose","disableSingleInstance","serverURL","initialize","javaScriptKey","cacheController","cacheTimeout","authCache","LRU","max","maxAge","parseWebSocketServer","ParseWebSocketServer","parseWebsocket","_onConnect","subscriber","ParsePubSub","createSubscriber","subscribe","on","channel","messageStr","message","JSON","parse","e","error","_inflateParseObject","_onAfterSave","_onAfterDelete","currentParseObject","UserRouter","removeHiddenProperties","className","parseObject","_finishFetch","originalParseObject","deletedParseObject","toJSON","classLevelPermissions","id","size","classSubscriptions","get","debug","subscription","values","isSubscriptionMatched","_matchesSubscription","clientId","requestIds","_","entries","clientRequestIds","client","forEach","requestId","acl","getACL","op","_getCLPOperation","query","res","_matchesCLP","isMatched","_matchesACL","event","sessionToken","object","useMasterKey","hasMasterKey","installationId","sendEvent","trigger","auth","getAuthFromClient","user","fromJSON","authData","pushDelete","Client","pushError","parseWebSocket","code","Error","SCRIPT_FAILED","stringify","isOriginalSubscriptionMatched","isCurrentSubscriptionMatched","originalACLCheckingPromise","Promise","resolve","originalACL","currentACLCheckingPromise","currentACL","isOriginalMatched","isCurrentMatched","all","hash","type","original","functionName","charAt","toUpperCase","slice","request","tv4","validate","RequestSchema","_handleConnect","_handleSubscribe","_handleUpdateSubscription","_handleUnsubscribe","info","has","delete","subscriptionInfo","subscriptionInfos","deleteClientSubscription","hasSubscribingClient","getAuthForSessionToken","fromCache","authPromise","then","userId","catch","result","INVALID_SESSION_TOKEN","del","getSubscriptionInfo","aclGroup","push","SchemaController","validatePermission","length","objectId","_verifyACL","token","isSubscriptionSessionTokenMatched","getReadAccess","acl_has_roles","permissionsById","some","startsWith","roleNames","getUserRoles","role","getSessionFromClient","getPublicReadAccess","subscriptionToken","clientSessionToken","_validateKeys","_hasMasterKey","req","pushConnect","validKeyPairs","prototype","hasOwnProperty","call","isValid","secret","authCalled","parseQuery","Query","withJSON","fields","split","where","toPointer","master","subscriptionHash","Subscription","addSubscriptionInfo","addClientSubscription","pushSubscribe","notifyClient","deleteSubscriptionInfo","pushUnsubscribe"],mappings:"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",sourcesContent:["import tv4 from 'tv4';\nimport Parse from 'parse/node';\nimport { Subscription } from './Subscription';\nimport { Client } from './Client';\nimport { ParseWebSocketServer } from './ParseWebSocketServer';\nimport logger from '../logger';\nimport RequestSchema from './RequestSchema';\nimport { matchesQuery, queryHash } from './QueryTools';\nimport { ParsePubSub } from './ParsePubSub';\nimport SchemaController from '../Controllers/SchemaController';\nimport _ from 'lodash';\nimport { v4 as uuidv4 } from 'uuid';\nimport { runLiveQueryEventHandlers, getTrigger, runTrigger, toJSONwithObjects } from '../triggers';\nimport { getAuthForSessionToken, Auth } from '../Auth';\nimport { getCacheController } from '../Controllers';\nimport LRU from 'lru-cache';\nimport UserRouter from '../Routers/UsersRouter';\n\nclass ParseLiveQueryServer {\n  clients: Map;\n  // className -> (queryHash -> subscription)\n  subscriptions: Object;\n  parseWebSocketServer: Object;\n  keyPairs: any;\n  // The subscriber we use to get object update from publisher\n  subscriber: Object;\n\n  constructor(server: any, config: any = {}, parseServerConfig: any = {}) {\n    this.server = server;\n    this.clients = new Map();\n    this.subscriptions = new Map();\n    this.config = config;\n\n    config.appId = config.appId || Parse.applicationId;\n    config.masterKey = config.masterKey || Parse.masterKey;\n\n    // Store keys, convert obj to map\n    const keyPairs = config.keyPairs || {};\n    this.keyPairs = new Map();\n    for (const key of Object.keys(keyPairs)) {\n      this.keyPairs.set(key, keyPairs[key]);\n    }\n    logger.verbose('Support key pairs', this.keyPairs);\n\n    // Initialize Parse\n    Parse.Object.disableSingleInstance();\n    const serverURL = config.serverURL || Parse.serverURL;\n    Parse.serverURL = serverURL;\n    Parse.initialize(config.appId, Parse.javaScriptKey, config.masterKey);\n\n    // The cache controller is a proper cache controller\n    // with access to User and Roles\n    this.cacheController = getCacheController(parseServerConfig);\n\n    config.cacheTimeout = config.cacheTimeout || 5 * 1000; // 5s\n\n    // This auth cache stores the promises for each auth resolution.\n    // The main benefit is to be able to reuse the same user / session token resolution.\n    this.authCache = new LRU({\n      max: 500, // 500 concurrent\n      maxAge: config.cacheTimeout,\n    });\n    // Initialize websocket server\n    this.parseWebSocketServer = new ParseWebSocketServer(\n      server,\n      parseWebsocket => this._onConnect(parseWebsocket),\n      config\n    );\n\n    // Initialize subscriber\n    this.subscriber = ParsePubSub.createSubscriber(config);\n    this.subscriber.subscribe(Parse.applicationId + 'afterSave');\n    this.subscriber.subscribe(Parse.applicationId + 'afterDelete');\n    // Register message handler for subscriber. When publisher get messages, it will publish message\n    // to the subscribers and the handler will be called.\n    this.subscriber.on('message', (channel, messageStr) => {\n      logger.verbose('Subscribe message %j', messageStr);\n      let message;\n      try {\n        message = JSON.parse(messageStr);\n      } catch (e) {\n        logger.error('unable to parse message', messageStr, e);\n        return;\n      }\n      this._inflateParseObject(message);\n      if (channel === Parse.applicationId + 'afterSave') {\n        this._onAfterSave(message);\n      } else if (channel === Parse.applicationId + 'afterDelete') {\n        this._onAfterDelete(message);\n      } else {\n        logger.error('Get message %s from unknown channel %j', message, channel);\n      }\n    });\n  }\n\n  // Message is the JSON object from publisher. Message.currentParseObject is the ParseObject JSON after changes.\n  // Message.originalParseObject is the original ParseObject JSON.\n  _inflateParseObject(message: any): void {\n    // Inflate merged object\n    const currentParseObject = message.currentParseObject;\n    UserRouter.removeHiddenProperties(currentParseObject);\n    let className = currentParseObject.className;\n    let parseObject = new Parse.Object(className);\n    parseObject._finishFetch(currentParseObject);\n    message.currentParseObject = parseObject;\n    // Inflate original object\n    const originalParseObject = message.originalParseObject;\n    if (originalParseObject) {\n      UserRouter.removeHiddenProperties(originalParseObject);\n      className = originalParseObject.className;\n      parseObject = new Parse.Object(className);\n      parseObject._finishFetch(originalParseObject);\n      message.originalParseObject = parseObject;\n    }\n  }\n\n  // Message is the JSON object from publisher after inflated. Message.currentParseObject is the ParseObject after changes.\n  // Message.originalParseObject is the original ParseObject.\n  async _onAfterDelete(message: any): void {\n    logger.verbose(Parse.applicationId + 'afterDelete is triggered');\n\n    let deletedParseObject = message.currentParseObject.toJSON();\n    const classLevelPermissions = message.classLevelPermissions;\n    const className = deletedParseObject.className;\n    logger.verbose('ClassName: %j | ObjectId: %s', className, deletedParseObject.id);\n    logger.verbose('Current client number : %d', this.clients.size);\n\n    const classSubscriptions = this.subscriptions.get(className);\n    if (typeof classSubscriptions === 'undefined') {\n      logger.debug('Can not find subscriptions under this class ' + className);\n      return;\n    }\n\n    for (const subscription of classSubscriptions.values()) {\n      const isSubscriptionMatched = this._matchesSubscription(deletedParseObject, subscription);\n      if (!isSubscriptionMatched) {\n        continue;\n      }\n      for (const [clientId, requestIds] of _.entries(subscription.clientRequestIds)) {\n        const client = this.clients.get(clientId);\n        if (typeof client === 'undefined') {\n          continue;\n        }\n        requestIds.forEach(async requestId => {\n          const acl = message.currentParseObject.getACL();\n          // Check CLP\n          const op = this._getCLPOperation(subscription.query);\n          let res = {};\n          try {\n            await this._matchesCLP(\n              classLevelPermissions,\n              message.currentParseObject,\n              client,\n              requestId,\n              op\n            );\n            const isMatched = await this._matchesACL(acl, client, requestId);\n            if (!isMatched) {\n              return null;\n            }\n            res = {\n              event: 'delete',\n              sessionToken: client.sessionToken,\n              object: deletedParseObject,\n              clients: this.clients.size,\n              subscriptions: this.subscriptions.size,\n              useMasterKey: client.hasMasterKey,\n              installationId: client.installationId,\n              sendEvent: true,\n            };\n            const trigger = getTrigger(className, 'afterEvent', Parse.applicationId);\n            if (trigger) {\n              const auth = await this.getAuthFromClient(client, requestId);\n              if (auth && auth.user) {\n                res.user = auth.user;\n              }\n              if (res.object) {\n                res.object = Parse.Object.fromJSON(res.object);\n              }\n              await runTrigger(trigger, `afterEvent.${className}`, res, auth);\n            }\n            if (!res.sendEvent) {\n              return;\n            }\n            if (res.object && typeof res.object.toJSON === 'function') {\n              deletedParseObject = toJSONwithObjects(res.object, res.object.className || className);\n            }\n            if (\n              (deletedParseObject.className === '_User' ||\n                deletedParseObject.className === '_Session') &&\n              !client.hasMasterKey\n            ) {\n              delete deletedParseObject.sessionToken;\n              delete deletedParseObject.authData;\n            }\n            client.pushDelete(requestId, deletedParseObject);\n          } catch (error) {\n            Client.pushError(\n              client.parseWebSocket,\n              error.code || Parse.Error.SCRIPT_FAILED,\n              error.message || error,\n              false,\n              requestId\n            );\n            logger.error(\n              `Failed running afterLiveQueryEvent on class ${className} for event ${res.event} with session ${res.sessionToken} with:\\n Error: ` +\n                JSON.stringify(error)\n            );\n          }\n        });\n      }\n    }\n  }\n\n  // Message is the JSON object from publisher after inflated. Message.currentParseObject is the ParseObject after changes.\n  // Message.originalParseObject is the original ParseObject.\n  async _onAfterSave(message: any): void {\n    logger.verbose(Parse.applicationId + 'afterSave is triggered');\n\n    let originalParseObject = null;\n    if (message.originalParseObject) {\n      originalParseObject = message.originalParseObject.toJSON();\n    }\n    const classLevelPermissions = message.classLevelPermissions;\n    let currentParseObject = message.currentParseObject.toJSON();\n    const className = currentParseObject.className;\n    logger.verbose('ClassName: %s | ObjectId: %s', className, currentParseObject.id);\n    logger.verbose('Current client number : %d', this.clients.size);\n\n    const classSubscriptions = this.subscriptions.get(className);\n    if (typeof classSubscriptions === 'undefined') {\n      logger.debug('Can not find subscriptions under this class ' + className);\n      return;\n    }\n    for (const subscription of classSubscriptions.values()) {\n      const isOriginalSubscriptionMatched = this._matchesSubscription(\n        originalParseObject,\n        subscription\n      );\n      const isCurrentSubscriptionMatched = this._matchesSubscription(\n        currentParseObject,\n        subscription\n      );\n      for (const [clientId, requestIds] of _.entries(subscription.clientRequestIds)) {\n        const client = this.clients.get(clientId);\n        if (typeof client === 'undefined') {\n          continue;\n        }\n        requestIds.forEach(async requestId => {\n          // Set orignal ParseObject ACL checking promise, if the object does not match\n          // subscription, we do not need to check ACL\n          let originalACLCheckingPromise;\n          if (!isOriginalSubscriptionMatched) {\n            originalACLCheckingPromise = Promise.resolve(false);\n          } else {\n            let originalACL;\n            if (message.originalParseObject) {\n              originalACL = message.originalParseObject.getACL();\n            }\n            originalACLCheckingPromise = this._matchesACL(originalACL, client, requestId);\n          }\n          // Set current ParseObject ACL checking promise, if the object does not match\n          // subscription, we do not need to check ACL\n          let currentACLCheckingPromise;\n          let res = {};\n          if (!isCurrentSubscriptionMatched) {\n            currentACLCheckingPromise = Promise.resolve(false);\n          } else {\n            const currentACL = message.currentParseObject.getACL();\n            currentACLCheckingPromise = this._matchesACL(currentACL, client, requestId);\n          }\n          try {\n            const op = this._getCLPOperation(subscription.query);\n            await this._matchesCLP(\n              classLevelPermissions,\n              message.currentParseObject,\n              client,\n              requestId,\n              op\n            );\n            const [isOriginalMatched, isCurrentMatched] = await Promise.all([\n              originalACLCheckingPromise,\n              currentACLCheckingPromise,\n            ]);\n            logger.verbose(\n              'Original %j | Current %j | Match: %s, %s, %s, %s | Query: %s',\n              originalParseObject,\n              currentParseObject,\n              isOriginalSubscriptionMatched,\n              isCurrentSubscriptionMatched,\n              isOriginalMatched,\n              isCurrentMatched,\n              subscription.hash\n            );\n            // Decide event type\n            let type;\n            if (isOriginalMatched && isCurrentMatched) {\n              type = 'update';\n            } else if (isOriginalMatched && !isCurrentMatched) {\n              type = 'leave';\n            } else if (!isOriginalMatched && isCurrentMatched) {\n              if (originalParseObject) {\n                type = 'enter';\n              } else {\n                type = 'create';\n              }\n            } else {\n              return null;\n            }\n            res = {\n              event: type,\n              sessionToken: client.sessionToken,\n              object: currentParseObject,\n              original: originalParseObject,\n              clients: this.clients.size,\n              subscriptions: this.subscriptions.size,\n              useMasterKey: client.hasMasterKey,\n              installationId: client.installationId,\n              sendEvent: true,\n            };\n            const trigger = getTrigger(className, 'afterEvent', Parse.applicationId);\n            if (trigger) {\n              if (res.object) {\n                res.object = Parse.Object.fromJSON(res.object);\n              }\n              if (res.original) {\n                res.original = Parse.Object.fromJSON(res.original);\n              }\n              const auth = await this.getAuthFromClient(client, requestId);\n              if (auth && auth.user) {\n                res.user = auth.user;\n              }\n              await runTrigger(trigger, `afterEvent.${className}`, res, auth);\n            }\n            if (!res.sendEvent) {\n              return;\n            }\n            if (res.object && typeof res.object.toJSON === 'function') {\n              currentParseObject = toJSONwithObjects(res.object, res.object.className || className);\n            }\n            if (res.original && typeof res.original.toJSON === 'function') {\n              originalParseObject = toJSONwithObjects(\n                res.original,\n                res.original.className || className\n              );\n            }\n            if (\n              (currentParseObject.className === '_User' ||\n                currentParseObject.className === '_Session') &&\n              !client.hasMasterKey\n            ) {\n              delete currentParseObject.sessionToken;\n              delete originalParseObject?.sessionToken;\n              delete currentParseObject.authData;\n              delete originalParseObject?.authData;\n            }\n            const functionName = 'push' + res.event.charAt(0).toUpperCase() + res.event.slice(1);\n            if (client[functionName]) {\n              client[functionName](requestId, currentParseObject, originalParseObject);\n            }\n          } catch (error) {\n            Client.pushError(\n              client.parseWebSocket,\n              error.code || Parse.Error.SCRIPT_FAILED,\n              error.message || error,\n              false,\n              requestId\n            );\n            logger.error(\n              `Failed running afterLiveQueryEvent on class ${className} for event ${res.event} with session ${res.sessionToken} with:\\n Error: ` +\n                JSON.stringify(error)\n            );\n          }\n        });\n      }\n    }\n  }\n\n  _onConnect(parseWebsocket: any): void {\n    parseWebsocket.on('message', request => {\n      if (typeof request === 'string') {\n        try {\n          request = JSON.parse(request);\n        } catch (e) {\n          logger.error('unable to parse request', request, e);\n          return;\n        }\n      }\n      logger.verbose('Request: %j', request);\n\n      // Check whether this request is a valid request, return error directly if not\n      if (\n        !tv4.validate(request, RequestSchema['general']) ||\n        !tv4.validate(request, RequestSchema[request.op])\n      ) {\n        Client.pushError(parseWebsocket, 1, tv4.error.message);\n        logger.error('Connect message error %s', tv4.error.message);\n        return;\n      }\n\n      switch (request.op) {\n        case 'connect':\n          this._handleConnect(parseWebsocket, request);\n          break;\n        case 'subscribe':\n          this._handleSubscribe(parseWebsocket, request);\n          break;\n        case 'update':\n          this._handleUpdateSubscription(parseWebsocket, request);\n          break;\n        case 'unsubscribe':\n          this._handleUnsubscribe(parseWebsocket, request);\n          break;\n        default:\n          Client.pushError(parseWebsocket, 3, 'Get unknown operation');\n          logger.error('Get unknown operation', request.op);\n      }\n    });\n\n    parseWebsocket.on('disconnect', () => {\n      logger.info(`Client disconnect: ${parseWebsocket.clientId}`);\n      const clientId = parseWebsocket.clientId;\n      if (!this.clients.has(clientId)) {\n        runLiveQueryEventHandlers({\n          event: 'ws_disconnect_error',\n          clients: this.clients.size,\n          subscriptions: this.subscriptions.size,\n          error: `Unable to find client ${clientId}`,\n        });\n        logger.error(`Can not find client ${clientId} on disconnect`);\n        return;\n      }\n\n      // Delete client\n      const client = this.clients.get(clientId);\n      this.clients.delete(clientId);\n\n      // Delete client from subscriptions\n      for (const [requestId, subscriptionInfo] of _.entries(client.subscriptionInfos)) {\n        const subscription = subscriptionInfo.subscription;\n        subscription.deleteClientSubscription(clientId, requestId);\n\n        // If there is no client which is subscribing this subscription, remove it from subscriptions\n        const classSubscriptions = this.subscriptions.get(subscription.className);\n        if (!subscription.hasSubscribingClient()) {\n          classSubscriptions.delete(subscription.hash);\n        }\n        // If there is no subscriptions under this class, remove it from subscriptions\n        if (classSubscriptions.size === 0) {\n          this.subscriptions.delete(subscription.className);\n        }\n      }\n\n      logger.verbose('Current clients %d', this.clients.size);\n      logger.verbose('Current subscriptions %d', this.subscriptions.size);\n      runLiveQueryEventHandlers({\n        event: 'ws_disconnect',\n        clients: this.clients.size,\n        subscriptions: this.subscriptions.size,\n        useMasterKey: client.hasMasterKey,\n        installationId: client.installationId,\n        sessionToken: client.sessionToken,\n      });\n    });\n\n    runLiveQueryEventHandlers({\n      event: 'ws_connect',\n      clients: this.clients.size,\n      subscriptions: this.subscriptions.size,\n    });\n  }\n\n  _matchesSubscription(parseObject: any, subscription: any): boolean {\n    // Object is undefined or null, not match\n    if (!parseObject) {\n      return false;\n    }\n    return matchesQuery(parseObject, subscription.query);\n  }\n\n  getAuthForSessionToken(sessionToken: ?string): Promise<{ auth: ?Auth, userId: ?string }> {\n    if (!sessionToken) {\n      return Promise.resolve({});\n    }\n    const fromCache = this.authCache.get(sessionToken);\n    if (fromCache) {\n      return fromCache;\n    }\n    const authPromise = getAuthForSessionToken({\n      cacheController: this.cacheController,\n      sessionToken: sessionToken,\n    })\n      .then(auth => {\n        return { auth, userId: auth && auth.user && auth.user.id };\n      })\n      .catch(error => {\n        // There was an error with the session token\n        const result = {};\n        if (error && error.code === Parse.Error.INVALID_SESSION_TOKEN) {\n          result.error = error;\n          this.authCache.set(sessionToken, Promise.resolve(result), this.config.cacheTimeout);\n        } else {\n          this.authCache.del(sessionToken);\n        }\n        return result;\n      });\n    this.authCache.set(sessionToken, authPromise);\n    return authPromise;\n  }\n\n  async _matchesCLP(\n    classLevelPermissions: ?any,\n    object: any,\n    client: any,\n    requestId: number,\n    op: string\n  ): any {\n    // try to match on user first, less expensive than with roles\n    const subscriptionInfo = client.getSubscriptionInfo(requestId);\n    const aclGroup = ['*'];\n    let userId;\n    if (typeof subscriptionInfo !== 'undefined') {\n      const { userId } = await this.getAuthForSessionToken(subscriptionInfo.sessionToken);\n      if (userId) {\n        aclGroup.push(userId);\n      }\n    }\n    try {\n      await SchemaController.validatePermission(\n        classLevelPermissions,\n        object.className,\n        aclGroup,\n        op\n      );\n      return true;\n    } catch (e) {\n      logger.verbose(`Failed matching CLP for ${object.id} ${userId} ${e}`);\n      return false;\n    }\n    // TODO: handle roles permissions\n    // Object.keys(classLevelPermissions).forEach((key) => {\n    //   const perm = classLevelPermissions[key];\n    //   Object.keys(perm).forEach((key) => {\n    //     if (key.indexOf('role'))\n    //   });\n    // })\n    // // it's rejected here, check the roles\n    // var rolesQuery = new Parse.Query(Parse.Role);\n    // rolesQuery.equalTo(\"users\", user);\n    // return rolesQuery.find({useMasterKey:true});\n  }\n\n  _getCLPOperation(query: any) {\n    return typeof query === 'object' &&\n      Object.keys(query).length == 1 &&\n      typeof query.objectId === 'string'\n      ? 'get'\n      : 'find';\n  }\n\n  async _verifyACL(acl: any, token: string) {\n    if (!token) {\n      return false;\n    }\n\n    const { auth, userId } = await this.getAuthForSessionToken(token);\n\n    // Getting the session token failed\n    // This means that no additional auth is available\n    // At this point, just bail out as no additional visibility can be inferred.\n    if (!auth || !userId) {\n      return false;\n    }\n    const isSubscriptionSessionTokenMatched = acl.getReadAccess(userId);\n    if (isSubscriptionSessionTokenMatched) {\n      return true;\n    }\n\n    // Check if the user has any roles that match the ACL\n    return Promise.resolve()\n      .then(async () => {\n        // Resolve false right away if the acl doesn't have any roles\n        const acl_has_roles = Object.keys(acl.permissionsById).some(key => key.startsWith('role:'));\n        if (!acl_has_roles) {\n          return false;\n        }\n\n        const roleNames = await auth.getUserRoles();\n        // Finally, see if any of the user's roles allow them read access\n        for (const role of roleNames) {\n          // We use getReadAccess as `role` is in the form `role:roleName`\n          if (acl.getReadAccess(role)) {\n            return true;\n          }\n        }\n        return false;\n      })\n      .catch(() => {\n        return false;\n      });\n  }\n\n  async getAuthFromClient(client: any, requestId: number, sessionToken: string) {\n    const getSessionFromClient = () => {\n      const subscriptionInfo = client.getSubscriptionInfo(requestId);\n      if (typeof subscriptionInfo === 'undefined') {\n        return client.sessionToken;\n      }\n      return subscriptionInfo.sessionToken || client.sessionToken;\n    };\n    if (!sessionToken) {\n      sessionToken = getSessionFromClient();\n    }\n    if (!sessionToken) {\n      return;\n    }\n    const { auth } = await this.getAuthForSessionToken(sessionToken);\n    return auth;\n  }\n\n  async _matchesACL(acl: any, client: any, requestId: number): Promise<boolean> {\n    // Return true directly if ACL isn't present, ACL is public read, or client has master key\n    if (!acl || acl.getPublicReadAccess() || client.hasMasterKey) {\n      return true;\n    }\n    // Check subscription sessionToken matches ACL first\n    const subscriptionInfo = client.getSubscriptionInfo(requestId);\n    if (typeof subscriptionInfo === 'undefined') {\n      return false;\n    }\n\n    const subscriptionToken = subscriptionInfo.sessionToken;\n    const clientSessionToken = client.sessionToken;\n\n    if (await this._verifyACL(acl, subscriptionToken)) {\n      return true;\n    }\n\n    if (await this._verifyACL(acl, clientSessionToken)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  async _handleConnect(parseWebsocket: any, request: any): any {\n    if (!this._validateKeys(request, this.keyPairs)) {\n      Client.pushError(parseWebsocket, 4, 'Key in request is not valid');\n      logger.error('Key in request is not valid');\n      return;\n    }\n    const hasMasterKey = this._hasMasterKey(request, this.keyPairs);\n    const clientId = uuidv4();\n    const client = new Client(\n      clientId,\n      parseWebsocket,\n      hasMasterKey,\n      request.sessionToken,\n      request.installationId\n    );\n    try {\n      const req = {\n        client,\n        event: 'connect',\n        clients: this.clients.size,\n        subscriptions: this.subscriptions.size,\n        sessionToken: request.sessionToken,\n        useMasterKey: client.hasMasterKey,\n        installationId: request.installationId,\n      };\n      const trigger = getTrigger('@Connect', 'beforeConnect', Parse.applicationId);\n      if (trigger) {\n        const auth = await this.getAuthFromClient(client, request.requestId, req.sessionToken);\n        if (auth && auth.user) {\n          req.user = auth.user;\n        }\n        await runTrigger(trigger, `beforeConnect.@Connect`, req, auth);\n      }\n      parseWebsocket.clientId = clientId;\n      this.clients.set(parseWebsocket.clientId, client);\n      logger.info(`Create new client: ${parseWebsocket.clientId}`);\n      client.pushConnect();\n      runLiveQueryEventHandlers(req);\n    } catch (error) {\n      Client.pushError(\n        parseWebsocket,\n        error.code || Parse.Error.SCRIPT_FAILED,\n        error.message || error,\n        false\n      );\n      logger.error(\n        `Failed running beforeConnect for session ${request.sessionToken} with:\\n Error: ` +\n          JSON.stringify(error)\n      );\n    }\n  }\n\n  _hasMasterKey(request: any, validKeyPairs: any): boolean {\n    if (!validKeyPairs || validKeyPairs.size == 0 || !validKeyPairs.has('masterKey')) {\n      return false;\n    }\n    if (!request || !Object.prototype.hasOwnProperty.call(request, 'masterKey')) {\n      return false;\n    }\n    return request.masterKey === validKeyPairs.get('masterKey');\n  }\n\n  _validateKeys(request: any, validKeyPairs: any): boolean {\n    if (!validKeyPairs || validKeyPairs.size == 0) {\n      return true;\n    }\n    let isValid = false;\n    for (const [key, secret] of validKeyPairs) {\n      if (!request[key] || request[key] !== secret) {\n        continue;\n      }\n      isValid = true;\n      break;\n    }\n    return isValid;\n  }\n\n  async _handleSubscribe(parseWebsocket: any, request: any): any {\n    // If we can not find this client, return error to client\n    if (!Object.prototype.hasOwnProperty.call(parseWebsocket, 'clientId')) {\n      Client.pushError(\n        parseWebsocket,\n        2,\n        'Can not find this client, make sure you connect to server before subscribing'\n      );\n      logger.error('Can not find this client, make sure you connect to server before subscribing');\n      return;\n    }\n    const client = this.clients.get(parseWebsocket.clientId);\n    const className = request.query.className;\n    let authCalled = false;\n    try {\n      const trigger = getTrigger(className, 'beforeSubscribe', Parse.applicationId);\n      if (trigger) {\n        const auth = await this.getAuthFromClient(client, request.requestId, request.sessionToken);\n        authCalled = true;\n        if (auth && auth.user) {\n          request.user = auth.user;\n        }\n\n        const parseQuery = new Parse.Query(className);\n        parseQuery.withJSON(request.query);\n        request.query = parseQuery;\n        await runTrigger(trigger, `beforeSubscribe.${className}`, request, auth);\n\n        const query = request.query.toJSON();\n        if (query.keys) {\n          query.fields = query.keys.split(',');\n        }\n        request.query = query;\n      }\n\n      if (className === '_Session') {\n        if (!authCalled) {\n          const auth = await this.getAuthFromClient(\n            client,\n            request.requestId,\n            request.sessionToken\n          );\n          if (auth && auth.user) {\n            request.user = auth.user;\n          }\n        }\n        if (request.user) {\n          request.query.where.user = request.user.toPointer();\n        } else if (!request.master) {\n          Client.pushError(\n            parseWebsocket,\n            Parse.Error.INVALID_SESSION_TOKEN,\n            'Invalid session token',\n            false,\n            request.requestId\n          );\n          return;\n        }\n      }\n      // Get subscription from subscriptions, create one if necessary\n      const subscriptionHash = queryHash(request.query);\n      // Add className to subscriptions if necessary\n\n      if (!this.subscriptions.has(className)) {\n        this.subscriptions.set(className, new Map());\n      }\n      const classSubscriptions = this.subscriptions.get(className);\n      let subscription;\n      if (classSubscriptions.has(subscriptionHash)) {\n        subscription = classSubscriptions.get(subscriptionHash);\n      } else {\n        subscription = new Subscription(className, request.query.where, subscriptionHash);\n        classSubscriptions.set(subscriptionHash, subscription);\n      }\n\n      // Add subscriptionInfo to client\n      const subscriptionInfo = {\n        subscription: subscription,\n      };\n      // Add selected fields, sessionToken and installationId for this subscription if necessary\n      if (request.query.fields) {\n        subscriptionInfo.fields = request.query.fields;\n      }\n      if (request.sessionToken) {\n        subscriptionInfo.sessionToken = request.sessionToken;\n      }\n      client.addSubscriptionInfo(request.requestId, subscriptionInfo);\n\n      // Add clientId to subscription\n      subscription.addClientSubscription(parseWebsocket.clientId, request.requestId);\n\n      client.pushSubscribe(request.requestId);\n\n      logger.verbose(\n        `Create client ${parseWebsocket.clientId} new subscription: ${request.requestId}`\n      );\n      logger.verbose('Current client number: %d', this.clients.size);\n      runLiveQueryEventHandlers({\n        client,\n        event: 'subscribe',\n        clients: this.clients.size,\n        subscriptions: this.subscriptions.size,\n        sessionToken: request.sessionToken,\n        useMasterKey: client.hasMasterKey,\n        installationId: client.installationId,\n      });\n    } catch (e) {\n      Client.pushError(\n        parseWebsocket,\n        e.code || Parse.Error.SCRIPT_FAILED,\n        e.message || e,\n        false,\n        request.requestId\n      );\n      logger.error(\n        `Failed running beforeSubscribe on ${className} for session ${request.sessionToken} with:\\n Error: ` +\n          JSON.stringify(e)\n      );\n    }\n  }\n\n  _handleUpdateSubscription(parseWebsocket: any, request: any): any {\n    this._handleUnsubscribe(parseWebsocket, request, false);\n    this._handleSubscribe(parseWebsocket, request);\n  }\n\n  _handleUnsubscribe(parseWebsocket: any, request: any, notifyClient: boolean = true): any {\n    // If we can not find this client, return error to client\n    if (!Object.prototype.hasOwnProperty.call(parseWebsocket, 'clientId')) {\n      Client.pushError(\n        parseWebsocket,\n        2,\n        'Can not find this client, make sure you connect to server before unsubscribing'\n      );\n      logger.error(\n        'Can not find this client, make sure you connect to server before unsubscribing'\n      );\n      return;\n    }\n    const requestId = request.requestId;\n    const client = this.clients.get(parseWebsocket.clientId);\n    if (typeof client === 'undefined') {\n      Client.pushError(\n        parseWebsocket,\n        2,\n        'Cannot find client with clientId ' +\n          parseWebsocket.clientId +\n          '. Make sure you connect to live query server before unsubscribing.'\n      );\n      logger.error('Can not find this client ' + parseWebsocket.clientId);\n      return;\n    }\n\n    const subscriptionInfo = client.getSubscriptionInfo(requestId);\n    if (typeof subscriptionInfo === 'undefined') {\n      Client.pushError(\n        parseWebsocket,\n        2,\n        'Cannot find subscription with clientId ' +\n          parseWebsocket.clientId +\n          ' subscriptionId ' +\n          requestId +\n          '. Make sure you subscribe to live query server before unsubscribing.'\n      );\n      logger.error(\n        'Can not find subscription with clientId ' +\n          parseWebsocket.clientId +\n          ' subscriptionId ' +\n          requestId\n      );\n      return;\n    }\n\n    // Remove subscription from client\n    client.deleteSubscriptionInfo(requestId);\n    // Remove client from subscription\n    const subscription = subscriptionInfo.subscription;\n    const className = subscription.className;\n    subscription.deleteClientSubscription(parseWebsocket.clientId, requestId);\n    // If there is no client which is subscribing this subscription, remove it from subscriptions\n    const classSubscriptions = this.subscriptions.get(className);\n    if (!subscription.hasSubscribingClient()) {\n      classSubscriptions.delete(subscription.hash);\n    }\n    // If there is no subscriptions under this class, remove it from subscriptions\n    if (classSubscriptions.size === 0) {\n      this.subscriptions.delete(className);\n    }\n    runLiveQueryEventHandlers({\n      client,\n      event: 'unsubscribe',\n      clients: this.clients.size,\n      subscriptions: this.subscriptions.size,\n      sessionToken: subscriptionInfo.sessionToken,\n      useMasterKey: client.hasMasterKey,\n      installationId: client.installationId,\n    });\n\n    if (!notifyClient) {\n      return;\n    }\n\n    client.pushUnsubscribe(request.requestId);\n\n    logger.verbose(\n      `Delete client: ${parseWebsocket.clientId} | subscription: ${request.requestId}`\n    );\n  }\n}\n\nexport { ParseLiveQueryServer };\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"dc29efe731df9903e8a9d6c37090df7855094470"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2lbe1hdols=function(){return actualCoverage;};}return actualCoverage;}cov_2lbe1hdols();cov_2lbe1hdols().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2lbe1hdols().s[1]++;exports.ParseLiveQueryServer=void 0;var _tv=(cov_2lbe1hdols().s[2]++,_interopRequireDefault(require("tv4")));var _node=(cov_2lbe1hdols().s[3]++,_interopRequireDefault(require("parse/node")));var _Subscription=(cov_2lbe1hdols().s[4]++,require("./Subscription"));var _Client=(cov_2lbe1hdols().s[5]++,require("./Client"));var _ParseWebSocketServer=(cov_2lbe1hdols().s[6]++,require("./ParseWebSocketServer"));var _logger=(cov_2lbe1hdols().s[7]++,_interopRequireDefault(require("../logger")));var _RequestSchema=(cov_2lbe1hdols().s[8]++,_interopRequireDefault(require("./RequestSchema")));var _QueryTools=(cov_2lbe1hdols().s[9]++,require("./QueryTools"));var _ParsePubSub=(cov_2lbe1hdols().s[10]++,require("./ParsePubSub"));var _SchemaController=(cov_2lbe1hdols().s[11]++,_interopRequireDefault(require("../Controllers/SchemaController")));var _lodash=(cov_2lbe1hdols().s[12]++,_interopRequireDefault(require("lodash")));var _uuid=(cov_2lbe1hdols().s[13]++,require("uuid"));var _triggers=(cov_2lbe1hdols().s[14]++,require("../triggers"));var _Auth=(cov_2lbe1hdols().s[15]++,require("../Auth"));var _Controllers=(cov_2lbe1hdols().s[16]++,require("../Controllers"));var _lruCache=(cov_2lbe1hdols().s[17]++,_interopRequireDefault(require("lru-cache")));var _UsersRouter=(cov_2lbe1hdols().s[18]++,_interopRequireDefault(require("../Routers/UsersRouter")));function _interopRequireDefault(obj){cov_2lbe1hdols().f[0]++;cov_2lbe1hdols().s[19]++;return(cov_2lbe1hdols().b[1][0]++,obj)&&(cov_2lbe1hdols().b[1][1]++,obj.__esModule)?(cov_2lbe1hdols().b[0][0]++,obj):(cov_2lbe1hdols().b[0][1]++,{default:obj});}class ParseLiveQueryServer{// className -> (queryHash -> subscription)
// The subscriber we use to get object update from publisher
constructor(server,config=(cov_2lbe1hdols().b[2][0]++,{}),parseServerConfig=(cov_2lbe1hdols().b[3][0]++,{})){cov_2lbe1hdols().f[1]++;cov_2lbe1hdols().s[20]++;this.server=server;cov_2lbe1hdols().s[21]++;this.clients=new Map();cov_2lbe1hdols().s[22]++;this.subscriptions=new Map();cov_2lbe1hdols().s[23]++;this.config=config;cov_2lbe1hdols().s[24]++;config.appId=(cov_2lbe1hdols().b[4][0]++,config.appId)||(cov_2lbe1hdols().b[4][1]++,_node.default.applicationId);cov_2lbe1hdols().s[25]++;config.masterKey=(cov_2lbe1hdols().b[5][0]++,config.masterKey)||(cov_2lbe1hdols().b[5][1]++,_node.default.masterKey);// Store keys, convert obj to map
const keyPairs=(cov_2lbe1hdols().s[26]++,(cov_2lbe1hdols().b[6][0]++,config.keyPairs)||(cov_2lbe1hdols().b[6][1]++,{}));cov_2lbe1hdols().s[27]++;this.keyPairs=new Map();cov_2lbe1hdols().s[28]++;for(const key of Object.keys(keyPairs)){cov_2lbe1hdols().s[29]++;this.keyPairs.set(key,keyPairs[key]);}cov_2lbe1hdols().s[30]++;_logger.default.verbose('Support key pairs',this.keyPairs);// Initialize Parse
cov_2lbe1hdols().s[31]++;_node.default.Object.disableSingleInstance();const serverURL=(cov_2lbe1hdols().s[32]++,(cov_2lbe1hdols().b[7][0]++,config.serverURL)||(cov_2lbe1hdols().b[7][1]++,_node.default.serverURL));cov_2lbe1hdols().s[33]++;_node.default.serverURL=serverURL;cov_2lbe1hdols().s[34]++;_node.default.initialize(config.appId,_node.default.javaScriptKey,config.masterKey);// The cache controller is a proper cache controller
// with access to User and Roles
cov_2lbe1hdols().s[35]++;this.cacheController=(0,_Controllers.getCacheController)(parseServerConfig);cov_2lbe1hdols().s[36]++;config.cacheTimeout=(cov_2lbe1hdols().b[8][0]++,config.cacheTimeout)||(cov_2lbe1hdols().b[8][1]++,5*1000);// 5s
// This auth cache stores the promises for each auth resolution.
// The main benefit is to be able to reuse the same user / session token resolution.
cov_2lbe1hdols().s[37]++;this.authCache=new _lruCache.default({max:500,// 500 concurrent
maxAge:config.cacheTimeout});// Initialize websocket server
cov_2lbe1hdols().s[38]++;this.parseWebSocketServer=new _ParseWebSocketServer.ParseWebSocketServer(server,parseWebsocket=>{cov_2lbe1hdols().f[2]++;cov_2lbe1hdols().s[39]++;return this._onConnect(parseWebsocket);},config);// Initialize subscriber
cov_2lbe1hdols().s[40]++;this.subscriber=_ParsePubSub.ParsePubSub.createSubscriber(config);cov_2lbe1hdols().s[41]++;this.subscriber.subscribe(_node.default.applicationId+'afterSave');cov_2lbe1hdols().s[42]++;this.subscriber.subscribe(_node.default.applicationId+'afterDelete');// Register message handler for subscriber. When publisher get messages, it will publish message
// to the subscribers and the handler will be called.
cov_2lbe1hdols().s[43]++;this.subscriber.on('message',(channel,messageStr)=>{cov_2lbe1hdols().f[3]++;cov_2lbe1hdols().s[44]++;_logger.default.verbose('Subscribe message %j',messageStr);let message;cov_2lbe1hdols().s[45]++;try{cov_2lbe1hdols().s[46]++;message=JSON.parse(messageStr);}catch(e){cov_2lbe1hdols().s[47]++;_logger.default.error('unable to parse message',messageStr,e);cov_2lbe1hdols().s[48]++;return;}cov_2lbe1hdols().s[49]++;this._inflateParseObject(message);cov_2lbe1hdols().s[50]++;if(channel===_node.default.applicationId+'afterSave'){cov_2lbe1hdols().b[9][0]++;cov_2lbe1hdols().s[51]++;this._onAfterSave(message);}else{cov_2lbe1hdols().b[9][1]++;cov_2lbe1hdols().s[52]++;if(channel===_node.default.applicationId+'afterDelete'){cov_2lbe1hdols().b[10][0]++;cov_2lbe1hdols().s[53]++;this._onAfterDelete(message);}else{cov_2lbe1hdols().b[10][1]++;cov_2lbe1hdols().s[54]++;_logger.default.error('Get message %s from unknown channel %j',message,channel);}}});}// Message is the JSON object from publisher. Message.currentParseObject is the ParseObject JSON after changes.
// Message.originalParseObject is the original ParseObject JSON.
_inflateParseObject(message){cov_2lbe1hdols().f[4]++;// Inflate merged object
const currentParseObject=(cov_2lbe1hdols().s[55]++,message.currentParseObject);cov_2lbe1hdols().s[56]++;_UsersRouter.default.removeHiddenProperties(currentParseObject);let className=(cov_2lbe1hdols().s[57]++,currentParseObject.className);let parseObject=(cov_2lbe1hdols().s[58]++,new _node.default.Object(className));cov_2lbe1hdols().s[59]++;parseObject._finishFetch(currentParseObject);cov_2lbe1hdols().s[60]++;message.currentParseObject=parseObject;// Inflate original object
const originalParseObject=(cov_2lbe1hdols().s[61]++,message.originalParseObject);cov_2lbe1hdols().s[62]++;if(originalParseObject){cov_2lbe1hdols().b[11][0]++;cov_2lbe1hdols().s[63]++;_UsersRouter.default.removeHiddenProperties(originalParseObject);cov_2lbe1hdols().s[64]++;className=originalParseObject.className;cov_2lbe1hdols().s[65]++;parseObject=new _node.default.Object(className);cov_2lbe1hdols().s[66]++;parseObject._finishFetch(originalParseObject);cov_2lbe1hdols().s[67]++;message.originalParseObject=parseObject;}else{cov_2lbe1hdols().b[11][1]++;}}// Message is the JSON object from publisher after inflated. Message.currentParseObject is the ParseObject after changes.
// Message.originalParseObject is the original ParseObject.
async _onAfterDelete(message){cov_2lbe1hdols().f[5]++;cov_2lbe1hdols().s[68]++;_logger.default.verbose(_node.default.applicationId+'afterDelete is triggered');let deletedParseObject=(cov_2lbe1hdols().s[69]++,message.currentParseObject.toJSON());const classLevelPermissions=(cov_2lbe1hdols().s[70]++,message.classLevelPermissions);const className=(cov_2lbe1hdols().s[71]++,deletedParseObject.className);cov_2lbe1hdols().s[72]++;_logger.default.verbose('ClassName: %j | ObjectId: %s',className,deletedParseObject.id);cov_2lbe1hdols().s[73]++;_logger.default.verbose('Current client number : %d',this.clients.size);const classSubscriptions=(cov_2lbe1hdols().s[74]++,this.subscriptions.get(className));cov_2lbe1hdols().s[75]++;if(typeof classSubscriptions==='undefined'){cov_2lbe1hdols().b[12][0]++;cov_2lbe1hdols().s[76]++;_logger.default.debug('Can not find subscriptions under this class '+className);cov_2lbe1hdols().s[77]++;return;}else{cov_2lbe1hdols().b[12][1]++;}cov_2lbe1hdols().s[78]++;for(const subscription of classSubscriptions.values()){const isSubscriptionMatched=(cov_2lbe1hdols().s[79]++,this._matchesSubscription(deletedParseObject,subscription));cov_2lbe1hdols().s[80]++;if(!isSubscriptionMatched){cov_2lbe1hdols().b[13][0]++;cov_2lbe1hdols().s[81]++;continue;}else{cov_2lbe1hdols().b[13][1]++;}cov_2lbe1hdols().s[82]++;for(const[clientId,requestIds]of _lodash.default.entries(subscription.clientRequestIds)){const client=(cov_2lbe1hdols().s[83]++,this.clients.get(clientId));cov_2lbe1hdols().s[84]++;if(typeof client==='undefined'){cov_2lbe1hdols().b[14][0]++;cov_2lbe1hdols().s[85]++;continue;}else{cov_2lbe1hdols().b[14][1]++;}cov_2lbe1hdols().s[86]++;requestIds.forEach(async requestId=>{cov_2lbe1hdols().f[6]++;const acl=(cov_2lbe1hdols().s[87]++,message.currentParseObject.getACL());// Check CLP
const op=(cov_2lbe1hdols().s[88]++,this._getCLPOperation(subscription.query));let res=(cov_2lbe1hdols().s[89]++,{});cov_2lbe1hdols().s[90]++;try{cov_2lbe1hdols().s[91]++;await this._matchesCLP(classLevelPermissions,message.currentParseObject,client,requestId,op);const isMatched=(cov_2lbe1hdols().s[92]++,await this._matchesACL(acl,client,requestId));cov_2lbe1hdols().s[93]++;if(!isMatched){cov_2lbe1hdols().b[15][0]++;cov_2lbe1hdols().s[94]++;return null;}else{cov_2lbe1hdols().b[15][1]++;}cov_2lbe1hdols().s[95]++;res={event:'delete',sessionToken:client.sessionToken,object:deletedParseObject,clients:this.clients.size,subscriptions:this.subscriptions.size,useMasterKey:client.hasMasterKey,installationId:client.installationId,sendEvent:true};const trigger=(cov_2lbe1hdols().s[96]++,(0,_triggers.getTrigger)(className,'afterEvent',_node.default.applicationId));cov_2lbe1hdols().s[97]++;if(trigger){cov_2lbe1hdols().b[16][0]++;const auth=(cov_2lbe1hdols().s[98]++,await this.getAuthFromClient(client,requestId));cov_2lbe1hdols().s[99]++;if((cov_2lbe1hdols().b[18][0]++,auth)&&(cov_2lbe1hdols().b[18][1]++,auth.user)){cov_2lbe1hdols().b[17][0]++;cov_2lbe1hdols().s[100]++;res.user=auth.user;}else{cov_2lbe1hdols().b[17][1]++;}cov_2lbe1hdols().s[101]++;if(res.object){cov_2lbe1hdols().b[19][0]++;cov_2lbe1hdols().s[102]++;res.object=_node.default.Object.fromJSON(res.object);}else{cov_2lbe1hdols().b[19][1]++;}cov_2lbe1hdols().s[103]++;await(0,_triggers.runTrigger)(trigger,`afterEvent.${className}`,res,auth);}else{cov_2lbe1hdols().b[16][1]++;}cov_2lbe1hdols().s[104]++;if(!res.sendEvent){cov_2lbe1hdols().b[20][0]++;cov_2lbe1hdols().s[105]++;return;}else{cov_2lbe1hdols().b[20][1]++;}cov_2lbe1hdols().s[106]++;if((cov_2lbe1hdols().b[22][0]++,res.object)&&(cov_2lbe1hdols().b[22][1]++,typeof res.object.toJSON==='function')){cov_2lbe1hdols().b[21][0]++;cov_2lbe1hdols().s[107]++;deletedParseObject=(0,_triggers.toJSONwithObjects)(res.object,(cov_2lbe1hdols().b[23][0]++,res.object.className)||(cov_2lbe1hdols().b[23][1]++,className));}else{cov_2lbe1hdols().b[21][1]++;}cov_2lbe1hdols().s[108]++;if(((cov_2lbe1hdols().b[25][0]++,deletedParseObject.className==='_User')||(cov_2lbe1hdols().b[25][1]++,deletedParseObject.className==='_Session'))&&(cov_2lbe1hdols().b[25][2]++,!client.hasMasterKey)){cov_2lbe1hdols().b[24][0]++;cov_2lbe1hdols().s[109]++;delete deletedParseObject.sessionToken;cov_2lbe1hdols().s[110]++;delete deletedParseObject.authData;}else{cov_2lbe1hdols().b[24][1]++;}cov_2lbe1hdols().s[111]++;client.pushDelete(requestId,deletedParseObject);}catch(error){cov_2lbe1hdols().s[112]++;_Client.Client.pushError(client.parseWebSocket,(cov_2lbe1hdols().b[26][0]++,error.code)||(cov_2lbe1hdols().b[26][1]++,_node.default.Error.SCRIPT_FAILED),(cov_2lbe1hdols().b[27][0]++,error.message)||(cov_2lbe1hdols().b[27][1]++,error),false,requestId);cov_2lbe1hdols().s[113]++;_logger.default.error(`Failed running afterLiveQueryEvent on class ${className} for event ${res.event} with session ${res.sessionToken} with:\n Error: `+JSON.stringify(error));}});}}}// Message is the JSON object from publisher after inflated. Message.currentParseObject is the ParseObject after changes.
// Message.originalParseObject is the original ParseObject.
async _onAfterSave(message){cov_2lbe1hdols().f[7]++;cov_2lbe1hdols().s[114]++;_logger.default.verbose(_node.default.applicationId+'afterSave is triggered');let originalParseObject=(cov_2lbe1hdols().s[115]++,null);cov_2lbe1hdols().s[116]++;if(message.originalParseObject){cov_2lbe1hdols().b[28][0]++;cov_2lbe1hdols().s[117]++;originalParseObject=message.originalParseObject.toJSON();}else{cov_2lbe1hdols().b[28][1]++;}const classLevelPermissions=(cov_2lbe1hdols().s[118]++,message.classLevelPermissions);let currentParseObject=(cov_2lbe1hdols().s[119]++,message.currentParseObject.toJSON());const className=(cov_2lbe1hdols().s[120]++,currentParseObject.className);cov_2lbe1hdols().s[121]++;_logger.default.verbose('ClassName: %s | ObjectId: %s',className,currentParseObject.id);cov_2lbe1hdols().s[122]++;_logger.default.verbose('Current client number : %d',this.clients.size);const classSubscriptions=(cov_2lbe1hdols().s[123]++,this.subscriptions.get(className));cov_2lbe1hdols().s[124]++;if(typeof classSubscriptions==='undefined'){cov_2lbe1hdols().b[29][0]++;cov_2lbe1hdols().s[125]++;_logger.default.debug('Can not find subscriptions under this class '+className);cov_2lbe1hdols().s[126]++;return;}else{cov_2lbe1hdols().b[29][1]++;}cov_2lbe1hdols().s[127]++;for(const subscription of classSubscriptions.values()){const isOriginalSubscriptionMatched=(cov_2lbe1hdols().s[128]++,this._matchesSubscription(originalParseObject,subscription));const isCurrentSubscriptionMatched=(cov_2lbe1hdols().s[129]++,this._matchesSubscription(currentParseObject,subscription));cov_2lbe1hdols().s[130]++;for(const[clientId,requestIds]of _lodash.default.entries(subscription.clientRequestIds)){const client=(cov_2lbe1hdols().s[131]++,this.clients.get(clientId));cov_2lbe1hdols().s[132]++;if(typeof client==='undefined'){cov_2lbe1hdols().b[30][0]++;cov_2lbe1hdols().s[133]++;continue;}else{cov_2lbe1hdols().b[30][1]++;}cov_2lbe1hdols().s[134]++;requestIds.forEach(async requestId=>{cov_2lbe1hdols().f[8]++;// Set orignal ParseObject ACL checking promise, if the object does not match
// subscription, we do not need to check ACL
let originalACLCheckingPromise;cov_2lbe1hdols().s[135]++;if(!isOriginalSubscriptionMatched){cov_2lbe1hdols().b[31][0]++;cov_2lbe1hdols().s[136]++;originalACLCheckingPromise=Promise.resolve(false);}else{cov_2lbe1hdols().b[31][1]++;let originalACL;cov_2lbe1hdols().s[137]++;if(message.originalParseObject){cov_2lbe1hdols().b[32][0]++;cov_2lbe1hdols().s[138]++;originalACL=message.originalParseObject.getACL();}else{cov_2lbe1hdols().b[32][1]++;}cov_2lbe1hdols().s[139]++;originalACLCheckingPromise=this._matchesACL(originalACL,client,requestId);}// Set current ParseObject ACL checking promise, if the object does not match
// subscription, we do not need to check ACL
let currentACLCheckingPromise;let res=(cov_2lbe1hdols().s[140]++,{});cov_2lbe1hdols().s[141]++;if(!isCurrentSubscriptionMatched){cov_2lbe1hdols().b[33][0]++;cov_2lbe1hdols().s[142]++;currentACLCheckingPromise=Promise.resolve(false);}else{cov_2lbe1hdols().b[33][1]++;const currentACL=(cov_2lbe1hdols().s[143]++,message.currentParseObject.getACL());cov_2lbe1hdols().s[144]++;currentACLCheckingPromise=this._matchesACL(currentACL,client,requestId);}cov_2lbe1hdols().s[145]++;try{const op=(cov_2lbe1hdols().s[146]++,this._getCLPOperation(subscription.query));cov_2lbe1hdols().s[147]++;await this._matchesCLP(classLevelPermissions,message.currentParseObject,client,requestId,op);const[isOriginalMatched,isCurrentMatched]=(cov_2lbe1hdols().s[148]++,await Promise.all([originalACLCheckingPromise,currentACLCheckingPromise]));cov_2lbe1hdols().s[149]++;_logger.default.verbose('Original %j | Current %j | Match: %s, %s, %s, %s | Query: %s',originalParseObject,currentParseObject,isOriginalSubscriptionMatched,isCurrentSubscriptionMatched,isOriginalMatched,isCurrentMatched,subscription.hash);// Decide event type
let type;cov_2lbe1hdols().s[150]++;if((cov_2lbe1hdols().b[35][0]++,isOriginalMatched)&&(cov_2lbe1hdols().b[35][1]++,isCurrentMatched)){cov_2lbe1hdols().b[34][0]++;cov_2lbe1hdols().s[151]++;type='update';}else{cov_2lbe1hdols().b[34][1]++;cov_2lbe1hdols().s[152]++;if((cov_2lbe1hdols().b[37][0]++,isOriginalMatched)&&(cov_2lbe1hdols().b[37][1]++,!isCurrentMatched)){cov_2lbe1hdols().b[36][0]++;cov_2lbe1hdols().s[153]++;type='leave';}else{cov_2lbe1hdols().b[36][1]++;cov_2lbe1hdols().s[154]++;if((cov_2lbe1hdols().b[39][0]++,!isOriginalMatched)&&(cov_2lbe1hdols().b[39][1]++,isCurrentMatched)){cov_2lbe1hdols().b[38][0]++;cov_2lbe1hdols().s[155]++;if(originalParseObject){cov_2lbe1hdols().b[40][0]++;cov_2lbe1hdols().s[156]++;type='enter';}else{cov_2lbe1hdols().b[40][1]++;cov_2lbe1hdols().s[157]++;type='create';}}else{cov_2lbe1hdols().b[38][1]++;cov_2lbe1hdols().s[158]++;return null;}}}cov_2lbe1hdols().s[159]++;res={event:type,sessionToken:client.sessionToken,object:currentParseObject,original:originalParseObject,clients:this.clients.size,subscriptions:this.subscriptions.size,useMasterKey:client.hasMasterKey,installationId:client.installationId,sendEvent:true};const trigger=(cov_2lbe1hdols().s[160]++,(0,_triggers.getTrigger)(className,'afterEvent',_node.default.applicationId));cov_2lbe1hdols().s[161]++;if(trigger){cov_2lbe1hdols().b[41][0]++;cov_2lbe1hdols().s[162]++;if(res.object){cov_2lbe1hdols().b[42][0]++;cov_2lbe1hdols().s[163]++;res.object=_node.default.Object.fromJSON(res.object);}else{cov_2lbe1hdols().b[42][1]++;}cov_2lbe1hdols().s[164]++;if(res.original){cov_2lbe1hdols().b[43][0]++;cov_2lbe1hdols().s[165]++;res.original=_node.default.Object.fromJSON(res.original);}else{cov_2lbe1hdols().b[43][1]++;}const auth=(cov_2lbe1hdols().s[166]++,await this.getAuthFromClient(client,requestId));cov_2lbe1hdols().s[167]++;if((cov_2lbe1hdols().b[45][0]++,auth)&&(cov_2lbe1hdols().b[45][1]++,auth.user)){cov_2lbe1hdols().b[44][0]++;cov_2lbe1hdols().s[168]++;res.user=auth.user;}else{cov_2lbe1hdols().b[44][1]++;}cov_2lbe1hdols().s[169]++;await(0,_triggers.runTrigger)(trigger,`afterEvent.${className}`,res,auth);}else{cov_2lbe1hdols().b[41][1]++;}cov_2lbe1hdols().s[170]++;if(!res.sendEvent){cov_2lbe1hdols().b[46][0]++;cov_2lbe1hdols().s[171]++;return;}else{cov_2lbe1hdols().b[46][1]++;}cov_2lbe1hdols().s[172]++;if((cov_2lbe1hdols().b[48][0]++,res.object)&&(cov_2lbe1hdols().b[48][1]++,typeof res.object.toJSON==='function')){cov_2lbe1hdols().b[47][0]++;cov_2lbe1hdols().s[173]++;currentParseObject=(0,_triggers.toJSONwithObjects)(res.object,(cov_2lbe1hdols().b[49][0]++,res.object.className)||(cov_2lbe1hdols().b[49][1]++,className));}else{cov_2lbe1hdols().b[47][1]++;}cov_2lbe1hdols().s[174]++;if((cov_2lbe1hdols().b[51][0]++,res.original)&&(cov_2lbe1hdols().b[51][1]++,typeof res.original.toJSON==='function')){cov_2lbe1hdols().b[50][0]++;cov_2lbe1hdols().s[175]++;originalParseObject=(0,_triggers.toJSONwithObjects)(res.original,(cov_2lbe1hdols().b[52][0]++,res.original.className)||(cov_2lbe1hdols().b[52][1]++,className));}else{cov_2lbe1hdols().b[50][1]++;}cov_2lbe1hdols().s[176]++;if(((cov_2lbe1hdols().b[54][0]++,currentParseObject.className==='_User')||(cov_2lbe1hdols().b[54][1]++,currentParseObject.className==='_Session'))&&(cov_2lbe1hdols().b[54][2]++,!client.hasMasterKey)){cov_2lbe1hdols().b[53][0]++;var _originalParseObject,_originalParseObject2;cov_2lbe1hdols().s[177]++;delete currentParseObject.sessionToken;cov_2lbe1hdols().s[178]++;(cov_2lbe1hdols().b[56][0]++,(_originalParseObject=originalParseObject)===null)||(cov_2lbe1hdols().b[56][1]++,_originalParseObject===void 0)?(cov_2lbe1hdols().b[55][0]++,true):(cov_2lbe1hdols().b[55][1]++,delete _originalParseObject.sessionToken);cov_2lbe1hdols().s[179]++;delete currentParseObject.authData;cov_2lbe1hdols().s[180]++;(cov_2lbe1hdols().b[58][0]++,(_originalParseObject2=originalParseObject)===null)||(cov_2lbe1hdols().b[58][1]++,_originalParseObject2===void 0)?(cov_2lbe1hdols().b[57][0]++,true):(cov_2lbe1hdols().b[57][1]++,delete _originalParseObject2.authData);}else{cov_2lbe1hdols().b[53][1]++;}const functionName=(cov_2lbe1hdols().s[181]++,'push'+res.event.charAt(0).toUpperCase()+res.event.slice(1));cov_2lbe1hdols().s[182]++;if(client[functionName]){cov_2lbe1hdols().b[59][0]++;cov_2lbe1hdols().s[183]++;client[functionName](requestId,currentParseObject,originalParseObject);}else{cov_2lbe1hdols().b[59][1]++;}}catch(error){cov_2lbe1hdols().s[184]++;_Client.Client.pushError(client.parseWebSocket,(cov_2lbe1hdols().b[60][0]++,error.code)||(cov_2lbe1hdols().b[60][1]++,_node.default.Error.SCRIPT_FAILED),(cov_2lbe1hdols().b[61][0]++,error.message)||(cov_2lbe1hdols().b[61][1]++,error),false,requestId);cov_2lbe1hdols().s[185]++;_logger.default.error(`Failed running afterLiveQueryEvent on class ${className} for event ${res.event} with session ${res.sessionToken} with:\n Error: `+JSON.stringify(error));}});}}}_onConnect(parseWebsocket){cov_2lbe1hdols().f[9]++;cov_2lbe1hdols().s[186]++;parseWebsocket.on('message',request=>{cov_2lbe1hdols().f[10]++;cov_2lbe1hdols().s[187]++;if(typeof request==='string'){cov_2lbe1hdols().b[62][0]++;cov_2lbe1hdols().s[188]++;try{cov_2lbe1hdols().s[189]++;request=JSON.parse(request);}catch(e){cov_2lbe1hdols().s[190]++;_logger.default.error('unable to parse request',request,e);cov_2lbe1hdols().s[191]++;return;}}else{cov_2lbe1hdols().b[62][1]++;}cov_2lbe1hdols().s[192]++;_logger.default.verbose('Request: %j',request);// Check whether this request is a valid request, return error directly if not
cov_2lbe1hdols().s[193]++;if((cov_2lbe1hdols().b[64][0]++,!_tv.default.validate(request,_RequestSchema.default['general']))||(cov_2lbe1hdols().b[64][1]++,!_tv.default.validate(request,_RequestSchema.default[request.op]))){cov_2lbe1hdols().b[63][0]++;cov_2lbe1hdols().s[194]++;_Client.Client.pushError(parseWebsocket,1,_tv.default.error.message);cov_2lbe1hdols().s[195]++;_logger.default.error('Connect message error %s',_tv.default.error.message);cov_2lbe1hdols().s[196]++;return;}else{cov_2lbe1hdols().b[63][1]++;}cov_2lbe1hdols().s[197]++;switch(request.op){case'connect':cov_2lbe1hdols().b[65][0]++;cov_2lbe1hdols().s[198]++;this._handleConnect(parseWebsocket,request);cov_2lbe1hdols().s[199]++;break;case'subscribe':cov_2lbe1hdols().b[65][1]++;cov_2lbe1hdols().s[200]++;this._handleSubscribe(parseWebsocket,request);cov_2lbe1hdols().s[201]++;break;case'update':cov_2lbe1hdols().b[65][2]++;cov_2lbe1hdols().s[202]++;this._handleUpdateSubscription(parseWebsocket,request);cov_2lbe1hdols().s[203]++;break;case'unsubscribe':cov_2lbe1hdols().b[65][3]++;cov_2lbe1hdols().s[204]++;this._handleUnsubscribe(parseWebsocket,request);cov_2lbe1hdols().s[205]++;break;default:cov_2lbe1hdols().b[65][4]++;cov_2lbe1hdols().s[206]++;_Client.Client.pushError(parseWebsocket,3,'Get unknown operation');cov_2lbe1hdols().s[207]++;_logger.default.error('Get unknown operation',request.op);}});cov_2lbe1hdols().s[208]++;parseWebsocket.on('disconnect',()=>{cov_2lbe1hdols().f[11]++;cov_2lbe1hdols().s[209]++;_logger.default.info(`Client disconnect: ${parseWebsocket.clientId}`);const clientId=(cov_2lbe1hdols().s[210]++,parseWebsocket.clientId);cov_2lbe1hdols().s[211]++;if(!this.clients.has(clientId)){cov_2lbe1hdols().b[66][0]++;cov_2lbe1hdols().s[212]++;(0,_triggers.runLiveQueryEventHandlers)({event:'ws_disconnect_error',clients:this.clients.size,subscriptions:this.subscriptions.size,error:`Unable to find client ${clientId}`});cov_2lbe1hdols().s[213]++;_logger.default.error(`Can not find client ${clientId} on disconnect`);cov_2lbe1hdols().s[214]++;return;}else{cov_2lbe1hdols().b[66][1]++;}// Delete client
const client=(cov_2lbe1hdols().s[215]++,this.clients.get(clientId));cov_2lbe1hdols().s[216]++;this.clients.delete(clientId);// Delete client from subscriptions
cov_2lbe1hdols().s[217]++;for(const[requestId,subscriptionInfo]of _lodash.default.entries(client.subscriptionInfos)){const subscription=(cov_2lbe1hdols().s[218]++,subscriptionInfo.subscription);cov_2lbe1hdols().s[219]++;subscription.deleteClientSubscription(clientId,requestId);// If there is no client which is subscribing this subscription, remove it from subscriptions
const classSubscriptions=(cov_2lbe1hdols().s[220]++,this.subscriptions.get(subscription.className));cov_2lbe1hdols().s[221]++;if(!subscription.hasSubscribingClient()){cov_2lbe1hdols().b[67][0]++;cov_2lbe1hdols().s[222]++;classSubscriptions.delete(subscription.hash);}else{cov_2lbe1hdols().b[67][1]++;}// If there is no subscriptions under this class, remove it from subscriptions
cov_2lbe1hdols().s[223]++;if(classSubscriptions.size===0){cov_2lbe1hdols().b[68][0]++;cov_2lbe1hdols().s[224]++;this.subscriptions.delete(subscription.className);}else{cov_2lbe1hdols().b[68][1]++;}}cov_2lbe1hdols().s[225]++;_logger.default.verbose('Current clients %d',this.clients.size);cov_2lbe1hdols().s[226]++;_logger.default.verbose('Current subscriptions %d',this.subscriptions.size);cov_2lbe1hdols().s[227]++;(0,_triggers.runLiveQueryEventHandlers)({event:'ws_disconnect',clients:this.clients.size,subscriptions:this.subscriptions.size,useMasterKey:client.hasMasterKey,installationId:client.installationId,sessionToken:client.sessionToken});});cov_2lbe1hdols().s[228]++;(0,_triggers.runLiveQueryEventHandlers)({event:'ws_connect',clients:this.clients.size,subscriptions:this.subscriptions.size});}_matchesSubscription(parseObject,subscription){cov_2lbe1hdols().f[12]++;cov_2lbe1hdols().s[229]++;// Object is undefined or null, not match
if(!parseObject){cov_2lbe1hdols().b[69][0]++;cov_2lbe1hdols().s[230]++;return false;}else{cov_2lbe1hdols().b[69][1]++;}cov_2lbe1hdols().s[231]++;return(0,_QueryTools.matchesQuery)(parseObject,subscription.query);}getAuthForSessionToken(sessionToken){cov_2lbe1hdols().f[13]++;cov_2lbe1hdols().s[232]++;if(!sessionToken){cov_2lbe1hdols().b[70][0]++;cov_2lbe1hdols().s[233]++;return Promise.resolve({});}else{cov_2lbe1hdols().b[70][1]++;}const fromCache=(cov_2lbe1hdols().s[234]++,this.authCache.get(sessionToken));cov_2lbe1hdols().s[235]++;if(fromCache){cov_2lbe1hdols().b[71][0]++;cov_2lbe1hdols().s[236]++;return fromCache;}else{cov_2lbe1hdols().b[71][1]++;}const authPromise=(cov_2lbe1hdols().s[237]++,(0,_Auth.getAuthForSessionToken)({cacheController:this.cacheController,sessionToken:sessionToken}).then(auth=>{cov_2lbe1hdols().f[14]++;cov_2lbe1hdols().s[238]++;return{auth,userId:(cov_2lbe1hdols().b[72][0]++,auth)&&(cov_2lbe1hdols().b[72][1]++,auth.user)&&(cov_2lbe1hdols().b[72][2]++,auth.user.id)};}).catch(error=>{cov_2lbe1hdols().f[15]++;// There was an error with the session token
const result=(cov_2lbe1hdols().s[239]++,{});cov_2lbe1hdols().s[240]++;if((cov_2lbe1hdols().b[74][0]++,error)&&(cov_2lbe1hdols().b[74][1]++,error.code===_node.default.Error.INVALID_SESSION_TOKEN)){cov_2lbe1hdols().b[73][0]++;cov_2lbe1hdols().s[241]++;result.error=error;cov_2lbe1hdols().s[242]++;this.authCache.set(sessionToken,Promise.resolve(result),this.config.cacheTimeout);}else{cov_2lbe1hdols().b[73][1]++;cov_2lbe1hdols().s[243]++;this.authCache.del(sessionToken);}cov_2lbe1hdols().s[244]++;return result;}));cov_2lbe1hdols().s[245]++;this.authCache.set(sessionToken,authPromise);cov_2lbe1hdols().s[246]++;return authPromise;}async _matchesCLP(classLevelPermissions,object,client,requestId,op){cov_2lbe1hdols().f[16]++;// try to match on user first, less expensive than with roles
const subscriptionInfo=(cov_2lbe1hdols().s[247]++,client.getSubscriptionInfo(requestId));const aclGroup=(cov_2lbe1hdols().s[248]++,['*']);let userId;cov_2lbe1hdols().s[249]++;if(typeof subscriptionInfo!=='undefined'){cov_2lbe1hdols().b[75][0]++;const{userId}=(cov_2lbe1hdols().s[250]++,await this.getAuthForSessionToken(subscriptionInfo.sessionToken));cov_2lbe1hdols().s[251]++;if(userId){cov_2lbe1hdols().b[76][0]++;cov_2lbe1hdols().s[252]++;aclGroup.push(userId);}else{cov_2lbe1hdols().b[76][1]++;}}else{cov_2lbe1hdols().b[75][1]++;}cov_2lbe1hdols().s[253]++;try{cov_2lbe1hdols().s[254]++;await _SchemaController.default.validatePermission(classLevelPermissions,object.className,aclGroup,op);cov_2lbe1hdols().s[255]++;return true;}catch(e){cov_2lbe1hdols().s[256]++;_logger.default.verbose(`Failed matching CLP for ${object.id} ${userId} ${e}`);cov_2lbe1hdols().s[257]++;return false;}// TODO: handle roles permissions
// Object.keys(classLevelPermissions).forEach((key) => {
//   const perm = classLevelPermissions[key];
//   Object.keys(perm).forEach((key) => {
//     if (key.indexOf('role'))
//   });
// })
// // it's rejected here, check the roles
// var rolesQuery = new Parse.Query(Parse.Role);
// rolesQuery.equalTo("users", user);
// return rolesQuery.find({useMasterKey:true});
}_getCLPOperation(query){cov_2lbe1hdols().f[17]++;cov_2lbe1hdols().s[258]++;return(cov_2lbe1hdols().b[78][0]++,typeof query==='object')&&(cov_2lbe1hdols().b[78][1]++,Object.keys(query).length==1)&&(cov_2lbe1hdols().b[78][2]++,typeof query.objectId==='string')?(cov_2lbe1hdols().b[77][0]++,'get'):(cov_2lbe1hdols().b[77][1]++,'find');}async _verifyACL(acl,token){cov_2lbe1hdols().f[18]++;cov_2lbe1hdols().s[259]++;if(!token){cov_2lbe1hdols().b[79][0]++;cov_2lbe1hdols().s[260]++;return false;}else{cov_2lbe1hdols().b[79][1]++;}const{auth,userId}=(cov_2lbe1hdols().s[261]++,await this.getAuthForSessionToken(token));// Getting the session token failed
// This means that no additional auth is available
// At this point, just bail out as no additional visibility can be inferred.
cov_2lbe1hdols().s[262]++;if((cov_2lbe1hdols().b[81][0]++,!auth)||(cov_2lbe1hdols().b[81][1]++,!userId)){cov_2lbe1hdols().b[80][0]++;cov_2lbe1hdols().s[263]++;return false;}else{cov_2lbe1hdols().b[80][1]++;}const isSubscriptionSessionTokenMatched=(cov_2lbe1hdols().s[264]++,acl.getReadAccess(userId));cov_2lbe1hdols().s[265]++;if(isSubscriptionSessionTokenMatched){cov_2lbe1hdols().b[82][0]++;cov_2lbe1hdols().s[266]++;return true;}else{cov_2lbe1hdols().b[82][1]++;}// Check if the user has any roles that match the ACL
cov_2lbe1hdols().s[267]++;return Promise.resolve().then(async()=>{cov_2lbe1hdols().f[19]++;// Resolve false right away if the acl doesn't have any roles
const acl_has_roles=(cov_2lbe1hdols().s[268]++,Object.keys(acl.permissionsById).some(key=>{cov_2lbe1hdols().f[20]++;cov_2lbe1hdols().s[269]++;return key.startsWith('role:');}));cov_2lbe1hdols().s[270]++;if(!acl_has_roles){cov_2lbe1hdols().b[83][0]++;cov_2lbe1hdols().s[271]++;return false;}else{cov_2lbe1hdols().b[83][1]++;}const roleNames=(cov_2lbe1hdols().s[272]++,await auth.getUserRoles());// Finally, see if any of the user's roles allow them read access
cov_2lbe1hdols().s[273]++;for(const role of roleNames){cov_2lbe1hdols().s[274]++;// We use getReadAccess as `role` is in the form `role:roleName`
if(acl.getReadAccess(role)){cov_2lbe1hdols().b[84][0]++;cov_2lbe1hdols().s[275]++;return true;}else{cov_2lbe1hdols().b[84][1]++;}}cov_2lbe1hdols().s[276]++;return false;}).catch(()=>{cov_2lbe1hdols().f[21]++;cov_2lbe1hdols().s[277]++;return false;});}async getAuthFromClient(client,requestId,sessionToken){cov_2lbe1hdols().f[22]++;cov_2lbe1hdols().s[278]++;const getSessionFromClient=()=>{cov_2lbe1hdols().f[23]++;const subscriptionInfo=(cov_2lbe1hdols().s[279]++,client.getSubscriptionInfo(requestId));cov_2lbe1hdols().s[280]++;if(typeof subscriptionInfo==='undefined'){cov_2lbe1hdols().b[85][0]++;cov_2lbe1hdols().s[281]++;return client.sessionToken;}else{cov_2lbe1hdols().b[85][1]++;}cov_2lbe1hdols().s[282]++;return(cov_2lbe1hdols().b[86][0]++,subscriptionInfo.sessionToken)||(cov_2lbe1hdols().b[86][1]++,client.sessionToken);};cov_2lbe1hdols().s[283]++;if(!sessionToken){cov_2lbe1hdols().b[87][0]++;cov_2lbe1hdols().s[284]++;sessionToken=getSessionFromClient();}else{cov_2lbe1hdols().b[87][1]++;}cov_2lbe1hdols().s[285]++;if(!sessionToken){cov_2lbe1hdols().b[88][0]++;cov_2lbe1hdols().s[286]++;return;}else{cov_2lbe1hdols().b[88][1]++;}const{auth}=(cov_2lbe1hdols().s[287]++,await this.getAuthForSessionToken(sessionToken));cov_2lbe1hdols().s[288]++;return auth;}async _matchesACL(acl,client,requestId){cov_2lbe1hdols().f[24]++;cov_2lbe1hdols().s[289]++;// Return true directly if ACL isn't present, ACL is public read, or client has master key
if((cov_2lbe1hdols().b[90][0]++,!acl)||(cov_2lbe1hdols().b[90][1]++,acl.getPublicReadAccess())||(cov_2lbe1hdols().b[90][2]++,client.hasMasterKey)){cov_2lbe1hdols().b[89][0]++;cov_2lbe1hdols().s[290]++;return true;}else{cov_2lbe1hdols().b[89][1]++;}// Check subscription sessionToken matches ACL first
const subscriptionInfo=(cov_2lbe1hdols().s[291]++,client.getSubscriptionInfo(requestId));cov_2lbe1hdols().s[292]++;if(typeof subscriptionInfo==='undefined'){cov_2lbe1hdols().b[91][0]++;cov_2lbe1hdols().s[293]++;return false;}else{cov_2lbe1hdols().b[91][1]++;}const subscriptionToken=(cov_2lbe1hdols().s[294]++,subscriptionInfo.sessionToken);const clientSessionToken=(cov_2lbe1hdols().s[295]++,client.sessionToken);cov_2lbe1hdols().s[296]++;if(await this._verifyACL(acl,subscriptionToken)){cov_2lbe1hdols().b[92][0]++;cov_2lbe1hdols().s[297]++;return true;}else{cov_2lbe1hdols().b[92][1]++;}cov_2lbe1hdols().s[298]++;if(await this._verifyACL(acl,clientSessionToken)){cov_2lbe1hdols().b[93][0]++;cov_2lbe1hdols().s[299]++;return true;}else{cov_2lbe1hdols().b[93][1]++;}cov_2lbe1hdols().s[300]++;return false;}async _handleConnect(parseWebsocket,request){cov_2lbe1hdols().f[25]++;cov_2lbe1hdols().s[301]++;if(!this._validateKeys(request,this.keyPairs)){cov_2lbe1hdols().b[94][0]++;cov_2lbe1hdols().s[302]++;_Client.Client.pushError(parseWebsocket,4,'Key in request is not valid');cov_2lbe1hdols().s[303]++;_logger.default.error('Key in request is not valid');cov_2lbe1hdols().s[304]++;return;}else{cov_2lbe1hdols().b[94][1]++;}const hasMasterKey=(cov_2lbe1hdols().s[305]++,this._hasMasterKey(request,this.keyPairs));const clientId=(cov_2lbe1hdols().s[306]++,(0,_uuid.v4)());const client=(cov_2lbe1hdols().s[307]++,new _Client.Client(clientId,parseWebsocket,hasMasterKey,request.sessionToken,request.installationId));cov_2lbe1hdols().s[308]++;try{const req=(cov_2lbe1hdols().s[309]++,{client,event:'connect',clients:this.clients.size,subscriptions:this.subscriptions.size,sessionToken:request.sessionToken,useMasterKey:client.hasMasterKey,installationId:request.installationId});const trigger=(cov_2lbe1hdols().s[310]++,(0,_triggers.getTrigger)('@Connect','beforeConnect',_node.default.applicationId));cov_2lbe1hdols().s[311]++;if(trigger){cov_2lbe1hdols().b[95][0]++;const auth=(cov_2lbe1hdols().s[312]++,await this.getAuthFromClient(client,request.requestId,req.sessionToken));cov_2lbe1hdols().s[313]++;if((cov_2lbe1hdols().b[97][0]++,auth)&&(cov_2lbe1hdols().b[97][1]++,auth.user)){cov_2lbe1hdols().b[96][0]++;cov_2lbe1hdols().s[314]++;req.user=auth.user;}else{cov_2lbe1hdols().b[96][1]++;}cov_2lbe1hdols().s[315]++;await(0,_triggers.runTrigger)(trigger,`beforeConnect.@Connect`,req,auth);}else{cov_2lbe1hdols().b[95][1]++;}cov_2lbe1hdols().s[316]++;parseWebsocket.clientId=clientId;cov_2lbe1hdols().s[317]++;this.clients.set(parseWebsocket.clientId,client);cov_2lbe1hdols().s[318]++;_logger.default.info(`Create new client: ${parseWebsocket.clientId}`);cov_2lbe1hdols().s[319]++;client.pushConnect();cov_2lbe1hdols().s[320]++;(0,_triggers.runLiveQueryEventHandlers)(req);}catch(error){cov_2lbe1hdols().s[321]++;_Client.Client.pushError(parseWebsocket,(cov_2lbe1hdols().b[98][0]++,error.code)||(cov_2lbe1hdols().b[98][1]++,_node.default.Error.SCRIPT_FAILED),(cov_2lbe1hdols().b[99][0]++,error.message)||(cov_2lbe1hdols().b[99][1]++,error),false);cov_2lbe1hdols().s[322]++;_logger.default.error(`Failed running beforeConnect for session ${request.sessionToken} with:\n Error: `+JSON.stringify(error));}}_hasMasterKey(request,validKeyPairs){cov_2lbe1hdols().f[26]++;cov_2lbe1hdols().s[323]++;if((cov_2lbe1hdols().b[101][0]++,!validKeyPairs)||(cov_2lbe1hdols().b[101][1]++,validKeyPairs.size==0)||(cov_2lbe1hdols().b[101][2]++,!validKeyPairs.has('masterKey'))){cov_2lbe1hdols().b[100][0]++;cov_2lbe1hdols().s[324]++;return false;}else{cov_2lbe1hdols().b[100][1]++;}cov_2lbe1hdols().s[325]++;if((cov_2lbe1hdols().b[103][0]++,!request)||(cov_2lbe1hdols().b[103][1]++,!Object.prototype.hasOwnProperty.call(request,'masterKey'))){cov_2lbe1hdols().b[102][0]++;cov_2lbe1hdols().s[326]++;return false;}else{cov_2lbe1hdols().b[102][1]++;}cov_2lbe1hdols().s[327]++;return request.masterKey===validKeyPairs.get('masterKey');}_validateKeys(request,validKeyPairs){cov_2lbe1hdols().f[27]++;cov_2lbe1hdols().s[328]++;if((cov_2lbe1hdols().b[105][0]++,!validKeyPairs)||(cov_2lbe1hdols().b[105][1]++,validKeyPairs.size==0)){cov_2lbe1hdols().b[104][0]++;cov_2lbe1hdols().s[329]++;return true;}else{cov_2lbe1hdols().b[104][1]++;}let isValid=(cov_2lbe1hdols().s[330]++,false);cov_2lbe1hdols().s[331]++;for(const[key,secret]of validKeyPairs){cov_2lbe1hdols().s[332]++;if((cov_2lbe1hdols().b[107][0]++,!request[key])||(cov_2lbe1hdols().b[107][1]++,request[key]!==secret)){cov_2lbe1hdols().b[106][0]++;cov_2lbe1hdols().s[333]++;continue;}else{cov_2lbe1hdols().b[106][1]++;}cov_2lbe1hdols().s[334]++;isValid=true;cov_2lbe1hdols().s[335]++;break;}cov_2lbe1hdols().s[336]++;return isValid;}async _handleSubscribe(parseWebsocket,request){cov_2lbe1hdols().f[28]++;cov_2lbe1hdols().s[337]++;// If we can not find this client, return error to client
if(!Object.prototype.hasOwnProperty.call(parseWebsocket,'clientId')){cov_2lbe1hdols().b[108][0]++;cov_2lbe1hdols().s[338]++;_Client.Client.pushError(parseWebsocket,2,'Can not find this client, make sure you connect to server before subscribing');cov_2lbe1hdols().s[339]++;_logger.default.error('Can not find this client, make sure you connect to server before subscribing');cov_2lbe1hdols().s[340]++;return;}else{cov_2lbe1hdols().b[108][1]++;}const client=(cov_2lbe1hdols().s[341]++,this.clients.get(parseWebsocket.clientId));const className=(cov_2lbe1hdols().s[342]++,request.query.className);let authCalled=(cov_2lbe1hdols().s[343]++,false);cov_2lbe1hdols().s[344]++;try{const trigger=(cov_2lbe1hdols().s[345]++,(0,_triggers.getTrigger)(className,'beforeSubscribe',_node.default.applicationId));cov_2lbe1hdols().s[346]++;if(trigger){cov_2lbe1hdols().b[109][0]++;const auth=(cov_2lbe1hdols().s[347]++,await this.getAuthFromClient(client,request.requestId,request.sessionToken));cov_2lbe1hdols().s[348]++;authCalled=true;cov_2lbe1hdols().s[349]++;if((cov_2lbe1hdols().b[111][0]++,auth)&&(cov_2lbe1hdols().b[111][1]++,auth.user)){cov_2lbe1hdols().b[110][0]++;cov_2lbe1hdols().s[350]++;request.user=auth.user;}else{cov_2lbe1hdols().b[110][1]++;}const parseQuery=(cov_2lbe1hdols().s[351]++,new _node.default.Query(className));cov_2lbe1hdols().s[352]++;parseQuery.withJSON(request.query);cov_2lbe1hdols().s[353]++;request.query=parseQuery;cov_2lbe1hdols().s[354]++;await(0,_triggers.runTrigger)(trigger,`beforeSubscribe.${className}`,request,auth);const query=(cov_2lbe1hdols().s[355]++,request.query.toJSON());cov_2lbe1hdols().s[356]++;if(query.keys){cov_2lbe1hdols().b[112][0]++;cov_2lbe1hdols().s[357]++;query.fields=query.keys.split(',');}else{cov_2lbe1hdols().b[112][1]++;}cov_2lbe1hdols().s[358]++;request.query=query;}else{cov_2lbe1hdols().b[109][1]++;}cov_2lbe1hdols().s[359]++;if(className==='_Session'){cov_2lbe1hdols().b[113][0]++;cov_2lbe1hdols().s[360]++;if(!authCalled){cov_2lbe1hdols().b[114][0]++;const auth=(cov_2lbe1hdols().s[361]++,await this.getAuthFromClient(client,request.requestId,request.sessionToken));cov_2lbe1hdols().s[362]++;if((cov_2lbe1hdols().b[116][0]++,auth)&&(cov_2lbe1hdols().b[116][1]++,auth.user)){cov_2lbe1hdols().b[115][0]++;cov_2lbe1hdols().s[363]++;request.user=auth.user;}else{cov_2lbe1hdols().b[115][1]++;}}else{cov_2lbe1hdols().b[114][1]++;}cov_2lbe1hdols().s[364]++;if(request.user){cov_2lbe1hdols().b[117][0]++;cov_2lbe1hdols().s[365]++;request.query.where.user=request.user.toPointer();}else{cov_2lbe1hdols().b[117][1]++;cov_2lbe1hdols().s[366]++;if(!request.master){cov_2lbe1hdols().b[118][0]++;cov_2lbe1hdols().s[367]++;_Client.Client.pushError(parseWebsocket,_node.default.Error.INVALID_SESSION_TOKEN,'Invalid session token',false,request.requestId);cov_2lbe1hdols().s[368]++;return;}else{cov_2lbe1hdols().b[118][1]++;}}}else{cov_2lbe1hdols().b[113][1]++;}// Get subscription from subscriptions, create one if necessary
const subscriptionHash=(cov_2lbe1hdols().s[369]++,(0,_QueryTools.queryHash)(request.query));// Add className to subscriptions if necessary
cov_2lbe1hdols().s[370]++;if(!this.subscriptions.has(className)){cov_2lbe1hdols().b[119][0]++;cov_2lbe1hdols().s[371]++;this.subscriptions.set(className,new Map());}else{cov_2lbe1hdols().b[119][1]++;}const classSubscriptions=(cov_2lbe1hdols().s[372]++,this.subscriptions.get(className));let subscription;cov_2lbe1hdols().s[373]++;if(classSubscriptions.has(subscriptionHash)){cov_2lbe1hdols().b[120][0]++;cov_2lbe1hdols().s[374]++;subscription=classSubscriptions.get(subscriptionHash);}else{cov_2lbe1hdols().b[120][1]++;cov_2lbe1hdols().s[375]++;subscription=new _Subscription.Subscription(className,request.query.where,subscriptionHash);cov_2lbe1hdols().s[376]++;classSubscriptions.set(subscriptionHash,subscription);}// Add subscriptionInfo to client
const subscriptionInfo=(cov_2lbe1hdols().s[377]++,{subscription:subscription});// Add selected fields, sessionToken and installationId for this subscription if necessary
cov_2lbe1hdols().s[378]++;if(request.query.fields){cov_2lbe1hdols().b[121][0]++;cov_2lbe1hdols().s[379]++;subscriptionInfo.fields=request.query.fields;}else{cov_2lbe1hdols().b[121][1]++;}cov_2lbe1hdols().s[380]++;if(request.sessionToken){cov_2lbe1hdols().b[122][0]++;cov_2lbe1hdols().s[381]++;subscriptionInfo.sessionToken=request.sessionToken;}else{cov_2lbe1hdols().b[122][1]++;}cov_2lbe1hdols().s[382]++;client.addSubscriptionInfo(request.requestId,subscriptionInfo);// Add clientId to subscription
cov_2lbe1hdols().s[383]++;subscription.addClientSubscription(parseWebsocket.clientId,request.requestId);cov_2lbe1hdols().s[384]++;client.pushSubscribe(request.requestId);cov_2lbe1hdols().s[385]++;_logger.default.verbose(`Create client ${parseWebsocket.clientId} new subscription: ${request.requestId}`);cov_2lbe1hdols().s[386]++;_logger.default.verbose('Current client number: %d',this.clients.size);cov_2lbe1hdols().s[387]++;(0,_triggers.runLiveQueryEventHandlers)({client,event:'subscribe',clients:this.clients.size,subscriptions:this.subscriptions.size,sessionToken:request.sessionToken,useMasterKey:client.hasMasterKey,installationId:client.installationId});}catch(e){cov_2lbe1hdols().s[388]++;_Client.Client.pushError(parseWebsocket,(cov_2lbe1hdols().b[123][0]++,e.code)||(cov_2lbe1hdols().b[123][1]++,_node.default.Error.SCRIPT_FAILED),(cov_2lbe1hdols().b[124][0]++,e.message)||(cov_2lbe1hdols().b[124][1]++,e),false,request.requestId);cov_2lbe1hdols().s[389]++;_logger.default.error(`Failed running beforeSubscribe on ${className} for session ${request.sessionToken} with:\n Error: `+JSON.stringify(e));}}_handleUpdateSubscription(parseWebsocket,request){cov_2lbe1hdols().f[29]++;cov_2lbe1hdols().s[390]++;this._handleUnsubscribe(parseWebsocket,request,false);cov_2lbe1hdols().s[391]++;this._handleSubscribe(parseWebsocket,request);}_handleUnsubscribe(parseWebsocket,request,notifyClient=(cov_2lbe1hdols().b[125][0]++,true)){cov_2lbe1hdols().f[30]++;cov_2lbe1hdols().s[392]++;// If we can not find this client, return error to client
if(!Object.prototype.hasOwnProperty.call(parseWebsocket,'clientId')){cov_2lbe1hdols().b[126][0]++;cov_2lbe1hdols().s[393]++;_Client.Client.pushError(parseWebsocket,2,'Can not find this client, make sure you connect to server before unsubscribing');cov_2lbe1hdols().s[394]++;_logger.default.error('Can not find this client, make sure you connect to server before unsubscribing');cov_2lbe1hdols().s[395]++;return;}else{cov_2lbe1hdols().b[126][1]++;}const requestId=(cov_2lbe1hdols().s[396]++,request.requestId);const client=(cov_2lbe1hdols().s[397]++,this.clients.get(parseWebsocket.clientId));cov_2lbe1hdols().s[398]++;if(typeof client==='undefined'){cov_2lbe1hdols().b[127][0]++;cov_2lbe1hdols().s[399]++;_Client.Client.pushError(parseWebsocket,2,'Cannot find client with clientId '+parseWebsocket.clientId+'. Make sure you connect to live query server before unsubscribing.');cov_2lbe1hdols().s[400]++;_logger.default.error('Can not find this client '+parseWebsocket.clientId);cov_2lbe1hdols().s[401]++;return;}else{cov_2lbe1hdols().b[127][1]++;}const subscriptionInfo=(cov_2lbe1hdols().s[402]++,client.getSubscriptionInfo(requestId));cov_2lbe1hdols().s[403]++;if(typeof subscriptionInfo==='undefined'){cov_2lbe1hdols().b[128][0]++;cov_2lbe1hdols().s[404]++;_Client.Client.pushError(parseWebsocket,2,'Cannot find subscription with clientId '+parseWebsocket.clientId+' subscriptionId '+requestId+'. Make sure you subscribe to live query server before unsubscribing.');cov_2lbe1hdols().s[405]++;_logger.default.error('Can not find subscription with clientId '+parseWebsocket.clientId+' subscriptionId '+requestId);cov_2lbe1hdols().s[406]++;return;}else{cov_2lbe1hdols().b[128][1]++;}// Remove subscription from client
cov_2lbe1hdols().s[407]++;client.deleteSubscriptionInfo(requestId);// Remove client from subscription
const subscription=(cov_2lbe1hdols().s[408]++,subscriptionInfo.subscription);const className=(cov_2lbe1hdols().s[409]++,subscription.className);cov_2lbe1hdols().s[410]++;subscription.deleteClientSubscription(parseWebsocket.clientId,requestId);// If there is no client which is subscribing this subscription, remove it from subscriptions
const classSubscriptions=(cov_2lbe1hdols().s[411]++,this.subscriptions.get(className));cov_2lbe1hdols().s[412]++;if(!subscription.hasSubscribingClient()){cov_2lbe1hdols().b[129][0]++;cov_2lbe1hdols().s[413]++;classSubscriptions.delete(subscription.hash);}else{cov_2lbe1hdols().b[129][1]++;}// If there is no subscriptions under this class, remove it from subscriptions
cov_2lbe1hdols().s[414]++;if(classSubscriptions.size===0){cov_2lbe1hdols().b[130][0]++;cov_2lbe1hdols().s[415]++;this.subscriptions.delete(className);}else{cov_2lbe1hdols().b[130][1]++;}cov_2lbe1hdols().s[416]++;(0,_triggers.runLiveQueryEventHandlers)({client,event:'unsubscribe',clients:this.clients.size,subscriptions:this.subscriptions.size,sessionToken:subscriptionInfo.sessionToken,useMasterKey:client.hasMasterKey,installationId:client.installationId});cov_2lbe1hdols().s[417]++;if(!notifyClient){cov_2lbe1hdols().b[131][0]++;cov_2lbe1hdols().s[418]++;return;}else{cov_2lbe1hdols().b[131][1]++;}cov_2lbe1hdols().s[419]++;client.pushUnsubscribe(request.requestId);cov_2lbe1hdols().s[420]++;_logger.default.verbose(`Delete client: ${parseWebsocket.clientId} | subscription: ${request.requestId}`);}}cov_2lbe1hdols().s[421]++;exports.ParseLiveQueryServer=ParseLiveQueryServer;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,