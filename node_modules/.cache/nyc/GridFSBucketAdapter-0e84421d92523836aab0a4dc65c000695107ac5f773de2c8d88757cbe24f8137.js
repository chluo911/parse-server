"use strict";function cov_1fhecapiq2(){var path="/parse-server/lib/Adapters/Files/GridFSBucketAdapter.js";var hash="5204b069e50bc948645136629a90f36907797761";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Adapters/Files/GridFSBucketAdapter.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:55}},"2":{start:{line:8,column:15},end:{line:8,column:33}},"3":{start:{line:10,column:20},end:{line:10,column:45}},"4":{start:{line:12,column:16},end:{line:12,column:65}},"5":{start:{line:14,column:39},end:{line:14,column:93}},"6":{start:{line:24,column:15},end:{line:24,column:32}},"7":{start:{line:28,column:4},end:{line:28,column:12}},"8":{start:{line:29,column:4},end:{line:29,column:41}},"9":{start:{line:30,column:4},end:{line:30,column:36}},"10":{start:{line:31,column:4},end:{line:31,column:152}},"11":{start:{line:32,column:32},end:{line:35,column:5}},"12":{start:{line:36,column:4},end:{line:36,column:74}},"13":{start:{line:40,column:4},end:{line:45,column:5}},"14":{start:{line:41,column:6},end:{line:44,column:9}},"15":{start:{line:42,column:8},end:{line:42,column:30}},"16":{start:{line:43,column:8},end:{line:43,column:50}},"17":{start:{line:47,column:4},end:{line:47,column:35}},"18":{start:{line:51,column:4},end:{line:51,column:81}},"19":{start:{line:51,column:44},end:{line:51,column:79}},"20":{start:{line:57,column:19},end:{line:57,column:42}},"21":{start:{line:58,column:19},end:{line:60,column:6}},"22":{start:{line:62,column:4},end:{line:75,column:5}},"23":{start:{line:63,column:6},end:{line:72,column:7}},"24":{start:{line:64,column:19},end:{line:64,column:41}},"25":{start:{line:65,column:23},end:{line:65,column:86}},"26":{start:{line:66,column:32},end:{line:66,column:109}},"27":{start:{line:67,column:8},end:{line:67,column:44}},"28":{start:{line:69,column:8},end:{line:71,column:11}},"29":{start:{line:70,column:10},end:{line:70,column:29}},"30":{start:{line:74,column:6},end:{line:74,column:31}},"31":{start:{line:77,column:4},end:{line:77,column:17}},"32":{start:{line:78,column:4},end:{line:81,column:7}},"33":{start:{line:79,column:6},end:{line:79,column:35}},"34":{start:{line:80,column:6},end:{line:80,column:33}},"35":{start:{line:85,column:19},end:{line:85,column:42}},"36":{start:{line:86,column:22},end:{line:88,column:16}},"37":{start:{line:90,column:4},end:{line:92,column:5}},"38":{start:{line:91,column:6},end:{line:91,column:38}},"39":{start:{line:94,column:4},end:{line:96,column:8}},"40":{start:{line:95,column:6},end:{line:95,column:36}},"41":{start:{line:100,column:19},end:{line:100,column:42}},"42":{start:{line:101,column:19},end:{line:101,column:60}},"43":{start:{line:102,column:4},end:{line:102,column:18}},"44":{start:{line:103,column:4},end:{line:132,column:7}},"45":{start:{line:104,column:21},end:{line:104,column:23}},"46":{start:{line:105,column:6},end:{line:107,column:9}},"47":{start:{line:106,column:8},end:{line:106,column:26}},"48":{start:{line:108,column:6},end:{line:128,column:9}},"49":{start:{line:109,column:21},end:{line:109,column:42}},"50":{start:{line:111,column:8},end:{line:125,column:9}},"51":{start:{line:112,column:10},end:{line:124,column:11}},"52":{start:{line:113,column:36},end:{line:113,column:52}},"53":{start:{line:114,column:31},end:{line:114,column:47}},"54":{start:{line:115,column:28},end:{line:115,column:55}},"55":{start:{line:116,column:23},end:{line:116,column:62}},"56":{start:{line:117,column:30},end:{line:117,column:55}},"57":{start:{line:118,column:29},end:{line:118,column:94}},"58":{start:{line:119,column:12},end:{line:119,column:41}},"59":{start:{line:120,column:30},end:{line:120,column:91}},"60":{start:{line:121,column:12},end:{line:121,column:38}},"61":{start:{line:123,column:12},end:{line:123,column:31}},"62":{start:{line:127,column:8},end:{line:127,column:22}},"63":{start:{line:129,column:6},end:{line:131,column:9}},"64":{start:{line:130,column:8},end:{line:130,column:20}},"65":{start:{line:136,column:20},end:{line:136,column:22}},"66":{start:{line:137,column:28},end:{line:137,column:30}},"67":{start:{line:138,column:19},end:{line:138,column:42}},"68":{start:{line:140,column:4},end:{line:144,column:5}},"69":{start:{line:141,column:6},end:{line:141,column:105}},"70":{start:{line:143,column:6},end:{line:143,column:89}},"71":{start:{line:146,column:4},end:{line:153,column:5}},"72":{start:{line:147,column:6},end:{line:147,column:36}},"73":{start:{line:149,column:32},end:{line:149,column:61}},"74":{start:{line:150,column:6},end:{line:152,column:9}},"75":{start:{line:151,column:8},end:{line:151,column:38}},"76":{start:{line:155,column:4},end:{line:197,column:7}},"77":{start:{line:156,column:32},end:{line:156,column:41}},"78":{start:{line:157,column:29},end:{line:157,column:31}},"79":{start:{line:158,column:26},end:{line:158,column:42}},"80":{start:{line:159,column:26},end:{line:159,column:27}},"81":{start:{line:160,column:6},end:{line:196,column:9}},"82":{start:{line:161,column:8},end:{line:195,column:11}},"83":{start:{line:163,column:10},end:{line:185,column:13}},"84":{start:{line:164,column:12},end:{line:164,column:44}},"85":{start:{line:165,column:12},end:{line:167,column:15}},"86":{start:{line:166,column:14},end:{line:166,column:40}},"87":{start:{line:168,column:12},end:{line:168,column:31}},"88":{start:{line:170,column:12},end:{line:175,column:13}},"89":{start:{line:171,column:14},end:{line:174,column:17}},"90":{start:{line:177,column:12},end:{line:177,column:31}},"91":{start:{line:179,column:12},end:{line:184,column:13}},"92":{start:{line:180,column:14},end:{line:183,column:17}},"93":{start:{line:187,column:10},end:{line:187,column:29}},"94":{start:{line:189,column:10},end:{line:194,column:11}},"95":{start:{line:190,column:12},end:{line:193,column:15}},"96":{start:{line:201,column:4},end:{line:201,column:96}},"97":{start:{line:205,column:19},end:{line:205,column:42}},"98":{start:{line:206,column:18},end:{line:208,column:16}},"99":{start:{line:210,column:4},end:{line:212,column:5}},"100":{start:{line:211,column:6},end:{line:211,column:16}},"101":{start:{line:216,column:8},end:{line:216,column:16}},"102":{start:{line:217,column:4},end:{line:219,column:6}},"103":{start:{line:223,column:19},end:{line:223,column:42}},"104":{start:{line:224,column:18},end:{line:226,column:16}},"105":{start:{line:228,column:4},end:{line:230,column:5}},"106":{start:{line:229,column:6},end:{line:229,column:38}},"107":{start:{line:232,column:18},end:{line:232,column:67}},"108":{start:{line:233,column:25},end:{line:233,column:33}},"109":{start:{line:234,column:23},end:{line:234,column:31}},"110":{start:{line:235,column:18},end:{line:235,column:44}},"111":{start:{line:236,column:16},end:{line:236,column:75}},"112":{start:{line:237,column:4},end:{line:242,column:7}},"113":{start:{line:243,column:19},end:{line:243,column:60}},"114":{start:{line:244,column:4},end:{line:244,column:24}},"115":{start:{line:245,column:4},end:{line:247,column:7}},"116":{start:{line:246,column:6},end:{line:246,column:23}},"117":{start:{line:248,column:4},end:{line:250,column:7}},"118":{start:{line:249,column:6},end:{line:249,column:26}},"119":{start:{line:251,column:4},end:{line:253,column:7}},"120":{start:{line:252,column:6},end:{line:252,column:16}},"121":{start:{line:257,column:4},end:{line:259,column:5}},"122":{start:{line:258,column:6},end:{line:258,column:31}},"123":{start:{line:261,column:4},end:{line:261,column:37}},"124":{start:{line:265,column:4},end:{line:265,column:57}},"125":{start:{line:270,column:0},end:{line:270,column:50}},"126":{start:{line:271,column:15},end:{line:271,column:34}},"127":{start:{line:272,column:0},end:{line:272,column:27}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:14,column:9},end:{line:14,column:31}},loc:{start:{line:14,column:37},end:{line:14,column:95}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:27,column:2},end:{line:27,column:3}},loc:{start:{line:27,column:114},end:{line:37,column:3}},line:27},"2":{name:"(anonymous_2)",decl:{start:{line:39,column:2},end:{line:39,column:3}},loc:{start:{line:39,column:13},end:{line:48,column:3}},line:39},"3":{name:"(anonymous_3)",decl:{start:{line:41,column:105},end:{line:41,column:106}},loc:{start:{line:41,column:115},end:{line:44,column:7}},line:41},"4":{name:"(anonymous_4)",decl:{start:{line:50,column:2},end:{line:50,column:3}},loc:{start:{line:50,column:15},end:{line:52,column:3}},line:50},"5":{name:"(anonymous_5)",decl:{start:{line:51,column:32},end:{line:51,column:33}},loc:{start:{line:51,column:44},end:{line:51,column:79}},line:51},"6":{name:"(anonymous_6)",decl:{start:{line:56,column:2},end:{line:56,column:3}},loc:{start:{line:56,column:62},end:{line:82,column:3}},line:56},"7":{name:"(anonymous_7)",decl:{start:{line:69,column:27},end:{line:69,column:28}},loc:{start:{line:69,column:48},end:{line:71,column:9}},line:69},"8":{name:"(anonymous_8)",decl:{start:{line:78,column:23},end:{line:78,column:24}},loc:{start:{line:78,column:44},end:{line:81,column:5}},line:78},"9":{name:"(anonymous_9)",decl:{start:{line:84,column:2},end:{line:84,column:3}},loc:{start:{line:84,column:29},end:{line:97,column:3}},line:84},"10":{name:"(anonymous_10)",decl:{start:{line:94,column:37},end:{line:94,column:38}},loc:{start:{line:94,column:44},end:{line:96,column:5}},line:94},"11":{name:"(anonymous_11)",decl:{start:{line:99,column:2},end:{line:99,column:3}},loc:{start:{line:99,column:30},end:{line:133,column:3}},line:99},"12":{name:"(anonymous_12)",decl:{start:{line:103,column:23},end:{line:103,column:24}},loc:{start:{line:103,column:44},end:{line:132,column:5}},line:103},"13":{name:"(anonymous_13)",decl:{start:{line:105,column:24},end:{line:105,column:25}},loc:{start:{line:105,column:32},end:{line:107,column:7}},line:105},"14":{name:"(anonymous_14)",decl:{start:{line:108,column:23},end:{line:108,column:24}},loc:{start:{line:108,column:29},end:{line:128,column:7}},line:108},"15":{name:"(anonymous_15)",decl:{start:{line:129,column:25},end:{line:129,column:26}},loc:{start:{line:129,column:32},end:{line:131,column:7}},line:129},"16":{name:"(anonymous_16)",decl:{start:{line:135,column:2},end:{line:135,column:3}},loc:{start:{line:135,column:42},end:{line:198,column:3}},line:135},"17":{name:"(anonymous_17)",decl:{start:{line:150,column:32},end:{line:150,column:33}},loc:{start:{line:150,column:40},end:{line:152,column:7}},line:150},"18":{name:"(anonymous_18)",decl:{start:{line:155,column:23},end:{line:155,column:24}},loc:{start:{line:155,column:34},end:{line:197,column:5}},line:155},"19":{name:"(anonymous_19)",decl:{start:{line:160,column:24},end:{line:160,column:25}},loc:{start:{line:160,column:36},end:{line:196,column:7}},line:160},"20":{name:"(anonymous_20)",decl:{start:{line:161,column:53},end:{line:161,column:54}},loc:{start:{line:161,column:70},end:{line:186,column:9}},line:161},"21":{name:"(anonymous_21)",decl:{start:{line:163,column:56},end:{line:163,column:57}},loc:{start:{line:163,column:62},end:{line:176,column:11}},line:163},"22":{name:"(anonymous_22)",decl:{start:{line:165,column:61},end:{line:165,column:62}},loc:{start:{line:165,column:78},end:{line:167,column:13}},line:165},"23":{name:"(anonymous_23)",decl:{start:{line:176,column:19},end:{line:176,column:20}},loc:{start:{line:176,column:25},end:{line:185,column:11}},line:176},"24":{name:"(anonymous_24)",decl:{start:{line:186,column:17},end:{line:186,column:18}},loc:{start:{line:186,column:23},end:{line:195,column:9}},line:186},"25":{name:"(anonymous_25)",decl:{start:{line:200,column:2},end:{line:200,column:3}},loc:{start:{line:200,column:36},end:{line:202,column:3}},line:200},"26":{name:"(anonymous_26)",decl:{start:{line:204,column:2},end:{line:204,column:3}},loc:{start:{line:204,column:30},end:{line:220,column:3}},line:204},"27":{name:"(anonymous_27)",decl:{start:{line:222,column:2},end:{line:222,column:3}},loc:{start:{line:222,column:58},end:{line:254,column:3}},line:222},"28":{name:"(anonymous_28)",decl:{start:{line:245,column:22},end:{line:245,column:23}},loc:{start:{line:245,column:31},end:{line:247,column:5}},line:245},"29":{name:"(anonymous_29)",decl:{start:{line:248,column:23},end:{line:248,column:24}},loc:{start:{line:248,column:29},end:{line:250,column:5}},line:248},"30":{name:"(anonymous_30)",decl:{start:{line:251,column:21},end:{line:251,column:22}},loc:{start:{line:251,column:27},end:{line:253,column:5}},line:251},"31":{name:"(anonymous_31)",decl:{start:{line:256,column:2},end:{line:256,column:3}},loc:{start:{line:256,column:19},end:{line:262,column:3}},line:256},"32":{name:"(anonymous_32)",decl:{start:{line:264,column:2},end:{line:264,column:3}},loc:{start:{line:264,column:29},end:{line:266,column:3}},line:264}},branchMap:{"0":{loc:{start:{line:14,column:46},end:{line:14,column:92}},type:"cond-expr",locations:[{start:{line:14,column:70},end:{line:14,column:73}},{start:{line:14,column:76},end:{line:14,column:92}}],line:14},"1":{loc:{start:{line:14,column:46},end:{line:14,column:67}},type:"binary-expr",locations:[{start:{line:14,column:46},end:{line:14,column:49}},{start:{line:14,column:53},end:{line:14,column:67}}],line:14},"2":{loc:{start:{line:27,column:14},end:{line:27,column:66}},type:"default-arg",locations:[{start:{line:27,column:33},end:{line:27,column:66}}],line:27},"3":{loc:{start:{line:27,column:68},end:{line:27,column:85}},type:"default-arg",locations:[{start:{line:27,column:83},end:{line:27,column:85}}],line:27},"4":{loc:{start:{line:27,column:87},end:{line:27,column:112}},type:"default-arg",locations:[{start:{line:27,column:103},end:{line:27,column:112}}],line:27},"5":{loc:{start:{line:31,column:26},end:{line:31,column:151}},type:"cond-expr",locations:[{start:{line:31,column:56},end:{line:31,column:144}},{start:{line:31,column:147},end:{line:31,column:151}}],line:31},"6":{loc:{start:{line:40,column:4},end:{line:45,column:5}},type:"if",locations:[{start:{line:40,column:4},end:{line:45,column:5}},{start:{line:40,column:4},end:{line:45,column:5}}],line:40},"7":{loc:{start:{line:56,column:48},end:{line:56,column:60}},type:"default-arg",locations:[{start:{line:56,column:58},end:{line:56,column:60}}],line:56},"8":{loc:{start:{line:62,column:4},end:{line:75,column:5}},type:"if",locations:[{start:{line:62,column:4},end:{line:75,column:5}},{start:{line:62,column:4},end:{line:75,column:5}}],line:62},"9":{loc:{start:{line:90,column:4},end:{line:92,column:5}},type:"if",locations:[{start:{line:90,column:4},end:{line:92,column:5}},{start:{line:90,column:4},end:{line:92,column:5}}],line:90},"10":{loc:{start:{line:111,column:8},end:{line:125,column:9}},type:"if",locations:[{start:{line:111,column:8},end:{line:125,column:9}},{start:{line:111,column:8},end:{line:125,column:9}}],line:111},"11":{loc:{start:{line:135,column:28},end:{line:135,column:40}},type:"default-arg",locations:[{start:{line:135,column:38},end:{line:135,column:40}}],line:135},"12":{loc:{start:{line:140,column:4},end:{line:144,column:5}},type:"if",locations:[{start:{line:140,column:4},end:{line:144,column:5}},{start:{line:140,column:4},end:{line:144,column:5}}],line:140},"13":{loc:{start:{line:146,column:4},end:{line:153,column:5}},type:"if",locations:[{start:{line:146,column:4},end:{line:153,column:5}},{start:{line:146,column:4},end:{line:153,column:5}}],line:146},"14":{loc:{start:{line:170,column:12},end:{line:175,column:13}},type:"if",locations:[{start:{line:170,column:12},end:{line:175,column:13}},{start:{line:170,column:12},end:{line:175,column:13}}],line:170},"15":{loc:{start:{line:179,column:12},end:{line:184,column:13}},type:"if",locations:[{start:{line:179,column:12},end:{line:184,column:13}},{start:{line:179,column:12},end:{line:184,column:13}}],line:179},"16":{loc:{start:{line:189,column:10},end:{line:194,column:11}},type:"if",locations:[{start:{line:189,column:10},end:{line:194,column:11}},{start:{line:189,column:10},end:{line:194,column:11}}],line:189},"17":{loc:{start:{line:210,column:4},end:{line:212,column:5}},type:"if",locations:[{start:{line:210,column:4},end:{line:212,column:5}},{start:{line:210,column:4},end:{line:212,column:5}}],line:210},"18":{loc:{start:{line:228,column:4},end:{line:230,column:5}},type:"if",locations:[{start:{line:228,column:4},end:{line:230,column:5}},{start:{line:228,column:4},end:{line:230,column:5}}],line:228},"19":{loc:{start:{line:236,column:16},end:{line:236,column:75}},type:"cond-expr",locations:[{start:{line:236,column:29},end:{line:236,column:53}},{start:{line:236,column:56},end:{line:236,column:75}}],line:236},"20":{loc:{start:{line:257,column:4},end:{line:259,column:5}},type:"if",locations:[{start:{line:257,column:4},end:{line:259,column:5}},{start:{line:257,column:4},end:{line:259,column:5}}],line:257}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0},b:{"0":[0,0],"1":[0,0],"2":[0],"3":[0],"4":[0],"5":[0,0],"6":[0,0],"7":[0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0]},inputSourceMap:{version:3,sources:["../../../src/Adapters/Files/GridFSBucketAdapter.js"],names:["crypto","require","GridFSBucketAdapter","FilesAdapter","constructor","mongoDatabaseURI","defaults","DefaultMongoURI","mongoOptions","encryptionKey","undefined","_databaseURI","_algorithm","_encryptionKey","createHash","update","String","digest","substr","defaultMongoOptions","useNewUrlParser","useUnifiedTopology","_mongoOptions","Object","assign","_connect","_connectionPromise","MongoClient","connect","then","client","_client","db","s","options","dbName","_getBucket","database","GridFSBucket","createFile","filename","data","contentType","bucket","stream","openUploadStream","metadata","iv","randomBytes","cipher","createCipheriv","encryptedResult","Buffer","concat","final","getAuthTag","write","err","Promise","resolve","reject","end","on","deleteFile","documents","find","toArray","length","Error","all","map","doc","delete","_id","getFileData","openDownloadStreamByName","read","chunks","push","authTagLocation","ivLocation","authTag","slice","encrypted","decipher","createDecipheriv","setAuthTag","decrypted","rotateEncryptionKey","fileNames","oldKeyFileAdapter","oldKey","fileNamesIterator","forEach","file","fileNamesNotRotated","fileNamesRotated","fileNameTotal","fileNameIndex","fileName","plainTextData","filter","value","rotated","notRotated","catch","getFileLocation","config","mount","applicationId","encodeURIComponent","getMetadata","files","handleFileStream","req","res","parts","get","replace","split","partialstart","partialend","start","parseInt","writeHead","chunk","sendStatus","handleShutdown","close","validateFilename"],mappings:"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",sourcesContent:["/**\n GridFSBucketAdapter\n Stores files in Mongo using GridStore\n Requires the database adapter to be based on mongoclient\n\n @flow weak\n */\n\n// @flow-disable-next\nimport { MongoClient, GridFSBucket, Db } from 'mongodb';\nimport { FilesAdapter, validateFilename } from './FilesAdapter';\nimport defaults from '../../defaults';\nconst crypto = require('crypto');\n\nexport class GridFSBucketAdapter extends FilesAdapter {\n  _databaseURI: string;\n  _connectionPromise: Promise<Db>;\n  _mongoOptions: Object;\n  _algorithm: string;\n\n  constructor(\n    mongoDatabaseURI = defaults.DefaultMongoURI,\n    mongoOptions = {},\n    encryptionKey = undefined\n  ) {\n    super();\n    this._databaseURI = mongoDatabaseURI;\n    this._algorithm = 'aes-256-gcm';\n    this._encryptionKey =\n      encryptionKey !== undefined\n        ? crypto.createHash('sha256').update(String(encryptionKey)).digest('base64').substr(0, 32)\n        : null;\n    const defaultMongoOptions = {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    };\n    this._mongoOptions = Object.assign(defaultMongoOptions, mongoOptions);\n  }\n\n  _connect() {\n    if (!this._connectionPromise) {\n      this._connectionPromise = MongoClient.connect(this._databaseURI, this._mongoOptions).then(\n        client => {\n          this._client = client;\n          return client.db(client.s.options.dbName);\n        }\n      );\n    }\n    return this._connectionPromise;\n  }\n\n  _getBucket() {\n    return this._connect().then(database => new GridFSBucket(database));\n  }\n\n  // For a given config object, filename, and data, store a file\n  // Returns a promise\n  async createFile(filename: string, data, contentType, options = {}) {\n    const bucket = await this._getBucket();\n    const stream = await bucket.openUploadStream(filename, {\n      metadata: options.metadata,\n    });\n    if (this._encryptionKey !== null) {\n      try {\n        const iv = crypto.randomBytes(16);\n        const cipher = crypto.createCipheriv(this._algorithm, this._encryptionKey, iv);\n        const encryptedResult = Buffer.concat([\n          cipher.update(data),\n          cipher.final(),\n          iv,\n          cipher.getAuthTag(),\n        ]);\n        await stream.write(encryptedResult);\n      } catch (err) {\n        return new Promise((resolve, reject) => {\n          return reject(err);\n        });\n      }\n    } else {\n      await stream.write(data);\n    }\n    stream.end();\n    return new Promise((resolve, reject) => {\n      stream.on('finish', resolve);\n      stream.on('error', reject);\n    });\n  }\n\n  async deleteFile(filename: string) {\n    const bucket = await this._getBucket();\n    const documents = await bucket.find({ filename }).toArray();\n    if (documents.length === 0) {\n      throw new Error('FileNotFound');\n    }\n    return Promise.all(\n      documents.map(doc => {\n        return bucket.delete(doc._id);\n      })\n    );\n  }\n\n  async getFileData(filename: string) {\n    const bucket = await this._getBucket();\n    const stream = bucket.openDownloadStreamByName(filename);\n    stream.read();\n    return new Promise((resolve, reject) => {\n      const chunks = [];\n      stream.on('data', data => {\n        chunks.push(data);\n      });\n      stream.on('end', () => {\n        const data = Buffer.concat(chunks);\n        if (this._encryptionKey !== null) {\n          try {\n            const authTagLocation = data.length - 16;\n            const ivLocation = data.length - 32;\n            const authTag = data.slice(authTagLocation);\n            const iv = data.slice(ivLocation, authTagLocation);\n            const encrypted = data.slice(0, ivLocation);\n            const decipher = crypto.createDecipheriv(this._algorithm, this._encryptionKey, iv);\n            decipher.setAuthTag(authTag);\n            const decrypted = Buffer.concat([decipher.update(encrypted), decipher.final()]);\n            return resolve(decrypted);\n          } catch (err) {\n            return reject(err);\n          }\n        }\n        resolve(data);\n      });\n      stream.on('error', err => {\n        reject(err);\n      });\n    });\n  }\n\n  async rotateEncryptionKey(options = {}) {\n    var fileNames = [];\n    var oldKeyFileAdapter = {};\n    const bucket = await this._getBucket();\n    if (options.oldKey !== undefined) {\n      oldKeyFileAdapter = new GridFSBucketAdapter(\n        this._databaseURI,\n        this._mongoOptions,\n        options.oldKey\n      );\n    } else {\n      oldKeyFileAdapter = new GridFSBucketAdapter(this._databaseURI, this._mongoOptions);\n    }\n    if (options.fileNames !== undefined) {\n      fileNames = options.fileNames;\n    } else {\n      const fileNamesIterator = await bucket.find().toArray();\n      fileNamesIterator.forEach(file => {\n        fileNames.push(file.filename);\n      });\n    }\n    return new Promise(resolve => {\n      var fileNamesNotRotated = fileNames;\n      var fileNamesRotated = [];\n      var fileNameTotal = fileNames.length;\n      var fileNameIndex = 0;\n      fileNames.forEach(fileName => {\n        oldKeyFileAdapter\n          .getFileData(fileName)\n          .then(plainTextData => {\n            //Overwrite file with data encrypted with new key\n            this.createFile(fileName, plainTextData)\n              .then(() => {\n                fileNamesRotated.push(fileName);\n                fileNamesNotRotated = fileNamesNotRotated.filter(function (value) {\n                  return value !== fileName;\n                });\n                fileNameIndex += 1;\n                if (fileNameIndex == fileNameTotal) {\n                  resolve({\n                    rotated: fileNamesRotated,\n                    notRotated: fileNamesNotRotated,\n                  });\n                }\n              })\n              .catch(() => {\n                fileNameIndex += 1;\n                if (fileNameIndex == fileNameTotal) {\n                  resolve({\n                    rotated: fileNamesRotated,\n                    notRotated: fileNamesNotRotated,\n                  });\n                }\n              });\n          })\n          .catch(() => {\n            fileNameIndex += 1;\n            if (fileNameIndex == fileNameTotal) {\n              resolve({\n                rotated: fileNamesRotated,\n                notRotated: fileNamesNotRotated,\n              });\n            }\n          });\n      });\n    });\n  }\n\n  getFileLocation(config, filename) {\n    return config.mount + '/files/' + config.applicationId + '/' + encodeURIComponent(filename);\n  }\n\n  async getMetadata(filename) {\n    const bucket = await this._getBucket();\n    const files = await bucket.find({ filename }).toArray();\n    if (files.length === 0) {\n      return {};\n    }\n    const { metadata } = files[0];\n    return { metadata };\n  }\n\n  async handleFileStream(filename: string, req, res, contentType) {\n    const bucket = await this._getBucket();\n    const files = await bucket.find({ filename }).toArray();\n    if (files.length === 0) {\n      throw new Error('FileNotFound');\n    }\n    const parts = req\n      .get('Range')\n      .replace(/bytes=/, '')\n      .split('-');\n    const partialstart = parts[0];\n    const partialend = parts[1];\n\n    const start = parseInt(partialstart, 10);\n    const end = partialend ? parseInt(partialend, 10) : files[0].length - 1;\n\n    res.writeHead(206, {\n      'Accept-Ranges': 'bytes',\n      'Content-Length': end - start + 1,\n      'Content-Range': 'bytes ' + start + '-' + end + '/' + files[0].length,\n      'Content-Type': contentType,\n    });\n    const stream = bucket.openDownloadStreamByName(filename);\n    stream.start(start);\n    stream.on('data', chunk => {\n      res.write(chunk);\n    });\n    stream.on('error', () => {\n      res.sendStatus(404);\n    });\n    stream.on('end', () => {\n      res.end();\n    });\n  }\n\n  handleShutdown() {\n    if (!this._client) {\n      return Promise.resolve();\n    }\n    return this._client.close(false);\n  }\n\n  validateFilename(filename) {\n    return validateFilename(filename);\n  }\n}\n\nexport default GridFSBucketAdapter;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5204b069e50bc948645136629a90f36907797761"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1fhecapiq2=function(){return actualCoverage;};}return actualCoverage;}cov_1fhecapiq2();cov_1fhecapiq2().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1fhecapiq2().s[1]++;exports.default=exports.GridFSBucketAdapter=void 0;var _mongodb=(cov_1fhecapiq2().s[2]++,require("mongodb"));var _FilesAdapter=(cov_1fhecapiq2().s[3]++,require("./FilesAdapter"));var _defaults=(cov_1fhecapiq2().s[4]++,_interopRequireDefault(require("../../defaults")));function _interopRequireDefault(obj){cov_1fhecapiq2().f[0]++;cov_1fhecapiq2().s[5]++;return(cov_1fhecapiq2().b[1][0]++,obj)&&(cov_1fhecapiq2().b[1][1]++,obj.__esModule)?(cov_1fhecapiq2().b[0][0]++,obj):(cov_1fhecapiq2().b[0][1]++,{default:obj});}/**
 GridFSBucketAdapter
 Stores files in Mongo using GridStore
 Requires the database adapter to be based on mongoclient

 
 */ // -disable-next
const crypto=(cov_1fhecapiq2().s[6]++,require('crypto'));class GridFSBucketAdapter extends(_FilesAdapter.FilesAdapter){constructor(mongoDatabaseURI=(cov_1fhecapiq2().b[2][0]++,_defaults.default.DefaultMongoURI),mongoOptions=(cov_1fhecapiq2().b[3][0]++,{}),encryptionKey=(cov_1fhecapiq2().b[4][0]++,undefined)){cov_1fhecapiq2().f[1]++;cov_1fhecapiq2().s[7]++;super();cov_1fhecapiq2().s[8]++;this._databaseURI=mongoDatabaseURI;cov_1fhecapiq2().s[9]++;this._algorithm='aes-256-gcm';cov_1fhecapiq2().s[10]++;this._encryptionKey=encryptionKey!==undefined?(cov_1fhecapiq2().b[5][0]++,crypto.createHash('sha256').update(String(encryptionKey)).digest('base64').substr(0,32)):(cov_1fhecapiq2().b[5][1]++,null);const defaultMongoOptions=(cov_1fhecapiq2().s[11]++,{useNewUrlParser:true,useUnifiedTopology:true});cov_1fhecapiq2().s[12]++;this._mongoOptions=Object.assign(defaultMongoOptions,mongoOptions);}_connect(){cov_1fhecapiq2().f[2]++;cov_1fhecapiq2().s[13]++;if(!this._connectionPromise){cov_1fhecapiq2().b[6][0]++;cov_1fhecapiq2().s[14]++;this._connectionPromise=_mongodb.MongoClient.connect(this._databaseURI,this._mongoOptions).then(client=>{cov_1fhecapiq2().f[3]++;cov_1fhecapiq2().s[15]++;this._client=client;cov_1fhecapiq2().s[16]++;return client.db(client.s.options.dbName);});}else{cov_1fhecapiq2().b[6][1]++;}cov_1fhecapiq2().s[17]++;return this._connectionPromise;}_getBucket(){cov_1fhecapiq2().f[4]++;cov_1fhecapiq2().s[18]++;return this._connect().then(database=>{cov_1fhecapiq2().f[5]++;cov_1fhecapiq2().s[19]++;return new _mongodb.GridFSBucket(database);});}// For a given config object, filename, and data, store a file
// Returns a promise
async createFile(filename,data,contentType,options=(cov_1fhecapiq2().b[7][0]++,{})){cov_1fhecapiq2().f[6]++;const bucket=(cov_1fhecapiq2().s[20]++,await this._getBucket());const stream=(cov_1fhecapiq2().s[21]++,await bucket.openUploadStream(filename,{metadata:options.metadata}));cov_1fhecapiq2().s[22]++;if(this._encryptionKey!==null){cov_1fhecapiq2().b[8][0]++;cov_1fhecapiq2().s[23]++;try{const iv=(cov_1fhecapiq2().s[24]++,crypto.randomBytes(16));const cipher=(cov_1fhecapiq2().s[25]++,crypto.createCipheriv(this._algorithm,this._encryptionKey,iv));const encryptedResult=(cov_1fhecapiq2().s[26]++,Buffer.concat([cipher.update(data),cipher.final(),iv,cipher.getAuthTag()]));cov_1fhecapiq2().s[27]++;await stream.write(encryptedResult);}catch(err){cov_1fhecapiq2().s[28]++;return new Promise((resolve,reject)=>{cov_1fhecapiq2().f[7]++;cov_1fhecapiq2().s[29]++;return reject(err);});}}else{cov_1fhecapiq2().b[8][1]++;cov_1fhecapiq2().s[30]++;await stream.write(data);}cov_1fhecapiq2().s[31]++;stream.end();cov_1fhecapiq2().s[32]++;return new Promise((resolve,reject)=>{cov_1fhecapiq2().f[8]++;cov_1fhecapiq2().s[33]++;stream.on('finish',resolve);cov_1fhecapiq2().s[34]++;stream.on('error',reject);});}async deleteFile(filename){cov_1fhecapiq2().f[9]++;const bucket=(cov_1fhecapiq2().s[35]++,await this._getBucket());const documents=(cov_1fhecapiq2().s[36]++,await bucket.find({filename}).toArray());cov_1fhecapiq2().s[37]++;if(documents.length===0){cov_1fhecapiq2().b[9][0]++;cov_1fhecapiq2().s[38]++;throw new Error('FileNotFound');}else{cov_1fhecapiq2().b[9][1]++;}cov_1fhecapiq2().s[39]++;return Promise.all(documents.map(doc=>{cov_1fhecapiq2().f[10]++;cov_1fhecapiq2().s[40]++;return bucket.delete(doc._id);}));}async getFileData(filename){cov_1fhecapiq2().f[11]++;const bucket=(cov_1fhecapiq2().s[41]++,await this._getBucket());const stream=(cov_1fhecapiq2().s[42]++,bucket.openDownloadStreamByName(filename));cov_1fhecapiq2().s[43]++;stream.read();cov_1fhecapiq2().s[44]++;return new Promise((resolve,reject)=>{cov_1fhecapiq2().f[12]++;const chunks=(cov_1fhecapiq2().s[45]++,[]);cov_1fhecapiq2().s[46]++;stream.on('data',data=>{cov_1fhecapiq2().f[13]++;cov_1fhecapiq2().s[47]++;chunks.push(data);});cov_1fhecapiq2().s[48]++;stream.on('end',()=>{cov_1fhecapiq2().f[14]++;const data=(cov_1fhecapiq2().s[49]++,Buffer.concat(chunks));cov_1fhecapiq2().s[50]++;if(this._encryptionKey!==null){cov_1fhecapiq2().b[10][0]++;cov_1fhecapiq2().s[51]++;try{const authTagLocation=(cov_1fhecapiq2().s[52]++,data.length-16);const ivLocation=(cov_1fhecapiq2().s[53]++,data.length-32);const authTag=(cov_1fhecapiq2().s[54]++,data.slice(authTagLocation));const iv=(cov_1fhecapiq2().s[55]++,data.slice(ivLocation,authTagLocation));const encrypted=(cov_1fhecapiq2().s[56]++,data.slice(0,ivLocation));const decipher=(cov_1fhecapiq2().s[57]++,crypto.createDecipheriv(this._algorithm,this._encryptionKey,iv));cov_1fhecapiq2().s[58]++;decipher.setAuthTag(authTag);const decrypted=(cov_1fhecapiq2().s[59]++,Buffer.concat([decipher.update(encrypted),decipher.final()]));cov_1fhecapiq2().s[60]++;return resolve(decrypted);}catch(err){cov_1fhecapiq2().s[61]++;return reject(err);}}else{cov_1fhecapiq2().b[10][1]++;}cov_1fhecapiq2().s[62]++;resolve(data);});cov_1fhecapiq2().s[63]++;stream.on('error',err=>{cov_1fhecapiq2().f[15]++;cov_1fhecapiq2().s[64]++;reject(err);});});}async rotateEncryptionKey(options=(cov_1fhecapiq2().b[11][0]++,{})){cov_1fhecapiq2().f[16]++;var fileNames=(cov_1fhecapiq2().s[65]++,[]);var oldKeyFileAdapter=(cov_1fhecapiq2().s[66]++,{});const bucket=(cov_1fhecapiq2().s[67]++,await this._getBucket());cov_1fhecapiq2().s[68]++;if(options.oldKey!==undefined){cov_1fhecapiq2().b[12][0]++;cov_1fhecapiq2().s[69]++;oldKeyFileAdapter=new GridFSBucketAdapter(this._databaseURI,this._mongoOptions,options.oldKey);}else{cov_1fhecapiq2().b[12][1]++;cov_1fhecapiq2().s[70]++;oldKeyFileAdapter=new GridFSBucketAdapter(this._databaseURI,this._mongoOptions);}cov_1fhecapiq2().s[71]++;if(options.fileNames!==undefined){cov_1fhecapiq2().b[13][0]++;cov_1fhecapiq2().s[72]++;fileNames=options.fileNames;}else{cov_1fhecapiq2().b[13][1]++;const fileNamesIterator=(cov_1fhecapiq2().s[73]++,await bucket.find().toArray());cov_1fhecapiq2().s[74]++;fileNamesIterator.forEach(file=>{cov_1fhecapiq2().f[17]++;cov_1fhecapiq2().s[75]++;fileNames.push(file.filename);});}cov_1fhecapiq2().s[76]++;return new Promise(resolve=>{cov_1fhecapiq2().f[18]++;var fileNamesNotRotated=(cov_1fhecapiq2().s[77]++,fileNames);var fileNamesRotated=(cov_1fhecapiq2().s[78]++,[]);var fileNameTotal=(cov_1fhecapiq2().s[79]++,fileNames.length);var fileNameIndex=(cov_1fhecapiq2().s[80]++,0);cov_1fhecapiq2().s[81]++;fileNames.forEach(fileName=>{cov_1fhecapiq2().f[19]++;cov_1fhecapiq2().s[82]++;oldKeyFileAdapter.getFileData(fileName).then(plainTextData=>{cov_1fhecapiq2().f[20]++;cov_1fhecapiq2().s[83]++;//Overwrite file with data encrypted with new key
this.createFile(fileName,plainTextData).then(()=>{cov_1fhecapiq2().f[21]++;cov_1fhecapiq2().s[84]++;fileNamesRotated.push(fileName);cov_1fhecapiq2().s[85]++;fileNamesNotRotated=fileNamesNotRotated.filter(function(value){cov_1fhecapiq2().f[22]++;cov_1fhecapiq2().s[86]++;return value!==fileName;});cov_1fhecapiq2().s[87]++;fileNameIndex+=1;cov_1fhecapiq2().s[88]++;if(fileNameIndex==fileNameTotal){cov_1fhecapiq2().b[14][0]++;cov_1fhecapiq2().s[89]++;resolve({rotated:fileNamesRotated,notRotated:fileNamesNotRotated});}else{cov_1fhecapiq2().b[14][1]++;}}).catch(()=>{cov_1fhecapiq2().f[23]++;cov_1fhecapiq2().s[90]++;fileNameIndex+=1;cov_1fhecapiq2().s[91]++;if(fileNameIndex==fileNameTotal){cov_1fhecapiq2().b[15][0]++;cov_1fhecapiq2().s[92]++;resolve({rotated:fileNamesRotated,notRotated:fileNamesNotRotated});}else{cov_1fhecapiq2().b[15][1]++;}});}).catch(()=>{cov_1fhecapiq2().f[24]++;cov_1fhecapiq2().s[93]++;fileNameIndex+=1;cov_1fhecapiq2().s[94]++;if(fileNameIndex==fileNameTotal){cov_1fhecapiq2().b[16][0]++;cov_1fhecapiq2().s[95]++;resolve({rotated:fileNamesRotated,notRotated:fileNamesNotRotated});}else{cov_1fhecapiq2().b[16][1]++;}});});});}getFileLocation(config,filename){cov_1fhecapiq2().f[25]++;cov_1fhecapiq2().s[96]++;return config.mount+'/files/'+config.applicationId+'/'+encodeURIComponent(filename);}async getMetadata(filename){cov_1fhecapiq2().f[26]++;const bucket=(cov_1fhecapiq2().s[97]++,await this._getBucket());const files=(cov_1fhecapiq2().s[98]++,await bucket.find({filename}).toArray());cov_1fhecapiq2().s[99]++;if(files.length===0){cov_1fhecapiq2().b[17][0]++;cov_1fhecapiq2().s[100]++;return{};}else{cov_1fhecapiq2().b[17][1]++;}const{metadata}=(cov_1fhecapiq2().s[101]++,files[0]);cov_1fhecapiq2().s[102]++;return{metadata};}async handleFileStream(filename,req,res,contentType){cov_1fhecapiq2().f[27]++;const bucket=(cov_1fhecapiq2().s[103]++,await this._getBucket());const files=(cov_1fhecapiq2().s[104]++,await bucket.find({filename}).toArray());cov_1fhecapiq2().s[105]++;if(files.length===0){cov_1fhecapiq2().b[18][0]++;cov_1fhecapiq2().s[106]++;throw new Error('FileNotFound');}else{cov_1fhecapiq2().b[18][1]++;}const parts=(cov_1fhecapiq2().s[107]++,req.get('Range').replace(/bytes=/,'').split('-'));const partialstart=(cov_1fhecapiq2().s[108]++,parts[0]);const partialend=(cov_1fhecapiq2().s[109]++,parts[1]);const start=(cov_1fhecapiq2().s[110]++,parseInt(partialstart,10));const end=(cov_1fhecapiq2().s[111]++,partialend?(cov_1fhecapiq2().b[19][0]++,parseInt(partialend,10)):(cov_1fhecapiq2().b[19][1]++,files[0].length-1));cov_1fhecapiq2().s[112]++;res.writeHead(206,{'Accept-Ranges':'bytes','Content-Length':end-start+1,'Content-Range':'bytes '+start+'-'+end+'/'+files[0].length,'Content-Type':contentType});const stream=(cov_1fhecapiq2().s[113]++,bucket.openDownloadStreamByName(filename));cov_1fhecapiq2().s[114]++;stream.start(start);cov_1fhecapiq2().s[115]++;stream.on('data',chunk=>{cov_1fhecapiq2().f[28]++;cov_1fhecapiq2().s[116]++;res.write(chunk);});cov_1fhecapiq2().s[117]++;stream.on('error',()=>{cov_1fhecapiq2().f[29]++;cov_1fhecapiq2().s[118]++;res.sendStatus(404);});cov_1fhecapiq2().s[119]++;stream.on('end',()=>{cov_1fhecapiq2().f[30]++;cov_1fhecapiq2().s[120]++;res.end();});}handleShutdown(){cov_1fhecapiq2().f[31]++;cov_1fhecapiq2().s[121]++;if(!this._client){cov_1fhecapiq2().b[20][0]++;cov_1fhecapiq2().s[122]++;return Promise.resolve();}else{cov_1fhecapiq2().b[20][1]++;}cov_1fhecapiq2().s[123]++;return this._client.close(false);}validateFilename(filename){cov_1fhecapiq2().f[32]++;cov_1fhecapiq2().s[124]++;return(0,_FilesAdapter.validateFilename)(filename);}}cov_1fhecapiq2().s[125]++;exports.GridFSBucketAdapter=GridFSBucketAdapter;var _default=(cov_1fhecapiq2().s[126]++,GridFSBucketAdapter);cov_1fhecapiq2().s[127]++;exports.default=_default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,