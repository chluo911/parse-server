{"version":3,"sources":["../../src/Deprecator/Deprecator.js"],"names":["Deprecator","scanParseServerOptions","options","deprecation","_getDeprecations","solution","optionKey","changeNewDefault","_logOption","logRuntimeDeprecation","_logGeneric","Deprecations","usage","output","logger","warn","envKey","changeNewKey","type","key","keyAction","undefined","length","module","exports"],"mappings":";;AAAA;;AACA;;;;AAEA;AACA;AACA;AACA,MAAMA,UAAN,CAAiB;AACf;AACF;AACA;AACA;AACA;AACA;AACA;AAC+B,SAAtBC,sBAAsB,CAACC,OAAD,EAAU;AACrC;AACA,SAAK,MAAMC,WAAX,IAA0BH,UAAU,CAACI,gBAAX,EAA1B,EAAyD;AACvD;AACA,YAAMC,QAAQ,GAAGF,WAAW,CAACE,QAA7B;AACA,YAAMC,SAAS,GAAGH,WAAW,CAACG,SAA9B;AACA,YAAMC,gBAAgB,GAAGJ,WAAW,CAACI,gBAArC,CAJuD,CAMvD;;AACA,UAAIA,gBAAgB,IAAI,IAApB,IAA4BL,OAAO,CAACI,SAAD,CAAP,IAAsB,IAAtD,EAA4D;AAC1DN,QAAAA,UAAU,CAACQ,UAAX,CAAsB;AAAEF,UAAAA,SAAF;AAAaC,UAAAA,gBAAb;AAA+BF,UAAAA;AAA/B,SAAtB;AACD;AACF;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC8B,SAArBI,qBAAqB,CAACP,OAAD,EAAU;AACpCF,IAAAA,UAAU,CAACU,WAAX,CAAuBR,OAAvB;AACD;AAED;AACF;AACA;AACA;;;AACyB,SAAhBE,gBAAgB,GAAG;AACxB,WAAOO,qBAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACoB,SAAXD,WAAW,CAAC;AAAEE,IAAAA,KAAF;AAASP,IAAAA;AAAT,GAAD,EAAsB;AACtC;AACA,QAAIQ,MAAM,GAAI,uBAAsBD,KAAM,yDAA1C;AACAC,IAAAA,MAAM,IAAIR,QAAQ,GAAI,IAAGA,QAAS,EAAhB,GAAoB,EAAtC;;AACAS,oBAAOC,IAAP,CAAYF,MAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACmB,SAAVL,UAAU,CAAC;AAAEF,IAAAA,SAAF;AAAaU,IAAAA,MAAb;AAAqBC,IAAAA,YAArB;AAAmCV,IAAAA,gBAAnC;AAAqDF,IAAAA;AAArD,GAAD,EAAkE;AACjF,UAAMa,IAAI,GAAGZ,SAAS,GAAG,QAAH,GAAc,iBAApC;AACA,UAAMa,GAAG,GAAGb,SAAS,GAAGA,SAAH,GAAeU,MAApC;AACA,UAAMI,SAAS,GACbH,YAAY,IAAI,IAAhB,GACII,SADJ,GAEIJ,YAAY,CAACK,MAAb,GAAsB,CAAtB,GACG,eAAcL,YAAa,GAD9B,GAEG,SALT,CAHiF,CAUjF;;AACA,QAAIJ,MAAM,GAAI,wCAAuCK,IAAK,KAAIC,GAAI,IAAlE;AACAN,IAAAA,MAAM,IAAII,YAAY,GAAI,6BAA4BG,SAAU,uBAA1C,GAAmE,EAAzF;AACAP,IAAAA,MAAM,IAAIN,gBAAgB,GACrB,2BAA0BA,gBAAiB,wBADtB,GAEtB,EAFJ;AAGAM,IAAAA,MAAM,IAAIR,QAAQ,GAAI,IAAGA,QAAS,EAAhB,GAAoB,EAAtC;;AACAS,oBAAOC,IAAP,CAAYF,MAAZ;AACD;;AA5Gc;;AA+GjBU,MAAM,CAACC,OAAP,GAAiBxB,UAAjB","sourcesContent":["import logger from '../logger';\nimport Deprecations from './Deprecations';\n\n/**\n * The deprecator class.\n */\nclass Deprecator {\n  /**\n   * Scans the Parse Server for deprecated options.\n   * This needs to be called before setting option defaults, otherwise it\n   * becomes indistinguishable whether an option has been set manually or\n   * by default.\n   * @param {any} options The Parse Server options.\n   */\n  static scanParseServerOptions(options) {\n    // Scan for deprecations\n    for (const deprecation of Deprecator._getDeprecations()) {\n      // Get deprecation properties\n      const solution = deprecation.solution;\n      const optionKey = deprecation.optionKey;\n      const changeNewDefault = deprecation.changeNewDefault;\n\n      // If default will change, only throw a warning if option is not set\n      if (changeNewDefault != null && options[optionKey] == null) {\n        Deprecator._logOption({ optionKey, changeNewDefault, solution });\n      }\n    }\n  }\n\n  /**\n   * Logs a deprecation warning for a parameter that can only be determined dynamically\n   * during runtime.\n   *\n   * Note: Do not use this to log deprecations of Parse Server options, but add such\n   * deprecations to `Deprecations.js` instead. See the contribution docs for more\n   * details.\n   *\n   * For consistency, the deprecation warning is composed of the following parts:\n   *\n   * > DeprecationWarning: `usage` is deprecated and will be removed in a future version.\n   * `solution`.\n   *\n   * - `usage`: The deprecated usage.\n   * - `solution`: The instruction to resolve this deprecation warning.\n   *\n   * For example:\n   * > DeprecationWarning: `Prefixing field names with dollar sign ($) in aggregation query`\n   * is deprecated and will be removed in a future version. `Reference field names without\n   * dollar sign prefix.`\n   *\n   * @param {Object} options The deprecation options.\n   * @param {String} options.usage The usage that is deprecated.\n   * @param {String} [options.solution] The instruction to resolve this deprecation warning.\n   * Optional. It is recommended to add an instruction for the convenience of the developer.\n   */\n  static logRuntimeDeprecation(options) {\n    Deprecator._logGeneric(options);\n  }\n\n  /**\n   * Returns the deprecation definitions.\n   * @returns {Array<Object>} The deprecations.\n   */\n  static _getDeprecations() {\n    return Deprecations;\n  }\n\n  /**\n   * Logs a generic deprecation warning.\n   *\n   * @param {Object} options The deprecation options.\n   * @param {String} options.usage The usage that is deprecated.\n   * @param {String} [options.solution] The instruction to resolve this deprecation warning.\n   * Optional. It is recommended to add an instruction for the convenience of the developer.\n   */\n  static _logGeneric({ usage, solution }) {\n    // Compose message\n    let output = `DeprecationWarning: ${usage} is deprecated and will be removed in a future version.`;\n    output += solution ? ` ${solution}` : '';\n    logger.warn(output);\n  }\n\n  /**\n   * Logs a deprecation warning for a Parse Server option.\n   *\n   * @param {String} optionKey The option key incl. its path, e.g. `security.enableCheck`.\n   * @param {String} envKey The environment key, e.g. `PARSE_SERVER_SECURITY`.\n   * @param {String} changeNewKey Set the new key name if the current key will be replaced,\n   * or set to an empty string if the current key will be removed without replacement.\n   * @param {String} changeNewDefault Set the new default value if the key's default value\n   * will change in a future version.\n   * @param {String} [solution] The instruction to resolve this deprecation warning. This\n   * message must not include the warning that the parameter is deprecated, that is\n   * automatically added to the message. It should only contain the instruction on how\n   * to resolve this warning.\n   */\n  static _logOption({ optionKey, envKey, changeNewKey, changeNewDefault, solution }) {\n    const type = optionKey ? 'option' : 'environment key';\n    const key = optionKey ? optionKey : envKey;\n    const keyAction =\n      changeNewKey == null\n        ? undefined\n        : changeNewKey.length > 0\n          ? `renamed to '${changeNewKey}'`\n          : `removed`;\n\n    // Compose message\n    let output = `DeprecationWarning: The Parse Server ${type} '${key}' `;\n    output += changeNewKey ? `is deprecated and will be ${keyAction} in a future version.` : '';\n    output += changeNewDefault\n      ? `default will change to '${changeNewDefault}' in a future version.`\n      : '';\n    output += solution ? ` ${solution}` : '';\n    logger.warn(output);\n  }\n}\n\nmodule.exports = Deprecator;\n"]}