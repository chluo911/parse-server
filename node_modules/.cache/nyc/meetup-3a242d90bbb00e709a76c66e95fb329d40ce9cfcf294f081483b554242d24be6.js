"use strict";// Helper functions for accessing the meetup API.
function cov_6t5bolq7x(){var path="/parse-server/lib/Adapters/Auth/meetup.js";var hash="4b620af701a7540a072611eb5dc60ee85606d9e4";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Adapters/Auth/meetup.js",statementMap:{"0":{start:{line:4,column:12},end:{line:4,column:39}},"1":{start:{line:6,column:21},end:{line:6,column:46}},"2":{start:{line:10,column:2},end:{line:16,column:5}},"3":{start:{line:11,column:4},end:{line:13,column:5}},"4":{start:{line:12,column:6},end:{line:12,column:13}},"5":{start:{line:15,column:4},end:{line:15,column:97}},"6":{start:{line:21,column:2},end:{line:21,column:27}},"7":{start:{line:26,column:2},end:{line:32,column:5}},"8":{start:{line:35,column:0},end:{line:38,column:2}}},fnMap:{"0":{name:"validateAuthData",decl:{start:{line:9,column:9},end:{line:9,column:25}},loc:{start:{line:9,column:36},end:{line:17,column:1}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:10,column:60},end:{line:10,column:61}},loc:{start:{line:10,column:68},end:{line:16,column:3}},line:10},"2":{name:"validateAppId",decl:{start:{line:20,column:9},end:{line:20,column:22}},loc:{start:{line:20,column:25},end:{line:22,column:1}},line:20},"3":{name:"request",decl:{start:{line:25,column:9},end:{line:25,column:16}},loc:{start:{line:25,column:37},end:{line:33,column:1}},line:25}},branchMap:{"0":{loc:{start:{line:11,column:4},end:{line:13,column:5}},type:"if",locations:[{start:{line:11,column:4},end:{line:13,column:5}},{start:{line:11,column:4},end:{line:13,column:5}}],line:11},"1":{loc:{start:{line:11,column:8},end:{line:11,column:38}},type:"binary-expr",locations:[{start:{line:11,column:8},end:{line:11,column:12}},{start:{line:11,column:16},end:{line:11,column:38}}],line:11}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,sources:["../../../src/Adapters/Auth/meetup.js"],names:["Parse","require","httpsRequest","validateAuthData","authData","request","access_token","then","data","id","Error","OBJECT_NOT_FOUND","validateAppId","Promise","resolve","path","get","host","headers","Authorization","module","exports"],mappings:";;AAAA;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBD,KAAlC;;AACA,MAAME,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA5B,C,CAEA;;;AACA,SAASE,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,SAAOC,OAAO,CAAC,aAAD,EAAgBD,QAAQ,CAACE,YAAzB,CAAP,CAA8CC,IAA9C,CAAmDC,IAAI,IAAI;AAChE,QAAIA,IAAI,IAAIA,IAAI,CAACC,EAAL,IAAWL,QAAQ,CAACK,EAAhC,EAAoC;AAClC;AACD;;AACD,UAAM,IAAIT,KAAK,CAACU,KAAV,CAAgBV,KAAK,CAACU,KAAN,CAAYC,gBAA5B,EAA8C,uCAA9C,CAAN;AACD,GALM,CAAP;AAMD,C,CAED;;;AACA,SAASC,aAAT,GAAyB;AACvB,SAAOC,OAAO,CAACC,OAAR,EAAP;AACD,C,CAED;;;AACA,SAAST,OAAT,CAAiBU,IAAjB,EAAuBT,YAAvB,EAAqC;AACnC,SAAOJ,YAAY,CAACc,GAAb,CAAiB;AACtBC,IAAAA,IAAI,EAAE,gBADgB;AAEtBF,IAAAA,IAAI,EAAE,QAAQA,IAFQ;AAGtBG,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAE,YAAYb;AADpB;AAHa,GAAjB,CAAP;AAOD;;AAEDc,MAAM,CAACC,OAAP,GAAiB;AACfT,EAAAA,aAAa,EAAEA,aADA;AAEfT,EAAAA,gBAAgB,EAAEA;AAFH,CAAjB",sourcesContent:["// Helper functions for accessing the meetup API.\nvar Parse = require('parse/node').Parse;\nconst httpsRequest = require('./httpsRequest');\n\n// Returns a promise that fulfills iff this user id is valid.\nfunction validateAuthData(authData) {\n  return request('member/self', authData.access_token).then(data => {\n    if (data && data.id == authData.id) {\n      return;\n    }\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Meetup auth is invalid for this user.');\n  });\n}\n\n// Returns a promise that fulfills iff this app id is valid.\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\n// A promisey wrapper for api requests\nfunction request(path, access_token) {\n  return httpsRequest.get({\n    host: 'api.meetup.com',\n    path: '/2/' + path,\n    headers: {\n      Authorization: 'bearer ' + access_token,\n    },\n  });\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData,\n};\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"4b620af701a7540a072611eb5dc60ee85606d9e4"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_6t5bolq7x=function(){return actualCoverage;};}return actualCoverage;}cov_6t5bolq7x();var Parse=(cov_6t5bolq7x().s[0]++,require('parse/node').Parse);const httpsRequest=(cov_6t5bolq7x().s[1]++,require('./httpsRequest'));// Returns a promise that fulfills iff this user id is valid.
function validateAuthData(authData){cov_6t5bolq7x().f[0]++;cov_6t5bolq7x().s[2]++;return request('member/self',authData.access_token).then(data=>{cov_6t5bolq7x().f[1]++;cov_6t5bolq7x().s[3]++;if((cov_6t5bolq7x().b[1][0]++,data)&&(cov_6t5bolq7x().b[1][1]++,data.id==authData.id)){cov_6t5bolq7x().b[0][0]++;cov_6t5bolq7x().s[4]++;return;}else{cov_6t5bolq7x().b[0][1]++;}cov_6t5bolq7x().s[5]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,'Meetup auth is invalid for this user.');});}// Returns a promise that fulfills iff this app id is valid.
function validateAppId(){cov_6t5bolq7x().f[2]++;cov_6t5bolq7x().s[6]++;return Promise.resolve();}// A promisey wrapper for api requests
function request(path,access_token){cov_6t5bolq7x().f[3]++;cov_6t5bolq7x().s[7]++;return httpsRequest.get({host:'api.meetup.com',path:'/2/'+path,headers:{Authorization:'bearer '+access_token}});}cov_6t5bolq7x().s[8]++;module.exports={validateAppId:validateAppId,validateAuthData:validateAuthData};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL21lZXR1cC5qcyJdLCJuYW1lcyI6WyJQYXJzZSIsInJlcXVpcmUiLCJodHRwc1JlcXVlc3QiLCJ2YWxpZGF0ZUF1dGhEYXRhIiwiYXV0aERhdGEiLCJyZXF1ZXN0IiwiYWNjZXNzX3Rva2VuIiwidGhlbiIsImRhdGEiLCJpZCIsIkVycm9yIiwiT0JKRUNUX05PVF9GT1VORCIsInZhbGlkYXRlQXBwSWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInBhdGgiLCJnZXQiLCJob3N0IiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0EsSUFBSUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsWUFBRCxDQUFQLENBQXNCRCxLQUFsQzs7QUFDQSxNQUFNRSxZQUFZLEdBQUdELE9BQU8sQ0FBQyxnQkFBRCxDQUE1QixDLENBRUE7OztBQUNBLFNBQVNFLGdCQUFULENBQTBCQyxRQUExQixFQUFvQztBQUNsQyxTQUFPQyxPQUFPLENBQUMsYUFBRCxFQUFnQkQsUUFBUSxDQUFDRSxZQUF6QixDQUFQLENBQThDQyxJQUE5QyxDQUFtREMsSUFBSSxJQUFJO0FBQ2hFLFFBQUlBLElBQUksSUFBSUEsSUFBSSxDQUFDQyxFQUFMLElBQVdMLFFBQVEsQ0FBQ0ssRUFBaEMsRUFBb0M7QUFDbEM7QUFDRDs7QUFDRCxVQUFNLElBQUlULEtBQUssQ0FBQ1UsS0FBVixDQUFnQlYsS0FBSyxDQUFDVSxLQUFOLENBQVlDLGdCQUE1QixFQUE4Qyx1Q0FBOUMsQ0FBTjtBQUNELEdBTE0sQ0FBUDtBQU1ELEMsQ0FFRDs7O0FBQ0EsU0FBU0MsYUFBVCxHQUF5QjtBQUN2QixTQUFPQyxPQUFPLENBQUNDLE9BQVIsRUFBUDtBQUNELEMsQ0FFRDs7O0FBQ0EsU0FBU1QsT0FBVCxDQUFpQlUsSUFBakIsRUFBdUJULFlBQXZCLEVBQXFDO0FBQ25DLFNBQU9KLFlBQVksQ0FBQ2MsR0FBYixDQUFpQjtBQUN0QkMsSUFBQUEsSUFBSSxFQUFFLGdCQURnQjtBQUV0QkYsSUFBQUEsSUFBSSxFQUFFLFFBQVFBLElBRlE7QUFHdEJHLElBQUFBLE9BQU8sRUFBRTtBQUNQQyxNQUFBQSxhQUFhLEVBQUUsWUFBWWI7QUFEcEI7QUFIYSxHQUFqQixDQUFQO0FBT0Q7O0FBRURjLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmVCxFQUFBQSxhQUFhLEVBQUVBLGFBREE7QUFFZlQsRUFBQUEsZ0JBQWdCLEVBQUVBO0FBRkgsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBIZWxwZXIgZnVuY3Rpb25zIGZvciBhY2Nlc3NpbmcgdGhlIG1lZXR1cCBBUEkuXG52YXIgUGFyc2UgPSByZXF1aXJlKCdwYXJzZS9ub2RlJykuUGFyc2U7XG5jb25zdCBodHRwc1JlcXVlc3QgPSByZXF1aXJlKCcuL2h0dHBzUmVxdWVzdCcpO1xuXG4vLyBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGZ1bGZpbGxzIGlmZiB0aGlzIHVzZXIgaWQgaXMgdmFsaWQuXG5mdW5jdGlvbiB2YWxpZGF0ZUF1dGhEYXRhKGF1dGhEYXRhKSB7XG4gIHJldHVybiByZXF1ZXN0KCdtZW1iZXIvc2VsZicsIGF1dGhEYXRhLmFjY2Vzc190b2tlbikudGhlbihkYXRhID0+IHtcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmlkID09IGF1dGhEYXRhLmlkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELCAnTWVldHVwIGF1dGggaXMgaW52YWxpZCBmb3IgdGhpcyB1c2VyLicpO1xuICB9KTtcbn1cblxuLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCBmdWxmaWxscyBpZmYgdGhpcyBhcHAgaWQgaXMgdmFsaWQuXG5mdW5jdGlvbiB2YWxpZGF0ZUFwcElkKCkge1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59XG5cbi8vIEEgcHJvbWlzZXkgd3JhcHBlciBmb3IgYXBpIHJlcXVlc3RzXG5mdW5jdGlvbiByZXF1ZXN0KHBhdGgsIGFjY2Vzc190b2tlbikge1xuICByZXR1cm4gaHR0cHNSZXF1ZXN0LmdldCh7XG4gICAgaG9zdDogJ2FwaS5tZWV0dXAuY29tJyxcbiAgICBwYXRoOiAnLzIvJyArIHBhdGgsXG4gICAgaGVhZGVyczoge1xuICAgICAgQXV0aG9yaXphdGlvbjogJ2JlYXJlciAnICsgYWNjZXNzX3Rva2VuLFxuICAgIH0sXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdmFsaWRhdGVBcHBJZDogdmFsaWRhdGVBcHBJZCxcbiAgdmFsaWRhdGVBdXRoRGF0YTogdmFsaWRhdGVBdXRoRGF0YSxcbn07XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL21lZXR1cC5qcyJdLCJuYW1lcyI6WyJQYXJzZSIsInJlcXVpcmUiLCJodHRwc1JlcXVlc3QiLCJhdXRoRGF0YSIsImRhdGEiLCJQcm9taXNlIiwiaG9zdCIsInBhdGgiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsImFjY2Vzc190b2tlbiIsIm1vZHVsZSIsInZhbGlkYXRlQXBwSWQiLCJ2YWxpZGF0ZUF1dGhEYXRhIl0sIm1hcHBpbmdzIjoiYUFBQTtrcUlBTUU7eUZBTEYsR0FBSUEsQ0FBQUEsS0FBSyx5QkFBR0MsT0FBTyxDQUFQQSxZQUFPLENBQVBBLENBQVosS0FBUyxDQUFULENBQ0EsS0FBTUMsQ0FBQUEsWUFBWSx5QkFBR0QsT0FBTyxDQUE1QixnQkFBNEIsQ0FBVixDQUFsQixDQUVBO0FBQ0EsUUFBQSxDQUFBLGdCQUFBLENBQUEsUUFBQSxDQUFvQywrQ0FDbEMsTUFBTyxDQUFBLE9BQU8sQ0FBQSxhQUFBLENBQWdCRSxRQUFRLENBQS9CLFlBQU8sQ0FBUCxDQUFBLElBQUEsQ0FBbURDLElBQUksRUFBSSwrQ0FDaEUsR0FBSUEsMkJBQUFBLElBQUksOEJBQUlBLElBQUksQ0FBSkEsRUFBQUEsRUFBV0QsUUFBUSxDQUEvQixFQUFRLENBQVIsQ0FBb0Msa0RBQ2xDLE9BQ0QsQ0FGRCxnQ0FEZ0UsdUJBSWhFLEtBQU0sSUFBSUgsQ0FBQUEsS0FBSyxDQUFULEtBQUEsQ0FBZ0JBLEtBQUssQ0FBTEEsS0FBQUEsQ0FBaEIsZ0JBQUEsQ0FBTix1Q0FBTSxDQUFOLENBSkYsQ0FBTyxDQUFQLEMsQ0FRRjtBQUNBLFFBQUEsQ0FBQSxhQUFBLEVBQXlCLCtDQUN2QixNQUFPSyxDQUFBQSxPQUFPLENBQWQsT0FBT0EsRUFBUCxDLENBR0Y7QUFDQSxRQUFBLENBQUEsT0FBQSxDQUFBLElBQUEsQ0FBQSxZQUFBLENBQXFDLCtDQUNuQyxNQUFPLENBQUEsWUFBWSxDQUFaLEdBQUEsQ0FBaUIsQ0FDdEJDLElBQUksQ0FEa0IsZ0JBQUEsQ0FFdEJDLElBQUksQ0FBRSxNQUZnQixJQUFBLENBR3RCQyxPQUFPLENBQUUsQ0FDUEMsYUFBYSxDQUFFLFVBQVlDLFlBRHBCLENBSGEsQ0FBakIsQ0FBUCxDQU9ELEMsdUJBRURDLE1BQU0sQ0FBTkEsT0FBQUEsQ0FBaUIsQ0FDZkMsYUFBYSxDQURFLGFBQUEsQ0FFZkMsZ0JBQWdCLENBQUVBLGdCQUZILENBQWpCRixDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSGVscGVyIGZ1bmN0aW9ucyBmb3IgYWNjZXNzaW5nIHRoZSBtZWV0dXAgQVBJLlxudmFyIFBhcnNlID0gcmVxdWlyZSgncGFyc2Uvbm9kZScpLlBhcnNlO1xuY29uc3QgaHR0cHNSZXF1ZXN0ID0gcmVxdWlyZSgnLi9odHRwc1JlcXVlc3QnKTtcblxuLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCBmdWxmaWxscyBpZmYgdGhpcyB1c2VyIGlkIGlzIHZhbGlkLlxuZnVuY3Rpb24gdmFsaWRhdGVBdXRoRGF0YShhdXRoRGF0YSkge1xuICByZXR1cm4gcmVxdWVzdCgnbWVtYmVyL3NlbGYnLCBhdXRoRGF0YS5hY2Nlc3NfdG9rZW4pLnRoZW4oZGF0YSA9PiB7XG4gICAgaWYgKGRhdGEgJiYgZGF0YS5pZCA9PSBhdXRoRGF0YS5pZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCwgJ01lZXR1cCBhdXRoIGlzIGludmFsaWQgZm9yIHRoaXMgdXNlci4nKTtcbiAgfSk7XG59XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgaWZmIHRoaXMgYXBwIGlkIGlzIHZhbGlkLlxuZnVuY3Rpb24gdmFsaWRhdGVBcHBJZCgpIHtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xufVxuXG4vLyBBIHByb21pc2V5IHdyYXBwZXIgZm9yIGFwaSByZXF1ZXN0c1xuZnVuY3Rpb24gcmVxdWVzdChwYXRoLCBhY2Nlc3NfdG9rZW4pIHtcbiAgcmV0dXJuIGh0dHBzUmVxdWVzdC5nZXQoe1xuICAgIGhvc3Q6ICdhcGkubWVldHVwLmNvbScsXG4gICAgcGF0aDogJy8yLycgKyBwYXRoLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIEF1dGhvcml6YXRpb246ICdiZWFyZXIgJyArIGFjY2Vzc190b2tlbixcbiAgICB9LFxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHZhbGlkYXRlQXBwSWQ6IHZhbGlkYXRlQXBwSWQsXG4gIHZhbGlkYXRlQXV0aERhdGE6IHZhbGlkYXRlQXV0aERhdGEsXG59O1xuIl19