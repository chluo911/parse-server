"use strict";function cov_17rnspla93(){var path="/parse-server/lib/GraphQL/loaders/parseClassTypes.js";var hash="66893d68be5eb68ef73e7b533d73515a049cb0f4";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/GraphQL/loaders/parseClassTypes.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:11,column:3}},"2":{start:{line:9,column:4},end:{line:9,column:52}},"3":{start:{line:12,column:0},end:{line:12,column:22}},"4":{start:{line:14,column:15},end:{line:14,column:33}},"5":{start:{line:16,column:20},end:{line:16,column:44}},"6":{start:{line:18,column:25},end:{line:18,column:79}},"7":{start:{line:20,column:26},end:{line:20,column:83}},"8":{start:{line:22,column:21},end:{line:22,column:82}},"9":{start:{line:24,column:30},end:{line:24,column:81}},"10":{start:{line:26,column:17},end:{line:26,column:53}},"11":{start:{line:28,column:17},end:{line:28,column:53}},"12":{start:{line:30,column:18},end:{line:30,column:55}},"13":{start:{line:32,column:22},end:{line:32,column:63}},"14":{start:{line:34,column:25},end:{line:34,column:56}},"15":{start:{line:36,column:49},end:{line:36,column:96}},"16":{start:{line:36,column:84},end:{line:36,column:96}},"17":{start:{line:36,column:121},end:{line:36,column:134}},"18":{start:{line:36,column:159},end:{line:36,column:172}},"19":{start:{line:36,column:174},end:{line:36,column:309}},"20":{start:{line:36,column:234},end:{line:36,column:292}},"21":{start:{line:38,column:53},end:{line:38,column:111}},"22":{start:{line:38,column:98},end:{line:38,column:109}},"23":{start:{line:38,column:112},end:{line:38,column:214}},"24":{start:{line:38,column:188},end:{line:38,column:212}},"25":{start:{line:38,column:227},end:{line:38,column:264}},"26":{start:{line:38,column:266},end:{line:38,column:321}},"27":{start:{line:38,column:297},end:{line:38,column:319}},"28":{start:{line:38,column:335},end:{line:38,column:337}},"29":{start:{line:38,column:367},end:{line:38,column:423}},"30":{start:{line:38,column:425},end:{line:38,column:726}},"31":{start:{line:38,column:448},end:{line:38,column:724}},"32":{start:{line:38,column:534},end:{line:38,column:606}},"33":{start:{line:38,column:608},end:{line:38,column:722}},"34":{start:{line:38,column:646},end:{line:38,column:687}},"35":{start:{line:38,column:697},end:{line:38,column:720}},"36":{start:{line:38,column:727},end:{line:38,column:748}},"37":{start:{line:38,column:749},end:{line:38,column:787}},"38":{start:{line:38,column:762},end:{line:38,column:785}},"39":{start:{line:38,column:788},end:{line:38,column:802}},"40":{start:{line:40,column:39},end:{line:40,column:93}},"41":{start:{line:42,column:54},end:{line:42,column:73}},"42":{start:{line:42,column:75},end:{line:42,column:330}},"43":{start:{line:42,column:125},end:{line:42,column:161}},"44":{start:{line:42,column:163},end:{line:42,column:296}},"45":{start:{line:42,column:185},end:{line:42,column:294}},"46":{start:{line:42,column:227},end:{line:42,column:290}},"47":{start:{line:42,column:297},end:{line:42,column:328}},"48":{start:{line:42,column:331},end:{line:42,column:343}},"49":{start:{line:44,column:33},end:{line:44,column:517}},"50":{start:{line:44,column:46},end:{line:44,column:47}},"51":{start:{line:44,column:91},end:{line:44,column:131}},"52":{start:{line:44,column:133},end:{line:44,column:515}},"53":{start:{line:44,column:146},end:{line:44,column:247}},"54":{start:{line:44,column:201},end:{line:44,column:243}},"55":{start:{line:44,column:255},end:{line:44,column:515}},"56":{start:{line:44,column:295},end:{line:44,column:369}},"57":{start:{line:44,column:379},end:{line:44,column:513}},"58":{start:{line:44,column:428},end:{line:44,column:509}},"59":{start:{line:44,column:518},end:{line:44,column:532}},"60":{start:{line:46,column:44},end:{line:46,column:195}},"61":{start:{line:46,column:62},end:{line:46,column:166}},"62":{start:{line:46,column:176},end:{line:46,column:193}},"63":{start:{line:46,column:196},end:{line:46,column:207}},"64":{start:{line:48,column:32},end:{line:50,column:1}},"65":{start:{line:49,column:2},end:{line:49,column:57}},"66":{start:{line:52,column:37},end:{line:136,column:1}},"67":{start:{line:53,column:22},end:{line:53,column:65}},"68":{start:{line:59,column:6},end:{line:59,column:47}},"69":{start:{line:66,column:28},end:{line:68,column:4}},"70":{start:{line:67,column:4},end:{line:67,column:99}},"71":{start:{line:70,column:2},end:{line:76,column:3}},"72":{start:{line:71,column:4},end:{line:73,column:7}},"73":{start:{line:72,column:6},end:{line:72,column:55}},"74":{start:{line:75,column:4},end:{line:75,column:42}},"75":{start:{line:78,column:2},end:{line:84,column:3}},"76":{start:{line:79,column:4},end:{line:81,column:7}},"77":{start:{line:80,column:6},end:{line:80,column:55}},"78":{start:{line:83,column:4},end:{line:83,column:42}},"79":{start:{line:86,column:2},end:{line:92,column:3}},"80":{start:{line:87,column:4},end:{line:89,column:7}},"81":{start:{line:88,column:6},end:{line:88,column:49}},"82":{start:{line:91,column:4},end:{line:91,column:42}},"83":{start:{line:95,column:2},end:{line:97,column:3}},"84":{start:{line:96,column:4},end:{line:96,column:92}},"85":{start:{line:96,column:64},end:{line:96,column:90}},"86":{start:{line:99,column:2},end:{line:105,column:3}},"87":{start:{line:100,column:4},end:{line:102,column:7}},"88":{start:{line:101,column:6},end:{line:101,column:53}},"89":{start:{line:104,column:4},end:{line:104,column:40}},"90":{start:{line:107,column:2},end:{line:127,column:3}},"91":{start:{line:108,column:4},end:{line:108,column:40}},"92":{start:{line:110,column:4},end:{line:118,column:5}},"93":{start:{line:113,column:6},end:{line:117,column:9}},"94":{start:{line:120,column:4},end:{line:126,column:7}},"95":{start:{line:121,column:6},end:{line:125,column:8}},"96":{start:{line:129,column:2},end:{line:135,column:4}},"97":{start:{line:138,column:13},end:{line:528,column:1}},"98":{start:{line:139,column:20},end:{line:139,column:40}},"99":{start:{line:140,column:27},end:{line:140,column:81}},"100":{start:{line:147,column:6},end:{line:147,column:64}},"101":{start:{line:151,column:6},end:{line:151,column:75}},"102":{start:{line:152,column:37},end:{line:152,column:75}},"103":{start:{line:153,column:31},end:{line:174,column:4}},"104":{start:{line:156,column:18},end:{line:173,column:6}},"105":{start:{line:157,column:19},end:{line:157,column:167}},"106":{start:{line:159,column:6},end:{line:168,column:7}},"107":{start:{line:160,column:8},end:{line:165,column:11}},"108":{start:{line:167,column:8},end:{line:167,column:22}},"109":{start:{line:175,column:2},end:{line:175,column:85}},"110":{start:{line:176,column:37},end:{line:176,column:75}},"111":{start:{line:177,column:31},end:{line:198,column:4}},"112":{start:{line:180,column:18},end:{line:197,column:6}},"113":{start:{line:181,column:19},end:{line:181,column:167}},"114":{start:{line:183,column:6},end:{line:192,column:7}},"115":{start:{line:184,column:8},end:{line:189,column:11}},"116":{start:{line:191,column:8},end:{line:191,column:22}},"117":{start:{line:199,column:2},end:{line:199,column:85}},"118":{start:{line:200,column:38},end:{line:200,column:71}},"119":{start:{line:201,column:32},end:{line:221,column:4}},"120":{start:{line:205,column:21},end:{line:210,column:7}},"121":{start:{line:212,column:6},end:{line:217,column:7}},"122":{start:{line:213,column:8},end:{line:216,column:10}},"123":{start:{line:219,column:6},end:{line:219,column:20}},"124":{start:{line:222,column:2},end:{line:222,column:117}},"125":{start:{line:223,column:39},end:{line:223,column:73}},"126":{start:{line:224,column:33},end:{line:248,column:4}},"127":{start:{line:228,column:21},end:{line:237,column:7}},"128":{start:{line:239,column:6},end:{line:244,column:7}},"129":{start:{line:240,column:8},end:{line:243,column:10}},"130":{start:{line:246,column:6},end:{line:246,column:20}},"131":{start:{line:249,column:2},end:{line:249,column:119}},"132":{start:{line:250,column:42},end:{line:250,column:73}},"133":{start:{line:251,column:36},end:{line:287,column:4}},"134":{start:{line:254,column:18},end:{line:286,column:6}},"135":{start:{line:255,column:6},end:{line:258,column:7}},"136":{start:{line:256,column:8},end:{line:256,column:169}},"137":{start:{line:257,column:8},end:{line:257,column:22}},"138":{start:{line:260,column:25},end:{line:260,column:60}},"139":{start:{line:261,column:19},end:{line:261,column:194}},"140":{start:{line:263,column:6},end:{line:272,column:7}},"141":{start:{line:264,column:8},end:{line:269,column:11}},"142":{start:{line:271,column:8},end:{line:271,column:22}},"143":{start:{line:288,column:2},end:{line:288,column:125}},"144":{start:{line:289,column:50},end:{line:289,column:89}},"145":{start:{line:290,column:44},end:{line:307,column:4}},"146":{start:{line:293,column:19},end:{line:306,column:5}},"147":{start:{line:308,column:2},end:{line:308,column:141}},"148":{start:{line:309,column:36},end:{line:309,column:62}},"149":{start:{line:310,column:30},end:{line:338,column:4}},"150":{start:{line:318,column:10},end:{line:318,column:21}},"151":{start:{line:320,column:32},end:{line:320,column:61}},"152":{start:{line:322,column:20},end:{line:322,column:55}},"153":{start:{line:324,column:6},end:{line:328,column:7}},"154":{start:{line:325,column:8},end:{line:327,column:10}},"155":{start:{line:330,column:6},end:{line:334,column:7}},"156":{start:{line:331,column:8},end:{line:333,column:10}},"157":{start:{line:336,column:6},end:{line:336,column:31}},"158":{start:{line:339,column:2},end:{line:339,column:83}},"159":{start:{line:341,column:31},end:{line:353,column:4}},"160":{start:{line:355,column:37},end:{line:355,column:58}},"161":{start:{line:356,column:21},end:{line:356,column:94}},"162":{start:{line:358,column:28},end:{line:360,column:45}},"163":{start:{line:359,column:59},end:{line:359,column:71}},"164":{start:{line:362,column:23},end:{line:471,column:3}},"165":{start:{line:363,column:4},end:{line:470,column:26}},"166":{start:{line:364,column:19},end:{line:364,column:169}},"167":{start:{line:366,column:6},end:{line:469,column:7}},"168":{start:{line:367,column:38},end:{line:367,column:110}},"169":{start:{line:368,column:21},end:{line:368,column:99}},"170":{start:{line:369,column:8},end:{line:419,column:11}},"171":{start:{line:376,column:14},end:{line:415,column:15}},"172":{start:{line:386,column:20},end:{line:386,column:24}},"173":{start:{line:391,column:20},end:{line:391,column:33}},"174":{start:{line:396,column:20},end:{line:396,column:27}},"175":{start:{line:397,column:39},end:{line:397,column:81}},"176":{start:{line:401,column:20},end:{line:401,column:226}},"177":{start:{line:401,column:97},end:{line:401,column:128}},"178":{start:{line:401,column:143},end:{line:401,column:175}},"179":{start:{line:401,column:193},end:{line:401,column:224}},"180":{start:{line:402,column:35},end:{line:402,column:59}},"181":{start:{line:403,column:16},end:{line:412,column:233}},"182":{start:{line:414,column:16},end:{line:414,column:50}},"183":{start:{line:420,column:13},end:{line:469,column:7}},"184":{start:{line:421,column:8},end:{line:438,column:11}},"185":{start:{line:427,column:14},end:{line:434,column:15}},"186":{start:{line:428,column:16},end:{line:431,column:20}},"187":{start:{line:428,column:68},end:{line:431,column:17}},"188":{start:{line:433,column:16},end:{line:433,column:28}},"189":{start:{line:439,column:13},end:{line:469,column:7}},"190":{start:{line:440,column:8},end:{line:459,column:11}},"191":{start:{line:446,column:14},end:{line:446,column:46}},"192":{start:{line:446,column:34},end:{line:446,column:46}},"193":{start:{line:447,column:14},end:{line:455,column:17}},"194":{start:{line:448,column:16},end:{line:454,column:17}},"195":{start:{line:449,column:18},end:{line:449,column:30}},"196":{start:{line:451,column:18},end:{line:453,column:20}},"197":{start:{line:460,column:13},end:{line:469,column:7}},"198":{start:{line:461,column:8},end:{line:466,column:11}},"199":{start:{line:468,column:8},end:{line:468,column:22}},"200":{start:{line:473,column:31},end:{line:478,column:4}},"201":{start:{line:479,column:2},end:{line:479,column:85}},"202":{start:{line:483,column:6},end:{line:489,column:4}},"203":{start:{line:490,column:35},end:{line:490,column:44}},"204":{start:{line:492,column:2},end:{line:494,column:3}},"205":{start:{line:493,column:4},end:{line:493,column:48}},"206":{start:{line:496,column:2},end:{line:511,column:4}},"207":{start:{line:513,column:2},end:{line:527,column:3}},"208":{start:{line:514,column:23},end:{line:524,column:6}},"209":{start:{line:517,column:21},end:{line:523,column:7}},"210":{start:{line:525,column:4},end:{line:525,column:62}},"211":{start:{line:526,column:4},end:{line:526,column:47}},"212":{start:{line:530,column:0},end:{line:530,column:20}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:8,column:7},end:{line:8,column:8}},loc:{start:{line:8,column:19},end:{line:10,column:3}},line:8},"1":{name:"_getRequireWildcardCache",decl:{start:{line:36,column:9},end:{line:36,column:33}},loc:{start:{line:36,column:47},end:{line:36,column:311}},line:36},"2":{name:"(anonymous_2)",decl:{start:{line:36,column:209},end:{line:36,column:210}},loc:{start:{line:36,column:232},end:{line:36,column:294}},line:36},"3":{name:"_interopRequireWildcard",decl:{start:{line:38,column:9},end:{line:38,column:32}},loc:{start:{line:38,column:51},end:{line:38,column:804}},line:38},"4":{name:"_interopRequireDefault",decl:{start:{line:40,column:9},end:{line:40,column:31}},loc:{start:{line:40,column:37},end:{line:40,column:95}},line:40},"5":{name:"ownKeys",decl:{start:{line:42,column:9},end:{line:42,column:16}},loc:{start:{line:42,column:41},end:{line:42,column:345}},line:42},"6":{name:"(anonymous_6)",decl:{start:{line:42,column:210},end:{line:42,column:211}},loc:{start:{line:42,column:225},end:{line:42,column:292}},line:42},"7":{name:"_objectSpread",decl:{start:{line:44,column:9},end:{line:44,column:22}},loc:{start:{line:44,column:31},end:{line:44,column:534}},line:44},"8":{name:"(anonymous_8)",decl:{start:{line:44,column:184},end:{line:44,column:185}},loc:{start:{line:44,column:199},end:{line:44,column:245}},line:44},"9":{name:"(anonymous_9)",decl:{start:{line:44,column:411},end:{line:44,column:412}},loc:{start:{line:44,column:426},end:{line:44,column:511}},line:44},"10":{name:"_defineProperty",decl:{start:{line:46,column:9},end:{line:46,column:24}},loc:{start:{line:46,column:42},end:{line:46,column:209}},line:46},"11":{name:"(anonymous_11)",decl:{start:{line:48,column:32},end:{line:48,column:33}},loc:{start:{line:48,column:60},end:{line:50,column:1}},line:48},"12":{name:"(anonymous_12)",decl:{start:{line:52,column:37},end:{line:52,column:38}},loc:{start:{line:52,column:77},end:{line:136,column:1}},line:52},"13":{name:"(anonymous_13)",decl:{start:{line:66,column:47},end:{line:66,column:48}},loc:{start:{line:66,column:56},end:{line:68,column:3}},line:66},"14":{name:"(anonymous_14)",decl:{start:{line:71,column:49},end:{line:71,column:50}},loc:{start:{line:71,column:58},end:{line:73,column:5}},line:71},"15":{name:"(anonymous_15)",decl:{start:{line:79,column:49},end:{line:79,column:50}},loc:{start:{line:79,column:58},end:{line:81,column:5}},line:79},"16":{name:"(anonymous_16)",decl:{start:{line:87,column:49},end:{line:87,column:50}},loc:{start:{line:87,column:58},end:{line:89,column:5}},line:87},"17":{name:"(anonymous_17)",decl:{start:{line:96,column:49},end:{line:96,column:50}},loc:{start:{line:96,column:64},end:{line:96,column:90}},line:96},"18":{name:"(anonymous_18)",decl:{start:{line:100,column:53},end:{line:100,column:54}},loc:{start:{line:100,column:62},end:{line:102,column:5}},line:100},"19":{name:"(anonymous_19)",decl:{start:{line:120,column:38},end:{line:120,column:39}},loc:{start:{line:120,column:47},end:{line:126,column:5}},line:120},"20":{name:"(anonymous_20)",decl:{start:{line:138,column:13},end:{line:138,column:14}},loc:{start:{line:138,column:67},end:{line:528,column:1}},line:138},"21":{name:"(anonymous_21)",decl:{start:{line:156,column:12},end:{line:156,column:13}},loc:{start:{line:156,column:18},end:{line:173,column:6}},line:156},"22":{name:"(anonymous_22)",decl:{start:{line:156,column:43},end:{line:156,column:44}},loc:{start:{line:156,column:62},end:{line:169,column:5}},line:156},"23":{name:"(anonymous_23)",decl:{start:{line:180,column:12},end:{line:180,column:13}},loc:{start:{line:180,column:18},end:{line:197,column:6}},line:180},"24":{name:"(anonymous_24)",decl:{start:{line:180,column:43},end:{line:180,column:44}},loc:{start:{line:180,column:62},end:{line:193,column:5}},line:180},"25":{name:"(anonymous_25)",decl:{start:{line:204,column:12},end:{line:204,column:13}},loc:{start:{line:204,column:18},end:{line:220,column:5}},line:204},"26":{name:"(anonymous_26)",decl:{start:{line:227,column:12},end:{line:227,column:13}},loc:{start:{line:227,column:18},end:{line:247,column:5}},line:227},"27":{name:"(anonymous_27)",decl:{start:{line:254,column:12},end:{line:254,column:13}},loc:{start:{line:254,column:18},end:{line:286,column:6}},line:254},"28":{name:"(anonymous_28)",decl:{start:{line:254,column:79},end:{line:254,column:80}},loc:{start:{line:254,column:98},end:{line:273,column:5}},line:254},"29":{name:"(anonymous_29)",decl:{start:{line:293,column:12},end:{line:293,column:13}},loc:{start:{line:293,column:19},end:{line:306,column:5}},line:293},"30":{name:"(anonymous_30)",decl:{start:{line:313,column:35},end:{line:313,column:36}},loc:{start:{line:313,column:64},end:{line:337,column:5}},line:313},"31":{name:"(anonymous_31)",decl:{start:{line:359,column:52},end:{line:359,column:53}},loc:{start:{line:359,column:59},end:{line:359,column:71}},line:359},"32":{name:"(anonymous_32)",decl:{start:{line:362,column:23},end:{line:362,column:24}},loc:{start:{line:362,column:29},end:{line:471,column:3}},line:362},"33":{name:"(anonymous_33)",decl:{start:{line:363,column:36},end:{line:363,column:37}},loc:{start:{line:363,column:55},end:{line:470,column:5}},line:363},"34":{name:"(anonymous_34)",decl:{start:{line:375,column:12},end:{line:375,column:13}},loc:{start:{line:375,column:60},end:{line:416,column:13}},line:375},"35":{name:"(anonymous_35)",decl:{start:{line:401,column:88},end:{line:401,column:89}},loc:{start:{line:401,column:97},end:{line:401,column:128}},line:401},"36":{name:"(anonymous_36)",decl:{start:{line:401,column:134},end:{line:401,column:135}},loc:{start:{line:401,column:143},end:{line:401,column:175}},line:401},"37":{name:"(anonymous_37)",decl:{start:{line:401,column:184},end:{line:401,column:185}},loc:{start:{line:401,column:193},end:{line:401,column:224}},line:401},"38":{name:"(anonymous_38)",decl:{start:{line:426,column:12},end:{line:426,column:13}},loc:{start:{line:426,column:34},end:{line:435,column:13}},line:426},"39":{name:"(anonymous_39)",decl:{start:{line:428,column:53},end:{line:428,column:54}},loc:{start:{line:428,column:68},end:{line:431,column:17}},line:428},"40":{name:"(anonymous_40)",decl:{start:{line:445,column:12},end:{line:445,column:13}},loc:{start:{line:445,column:34},end:{line:456,column:13}},line:445},"41":{name:"(anonymous_41)",decl:{start:{line:447,column:39},end:{line:447,column:40}},loc:{start:{line:447,column:53},end:{line:455,column:15}},line:447},"42":{name:"(anonymous_42)",decl:{start:{line:517,column:14},end:{line:517,column:15}},loc:{start:{line:517,column:21},end:{line:523,column:7}},line:517}},branchMap:{"0":{loc:{start:{line:36,column:49},end:{line:36,column:96}},type:"if",locations:[{start:{line:36,column:49},end:{line:36,column:96}},{start:{line:36,column:49},end:{line:36,column:96}}],line:36},"1":{loc:{start:{line:36,column:241},end:{line:36,column:291}},type:"cond-expr",locations:[{start:{line:36,column:255},end:{line:36,column:271}},{start:{line:36,column:274},end:{line:36,column:291}}],line:36},"2":{loc:{start:{line:38,column:53},end:{line:38,column:111}},type:"if",locations:[{start:{line:38,column:53},end:{line:38,column:111}},{start:{line:38,column:53},end:{line:38,column:111}}],line:38},"3":{loc:{start:{line:38,column:57},end:{line:38,column:94}},type:"binary-expr",locations:[{start:{line:38,column:57},end:{line:38,column:69}},{start:{line:38,column:73},end:{line:38,column:76}},{start:{line:38,column:80},end:{line:38,column:94}}],line:38},"4":{loc:{start:{line:38,column:112},end:{line:38,column:214}},type:"if",locations:[{start:{line:38,column:112},end:{line:38,column:214}},{start:{line:38,column:112},end:{line:38,column:214}}],line:38},"5":{loc:{start:{line:38,column:116},end:{line:38,column:184}},type:"binary-expr",locations:[{start:{line:38,column:116},end:{line:38,column:128}},{start:{line:38,column:132},end:{line:38,column:155}},{start:{line:38,column:159},end:{line:38,column:184}}],line:38},"6":{loc:{start:{line:38,column:266},end:{line:38,column:321}},type:"if",locations:[{start:{line:38,column:266},end:{line:38,column:321}},{start:{line:38,column:266},end:{line:38,column:321}}],line:38},"7":{loc:{start:{line:38,column:270},end:{line:38,column:293}},type:"binary-expr",locations:[{start:{line:38,column:270},end:{line:38,column:275}},{start:{line:38,column:279},end:{line:38,column:293}}],line:38},"8":{loc:{start:{line:38,column:367},end:{line:38,column:423}},type:"binary-expr",locations:[{start:{line:38,column:367},end:{line:38,column:388}},{start:{line:38,column:392},end:{line:38,column:423}}],line:38},"9":{loc:{start:{line:38,column:448},end:{line:38,column:724}},type:"if",locations:[{start:{line:38,column:448},end:{line:38,column:724}},{start:{line:38,column:448},end:{line:38,column:724}}],line:38},"10":{loc:{start:{line:38,column:452},end:{line:38,column:519}},type:"binary-expr",locations:[{start:{line:38,column:452},end:{line:38,column:469}},{start:{line:38,column:473},end:{line:38,column:519}}],line:38},"11":{loc:{start:{line:38,column:534},end:{line:38,column:606}},type:"cond-expr",locations:[{start:{line:38,column:558},end:{line:38,column:599}},{start:{line:38,column:602},end:{line:38,column:606}}],line:38},"12":{loc:{start:{line:38,column:608},end:{line:38,column:722}},type:"if",locations:[{start:{line:38,column:608},end:{line:38,column:722}},{start:{line:38,column:608},end:{line:38,column:722}}],line:38},"13":{loc:{start:{line:38,column:612},end:{line:38,column:642}},type:"binary-expr",locations:[{start:{line:38,column:612},end:{line:38,column:616}},{start:{line:38,column:621},end:{line:38,column:629}},{start:{line:38,column:633},end:{line:38,column:641}}],line:38},"14":{loc:{start:{line:38,column:749},end:{line:38,column:787}},type:"if",locations:[{start:{line:38,column:749},end:{line:38,column:787}},{start:{line:38,column:749},end:{line:38,column:787}}],line:38},"15":{loc:{start:{line:40,column:46},end:{line:40,column:92}},type:"cond-expr",locations:[{start:{line:40,column:70},end:{line:40,column:73}},{start:{line:40,column:76},end:{line:40,column:92}}],line:40},"16":{loc:{start:{line:40,column:46},end:{line:40,column:67}},type:"binary-expr",locations:[{start:{line:40,column:46},end:{line:40,column:49}},{start:{line:40,column:53},end:{line:40,column:67}}],line:40},"17":{loc:{start:{line:42,column:75},end:{line:42,column:330}},type:"if",locations:[{start:{line:42,column:75},end:{line:42,column:330}},{start:{line:42,column:75},end:{line:42,column:330}}],line:42},"18":{loc:{start:{line:42,column:163},end:{line:42,column:296}},type:"if",locations:[{start:{line:42,column:163},end:{line:42,column:296}},{start:{line:42,column:163},end:{line:42,column:296}}],line:42},"19":{loc:{start:{line:44,column:91},end:{line:44,column:131}},type:"cond-expr",locations:[{start:{line:44,column:114},end:{line:44,column:126}},{start:{line:44,column:129},end:{line:44,column:131}}],line:44},"20":{loc:{start:{line:44,column:133},end:{line:44,column:515}},type:"if",locations:[{start:{line:44,column:133},end:{line:44,column:515}},{start:{line:44,column:133},end:{line:44,column:515}}],line:44},"21":{loc:{start:{line:44,column:255},end:{line:44,column:515}},type:"if",locations:[{start:{line:44,column:255},end:{line:44,column:515}},{start:{line:44,column:255},end:{line:44,column:515}}],line:44},"22":{loc:{start:{line:46,column:44},end:{line:46,column:195}},type:"if",locations:[{start:{line:46,column:44},end:{line:46,column:195}},{start:{line:46,column:44},end:{line:46,column:195}}],line:46},"23":{loc:{start:{line:49,column:9},end:{line:49,column:56}},type:"binary-expr",locations:[{start:{line:49,column:9},end:{line:49,column:25}},{start:{line:49,column:29},end:{line:49,column:50}},{start:{line:49,column:54},end:{line:49,column:56}}],line:49},"24":{loc:{start:{line:67,column:11},end:{line:67,column:98}},type:"binary-expr",locations:[{start:{line:67,column:11},end:{line:67,column:80}},{start:{line:67,column:84},end:{line:67,column:98}}],line:67},"25":{loc:{start:{line:70,column:2},end:{line:76,column:3}},type:"if",locations:[{start:{line:70,column:2},end:{line:76,column:3}},{start:{line:70,column:2},end:{line:76,column:3}}],line:70},"26":{loc:{start:{line:70,column:6},end:{line:70,column:53}},type:"binary-expr",locations:[{start:{line:70,column:6},end:{line:70,column:24}},{start:{line:70,column:28},end:{line:70,column:53}}],line:70},"27":{loc:{start:{line:78,column:2},end:{line:84,column:3}},type:"if",locations:[{start:{line:78,column:2},end:{line:84,column:3}},{start:{line:78,column:2},end:{line:84,column:3}}],line:78},"28":{loc:{start:{line:78,column:6},end:{line:78,column:53}},type:"binary-expr",locations:[{start:{line:78,column:6},end:{line:78,column:24}},{start:{line:78,column:28},end:{line:78,column:53}}],line:78},"29":{loc:{start:{line:86,column:2},end:{line:92,column:3}},type:"if",locations:[{start:{line:86,column:2},end:{line:92,column:3}},{start:{line:86,column:2},end:{line:92,column:3}}],line:86},"30":{loc:{start:{line:95,column:2},end:{line:97,column:3}},type:"if",locations:[{start:{line:95,column:2},end:{line:97,column:3}},{start:{line:95,column:2},end:{line:97,column:3}}],line:95},"31":{loc:{start:{line:99,column:2},end:{line:105,column:3}},type:"if",locations:[{start:{line:99,column:2},end:{line:105,column:3}},{start:{line:99,column:2},end:{line:105,column:3}}],line:99},"32":{loc:{start:{line:107,column:2},end:{line:127,column:3}},type:"if",locations:[{start:{line:107,column:2},end:{line:127,column:3}},{start:{line:107,column:2},end:{line:127,column:3}}],line:107},"33":{loc:{start:{line:110,column:4},end:{line:118,column:5}},type:"if",locations:[{start:{line:110,column:4},end:{line:118,column:5}},{start:{line:110,column:4},end:{line:118,column:5}}],line:110},"34":{loc:{start:{line:149,column:12},end:{line:149,column:34}},type:"default-arg",locations:[{start:{line:149,column:30},end:{line:149,column:34}}],line:149},"35":{loc:{start:{line:150,column:12},end:{line:150,column:34}},type:"default-arg",locations:[{start:{line:150,column:30},end:{line:150,column:34}}],line:150},"36":{loc:{start:{line:159,column:6},end:{line:168,column:7}},type:"if",locations:[{start:{line:159,column:6},end:{line:168,column:7}},{start:{line:159,column:6},end:{line:168,column:7}}],line:159},"37":{loc:{start:{line:163,column:18},end:{line:163,column:169}},type:"cond-expr",locations:[{start:{line:163,column:129},end:{line:163,column:162}},{start:{line:163,column:165},end:{line:163,column:169}}],line:163},"38":{loc:{start:{line:163,column:18},end:{line:163,column:126}},type:"binary-expr",locations:[{start:{line:163,column:18},end:{line:163,column:39}},{start:{line:163,column:44},end:{line:163,column:64}},{start:{line:163,column:68},end:{line:163,column:88}},{start:{line:163,column:93},end:{line:163,column:126}}],line:163},"39":{loc:{start:{line:183,column:6},end:{line:192,column:7}},type:"if",locations:[{start:{line:183,column:6},end:{line:192,column:7}},{start:{line:183,column:6},end:{line:192,column:7}}],line:183},"40":{loc:{start:{line:212,column:6},end:{line:217,column:7}},type:"if",locations:[{start:{line:212,column:6},end:{line:217,column:7}},{start:{line:212,column:6},end:{line:217,column:7}}],line:212},"41":{loc:{start:{line:222,column:28},end:{line:222,column:116}},type:"binary-expr",locations:[{start:{line:222,column:28},end:{line:222,column:86}},{start:{line:222,column:90},end:{line:222,column:116}}],line:222},"42":{loc:{start:{line:239,column:6},end:{line:244,column:7}},type:"if",locations:[{start:{line:239,column:6},end:{line:244,column:7}},{start:{line:239,column:6},end:{line:244,column:7}}],line:239},"43":{loc:{start:{line:249,column:29},end:{line:249,column:118}},type:"binary-expr",locations:[{start:{line:249,column:29},end:{line:249,column:88}},{start:{line:249,column:92},end:{line:249,column:118}}],line:249},"44":{loc:{start:{line:255,column:6},end:{line:258,column:7}},type:"if",locations:[{start:{line:255,column:6},end:{line:258,column:7}},{start:{line:255,column:6},end:{line:258,column:7}}],line:255},"45":{loc:{start:{line:260,column:25},end:{line:260,column:60}},type:"cond-expr",locations:[{start:{line:260,column:42},end:{line:260,column:52}},{start:{line:260,column:55},end:{line:260,column:60}}],line:260},"46":{loc:{start:{line:263,column:6},end:{line:272,column:7}},type:"if",locations:[{start:{line:263,column:6},end:{line:272,column:7}},{start:{line:263,column:6},end:{line:272,column:7}}],line:263},"47":{loc:{start:{line:288,column:32},end:{line:288,column:124}},type:"binary-expr",locations:[{start:{line:288,column:32},end:{line:288,column:94}},{start:{line:288,column:98},end:{line:288,column:124}}],line:288},"48":{loc:{start:{line:308,column:40},end:{line:308,column:140}},type:"binary-expr",locations:[{start:{line:308,column:40},end:{line:308,column:110}},{start:{line:308,column:114},end:{line:308,column:140}}],line:308},"49":{loc:{start:{line:322,column:20},end:{line:322,column:55}},type:"cond-expr",locations:[{start:{line:322,column:37},end:{line:322,column:47}},{start:{line:322,column:50},end:{line:322,column:55}}],line:322},"50":{loc:{start:{line:324,column:6},end:{line:328,column:7}},type:"if",locations:[{start:{line:324,column:6},end:{line:328,column:7}},{start:{line:324,column:6},end:{line:328,column:7}}],line:324},"51":{loc:{start:{line:330,column:6},end:{line:334,column:7}},type:"if",locations:[{start:{line:330,column:6},end:{line:334,column:7}},{start:{line:330,column:6},end:{line:334,column:7}}],line:330},"52":{loc:{start:{line:348,column:12},end:{line:348,column:137}},type:"cond-expr",locations:[{start:{line:348,column:36},end:{line:348,column:112}},{start:{line:348,column:115},end:{line:348,column:137}}],line:348},"53":{loc:{start:{line:366,column:6},end:{line:469,column:7}},type:"if",locations:[{start:{line:366,column:6},end:{line:469,column:7}},{start:{line:366,column:6},end:{line:469,column:7}}],line:366},"54":{loc:{start:{line:368,column:21},end:{line:368,column:99}},type:"cond-expr",locations:[{start:{line:368,column:45},end:{line:368,column:87}},{start:{line:368,column:90},end:{line:368,column:99}}],line:368},"55":{loc:{start:{line:373,column:18},end:{line:373,column:94}},type:"cond-expr",locations:[{start:{line:373,column:54},end:{line:373,column:87}},{start:{line:373,column:90},end:{line:373,column:94}}],line:373},"56":{loc:{start:{line:391,column:20},end:{line:391,column:33}},type:"binary-expr",locations:[{start:{line:391,column:20},end:{line:391,column:27}},{start:{line:391,column:31},end:{line:391,column:33}}],line:391},"57":{loc:{start:{line:402,column:35},end:{line:402,column:59}},type:"binary-expr",locations:[{start:{line:402,column:35},end:{line:402,column:40}},{start:{line:402,column:44},end:{line:402,column:59}}],line:402},"58":{loc:{start:{line:412,column:19},end:{line:412,column:30}},type:"binary-expr",locations:[{start:{line:412,column:19},end:{line:412,column:24}},{start:{line:412,column:28},end:{line:412,column:30}}],line:412},"59":{loc:{start:{line:420,column:13},end:{line:469,column:7}},type:"if",locations:[{start:{line:420,column:13},end:{line:469,column:7}},{start:{line:420,column:13},end:{line:469,column:7}}],line:420},"60":{loc:{start:{line:424,column:18},end:{line:424,column:94}},type:"cond-expr",locations:[{start:{line:424,column:54},end:{line:424,column:87}},{start:{line:424,column:90},end:{line:424,column:94}}],line:424},"61":{loc:{start:{line:427,column:14},end:{line:434,column:15}},type:"if",locations:[{start:{line:427,column:14},end:{line:434,column:15}},{start:{line:427,column:14},end:{line:434,column:15}}],line:427},"62":{loc:{start:{line:427,column:18},end:{line:427,column:60}},type:"binary-expr",locations:[{start:{line:427,column:18},end:{line:427,column:31}},{start:{line:427,column:35},end:{line:427,column:60}}],line:427},"63":{loc:{start:{line:439,column:13},end:{line:469,column:7}},type:"if",locations:[{start:{line:439,column:13},end:{line:469,column:7}},{start:{line:439,column:13},end:{line:469,column:7}}],line:439},"64":{loc:{start:{line:443,column:18},end:{line:443,column:94}},type:"cond-expr",locations:[{start:{line:443,column:54},end:{line:443,column:87}},{start:{line:443,column:90},end:{line:443,column:94}}],line:443},"65":{loc:{start:{line:446,column:14},end:{line:446,column:46}},type:"if",locations:[{start:{line:446,column:14},end:{line:446,column:46}},{start:{line:446,column:14},end:{line:446,column:46}}],line:446},"66":{loc:{start:{line:448,column:16},end:{line:454,column:17}},type:"if",locations:[{start:{line:448,column:16},end:{line:454,column:17}},{start:{line:448,column:16},end:{line:454,column:17}}],line:448},"67":{loc:{start:{line:448,column:20},end:{line:448,column:79}},type:"binary-expr",locations:[{start:{line:448,column:20},end:{line:448,column:34}},{start:{line:448,column:38},end:{line:448,column:51}},{start:{line:448,column:55},end:{line:448,column:79}}],line:448},"68":{loc:{start:{line:460,column:13},end:{line:469,column:7}},type:"if",locations:[{start:{line:460,column:13},end:{line:469,column:7}},{start:{line:460,column:13},end:{line:469,column:7}}],line:460},"69":{loc:{start:{line:464,column:18},end:{line:464,column:94}},type:"cond-expr",locations:[{start:{line:464,column:54},end:{line:464,column:87}},{start:{line:464,column:90},end:{line:464,column:94}}],line:464},"70":{loc:{start:{line:488,column:14},end:{line:488,column:66}},type:"binary-expr",locations:[{start:{line:488,column:14},end:{line:488,column:36}},{start:{line:488,column:40},end:{line:488,column:66}}],line:488},"71":{loc:{start:{line:492,column:2},end:{line:494,column:3}},type:"if",locations:[{start:{line:492,column:2},end:{line:494,column:3}},{start:{line:492,column:2},end:{line:494,column:3}}],line:492},"72":{loc:{start:{line:492,column:6},end:{line:492,column:122}},type:"binary-expr",locations:[{start:{line:492,column:6},end:{line:492,column:49}},{start:{line:492,column:53},end:{line:492,column:122}}],line:492},"73":{loc:{start:{line:513,column:2},end:{line:527,column:3}},type:"if",locations:[{start:{line:513,column:2},end:{line:527,column:3}},{start:{line:513,column:2},end:{line:527,column:3}}],line:513}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0],"35":[0],"36":[0,0],"37":[0,0],"38":[0,0,0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0]},inputSourceMap:{version:3,sources:["../../../src/GraphQL/loaders/parseClassTypes.js"],names:["getParseClassTypeConfig","parseClassConfig","type","getInputFieldsAndConstraints","parseClass","classFields","Object","keys","fields","concat","inputFields","allowedInputFields","outputFields","allowedOutputFields","constraintFields","allowedConstraintFields","sortFields","allowedSortFields","classOutputFields","classCreateFields","classUpdateFields","classConstraintFields","classSortFields","classCustomFields","filter","field","defaultGraphQLTypes","PARSE_OBJECT_FIELDS","includes","create","update","className","outputField","length","push","asc","desc","map","load","parseGraphQLSchema","graphQLClassName","isCreateEnabled","isUpdateEnabled","classGraphQLCreateTypeName","classGraphQLCreateType","GraphQLInputObjectType","name","description","reduce","targetClass","parseClassTypes","required","GraphQLNonNull","ACL","ACL_INPUT","addGraphQLType","classGraphQLUpdateTypeName","classGraphQLUpdateType","classGraphQLPointerTypeName","classGraphQLPointerType","link","GraphQLID","OBJECT","classGraphQLRelationTypeName","classGraphQLRelationType","add","GraphQLList","OBJECT_ID","remove","classGraphQLConstraintsTypeName","classGraphQLConstraintsType","log","warn","parseField","OR","AND","NOR","classGraphQLRelationConstraintsTypeName","classGraphQLRelationConstraintsType","have","haveNot","exists","GraphQLBoolean","classGraphQLOrderTypeName","classGraphQLOrderType","GraphQLEnumType","values","fieldConfig","updatedSortFields","value","classGraphQLFindArgs","where","order","GraphQLString","skip","SKIP_ATT","connectionArgs","options","READ_OPTIONS_ATT","classGraphQLOutputTypeName","interfaces","PARSE_OBJECT","relayNodeInterface","parseObjectFields","id","obj","objectId","targetParseClassTypes","args","undefined","resolve","source","context","queryInfo","first","after","last","before","readPreference","includeReadPreference","subqueryReadPreference","config","auth","info","selectedFields","include","startsWith","replace","indexOf","parseOrder","join","objectsQueries","findObjects","$relatedTo","object","__type","key","parseClasses","e","handleError","coordinates","coordinate","latitude","longitude","elem","classGraphQLOutputType","GraphQLObjectType","connectionType","edgeType","connectionFields","count","COUNT_ATT","nodeType","classGraphQLFindResultType","viewerType","sessionToken","SESSION_TOKEN_ATT","user"],mappings:"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",sourcesContent:["import {\n  GraphQLID,\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLList,\n  GraphQLInputObjectType,\n  GraphQLNonNull,\n  GraphQLBoolean,\n  GraphQLEnumType,\n} from 'graphql';\nimport { globalIdField, connectionArgs, connectionDefinitions } from 'graphql-relay';\nimport getFieldNames from 'graphql-list-fields';\nimport * as defaultGraphQLTypes from './defaultGraphQLTypes';\nimport * as objectsQueries from '../helpers/objectsQueries';\nimport { ParseGraphQLClassConfig } from '../../Controllers/ParseGraphQLController';\nimport { transformClassNameToGraphQL } from '../transformers/className';\nimport { transformInputTypeToGraphQL } from '../transformers/inputType';\nimport { transformOutputTypeToGraphQL } from '../transformers/outputType';\nimport { transformConstraintTypeToGraphQL } from '../transformers/constraintType';\nimport { extractKeysAndInclude, getParseClassMutationConfig } from '../parseGraphQLUtils';\n\nconst getParseClassTypeConfig = function (parseClassConfig: ?ParseGraphQLClassConfig) {\n  return (parseClassConfig && parseClassConfig.type) || {};\n};\n\nconst getInputFieldsAndConstraints = function (\n  parseClass,\n  parseClassConfig: ?ParseGraphQLClassConfig\n) {\n  const classFields = Object.keys(parseClass.fields).concat('id');\n  const {\n    inputFields: allowedInputFields,\n    outputFields: allowedOutputFields,\n    constraintFields: allowedConstraintFields,\n    sortFields: allowedSortFields,\n  } = getParseClassTypeConfig(parseClassConfig);\n\n  let classOutputFields;\n  let classCreateFields;\n  let classUpdateFields;\n  let classConstraintFields;\n  let classSortFields;\n\n  // All allowed customs fields\n  const classCustomFields = classFields.filter(field => {\n    return !Object.keys(defaultGraphQLTypes.PARSE_OBJECT_FIELDS).includes(field) && field !== 'id';\n  });\n\n  if (allowedInputFields && allowedInputFields.create) {\n    classCreateFields = classCustomFields.filter(field => {\n      return allowedInputFields.create.includes(field);\n    });\n  } else {\n    classCreateFields = classCustomFields;\n  }\n  if (allowedInputFields && allowedInputFields.update) {\n    classUpdateFields = classCustomFields.filter(field => {\n      return allowedInputFields.update.includes(field);\n    });\n  } else {\n    classUpdateFields = classCustomFields;\n  }\n\n  if (allowedOutputFields) {\n    classOutputFields = classCustomFields.filter(field => {\n      return allowedOutputFields.includes(field);\n    });\n  } else {\n    classOutputFields = classCustomFields;\n  }\n  // Filters the \"password\" field from class _User\n  if (parseClass.className === '_User') {\n    classOutputFields = classOutputFields.filter(outputField => outputField !== 'password');\n  }\n\n  if (allowedConstraintFields) {\n    classConstraintFields = classCustomFields.filter(field => {\n      return allowedConstraintFields.includes(field);\n    });\n  } else {\n    classConstraintFields = classFields;\n  }\n\n  if (allowedSortFields) {\n    classSortFields = allowedSortFields;\n    if (!classSortFields.length) {\n      // must have at least 1 order field\n      // otherwise the FindArgs Input Type will throw.\n      classSortFields.push({\n        field: 'id',\n        asc: true,\n        desc: true,\n      });\n    }\n  } else {\n    classSortFields = classFields.map(field => {\n      return { field, asc: true, desc: true };\n    });\n  }\n\n  return {\n    classCreateFields,\n    classUpdateFields,\n    classConstraintFields,\n    classOutputFields,\n    classSortFields,\n  };\n};\n\nconst load = (parseGraphQLSchema, parseClass, parseClassConfig: ?ParseGraphQLClassConfig) => {\n  const className = parseClass.className;\n  const graphQLClassName = transformClassNameToGraphQL(className);\n  const {\n    classCreateFields,\n    classUpdateFields,\n    classOutputFields,\n    classConstraintFields,\n    classSortFields,\n  } = getInputFieldsAndConstraints(parseClass, parseClassConfig);\n\n  const {\n    create: isCreateEnabled = true,\n    update: isUpdateEnabled = true,\n  } = getParseClassMutationConfig(parseClassConfig);\n\n  const classGraphQLCreateTypeName = `Create${graphQLClassName}FieldsInput`;\n  let classGraphQLCreateType = new GraphQLInputObjectType({\n    name: classGraphQLCreateTypeName,\n    description: `The ${classGraphQLCreateTypeName} input type is used in operations that involve creation of objects in the ${graphQLClassName} class.`,\n    fields: () =>\n      classCreateFields.reduce(\n        (fields, field) => {\n          const type = transformInputTypeToGraphQL(\n            parseClass.fields[field].type,\n            parseClass.fields[field].targetClass,\n            parseGraphQLSchema.parseClassTypes\n          );\n          if (type) {\n            return {\n              ...fields,\n              [field]: {\n                description: `This is the object ${field}.`,\n                type:\n                  (className === '_User' && (field === 'username' || field === 'password')) ||\n                  parseClass.fields[field].required\n                    ? new GraphQLNonNull(type)\n                    : type,\n              },\n            };\n          } else {\n            return fields;\n          }\n        },\n        {\n          ACL: { type: defaultGraphQLTypes.ACL_INPUT },\n        }\n      ),\n  });\n  classGraphQLCreateType = parseGraphQLSchema.addGraphQLType(classGraphQLCreateType);\n\n  const classGraphQLUpdateTypeName = `Update${graphQLClassName}FieldsInput`;\n  let classGraphQLUpdateType = new GraphQLInputObjectType({\n    name: classGraphQLUpdateTypeName,\n    description: `The ${classGraphQLUpdateTypeName} input type is used in operations that involve creation of objects in the ${graphQLClassName} class.`,\n    fields: () =>\n      classUpdateFields.reduce(\n        (fields, field) => {\n          const type = transformInputTypeToGraphQL(\n            parseClass.fields[field].type,\n            parseClass.fields[field].targetClass,\n            parseGraphQLSchema.parseClassTypes\n          );\n          if (type) {\n            return {\n              ...fields,\n              [field]: {\n                description: `This is the object ${field}.`,\n                type,\n              },\n            };\n          } else {\n            return fields;\n          }\n        },\n        {\n          ACL: { type: defaultGraphQLTypes.ACL_INPUT },\n        }\n      ),\n  });\n  classGraphQLUpdateType = parseGraphQLSchema.addGraphQLType(classGraphQLUpdateType);\n\n  const classGraphQLPointerTypeName = `${graphQLClassName}PointerInput`;\n  let classGraphQLPointerType = new GraphQLInputObjectType({\n    name: classGraphQLPointerTypeName,\n    description: `Allow to link OR add and link an object of the ${graphQLClassName} class.`,\n    fields: () => {\n      const fields = {\n        link: {\n          description: `Link an existing object from ${graphQLClassName} class. You can use either the global or the object id.`,\n          type: GraphQLID,\n        },\n      };\n      if (isCreateEnabled) {\n        fields['createAndLink'] = {\n          description: `Create and link an object from ${graphQLClassName} class.`,\n          type: classGraphQLCreateType,\n        };\n      }\n      return fields;\n    },\n  });\n  classGraphQLPointerType =\n    parseGraphQLSchema.addGraphQLType(classGraphQLPointerType) || defaultGraphQLTypes.OBJECT;\n\n  const classGraphQLRelationTypeName = `${graphQLClassName}RelationInput`;\n  let classGraphQLRelationType = new GraphQLInputObjectType({\n    name: classGraphQLRelationTypeName,\n    description: `Allow to add, remove, createAndAdd objects of the ${graphQLClassName} class into a relation field.`,\n    fields: () => {\n      const fields = {\n        add: {\n          description: `Add existing objects from the ${graphQLClassName} class into the relation. You can use either the global or the object ids.`,\n          type: new GraphQLList(defaultGraphQLTypes.OBJECT_ID),\n        },\n        remove: {\n          description: `Remove existing objects from the ${graphQLClassName} class out of the relation. You can use either the global or the object ids.`,\n          type: new GraphQLList(defaultGraphQLTypes.OBJECT_ID),\n        },\n      };\n      if (isCreateEnabled) {\n        fields['createAndAdd'] = {\n          description: `Create and add objects of the ${graphQLClassName} class into the relation.`,\n          type: new GraphQLList(new GraphQLNonNull(classGraphQLCreateType)),\n        };\n      }\n      return fields;\n    },\n  });\n  classGraphQLRelationType =\n    parseGraphQLSchema.addGraphQLType(classGraphQLRelationType) || defaultGraphQLTypes.OBJECT;\n\n  const classGraphQLConstraintsTypeName = `${graphQLClassName}WhereInput`;\n  let classGraphQLConstraintsType = new GraphQLInputObjectType({\n    name: classGraphQLConstraintsTypeName,\n    description: `The ${classGraphQLConstraintsTypeName} input type is used in operations that involve filtering objects of ${graphQLClassName} class.`,\n    fields: () => ({\n      ...classConstraintFields.reduce((fields, field) => {\n        if (['OR', 'AND', 'NOR'].includes(field)) {\n          parseGraphQLSchema.log.warn(\n            `Field ${field} could not be added to the auto schema ${classGraphQLConstraintsTypeName} because it collided with an existing one.`\n          );\n          return fields;\n        }\n        const parseField = field === 'id' ? 'objectId' : field;\n        const type = transformConstraintTypeToGraphQL(\n          parseClass.fields[parseField].type,\n          parseClass.fields[parseField].targetClass,\n          parseGraphQLSchema.parseClassTypes,\n          field\n        );\n        if (type) {\n          return {\n            ...fields,\n            [field]: {\n              description: `This is the object ${field}.`,\n              type,\n            },\n          };\n        } else {\n          return fields;\n        }\n      }, {}),\n      OR: {\n        description: 'This is the OR operator to compound constraints.',\n        type: new GraphQLList(new GraphQLNonNull(classGraphQLConstraintsType)),\n      },\n      AND: {\n        description: 'This is the AND operator to compound constraints.',\n        type: new GraphQLList(new GraphQLNonNull(classGraphQLConstraintsType)),\n      },\n      NOR: {\n        description: 'This is the NOR operator to compound constraints.',\n        type: new GraphQLList(new GraphQLNonNull(classGraphQLConstraintsType)),\n      },\n    }),\n  });\n  classGraphQLConstraintsType =\n    parseGraphQLSchema.addGraphQLType(classGraphQLConstraintsType) || defaultGraphQLTypes.OBJECT;\n\n  const classGraphQLRelationConstraintsTypeName = `${graphQLClassName}RelationWhereInput`;\n  let classGraphQLRelationConstraintsType = new GraphQLInputObjectType({\n    name: classGraphQLRelationConstraintsTypeName,\n    description: `The ${classGraphQLRelationConstraintsTypeName} input type is used in operations that involve filtering objects of ${graphQLClassName} class.`,\n    fields: () => ({\n      have: {\n        description: 'Run a relational/pointer query where at least one child object can match.',\n        type: classGraphQLConstraintsType,\n      },\n      haveNot: {\n        description:\n          'Run an inverted relational/pointer query where at least one child object can match.',\n        type: classGraphQLConstraintsType,\n      },\n      exists: {\n        description: 'Check if the relation/pointer contains objects.',\n        type: GraphQLBoolean,\n      },\n    }),\n  });\n  classGraphQLRelationConstraintsType =\n    parseGraphQLSchema.addGraphQLType(classGraphQLRelationConstraintsType) ||\n    defaultGraphQLTypes.OBJECT;\n\n  const classGraphQLOrderTypeName = `${graphQLClassName}Order`;\n  let classGraphQLOrderType = new GraphQLEnumType({\n    name: classGraphQLOrderTypeName,\n    description: `The ${classGraphQLOrderTypeName} input type is used when sorting objects of the ${graphQLClassName} class.`,\n    values: classSortFields.reduce((sortFields, fieldConfig) => {\n      const { field, asc, desc } = fieldConfig;\n      const updatedSortFields = {\n        ...sortFields,\n      };\n      const value = field === 'id' ? 'objectId' : field;\n      if (asc) {\n        updatedSortFields[`${field}_ASC`] = { value };\n      }\n      if (desc) {\n        updatedSortFields[`${field}_DESC`] = { value: `-${value}` };\n      }\n      return updatedSortFields;\n    }, {}),\n  });\n  classGraphQLOrderType = parseGraphQLSchema.addGraphQLType(classGraphQLOrderType);\n\n  const classGraphQLFindArgs = {\n    where: {\n      description: 'These are the conditions that the objects need to match in order to be found.',\n      type: classGraphQLConstraintsType,\n    },\n    order: {\n      description: 'The fields to be used when sorting the data fetched.',\n      type: classGraphQLOrderType\n        ? new GraphQLList(new GraphQLNonNull(classGraphQLOrderType))\n        : GraphQLString,\n    },\n    skip: defaultGraphQLTypes.SKIP_ATT,\n    ...connectionArgs,\n    options: defaultGraphQLTypes.READ_OPTIONS_ATT,\n  };\n  const classGraphQLOutputTypeName = `${graphQLClassName}`;\n  const interfaces = [defaultGraphQLTypes.PARSE_OBJECT, parseGraphQLSchema.relayNodeInterface];\n  const parseObjectFields = {\n    id: globalIdField(className, obj => obj.objectId),\n    ...defaultGraphQLTypes.PARSE_OBJECT_FIELDS,\n  };\n  const outputFields = () => {\n    return classOutputFields.reduce((fields, field) => {\n      const type = transformOutputTypeToGraphQL(\n        parseClass.fields[field].type,\n        parseClass.fields[field].targetClass,\n        parseGraphQLSchema.parseClassTypes\n      );\n      if (parseClass.fields[field].type === 'Relation') {\n        const targetParseClassTypes =\n          parseGraphQLSchema.parseClassTypes[parseClass.fields[field].targetClass];\n        const args = targetParseClassTypes ? targetParseClassTypes.classGraphQLFindArgs : undefined;\n        return {\n          ...fields,\n          [field]: {\n            description: `This is the object ${field}.`,\n            args,\n            type: parseClass.fields[field].required ? new GraphQLNonNull(type) : type,\n            async resolve(source, args, context, queryInfo) {\n              try {\n                const { where, order, skip, first, after, last, before, options } = args;\n                const { readPreference, includeReadPreference, subqueryReadPreference } =\n                  options || {};\n                const { config, auth, info } = context;\n                const selectedFields = getFieldNames(queryInfo);\n\n                const { keys, include } = extractKeysAndInclude(\n                  selectedFields\n                    .filter(field => field.startsWith('edges.node.'))\n                    .map(field => field.replace('edges.node.', ''))\n                    .filter(field => field.indexOf('edges.node') < 0)\n                );\n                const parseOrder = order && order.join(',');\n\n                return objectsQueries.findObjects(\n                  source[field].className,\n                  {\n                    $relatedTo: {\n                      object: {\n                        __type: 'Pointer',\n                        className: className,\n                        objectId: source.objectId,\n                      },\n                      key: field,\n                    },\n                    ...(where || {}),\n                  },\n                  parseOrder,\n                  skip,\n                  first,\n                  after,\n                  last,\n                  before,\n                  keys,\n                  include,\n                  false,\n                  readPreference,\n                  includeReadPreference,\n                  subqueryReadPreference,\n                  config,\n                  auth,\n                  info,\n                  selectedFields,\n                  parseGraphQLSchema.parseClasses\n                );\n              } catch (e) {\n                parseGraphQLSchema.handleError(e);\n              }\n            },\n          },\n        };\n      } else if (parseClass.fields[field].type === 'Polygon') {\n        return {\n          ...fields,\n          [field]: {\n            description: `This is the object ${field}.`,\n            type: parseClass.fields[field].required ? new GraphQLNonNull(type) : type,\n            async resolve(source) {\n              if (source[field] && source[field].coordinates) {\n                return source[field].coordinates.map(coordinate => ({\n                  latitude: coordinate[0],\n                  longitude: coordinate[1],\n                }));\n              } else {\n                return null;\n              }\n            },\n          },\n        };\n      } else if (parseClass.fields[field].type === 'Array') {\n        return {\n          ...fields,\n          [field]: {\n            description: `Use Inline Fragment on Array to get results: https://graphql.org/learn/queries/#inline-fragments`,\n            type: parseClass.fields[field].required ? new GraphQLNonNull(type) : type,\n            async resolve(source) {\n              if (!source[field]) return null;\n              return source[field].map(async elem => {\n                if (elem.className && elem.objectId && elem.__type === 'Object') {\n                  return elem;\n                } else {\n                  return { value: elem };\n                }\n              });\n            },\n          },\n        };\n      } else if (type) {\n        return {\n          ...fields,\n          [field]: {\n            description: `This is the object ${field}.`,\n            type: parseClass.fields[field].required ? new GraphQLNonNull(type) : type,\n          },\n        };\n      } else {\n        return fields;\n      }\n    }, parseObjectFields);\n  };\n  let classGraphQLOutputType = new GraphQLObjectType({\n    name: classGraphQLOutputTypeName,\n    description: `The ${classGraphQLOutputTypeName} object type is used in operations that involve outputting objects of ${graphQLClassName} class.`,\n    interfaces,\n    fields: outputFields,\n  });\n  classGraphQLOutputType = parseGraphQLSchema.addGraphQLType(classGraphQLOutputType);\n\n  const { connectionType, edgeType } = connectionDefinitions({\n    name: graphQLClassName,\n    connectionFields: {\n      count: defaultGraphQLTypes.COUNT_ATT,\n    },\n    nodeType: classGraphQLOutputType || defaultGraphQLTypes.OBJECT,\n  });\n  let classGraphQLFindResultType = undefined;\n  if (\n    parseGraphQLSchema.addGraphQLType(edgeType) &&\n    parseGraphQLSchema.addGraphQLType(connectionType, false, false, true)\n  ) {\n    classGraphQLFindResultType = connectionType;\n  }\n\n  parseGraphQLSchema.parseClassTypes[className] = {\n    classGraphQLPointerType,\n    classGraphQLRelationType,\n    classGraphQLCreateType,\n    classGraphQLUpdateType,\n    classGraphQLConstraintsType,\n    classGraphQLRelationConstraintsType,\n    classGraphQLFindArgs,\n    classGraphQLOutputType,\n    classGraphQLFindResultType,\n    config: {\n      parseClassConfig,\n      isCreateEnabled,\n      isUpdateEnabled,\n    },\n  };\n\n  if (className === '_User') {\n    const viewerType = new GraphQLObjectType({\n      name: 'Viewer',\n      description: `The Viewer object type is used in operations that involve outputting the current user data.`,\n      fields: () => ({\n        sessionToken: defaultGraphQLTypes.SESSION_TOKEN_ATT,\n        user: {\n          description: 'This is the current user.',\n          type: new GraphQLNonNull(classGraphQLOutputType),\n        },\n      }),\n    });\n    parseGraphQLSchema.addGraphQLType(viewerType, true, true);\n    parseGraphQLSchema.viewerType = viewerType;\n  }\n};\n\nexport { extractKeysAndInclude, load };\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"66893d68be5eb68ef73e7b533d73515a049cb0f4"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_17rnspla93=function(){return actualCoverage;};}return actualCoverage;}cov_17rnspla93();cov_17rnspla93().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_17rnspla93().s[1]++;Object.defineProperty(exports,"extractKeysAndInclude",{enumerable:true,get:function(){cov_17rnspla93().f[0]++;cov_17rnspla93().s[2]++;return _parseGraphQLUtils.extractKeysAndInclude;}});cov_17rnspla93().s[3]++;exports.load=void 0;var _graphql=(cov_17rnspla93().s[4]++,require("graphql"));var _graphqlRelay=(cov_17rnspla93().s[5]++,require("graphql-relay"));var _graphqlListFields=(cov_17rnspla93().s[6]++,_interopRequireDefault(require("graphql-list-fields")));var defaultGraphQLTypes=(cov_17rnspla93().s[7]++,_interopRequireWildcard(require("./defaultGraphQLTypes")));var objectsQueries=(cov_17rnspla93().s[8]++,_interopRequireWildcard(require("../helpers/objectsQueries")));var _ParseGraphQLController=(cov_17rnspla93().s[9]++,require("../../Controllers/ParseGraphQLController"));var _className=(cov_17rnspla93().s[10]++,require("../transformers/className"));var _inputType=(cov_17rnspla93().s[11]++,require("../transformers/inputType"));var _outputType=(cov_17rnspla93().s[12]++,require("../transformers/outputType"));var _constraintType=(cov_17rnspla93().s[13]++,require("../transformers/constraintType"));var _parseGraphQLUtils=(cov_17rnspla93().s[14]++,require("../parseGraphQLUtils"));function _getRequireWildcardCache(nodeInterop){cov_17rnspla93().f[1]++;cov_17rnspla93().s[15]++;if(typeof WeakMap!=="function"){cov_17rnspla93().b[0][0]++;cov_17rnspla93().s[16]++;return null;}else{cov_17rnspla93().b[0][1]++;}var cacheBabelInterop=(cov_17rnspla93().s[17]++,new WeakMap());var cacheNodeInterop=(cov_17rnspla93().s[18]++,new WeakMap());cov_17rnspla93().s[19]++;return(_getRequireWildcardCache=function(nodeInterop){cov_17rnspla93().f[2]++;cov_17rnspla93().s[20]++;return nodeInterop?(cov_17rnspla93().b[1][0]++,cacheNodeInterop):(cov_17rnspla93().b[1][1]++,cacheBabelInterop);})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){cov_17rnspla93().f[3]++;cov_17rnspla93().s[21]++;if((cov_17rnspla93().b[3][0]++,!nodeInterop)&&(cov_17rnspla93().b[3][1]++,obj)&&(cov_17rnspla93().b[3][2]++,obj.__esModule)){cov_17rnspla93().b[2][0]++;cov_17rnspla93().s[22]++;return obj;}else{cov_17rnspla93().b[2][1]++;}cov_17rnspla93().s[23]++;if((cov_17rnspla93().b[5][0]++,obj===null)||(cov_17rnspla93().b[5][1]++,typeof obj!=="object")&&(cov_17rnspla93().b[5][2]++,typeof obj!=="function")){cov_17rnspla93().b[4][0]++;cov_17rnspla93().s[24]++;return{default:obj};}else{cov_17rnspla93().b[4][1]++;}var cache=(cov_17rnspla93().s[25]++,_getRequireWildcardCache(nodeInterop));cov_17rnspla93().s[26]++;if((cov_17rnspla93().b[7][0]++,cache)&&(cov_17rnspla93().b[7][1]++,cache.has(obj))){cov_17rnspla93().b[6][0]++;cov_17rnspla93().s[27]++;return cache.get(obj);}else{cov_17rnspla93().b[6][1]++;}var newObj=(cov_17rnspla93().s[28]++,{});var hasPropertyDescriptor=(cov_17rnspla93().s[29]++,(cov_17rnspla93().b[8][0]++,Object.defineProperty)&&(cov_17rnspla93().b[8][1]++,Object.getOwnPropertyDescriptor));cov_17rnspla93().s[30]++;for(var key in obj){cov_17rnspla93().s[31]++;if((cov_17rnspla93().b[10][0]++,key!=="default")&&(cov_17rnspla93().b[10][1]++,Object.prototype.hasOwnProperty.call(obj,key))){cov_17rnspla93().b[9][0]++;var desc=(cov_17rnspla93().s[32]++,hasPropertyDescriptor?(cov_17rnspla93().b[11][0]++,Object.getOwnPropertyDescriptor(obj,key)):(cov_17rnspla93().b[11][1]++,null));cov_17rnspla93().s[33]++;if((cov_17rnspla93().b[13][0]++,desc)&&((cov_17rnspla93().b[13][1]++,desc.get)||(cov_17rnspla93().b[13][2]++,desc.set))){cov_17rnspla93().b[12][0]++;cov_17rnspla93().s[34]++;Object.defineProperty(newObj,key,desc);}else{cov_17rnspla93().b[12][1]++;cov_17rnspla93().s[35]++;newObj[key]=obj[key];}}else{cov_17rnspla93().b[9][1]++;}}cov_17rnspla93().s[36]++;newObj.default=obj;cov_17rnspla93().s[37]++;if(cache){cov_17rnspla93().b[14][0]++;cov_17rnspla93().s[38]++;cache.set(obj,newObj);}else{cov_17rnspla93().b[14][1]++;}cov_17rnspla93().s[39]++;return newObj;}function _interopRequireDefault(obj){cov_17rnspla93().f[4]++;cov_17rnspla93().s[40]++;return(cov_17rnspla93().b[16][0]++,obj)&&(cov_17rnspla93().b[16][1]++,obj.__esModule)?(cov_17rnspla93().b[15][0]++,obj):(cov_17rnspla93().b[15][1]++,{default:obj});}function ownKeys(object,enumerableOnly){cov_17rnspla93().f[5]++;var keys=(cov_17rnspla93().s[41]++,Object.keys(object));cov_17rnspla93().s[42]++;if(Object.getOwnPropertySymbols){cov_17rnspla93().b[17][0]++;var symbols=(cov_17rnspla93().s[43]++,Object.getOwnPropertySymbols(object));cov_17rnspla93().s[44]++;if(enumerableOnly){cov_17rnspla93().b[18][0]++;cov_17rnspla93().s[45]++;symbols=symbols.filter(function(sym){cov_17rnspla93().f[6]++;cov_17rnspla93().s[46]++;return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}else{cov_17rnspla93().b[18][1]++;}cov_17rnspla93().s[47]++;keys.push.apply(keys,symbols);}else{cov_17rnspla93().b[17][1]++;}cov_17rnspla93().s[48]++;return keys;}function _objectSpread(target){cov_17rnspla93().f[7]++;cov_17rnspla93().s[49]++;for(var i=(cov_17rnspla93().s[50]++,1);i<arguments.length;i++){var source=(cov_17rnspla93().s[51]++,arguments[i]!=null?(cov_17rnspla93().b[19][0]++,arguments[i]):(cov_17rnspla93().b[19][1]++,{}));cov_17rnspla93().s[52]++;if(i%2){cov_17rnspla93().b[20][0]++;cov_17rnspla93().s[53]++;ownKeys(Object(source),true).forEach(function(key){cov_17rnspla93().f[8]++;cov_17rnspla93().s[54]++;_defineProperty(target,key,source[key]);});}else{cov_17rnspla93().b[20][1]++;cov_17rnspla93().s[55]++;if(Object.getOwnPropertyDescriptors){cov_17rnspla93().b[21][0]++;cov_17rnspla93().s[56]++;Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{cov_17rnspla93().b[21][1]++;cov_17rnspla93().s[57]++;ownKeys(Object(source)).forEach(function(key){cov_17rnspla93().f[9]++;cov_17rnspla93().s[58]++;Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}}cov_17rnspla93().s[59]++;return target;}function _defineProperty(obj,key,value){cov_17rnspla93().f[10]++;cov_17rnspla93().s[60]++;if(key in obj){cov_17rnspla93().b[22][0]++;cov_17rnspla93().s[61]++;Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{cov_17rnspla93().b[22][1]++;cov_17rnspla93().s[62]++;obj[key]=value;}cov_17rnspla93().s[63]++;return obj;}cov_17rnspla93().s[64]++;const getParseClassTypeConfig=function(parseClassConfig){cov_17rnspla93().f[11]++;cov_17rnspla93().s[65]++;return(cov_17rnspla93().b[23][0]++,parseClassConfig)&&(cov_17rnspla93().b[23][1]++,parseClassConfig.type)||(cov_17rnspla93().b[23][2]++,{});};cov_17rnspla93().s[66]++;const getInputFieldsAndConstraints=function(parseClass,parseClassConfig){cov_17rnspla93().f[12]++;const classFields=(cov_17rnspla93().s[67]++,Object.keys(parseClass.fields).concat('id'));const{inputFields:allowedInputFields,outputFields:allowedOutputFields,constraintFields:allowedConstraintFields,sortFields:allowedSortFields}=(cov_17rnspla93().s[68]++,getParseClassTypeConfig(parseClassConfig));let classOutputFields;let classCreateFields;let classUpdateFields;let classConstraintFields;let classSortFields;// All allowed customs fields
const classCustomFields=(cov_17rnspla93().s[69]++,classFields.filter(field=>{cov_17rnspla93().f[13]++;cov_17rnspla93().s[70]++;return(cov_17rnspla93().b[24][0]++,!Object.keys(defaultGraphQLTypes.PARSE_OBJECT_FIELDS).includes(field))&&(cov_17rnspla93().b[24][1]++,field!=='id');}));cov_17rnspla93().s[71]++;if((cov_17rnspla93().b[26][0]++,allowedInputFields)&&(cov_17rnspla93().b[26][1]++,allowedInputFields.create)){cov_17rnspla93().b[25][0]++;cov_17rnspla93().s[72]++;classCreateFields=classCustomFields.filter(field=>{cov_17rnspla93().f[14]++;cov_17rnspla93().s[73]++;return allowedInputFields.create.includes(field);});}else{cov_17rnspla93().b[25][1]++;cov_17rnspla93().s[74]++;classCreateFields=classCustomFields;}cov_17rnspla93().s[75]++;if((cov_17rnspla93().b[28][0]++,allowedInputFields)&&(cov_17rnspla93().b[28][1]++,allowedInputFields.update)){cov_17rnspla93().b[27][0]++;cov_17rnspla93().s[76]++;classUpdateFields=classCustomFields.filter(field=>{cov_17rnspla93().f[15]++;cov_17rnspla93().s[77]++;return allowedInputFields.update.includes(field);});}else{cov_17rnspla93().b[27][1]++;cov_17rnspla93().s[78]++;classUpdateFields=classCustomFields;}cov_17rnspla93().s[79]++;if(allowedOutputFields){cov_17rnspla93().b[29][0]++;cov_17rnspla93().s[80]++;classOutputFields=classCustomFields.filter(field=>{cov_17rnspla93().f[16]++;cov_17rnspla93().s[81]++;return allowedOutputFields.includes(field);});}else{cov_17rnspla93().b[29][1]++;cov_17rnspla93().s[82]++;classOutputFields=classCustomFields;}// Filters the "password" field from class _User
cov_17rnspla93().s[83]++;if(parseClass.className==='_User'){cov_17rnspla93().b[30][0]++;cov_17rnspla93().s[84]++;classOutputFields=classOutputFields.filter(outputField=>{cov_17rnspla93().f[17]++;cov_17rnspla93().s[85]++;return outputField!=='password';});}else{cov_17rnspla93().b[30][1]++;}cov_17rnspla93().s[86]++;if(allowedConstraintFields){cov_17rnspla93().b[31][0]++;cov_17rnspla93().s[87]++;classConstraintFields=classCustomFields.filter(field=>{cov_17rnspla93().f[18]++;cov_17rnspla93().s[88]++;return allowedConstraintFields.includes(field);});}else{cov_17rnspla93().b[31][1]++;cov_17rnspla93().s[89]++;classConstraintFields=classFields;}cov_17rnspla93().s[90]++;if(allowedSortFields){cov_17rnspla93().b[32][0]++;cov_17rnspla93().s[91]++;classSortFields=allowedSortFields;cov_17rnspla93().s[92]++;if(!classSortFields.length){cov_17rnspla93().b[33][0]++;cov_17rnspla93().s[93]++;// must have at least 1 order field
// otherwise the FindArgs Input Type will throw.
classSortFields.push({field:'id',asc:true,desc:true});}else{cov_17rnspla93().b[33][1]++;}}else{cov_17rnspla93().b[32][1]++;cov_17rnspla93().s[94]++;classSortFields=classFields.map(field=>{cov_17rnspla93().f[19]++;cov_17rnspla93().s[95]++;return{field,asc:true,desc:true};});}cov_17rnspla93().s[96]++;return{classCreateFields,classUpdateFields,classConstraintFields,classOutputFields,classSortFields};};cov_17rnspla93().s[97]++;const load=(parseGraphQLSchema,parseClass,parseClassConfig)=>{cov_17rnspla93().f[20]++;const className=(cov_17rnspla93().s[98]++,parseClass.className);const graphQLClassName=(cov_17rnspla93().s[99]++,(0,_className.transformClassNameToGraphQL)(className));const{classCreateFields,classUpdateFields,classOutputFields,classConstraintFields,classSortFields}=(cov_17rnspla93().s[100]++,getInputFieldsAndConstraints(parseClass,parseClassConfig));const{create:isCreateEnabled=(cov_17rnspla93().b[34][0]++,true),update:isUpdateEnabled=(cov_17rnspla93().b[35][0]++,true)}=(cov_17rnspla93().s[101]++,(0,_parseGraphQLUtils.getParseClassMutationConfig)(parseClassConfig));const classGraphQLCreateTypeName=(cov_17rnspla93().s[102]++,`Create${graphQLClassName}FieldsInput`);let classGraphQLCreateType=(cov_17rnspla93().s[103]++,new _graphql.GraphQLInputObjectType({name:classGraphQLCreateTypeName,description:`The ${classGraphQLCreateTypeName} input type is used in operations that involve creation of objects in the ${graphQLClassName} class.`,fields:()=>{cov_17rnspla93().f[21]++;cov_17rnspla93().s[104]++;return classCreateFields.reduce((fields,field)=>{cov_17rnspla93().f[22]++;const type=(cov_17rnspla93().s[105]++,(0,_inputType.transformInputTypeToGraphQL)(parseClass.fields[field].type,parseClass.fields[field].targetClass,parseGraphQLSchema.parseClassTypes));cov_17rnspla93().s[106]++;if(type){cov_17rnspla93().b[36][0]++;cov_17rnspla93().s[107]++;return _objectSpread(_objectSpread({},fields),{},{[field]:{description:`This is the object ${field}.`,type:(cov_17rnspla93().b[38][0]++,className==='_User')&&((cov_17rnspla93().b[38][1]++,field==='username')||(cov_17rnspla93().b[38][2]++,field==='password'))||(cov_17rnspla93().b[38][3]++,parseClass.fields[field].required)?(cov_17rnspla93().b[37][0]++,new _graphql.GraphQLNonNull(type)):(cov_17rnspla93().b[37][1]++,type)}});}else{cov_17rnspla93().b[36][1]++;cov_17rnspla93().s[108]++;return fields;}},{ACL:{type:defaultGraphQLTypes.ACL_INPUT}});}}));cov_17rnspla93().s[109]++;classGraphQLCreateType=parseGraphQLSchema.addGraphQLType(classGraphQLCreateType);const classGraphQLUpdateTypeName=(cov_17rnspla93().s[110]++,`Update${graphQLClassName}FieldsInput`);let classGraphQLUpdateType=(cov_17rnspla93().s[111]++,new _graphql.GraphQLInputObjectType({name:classGraphQLUpdateTypeName,description:`The ${classGraphQLUpdateTypeName} input type is used in operations that involve creation of objects in the ${graphQLClassName} class.`,fields:()=>{cov_17rnspla93().f[23]++;cov_17rnspla93().s[112]++;return classUpdateFields.reduce((fields,field)=>{cov_17rnspla93().f[24]++;const type=(cov_17rnspla93().s[113]++,(0,_inputType.transformInputTypeToGraphQL)(parseClass.fields[field].type,parseClass.fields[field].targetClass,parseGraphQLSchema.parseClassTypes));cov_17rnspla93().s[114]++;if(type){cov_17rnspla93().b[39][0]++;cov_17rnspla93().s[115]++;return _objectSpread(_objectSpread({},fields),{},{[field]:{description:`This is the object ${field}.`,type}});}else{cov_17rnspla93().b[39][1]++;cov_17rnspla93().s[116]++;return fields;}},{ACL:{type:defaultGraphQLTypes.ACL_INPUT}});}}));cov_17rnspla93().s[117]++;classGraphQLUpdateType=parseGraphQLSchema.addGraphQLType(classGraphQLUpdateType);const classGraphQLPointerTypeName=(cov_17rnspla93().s[118]++,`${graphQLClassName}PointerInput`);let classGraphQLPointerType=(cov_17rnspla93().s[119]++,new _graphql.GraphQLInputObjectType({name:classGraphQLPointerTypeName,description:`Allow to link OR add and link an object of the ${graphQLClassName} class.`,fields:()=>{cov_17rnspla93().f[25]++;const fields=(cov_17rnspla93().s[120]++,{link:{description:`Link an existing object from ${graphQLClassName} class. You can use either the global or the object id.`,type:_graphql.GraphQLID}});cov_17rnspla93().s[121]++;if(isCreateEnabled){cov_17rnspla93().b[40][0]++;cov_17rnspla93().s[122]++;fields['createAndLink']={description:`Create and link an object from ${graphQLClassName} class.`,type:classGraphQLCreateType};}else{cov_17rnspla93().b[40][1]++;}cov_17rnspla93().s[123]++;return fields;}}));cov_17rnspla93().s[124]++;classGraphQLPointerType=(cov_17rnspla93().b[41][0]++,parseGraphQLSchema.addGraphQLType(classGraphQLPointerType))||(cov_17rnspla93().b[41][1]++,defaultGraphQLTypes.OBJECT);const classGraphQLRelationTypeName=(cov_17rnspla93().s[125]++,`${graphQLClassName}RelationInput`);let classGraphQLRelationType=(cov_17rnspla93().s[126]++,new _graphql.GraphQLInputObjectType({name:classGraphQLRelationTypeName,description:`Allow to add, remove, createAndAdd objects of the ${graphQLClassName} class into a relation field.`,fields:()=>{cov_17rnspla93().f[26]++;const fields=(cov_17rnspla93().s[127]++,{add:{description:`Add existing objects from the ${graphQLClassName} class into the relation. You can use either the global or the object ids.`,type:new _graphql.GraphQLList(defaultGraphQLTypes.OBJECT_ID)},remove:{description:`Remove existing objects from the ${graphQLClassName} class out of the relation. You can use either the global or the object ids.`,type:new _graphql.GraphQLList(defaultGraphQLTypes.OBJECT_ID)}});cov_17rnspla93().s[128]++;if(isCreateEnabled){cov_17rnspla93().b[42][0]++;cov_17rnspla93().s[129]++;fields['createAndAdd']={description:`Create and add objects of the ${graphQLClassName} class into the relation.`,type:new _graphql.GraphQLList(new _graphql.GraphQLNonNull(classGraphQLCreateType))};}else{cov_17rnspla93().b[42][1]++;}cov_17rnspla93().s[130]++;return fields;}}));cov_17rnspla93().s[131]++;classGraphQLRelationType=(cov_17rnspla93().b[43][0]++,parseGraphQLSchema.addGraphQLType(classGraphQLRelationType))||(cov_17rnspla93().b[43][1]++,defaultGraphQLTypes.OBJECT);const classGraphQLConstraintsTypeName=(cov_17rnspla93().s[132]++,`${graphQLClassName}WhereInput`);let classGraphQLConstraintsType=(cov_17rnspla93().s[133]++,new _graphql.GraphQLInputObjectType({name:classGraphQLConstraintsTypeName,description:`The ${classGraphQLConstraintsTypeName} input type is used in operations that involve filtering objects of ${graphQLClassName} class.`,fields:()=>{cov_17rnspla93().f[27]++;cov_17rnspla93().s[134]++;return _objectSpread(_objectSpread({},classConstraintFields.reduce((fields,field)=>{cov_17rnspla93().f[28]++;cov_17rnspla93().s[135]++;if(['OR','AND','NOR'].includes(field)){cov_17rnspla93().b[44][0]++;cov_17rnspla93().s[136]++;parseGraphQLSchema.log.warn(`Field ${field} could not be added to the auto schema ${classGraphQLConstraintsTypeName} because it collided with an existing one.`);cov_17rnspla93().s[137]++;return fields;}else{cov_17rnspla93().b[44][1]++;}const parseField=(cov_17rnspla93().s[138]++,field==='id'?(cov_17rnspla93().b[45][0]++,'objectId'):(cov_17rnspla93().b[45][1]++,field));const type=(cov_17rnspla93().s[139]++,(0,_constraintType.transformConstraintTypeToGraphQL)(parseClass.fields[parseField].type,parseClass.fields[parseField].targetClass,parseGraphQLSchema.parseClassTypes,field));cov_17rnspla93().s[140]++;if(type){cov_17rnspla93().b[46][0]++;cov_17rnspla93().s[141]++;return _objectSpread(_objectSpread({},fields),{},{[field]:{description:`This is the object ${field}.`,type}});}else{cov_17rnspla93().b[46][1]++;cov_17rnspla93().s[142]++;return fields;}},{})),{},{OR:{description:'This is the OR operator to compound constraints.',type:new _graphql.GraphQLList(new _graphql.GraphQLNonNull(classGraphQLConstraintsType))},AND:{description:'This is the AND operator to compound constraints.',type:new _graphql.GraphQLList(new _graphql.GraphQLNonNull(classGraphQLConstraintsType))},NOR:{description:'This is the NOR operator to compound constraints.',type:new _graphql.GraphQLList(new _graphql.GraphQLNonNull(classGraphQLConstraintsType))}});}}));cov_17rnspla93().s[143]++;classGraphQLConstraintsType=(cov_17rnspla93().b[47][0]++,parseGraphQLSchema.addGraphQLType(classGraphQLConstraintsType))||(cov_17rnspla93().b[47][1]++,defaultGraphQLTypes.OBJECT);const classGraphQLRelationConstraintsTypeName=(cov_17rnspla93().s[144]++,`${graphQLClassName}RelationWhereInput`);let classGraphQLRelationConstraintsType=(cov_17rnspla93().s[145]++,new _graphql.GraphQLInputObjectType({name:classGraphQLRelationConstraintsTypeName,description:`The ${classGraphQLRelationConstraintsTypeName} input type is used in operations that involve filtering objects of ${graphQLClassName} class.`,fields:()=>{cov_17rnspla93().f[29]++;cov_17rnspla93().s[146]++;return{have:{description:'Run a relational/pointer query where at least one child object can match.',type:classGraphQLConstraintsType},haveNot:{description:'Run an inverted relational/pointer query where at least one child object can match.',type:classGraphQLConstraintsType},exists:{description:'Check if the relation/pointer contains objects.',type:_graphql.GraphQLBoolean}};}}));cov_17rnspla93().s[147]++;classGraphQLRelationConstraintsType=(cov_17rnspla93().b[48][0]++,parseGraphQLSchema.addGraphQLType(classGraphQLRelationConstraintsType))||(cov_17rnspla93().b[48][1]++,defaultGraphQLTypes.OBJECT);const classGraphQLOrderTypeName=(cov_17rnspla93().s[148]++,`${graphQLClassName}Order`);let classGraphQLOrderType=(cov_17rnspla93().s[149]++,new _graphql.GraphQLEnumType({name:classGraphQLOrderTypeName,description:`The ${classGraphQLOrderTypeName} input type is used when sorting objects of the ${graphQLClassName} class.`,values:classSortFields.reduce((sortFields,fieldConfig)=>{cov_17rnspla93().f[30]++;const{field,asc,desc}=(cov_17rnspla93().s[150]++,fieldConfig);const updatedSortFields=(cov_17rnspla93().s[151]++,_objectSpread({},sortFields));const value=(cov_17rnspla93().s[152]++,field==='id'?(cov_17rnspla93().b[49][0]++,'objectId'):(cov_17rnspla93().b[49][1]++,field));cov_17rnspla93().s[153]++;if(asc){cov_17rnspla93().b[50][0]++;cov_17rnspla93().s[154]++;updatedSortFields[`${field}_ASC`]={value};}else{cov_17rnspla93().b[50][1]++;}cov_17rnspla93().s[155]++;if(desc){cov_17rnspla93().b[51][0]++;cov_17rnspla93().s[156]++;updatedSortFields[`${field}_DESC`]={value:`-${value}`};}else{cov_17rnspla93().b[51][1]++;}cov_17rnspla93().s[157]++;return updatedSortFields;},{})}));cov_17rnspla93().s[158]++;classGraphQLOrderType=parseGraphQLSchema.addGraphQLType(classGraphQLOrderType);const classGraphQLFindArgs=(cov_17rnspla93().s[159]++,_objectSpread(_objectSpread({where:{description:'These are the conditions that the objects need to match in order to be found.',type:classGraphQLConstraintsType},order:{description:'The fields to be used when sorting the data fetched.',type:classGraphQLOrderType?(cov_17rnspla93().b[52][0]++,new _graphql.GraphQLList(new _graphql.GraphQLNonNull(classGraphQLOrderType))):(cov_17rnspla93().b[52][1]++,_graphql.GraphQLString)},skip:defaultGraphQLTypes.SKIP_ATT},_graphqlRelay.connectionArgs),{},{options:defaultGraphQLTypes.READ_OPTIONS_ATT}));const classGraphQLOutputTypeName=(cov_17rnspla93().s[160]++,`${graphQLClassName}`);const interfaces=(cov_17rnspla93().s[161]++,[defaultGraphQLTypes.PARSE_OBJECT,parseGraphQLSchema.relayNodeInterface]);const parseObjectFields=(cov_17rnspla93().s[162]++,_objectSpread({id:(0,_graphqlRelay.globalIdField)(className,obj=>{cov_17rnspla93().f[31]++;cov_17rnspla93().s[163]++;return obj.objectId;})},defaultGraphQLTypes.PARSE_OBJECT_FIELDS));cov_17rnspla93().s[164]++;const outputFields=()=>{cov_17rnspla93().f[32]++;cov_17rnspla93().s[165]++;return classOutputFields.reduce((fields,field)=>{cov_17rnspla93().f[33]++;const type=(cov_17rnspla93().s[166]++,(0,_outputType.transformOutputTypeToGraphQL)(parseClass.fields[field].type,parseClass.fields[field].targetClass,parseGraphQLSchema.parseClassTypes));cov_17rnspla93().s[167]++;if(parseClass.fields[field].type==='Relation'){cov_17rnspla93().b[53][0]++;const targetParseClassTypes=(cov_17rnspla93().s[168]++,parseGraphQLSchema.parseClassTypes[parseClass.fields[field].targetClass]);const args=(cov_17rnspla93().s[169]++,targetParseClassTypes?(cov_17rnspla93().b[54][0]++,targetParseClassTypes.classGraphQLFindArgs):(cov_17rnspla93().b[54][1]++,undefined));cov_17rnspla93().s[170]++;return _objectSpread(_objectSpread({},fields),{},{[field]:{description:`This is the object ${field}.`,args,type:parseClass.fields[field].required?(cov_17rnspla93().b[55][0]++,new _graphql.GraphQLNonNull(type)):(cov_17rnspla93().b[55][1]++,type),async resolve(source,args,context,queryInfo){cov_17rnspla93().f[34]++;cov_17rnspla93().s[171]++;try{const{where,order,skip,first,after,last,before,options}=(cov_17rnspla93().s[172]++,args);const{readPreference,includeReadPreference,subqueryReadPreference}=(cov_17rnspla93().s[173]++,(cov_17rnspla93().b[56][0]++,options)||(cov_17rnspla93().b[56][1]++,{}));const{config,auth,info}=(cov_17rnspla93().s[174]++,context);const selectedFields=(cov_17rnspla93().s[175]++,(0,_graphqlListFields.default)(queryInfo));const{keys,include}=(cov_17rnspla93().s[176]++,(0,_parseGraphQLUtils.extractKeysAndInclude)(selectedFields.filter(field=>{cov_17rnspla93().f[35]++;cov_17rnspla93().s[177]++;return field.startsWith('edges.node.');}).map(field=>{cov_17rnspla93().f[36]++;cov_17rnspla93().s[178]++;return field.replace('edges.node.','');}).filter(field=>{cov_17rnspla93().f[37]++;cov_17rnspla93().s[179]++;return field.indexOf('edges.node')<0;})));const parseOrder=(cov_17rnspla93().s[180]++,(cov_17rnspla93().b[57][0]++,order)&&(cov_17rnspla93().b[57][1]++,order.join(',')));cov_17rnspla93().s[181]++;return objectsQueries.findObjects(source[field].className,_objectSpread({$relatedTo:{object:{__type:'Pointer',className:className,objectId:source.objectId},key:field}},(cov_17rnspla93().b[58][0]++,where)||(cov_17rnspla93().b[58][1]++,{})),parseOrder,skip,first,after,last,before,keys,include,false,readPreference,includeReadPreference,subqueryReadPreference,config,auth,info,selectedFields,parseGraphQLSchema.parseClasses);}catch(e){cov_17rnspla93().s[182]++;parseGraphQLSchema.handleError(e);}}}});}else{cov_17rnspla93().b[53][1]++;cov_17rnspla93().s[183]++;if(parseClass.fields[field].type==='Polygon'){cov_17rnspla93().b[59][0]++;cov_17rnspla93().s[184]++;return _objectSpread(_objectSpread({},fields),{},{[field]:{description:`This is the object ${field}.`,type:parseClass.fields[field].required?(cov_17rnspla93().b[60][0]++,new _graphql.GraphQLNonNull(type)):(cov_17rnspla93().b[60][1]++,type),async resolve(source){cov_17rnspla93().f[38]++;cov_17rnspla93().s[185]++;if((cov_17rnspla93().b[62][0]++,source[field])&&(cov_17rnspla93().b[62][1]++,source[field].coordinates)){cov_17rnspla93().b[61][0]++;cov_17rnspla93().s[186]++;return source[field].coordinates.map(coordinate=>{cov_17rnspla93().f[39]++;cov_17rnspla93().s[187]++;return{latitude:coordinate[0],longitude:coordinate[1]};});}else{cov_17rnspla93().b[61][1]++;cov_17rnspla93().s[188]++;return null;}}}});}else{cov_17rnspla93().b[59][1]++;cov_17rnspla93().s[189]++;if(parseClass.fields[field].type==='Array'){cov_17rnspla93().b[63][0]++;cov_17rnspla93().s[190]++;return _objectSpread(_objectSpread({},fields),{},{[field]:{description:`Use Inline Fragment on Array to get results: https://graphql.org/learn/queries/#inline-fragments`,type:parseClass.fields[field].required?(cov_17rnspla93().b[64][0]++,new _graphql.GraphQLNonNull(type)):(cov_17rnspla93().b[64][1]++,type),async resolve(source){cov_17rnspla93().f[40]++;cov_17rnspla93().s[191]++;if(!source[field]){cov_17rnspla93().b[65][0]++;cov_17rnspla93().s[192]++;return null;}else{cov_17rnspla93().b[65][1]++;}cov_17rnspla93().s[193]++;return source[field].map(async elem=>{cov_17rnspla93().f[41]++;cov_17rnspla93().s[194]++;if((cov_17rnspla93().b[67][0]++,elem.className)&&(cov_17rnspla93().b[67][1]++,elem.objectId)&&(cov_17rnspla93().b[67][2]++,elem.__type==='Object')){cov_17rnspla93().b[66][0]++;cov_17rnspla93().s[195]++;return elem;}else{cov_17rnspla93().b[66][1]++;cov_17rnspla93().s[196]++;return{value:elem};}});}}});}else{cov_17rnspla93().b[63][1]++;cov_17rnspla93().s[197]++;if(type){cov_17rnspla93().b[68][0]++;cov_17rnspla93().s[198]++;return _objectSpread(_objectSpread({},fields),{},{[field]:{description:`This is the object ${field}.`,type:parseClass.fields[field].required?(cov_17rnspla93().b[69][0]++,new _graphql.GraphQLNonNull(type)):(cov_17rnspla93().b[69][1]++,type)}});}else{cov_17rnspla93().b[68][1]++;cov_17rnspla93().s[199]++;return fields;}}}}},parseObjectFields);};let classGraphQLOutputType=(cov_17rnspla93().s[200]++,new _graphql.GraphQLObjectType({name:classGraphQLOutputTypeName,description:`The ${classGraphQLOutputTypeName} object type is used in operations that involve outputting objects of ${graphQLClassName} class.`,interfaces,fields:outputFields}));cov_17rnspla93().s[201]++;classGraphQLOutputType=parseGraphQLSchema.addGraphQLType(classGraphQLOutputType);const{connectionType,edgeType}=(cov_17rnspla93().s[202]++,(0,_graphqlRelay.connectionDefinitions)({name:graphQLClassName,connectionFields:{count:defaultGraphQLTypes.COUNT_ATT},nodeType:(cov_17rnspla93().b[70][0]++,classGraphQLOutputType)||(cov_17rnspla93().b[70][1]++,defaultGraphQLTypes.OBJECT)}));let classGraphQLFindResultType=(cov_17rnspla93().s[203]++,undefined);cov_17rnspla93().s[204]++;if((cov_17rnspla93().b[72][0]++,parseGraphQLSchema.addGraphQLType(edgeType))&&(cov_17rnspla93().b[72][1]++,parseGraphQLSchema.addGraphQLType(connectionType,false,false,true))){cov_17rnspla93().b[71][0]++;cov_17rnspla93().s[205]++;classGraphQLFindResultType=connectionType;}else{cov_17rnspla93().b[71][1]++;}cov_17rnspla93().s[206]++;parseGraphQLSchema.parseClassTypes[className]={classGraphQLPointerType,classGraphQLRelationType,classGraphQLCreateType,classGraphQLUpdateType,classGraphQLConstraintsType,classGraphQLRelationConstraintsType,classGraphQLFindArgs,classGraphQLOutputType,classGraphQLFindResultType,config:{parseClassConfig,isCreateEnabled,isUpdateEnabled}};cov_17rnspla93().s[207]++;if(className==='_User'){cov_17rnspla93().b[73][0]++;const viewerType=(cov_17rnspla93().s[208]++,new _graphql.GraphQLObjectType({name:'Viewer',description:`The Viewer object type is used in operations that involve outputting the current user data.`,fields:()=>{cov_17rnspla93().f[42]++;cov_17rnspla93().s[209]++;return{sessionToken:defaultGraphQLTypes.SESSION_TOKEN_ATT,user:{description:'This is the current user.',type:new _graphql.GraphQLNonNull(classGraphQLOutputType)}};}}));cov_17rnspla93().s[210]++;parseGraphQLSchema.addGraphQLType(viewerType,true,true);cov_17rnspla93().s[211]++;parseGraphQLSchema.viewerType=viewerType;}else{cov_17rnspla93().b[73][1]++;}};cov_17rnspla93().s[212]++;exports.load=load;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,