"use strict";function cov_22ifv5wh8i(){var path="/parse-server/lib/Controllers/PushController.js";var hash="4ae7648d7e0f492a62a5eabf2d7320e970ac6403";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Controllers/PushController.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:50}},"2":{start:{line:8,column:12},end:{line:8,column:33}},"3":{start:{line:10,column:17},end:{line:10,column:64}},"4":{start:{line:12,column:17},end:{line:12,column:64}},"5":{start:{line:14,column:12},end:{line:14,column:30}},"6":{start:{line:16,column:21},end:{line:16,column:48}},"7":{start:{line:18,column:13},end:{line:18,column:37}},"8":{start:{line:20,column:39},end:{line:20,column:93}},"9":{start:{line:24,column:4},end:{line:26,column:5}},"10":{start:{line:25,column:6},end:{line:25,column:102}},"11":{start:{line:29,column:4},end:{line:29,column:66}},"12":{start:{line:30,column:4},end:{line:30,column:74}},"13":{start:{line:32,column:4},end:{line:34,column:5}},"14":{start:{line:33,column:6},end:{line:33,column:134}},"15":{start:{line:37,column:4},end:{line:40,column:5}},"16":{start:{line:38,column:20},end:{line:38,column:51}},"17":{start:{line:39,column:6},end:{line:39,column:71}},"18":{start:{line:42,column:21},end:{line:42,column:53}},"19":{start:{line:44,column:4},end:{line:46,column:5}},"20":{start:{line:45,column:6},end:{line:45,column:66}},"21":{start:{line:50,column:22},end:{line:52,column:5}},"22":{start:{line:51,column:6},end:{line:51,column:31}},"23":{start:{line:54,column:4},end:{line:92,column:5}},"24":{start:{line:55,column:20},end:{line:55,column:35}},"25":{start:{line:56,column:23},end:{line:56,column:25}},"26":{start:{line:58,column:6},end:{line:78,column:7}},"27":{start:{line:59,column:8},end:{line:64,column:10}},"28":{start:{line:65,column:13},end:{line:78,column:7}},"29":{start:{line:66,column:8},end:{line:71,column:10}},"30":{start:{line:72,column:13},end:{line:78,column:7}},"31":{start:{line:73,column:8},end:{line:75,column:10}},"32":{start:{line:77,column:8},end:{line:77,column:95}},"33":{start:{line:81,column:26},end:{line:81,column:67}},"34":{start:{line:83,column:6},end:{line:91,column:8}},"35":{start:{line:85,column:26},end:{line:85,column:113}},"36":{start:{line:86,column:8},end:{line:90,column:11}},"37":{start:{line:87,column:24},end:{line:87,column:131}},"38":{start:{line:88,column:10},end:{line:88,column:39}},"39":{start:{line:89,column:10},end:{line:89,column:33}},"40":{start:{line:94,column:23},end:{line:94,column:68}},"41":{start:{line:95,column:4},end:{line:132,column:7}},"42":{start:{line:96,column:6},end:{line:96,column:48}},"43":{start:{line:98,column:6},end:{line:98,column:45}},"44":{start:{line:99,column:6},end:{line:99,column:27}},"45":{start:{line:102,column:6},end:{line:118,column:7}},"46":{start:{line:103,column:27},end:{line:103,column:43}},"47":{start:{line:104,column:29},end:{line:113,column:9}},"48":{start:{line:114,column:22},end:{line:116,column:26}},"49":{start:{line:117,column:8},end:{line:117,column:24}},"50":{start:{line:121,column:6},end:{line:121,column:31}},"51":{start:{line:123,column:6},end:{line:125,column:7}},"52":{start:{line:124,column:8},end:{line:124,column:33}},"53":{start:{line:127,column:6},end:{line:127,column:87}},"54":{start:{line:129,column:6},end:{line:131,column:9}},"55":{start:{line:130,column:8},end:{line:130,column:18}},"56":{start:{line:142,column:28},end:{line:142,column:89}},"57":{start:{line:144,column:4},end:{line:146,column:5}},"58":{start:{line:145,column:6},end:{line:145,column:13}},"59":{start:{line:148,column:30},end:{line:148,column:53}},"60":{start:{line:151,column:4},end:{line:157,column:5}},"61":{start:{line:152,column:6},end:{line:152,column:60}},"62":{start:{line:153,column:11},end:{line:157,column:5}},"63":{start:{line:154,column:6},end:{line:154,column:53}},"64":{start:{line:156,column:6},end:{line:156,column:121}},"65":{start:{line:160,column:4},end:{line:162,column:5}},"66":{start:{line:161,column:6},end:{line:161,column:121}},"67":{start:{line:164,column:4},end:{line:164,column:36}},"68":{start:{line:168,column:34},end:{line:168,column:99}},"69":{start:{line:170,column:4},end:{line:172,column:5}},"70":{start:{line:171,column:6},end:{line:171,column:13}},"71":{start:{line:174,column:34},end:{line:174,column:61}},"72":{start:{line:176,column:4},end:{line:178,column:5}},"73":{start:{line:177,column:6},end:{line:177,column:127}},"74":{start:{line:180,column:4},end:{line:180,column:35}},"75":{start:{line:190,column:22},end:{line:190,column:77}},"76":{start:{line:192,column:4},end:{line:194,column:5}},"77":{start:{line:193,column:6},end:{line:193,column:13}},"78":{start:{line:196,column:24},end:{line:196,column:41}},"79":{start:{line:198,column:22},end:{line:198,column:26}},"80":{start:{line:200,column:4},end:{line:207,column:5}},"81":{start:{line:201,column:6},end:{line:201,column:44}},"82":{start:{line:202,column:11},end:{line:207,column:5}},"83":{start:{line:203,column:6},end:{line:203,column:80}},"84":{start:{line:204,column:6},end:{line:204,column:37}},"85":{start:{line:206,column:6},end:{line:206,column:115}},"86":{start:{line:210,column:4},end:{line:212,column:5}},"87":{start:{line:211,column:6},end:{line:211,column:115}},"88":{start:{line:214,column:4},end:{line:217,column:6}},"89":{start:{line:227,column:26},end:{line:227,column:48}},"90":{start:{line:228,column:4},end:{line:229,column:5}},"91":{start:{line:243,column:4},end:{line:247,column:5}},"92":{start:{line:245,column:24},end:{line:245,column:42}},"93":{start:{line:246,column:6},end:{line:246,column:60}},"94":{start:{line:249,column:4},end:{line:249,column:30}},"95":{start:{line:254,column:0},end:{line:254,column:40}},"96":{start:{line:255,column:15},end:{line:255,column:29}},"97":{start:{line:256,column:0},end:{line:256,column:27}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:20,column:9},end:{line:20,column:31}},loc:{start:{line:20,column:37},end:{line:20,column:95}},line:20},"1":{name:"(anonymous_1)",decl:{start:{line:23,column:2},end:{line:23,column:3}},loc:{start:{line:23,column:96},end:{line:133,column:3}},line:23},"2":{name:"(anonymous_2)",decl:{start:{line:23,column:68},end:{line:23,column:69}},loc:{start:{line:23,column:74},end:{line:23,column:76}},line:23},"3":{name:"(anonymous_3)",decl:{start:{line:50,column:22},end:{line:50,column:23}},loc:{start:{line:50,column:28},end:{line:52,column:5}},line:50},"4":{name:"(anonymous_4)",decl:{start:{line:83,column:20},end:{line:83,column:21}},loc:{start:{line:83,column:26},end:{line:91,column:7}},line:83},"5":{name:"(anonymous_5)",decl:{start:{line:86,column:47},end:{line:86,column:48}},loc:{start:{line:86,column:53},end:{line:90,column:9}},line:86},"6":{name:"(anonymous_6)",decl:{start:{line:95,column:34},end:{line:95,column:35}},loc:{start:{line:95,column:40},end:{line:97,column:5}},line:95},"7":{name:"(anonymous_7)",decl:{start:{line:97,column:12},end:{line:97,column:13}},loc:{start:{line:97,column:18},end:{line:100,column:5}},line:97},"8":{name:"(anonymous_8)",decl:{start:{line:100,column:12},end:{line:100,column:13}},loc:{start:{line:100,column:18},end:{line:122,column:5}},line:100},"9":{name:"(anonymous_9)",decl:{start:{line:122,column:12},end:{line:122,column:13}},loc:{start:{line:122,column:18},end:{line:128,column:5}},line:122},"10":{name:"(anonymous_10)",decl:{start:{line:128,column:13},end:{line:128,column:14}},loc:{start:{line:128,column:20},end:{line:132,column:5}},line:128},"11":{name:"(anonymous_11)",decl:{start:{line:129,column:39},end:{line:129,column:40}},loc:{start:{line:129,column:45},end:{line:131,column:7}},line:129},"12":{name:"(anonymous_12)",decl:{start:{line:141,column:2},end:{line:141,column:3}},loc:{start:{line:141,column:38},end:{line:165,column:3}},line:141},"13":{name:"(anonymous_13)",decl:{start:{line:167,column:2},end:{line:167,column:3}},loc:{start:{line:167,column:42},end:{line:181,column:3}},line:167},"14":{name:"(anonymous_14)",decl:{start:{line:189,column:2},end:{line:189,column:3}},loc:{start:{line:189,column:32},end:{line:218,column:3}},line:189},"15":{name:"(anonymous_15)",decl:{start:{line:226,column:2},end:{line:226,column:3}},loc:{start:{line:226,column:53},end:{line:230,column:3}},line:226},"16":{name:"(anonymous_16)",decl:{start:{line:239,column:2},end:{line:239,column:3}},loc:{start:{line:242,column:5},end:{line:250,column:3}},line:242}},branchMap:{"0":{loc:{start:{line:20,column:46},end:{line:20,column:92}},type:"cond-expr",locations:[{start:{line:20,column:70},end:{line:20,column:73}},{start:{line:20,column:76},end:{line:20,column:92}}],line:20},"1":{loc:{start:{line:20,column:46},end:{line:20,column:67}},type:"binary-expr",locations:[{start:{line:20,column:46},end:{line:20,column:49}},{start:{line:20,column:53},end:{line:20,column:67}}],line:20},"2":{loc:{start:{line:23,column:11},end:{line:23,column:20}},type:"default-arg",locations:[{start:{line:23,column:18},end:{line:23,column:20}}],line:23},"3":{loc:{start:{line:23,column:22},end:{line:23,column:32}},type:"default-arg",locations:[{start:{line:23,column:30},end:{line:23,column:32}}],line:23},"4":{loc:{start:{line:23,column:48},end:{line:23,column:76}},type:"default-arg",locations:[{start:{line:23,column:68},end:{line:23,column:76}}],line:23},"5":{loc:{start:{line:23,column:78},end:{line:23,column:94}},type:"default-arg",locations:[{start:{line:23,column:84},end:{line:23,column:94}}],line:23},"6":{loc:{start:{line:24,column:4},end:{line:26,column:5}},type:"if",locations:[{start:{line:24,column:4},end:{line:26,column:5}},{start:{line:24,column:4},end:{line:26,column:5}}],line:24},"7":{loc:{start:{line:32,column:4},end:{line:34,column:5}},type:"if",locations:[{start:{line:32,column:4},end:{line:34,column:5}},{start:{line:32,column:4},end:{line:34,column:5}}],line:32},"8":{loc:{start:{line:32,column:8},end:{line:32,column:56}},type:"binary-expr",locations:[{start:{line:32,column:8},end:{line:32,column:28}},{start:{line:32,column:32},end:{line:32,column:56}}],line:32},"9":{loc:{start:{line:37,column:4},end:{line:40,column:5}},type:"if",locations:[{start:{line:37,column:4},end:{line:40,column:5}},{start:{line:37,column:4},end:{line:40,column:5}}],line:37},"10":{loc:{start:{line:37,column:8},end:{line:37,column:92}},type:"binary-expr",locations:[{start:{line:37,column:8},end:{line:37,column:32}},{start:{line:37,column:36},end:{line:37,column:92}}],line:37},"11":{loc:{start:{line:44,column:4},end:{line:46,column:5}},type:"if",locations:[{start:{line:44,column:4},end:{line:46,column:5}},{start:{line:44,column:4},end:{line:46,column:5}}],line:44},"12":{loc:{start:{line:44,column:8},end:{line:44,column:49}},type:"binary-expr",locations:[{start:{line:44,column:8},end:{line:44,column:16}},{start:{line:44,column:20},end:{line:44,column:49}}],line:44},"13":{loc:{start:{line:54,column:4},end:{line:92,column:5}},type:"if",locations:[{start:{line:54,column:4},end:{line:92,column:5}},{start:{line:54,column:4},end:{line:92,column:5}}],line:54},"14":{loc:{start:{line:54,column:8},end:{line:54,column:36}},type:"binary-expr",locations:[{start:{line:54,column:8},end:{line:54,column:17}},{start:{line:54,column:21},end:{line:54,column:36}}],line:54},"15":{loc:{start:{line:58,column:6},end:{line:78,column:7}},type:"if",locations:[{start:{line:58,column:6},end:{line:78,column:7}},{start:{line:58,column:6},end:{line:78,column:7}}],line:58},"16":{loc:{start:{line:58,column:10},end:{line:58,column:73}},type:"binary-expr",locations:[{start:{line:58,column:10},end:{line:58,column:34}},{start:{line:58,column:38},end:{line:58,column:73}}],line:58},"17":{loc:{start:{line:65,column:13},end:{line:78,column:7}},type:"if",locations:[{start:{line:65,column:13},end:{line:78,column:7}},{start:{line:65,column:13},end:{line:78,column:7}}],line:65},"18":{loc:{start:{line:65,column:17},end:{line:65,column:141}},type:"binary-expr",locations:[{start:{line:65,column:17},end:{line:65,column:41}},{start:{line:65,column:45},end:{line:65,column:74}},{start:{line:65,column:78},end:{line:65,column:117}},{start:{line:65,column:121},end:{line:65,column:141}}],line:65},"19":{loc:{start:{line:72,column:13},end:{line:78,column:7}},type:"if",locations:[{start:{line:72,column:13},end:{line:78,column:7}},{start:{line:72,column:13},end:{line:78,column:7}}],line:72},"20":{loc:{start:{line:102,column:6},end:{line:118,column:7}},type:"if",locations:[{start:{line:102,column:6},end:{line:118,column:7}},{start:{line:102,column:6},end:{line:118,column:7}}],line:102},"21":{loc:{start:{line:123,column:6},end:{line:125,column:7}},type:"if",locations:[{start:{line:123,column:6},end:{line:125,column:7}},{start:{line:123,column:6},end:{line:125,column:7}}],line:123},"22":{loc:{start:{line:123,column:10},end:{line:123,column:99}},type:"binary-expr",locations:[{start:{line:123,column:10},end:{line:123,column:65}},{start:{line:123,column:69},end:{line:123,column:99}}],line:123},"23":{loc:{start:{line:141,column:27},end:{line:141,column:36}},type:"default-arg",locations:[{start:{line:141,column:34},end:{line:141,column:36}}],line:141},"24":{loc:{start:{line:144,column:4},end:{line:146,column:5}},type:"if",locations:[{start:{line:144,column:4},end:{line:146,column:5}},{start:{line:144,column:4},end:{line:146,column:5}}],line:144},"25":{loc:{start:{line:151,column:4},end:{line:157,column:5}},type:"if",locations:[{start:{line:151,column:4},end:{line:157,column:5}},{start:{line:151,column:4},end:{line:157,column:5}}],line:151},"26":{loc:{start:{line:153,column:11},end:{line:157,column:5}},type:"if",locations:[{start:{line:153,column:11},end:{line:157,column:5}},{start:{line:153,column:11},end:{line:157,column:5}}],line:153},"27":{loc:{start:{line:160,column:4},end:{line:162,column:5}},type:"if",locations:[{start:{line:160,column:4},end:{line:162,column:5}},{start:{line:160,column:4},end:{line:162,column:5}}],line:160},"28":{loc:{start:{line:167,column:31},end:{line:167,column:40}},type:"default-arg",locations:[{start:{line:167,column:38},end:{line:167,column:40}}],line:167},"29":{loc:{start:{line:170,column:4},end:{line:172,column:5}},type:"if",locations:[{start:{line:170,column:4},end:{line:172,column:5}},{start:{line:170,column:4},end:{line:172,column:5}}],line:170},"30":{loc:{start:{line:176,column:4},end:{line:178,column:5}},type:"if",locations:[{start:{line:176,column:4},end:{line:178,column:5}},{start:{line:176,column:4},end:{line:178,column:5}}],line:176},"31":{loc:{start:{line:176,column:8},end:{line:176,column:83}},type:"binary-expr",locations:[{start:{line:176,column:8},end:{line:176,column:51}},{start:{line:176,column:55},end:{line:176,column:83}}],line:176},"32":{loc:{start:{line:189,column:21},end:{line:189,column:30}},type:"default-arg",locations:[{start:{line:189,column:28},end:{line:189,column:30}}],line:189},"33":{loc:{start:{line:192,column:4},end:{line:194,column:5}},type:"if",locations:[{start:{line:192,column:4},end:{line:194,column:5}},{start:{line:192,column:4},end:{line:194,column:5}}],line:192},"34":{loc:{start:{line:200,column:4},end:{line:207,column:5}},type:"if",locations:[{start:{line:200,column:4},end:{line:207,column:5}},{start:{line:200,column:4},end:{line:207,column:5}}],line:200},"35":{loc:{start:{line:202,column:11},end:{line:207,column:5}},type:"if",locations:[{start:{line:202,column:11},end:{line:207,column:5}},{start:{line:202,column:11},end:{line:207,column:5}}],line:202},"36":{loc:{start:{line:210,column:4},end:{line:212,column:5}},type:"if",locations:[{start:{line:210,column:4},end:{line:212,column:5}},{start:{line:210,column:4},end:{line:212,column:5}}],line:210},"37":{loc:{start:{line:228,column:11},end:{line:228,column:103}},type:"binary-expr",locations:[{start:{line:228,column:11},end:{line:228,column:66}},{start:{line:228,column:70},end:{line:228,column:103}}],line:228},"38":{loc:{start:{line:243,column:4},end:{line:247,column:5}},type:"if",locations:[{start:{line:243,column:4},end:{line:247,column:5}},{start:{line:243,column:4},end:{line:247,column:5}}],line:243}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},b:{"0":[0,0],"1":[0,0],"2":[0],"3":[0],"4":[0],"5":[0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0,0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0]},inputSourceMap:{version:3,sources:["../../src/Controllers/PushController.js"],names:["PushController","sendPush","body","where","config","auth","onPushStatusSaved","now","Date","hasPushSupport","Parse","Error","PUSH_MISCONFIGURED","expiration_time","getExpirationTime","expiration_interval","getExpirationInterval","Object","prototype","hasOwnProperty","call","ttlMs","valueOf","pushTime","getPushTime","date","formatPushTime","badgeUpdate","Promise","resolve","data","badge","restUpdate","toLowerCase","__op","amount","Number","updateWhere","restQuery","RestQuery","buildRestWhere","then","write","RestWrite","restWhere","runOptions","many","execute","pushStatus","setInitial","objectId","audience_id","audienceId","updateAudience","lastUsed","__type","iso","toISOString","timesUsed","hasPushScheduledSupport","pushControllerQueue","enqueue","catch","err","fail","hasExpirationTime","expirationTimeParam","expirationTime","isFinite","hasExpirationInterval","expirationIntervalParam","hasPushTime","pushTimeParam","isLocalTime","pushTimeHasTimezoneComponent","offsetPattern","indexOf","length","test","isoString","substring"],mappings:"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",sourcesContent:["import { Parse } from 'parse/node';\nimport RestQuery from '../RestQuery';\nimport RestWrite from '../RestWrite';\nimport { master } from '../Auth';\nimport { pushStatusHandler } from '../StatusHandler';\nimport { applyDeviceTokenExists } from '../Push/utils';\n\nexport class PushController {\n  sendPush(body = {}, where = {}, config, auth, onPushStatusSaved = () => {}, now = new Date()) {\n    if (!config.hasPushSupport) {\n      throw new Parse.Error(Parse.Error.PUSH_MISCONFIGURED, 'Missing push configuration');\n    }\n\n    // Replace the expiration_time and push_time with a valid Unix epoch milliseconds time\n    body.expiration_time = PushController.getExpirationTime(body);\n    body.expiration_interval = PushController.getExpirationInterval(body);\n    if (body.expiration_time && body.expiration_interval) {\n      throw new Parse.Error(\n        Parse.Error.PUSH_MISCONFIGURED,\n        'Both expiration_time and expiration_interval cannot be set'\n      );\n    }\n\n    // Immediate push\n    if (body.expiration_interval && !Object.prototype.hasOwnProperty.call(body, 'push_time')) {\n      const ttlMs = body.expiration_interval * 1000;\n      body.expiration_time = new Date(now.valueOf() + ttlMs).valueOf();\n    }\n\n    const pushTime = PushController.getPushTime(body);\n    if (pushTime && pushTime.date !== 'undefined') {\n      body['push_time'] = PushController.formatPushTime(pushTime);\n    }\n\n    // TODO: If the req can pass the checking, we return immediately instead of waiting\n    // pushes to be sent. We probably change this behaviour in the future.\n    let badgeUpdate = () => {\n      return Promise.resolve();\n    };\n\n    if (body.data && body.data.badge) {\n      const badge = body.data.badge;\n      let restUpdate = {};\n      if (typeof badge == 'string' && badge.toLowerCase() === 'increment') {\n        restUpdate = { badge: { __op: 'Increment', amount: 1 } };\n      } else if (\n        typeof badge == 'object' &&\n        typeof badge.__op == 'string' &&\n        badge.__op.toLowerCase() == 'increment' &&\n        Number(badge.amount)\n      ) {\n        restUpdate = { badge: { __op: 'Increment', amount: badge.amount } };\n      } else if (Number(badge)) {\n        restUpdate = { badge: badge };\n      } else {\n        throw \"Invalid value for badge, expected number or 'Increment' or {increment: number}\";\n      }\n\n      // Force filtering on only valid device tokens\n      const updateWhere = applyDeviceTokenExists(where);\n      badgeUpdate = () => {\n        // Build a real RestQuery so we can use it in RestWrite\n        const restQuery = new RestQuery(config, master(config), '_Installation', updateWhere);\n        return restQuery.buildRestWhere().then(() => {\n          const write = new RestWrite(\n            config,\n            master(config),\n            '_Installation',\n            restQuery.restWhere,\n            restUpdate\n          );\n          write.runOptions.many = true;\n          return write.execute();\n        });\n      };\n    }\n    const pushStatus = pushStatusHandler(config);\n    return Promise.resolve()\n      .then(() => {\n        return pushStatus.setInitial(body, where);\n      })\n      .then(() => {\n        onPushStatusSaved(pushStatus.objectId);\n        return badgeUpdate();\n      })\n      .then(() => {\n        // Update audience lastUsed and timesUsed\n        if (body.audience_id) {\n          const audienceId = body.audience_id;\n\n          var updateAudience = {\n            lastUsed: { __type: 'Date', iso: new Date().toISOString() },\n            timesUsed: { __op: 'Increment', amount: 1 },\n          };\n          const write = new RestWrite(\n            config,\n            master(config),\n            '_Audience',\n            { objectId: audienceId },\n            updateAudience\n          );\n          write.execute();\n        }\n        // Don't wait for the audience update promise to resolve.\n        return Promise.resolve();\n      })\n      .then(() => {\n        if (\n          Object.prototype.hasOwnProperty.call(body, 'push_time') &&\n          config.hasPushScheduledSupport\n        ) {\n          return Promise.resolve();\n        }\n        return config.pushControllerQueue.enqueue(body, where, config, auth, pushStatus);\n      })\n      .catch(err => {\n        return pushStatus.fail(err).then(() => {\n          throw err;\n        });\n      });\n  }\n\n  /**\n   * Get expiration time from the request body.\n   * @param {Object} request A request object\n   * @returns {Number|undefined} The expiration time if it exists in the request\n   */\n  static getExpirationTime(body = {}) {\n    var hasExpirationTime = Object.prototype.hasOwnProperty.call(body, 'expiration_time');\n    if (!hasExpirationTime) {\n      return;\n    }\n    var expirationTimeParam = body['expiration_time'];\n    var expirationTime;\n    if (typeof expirationTimeParam === 'number') {\n      expirationTime = new Date(expirationTimeParam * 1000);\n    } else if (typeof expirationTimeParam === 'string') {\n      expirationTime = new Date(expirationTimeParam);\n    } else {\n      throw new Parse.Error(\n        Parse.Error.PUSH_MISCONFIGURED,\n        body['expiration_time'] + ' is not valid time.'\n      );\n    }\n    // Check expirationTime is valid or not, if it is not valid, expirationTime is NaN\n    if (!isFinite(expirationTime)) {\n      throw new Parse.Error(\n        Parse.Error.PUSH_MISCONFIGURED,\n        body['expiration_time'] + ' is not valid time.'\n      );\n    }\n    return expirationTime.valueOf();\n  }\n\n  static getExpirationInterval(body = {}) {\n    const hasExpirationInterval = Object.prototype.hasOwnProperty.call(body, 'expiration_interval');\n    if (!hasExpirationInterval) {\n      return;\n    }\n\n    var expirationIntervalParam = body['expiration_interval'];\n    if (typeof expirationIntervalParam !== 'number' || expirationIntervalParam <= 0) {\n      throw new Parse.Error(\n        Parse.Error.PUSH_MISCONFIGURED,\n        `expiration_interval must be a number greater than 0`\n      );\n    }\n    return expirationIntervalParam;\n  }\n\n  /**\n   * Get push time from the request body.\n   * @param {Object} request A request object\n   * @returns {Number|undefined} The push time if it exists in the request\n   */\n  static getPushTime(body = {}) {\n    var hasPushTime = Object.prototype.hasOwnProperty.call(body, 'push_time');\n    if (!hasPushTime) {\n      return;\n    }\n    var pushTimeParam = body['push_time'];\n    var date;\n    var isLocalTime = true;\n\n    if (typeof pushTimeParam === 'number') {\n      date = new Date(pushTimeParam * 1000);\n    } else if (typeof pushTimeParam === 'string') {\n      isLocalTime = !PushController.pushTimeHasTimezoneComponent(pushTimeParam);\n      date = new Date(pushTimeParam);\n    } else {\n      throw new Parse.Error(\n        Parse.Error.PUSH_MISCONFIGURED,\n        body['push_time'] + ' is not valid time.'\n      );\n    }\n    // Check pushTime is valid or not, if it is not valid, pushTime is NaN\n    if (!isFinite(date)) {\n      throw new Parse.Error(\n        Parse.Error.PUSH_MISCONFIGURED,\n        body['push_time'] + ' is not valid time.'\n      );\n    }\n\n    return {\n      date,\n      isLocalTime,\n    };\n  }\n\n  /**\n   * Checks if a ISO8601 formatted date contains a timezone component\n   * @param pushTimeParam {string}\n   * @returns {boolean}\n   */\n  static pushTimeHasTimezoneComponent(pushTimeParam: string): boolean {\n    const offsetPattern = /(.+)([+-])\\d\\d:\\d\\d$/;\n    return (\n      pushTimeParam.indexOf('Z') === pushTimeParam.length - 1 || offsetPattern.test(pushTimeParam) // 2007-04-05T12:30Z\n    ); // 2007-04-05T12:30.000+02:00, 2007-04-05T12:30.000-02:00\n  }\n\n  /**\n   * Converts a date to ISO format in UTC time and strips the timezone if `isLocalTime` is true\n   * @param date {Date}\n   * @param isLocalTime {boolean}\n   * @returns {string}\n   */\n  static formatPushTime({ date, isLocalTime }: { date: Date, isLocalTime: boolean }) {\n    if (isLocalTime) {\n      // Strip 'Z'\n      const isoString = date.toISOString();\n      return isoString.substring(0, isoString.indexOf('Z'));\n    }\n    return date.toISOString();\n  }\n}\n\nexport default PushController;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"4ae7648d7e0f492a62a5eabf2d7320e970ac6403"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_22ifv5wh8i=function(){return actualCoverage;};}return actualCoverage;}cov_22ifv5wh8i();cov_22ifv5wh8i().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_22ifv5wh8i().s[1]++;exports.default=exports.PushController=void 0;var _node=(cov_22ifv5wh8i().s[2]++,require("parse/node"));var _RestQuery=(cov_22ifv5wh8i().s[3]++,_interopRequireDefault(require("../RestQuery")));var _RestWrite=(cov_22ifv5wh8i().s[4]++,_interopRequireDefault(require("../RestWrite")));var _Auth=(cov_22ifv5wh8i().s[5]++,require("../Auth"));var _StatusHandler=(cov_22ifv5wh8i().s[6]++,require("../StatusHandler"));var _utils=(cov_22ifv5wh8i().s[7]++,require("../Push/utils"));function _interopRequireDefault(obj){cov_22ifv5wh8i().f[0]++;cov_22ifv5wh8i().s[8]++;return(cov_22ifv5wh8i().b[1][0]++,obj)&&(cov_22ifv5wh8i().b[1][1]++,obj.__esModule)?(cov_22ifv5wh8i().b[0][0]++,obj):(cov_22ifv5wh8i().b[0][1]++,{default:obj});}class PushController{sendPush(body=(cov_22ifv5wh8i().b[2][0]++,{}),where=(cov_22ifv5wh8i().b[3][0]++,{}),config,auth,onPushStatusSaved=(cov_22ifv5wh8i().b[4][0]++,()=>{cov_22ifv5wh8i().f[2]++;}),now=(cov_22ifv5wh8i().b[5][0]++,new Date())){cov_22ifv5wh8i().f[1]++;cov_22ifv5wh8i().s[9]++;if(!config.hasPushSupport){cov_22ifv5wh8i().b[6][0]++;cov_22ifv5wh8i().s[10]++;throw new _node.Parse.Error(_node.Parse.Error.PUSH_MISCONFIGURED,'Missing push configuration');}else{cov_22ifv5wh8i().b[6][1]++;}// Replace the expiration_time and push_time with a valid Unix epoch milliseconds time
cov_22ifv5wh8i().s[11]++;body.expiration_time=PushController.getExpirationTime(body);cov_22ifv5wh8i().s[12]++;body.expiration_interval=PushController.getExpirationInterval(body);cov_22ifv5wh8i().s[13]++;if((cov_22ifv5wh8i().b[8][0]++,body.expiration_time)&&(cov_22ifv5wh8i().b[8][1]++,body.expiration_interval)){cov_22ifv5wh8i().b[7][0]++;cov_22ifv5wh8i().s[14]++;throw new _node.Parse.Error(_node.Parse.Error.PUSH_MISCONFIGURED,'Both expiration_time and expiration_interval cannot be set');}else{cov_22ifv5wh8i().b[7][1]++;}// Immediate push
cov_22ifv5wh8i().s[15]++;if((cov_22ifv5wh8i().b[10][0]++,body.expiration_interval)&&(cov_22ifv5wh8i().b[10][1]++,!Object.prototype.hasOwnProperty.call(body,'push_time'))){cov_22ifv5wh8i().b[9][0]++;const ttlMs=(cov_22ifv5wh8i().s[16]++,body.expiration_interval*1000);cov_22ifv5wh8i().s[17]++;body.expiration_time=new Date(now.valueOf()+ttlMs).valueOf();}else{cov_22ifv5wh8i().b[9][1]++;}const pushTime=(cov_22ifv5wh8i().s[18]++,PushController.getPushTime(body));cov_22ifv5wh8i().s[19]++;if((cov_22ifv5wh8i().b[12][0]++,pushTime)&&(cov_22ifv5wh8i().b[12][1]++,pushTime.date!=='undefined')){cov_22ifv5wh8i().b[11][0]++;cov_22ifv5wh8i().s[20]++;body['push_time']=PushController.formatPushTime(pushTime);}else{cov_22ifv5wh8i().b[11][1]++;}// TODO: If the req can pass the checking, we return immediately instead of waiting
// pushes to be sent. We probably change this behaviour in the future.
cov_22ifv5wh8i().s[21]++;let badgeUpdate=()=>{cov_22ifv5wh8i().f[3]++;cov_22ifv5wh8i().s[22]++;return Promise.resolve();};cov_22ifv5wh8i().s[23]++;if((cov_22ifv5wh8i().b[14][0]++,body.data)&&(cov_22ifv5wh8i().b[14][1]++,body.data.badge)){cov_22ifv5wh8i().b[13][0]++;const badge=(cov_22ifv5wh8i().s[24]++,body.data.badge);let restUpdate=(cov_22ifv5wh8i().s[25]++,{});cov_22ifv5wh8i().s[26]++;if((cov_22ifv5wh8i().b[16][0]++,typeof badge=='string')&&(cov_22ifv5wh8i().b[16][1]++,badge.toLowerCase()==='increment')){cov_22ifv5wh8i().b[15][0]++;cov_22ifv5wh8i().s[27]++;restUpdate={badge:{__op:'Increment',amount:1}};}else{cov_22ifv5wh8i().b[15][1]++;cov_22ifv5wh8i().s[28]++;if((cov_22ifv5wh8i().b[18][0]++,typeof badge=='object')&&(cov_22ifv5wh8i().b[18][1]++,typeof badge.__op=='string')&&(cov_22ifv5wh8i().b[18][2]++,badge.__op.toLowerCase()=='increment')&&(cov_22ifv5wh8i().b[18][3]++,Number(badge.amount))){cov_22ifv5wh8i().b[17][0]++;cov_22ifv5wh8i().s[29]++;restUpdate={badge:{__op:'Increment',amount:badge.amount}};}else{cov_22ifv5wh8i().b[17][1]++;cov_22ifv5wh8i().s[30]++;if(Number(badge)){cov_22ifv5wh8i().b[19][0]++;cov_22ifv5wh8i().s[31]++;restUpdate={badge:badge};}else{cov_22ifv5wh8i().b[19][1]++;cov_22ifv5wh8i().s[32]++;throw"Invalid value for badge, expected number or 'Increment' or {increment: number}";}}}// Force filtering on only valid device tokens
const updateWhere=(cov_22ifv5wh8i().s[33]++,(0,_utils.applyDeviceTokenExists)(where));cov_22ifv5wh8i().s[34]++;badgeUpdate=()=>{cov_22ifv5wh8i().f[4]++;// Build a real RestQuery so we can use it in RestWrite
const restQuery=(cov_22ifv5wh8i().s[35]++,new _RestQuery.default(config,(0,_Auth.master)(config),'_Installation',updateWhere));cov_22ifv5wh8i().s[36]++;return restQuery.buildRestWhere().then(()=>{cov_22ifv5wh8i().f[5]++;const write=(cov_22ifv5wh8i().s[37]++,new _RestWrite.default(config,(0,_Auth.master)(config),'_Installation',restQuery.restWhere,restUpdate));cov_22ifv5wh8i().s[38]++;write.runOptions.many=true;cov_22ifv5wh8i().s[39]++;return write.execute();});};}else{cov_22ifv5wh8i().b[13][1]++;}const pushStatus=(cov_22ifv5wh8i().s[40]++,(0,_StatusHandler.pushStatusHandler)(config));cov_22ifv5wh8i().s[41]++;return Promise.resolve().then(()=>{cov_22ifv5wh8i().f[6]++;cov_22ifv5wh8i().s[42]++;return pushStatus.setInitial(body,where);}).then(()=>{cov_22ifv5wh8i().f[7]++;cov_22ifv5wh8i().s[43]++;onPushStatusSaved(pushStatus.objectId);cov_22ifv5wh8i().s[44]++;return badgeUpdate();}).then(()=>{cov_22ifv5wh8i().f[8]++;cov_22ifv5wh8i().s[45]++;// Update audience lastUsed and timesUsed
if(body.audience_id){cov_22ifv5wh8i().b[20][0]++;const audienceId=(cov_22ifv5wh8i().s[46]++,body.audience_id);var updateAudience=(cov_22ifv5wh8i().s[47]++,{lastUsed:{__type:'Date',iso:new Date().toISOString()},timesUsed:{__op:'Increment',amount:1}});const write=(cov_22ifv5wh8i().s[48]++,new _RestWrite.default(config,(0,_Auth.master)(config),'_Audience',{objectId:audienceId},updateAudience));cov_22ifv5wh8i().s[49]++;write.execute();}else{cov_22ifv5wh8i().b[20][1]++;}// Don't wait for the audience update promise to resolve.
cov_22ifv5wh8i().s[50]++;return Promise.resolve();}).then(()=>{cov_22ifv5wh8i().f[9]++;cov_22ifv5wh8i().s[51]++;if((cov_22ifv5wh8i().b[22][0]++,Object.prototype.hasOwnProperty.call(body,'push_time'))&&(cov_22ifv5wh8i().b[22][1]++,config.hasPushScheduledSupport)){cov_22ifv5wh8i().b[21][0]++;cov_22ifv5wh8i().s[52]++;return Promise.resolve();}else{cov_22ifv5wh8i().b[21][1]++;}cov_22ifv5wh8i().s[53]++;return config.pushControllerQueue.enqueue(body,where,config,auth,pushStatus);}).catch(err=>{cov_22ifv5wh8i().f[10]++;cov_22ifv5wh8i().s[54]++;return pushStatus.fail(err).then(()=>{cov_22ifv5wh8i().f[11]++;cov_22ifv5wh8i().s[55]++;throw err;});});}/**
   * Get expiration time from the request body.
   * @param {Object} request A request object
   * @returns {Number|undefined} The expiration time if it exists in the request
   */static getExpirationTime(body=(cov_22ifv5wh8i().b[23][0]++,{})){cov_22ifv5wh8i().f[12]++;var hasExpirationTime=(cov_22ifv5wh8i().s[56]++,Object.prototype.hasOwnProperty.call(body,'expiration_time'));cov_22ifv5wh8i().s[57]++;if(!hasExpirationTime){cov_22ifv5wh8i().b[24][0]++;cov_22ifv5wh8i().s[58]++;return;}else{cov_22ifv5wh8i().b[24][1]++;}var expirationTimeParam=(cov_22ifv5wh8i().s[59]++,body['expiration_time']);var expirationTime;cov_22ifv5wh8i().s[60]++;if(typeof expirationTimeParam==='number'){cov_22ifv5wh8i().b[25][0]++;cov_22ifv5wh8i().s[61]++;expirationTime=new Date(expirationTimeParam*1000);}else{cov_22ifv5wh8i().b[25][1]++;cov_22ifv5wh8i().s[62]++;if(typeof expirationTimeParam==='string'){cov_22ifv5wh8i().b[26][0]++;cov_22ifv5wh8i().s[63]++;expirationTime=new Date(expirationTimeParam);}else{cov_22ifv5wh8i().b[26][1]++;cov_22ifv5wh8i().s[64]++;throw new _node.Parse.Error(_node.Parse.Error.PUSH_MISCONFIGURED,body['expiration_time']+' is not valid time.');}}// Check expirationTime is valid or not, if it is not valid, expirationTime is NaN
cov_22ifv5wh8i().s[65]++;if(!isFinite(expirationTime)){cov_22ifv5wh8i().b[27][0]++;cov_22ifv5wh8i().s[66]++;throw new _node.Parse.Error(_node.Parse.Error.PUSH_MISCONFIGURED,body['expiration_time']+' is not valid time.');}else{cov_22ifv5wh8i().b[27][1]++;}cov_22ifv5wh8i().s[67]++;return expirationTime.valueOf();}static getExpirationInterval(body=(cov_22ifv5wh8i().b[28][0]++,{})){cov_22ifv5wh8i().f[13]++;const hasExpirationInterval=(cov_22ifv5wh8i().s[68]++,Object.prototype.hasOwnProperty.call(body,'expiration_interval'));cov_22ifv5wh8i().s[69]++;if(!hasExpirationInterval){cov_22ifv5wh8i().b[29][0]++;cov_22ifv5wh8i().s[70]++;return;}else{cov_22ifv5wh8i().b[29][1]++;}var expirationIntervalParam=(cov_22ifv5wh8i().s[71]++,body['expiration_interval']);cov_22ifv5wh8i().s[72]++;if((cov_22ifv5wh8i().b[31][0]++,typeof expirationIntervalParam!=='number')||(cov_22ifv5wh8i().b[31][1]++,expirationIntervalParam<=0)){cov_22ifv5wh8i().b[30][0]++;cov_22ifv5wh8i().s[73]++;throw new _node.Parse.Error(_node.Parse.Error.PUSH_MISCONFIGURED,`expiration_interval must be a number greater than 0`);}else{cov_22ifv5wh8i().b[30][1]++;}cov_22ifv5wh8i().s[74]++;return expirationIntervalParam;}/**
   * Get push time from the request body.
   * @param {Object} request A request object
   * @returns {Number|undefined} The push time if it exists in the request
   */static getPushTime(body=(cov_22ifv5wh8i().b[32][0]++,{})){cov_22ifv5wh8i().f[14]++;var hasPushTime=(cov_22ifv5wh8i().s[75]++,Object.prototype.hasOwnProperty.call(body,'push_time'));cov_22ifv5wh8i().s[76]++;if(!hasPushTime){cov_22ifv5wh8i().b[33][0]++;cov_22ifv5wh8i().s[77]++;return;}else{cov_22ifv5wh8i().b[33][1]++;}var pushTimeParam=(cov_22ifv5wh8i().s[78]++,body['push_time']);var date;var isLocalTime=(cov_22ifv5wh8i().s[79]++,true);cov_22ifv5wh8i().s[80]++;if(typeof pushTimeParam==='number'){cov_22ifv5wh8i().b[34][0]++;cov_22ifv5wh8i().s[81]++;date=new Date(pushTimeParam*1000);}else{cov_22ifv5wh8i().b[34][1]++;cov_22ifv5wh8i().s[82]++;if(typeof pushTimeParam==='string'){cov_22ifv5wh8i().b[35][0]++;cov_22ifv5wh8i().s[83]++;isLocalTime=!PushController.pushTimeHasTimezoneComponent(pushTimeParam);cov_22ifv5wh8i().s[84]++;date=new Date(pushTimeParam);}else{cov_22ifv5wh8i().b[35][1]++;cov_22ifv5wh8i().s[85]++;throw new _node.Parse.Error(_node.Parse.Error.PUSH_MISCONFIGURED,body['push_time']+' is not valid time.');}}// Check pushTime is valid or not, if it is not valid, pushTime is NaN
cov_22ifv5wh8i().s[86]++;if(!isFinite(date)){cov_22ifv5wh8i().b[36][0]++;cov_22ifv5wh8i().s[87]++;throw new _node.Parse.Error(_node.Parse.Error.PUSH_MISCONFIGURED,body['push_time']+' is not valid time.');}else{cov_22ifv5wh8i().b[36][1]++;}cov_22ifv5wh8i().s[88]++;return{date,isLocalTime};}/**
   * Checks if a ISO8601 formatted date contains a timezone component
   * @param pushTimeParam {string}
   * @returns {boolean}
   */static pushTimeHasTimezoneComponent(pushTimeParam){cov_22ifv5wh8i().f[15]++;const offsetPattern=(cov_22ifv5wh8i().s[89]++,/(.+)([+-])\d\d:\d\d$/);cov_22ifv5wh8i().s[90]++;return(cov_22ifv5wh8i().b[37][0]++,pushTimeParam.indexOf('Z')===pushTimeParam.length-1)||(cov_22ifv5wh8i().b[37][1]++,offsetPattern.test(pushTimeParam))// 2007-04-05T12:30Z
;// 2007-04-05T12:30.000+02:00, 2007-04-05T12:30.000-02:00
}/**
   * Converts a date to ISO format in UTC time and strips the timezone if `isLocalTime` is true
   * @param date {Date}
   * @param isLocalTime {boolean}
   * @returns {string}
   */static formatPushTime({date,isLocalTime}){cov_22ifv5wh8i().f[16]++;cov_22ifv5wh8i().s[91]++;if(isLocalTime){cov_22ifv5wh8i().b[38][0]++;// Strip 'Z'
const isoString=(cov_22ifv5wh8i().s[92]++,date.toISOString());cov_22ifv5wh8i().s[93]++;return isoString.substring(0,isoString.indexOf('Z'));}else{cov_22ifv5wh8i().b[38][1]++;}cov_22ifv5wh8i().s[94]++;return date.toISOString();}}cov_22ifv5wh8i().s[95]++;exports.PushController=PushController;var _default=(cov_22ifv5wh8i().s[96]++,PushController);cov_22ifv5wh8i().s[97]++;exports.default=_default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,