"use strict";/*
  # Parse Server Keycloak Authentication

  ## Keycloak `authData`

  ```
    {
      "keycloak": {
        "access_token": "access token you got from keycloak JS client authentication",
        "id": "the id retrieved from client authentication in Keycloak",
        "roles": ["the roles retrieved from client authentication in Keycloak"],
        "groups": ["the groups retrieved from client authentication in Keycloak"]
      }
    }
  ```

  The authentication module will test if the authData is the same as the
  userinfo oauth call, comparing the attributes

  Copy the JSON config file generated on Keycloak (https://www.keycloak.org/docs/latest/securing_apps/index.html#_javascript_adapter)
  and paste it inside of a folder (Ex.: `auth/keycloak.json`) in your server.

  The options passed to Parse server:

  ```
    {
      auth: {
        keycloak: {
          config: require(`./auth/keycloak.json`)
        }
      }
    }
  ```
*/function cov_261iajv25a(){var path="/parse-server/lib/Adapters/Auth/keycloak.js";var hash="ae4d62de158b700b28d5224d365e2da370fc69f1";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Adapters/Auth/keycloak.js",statementMap:{"0":{start:{line:39,column:4},end:{line:39,column:25}},"1":{start:{line:41,column:21},end:{line:41,column:46}},"2":{start:{line:43,column:20},end:{line:55,column:1}},"3":{start:{line:44,column:2},end:{line:44,column:100}},"4":{start:{line:44,column:87},end:{line:44,column:100}},"5":{start:{line:46,column:13},end:{line:46,column:34}},"6":{start:{line:48,column:13},end:{line:48,column:34}},"7":{start:{line:50,column:2},end:{line:52,column:3}},"8":{start:{line:50,column:15},end:{line:50,column:16}},"9":{start:{line:51,column:4},end:{line:51,column:42}},"10":{start:{line:51,column:29},end:{line:51,column:42}},"11":{start:{line:54,column:2},end:{line:54,column:14}},"12":{start:{line:57,column:19},end:{line:100,column:1}},"13":{start:{line:65,column:2},end:{line:67,column:3}},"14":{start:{line:66,column:4},end:{line:66,column:95}},"15":{start:{line:69,column:2},end:{line:71,column:3}},"16":{start:{line:70,column:4},end:{line:70,column:90}},"17":{start:{line:73,column:2},end:{line:99,column:3}},"18":{start:{line:74,column:21},end:{line:80,column:6}},"19":{start:{line:82,column:4},end:{line:84,column:5}},"20":{start:{line:83,column:6},end:{line:83,column:13}},"21":{start:{line:86,column:4},end:{line:86,column:82}},"22":{start:{line:88,column:4},end:{line:90,column:5}},"23":{start:{line:89,column:6},end:{line:89,column:14}},"24":{start:{line:92,column:18},end:{line:92,column:36}},"25":{start:{line:94,column:4},end:{line:98,column:5}},"26":{start:{line:95,column:6},end:{line:95,column:80}},"27":{start:{line:97,column:6},end:{line:97,column:105}},"28":{start:{line:113,column:2},end:{line:113,column:39}},"29":{start:{line:118,column:2},end:{line:118,column:27}},"30":{start:{line:121,column:0},end:{line:124,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:43,column:20},end:{line:43,column:21}},loc:{start:{line:43,column:38},end:{line:55,column:1}},line:43},"1":{name:"(anonymous_1)",decl:{start:{line:57,column:19},end:{line:57,column:20}},loc:{start:{line:64,column:11},end:{line:100,column:1}},line:64},"2":{name:"validateAuthData",decl:{start:{line:112,column:9},end:{line:112,column:25}},loc:{start:{line:112,column:50},end:{line:114,column:1}},line:112},"3":{name:"validateAppId",decl:{start:{line:117,column:9},end:{line:117,column:22}},loc:{start:{line:117,column:25},end:{line:119,column:1}},line:117}},branchMap:{"0":{loc:{start:{line:44,column:2},end:{line:44,column:100}},type:"if",locations:[{start:{line:44,column:2},end:{line:44,column:100}},{start:{line:44,column:2},end:{line:44,column:100}}],line:44},"1":{loc:{start:{line:44,column:6},end:{line:44,column:85}},type:"binary-expr",locations:[{start:{line:44,column:6},end:{line:44,column:27}},{start:{line:44,column:31},end:{line:44,column:52}},{start:{line:44,column:56},end:{line:44,column:85}}],line:44},"2":{loc:{start:{line:51,column:4},end:{line:51,column:42}},type:"if",locations:[{start:{line:51,column:4},end:{line:51,column:42}},{start:{line:51,column:4},end:{line:51,column:42}}],line:51},"3":{loc:{start:{line:57,column:26},end:{line:62,column:6}},type:"default-arg",locations:[{start:{line:62,column:4},end:{line:62,column:6}}],line:57},"4":{loc:{start:{line:62,column:8},end:{line:64,column:6}},type:"default-arg",locations:[{start:{line:64,column:4},end:{line:64,column:6}}],line:62},"5":{loc:{start:{line:65,column:2},end:{line:67,column:3}},type:"if",locations:[{start:{line:65,column:2},end:{line:67,column:3}},{start:{line:65,column:2},end:{line:67,column:3}}],line:65},"6":{loc:{start:{line:65,column:8},end:{line:65,column:26}},type:"binary-expr",locations:[{start:{line:65,column:8},end:{line:65,column:20}},{start:{line:65,column:24},end:{line:65,column:26}}],line:65},"7":{loc:{start:{line:69,column:2},end:{line:71,column:3}},type:"if",locations:[{start:{line:69,column:2},end:{line:71,column:3}},{start:{line:69,column:2},end:{line:71,column:3}}],line:69},"8":{loc:{start:{line:69,column:6},end:{line:69,column:64}},type:"binary-expr",locations:[{start:{line:69,column:6},end:{line:69,column:13}},{start:{line:69,column:17},end:{line:69,column:64}}],line:69},"9":{loc:{start:{line:69,column:19},end:{line:69,column:63}},type:"binary-expr",locations:[{start:{line:69,column:19},end:{line:69,column:44}},{start:{line:69,column:48},end:{line:69,column:63}}],line:69},"10":{loc:{start:{line:82,column:4},end:{line:84,column:5}},type:"if",locations:[{start:{line:82,column:4},end:{line:84,column:5}},{start:{line:82,column:4},end:{line:84,column:5}}],line:82},"11":{loc:{start:{line:82,column:8},end:{line:82,column:148}},type:"binary-expr",locations:[{start:{line:82,column:8},end:{line:82,column:16}},{start:{line:82,column:20},end:{line:82,column:33}},{start:{line:82,column:37},end:{line:82,column:60}},{start:{line:82,column:64},end:{line:82,column:103}},{start:{line:82,column:107},end:{line:82,column:148}}],line:82},"12":{loc:{start:{line:88,column:4},end:{line:90,column:5}},type:"if",locations:[{start:{line:88,column:4},end:{line:90,column:5}},{start:{line:88,column:4},end:{line:90,column:5}}],line:88},"13":{loc:{start:{line:94,column:4},end:{line:98,column:5}},type:"if",locations:[{start:{line:94,column:4},end:{line:98,column:5}},{start:{line:94,column:4},end:{line:98,column:5}}],line:94},"14":{loc:{start:{line:112,column:36},end:{line:112,column:48}},type:"default-arg",locations:[{start:{line:112,column:46},end:{line:112,column:48}}],line:112}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0,0],"2":[0,0],"3":[0],"4":[0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0,0,0],"12":[0,0],"13":[0,0],"14":[0]},inputSourceMap:{version:3,sources:["../../../src/Adapters/Auth/keycloak.js"],names:["Parse","require","httpsRequest","arraysEqual","_arr1","_arr2","Array","isArray","length","arr1","concat","sort","arr2","i","handleAuth","access_token","id","roles","groups","config","Error","OBJECT_NOT_FOUND","response","get","host","path","headers","Authorization","data","sub","e","error","JSON","parse","text","error_description","HOSTING_ERROR","validateAuthData","authData","options","validateAppId","Promise","resolve","module","exports"],mappings:"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",sourcesContent:["/*\n  # Parse Server Keycloak Authentication\n\n  ## Keycloak `authData`\n\n  ```\n    {\n      \"keycloak\": {\n        \"access_token\": \"access token you got from keycloak JS client authentication\",\n        \"id\": \"the id retrieved from client authentication in Keycloak\",\n        \"roles\": [\"the roles retrieved from client authentication in Keycloak\"],\n        \"groups\": [\"the groups retrieved from client authentication in Keycloak\"]\n      }\n    }\n  ```\n\n  The authentication module will test if the authData is the same as the\n  userinfo oauth call, comparing the attributes\n\n  Copy the JSON config file generated on Keycloak (https://www.keycloak.org/docs/latest/securing_apps/index.html#_javascript_adapter)\n  and paste it inside of a folder (Ex.: `auth/keycloak.json`) in your server.\n\n  The options passed to Parse server:\n\n  ```\n    {\n      auth: {\n        keycloak: {\n          config: require(`./auth/keycloak.json`)\n        }\n      }\n    }\n  ```\n*/\n\nconst { Parse } = require('parse/node');\nconst httpsRequest = require('./httpsRequest');\n\nconst arraysEqual = (_arr1, _arr2) => {\n  if (!Array.isArray(_arr1) || !Array.isArray(_arr2) || _arr1.length !== _arr2.length) return false;\n\n  var arr1 = _arr1.concat().sort();\n  var arr2 = _arr2.concat().sort();\n\n  for (var i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) return false;\n  }\n\n  return true;\n};\n\nconst handleAuth = async ({ access_token, id, roles, groups } = {}, { config } = {}) => {\n  if (!(access_token && id)) {\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Missing access token and/or User id');\n  }\n  if (!config || !(config['auth-server-url'] && config['realm'])) {\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Missing keycloak configuration');\n  }\n  try {\n    const response = await httpsRequest.get({\n      host: config['auth-server-url'],\n      path: `/realms/${config['realm']}/protocol/openid-connect/userinfo`,\n      headers: {\n        Authorization: 'Bearer ' + access_token,\n      },\n    });\n    if (\n      response &&\n      response.data &&\n      response.data.sub == id &&\n      arraysEqual(response.data.roles, roles) &&\n      arraysEqual(response.data.groups, groups)\n    ) {\n      return;\n    }\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid authentication');\n  } catch (e) {\n    if (e instanceof Parse.Error) {\n      throw e;\n    }\n    const error = JSON.parse(e.text);\n    if (error.error_description) {\n      throw new Parse.Error(Parse.Error.HOSTING_ERROR, error.error_description);\n    } else {\n      throw new Parse.Error(\n        Parse.Error.HOSTING_ERROR,\n        'Could not connect to the authentication server'\n      );\n    }\n  }\n};\n\n/*\n  @param {Object} authData: the client provided authData\n  @param {string} authData.access_token: the access_token retrieved from client authentication in Keycloak\n  @param {string} authData.id: the id retrieved from client authentication in Keycloak\n  @param {Array}  authData.roles: the roles retrieved from client authentication in Keycloak\n  @param {Array}  authData.groups: the groups retrieved from client authentication in Keycloak\n  @param {Object} options: additional options\n  @param {Object} options.config: the config object passed during Parse Server instantiation\n*/\nfunction validateAuthData(authData, options = {}) {\n  return handleAuth(authData, options);\n}\n\n// Returns a promise that fulfills if this app id is valid.\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\nmodule.exports = {\n  validateAppId,\n  validateAuthData,\n};\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ae4d62de158b700b28d5224d365e2da370fc69f1"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_261iajv25a=function(){return actualCoverage;};}return actualCoverage;}cov_261iajv25a();const{Parse}=(cov_261iajv25a().s[0]++,require('parse/node'));const httpsRequest=(cov_261iajv25a().s[1]++,require('./httpsRequest'));cov_261iajv25a().s[2]++;const arraysEqual=(_arr1,_arr2)=>{cov_261iajv25a().f[0]++;cov_261iajv25a().s[3]++;if((cov_261iajv25a().b[1][0]++,!Array.isArray(_arr1))||(cov_261iajv25a().b[1][1]++,!Array.isArray(_arr2))||(cov_261iajv25a().b[1][2]++,_arr1.length!==_arr2.length)){cov_261iajv25a().b[0][0]++;cov_261iajv25a().s[4]++;return false;}else{cov_261iajv25a().b[0][1]++;}var arr1=(cov_261iajv25a().s[5]++,_arr1.concat().sort());var arr2=(cov_261iajv25a().s[6]++,_arr2.concat().sort());cov_261iajv25a().s[7]++;for(var i=(cov_261iajv25a().s[8]++,0);i<arr1.length;i++){cov_261iajv25a().s[9]++;if(arr1[i]!==arr2[i]){cov_261iajv25a().b[2][0]++;cov_261iajv25a().s[10]++;return false;}else{cov_261iajv25a().b[2][1]++;}}cov_261iajv25a().s[11]++;return true;};cov_261iajv25a().s[12]++;const handleAuth=async({access_token,id,roles,groups}=(cov_261iajv25a().b[3][0]++,{}),{config}=(cov_261iajv25a().b[4][0]++,{}))=>{cov_261iajv25a().f[1]++;cov_261iajv25a().s[13]++;if(!((cov_261iajv25a().b[6][0]++,access_token)&&(cov_261iajv25a().b[6][1]++,id))){cov_261iajv25a().b[5][0]++;cov_261iajv25a().s[14]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,'Missing access token and/or User id');}else{cov_261iajv25a().b[5][1]++;}cov_261iajv25a().s[15]++;if((cov_261iajv25a().b[8][0]++,!config)||(cov_261iajv25a().b[8][1]++,!((cov_261iajv25a().b[9][0]++,config['auth-server-url'])&&(cov_261iajv25a().b[9][1]++,config['realm'])))){cov_261iajv25a().b[7][0]++;cov_261iajv25a().s[16]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,'Missing keycloak configuration');}else{cov_261iajv25a().b[7][1]++;}cov_261iajv25a().s[17]++;try{const response=(cov_261iajv25a().s[18]++,await httpsRequest.get({host:config['auth-server-url'],path:`/realms/${config['realm']}/protocol/openid-connect/userinfo`,headers:{Authorization:'Bearer '+access_token}}));cov_261iajv25a().s[19]++;if((cov_261iajv25a().b[11][0]++,response)&&(cov_261iajv25a().b[11][1]++,response.data)&&(cov_261iajv25a().b[11][2]++,response.data.sub==id)&&(cov_261iajv25a().b[11][3]++,arraysEqual(response.data.roles,roles))&&(cov_261iajv25a().b[11][4]++,arraysEqual(response.data.groups,groups))){cov_261iajv25a().b[10][0]++;cov_261iajv25a().s[20]++;return;}else{cov_261iajv25a().b[10][1]++;}cov_261iajv25a().s[21]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,'Invalid authentication');}catch(e){cov_261iajv25a().s[22]++;if(e instanceof Parse.Error){cov_261iajv25a().b[12][0]++;cov_261iajv25a().s[23]++;throw e;}else{cov_261iajv25a().b[12][1]++;}const error=(cov_261iajv25a().s[24]++,JSON.parse(e.text));cov_261iajv25a().s[25]++;if(error.error_description){cov_261iajv25a().b[13][0]++;cov_261iajv25a().s[26]++;throw new Parse.Error(Parse.Error.HOSTING_ERROR,error.error_description);}else{cov_261iajv25a().b[13][1]++;cov_261iajv25a().s[27]++;throw new Parse.Error(Parse.Error.HOSTING_ERROR,'Could not connect to the authentication server');}}};/*
  @param {Object} authData: the client provided authData
  @param {string} authData.access_token: the access_token retrieved from client authentication in Keycloak
  @param {string} authData.id: the id retrieved from client authentication in Keycloak
  @param {Array}  authData.roles: the roles retrieved from client authentication in Keycloak
  @param {Array}  authData.groups: the groups retrieved from client authentication in Keycloak
  @param {Object} options: additional options
  @param {Object} options.config: the config object passed during Parse Server instantiation
*/function validateAuthData(authData,options=(cov_261iajv25a().b[14][0]++,{})){cov_261iajv25a().f[2]++;cov_261iajv25a().s[28]++;return handleAuth(authData,options);}// Returns a promise that fulfills if this app id is valid.
function validateAppId(){cov_261iajv25a().f[3]++;cov_261iajv25a().s[29]++;return Promise.resolve();}cov_261iajv25a().s[30]++;module.exports={validateAppId,validateAuthData};//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,