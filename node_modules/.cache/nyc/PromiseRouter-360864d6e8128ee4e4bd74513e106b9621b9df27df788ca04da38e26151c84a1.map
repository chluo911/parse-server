{"version":3,"sources":["../src/PromiseRouter.js"],"names":["Layer","require","validateParameter","key","value","match","PromiseRouter","constructor","routes","appId","mountRoutes","merge","router","route","push","method","path","handlers","handler","length","req","reduce","promise","then","Promise","resolve","layer","params","Object","keys","forEach","mountOnto","expressApp","toLowerCase","makeExpressHandler","call","expressRouter","express","Router","tryRouteRequest","request","Parse","Error","INVALID_JSON","reject","promiseHandler","res","next","url","maskSensitiveUrl","body","assign","headers","log","logRequest","result","response","location","text","error","logResponse","status","header","set","send","json","catch","e","maskUrl","originalUrl","toString","shouldMaskUrl","includes"],"mappings":"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","sourcesContent":["// A router that is based on promises rather than req/res/next.\n// This is intended to replace the use of express.Router to handle\n// subsections of the API surface.\n// This will make it easier to have methods like 'batch' that\n// themselves use our routing information, without disturbing express\n// components that external developers may be modifying.\n\nimport Parse from 'parse/node';\nimport express from 'express';\nimport log from './logger';\nimport { inspect } from 'util';\nconst Layer = require('express/lib/router/layer');\n\nfunction validateParameter(key, value) {\n  if (key == 'className') {\n    if (value.match(/_?[A-Za-z][A-Za-z_0-9]*/)) {\n      return value;\n    }\n  } else if (key == 'objectId') {\n    if (value.match(/[A-Za-z0-9]+/)) {\n      return value;\n    }\n  } else {\n    return value;\n  }\n}\n\nexport default class PromiseRouter {\n  // Each entry should be an object with:\n  // path: the path to route, in express format\n  // method: the HTTP method that this route handles.\n  //   Must be one of: POST, GET, PUT, DELETE\n  // handler: a function that takes request, and returns a promise.\n  //   Successful handlers should resolve to an object with fields:\n  //     status: optional. the http status code. defaults to 200\n  //     response: a json object with the content of the response\n  //     location: optional. a location header\n  constructor(routes = [], appId) {\n    this.routes = routes;\n    this.appId = appId;\n    this.mountRoutes();\n  }\n\n  // Leave the opportunity to\n  // subclasses to mount their routes by overriding\n  mountRoutes() {}\n\n  // Merge the routes into this one\n  merge(router) {\n    for (var route of router.routes) {\n      this.routes.push(route);\n    }\n  }\n\n  route(method, path, ...handlers) {\n    switch (method) {\n      case 'POST':\n      case 'GET':\n      case 'PUT':\n      case 'DELETE':\n        break;\n      default:\n        throw 'cannot route method: ' + method;\n    }\n\n    let handler = handlers[0];\n\n    if (handlers.length > 1) {\n      handler = function (req) {\n        return handlers.reduce((promise, handler) => {\n          return promise.then(() => {\n            return handler(req);\n          });\n        }, Promise.resolve());\n      };\n    }\n\n    this.routes.push({\n      path: path,\n      method: method,\n      handler: handler,\n      layer: new Layer(path, null, handler),\n    });\n  }\n\n  // Returns an object with:\n  //   handler: the handler that should deal with this request\n  //   params: any :-params that got parsed from the path\n  // Returns undefined if there is no match.\n  match(method, path) {\n    for (var route of this.routes) {\n      if (route.method != method) {\n        continue;\n      }\n      const layer = route.layer || new Layer(route.path, null, route.handler);\n      const match = layer.match(path);\n      if (match) {\n        const params = layer.params;\n        Object.keys(params).forEach(key => {\n          params[key] = validateParameter(key, params[key]);\n        });\n        return { params: params, handler: route.handler };\n      }\n    }\n  }\n\n  // Mount the routes on this router onto an express app (or express router)\n  mountOnto(expressApp) {\n    this.routes.forEach(route => {\n      const method = route.method.toLowerCase();\n      const handler = makeExpressHandler(this.appId, route.handler);\n      expressApp[method].call(expressApp, route.path, handler);\n    });\n    return expressApp;\n  }\n\n  expressRouter() {\n    return this.mountOnto(express.Router());\n  }\n\n  tryRouteRequest(method, path, request) {\n    var match = this.match(method, path);\n    if (!match) {\n      throw new Parse.Error(Parse.Error.INVALID_JSON, 'cannot route ' + method + ' ' + path);\n    }\n    request.params = match.params;\n    return new Promise((resolve, reject) => {\n      match.handler(request).then(resolve, reject);\n    });\n  }\n}\n\n// A helper function to make an express handler out of a a promise\n// handler.\n// Express handlers should never throw; if a promise handler throws we\n// just treat it like it resolved to an error.\nfunction makeExpressHandler(appId, promiseHandler) {\n  return function (req, res, next) {\n    try {\n      const url = maskSensitiveUrl(req);\n      const body = Object.assign({}, req.body);\n      const method = req.method;\n      const headers = req.headers;\n      log.logRequest({\n        method,\n        url,\n        headers,\n        body,\n      });\n      promiseHandler(req)\n        .then(\n          result => {\n            if (!result.response && !result.location && !result.text) {\n              log.error('the handler did not include a \"response\" or a \"location\" field');\n              throw 'control should not get here';\n            }\n\n            log.logResponse({ method, url, result });\n\n            var status = result.status || 200;\n            res.status(status);\n\n            if (result.headers) {\n              Object.keys(result.headers).forEach(header => {\n                res.set(header, result.headers[header]);\n              });\n            }\n\n            if (result.text) {\n              res.send(result.text);\n              return;\n            }\n\n            if (result.location) {\n              res.set('Location', result.location);\n              // Override the default expressjs response\n              // as it double encodes %encoded chars in URL\n              if (!result.response) {\n                res.send('Found. Redirecting to ' + result.location);\n                return;\n              }\n            }\n            res.json(result.response);\n          },\n          error => {\n            next(error);\n          }\n        )\n        .catch(e => {\n          log.error(`Error generating response. ${inspect(e)}`, { error: e });\n          next(e);\n        });\n    } catch (e) {\n      log.error(`Error handling request: ${inspect(e)}`, { error: e });\n      next(e);\n    }\n  };\n}\n\nfunction maskSensitiveUrl(req) {\n  let maskUrl = req.originalUrl.toString();\n  const shouldMaskUrl =\n    req.method === 'GET' &&\n    req.originalUrl.includes('/login') &&\n    !req.originalUrl.includes('classes');\n  if (shouldMaskUrl) {\n    maskUrl = log.maskSensitiveUrl(maskUrl);\n  }\n  return maskUrl;\n}\n"]}