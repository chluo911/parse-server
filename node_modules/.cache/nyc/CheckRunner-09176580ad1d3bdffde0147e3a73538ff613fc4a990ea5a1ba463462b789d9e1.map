{"version":3,"sources":["../../src/Security/CheckRunner.js"],"names":["CheckRunner","constructor","config","_validateParams","enableCheck","enableCheckLog","checkGroups","CheckGroups","run","version","groups","Object","values","filter","c","map","CheckGroup","forEach","group","report","_generateReport","_logReport","state","CheckState","success","groupReport","name","checks","check","checkReport","title","checkState","fail","warning","solution","push","log","s","logger","info","warn","indent","output","checksCount","failedChecksCount","skippedCheckCount","_getLogIconForState","none","params","Utils","validateParams","t","v","isBoolean","o","isArray","module","exports"],"mappings":"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","sourcesContent":["/**\n * @module SecurityCheck\n */\n\nimport Utils from '../Utils';\nimport { CheckState } from './Check';\nimport * as CheckGroups from './CheckGroups/CheckGroups';\nimport logger from '../logger';\nimport { isArray, isBoolean } from 'lodash';\n\n/**\n * The security check runner.\n */\nclass CheckRunner {\n  /**\n   * The security check runner.\n   * @param {Object} [config] The configuration options.\n   * @param {Boolean} [config.enableCheck=false] Is true if Parse Server should report weak security settings.\n   * @param {Boolean} [config.enableCheckLog=false] Is true if the security check report should be written to logs.\n   * @param {Object} [config.checkGroups] The check groups to run. Default are the groups defined in `./CheckGroups/CheckGroups.js`.\n   */\n  constructor(config = {}) {\n    this._validateParams(config);\n    const { enableCheck = false, enableCheckLog = false, checkGroups = CheckGroups } = config;\n    this.enableCheck = enableCheck;\n    this.enableCheckLog = enableCheckLog;\n    this.checkGroups = checkGroups;\n  }\n\n  /**\n   * Runs all security checks and returns the results.\n   * @params\n   * @returns {Object} The security check report.\n   */\n  async run({ version = '1.0.0' } = {}) {\n    // Instantiate check groups\n    const groups = Object.values(this.checkGroups)\n      .filter(c => typeof c === 'function')\n      .map(CheckGroup => new CheckGroup());\n\n    // Run checks\n    groups.forEach(group => group.run());\n\n    // Generate JSON report\n    const report = this._generateReport({ groups, version });\n\n    // If report should be written to logs\n    if (this.enableCheckLog) {\n      this._logReport(report);\n    }\n    return report;\n  }\n\n  /**\n   * Generates a security check report in JSON format with schema:\n   * ```\n   * {\n   *    report: {\n   *      version: \"1.0.0\", // The report version, defines the schema\n   *      state: \"fail\"     // The disjunctive indicator of failed checks in all groups.\n   *      groups: [         // The check groups\n   *        {\n   *          name: \"House\",            // The group name\n   *          state: \"fail\"             // The disjunctive indicator of failed checks in this group.\n   *          checks: [                 // The checks\n   *            title: \"Door locked\",   // The check title\n   *            state: \"fail\"           // The check state\n   *            warning: \"Anyone can enter your house.\"   // The warning.\n   *            solution: \"Lock your door.\"               // The solution.\n   *          ]\n   *        },\n   *        ...\n   *      ]\n   *    }\n   * }\n   * ```\n   * @param {Object} params The parameters.\n   * @param {Array<CheckGroup>} params.groups The check groups.\n   * @param {String} params.version: The report schema version.\n   * @returns {Object} The report.\n   */\n  _generateReport({ groups, version }) {\n    // Create report template\n    const report = {\n      report: {\n        version,\n        state: CheckState.success,\n        groups: [],\n      },\n    };\n\n    // Identify report version\n    switch (version) {\n      case '1.0.0':\n      default:\n        // For each check group\n        for (const group of groups) {\n          // Create group report\n          const groupReport = {\n            name: group.name(),\n            state: CheckState.success,\n            checks: [],\n          };\n\n          // Create check reports\n          groupReport.checks = group.checks().map(check => {\n            const checkReport = {\n              title: check.title,\n              state: check.checkState(),\n            };\n            if (check.checkState() == CheckState.fail) {\n              checkReport.warning = check.warning;\n              checkReport.solution = check.solution;\n              report.report.state = CheckState.fail;\n              groupReport.state = CheckState.fail;\n            }\n            return checkReport;\n          });\n\n          report.report.groups.push(groupReport);\n        }\n    }\n    return report;\n  }\n\n  /**\n   * Logs the security check report.\n   * @param {Object} report The report to log.\n   */\n  _logReport(report) {\n    // Determine log level depending on whether any check failed\n    const log =\n      report.report.state == CheckState.success ? s => logger.info(s) : s => logger.warn(s);\n\n    // Declare output\n    const indent = '   ';\n    let output = '';\n    let checksCount = 0;\n    let failedChecksCount = 0;\n    let skippedCheckCount = 0;\n\n    // Traverse all groups and checks for compose output\n    for (const group of report.report.groups) {\n      output += `\\n- ${group.name}`;\n\n      for (const check of group.checks) {\n        checksCount++;\n        output += `\\n${indent}${this._getLogIconForState(check.state)} ${check.title}`;\n\n        if (check.state == CheckState.fail) {\n          failedChecksCount++;\n          output += `\\n${indent}${indent}Warning: ${check.warning}`;\n          output += ` ${check.solution}`;\n        } else if (check.state == CheckState.none) {\n          skippedCheckCount++;\n          output += `\\n${indent}${indent}Test did not execute, this is likely an internal server issue, please report.`;\n        }\n      }\n    }\n\n    output =\n      `\\n###################################` +\n      `\\n#                                 #` +\n      `\\n#   Parse Server Security Check   #` +\n      `\\n#                                 #` +\n      `\\n###################################` +\n      `\\n` +\n      `\\n${\n        failedChecksCount > 0 ? 'Warning: ' : ''\n      }${failedChecksCount} weak security setting(s) found${failedChecksCount > 0 ? '!' : ''}` +\n      `\\n${checksCount} check(s) executed` +\n      `\\n${skippedCheckCount} check(s) skipped` +\n      `\\n` +\n      `${output}`;\n\n    // Write log\n    log(output);\n  }\n\n  /**\n   * Returns an icon for use in the report log output.\n   * @param {CheckState} state The check state.\n   * @returns {String} The icon.\n   */\n  _getLogIconForState(state) {\n    switch (state) {\n      case CheckState.success:\n        return '✅';\n      case CheckState.fail:\n        return '❌';\n      default:\n        return 'ℹ️';\n    }\n  }\n\n  /**\n   * Validates the constructor parameters.\n   * @param {Object} params The parameters to validate.\n   */\n  _validateParams(params) {\n    Utils.validateParams(params, {\n      enableCheck: { t: 'boolean', v: isBoolean, o: true },\n      enableCheckLog: { t: 'boolean', v: isBoolean, o: true },\n      checkGroups: { t: 'array', v: isArray, o: true },\n    });\n  }\n}\n\nmodule.exports = CheckRunner;\n"]}