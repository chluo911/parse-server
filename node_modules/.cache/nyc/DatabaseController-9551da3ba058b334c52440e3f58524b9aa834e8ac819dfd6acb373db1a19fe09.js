"use strict";function cov_cxckea6v3(){var path="/parse-server/lib/Controllers/DatabaseController.js";var hash="a11e3b3456bad0c38467f9be0d8d5a82b92bdbbe";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Controllers/DatabaseController.js",statementMap:{"0":{start:{line:3,column:12},end:{line:3,column:33}},"1":{start:{line:5,column:14},end:{line:5,column:55}},"2":{start:{line:7,column:17},end:{line:7,column:61}},"3":{start:{line:9,column:16},end:{line:9,column:59}},"4":{start:{line:11,column:14},end:{line:11,column:58}},"5":{start:{line:13,column:23},end:{line:13,column:77}},"6":{start:{line:15,column:22},end:{line:15,column:67}},"7":{start:{line:17,column:27},end:{line:17,column:107}},"8":{start:{line:19,column:19},end:{line:19,column:83}},"9":{start:{line:21,column:49},end:{line:21,column:96}},"10":{start:{line:21,column:84},end:{line:21,column:96}},"11":{start:{line:21,column:121},end:{line:21,column:134}},"12":{start:{line:21,column:159},end:{line:21,column:172}},"13":{start:{line:21,column:174},end:{line:21,column:309}},"14":{start:{line:21,column:234},end:{line:21,column:292}},"15":{start:{line:23,column:53},end:{line:23,column:111}},"16":{start:{line:23,column:98},end:{line:23,column:109}},"17":{start:{line:23,column:112},end:{line:23,column:214}},"18":{start:{line:23,column:188},end:{line:23,column:212}},"19":{start:{line:23,column:227},end:{line:23,column:264}},"20":{start:{line:23,column:266},end:{line:23,column:321}},"21":{start:{line:23,column:297},end:{line:23,column:319}},"22":{start:{line:23,column:335},end:{line:23,column:337}},"23":{start:{line:23,column:367},end:{line:23,column:423}},"24":{start:{line:23,column:425},end:{line:23,column:726}},"25":{start:{line:23,column:448},end:{line:23,column:724}},"26":{start:{line:23,column:534},end:{line:23,column:606}},"27":{start:{line:23,column:608},end:{line:23,column:722}},"28":{start:{line:23,column:646},end:{line:23,column:687}},"29":{start:{line:23,column:697},end:{line:23,column:720}},"30":{start:{line:23,column:727},end:{line:23,column:748}},"31":{start:{line:23,column:749},end:{line:23,column:787}},"32":{start:{line:23,column:762},end:{line:23,column:785}},"33":{start:{line:23,column:788},end:{line:23,column:802}},"34":{start:{line:25,column:39},end:{line:25,column:93}},"35":{start:{line:27,column:54},end:{line:27,column:73}},"36":{start:{line:27,column:75},end:{line:27,column:330}},"37":{start:{line:27,column:125},end:{line:27,column:161}},"38":{start:{line:27,column:163},end:{line:27,column:296}},"39":{start:{line:27,column:185},end:{line:27,column:294}},"40":{start:{line:27,column:227},end:{line:27,column:290}},"41":{start:{line:27,column:297},end:{line:27,column:328}},"42":{start:{line:27,column:331},end:{line:27,column:343}},"43":{start:{line:29,column:33},end:{line:29,column:517}},"44":{start:{line:29,column:46},end:{line:29,column:47}},"45":{start:{line:29,column:91},end:{line:29,column:131}},"46":{start:{line:29,column:133},end:{line:29,column:515}},"47":{start:{line:29,column:146},end:{line:29,column:247}},"48":{start:{line:29,column:201},end:{line:29,column:243}},"49":{start:{line:29,column:255},end:{line:29,column:515}},"50":{start:{line:29,column:295},end:{line:29,column:369}},"51":{start:{line:29,column:379},end:{line:29,column:513}},"52":{start:{line:29,column:428},end:{line:29,column:509}},"53":{start:{line:29,column:518},end:{line:29,column:532}},"54":{start:{line:31,column:44},end:{line:31,column:195}},"55":{start:{line:31,column:62},end:{line:31,column:166}},"56":{start:{line:31,column:176},end:{line:31,column:193}},"57":{start:{line:31,column:196},end:{line:31,column:207}},"58":{start:{line:33,column:54},end:{line:33,column:84}},"59":{start:{line:33,column:74},end:{line:33,column:84}},"60":{start:{line:33,column:98},end:{line:33,column:145}},"61":{start:{line:33,column:159},end:{line:33,column:475}},"62":{start:{line:33,column:218},end:{line:33,column:254}},"63":{start:{line:33,column:256},end:{line:33,column:473}},"64":{start:{line:33,column:304},end:{line:33,column:330}},"65":{start:{line:33,column:331},end:{line:33,column:372}},"66":{start:{line:33,column:363},end:{line:33,column:372}},"67":{start:{line:33,column:373},end:{line:33,column:444}},"68":{start:{line:33,column:435},end:{line:33,column:444}},"69":{start:{line:33,column:445},end:{line:33,column:471}},"70":{start:{line:33,column:476},end:{line:33,column:490}},"71":{start:{line:35,column:59},end:{line:35,column:89}},"72":{start:{line:35,column:79},end:{line:35,column:89}},"73":{start:{line:35,column:103},end:{line:35,column:105}},"74":{start:{line:35,column:124},end:{line:35,column:143}},"75":{start:{line:35,column:157},end:{line:35,column:290}},"76":{start:{line:35,column:199},end:{line:35,column:219}},"77":{start:{line:35,column:220},end:{line:35,column:261}},"78":{start:{line:35,column:252},end:{line:35,column:261}},"79":{start:{line:35,column:262},end:{line:35,column:288}},"80":{start:{line:35,column:291},end:{line:35,column:305}},"81":{start:{line:38,column:19},end:{line:38,column:51}},"82":{start:{line:41,column:2},end:{line:43,column:4}},"83":{start:{line:44,column:2},end:{line:44,column:18}},"84":{start:{line:48,column:19},end:{line:48,column:51}},"85":{start:{line:51,column:2},end:{line:53,column:4}},"86":{start:{line:54,column:2},end:{line:54,column:18}},"87":{start:{line:58,column:27},end:{line:82,column:1}},"88":{start:{line:61,column:6},end:{line:61,column:10}},"89":{start:{line:62,column:15},end:{line:62,column:54}},"90":{start:{line:64,column:2},end:{line:66,column:3}},"91":{start:{line:65,column:4},end:{line:65,column:18}},"92":{start:{line:68,column:2},end:{line:68,column:21}},"93":{start:{line:69,column:2},end:{line:69,column:21}},"94":{start:{line:71,column:2},end:{line:79,column:3}},"95":{start:{line:72,column:4},end:{line:74,column:5}},"96":{start:{line:73,column:6},end:{line:73,column:32}},"97":{start:{line:76,column:4},end:{line:78,column:5}},"98":{start:{line:77,column:6},end:{line:77,column:32}},"99":{start:{line:81,column:2},end:{line:81,column:16}},"100":{start:{line:84,column:25},end:{line:84,column:200}},"101":{start:{line:86,column:26},end:{line:88,column:1}},"102":{start:{line:87,column:2},end:{line:87,column:44}},"103":{start:{line:90,column:22},end:{line:132,column:1}},"104":{start:{line:91,column:2},end:{line:93,column:3}},"105":{start:{line:92,column:4},end:{line:92,column:89}},"106":{start:{line:95,column:2},end:{line:101,column:3}},"107":{start:{line:96,column:4},end:{line:100,column:5}},"108":{start:{line:97,column:6},end:{line:97,column:39}},"109":{start:{line:99,column:6},end:{line:99,column:107}},"110":{start:{line:103,column:2},end:{line:109,column:3}},"111":{start:{line:104,column:4},end:{line:108,column:5}},"112":{start:{line:105,column:6},end:{line:105,column:40}},"113":{start:{line:107,column:6},end:{line:107,column:108}},"114":{start:{line:111,column:2},end:{line:117,column:3}},"115":{start:{line:112,column:4},end:{line:116,column:5}},"116":{start:{line:113,column:6},end:{line:113,column:40}},"117":{start:{line:115,column:6},end:{line:115,column:122}},"118":{start:{line:119,column:2},end:{line:131,column:5}},"119":{start:{line:120,column:4},end:{line:126,column:5}},"120":{start:{line:121,column:6},end:{line:125,column:7}},"121":{start:{line:122,column:8},end:{line:124,column:9}},"122":{start:{line:123,column:10},end:{line:123,column:127}},"123":{start:{line:128,column:4},end:{line:130,column:5}},"124":{start:{line:129,column:6},end:{line:129,column:98}},"125":{start:{line:135,column:28},end:{line:233,column:1}},"126":{start:{line:136,column:15},end:{line:136,column:19}},"127":{start:{line:137,column:2},end:{line:137,column:47}},"128":{start:{line:137,column:25},end:{line:137,column:47}},"129":{start:{line:139,column:16},end:{line:139,column:58}},"130":{start:{line:141,column:2},end:{line:192,column:3}},"131":{start:{line:142,column:28},end:{line:142,column:67}},"132":{start:{line:144,column:4},end:{line:191,column:5}},"133":{start:{line:146,column:41},end:{line:151,column:8}},"134":{start:{line:146,column:90},end:{line:146,column:118}},"135":{start:{line:147,column:8},end:{line:150,column:10}},"136":{start:{line:152,column:33},end:{line:152,column:35}},"137":{start:{line:153,column:36},end:{line:153,column:41}},"138":{start:{line:155,column:6},end:{line:171,column:9}},"139":{start:{line:156,column:38},end:{line:156,column:43}},"140":{start:{line:157,column:35},end:{line:157,column:58}},"141":{start:{line:159,column:8},end:{line:165,column:9}},"142":{start:{line:160,column:10},end:{line:164,column:11}},"143":{start:{line:161,column:12},end:{line:161,column:113}},"144":{start:{line:161,column:70},end:{line:161,column:111}},"145":{start:{line:163,column:12},end:{line:163,column:108}},"146":{start:{line:167,column:8},end:{line:170,column:9}},"147":{start:{line:168,column:10},end:{line:168,column:41}},"148":{start:{line:169,column:10},end:{line:169,column:53}},"149":{start:{line:175,column:6},end:{line:177,column:7}},"150":{start:{line:176,column:8},end:{line:176,column:49}},"151":{start:{line:180,column:6},end:{line:190,column:9}},"152":{start:{line:181,column:8},end:{line:189,column:9}},"153":{start:{line:184,column:10},end:{line:188,column:11}},"154":{start:{line:185,column:12},end:{line:185,column:37}},"155":{start:{line:187,column:12},end:{line:187,column:78}},"156":{start:{line:187,column:58},end:{line:187,column:76}},"157":{start:{line:194,column:22},end:{line:194,column:43}},"158":{start:{line:198,column:2},end:{line:203,column:3}},"159":{start:{line:199,column:4},end:{line:199,column:70}},"160":{start:{line:199,column:52},end:{line:199,column:68}},"161":{start:{line:202,column:4},end:{line:202,column:135}},"162":{start:{line:202,column:117},end:{line:202,column:133}},"163":{start:{line:205,column:2},end:{line:207,column:3}},"164":{start:{line:206,column:4},end:{line:206,column:18}},"165":{start:{line:209,column:2},end:{line:209,column:44}},"166":{start:{line:210,column:2},end:{line:210,column:33}},"167":{start:{line:211,column:2},end:{line:211,column:29}},"168":{start:{line:213,column:2},end:{line:215,column:3}},"169":{start:{line:214,column:4},end:{line:214,column:18}},"170":{start:{line:217,column:2},end:{line:217,column:36}},"171":{start:{line:218,column:2},end:{line:218,column:34}},"172":{start:{line:219,column:2},end:{line:219,column:45}},"173":{start:{line:220,column:2},end:{line:220,column:27}},"174":{start:{line:221,column:2},end:{line:221,column:47}},"175":{start:{line:222,column:2},end:{line:222,column:36}},"176":{start:{line:223,column:2},end:{line:223,column:44}},"177":{start:{line:224,column:2},end:{line:224,column:37}},"178":{start:{line:225,column:2},end:{line:225,column:34}},"179":{start:{line:227,column:2},end:{line:229,column:3}},"180":{start:{line:228,column:4},end:{line:228,column:18}},"181":{start:{line:231,column:2},end:{line:231,column:25}},"182":{start:{line:232,column:2},end:{line:232,column:16}},"183":{start:{line:243,column:29},end:{line:243,column:258}},"184":{start:{line:245,column:27},end:{line:247,column:1}},"185":{start:{line:246,column:2},end:{line:246,column:48}},"186":{start:{line:250,column:2},end:{line:253,column:3}},"187":{start:{line:251,column:4},end:{line:251,column:29}},"188":{start:{line:252,column:4},end:{line:252,column:18}},"189":{start:{line:254,column:2},end:{line:254,column:40}},"190":{start:{line:256,column:15},end:{line:256,column:29}},"191":{start:{line:257,column:19},end:{line:257,column:26}},"192":{start:{line:258,column:19},end:{line:258,column:42}},"193":{start:{line:259,column:2},end:{line:259,column:94}},"194":{start:{line:260,column:2},end:{line:260,column:21}},"195":{start:{line:261,column:2},end:{line:261,column:16}},"196":{start:{line:265,column:19},end:{line:265,column:21}},"197":{start:{line:267,column:2},end:{line:269,column:3}},"198":{start:{line:268,column:4},end:{line:268,column:37}},"199":{start:{line:271,column:2},end:{line:279,column:5}},"200":{start:{line:272,column:22},end:{line:272,column:41}},"201":{start:{line:274,column:4},end:{line:278,column:5}},"202":{start:{line:277,column:6},end:{line:277,column:51}},"203":{start:{line:280,column:2},end:{line:280,column:35}},"204":{start:{line:284,column:2},end:{line:284,column:37}},"205":{start:{line:287,column:40},end:{line:332,column:1}},"206":{start:{line:288,column:2},end:{line:331,column:3}},"207":{start:{line:289,column:4},end:{line:330,column:5}},"208":{start:{line:290,column:6},end:{line:329,column:7}},"209":{start:{line:292,column:10},end:{line:294,column:11}},"210":{start:{line:293,column:12},end:{line:293,column:107}},"211":{start:{line:296,column:10},end:{line:296,column:43}},"212":{start:{line:297,column:10},end:{line:297,column:16}},"213":{start:{line:300,column:10},end:{line:302,column:11}},"214":{start:{line:301,column:12},end:{line:301,column:107}},"215":{start:{line:304,column:10},end:{line:304,column:44}},"216":{start:{line:305,column:10},end:{line:305,column:16}},"217":{start:{line:308,column:10},end:{line:310,column:11}},"218":{start:{line:309,column:12},end:{line:309,column:107}},"219":{start:{line:312,column:10},end:{line:312,column:44}},"220":{start:{line:313,column:10},end:{line:313,column:16}},"221":{start:{line:316,column:10},end:{line:318,column:11}},"222":{start:{line:317,column:12},end:{line:317,column:107}},"223":{start:{line:320,column:10},end:{line:320,column:27}},"224":{start:{line:321,column:10},end:{line:321,column:16}},"225":{start:{line:324,column:10},end:{line:324,column:29}},"226":{start:{line:325,column:10},end:{line:325,column:16}},"227":{start:{line:328,column:10},end:{line:328,column:135}},"228":{start:{line:334,column:26},end:{line:353,column:1}},"229":{start:{line:335,column:2},end:{line:352,column:3}},"230":{start:{line:336,column:4},end:{line:350,column:7}},"231":{start:{line:337,column:27},end:{line:337,column:52}},"232":{start:{line:338,column:24},end:{line:338,column:48}},"233":{start:{line:340,column:6},end:{line:349,column:7}},"234":{start:{line:341,column:8},end:{line:343,column:10}},"235":{start:{line:345,column:8},end:{line:345,column:41}},"236":{start:{line:346,column:8},end:{line:348,column:10}},"237":{start:{line:351,column:4},end:{line:351,column:27}},"238":{start:{line:356,column:29},end:{line:388,column:1}},"239":{start:{line:360,column:6},end:{line:360,column:11}},"240":{start:{line:361,column:15},end:{line:361,column:68}},"241":{start:{line:363,column:2},end:{line:385,column:3}},"242":{start:{line:364,column:4},end:{line:364,column:20}},"243":{start:{line:366,column:4},end:{line:374,column:7}},"244":{start:{line:367,column:6},end:{line:373,column:7}},"245":{start:{line:368,column:8},end:{line:370,column:10}},"246":{start:{line:372,column:8},end:{line:372,column:41}},"247":{start:{line:376,column:4},end:{line:384,column:7}},"248":{start:{line:377,column:6},end:{line:383,column:7}},"249":{start:{line:378,column:8},end:{line:380,column:10}},"250":{start:{line:382,column:8},end:{line:382,column:42}},"251":{start:{line:387,column:2},end:{line:387,column:16}},"252":{start:{line:397,column:25},end:{line:399,column:1}},"253":{start:{line:398,column:2},end:{line:398,column:33}},"254":{start:{line:401,column:23},end:{line:410,column:1}},"255":{start:{line:414,column:4},end:{line:414,column:27}},"256":{start:{line:418,column:4},end:{line:418,column:30}},"257":{start:{line:419,column:4},end:{line:419,column:38}},"258":{start:{line:423,column:4},end:{line:423,column:47}},"259":{start:{line:427,column:4},end:{line:427,column:169}},"260":{start:{line:427,column:54},end:{line:427,column:94}},"261":{start:{line:427,column:111},end:{line:427,column:167}},"262":{start:{line:431,column:4},end:{line:433,column:5}},"263":{start:{line:432,column:6},end:{line:432,column:124}},"264":{start:{line:435,column:4},end:{line:435,column:29}},"265":{start:{line:442,column:4},end:{line:444,column:5}},"266":{start:{line:443,column:6},end:{line:443,column:32}},"267":{start:{line:446,column:4},end:{line:446,column:70}},"268":{start:{line:447,column:4},end:{line:447,column:94}},"269":{start:{line:447,column:34},end:{line:447,column:59}},"270":{start:{line:447,column:67},end:{line:447,column:92}},"271":{start:{line:448,column:4},end:{line:448,column:36}},"272":{start:{line:454,column:4},end:{line:454,column:91}},"273":{start:{line:461,column:4},end:{line:469,column:7}},"274":{start:{line:462,column:14},end:{line:462,column:52}},"275":{start:{line:464,column:6},end:{line:466,column:7}},"276":{start:{line:465,column:8},end:{line:465,column:29}},"277":{start:{line:468,column:6},end:{line:468,column:23}},"278":{start:{line:478,column:16},end:{line:478,column:30}},"279":{start:{line:479,column:21},end:{line:479,column:38}},"280":{start:{line:480,column:19},end:{line:480,column:28}},"281":{start:{line:481,column:4},end:{line:491,column:7}},"282":{start:{line:482,column:6},end:{line:482,column:17}},"283":{start:{line:484,column:6},end:{line:486,column:7}},"284":{start:{line:485,column:8},end:{line:485,column:33}},"285":{start:{line:488,column:6},end:{line:488,column:79}},"286":{start:{line:490,column:6},end:{line:490,column:61}},"287":{start:{line:500,column:26},end:{line:500,column:31}},"288":{start:{line:501,column:27},end:{line:501,column:33}},"289":{start:{line:503,column:4},end:{line:503,column:44}},"290":{start:{line:504,column:26},end:{line:504,column:28}},"291":{start:{line:505,column:19},end:{line:505,column:36}},"292":{start:{line:506,column:19},end:{line:506,column:28}},"293":{start:{line:507,column:4},end:{line:599,column:7}},"294":{start:{line:508,column:6},end:{line:598,column:9}},"295":{start:{line:509,column:8},end:{line:509,column:97}},"296":{start:{line:511,column:8},end:{line:519,column:9}},"297":{start:{line:512,column:10},end:{line:512,column:101}},"298":{start:{line:514,column:10},end:{line:518,column:11}},"299":{start:{line:515,column:12},end:{line:517,column:14}},"300":{start:{line:521,column:8},end:{line:523,column:9}},"301":{start:{line:522,column:10},end:{line:522,column:35}},"302":{start:{line:525,column:8},end:{line:527,column:9}},"303":{start:{line:526,column:10},end:{line:526,column:42}},"304":{start:{line:529,column:8},end:{line:529,column:29}},"305":{start:{line:530,column:8},end:{line:579,column:11}},"306":{start:{line:533,column:10},end:{line:537,column:11}},"307":{start:{line:534,column:12},end:{line:536,column:14}},"308":{start:{line:539,column:10},end:{line:539,column:22}},"309":{start:{line:541,column:10},end:{line:551,column:13}},"310":{start:{line:542,column:12},end:{line:544,column:13}},"311":{start:{line:543,column:14},end:{line:543,column:125}},"312":{start:{line:546,column:34},end:{line:546,column:61}},"313":{start:{line:548,column:12},end:{line:550,column:13}},"314":{start:{line:549,column:14},end:{line:549,column:125}},"315":{start:{line:553,column:10},end:{line:557,column:11}},"316":{start:{line:554,column:12},end:{line:556,column:13}},"317":{start:{line:554,column:144},end:{line:554,column:192}},"318":{start:{line:555,column:14},end:{line:555,column:140}},"319":{start:{line:559,column:10},end:{line:559,column:46}},"320":{start:{line:560,column:10},end:{line:560,column:55}},"321":{start:{line:562,column:10},end:{line:570,column:11}},"322":{start:{line:563,column:12},end:{line:569,column:15}},"323":{start:{line:564,column:14},end:{line:566,column:15}},"324":{start:{line:565,column:16},end:{line:565,column:101}},"325":{start:{line:568,column:14},end:{line:568,column:24}},"326":{start:{line:572,column:10},end:{line:578,column:11}},"327":{start:{line:573,column:12},end:{line:573,column:115}},"328":{start:{line:574,column:17},end:{line:578,column:11}},"329":{start:{line:575,column:12},end:{line:575,column:110}},"330":{start:{line:577,column:12},end:{line:577,column:111}},"331":{start:{line:581,column:8},end:{line:583,column:9}},"332":{start:{line:582,column:10},end:{line:582,column:95}},"333":{start:{line:585,column:8},end:{line:587,column:9}},"334":{start:{line:586,column:10},end:{line:586,column:24}},"335":{start:{line:589,column:8},end:{line:591,column:11}},"336":{start:{line:590,column:10},end:{line:590,column:24}},"337":{start:{line:593,column:8},end:{line:595,column:9}},"338":{start:{line:594,column:10},end:{line:594,column:41}},"339":{start:{line:597,column:8},end:{line:597,column:62}},"340":{start:{line:606,column:14},end:{line:606,column:16}},"341":{start:{line:607,column:19},end:{line:607,column:21}},"342":{start:{line:608,column:4},end:{line:608,column:43}},"343":{start:{line:610,column:18},end:{line:636,column:5}},"344":{start:{line:611,column:6},end:{line:613,column:7}},"345":{start:{line:612,column:8},end:{line:612,column:15}},"346":{start:{line:615,column:6},end:{line:621,column:7}},"347":{start:{line:616,column:8},end:{line:619,column:11}},"348":{start:{line:620,column:8},end:{line:620,column:27}},"349":{start:{line:623,column:6},end:{line:629,column:7}},"350":{start:{line:624,column:8},end:{line:627,column:11}},"351":{start:{line:628,column:8},end:{line:628,column:27}},"352":{start:{line:631,column:6},end:{line:635,column:7}},"353":{start:{line:632,column:8},end:{line:634,column:9}},"354":{start:{line:633,column:10},end:{line:633,column:26}},"355":{start:{line:638,column:4},end:{line:640,column:5}},"356":{start:{line:639,column:6},end:{line:639,column:32}},"357":{start:{line:642,column:4},end:{line:644,column:5}},"358":{start:{line:643,column:6},end:{line:643,column:25}},"359":{start:{line:646,column:4},end:{line:646,column:15}},"360":{start:{line:652,column:18},end:{line:652,column:20}},"361":{start:{line:653,column:4},end:{line:653,column:43}},"362":{start:{line:654,column:4},end:{line:673,column:7}},"363":{start:{line:658,column:6},end:{line:660,column:7}},"364":{start:{line:659,column:8},end:{line:659,column:15}},"365":{start:{line:662,column:6},end:{line:666,column:7}},"366":{start:{line:663,column:8},end:{line:665,column:9}},"367":{start:{line:664,column:10},end:{line:664,column:84}},"368":{start:{line:668,column:6},end:{line:672,column:7}},"369":{start:{line:669,column:8},end:{line:671,column:9}},"370":{start:{line:670,column:10},end:{line:670,column:87}},"371":{start:{line:674,column:4},end:{line:674,column:32}},"372":{start:{line:680,column:16},end:{line:683,column:5}},"373":{start:{line:684,column:4},end:{line:684,column:127}},"374":{start:{line:691,column:14},end:{line:694,column:5}},"375":{start:{line:695,column:4},end:{line:702,column:7}},"376":{start:{line:697,column:6},end:{line:699,column:7}},"377":{start:{line:698,column:8},end:{line:698,column:15}},"378":{start:{line:701,column:6},end:{line:701,column:18}},"379":{start:{line:715,column:21},end:{line:715,column:38}},"380":{start:{line:716,column:21},end:{line:716,column:30}},"381":{start:{line:717,column:4},end:{line:752,column:7}},"382":{start:{line:718,column:6},end:{line:751,column:9}},"383":{start:{line:719,column:8},end:{line:725,column:9}},"384":{start:{line:720,column:10},end:{line:720,column:101}},"385":{start:{line:722,column:10},end:{line:724,column:11}},"386":{start:{line:723,column:12},end:{line:723,column:97}},"387":{start:{line:728,column:8},end:{line:730,column:9}},"388":{start:{line:729,column:10},end:{line:729,column:42}},"389":{start:{line:732,column:8},end:{line:732,column:29}},"390":{start:{line:733,column:8},end:{line:750,column:11}},"391":{start:{line:736,column:10},end:{line:740,column:11}},"392":{start:{line:737,column:12},end:{line:739,column:14}},"393":{start:{line:742,column:10},end:{line:742,column:22}},"394":{start:{line:743,column:37},end:{line:743,column:135}},"395":{start:{line:745,column:10},end:{line:747,column:11}},"396":{start:{line:746,column:12},end:{line:746,column:39}},"397":{start:{line:749,column:10},end:{line:749,column:22}},"398":{start:{line:761,column:27},end:{line:761,column:33}},"399":{start:{line:762,column:4},end:{line:762,column:40}},"400":{start:{line:763,column:4},end:{line:766,column:6}},"401":{start:{line:767,column:4},end:{line:770,column:6}},"402":{start:{line:771,column:19},end:{line:771,column:36}},"403":{start:{line:772,column:19},end:{line:772,column:28}},"404":{start:{line:773,column:28},end:{line:773,column:80}},"405":{start:{line:774,column:4},end:{line:793,column:7}},"406":{start:{line:774,column:56},end:{line:774,column:102}},"407":{start:{line:775,column:6},end:{line:792,column:9}},"408":{start:{line:775,column:124},end:{line:775,column:170}},"409":{start:{line:775,column:183},end:{line:775,column:229}},"410":{start:{line:776,column:8},end:{line:776,column:53}},"411":{start:{line:777,column:8},end:{line:777,column:48}},"412":{start:{line:779,column:8},end:{line:781,column:9}},"413":{start:{line:780,column:10},end:{line:780,column:20}},"414":{start:{line:783,column:8},end:{line:783,column:143}},"415":{start:{line:785,column:8},end:{line:787,column:9}},"416":{start:{line:786,column:10},end:{line:786,column:32}},"417":{start:{line:789,column:8},end:{line:791,column:11}},"418":{start:{line:790,column:10},end:{line:790,column:71}},"419":{start:{line:797,column:24},end:{line:797,column:52}},"420":{start:{line:799,column:4},end:{line:801,column:5}},"421":{start:{line:800,column:6},end:{line:800,column:31}},"422":{start:{line:803,column:19},end:{line:803,column:38}},"423":{start:{line:804,column:25},end:{line:804,column:56}},"424":{start:{line:805,column:20},end:{line:812,column:6}},"425":{start:{line:807,column:6},end:{line:809,column:7}},"426":{start:{line:808,column:8},end:{line:808,column:21}},"427":{start:{line:811,column:6},end:{line:811,column:63}},"428":{start:{line:814,column:4},end:{line:819,column:5}},"429":{start:{line:816,column:6},end:{line:816,column:34}},"430":{start:{line:817,column:21},end:{line:817,column:38}},"431":{start:{line:818,column:6},end:{line:818,column:80}},"432":{start:{line:821,column:4},end:{line:821,column:29}},"433":{start:{line:833,column:4},end:{line:833,column:30}},"434":{start:{line:835,column:4},end:{line:835,column:33}},"435":{start:{line:837,column:4},end:{line:837,column:47}},"436":{start:{line:847,column:8},end:{line:847,column:20}},"437":{start:{line:848,column:24},end:{line:848,column:26}},"438":{start:{line:850,column:4},end:{line:857,column:5}},"439":{start:{line:851,column:6},end:{line:853,column:8}},"440":{start:{line:854,column:6},end:{line:854,column:32}},"441":{start:{line:855,column:6},end:{line:855,column:30}},"442":{start:{line:856,column:6},end:{line:856,column:28}},"443":{start:{line:859,column:4},end:{line:861,column:77}},"444":{start:{line:861,column:36},end:{line:861,column:75}},"445":{start:{line:861,column:58},end:{line:861,column:74}},"446":{start:{line:867,column:4},end:{line:873,column:63}},"447":{start:{line:873,column:23},end:{line:873,column:61}},"448":{start:{line:873,column:45},end:{line:873,column:60}},"449":{start:{line:882,column:4},end:{line:891,column:5}},"450":{start:{line:883,column:18},end:{line:883,column:30}},"451":{start:{line:884,column:6},end:{line:890,column:9}},"452":{start:{line:885,column:8},end:{line:887,column:11}},"453":{start:{line:886,column:10},end:{line:886,column:39}},"454":{start:{line:889,column:8},end:{line:889,column:38}},"455":{start:{line:893,column:4},end:{line:902,column:5}},"456":{start:{line:894,column:19},end:{line:894,column:32}},"457":{start:{line:895,column:6},end:{line:901,column:9}},"458":{start:{line:896,column:8},end:{line:898,column:11}},"459":{start:{line:897,column:10},end:{line:897,column:40}},"460":{start:{line:900,column:8},end:{line:900,column:38}},"461":{start:{line:904,column:21},end:{line:967,column:6}},"462":{start:{line:905,column:16},end:{line:905,column:54}},"463":{start:{line:907,column:6},end:{line:909,column:7}},"464":{start:{line:908,column:8},end:{line:908,column:38}},"465":{start:{line:911,column:20},end:{line:911,column:24}},"466":{start:{line:913,column:6},end:{line:943,column:7}},"467":{start:{line:915,column:8},end:{line:937,column:11}},"468":{start:{line:917,column:27},end:{line:917,column:32}},"469":{start:{line:919,column:10},end:{line:931,column:11}},"470":{start:{line:920,column:12},end:{line:920,column:47}},"471":{start:{line:921,column:17},end:{line:931,column:11}},"472":{start:{line:922,column:12},end:{line:922,column:64}},"473":{start:{line:922,column:52},end:{line:922,column:62}},"474":{start:{line:923,column:17},end:{line:931,column:11}},"475":{start:{line:924,column:12},end:{line:924,column:30}},"476":{start:{line:925,column:12},end:{line:925,column:65}},"477":{start:{line:925,column:53},end:{line:925,column:63}},"478":{start:{line:926,column:17},end:{line:931,column:11}},"479":{start:{line:927,column:12},end:{line:927,column:30}},"480":{start:{line:928,column:12},end:{line:928,column:54}},"481":{start:{line:930,column:12},end:{line:930,column:19}},"482":{start:{line:933,column:10},end:{line:936,column:12}},"483":{start:{line:939,column:8},end:{line:942,column:11}},"484":{start:{line:946,column:6},end:{line:946,column:24}},"485":{start:{line:949,column:23},end:{line:963,column:8}},"486":{start:{line:950,column:8},end:{line:952,column:9}},"487":{start:{line:951,column:10},end:{line:951,column:35}},"488":{start:{line:954,column:8},end:{line:962,column:11}},"489":{start:{line:955,column:10},end:{line:959,column:11}},"490":{start:{line:956,column:12},end:{line:956,column:50}},"491":{start:{line:958,column:12},end:{line:958,column:47}},"492":{start:{line:961,column:10},end:{line:961,column:35}},"493":{start:{line:964,column:6},end:{line:966,column:9}},"494":{start:{line:965,column:8},end:{line:965,column:33}},"495":{start:{line:968,column:4},end:{line:970,column:7}},"496":{start:{line:969,column:6},end:{line:969,column:36}},"497":{start:{line:976,column:4},end:{line:980,column:5}},"498":{start:{line:977,column:6},end:{line:979,column:10}},"499":{start:{line:978,column:8},end:{line:978,column:72}},"500":{start:{line:982,column:4},end:{line:986,column:5}},"501":{start:{line:983,column:6},end:{line:985,column:10}},"502":{start:{line:984,column:8},end:{line:984,column:72}},"503":{start:{line:988,column:20},end:{line:988,column:39}},"504":{start:{line:990,column:4},end:{line:996,column:5}},"505":{start:{line:991,column:6},end:{line:995,column:24}},"506":{start:{line:992,column:8},end:{line:992,column:35}},"507":{start:{line:993,column:8},end:{line:993,column:43}},"508":{start:{line:994,column:8},end:{line:994,column:71}},"509":{start:{line:1000,column:26},end:{line:1000,column:86}},"510":{start:{line:1001,column:22},end:{line:1001,column:94}},"511":{start:{line:1002,column:22},end:{line:1002,column:92}},"512":{start:{line:1004,column:19},end:{line:1004,column:91}},"513":{start:{line:1004,column:77},end:{line:1004,column:90}},"514":{start:{line:1005,column:24},end:{line:1005,column:76}},"515":{start:{line:1005,column:54},end:{line:1005,column:72}},"516":{start:{line:1006,column:26},end:{line:1006,column:28}},"517":{start:{line:1008,column:4},end:{line:1012,column:5}},"518":{start:{line:1009,column:6},end:{line:1009,column:55}},"519":{start:{line:1011,column:6},end:{line:1011,column:56}},"520":{start:{line:1015,column:4},end:{line:1024,column:5}},"521":{start:{line:1016,column:6},end:{line:1018,column:8}},"522":{start:{line:1019,column:11},end:{line:1024,column:5}},"523":{start:{line:1020,column:6},end:{line:1023,column:8}},"524":{start:{line:1026,column:4},end:{line:1026,column:44}},"525":{start:{line:1027,column:4},end:{line:1027,column:17}},"526":{start:{line:1031,column:23},end:{line:1031,column:93}},"527":{start:{line:1032,column:17},end:{line:1032,column:70}},"528":{start:{line:1032,column:56},end:{line:1032,column:69}},"529":{start:{line:1034,column:4},end:{line:1034,column:34}},"530":{start:{line:1036,column:4},end:{line:1045,column:5}},"531":{start:{line:1037,column:6},end:{line:1039,column:8}},"532":{start:{line:1040,column:11},end:{line:1045,column:5}},"533":{start:{line:1041,column:6},end:{line:1044,column:8}},"534":{start:{line:1047,column:4},end:{line:1047,column:36}},"535":{start:{line:1048,column:4},end:{line:1048,column:17}},"536":{start:{line:1081,column:21},end:{line:1081,column:38}},"537":{start:{line:1082,column:21},end:{line:1082,column:30}},"538":{start:{line:1083,column:4},end:{line:1083,column:103}},"539":{start:{line:1085,column:4},end:{line:1085,column:39}},"540":{start:{line:1086,column:22},end:{line:1086,column:26}},"541":{start:{line:1087,column:4},end:{line:1197,column:7}},"542":{start:{line:1091,column:6},end:{line:1196,column:9}},"543":{start:{line:1094,column:8},end:{line:1099,column:9}},"544":{start:{line:1095,column:10},end:{line:1095,column:30}},"545":{start:{line:1096,column:10},end:{line:1098,column:12}},"546":{start:{line:1101,column:8},end:{line:1101,column:20}},"547":{start:{line:1106,column:8},end:{line:1109,column:9}},"548":{start:{line:1107,column:10},end:{line:1107,column:44}},"549":{start:{line:1108,column:10},end:{line:1108,column:34}},"550":{start:{line:1111,column:8},end:{line:1114,column:9}},"551":{start:{line:1112,column:10},end:{line:1112,column:44}},"552":{start:{line:1113,column:10},end:{line:1113,column:34}},"553":{start:{line:1116,column:29},end:{line:1125,column:9}},"554":{start:{line:1126,column:8},end:{line:1136,column:11}},"555":{start:{line:1127,column:10},end:{line:1129,column:11}},"556":{start:{line:1128,column:12},end:{line:1128,column:107}},"557":{start:{line:1131,column:32},end:{line:1131,column:59}},"558":{start:{line:1133,column:10},end:{line:1135,column:11}},"559":{start:{line:1134,column:12},end:{line:1134,column:113}},"560":{start:{line:1137,column:8},end:{line:1195,column:11}},"561":{start:{line:1137,column:120},end:{line:1137,column:175}},"562":{start:{line:1137,column:188},end:{line:1137,column:245}},"563":{start:{line:1140,column:10},end:{line:1147,column:11}},"564":{start:{line:1141,column:12},end:{line:1141,column:97}},"565":{start:{line:1146,column:12},end:{line:1146,column:120}},"566":{start:{line:1149,column:10},end:{line:1155,column:11}},"567":{start:{line:1150,column:12},end:{line:1154,column:13}},"568":{start:{line:1151,column:14},end:{line:1151,column:99}},"569":{start:{line:1153,column:14},end:{line:1153,column:24}},"570":{start:{line:1157,column:10},end:{line:1163,column:11}},"571":{start:{line:1158,column:12},end:{line:1162,column:13}},"572":{start:{line:1159,column:14},end:{line:1159,column:51}},"573":{start:{line:1161,column:14},end:{line:1161,column:50}},"574":{start:{line:1165,column:10},end:{line:1165,column:31}},"575":{start:{line:1167,column:10},end:{line:1194,column:11}},"576":{start:{line:1168,column:12},end:{line:1172,column:13}},"577":{start:{line:1169,column:14},end:{line:1169,column:23}},"578":{start:{line:1171,column:14},end:{line:1171,column:99}},"579":{start:{line:1173,column:17},end:{line:1194,column:11}},"580":{start:{line:1174,column:12},end:{line:1178,column:13}},"581":{start:{line:1175,column:14},end:{line:1175,column:24}},"582":{start:{line:1177,column:14},end:{line:1177,column:79}},"583":{start:{line:1179,column:17},end:{line:1194,column:11}},"584":{start:{line:1180,column:12},end:{line:1184,column:13}},"585":{start:{line:1181,column:14},end:{line:1181,column:24}},"586":{start:{line:1183,column:14},end:{line:1183,column:104}},"587":{start:{line:1185,column:17},end:{line:1194,column:11}},"588":{start:{line:1186,column:12},end:{line:1186,column:77}},"589":{start:{line:1188,column:12},end:{line:1193,column:15}},"590":{start:{line:1188,column:93},end:{line:1191,column:14}},"591":{start:{line:1189,column:14},end:{line:1189,column:52}},"592":{start:{line:1190,column:14},end:{line:1190,column:125}},"593":{start:{line:1192,column:14},end:{line:1192,column:90}},"594":{start:{line:1202,column:4},end:{line:1236,column:7}},"595":{start:{line:1205,column:6},end:{line:1205,column:27}},"596":{start:{line:1206,column:6},end:{line:1206,column:60}},"597":{start:{line:1208,column:6},end:{line:1214,column:7}},"598":{start:{line:1209,column:8},end:{line:1211,column:10}},"599":{start:{line:1213,column:8},end:{line:1213,column:20}},"600":{start:{line:1216,column:6},end:{line:1235,column:9}},"601":{start:{line:1216,column:57},end:{line:1218,column:25}},"602":{start:{line:1219,column:8},end:{line:1221,column:9}},"603":{start:{line:1220,column:10},end:{line:1220,column:126}},"604":{start:{line:1223,column:8},end:{line:1223,column:51}},"605":{start:{line:1225,column:8},end:{line:1234,column:9}},"606":{start:{line:1226,column:37},end:{line:1226,column:129}},"607":{start:{line:1226,column:84},end:{line:1226,column:128}},"608":{start:{line:1227,column:10},end:{line:1231,column:13}},"609":{start:{line:1227,column:60},end:{line:1227,column:116}},"610":{start:{line:1228,column:12},end:{line:1228,column:48}},"611":{start:{line:1230,column:12},end:{line:1230,column:49}},"612":{start:{line:1233,column:10},end:{line:1233,column:35}},"613":{start:{line:1243,column:4},end:{line:1243,column:83}},"614":{start:{line:1243,column:42},end:{line:1243,column:81}},"615":{start:{line:1243,column:53},end:{line:1243,column:70}},"616":{start:{line:1248,column:4},end:{line:1250,column:5}},"617":{start:{line:1249,column:6},end:{line:1249,column:19}},"618":{start:{line:1252,column:20},end:{line:1252,column:70}},"619":{start:{line:1252,column:39},end:{line:1252,column:69}},"620":{start:{line:1253,column:17},end:{line:1253,column:22}},"621":{start:{line:1255,column:4},end:{line:1274,column:21}},"622":{start:{line:1256,column:6},end:{line:1256,column:21}},"623":{start:{line:1258,column:6},end:{line:1273,column:7}},"624":{start:{line:1258,column:19},end:{line:1258,column:20}},"625":{start:{line:1259,column:8},end:{line:1272,column:9}},"626":{start:{line:1259,column:21},end:{line:1259,column:26}},"627":{start:{line:1260,column:36},end:{line:1260,column:91}},"628":{start:{line:1261,column:31},end:{line:1261,column:122}},"629":{start:{line:1261,column:71},end:{line:1261,column:118}},"630":{start:{line:1262,column:33},end:{line:1262,column:56}},"631":{start:{line:1264,column:10},end:{line:1271,column:11}},"632":{start:{line:1267,column:12},end:{line:1267,column:40}},"633":{start:{line:1268,column:12},end:{line:1268,column:38}},"634":{start:{line:1269,column:12},end:{line:1269,column:26}},"635":{start:{line:1270,column:12},end:{line:1270,column:18}},"636":{start:{line:1276,column:4},end:{line:1279,column:5}},"637":{start:{line:1277,column:6},end:{line:1277,column:68}},"638":{start:{line:1278,column:6},end:{line:1278,column:23}},"639":{start:{line:1281,column:4},end:{line:1281,column:17}},"640":{start:{line:1286,column:4},end:{line:1288,column:5}},"641":{start:{line:1287,column:6},end:{line:1287,column:19}},"642":{start:{line:1290,column:20},end:{line:1290,column:71}},"643":{start:{line:1290,column:40},end:{line:1290,column:70}},"644":{start:{line:1291,column:17},end:{line:1291,column:22}},"645":{start:{line:1293,column:4},end:{line:1312,column:21}},"646":{start:{line:1294,column:6},end:{line:1294,column:21}},"647":{start:{line:1296,column:6},end:{line:1311,column:7}},"648":{start:{line:1296,column:19},end:{line:1296,column:20}},"649":{start:{line:1297,column:8},end:{line:1310,column:9}},"650":{start:{line:1297,column:21},end:{line:1297,column:26}},"651":{start:{line:1298,column:36},end:{line:1298,column:91}},"652":{start:{line:1299,column:31},end:{line:1299,column:122}},"653":{start:{line:1299,column:71},end:{line:1299,column:118}},"654":{start:{line:1300,column:33},end:{line:1300,column:56}},"655":{start:{line:1302,column:10},end:{line:1309,column:11}},"656":{start:{line:1305,column:12},end:{line:1305,column:42}},"657":{start:{line:1306,column:12},end:{line:1306,column:39}},"658":{start:{line:1307,column:12},end:{line:1307,column:26}},"659":{start:{line:1308,column:12},end:{line:1308,column:18}},"660":{start:{line:1314,column:4},end:{line:1317,column:5}},"661":{start:{line:1315,column:6},end:{line:1315,column:69}},"662":{start:{line:1316,column:6},end:{line:1316,column:24}},"663":{start:{line:1319,column:4},end:{line:1319,column:17}},"664":{start:{line:1330,column:4},end:{line:1332,column:5}},"665":{start:{line:1331,column:6},end:{line:1331,column:19}},"666":{start:{line:1334,column:18},end:{line:1334,column:60}},"667":{start:{line:1335,column:20},end:{line:1337,column:6}},"668":{start:{line:1336,column:6},end:{line:1336,column:53}},"669":{start:{line:1338,column:21},end:{line:1338,column:108}},"670":{start:{line:1339,column:23},end:{line:1339,column:25}},"671":{start:{line:1341,column:4},end:{line:1343,column:5}},"672":{start:{line:1342,column:6},end:{line:1342,column:57}},"673":{start:{line:1345,column:4},end:{line:1351,column:5}},"674":{start:{line:1346,column:6},end:{line:1350,column:7}},"675":{start:{line:1347,column:8},end:{line:1349,column:9}},"676":{start:{line:1348,column:10},end:{line:1348,column:33}},"677":{start:{line:1354,column:4},end:{line:1411,column:5}},"678":{start:{line:1358,column:6},end:{line:1360,column:7}},"679":{start:{line:1359,column:8},end:{line:1359,column:15}},"680":{start:{line:1362,column:21},end:{line:1362,column:31}},"681":{start:{line:1363,column:26},end:{line:1367,column:7}},"682":{start:{line:1368,column:22},end:{line:1405,column:8}},"683":{start:{line:1369,column:32},end:{line:1369,column:70}},"684":{start:{line:1370,column:26},end:{line:1370,column:175}},"685":{start:{line:1373,column:8},end:{line:1394,column:9}},"686":{start:{line:1375,column:10},end:{line:1377,column:12}},"687":{start:{line:1378,column:15},end:{line:1394,column:9}},"688":{start:{line:1380,column:10},end:{line:1384,column:12}},"689":{start:{line:1385,column:15},end:{line:1394,column:9}},"690":{start:{line:1387,column:10},end:{line:1389,column:12}},"691":{start:{line:1393,column:10},end:{line:1393,column:114}},"692":{start:{line:1397,column:8},end:{line:1401,column:9}},"693":{start:{line:1398,column:10},end:{line:1400,column:13}},"694":{start:{line:1404,column:8},end:{line:1404,column:53}},"695":{start:{line:1406,column:6},end:{line:1408,column:9}},"696":{start:{line:1410,column:6},end:{line:1410,column:19}},"697":{start:{line:1415,column:18},end:{line:1415,column:60}},"698":{start:{line:1416,column:4},end:{line:1416,column:28}},"699":{start:{line:1416,column:16},end:{line:1416,column:28}},"700":{start:{line:1417,column:28},end:{line:1417,column:49}},"701":{start:{line:1418,column:4},end:{line:1418,column:38}},"702":{start:{line:1418,column:26},end:{line:1418,column:38}},"703":{start:{line:1419,column:4},end:{line:1419,column:59}},"704":{start:{line:1419,column:47},end:{line:1419,column:59}},"705":{start:{line:1424,column:25},end:{line:1424,column:42}},"706":{start:{line:1428,column:27},end:{line:1428,column:29}},"707":{start:{line:1429,column:26},end:{line:1429,column:35}},"708":{start:{line:1431,column:18},end:{line:1434,column:10}},"709":{start:{line:1432,column:6},end:{line:1432,column:34}},"710":{start:{line:1433,column:6},end:{line:1433,column:17}},"711":{start:{line:1436,column:30},end:{line:1436,column:32}},"712":{start:{line:1438,column:4},end:{line:1473,column:5}},"713":{start:{line:1440,column:6},end:{line:1453,column:7}},"714":{start:{line:1441,column:8},end:{line:1450,column:9}},"715":{start:{line:1442,column:28},end:{line:1442,column:45}},"716":{start:{line:1444,column:10},end:{line:1449,column:11}},"717":{start:{line:1446,column:12},end:{line:1446,column:67}},"718":{start:{line:1448,column:12},end:{line:1448,column:43}},"719":{start:{line:1452,column:8},end:{line:1452,column:17}},"720":{start:{line:1456,column:6},end:{line:1459,column:7}},"721":{start:{line:1457,column:8},end:{line:1457,column:53}},"722":{start:{line:1458,column:8},end:{line:1458,column:17}},"723":{start:{line:1461,column:6},end:{line:1472,column:7}},"724":{start:{line:1462,column:8},end:{line:1466,column:9}},"725":{start:{line:1464,column:10},end:{line:1464,column:55}},"726":{start:{line:1465,column:10},end:{line:1465,column:19}},"727":{start:{line:1468,column:8},end:{line:1471,column:9}},"728":{start:{line:1470,column:10},end:{line:1470,column:45}},"729":{start:{line:1476,column:4},end:{line:1482,column:5}},"730":{start:{line:1477,column:21},end:{line:1477,column:33}},"731":{start:{line:1479,column:6},end:{line:1481,column:7}},"732":{start:{line:1480,column:8},end:{line:1480,column:62}},"733":{start:{line:1485,column:4},end:{line:1487,column:5}},"734":{start:{line:1486,column:6},end:{line:1486,column:59}},"735":{start:{line:1489,column:24},end:{line:1495,column:10}},"736":{start:{line:1490,column:6},end:{line:1492,column:7}},"737":{start:{line:1491,column:8},end:{line:1491,column:26}},"738":{start:{line:1494,column:6},end:{line:1494,column:17}},"739":{start:{line:1497,column:4},end:{line:1501,column:7}},"740":{start:{line:1498,column:6},end:{line:1500,column:7}},"741":{start:{line:1499,column:8},end:{line:1499,column:70}},"742":{start:{line:1499,column:50},end:{line:1499,column:68}},"743":{start:{line:1502,column:4},end:{line:1502,column:25}},"744":{start:{line:1506,column:4},end:{line:1508,column:7}},"745":{start:{line:1507,column:6},end:{line:1507,column:56}},"746":{start:{line:1512,column:4},end:{line:1514,column:5}},"747":{start:{line:1513,column:6},end:{line:1513,column:69}},"748":{start:{line:1516,column:4},end:{line:1518,column:7}},"749":{start:{line:1517,column:6},end:{line:1517,column:40}},"750":{start:{line:1522,column:4},end:{line:1524,column:5}},"751":{start:{line:1523,column:6},end:{line:1523,column:68}},"752":{start:{line:1526,column:4},end:{line:1528,column:7}},"753":{start:{line:1527,column:6},end:{line:1527,column:40}},"754":{start:{line:1534,column:4},end:{line:1536,column:7}},"755":{start:{line:1537,column:31},end:{line:1539,column:5}},"756":{start:{line:1540,column:31},end:{line:1542,column:5}},"757":{start:{line:1543,column:38},end:{line:1545,column:5}},"758":{start:{line:1546,column:4},end:{line:1546,column:79}},"759":{start:{line:1546,column:43},end:{line:1546,column:77}},"760":{start:{line:1547,column:4},end:{line:1547,column:79}},"761":{start:{line:1547,column:43},end:{line:1547,column:77}},"762":{start:{line:1549,column:4},end:{line:1551,column:5}},"763":{start:{line:1550,column:6},end:{line:1550,column:88}},"764":{start:{line:1550,column:45},end:{line:1550,column:86}},"765":{start:{line:1553,column:4},end:{line:1557,column:7}},"766":{start:{line:1554,column:6},end:{line:1554,column:81}},"767":{start:{line:1556,column:6},end:{line:1556,column:18}},"768":{start:{line:1558,column:4},end:{line:1562,column:7}},"769":{start:{line:1559,column:6},end:{line:1559,column:88}},"770":{start:{line:1561,column:6},end:{line:1561,column:18}},"771":{start:{line:1563,column:4},end:{line:1567,column:7}},"772":{start:{line:1564,column:6},end:{line:1564,column:88}},"773":{start:{line:1566,column:6},end:{line:1566,column:18}},"774":{start:{line:1568,column:4},end:{line:1572,column:7}},"775":{start:{line:1569,column:6},end:{line:1569,column:92}},"776":{start:{line:1571,column:6},end:{line:1571,column:18}},"777":{start:{line:1573,column:4},end:{line:1577,column:7}},"778":{start:{line:1574,column:6},end:{line:1574,column:85}},"779":{start:{line:1576,column:6},end:{line:1576,column:18}},"780":{start:{line:1578,column:4},end:{line:1582,column:7}},"781":{start:{line:1579,column:6},end:{line:1579,column:81}},"782":{start:{line:1581,column:6},end:{line:1581,column:18}},"783":{start:{line:1584,column:4},end:{line:1597,column:5}},"784":{start:{line:1585,column:6},end:{line:1589,column:9}},"785":{start:{line:1586,column:8},end:{line:1586,column:96}},"786":{start:{line:1588,column:8},end:{line:1588,column:20}},"787":{start:{line:1590,column:6},end:{line:1596,column:9}},"788":{start:{line:1593,column:8},end:{line:1593,column:96}},"789":{start:{line:1595,column:8},end:{line:1595,column:20}},"790":{start:{line:1599,column:4},end:{line:1599,column:49}},"791":{start:{line:1604,column:0},end:{line:1604,column:36}},"792":{start:{line:1606,column:0},end:{line:1606,column:46}}},fnMap:{"0":{name:"_getRequireWildcardCache",decl:{start:{line:21,column:9},end:{line:21,column:33}},loc:{start:{line:21,column:47},end:{line:21,column:311}},line:21},"1":{name:"(anonymous_1)",decl:{start:{line:21,column:209},end:{line:21,column:210}},loc:{start:{line:21,column:232},end:{line:21,column:294}},line:21},"2":{name:"_interopRequireWildcard",decl:{start:{line:23,column:9},end:{line:23,column:32}},loc:{start:{line:23,column:51},end:{line:23,column:804}},line:23},"3":{name:"_interopRequireDefault",decl:{start:{line:25,column:9},end:{line:25,column:31}},loc:{start:{line:25,column:37},end:{line:25,column:95}},line:25},"4":{name:"ownKeys",decl:{start:{line:27,column:9},end:{line:27,column:16}},loc:{start:{line:27,column:41},end:{line:27,column:345}},line:27},"5":{name:"(anonymous_5)",decl:{start:{line:27,column:210},end:{line:27,column:211}},loc:{start:{line:27,column:225},end:{line:27,column:292}},line:27},"6":{name:"_objectSpread",decl:{start:{line:29,column:9},end:{line:29,column:22}},loc:{start:{line:29,column:31},end:{line:29,column:534}},line:29},"7":{name:"(anonymous_7)",decl:{start:{line:29,column:184},end:{line:29,column:185}},loc:{start:{line:29,column:199},end:{line:29,column:245}},line:29},"8":{name:"(anonymous_8)",decl:{start:{line:29,column:411},end:{line:29,column:412}},loc:{start:{line:29,column:426},end:{line:29,column:511}},line:29},"9":{name:"_defineProperty",decl:{start:{line:31,column:9},end:{line:31,column:24}},loc:{start:{line:31,column:42},end:{line:31,column:209}},line:31},"10":{name:"_objectWithoutProperties",decl:{start:{line:33,column:9},end:{line:33,column:33}},loc:{start:{line:33,column:52},end:{line:33,column:492}},line:33},"11":{name:"_objectWithoutPropertiesLoose",decl:{start:{line:35,column:9},end:{line:35,column:38}},loc:{start:{line:35,column:57},end:{line:35,column:307}},line:35},"12":{name:"addWriteACL",decl:{start:{line:37,column:9},end:{line:37,column:20}},loc:{start:{line:37,column:33},end:{line:45,column:1}},line:37},"13":{name:"addReadACL",decl:{start:{line:47,column:9},end:{line:47,column:19}},loc:{start:{line:47,column:32},end:{line:55,column:1}},line:47},"14":{name:"(anonymous_14)",decl:{start:{line:58,column:27},end:{line:58,column:28}},loc:{start:{line:58,column:35},end:{line:82,column:1}},line:58},"15":{name:"(anonymous_15)",decl:{start:{line:86,column:26},end:{line:86,column:27}},loc:{start:{line:86,column:33},end:{line:88,column:1}},line:86},"16":{name:"(anonymous_16)",decl:{start:{line:90,column:22},end:{line:90,column:23}},loc:{start:{line:90,column:31},end:{line:132,column:1}},line:90},"17":{name:"(anonymous_17)",decl:{start:{line:119,column:29},end:{line:119,column:30}},loc:{start:{line:119,column:36},end:{line:131,column:3}},line:119},"18":{name:"(anonymous_18)",decl:{start:{line:135,column:28},end:{line:135,column:29}},loc:{start:{line:135,column:113},end:{line:233,column:1}},line:135},"19":{name:"(anonymous_19)",decl:{start:{line:146,column:83},end:{line:146,column:84}},loc:{start:{line:146,column:90},end:{line:146,column:118}},line:146},"20":{name:"(anonymous_20)",decl:{start:{line:146,column:124},end:{line:146,column:125}},loc:{start:{line:146,column:131},end:{line:151,column:7}},line:146},"21":{name:"(anonymous_21)",decl:{start:{line:155,column:41},end:{line:155,column:42}},loc:{start:{line:155,column:56},end:{line:171,column:7}},line:155},"22":{name:"(anonymous_22)",decl:{start:{line:161,column:62},end:{line:161,column:63}},loc:{start:{line:161,column:70},end:{line:161,column:111}},line:161},"23":{name:"(anonymous_23)",decl:{start:{line:180,column:33},end:{line:180,column:34}},loc:{start:{line:180,column:43},end:{line:190,column:7}},line:180},"24":{name:"(anonymous_24)",decl:{start:{line:187,column:53},end:{line:187,column:54}},loc:{start:{line:187,column:58},end:{line:187,column:76}},line:187},"25":{name:"(anonymous_25)",decl:{start:{line:199,column:47},end:{line:199,column:48}},loc:{start:{line:199,column:52},end:{line:199,column:68}},line:199},"26":{name:"(anonymous_26)",decl:{start:{line:202,column:112},end:{line:202,column:113}},loc:{start:{line:202,column:117},end:{line:202,column:133}},line:202},"27":{name:"(anonymous_27)",decl:{start:{line:245,column:27},end:{line:245,column:28}},loc:{start:{line:245,column:34},end:{line:247,column:1}},line:245},"28":{name:"expandResultOnKeyPath",decl:{start:{line:249,column:9},end:{line:249,column:30}},loc:{start:{line:249,column:51},end:{line:262,column:1}},line:249},"29":{name:"sanitizeDatabaseResult",decl:{start:{line:264,column:9},end:{line:264,column:31}},loc:{start:{line:264,column:56},end:{line:281,column:1}},line:264},"30":{name:"(anonymous_30)",decl:{start:{line:271,column:38},end:{line:271,column:39}},loc:{start:{line:271,column:45},end:{line:279,column:3}},line:271},"31":{name:"joinTableName",decl:{start:{line:283,column:9},end:{line:283,column:22}},loc:{start:{line:283,column:39},end:{line:285,column:1}},line:283},"32":{name:"(anonymous_32)",decl:{start:{line:287,column:40},end:{line:287,column:41}},loc:{start:{line:287,column:50},end:{line:332,column:1}},line:287},"33":{name:"(anonymous_33)",decl:{start:{line:334,column:26},end:{line:334,column:27}},loc:{start:{line:334,column:57},end:{line:353,column:1}},line:334},"34":{name:"(anonymous_34)",decl:{start:{line:336,column:41},end:{line:336,column:42}},loc:{start:{line:336,column:53},end:{line:350,column:5}},line:336},"35":{name:"(anonymous_35)",decl:{start:{line:356,column:29},end:{line:356,column:30}},loc:{start:{line:356,column:38},end:{line:388,column:1}},line:356},"36":{name:"(anonymous_36)",decl:{start:{line:366,column:27},end:{line:366,column:28}},loc:{start:{line:366,column:36},end:{line:374,column:5}},line:366},"37":{name:"(anonymous_37)",decl:{start:{line:376,column:27},end:{line:376,column:28}},loc:{start:{line:376,column:36},end:{line:384,column:5}},line:376},"38":{name:"(anonymous_38)",decl:{start:{line:397,column:25},end:{line:397,column:26}},loc:{start:{line:397,column:38},end:{line:399,column:1}},line:397},"39":{name:"(anonymous_39)",decl:{start:{line:413,column:2},end:{line:413,column:3}},loc:{start:{line:413,column:23},end:{line:420,column:3}},line:413},"40":{name:"(anonymous_40)",decl:{start:{line:422,column:2},end:{line:422,column:3}},loc:{start:{line:422,column:30},end:{line:424,column:3}},line:422},"41":{name:"(anonymous_41)",decl:{start:{line:426,column:2},end:{line:426,column:3}},loc:{start:{line:426,column:29},end:{line:428,column:3}},line:426},"42":{name:"(anonymous_42)",decl:{start:{line:427,column:34},end:{line:427,column:35}},loc:{start:{line:427,column:54},end:{line:427,column:94}},line:427},"43":{name:"(anonymous_43)",decl:{start:{line:427,column:101},end:{line:427,column:102}},loc:{start:{line:427,column:111},end:{line:427,column:167}},line:427},"44":{name:"(anonymous_44)",decl:{start:{line:430,column:2},end:{line:430,column:3}},loc:{start:{line:430,column:31},end:{line:436,column:3}},line:430},"45":{name:"(anonymous_45)",decl:{start:{line:439,column:2},end:{line:439,column:3}},loc:{start:{line:441,column:5},end:{line:449,column:3}},line:441},"46":{name:"(anonymous_46)",decl:{start:{line:447,column:28},end:{line:447,column:29}},loc:{start:{line:447,column:34},end:{line:447,column:59}},line:447},"47":{name:"(anonymous_47)",decl:{start:{line:447,column:61},end:{line:447,column:62}},loc:{start:{line:447,column:67},end:{line:447,column:92}},line:447},"48":{name:"(anonymous_48)",decl:{start:{line:451,column:2},end:{line:451,column:3}},loc:{start:{line:453,column:5},end:{line:455,column:3}},line:453},"49":{name:"(anonymous_49)",decl:{start:{line:460,column:2},end:{line:460,column:3}},loc:{start:{line:460,column:42},end:{line:470,column:3}},line:460},"50":{name:"(anonymous_50)",decl:{start:{line:461,column:34},end:{line:461,column:35}},loc:{start:{line:461,column:44},end:{line:469,column:5}},line:461},"51":{name:"(anonymous_51)",decl:{start:{line:476,column:2},end:{line:476,column:3}},loc:{start:{line:476,column:55},end:{line:492,column:3}},line:476},"52":{name:"(anonymous_52)",decl:{start:{line:481,column:34},end:{line:481,column:35}},loc:{start:{line:481,column:39},end:{line:489,column:5}},line:481},"53":{name:"(anonymous_53)",decl:{start:{line:489,column:12},end:{line:489,column:13}},loc:{start:{line:489,column:18},end:{line:491,column:5}},line:489},"54":{name:"(anonymous_54)",decl:{start:{line:494,column:2},end:{line:494,column:3}},loc:{start:{line:499,column:81},end:{line:600,column:3}},line:499},"55":{name:"(anonymous_55)",decl:{start:{line:507,column:63},end:{line:507,column:64}},loc:{start:{line:507,column:83},end:{line:599,column:5}},line:507},"56":{name:"(anonymous_56)",decl:{start:{line:508,column:118},end:{line:508,column:119}},loc:{start:{line:508,column:124},end:{line:580,column:7}},line:508},"57":{name:"(anonymous_57)",decl:{start:{line:530,column:68},end:{line:530,column:69}},loc:{start:{line:530,column:77},end:{line:540,column:9}},line:530},"58":{name:"(anonymous_58)",decl:{start:{line:540,column:16},end:{line:540,column:17}},loc:{start:{line:540,column:26},end:{line:579,column:9}},line:540},"59":{name:"(anonymous_59)",decl:{start:{line:541,column:38},end:{line:541,column:39}},loc:{start:{line:541,column:51},end:{line:551,column:11}},line:541},"60":{name:"(anonymous_60)",decl:{start:{line:554,column:132},end:{line:554,column:133}},loc:{start:{line:554,column:144},end:{line:554,column:192}},line:554},"61":{name:"(anonymous_61)",decl:{start:{line:563,column:72},end:{line:563,column:73}},loc:{start:{line:563,column:82},end:{line:569,column:13}},line:563},"62":{name:"(anonymous_62)",decl:{start:{line:580,column:14},end:{line:580,column:15}},loc:{start:{line:580,column:24},end:{line:592,column:7}},line:580},"63":{name:"(anonymous_63)",decl:{start:{line:589,column:107},end:{line:589,column:108}},loc:{start:{line:589,column:113},end:{line:591,column:9}},line:589},"64":{name:"(anonymous_64)",decl:{start:{line:592,column:14},end:{line:592,column:15}},loc:{start:{line:592,column:24},end:{line:598,column:7}},line:592},"65":{name:"(anonymous_65)",decl:{start:{line:605,column:2},end:{line:605,column:3}},loc:{start:{line:605,column:54},end:{line:647,column:3}},line:605},"66":{name:"(anonymous_66)",decl:{start:{line:610,column:18},end:{line:610,column:19}},loc:{start:{line:610,column:31},end:{line:636,column:5}},line:610},"67":{name:"(anonymous_67)",decl:{start:{line:651,column:2},end:{line:651,column:3}},loc:{start:{line:651,column:58},end:{line:675,column:3}},line:651},"68":{name:"(anonymous_68)",decl:{start:{line:654,column:16},end:{line:654,column:17}},loc:{start:{line:657,column:10},end:{line:673,column:5}},line:657},"69":{name:"(anonymous_69)",decl:{start:{line:679,column:2},end:{line:679,column:3}},loc:{start:{line:679,column:48},end:{line:685,column:3}},line:679},"70":{name:"(anonymous_70)",decl:{start:{line:690,column:2},end:{line:690,column:3}},loc:{start:{line:690,column:51},end:{line:703,column:3}},line:690},"71":{name:"(anonymous_71)",decl:{start:{line:695,column:133},end:{line:695,column:134}},loc:{start:{line:695,column:142},end:{line:702,column:5}},line:695},"72":{name:"(anonymous_72)",decl:{start:{line:712,column:2},end:{line:712,column:3}},loc:{start:{line:714,column:33},end:{line:753,column:3}},line:714},"73":{name:"(anonymous_73)",decl:{start:{line:717,column:63},end:{line:717,column:64}},loc:{start:{line:717,column:83},end:{line:752,column:5}},line:717},"74":{name:"(anonymous_74)",decl:{start:{line:718,column:118},end:{line:718,column:119}},loc:{start:{line:718,column:124},end:{line:751,column:7}},line:718},"75":{name:"(anonymous_75)",decl:{start:{line:733,column:62},end:{line:733,column:63}},loc:{start:{line:733,column:71},end:{line:743,column:9}},line:733},"76":{name:"(anonymous_76)",decl:{start:{line:743,column:16},end:{line:743,column:17}},loc:{start:{line:743,column:37},end:{line:743,column:135}},line:743},"77":{name:"(anonymous_77)",decl:{start:{line:743,column:143},end:{line:743,column:144}},loc:{start:{line:743,column:152},end:{line:750,column:9}},line:743},"78":{name:"(anonymous_78)",decl:{start:{line:757,column:2},end:{line:757,column:3}},loc:{start:{line:759,column:55},end:{line:794,column:3}},line:759},"79":{name:"(anonymous_79)",decl:{start:{line:774,column:50},end:{line:774,column:51}},loc:{start:{line:774,column:56},end:{line:774,column:102}},line:774},"80":{name:"(anonymous_80)",decl:{start:{line:774,column:109},end:{line:774,column:110}},loc:{start:{line:774,column:129},end:{line:793,column:5}},line:774},"81":{name:"(anonymous_81)",decl:{start:{line:775,column:118},end:{line:775,column:119}},loc:{start:{line:775,column:124},end:{line:775,column:170}},line:775},"82":{name:"(anonymous_82)",decl:{start:{line:775,column:177},end:{line:775,column:178}},loc:{start:{line:775,column:183},end:{line:775,column:229}},line:775},"83":{name:"(anonymous_83)",decl:{start:{line:775,column:236},end:{line:775,column:237}},loc:{start:{line:775,column:246},end:{line:784,column:7}},line:775},"84":{name:"(anonymous_84)",decl:{start:{line:784,column:14},end:{line:784,column:15}},loc:{start:{line:784,column:24},end:{line:792,column:7}},line:784},"85":{name:"(anonymous_85)",decl:{start:{line:789,column:100},end:{line:789,column:101}},loc:{start:{line:789,column:106},end:{line:791,column:9}},line:789},"86":{name:"(anonymous_86)",decl:{start:{line:796,column:2},end:{line:796,column:3}},loc:{start:{line:796,column:63},end:{line:822,column:3}},line:796},"87":{name:"(anonymous_87)",decl:{start:{line:805,column:34},end:{line:805,column:35}},loc:{start:{line:805,column:43},end:{line:812,column:5}},line:805},"88":{name:"(anonymous_88)",decl:{start:{line:832,column:2},end:{line:832,column:3}},loc:{start:{line:832,column:33},end:{line:838,column:3}},line:832},"89":{name:"(anonymous_89)",decl:{start:{line:842,column:2},end:{line:842,column:3}},loc:{start:{line:842,column:53},end:{line:862,column:3}},line:842},"90":{name:"(anonymous_90)",decl:{start:{line:861,column:25},end:{line:861,column:26}},loc:{start:{line:861,column:36},end:{line:861,column:75}},line:861},"91":{name:"(anonymous_91)",decl:{start:{line:861,column:48},end:{line:861,column:49}},loc:{start:{line:861,column:58},end:{line:861,column:74}},line:861},"92":{name:"(anonymous_92)",decl:{start:{line:866,column:2},end:{line:866,column:3}},loc:{start:{line:866,column:40},end:{line:874,column:3}},line:866},"93":{name:"(anonymous_93)",decl:{start:{line:873,column:12},end:{line:873,column:13}},loc:{start:{line:873,column:23},end:{line:873,column:61}},line:873},"94":{name:"(anonymous_94)",decl:{start:{line:873,column:35},end:{line:873,column:36}},loc:{start:{line:873,column:45},end:{line:873,column:60}},line:873},"95":{name:"(anonymous_95)",decl:{start:{line:879,column:2},end:{line:879,column:3}},loc:{start:{line:879,column:45},end:{line:971,column:3}},line:879},"96":{name:"(anonymous_96)",decl:{start:{line:884,column:33},end:{line:884,column:34}},loc:{start:{line:884,column:52},end:{line:888,column:7}},line:884},"97":{name:"(anonymous_97)",decl:{start:{line:885,column:69},end:{line:885,column:70}},loc:{start:{line:885,column:79},end:{line:887,column:9}},line:885},"98":{name:"(anonymous_98)",decl:{start:{line:888,column:15},end:{line:888,column:16}},loc:{start:{line:888,column:21},end:{line:890,column:7}},line:888},"99":{name:"(anonymous_99)",decl:{start:{line:895,column:34},end:{line:895,column:35}},loc:{start:{line:895,column:53},end:{line:899,column:7}},line:895},"100":{name:"(anonymous_100)",decl:{start:{line:896,column:69},end:{line:896,column:70}},loc:{start:{line:896,column:79},end:{line:898,column:9}},line:896},"101":{name:"(anonymous_101)",decl:{start:{line:899,column:15},end:{line:899,column:16}},loc:{start:{line:899,column:21},end:{line:901,column:7}},line:899},"102":{name:"(anonymous_102)",decl:{start:{line:904,column:44},end:{line:904,column:45}},loc:{start:{line:904,column:51},end:{line:967,column:5}},line:904},"103":{name:"(anonymous_103)",decl:{start:{line:915,column:46},end:{line:915,column:47}},loc:{start:{line:915,column:63},end:{line:937,column:9}},line:915},"104":{name:"(anonymous_104)",decl:{start:{line:922,column:47},end:{line:922,column:48}},loc:{start:{line:922,column:52},end:{line:922,column:62}},line:922},"105":{name:"(anonymous_105)",decl:{start:{line:925,column:48},end:{line:925,column:49}},loc:{start:{line:925,column:53},end:{line:925,column:63}},line:925},"106":{name:"(anonymous_106)",decl:{start:{line:949,column:35},end:{line:949,column:36}},loc:{start:{line:949,column:40},end:{line:963,column:7}},line:949},"107":{name:"(anonymous_107)",decl:{start:{line:954,column:65},end:{line:954,column:66}},loc:{start:{line:954,column:72},end:{line:962,column:9}},line:954},"108":{name:"(anonymous_108)",decl:{start:{line:964,column:40},end:{line:964,column:41}},loc:{start:{line:964,column:46},end:{line:966,column:7}},line:964},"109":{name:"(anonymous_109)",decl:{start:{line:968,column:38},end:{line:968,column:39}},loc:{start:{line:968,column:44},end:{line:970,column:5}},line:968},"110":{name:"(anonymous_110)",decl:{start:{line:975,column:2},end:{line:975,column:3}},loc:{start:{line:975,column:53},end:{line:997,column:3}},line:975},"111":{name:"(anonymous_111)",decl:{start:{line:977,column:42},end:{line:977,column:43}},loc:{start:{line:977,column:52},end:{line:979,column:7}},line:977},"112":{name:"(anonymous_112)",decl:{start:{line:983,column:43},end:{line:983,column:44}},loc:{start:{line:983,column:53},end:{line:985,column:7}},line:983},"113":{name:"(anonymous_113)",decl:{start:{line:991,column:118},end:{line:991,column:119}},loc:{start:{line:991,column:125},end:{line:995,column:7}},line:991},"114":{name:"(anonymous_114)",decl:{start:{line:995,column:14},end:{line:995,column:15}},loc:{start:{line:995,column:20},end:{line:995,column:22}},line:995},"115":{name:"(anonymous_115)",decl:{start:{line:999,column:2},end:{line:999,column:3}},loc:{start:{line:999,column:39},end:{line:1028,column:3}},line:999},"116":{name:"(anonymous_116)",decl:{start:{line:1004,column:69},end:{line:1004,column:70}},loc:{start:{line:1004,column:77},end:{line:1004,column:90}},line:1004},"117":{name:"(anonymous_117)",decl:{start:{line:1005,column:38},end:{line:1005,column:39}},loc:{start:{line:1005,column:54},end:{line:1005,column:72}},line:1005},"118":{name:"(anonymous_118)",decl:{start:{line:1030,column:2},end:{line:1030,column:3}},loc:{start:{line:1030,column:40},end:{line:1049,column:3}},line:1030},"119":{name:"(anonymous_119)",decl:{start:{line:1032,column:48},end:{line:1032,column:49}},loc:{start:{line:1032,column:56},end:{line:1032,column:69}},line:1032},"120":{name:"(anonymous_120)",decl:{start:{line:1066,column:2},end:{line:1066,column:3}},loc:{start:{line:1080,column:44},end:{line:1198,column:3}},line:1080},"121":{name:"(anonymous_121)",decl:{start:{line:1087,column:63},end:{line:1087,column:64}},loc:{start:{line:1087,column:83},end:{line:1197,column:5}},line:1087},"122":{name:"(anonymous_122)",decl:{start:{line:1091,column:70},end:{line:1091,column:71}},loc:{start:{line:1091,column:79},end:{line:1102,column:7}},line:1091},"123":{name:"(anonymous_123)",decl:{start:{line:1102,column:14},end:{line:1102,column:15}},loc:{start:{line:1102,column:24},end:{line:1196,column:7}},line:1102},"124":{name:"(anonymous_124)",decl:{start:{line:1126,column:34},end:{line:1126,column:35}},loc:{start:{line:1126,column:47},end:{line:1136,column:9}},line:1126},"125":{name:"(anonymous_125)",decl:{start:{line:1137,column:114},end:{line:1137,column:115}},loc:{start:{line:1137,column:120},end:{line:1137,column:175}},line:1137},"126":{name:"(anonymous_126)",decl:{start:{line:1137,column:182},end:{line:1137,column:183}},loc:{start:{line:1137,column:188},end:{line:1137,column:245}},line:1137},"127":{name:"(anonymous_127)",decl:{start:{line:1137,column:252},end:{line:1137,column:253}},loc:{start:{line:1137,column:258},end:{line:1195,column:9}},line:1137},"128":{name:"(anonymous_128)",decl:{start:{line:1188,column:82},end:{line:1188,column:83}},loc:{start:{line:1188,column:93},end:{line:1191,column:14}},line:1188},"129":{name:"(anonymous_129)",decl:{start:{line:1188,column:105},end:{line:1188,column:106}},loc:{start:{line:1188,column:115},end:{line:1191,column:13}},line:1188},"130":{name:"(anonymous_130)",decl:{start:{line:1191,column:22},end:{line:1191,column:23}},loc:{start:{line:1191,column:31},end:{line:1193,column:13}},line:1191},"131":{name:"(anonymous_131)",decl:{start:{line:1200,column:2},end:{line:1200,column:3}},loc:{start:{line:1200,column:26},end:{line:1237,column:3}},line:1200},"132":{name:"(anonymous_132)",decl:{start:{line:1204,column:12},end:{line:1204,column:13}},loc:{start:{line:1204,column:17},end:{line:1207,column:5}},line:1204},"133":{name:"(anonymous_133)",decl:{start:{line:1207,column:13},end:{line:1207,column:14}},loc:{start:{line:1207,column:22},end:{line:1215,column:5}},line:1207},"134":{name:"(anonymous_134)",decl:{start:{line:1215,column:12},end:{line:1215,column:13}},loc:{start:{line:1215,column:22},end:{line:1236,column:5}},line:1215},"135":{name:"(anonymous_135)",decl:{start:{line:1216,column:51},end:{line:1216,column:52}},loc:{start:{line:1216,column:57},end:{line:1218,column:25}},line:1216},"136":{name:"(anonymous_136)",decl:{start:{line:1218,column:32},end:{line:1218,column:33}},loc:{start:{line:1218,column:41},end:{line:1224,column:7}},line:1218},"137":{name:"(anonymous_137)",decl:{start:{line:1224,column:14},end:{line:1224,column:15}},loc:{start:{line:1224,column:36},end:{line:1235,column:7}},line:1224},"138":{name:"(anonymous_138)",decl:{start:{line:1226,column:71},end:{line:1226,column:72}},loc:{start:{line:1226,column:84},end:{line:1226,column:128}},line:1226},"139":{name:"(anonymous_139)",decl:{start:{line:1227,column:52},end:{line:1227,column:53}},loc:{start:{line:1227,column:60},end:{line:1227,column:116}},line:1227},"140":{name:"(anonymous_140)",decl:{start:{line:1227,column:124},end:{line:1227,column:125}},loc:{start:{line:1227,column:130},end:{line:1231,column:11}},line:1227},"141":{name:"(anonymous_141)",decl:{start:{line:1242,column:2},end:{line:1242,column:3}},loc:{start:{line:1242,column:32},end:{line:1244,column:3}},line:1242},"142":{name:"(anonymous_142)",decl:{start:{line:1243,column:37},end:{line:1243,column:38}},loc:{start:{line:1243,column:42},end:{line:1243,column:81}},line:1243},"143":{name:"(anonymous_143)",decl:{start:{line:1243,column:48},end:{line:1243,column:49}},loc:{start:{line:1243,column:53},end:{line:1243,column:70}},line:1243},"144":{name:"(anonymous_144)",decl:{start:{line:1247,column:2},end:{line:1247,column:3}},loc:{start:{line:1247,column:27},end:{line:1282,column:3}},line:1247},"145":{name:"(anonymous_145)",decl:{start:{line:1252,column:34},end:{line:1252,column:35}},loc:{start:{line:1252,column:39},end:{line:1252,column:69}},line:1252},"146":{name:"(anonymous_146)",decl:{start:{line:1261,column:55},end:{line:1261,column:56}},loc:{start:{line:1261,column:71},end:{line:1261,column:118}},line:1261},"147":{name:"(anonymous_147)",decl:{start:{line:1285,column:2},end:{line:1285,column:3}},loc:{start:{line:1285,column:28},end:{line:1320,column:3}},line:1285},"148":{name:"(anonymous_148)",decl:{start:{line:1290,column:35},end:{line:1290,column:36}},loc:{start:{line:1290,column:40},end:{line:1290,column:70}},line:1290},"149":{name:"(anonymous_149)",decl:{start:{line:1299,column:55},end:{line:1299,column:56}},loc:{start:{line:1299,column:71},end:{line:1299,column:118}},line:1299},"150":{name:"(anonymous_150)",decl:{start:{line:1327,column:2},end:{line:1327,column:3}},loc:{start:{line:1327,column:76},end:{line:1412,column:3}},line:1327},"151":{name:"(anonymous_151)",decl:{start:{line:1335,column:36},end:{line:1335,column:37}},loc:{start:{line:1335,column:43},end:{line:1337,column:5}},line:1335},"152":{name:"(anonymous_152)",decl:{start:{line:1368,column:37},end:{line:1368,column:38}},loc:{start:{line:1368,column:44},end:{line:1405,column:7}},line:1368},"153":{name:"(anonymous_153)",decl:{start:{line:1414,column:2},end:{line:1414,column:3}},loc:{start:{line:1414,column:97},end:{line:1503,column:3}},line:1414},"154":{name:"(anonymous_154)",decl:{start:{line:1431,column:48},end:{line:1431,column:49}},loc:{start:{line:1431,column:60},end:{line:1434,column:5}},line:1431},"155":{name:"(anonymous_155)",decl:{start:{line:1489,column:49},end:{line:1489,column:50}},loc:{start:{line:1489,column:64},end:{line:1495,column:5}},line:1489},"156":{name:"(anonymous_156)",decl:{start:{line:1497,column:30},end:{line:1497,column:31}},loc:{start:{line:1497,column:40},end:{line:1501,column:5}},line:1497},"157":{name:"(anonymous_157)",decl:{start:{line:1499,column:45},end:{line:1499,column:46}},loc:{start:{line:1499,column:50},end:{line:1499,column:68}},line:1499},"158":{name:"(anonymous_158)",decl:{start:{line:1505,column:2},end:{line:1505,column:3}},loc:{start:{line:1505,column:31},end:{line:1509,column:3}},line:1505},"159":{name:"(anonymous_159)",decl:{start:{line:1506,column:58},end:{line:1506,column:59}},loc:{start:{line:1506,column:82},end:{line:1508,column:5}},line:1506},"160":{name:"(anonymous_160)",decl:{start:{line:1511,column:2},end:{line:1511,column:3}},loc:{start:{line:1511,column:31},end:{line:1519,column:3}},line:1511},"161":{name:"(anonymous_161)",decl:{start:{line:1516,column:84},end:{line:1516,column:85}},loc:{start:{line:1516,column:90},end:{line:1518,column:5}},line:1516},"162":{name:"(anonymous_162)",decl:{start:{line:1521,column:2},end:{line:1521,column:3}},loc:{start:{line:1521,column:30},end:{line:1529,column:3}},line:1521},"163":{name:"(anonymous_163)",decl:{start:{line:1526,column:83},end:{line:1526,column:84}},loc:{start:{line:1526,column:89},end:{line:1528,column:5}},line:1526},"164":{name:"(anonymous_164)",decl:{start:{line:1533,column:2},end:{line:1533,column:3}},loc:{start:{line:1533,column:32},end:{line:1600,column:3}},line:1533},"165":{name:"(anonymous_165)",decl:{start:{line:1546,column:33},end:{line:1546,column:34}},loc:{start:{line:1546,column:43},end:{line:1546,column:77}},line:1546},"166":{name:"(anonymous_166)",decl:{start:{line:1547,column:33},end:{line:1547,column:34}},loc:{start:{line:1547,column:43},end:{line:1547,column:77}},line:1547},"167":{name:"(anonymous_167)",decl:{start:{line:1550,column:35},end:{line:1550,column:36}},loc:{start:{line:1550,column:45},end:{line:1550,column:86}},line:1550},"168":{name:"(anonymous_168)",decl:{start:{line:1553,column:89},end:{line:1553,column:90}},loc:{start:{line:1553,column:98},end:{line:1557,column:5}},line:1553},"169":{name:"(anonymous_169)",decl:{start:{line:1558,column:119},end:{line:1558,column:120}},loc:{start:{line:1558,column:128},end:{line:1562,column:5}},line:1558},"170":{name:"(anonymous_170)",decl:{start:{line:1563,column:119},end:{line:1563,column:120}},loc:{start:{line:1563,column:128},end:{line:1567,column:5}},line:1563},"171":{name:"(anonymous_171)",decl:{start:{line:1568,column:86},end:{line:1568,column:87}},loc:{start:{line:1568,column:95},end:{line:1572,column:5}},line:1568},"172":{name:"(anonymous_172)",decl:{start:{line:1573,column:113},end:{line:1573,column:114}},loc:{start:{line:1573,column:122},end:{line:1577,column:5}},line:1573},"173":{name:"(anonymous_173)",decl:{start:{line:1578,column:85},end:{line:1578,column:86}},loc:{start:{line:1578,column:94},end:{line:1582,column:5}},line:1578},"174":{name:"(anonymous_174)",decl:{start:{line:1585,column:102},end:{line:1585,column:103}},loc:{start:{line:1585,column:111},end:{line:1589,column:7}},line:1585},"175":{name:"(anonymous_175)",decl:{start:{line:1592,column:15},end:{line:1592,column:16}},loc:{start:{line:1592,column:24},end:{line:1596,column:7}},line:1592}},branchMap:{"0":{loc:{start:{line:21,column:49},end:{line:21,column:96}},type:"if",locations:[{start:{line:21,column:49},end:{line:21,column:96}},{start:{line:21,column:49},end:{line:21,column:96}}],line:21},"1":{loc:{start:{line:21,column:241},end:{line:21,column:291}},type:"cond-expr",locations:[{start:{line:21,column:255},end:{line:21,column:271}},{start:{line:21,column:274},end:{line:21,column:291}}],line:21},"2":{loc:{start:{line:23,column:53},end:{line:23,column:111}},type:"if",locations:[{start:{line:23,column:53},end:{line:23,column:111}},{start:{line:23,column:53},end:{line:23,column:111}}],line:23},"3":{loc:{start:{line:23,column:57},end:{line:23,column:94}},type:"binary-expr",locations:[{start:{line:23,column:57},end:{line:23,column:69}},{start:{line:23,column:73},end:{line:23,column:76}},{start:{line:23,column:80},end:{line:23,column:94}}],line:23},"4":{loc:{start:{line:23,column:112},end:{line:23,column:214}},type:"if",locations:[{start:{line:23,column:112},end:{line:23,column:214}},{start:{line:23,column:112},end:{line:23,column:214}}],line:23},"5":{loc:{start:{line:23,column:116},end:{line:23,column:184}},type:"binary-expr",locations:[{start:{line:23,column:116},end:{line:23,column:128}},{start:{line:23,column:132},end:{line:23,column:155}},{start:{line:23,column:159},end:{line:23,column:184}}],line:23},"6":{loc:{start:{line:23,column:266},end:{line:23,column:321}},type:"if",locations:[{start:{line:23,column:266},end:{line:23,column:321}},{start:{line:23,column:266},end:{line:23,column:321}}],line:23},"7":{loc:{start:{line:23,column:270},end:{line:23,column:293}},type:"binary-expr",locations:[{start:{line:23,column:270},end:{line:23,column:275}},{start:{line:23,column:279},end:{line:23,column:293}}],line:23},"8":{loc:{start:{line:23,column:367},end:{line:23,column:423}},type:"binary-expr",locations:[{start:{line:23,column:367},end:{line:23,column:388}},{start:{line:23,column:392},end:{line:23,column:423}}],line:23},"9":{loc:{start:{line:23,column:448},end:{line:23,column:724}},type:"if",locations:[{start:{line:23,column:448},end:{line:23,column:724}},{start:{line:23,column:448},end:{line:23,column:724}}],line:23},"10":{loc:{start:{line:23,column:452},end:{line:23,column:519}},type:"binary-expr",locations:[{start:{line:23,column:452},end:{line:23,column:469}},{start:{line:23,column:473},end:{line:23,column:519}}],line:23},"11":{loc:{start:{line:23,column:534},end:{line:23,column:606}},type:"cond-expr",locations:[{start:{line:23,column:558},end:{line:23,column:599}},{start:{line:23,column:602},end:{line:23,column:606}}],line:23},"12":{loc:{start:{line:23,column:608},end:{line:23,column:722}},type:"if",locations:[{start:{line:23,column:608},end:{line:23,column:722}},{start:{line:23,column:608},end:{line:23,column:722}}],line:23},"13":{loc:{start:{line:23,column:612},end:{line:23,column:642}},type:"binary-expr",locations:[{start:{line:23,column:612},end:{line:23,column:616}},{start:{line:23,column:621},end:{line:23,column:629}},{start:{line:23,column:633},end:{line:23,column:641}}],line:23},"14":{loc:{start:{line:23,column:749},end:{line:23,column:787}},type:"if",locations:[{start:{line:23,column:749},end:{line:23,column:787}},{start:{line:23,column:749},end:{line:23,column:787}}],line:23},"15":{loc:{start:{line:25,column:46},end:{line:25,column:92}},type:"cond-expr",locations:[{start:{line:25,column:70},end:{line:25,column:73}},{start:{line:25,column:76},end:{line:25,column:92}}],line:25},"16":{loc:{start:{line:25,column:46},end:{line:25,column:67}},type:"binary-expr",locations:[{start:{line:25,column:46},end:{line:25,column:49}},{start:{line:25,column:53},end:{line:25,column:67}}],line:25},"17":{loc:{start:{line:27,column:75},end:{line:27,column:330}},type:"if",locations:[{start:{line:27,column:75},end:{line:27,column:330}},{start:{line:27,column:75},end:{line:27,column:330}}],line:27},"18":{loc:{start:{line:27,column:163},end:{line:27,column:296}},type:"if",locations:[{start:{line:27,column:163},end:{line:27,column:296}},{start:{line:27,column:163},end:{line:27,column:296}}],line:27},"19":{loc:{start:{line:29,column:91},end:{line:29,column:131}},type:"cond-expr",locations:[{start:{line:29,column:114},end:{line:29,column:126}},{start:{line:29,column:129},end:{line:29,column:131}}],line:29},"20":{loc:{start:{line:29,column:133},end:{line:29,column:515}},type:"if",locations:[{start:{line:29,column:133},end:{line:29,column:515}},{start:{line:29,column:133},end:{line:29,column:515}}],line:29},"21":{loc:{start:{line:29,column:255},end:{line:29,column:515}},type:"if",locations:[{start:{line:29,column:255},end:{line:29,column:515}},{start:{line:29,column:255},end:{line:29,column:515}}],line:29},"22":{loc:{start:{line:31,column:44},end:{line:31,column:195}},type:"if",locations:[{start:{line:31,column:44},end:{line:31,column:195}},{start:{line:31,column:44},end:{line:31,column:195}}],line:31},"23":{loc:{start:{line:33,column:54},end:{line:33,column:84}},type:"if",locations:[{start:{line:33,column:54},end:{line:33,column:84}},{start:{line:33,column:54},end:{line:33,column:84}}],line:33},"24":{loc:{start:{line:33,column:159},end:{line:33,column:475}},type:"if",locations:[{start:{line:33,column:159},end:{line:33,column:475}},{start:{line:33,column:159},end:{line:33,column:475}}],line:33},"25":{loc:{start:{line:33,column:331},end:{line:33,column:372}},type:"if",locations:[{start:{line:33,column:331},end:{line:33,column:372}},{start:{line:33,column:331},end:{line:33,column:372}}],line:33},"26":{loc:{start:{line:33,column:373},end:{line:33,column:444}},type:"if",locations:[{start:{line:33,column:373},end:{line:33,column:444}},{start:{line:33,column:373},end:{line:33,column:444}}],line:33},"27":{loc:{start:{line:35,column:59},end:{line:35,column:89}},type:"if",locations:[{start:{line:35,column:59},end:{line:35,column:89}},{start:{line:35,column:59},end:{line:35,column:89}}],line:35},"28":{loc:{start:{line:35,column:220},end:{line:35,column:261}},type:"if",locations:[{start:{line:35,column:220},end:{line:35,column:261}},{start:{line:35,column:220},end:{line:35,column:261}}],line:35},"29":{loc:{start:{line:64,column:2},end:{line:66,column:3}},type:"if",locations:[{start:{line:64,column:2},end:{line:66,column:3}},{start:{line:64,column:2},end:{line:66,column:3}}],line:64},"30":{loc:{start:{line:72,column:4},end:{line:74,column:5}},type:"if",locations:[{start:{line:72,column:4},end:{line:74,column:5}},{start:{line:72,column:4},end:{line:74,column:5}}],line:72},"31":{loc:{start:{line:76,column:4},end:{line:78,column:5}},type:"if",locations:[{start:{line:76,column:4},end:{line:78,column:5}},{start:{line:76,column:4},end:{line:78,column:5}}],line:76},"32":{loc:{start:{line:91,column:2},end:{line:93,column:3}},type:"if",locations:[{start:{line:91,column:2},end:{line:93,column:3}},{start:{line:91,column:2},end:{line:93,column:3}}],line:91},"33":{loc:{start:{line:95,column:2},end:{line:101,column:3}},type:"if",locations:[{start:{line:95,column:2},end:{line:101,column:3}},{start:{line:95,column:2},end:{line:101,column:3}}],line:95},"34":{loc:{start:{line:96,column:4},end:{line:100,column:5}},type:"if",locations:[{start:{line:96,column:4},end:{line:100,column:5}},{start:{line:96,column:4},end:{line:100,column:5}}],line:96},"35":{loc:{start:{line:103,column:2},end:{line:109,column:3}},type:"if",locations:[{start:{line:103,column:2},end:{line:109,column:3}},{start:{line:103,column:2},end:{line:109,column:3}}],line:103},"36":{loc:{start:{line:104,column:4},end:{line:108,column:5}},type:"if",locations:[{start:{line:104,column:4},end:{line:108,column:5}},{start:{line:104,column:4},end:{line:108,column:5}}],line:104},"37":{loc:{start:{line:111,column:2},end:{line:117,column:3}},type:"if",locations:[{start:{line:111,column:2},end:{line:117,column:3}},{start:{line:111,column:2},end:{line:117,column:3}}],line:111},"38":{loc:{start:{line:112,column:4},end:{line:116,column:5}},type:"if",locations:[{start:{line:112,column:4},end:{line:116,column:5}},{start:{line:112,column:4},end:{line:116,column:5}}],line:112},"39":{loc:{start:{line:112,column:8},end:{line:112,column:60}},type:"binary-expr",locations:[{start:{line:112,column:8},end:{line:112,column:35}},{start:{line:112,column:39},end:{line:112,column:60}}],line:112},"40":{loc:{start:{line:120,column:4},end:{line:126,column:5}},type:"if",locations:[{start:{line:120,column:4},end:{line:126,column:5}},{start:{line:120,column:4},end:{line:126,column:5}}],line:120},"41":{loc:{start:{line:120,column:8},end:{line:120,column:48}},type:"binary-expr",locations:[{start:{line:120,column:8},end:{line:120,column:13}},{start:{line:120,column:17},end:{line:120,column:27}},{start:{line:120,column:31},end:{line:120,column:48}}],line:120},"42":{loc:{start:{line:121,column:6},end:{line:125,column:7}},type:"if",locations:[{start:{line:121,column:6},end:{line:125,column:7}},{start:{line:121,column:6},end:{line:125,column:7}}],line:121},"43":{loc:{start:{line:122,column:8},end:{line:124,column:9}},type:"if",locations:[{start:{line:122,column:8},end:{line:124,column:9}},{start:{line:122,column:8},end:{line:124,column:9}}],line:122},"44":{loc:{start:{line:128,column:4},end:{line:130,column:5}},type:"if",locations:[{start:{line:128,column:4},end:{line:130,column:5}},{start:{line:128,column:4},end:{line:130,column:5}}],line:128},"45":{loc:{start:{line:128,column:8},end:{line:128,column:74}},type:"binary-expr",locations:[{start:{line:128,column:8},end:{line:128,column:31}},{start:{line:128,column:35},end:{line:128,column:74}}],line:128},"46":{loc:{start:{line:137,column:2},end:{line:137,column:47}},type:"if",locations:[{start:{line:137,column:2},end:{line:137,column:47}},{start:{line:137,column:2},end:{line:137,column:47}}],line:137},"47":{loc:{start:{line:137,column:6},end:{line:137,column:23}},type:"binary-expr",locations:[{start:{line:137,column:6},end:{line:137,column:10}},{start:{line:137,column:14},end:{line:137,column:23}}],line:137},"48":{loc:{start:{line:141,column:2},end:{line:192,column:3}},type:"if",locations:[{start:{line:141,column:2},end:{line:192,column:3}},{start:{line:141,column:2},end:{line:192,column:3}}],line:141},"49":{loc:{start:{line:144,column:4},end:{line:191,column:5}},type:"if",locations:[{start:{line:144,column:4},end:{line:191,column:5}},{start:{line:144,column:4},end:{line:191,column:5}}],line:144},"50":{loc:{start:{line:144,column:8},end:{line:144,column:48}},type:"binary-expr",locations:[{start:{line:144,column:8},end:{line:144,column:23}},{start:{line:144,column:27},end:{line:144,column:48}}],line:144},"51":{loc:{start:{line:159,column:8},end:{line:165,column:9}},type:"if",locations:[{start:{line:159,column:8},end:{line:165,column:9}},{start:{line:159,column:8},end:{line:165,column:9}}],line:159},"52":{loc:{start:{line:160,column:10},end:{line:164,column:11}},type:"if",locations:[{start:{line:160,column:10},end:{line:164,column:11}},{start:{line:160,column:10},end:{line:164,column:11}}],line:160},"53":{loc:{start:{line:161,column:70},end:{line:161,column:111}},type:"binary-expr",locations:[{start:{line:161,column:70},end:{line:161,column:83}},{start:{line:161,column:87},end:{line:161,column:111}}],line:161},"54":{loc:{start:{line:163,column:38},end:{line:163,column:107}},type:"binary-expr",locations:[{start:{line:163,column:38},end:{line:163,column:65}},{start:{line:163,column:69},end:{line:163,column:107}}],line:163},"55":{loc:{start:{line:167,column:8},end:{line:170,column:9}},type:"if",locations:[{start:{line:167,column:8},end:{line:170,column:9}},{start:{line:167,column:8},end:{line:170,column:9}}],line:167},"56":{loc:{start:{line:175,column:6},end:{line:177,column:7}},type:"if",locations:[{start:{line:175,column:6},end:{line:177,column:7}},{start:{line:175,column:6},end:{line:177,column:7}}],line:175},"57":{loc:{start:{line:175,column:10},end:{line:175,column:52}},type:"binary-expr",locations:[{start:{line:175,column:10},end:{line:175,column:33}},{start:{line:175,column:37},end:{line:175,column:52}}],line:175},"58":{loc:{start:{line:181,column:8},end:{line:189,column:9}},type:"if",locations:[{start:{line:181,column:8},end:{line:189,column:9}},{start:{line:181,column:8},end:{line:189,column:9}}],line:181},"59":{loc:{start:{line:184,column:10},end:{line:188,column:11}},type:"if",locations:[{start:{line:184,column:10},end:{line:188,column:11}},{start:{line:184,column:10},end:{line:188,column:11}}],line:184},"60":{loc:{start:{line:198,column:2},end:{line:203,column:3}},type:"if",locations:[{start:{line:198,column:2},end:{line:203,column:3}},{start:{line:198,column:2},end:{line:203,column:3}}],line:198},"61":{loc:{start:{line:198,column:8},end:{line:198,column:59}},type:"binary-expr",locations:[{start:{line:198,column:8},end:{line:198,column:19}},{start:{line:198,column:23},end:{line:198,column:29}},{start:{line:198,column:33},end:{line:198,column:59}}],line:198},"62":{loc:{start:{line:199,column:4},end:{line:199,column:69}},type:"binary-expr",locations:[{start:{line:199,column:4},end:{line:199,column:19}},{start:{line:199,column:23},end:{line:199,column:69}}],line:199},"63":{loc:{start:{line:202,column:4},end:{line:202,column:134}},type:"binary-expr",locations:[{start:{line:202,column:4},end:{line:202,column:25}},{start:{line:202,column:29},end:{line:202,column:64}},{start:{line:202,column:68},end:{line:202,column:134}}],line:202},"64":{loc:{start:{line:205,column:2},end:{line:207,column:3}},type:"if",locations:[{start:{line:205,column:2},end:{line:207,column:3}},{start:{line:205,column:2},end:{line:207,column:3}}],line:205},"65":{loc:{start:{line:213,column:2},end:{line:215,column:3}},type:"if",locations:[{start:{line:213,column:2},end:{line:215,column:3}},{start:{line:213,column:2},end:{line:215,column:3}}],line:213},"66":{loc:{start:{line:227,column:2},end:{line:229,column:3}},type:"if",locations:[{start:{line:227,column:2},end:{line:229,column:3}},{start:{line:227,column:2},end:{line:229,column:3}}],line:227},"67":{loc:{start:{line:250,column:2},end:{line:253,column:3}},type:"if",locations:[{start:{line:250,column:2},end:{line:253,column:3}},{start:{line:250,column:2},end:{line:253,column:3}}],line:250},"68":{loc:{start:{line:259,column:43},end:{line:259,column:65}},type:"binary-expr",locations:[{start:{line:259,column:43},end:{line:259,column:59}},{start:{line:259,column:63},end:{line:259,column:65}}],line:259},"69":{loc:{start:{line:267,column:2},end:{line:269,column:3}},type:"if",locations:[{start:{line:267,column:2},end:{line:269,column:3}},{start:{line:267,column:2},end:{line:269,column:3}}],line:267},"70":{loc:{start:{line:274,column:4},end:{line:278,column:5}},type:"if",locations:[{start:{line:274,column:4},end:{line:278,column:5}},{start:{line:274,column:4},end:{line:278,column:5}}],line:274},"71":{loc:{start:{line:274,column:8},end:{line:274,column:144}},type:"binary-expr",locations:[{start:{line:274,column:8},end:{line:274,column:17}},{start:{line:274,column:21},end:{line:274,column:50}},{start:{line:274,column:54},end:{line:274,column:68}},{start:{line:274,column:72},end:{line:274,column:144}}],line:274},"72":{loc:{start:{line:289,column:4},end:{line:330,column:5}},type:"if",locations:[{start:{line:289,column:4},end:{line:330,column:5}},{start:{line:289,column:4},end:{line:330,column:5}}],line:289},"73":{loc:{start:{line:289,column:8},end:{line:289,column:39}},type:"binary-expr",locations:[{start:{line:289,column:8},end:{line:289,column:19}},{start:{line:289,column:23},end:{line:289,column:39}}],line:289},"74":{loc:{start:{line:290,column:6},end:{line:329,column:7}},type:"switch",locations:[{start:{line:291,column:8},end:{line:297,column:16}},{start:{line:299,column:8},end:{line:305,column:16}},{start:{line:307,column:8},end:{line:313,column:16}},{start:{line:315,column:8},end:{line:321,column:16}},{start:{line:323,column:8},end:{line:325,column:16}},{start:{line:327,column:8},end:{line:328,column:135}}],line:290},"75":{loc:{start:{line:292,column:10},end:{line:294,column:11}},type:"if",locations:[{start:{line:292,column:10},end:{line:294,column:11}},{start:{line:292,column:10},end:{line:294,column:11}}],line:292},"76":{loc:{start:{line:300,column:10},end:{line:302,column:11}},type:"if",locations:[{start:{line:300,column:10},end:{line:302,column:11}},{start:{line:300,column:10},end:{line:302,column:11}}],line:300},"77":{loc:{start:{line:308,column:10},end:{line:310,column:11}},type:"if",locations:[{start:{line:308,column:10},end:{line:310,column:11}},{start:{line:308,column:10},end:{line:310,column:11}}],line:308},"78":{loc:{start:{line:316,column:10},end:{line:318,column:11}},type:"if",locations:[{start:{line:316,column:10},end:{line:318,column:11}},{start:{line:316,column:10},end:{line:318,column:11}}],line:316},"79":{loc:{start:{line:335,column:2},end:{line:352,column:3}},type:"if",locations:[{start:{line:335,column:2},end:{line:352,column:3}},{start:{line:335,column:2},end:{line:352,column:3}}],line:335},"80":{loc:{start:{line:335,column:6},end:{line:335,column:46}},type:"binary-expr",locations:[{start:{line:335,column:6},end:{line:335,column:21}},{start:{line:335,column:25},end:{line:335,column:46}}],line:335},"81":{loc:{start:{line:340,column:6},end:{line:349,column:7}},type:"if",locations:[{start:{line:340,column:6},end:{line:349,column:7}},{start:{line:340,column:6},end:{line:349,column:7}}],line:340},"82":{loc:{start:{line:363,column:2},end:{line:385,column:3}},type:"if",locations:[{start:{line:363,column:2},end:{line:385,column:3}},{start:{line:363,column:2},end:{line:385,column:3}}],line:363},"83":{loc:{start:{line:363,column:6},end:{line:363,column:22}},type:"binary-expr",locations:[{start:{line:363,column:6},end:{line:363,column:12}},{start:{line:363,column:16},end:{line:363,column:22}}],line:363},"84":{loc:{start:{line:366,column:5},end:{line:366,column:17}},type:"binary-expr",locations:[{start:{line:366,column:5},end:{line:366,column:11}},{start:{line:366,column:15},end:{line:366,column:17}}],line:366},"85":{loc:{start:{line:367,column:6},end:{line:373,column:7}},type:"if",locations:[{start:{line:367,column:6},end:{line:373,column:7}},{start:{line:367,column:6},end:{line:373,column:7}}],line:367},"86":{loc:{start:{line:376,column:5},end:{line:376,column:17}},type:"binary-expr",locations:[{start:{line:376,column:5},end:{line:376,column:11}},{start:{line:376,column:15},end:{line:376,column:17}}],line:376},"87":{loc:{start:{line:377,column:6},end:{line:383,column:7}},type:"if",locations:[{start:{line:377,column:6},end:{line:383,column:7}},{start:{line:377,column:6},end:{line:383,column:7}}],line:377},"88":{loc:{start:{line:431,column:4},end:{line:433,column:5}},type:"if",locations:[{start:{line:431,column:4},end:{line:433,column:5}},{start:{line:431,column:4},end:{line:433,column:5}}],line:431},"89":{loc:{start:{line:439,column:13},end:{line:441,column:3}},type:"default-arg",locations:[{start:{line:439,column:23},end:{line:441,column:3}}],line:439},"90":{loc:{start:{line:442,column:4},end:{line:444,column:5}},type:"if",locations:[{start:{line:442,column:4},end:{line:444,column:5}},{start:{line:442,column:4},end:{line:444,column:5}}],line:442},"91":{loc:{start:{line:451,column:39},end:{line:453,column:3}},type:"default-arg",locations:[{start:{line:451,column:49},end:{line:453,column:3}}],line:451},"92":{loc:{start:{line:454,column:11},end:{line:454,column:90}},type:"cond-expr",locations:[{start:{line:454,column:30},end:{line:454,column:63}},{start:{line:454,column:66},end:{line:454,column:90}}],line:454},"93":{loc:{start:{line:464,column:6},end:{line:466,column:7}},type:"if",locations:[{start:{line:464,column:6},end:{line:466,column:7}},{start:{line:464,column:6},end:{line:466,column:7}}],line:464},"94":{loc:{start:{line:464,column:10},end:{line:464,column:69}},type:"binary-expr",locations:[{start:{line:464,column:10},end:{line:464,column:19}},{start:{line:464,column:23},end:{line:464,column:44}},{start:{line:464,column:48},end:{line:464,column:69}}],line:464},"95":{loc:{start:{line:480,column:19},end:{line:480,column:28}},type:"binary-expr",locations:[{start:{line:480,column:19},end:{line:480,column:22}},{start:{line:480,column:26},end:{line:480,column:28}}],line:480},"96":{loc:{start:{line:484,column:6},end:{line:486,column:7}},type:"if",locations:[{start:{line:484,column:6},end:{line:486,column:7}},{start:{line:484,column:6},end:{line:486,column:7}}],line:484},"97":{loc:{start:{line:494,column:35},end:{line:499,column:8}},type:"default-arg",locations:[{start:{line:499,column:6},end:{line:499,column:8}}],line:494},"98":{loc:{start:{line:499,column:10},end:{line:499,column:34}},type:"default-arg",locations:[{start:{line:499,column:29},end:{line:499,column:34}}],line:499},"99":{loc:{start:{line:499,column:36},end:{line:499,column:56}},type:"default-arg",locations:[{start:{line:499,column:51},end:{line:499,column:56}}],line:499},"100":{loc:{start:{line:506,column:19},end:{line:506,column:28}},type:"binary-expr",locations:[{start:{line:506,column:19},end:{line:506,column:22}},{start:{line:506,column:26},end:{line:506,column:28}}],line:506},"101":{loc:{start:{line:508,column:14},end:{line:508,column:111}},type:"cond-expr",locations:[{start:{line:508,column:25},end:{line:508,column:42}},{start:{line:508,column:45},end:{line:508,column:111}}],line:508},"102":{loc:{start:{line:511,column:8},end:{line:519,column:9}},type:"if",locations:[{start:{line:511,column:8},end:{line:519,column:9}},{start:{line:511,column:8},end:{line:519,column:9}}],line:511},"103":{loc:{start:{line:514,column:10},end:{line:518,column:11}},type:"if",locations:[{start:{line:514,column:10},end:{line:518,column:11}},{start:{line:514,column:10},end:{line:518,column:11}}],line:514},"104":{loc:{start:{line:521,column:8},end:{line:523,column:9}},type:"if",locations:[{start:{line:521,column:8},end:{line:523,column:9}},{start:{line:521,column:8},end:{line:523,column:9}}],line:521},"105":{loc:{start:{line:525,column:8},end:{line:527,column:9}},type:"if",locations:[{start:{line:525,column:8},end:{line:527,column:9}},{start:{line:525,column:8},end:{line:527,column:9}}],line:525},"106":{loc:{start:{line:533,column:10},end:{line:537,column:11}},type:"if",locations:[{start:{line:533,column:10},end:{line:537,column:11}},{start:{line:533,column:10},end:{line:537,column:11}}],line:533},"107":{loc:{start:{line:542,column:12},end:{line:544,column:13}},type:"if",locations:[{start:{line:542,column:12},end:{line:544,column:13}},{start:{line:542,column:12},end:{line:544,column:13}}],line:542},"108":{loc:{start:{line:548,column:12},end:{line:550,column:13}},type:"if",locations:[{start:{line:548,column:12},end:{line:550,column:13}},{start:{line:548,column:12},end:{line:550,column:13}}],line:548},"109":{loc:{start:{line:548,column:16},end:{line:548,column:114}},type:"binary-expr",locations:[{start:{line:548,column:16},end:{line:548,column:76}},{start:{line:548,column:80},end:{line:548,column:114}}],line:548},"110":{loc:{start:{line:554,column:12},end:{line:556,column:13}},type:"if",locations:[{start:{line:554,column:12},end:{line:556,column:13}},{start:{line:554,column:12},end:{line:556,column:13}}],line:554},"111":{loc:{start:{line:554,column:16},end:{line:554,column:193}},type:"binary-expr",locations:[{start:{line:554,column:16},end:{line:554,column:39}},{start:{line:554,column:43},end:{line:554,column:86}},{start:{line:554,column:90},end:{line:554,column:193}}],line:554},"112":{loc:{start:{line:554,column:144},end:{line:554,column:192}},type:"binary-expr",locations:[{start:{line:554,column:144},end:{line:554,column:166}},{start:{line:554,column:170},end:{line:554,column:192}}],line:554},"113":{loc:{start:{line:562,column:10},end:{line:570,column:11}},type:"if",locations:[{start:{line:562,column:10},end:{line:570,column:11}},{start:{line:562,column:10},end:{line:570,column:11}}],line:562},"114":{loc:{start:{line:564,column:14},end:{line:566,column:15}},type:"if",locations:[{start:{line:564,column:14},end:{line:566,column:15}},{start:{line:564,column:14},end:{line:566,column:15}}],line:564},"115":{loc:{start:{line:564,column:18},end:{line:564,column:43}},type:"binary-expr",locations:[{start:{line:564,column:18},end:{line:564,column:25}},{start:{line:564,column:29},end:{line:564,column:43}}],line:564},"116":{loc:{start:{line:572,column:10},end:{line:578,column:11}},type:"if",locations:[{start:{line:572,column:10},end:{line:578,column:11}},{start:{line:572,column:10},end:{line:578,column:11}}],line:572},"117":{loc:{start:{line:574,column:17},end:{line:578,column:11}},type:"if",locations:[{start:{line:574,column:17},end:{line:578,column:11}},{start:{line:574,column:17},end:{line:578,column:11}}],line:574},"118":{loc:{start:{line:581,column:8},end:{line:583,column:9}},type:"if",locations:[{start:{line:581,column:8},end:{line:583,column:9}},{start:{line:581,column:8},end:{line:583,column:9}}],line:581},"119":{loc:{start:{line:585,column:8},end:{line:587,column:9}},type:"if",locations:[{start:{line:585,column:8},end:{line:587,column:9}},{start:{line:585,column:8},end:{line:587,column:9}}],line:585},"120":{loc:{start:{line:593,column:8},end:{line:595,column:9}},type:"if",locations:[{start:{line:593,column:8},end:{line:595,column:9}},{start:{line:593,column:8},end:{line:595,column:9}}],line:593},"121":{loc:{start:{line:608,column:15},end:{line:608,column:42}},type:"binary-expr",locations:[{start:{line:608,column:15},end:{line:608,column:30}},{start:{line:608,column:34},end:{line:608,column:42}}],line:608},"122":{loc:{start:{line:611,column:6},end:{line:613,column:7}},type:"if",locations:[{start:{line:611,column:6},end:{line:613,column:7}},{start:{line:611,column:6},end:{line:613,column:7}}],line:611},"123":{loc:{start:{line:615,column:6},end:{line:621,column:7}},type:"if",locations:[{start:{line:615,column:6},end:{line:621,column:7}},{start:{line:615,column:6},end:{line:621,column:7}}],line:615},"124":{loc:{start:{line:623,column:6},end:{line:629,column:7}},type:"if",locations:[{start:{line:623,column:6},end:{line:629,column:7}},{start:{line:623,column:6},end:{line:629,column:7}}],line:623},"125":{loc:{start:{line:631,column:6},end:{line:635,column:7}},type:"if",locations:[{start:{line:631,column:6},end:{line:635,column:7}},{start:{line:631,column:6},end:{line:635,column:7}}],line:631},"126":{loc:{start:{line:653,column:15},end:{line:653,column:42}},type:"binary-expr",locations:[{start:{line:653,column:15},end:{line:653,column:30}},{start:{line:653,column:34},end:{line:653,column:42}}],line:653},"127":{loc:{start:{line:658,column:6},end:{line:660,column:7}},type:"if",locations:[{start:{line:658,column:6},end:{line:660,column:7}},{start:{line:658,column:6},end:{line:660,column:7}}],line:658},"128":{loc:{start:{line:662,column:6},end:{line:666,column:7}},type:"if",locations:[{start:{line:662,column:6},end:{line:666,column:7}},{start:{line:662,column:6},end:{line:666,column:7}}],line:662},"129":{loc:{start:{line:668,column:6},end:{line:672,column:7}},type:"if",locations:[{start:{line:668,column:6},end:{line:672,column:7}},{start:{line:668,column:6},end:{line:672,column:7}}],line:668},"130":{loc:{start:{line:697,column:6},end:{line:699,column:7}},type:"if",locations:[{start:{line:697,column:6},end:{line:699,column:7}},{start:{line:697,column:6},end:{line:699,column:7}}],line:697},"131":{loc:{start:{line:712,column:28},end:{line:714,column:8}},type:"default-arg",locations:[{start:{line:714,column:6},end:{line:714,column:8}}],line:712},"132":{loc:{start:{line:716,column:21},end:{line:716,column:30}},type:"binary-expr",locations:[{start:{line:716,column:21},end:{line:716,column:24}},{start:{line:716,column:28},end:{line:716,column:30}}],line:716},"133":{loc:{start:{line:718,column:14},end:{line:718,column:111}},type:"cond-expr",locations:[{start:{line:718,column:25},end:{line:718,column:42}},{start:{line:718,column:45},end:{line:718,column:111}}],line:718},"134":{loc:{start:{line:719,column:8},end:{line:725,column:9}},type:"if",locations:[{start:{line:719,column:8},end:{line:725,column:9}},{start:{line:719,column:8},end:{line:725,column:9}}],line:719},"135":{loc:{start:{line:722,column:10},end:{line:724,column:11}},type:"if",locations:[{start:{line:722,column:10},end:{line:724,column:11}},{start:{line:722,column:10},end:{line:724,column:11}}],line:722},"136":{loc:{start:{line:728,column:8},end:{line:730,column:9}},type:"if",locations:[{start:{line:728,column:8},end:{line:730,column:9}},{start:{line:728,column:8},end:{line:730,column:9}}],line:728},"137":{loc:{start:{line:736,column:10},end:{line:740,column:11}},type:"if",locations:[{start:{line:736,column:10},end:{line:740,column:11}},{start:{line:736,column:10},end:{line:740,column:11}}],line:736},"138":{loc:{start:{line:745,column:10},end:{line:747,column:11}},type:"if",locations:[{start:{line:745,column:10},end:{line:747,column:11}},{start:{line:745,column:10},end:{line:747,column:11}}],line:745},"139":{loc:{start:{line:745,column:14},end:{line:745,column:91}},type:"binary-expr",locations:[{start:{line:745,column:14},end:{line:745,column:38}},{start:{line:745,column:42},end:{line:745,column:91}}],line:745},"140":{loc:{start:{line:757,column:28},end:{line:759,column:8}},type:"default-arg",locations:[{start:{line:759,column:6},end:{line:759,column:8}}],line:757},"141":{loc:{start:{line:759,column:10},end:{line:759,column:30}},type:"default-arg",locations:[{start:{line:759,column:25},end:{line:759,column:30}}],line:759},"142":{loc:{start:{line:772,column:19},end:{line:772,column:28}},type:"binary-expr",locations:[{start:{line:772,column:19},end:{line:772,column:22}},{start:{line:772,column:26},end:{line:772,column:28}}],line:772},"143":{loc:{start:{line:775,column:14},end:{line:775,column:111}},type:"cond-expr",locations:[{start:{line:775,column:25},end:{line:775,column:42}},{start:{line:775,column:45},end:{line:775,column:111}}],line:775},"144":{loc:{start:{line:779,column:8},end:{line:781,column:9}},type:"if",locations:[{start:{line:779,column:8},end:{line:781,column:9}},{start:{line:779,column:8},end:{line:781,column:9}}],line:779},"145":{loc:{start:{line:785,column:8},end:{line:787,column:9}},type:"if",locations:[{start:{line:785,column:8},end:{line:787,column:9}},{start:{line:785,column:8},end:{line:787,column:9}}],line:785},"146":{loc:{start:{line:799,column:4},end:{line:801,column:5}},type:"if",locations:[{start:{line:799,column:4},end:{line:801,column:5}},{start:{line:799,column:4},end:{line:801,column:5}}],line:799},"147":{loc:{start:{line:807,column:6},end:{line:809,column:7}},type:"if",locations:[{start:{line:807,column:6},end:{line:809,column:7}},{start:{line:807,column:6},end:{line:809,column:7}}],line:807},"148":{loc:{start:{line:807,column:10},end:{line:807,column:80}},type:"binary-expr",locations:[{start:{line:807,column:10},end:{line:807,column:23}},{start:{line:807,column:27},end:{line:807,column:45}},{start:{line:807,column:49},end:{line:807,column:80}}],line:807},"149":{loc:{start:{line:814,column:4},end:{line:819,column:5}},type:"if",locations:[{start:{line:814,column:4},end:{line:819,column:5}},{start:{line:814,column:4},end:{line:819,column:5}}],line:814},"150":{loc:{start:{line:832,column:19},end:{line:832,column:31}},type:"default-arg",locations:[{start:{line:832,column:26},end:{line:832,column:31}}],line:832},"151":{loc:{start:{line:850,column:4},end:{line:857,column:5}},type:"if",locations:[{start:{line:850,column:4},end:{line:857,column:5}},{start:{line:850,column:4},end:{line:857,column:5}}],line:850},"152":{loc:{start:{line:850,column:8},end:{line:850,column:66}},type:"binary-expr",locations:[{start:{line:850,column:8},end:{line:850,column:12}},{start:{line:850,column:16},end:{line:850,column:30}},{start:{line:850,column:34},end:{line:850,column:66}}],line:850},"153":{loc:{start:{line:882,column:4},end:{line:891,column:5}},type:"if",locations:[{start:{line:882,column:4},end:{line:891,column:5}},{start:{line:882,column:4},end:{line:891,column:5}}],line:882},"154":{loc:{start:{line:893,column:4},end:{line:902,column:5}},type:"if",locations:[{start:{line:893,column:4},end:{line:902,column:5}},{start:{line:893,column:4},end:{line:902,column:5}}],line:893},"155":{loc:{start:{line:907,column:6},end:{line:909,column:7}},type:"if",locations:[{start:{line:907,column:6},end:{line:909,column:7}},{start:{line:907,column:6},end:{line:909,column:7}}],line:907},"156":{loc:{start:{line:907,column:10},end:{line:907,column:37}},type:"binary-expr",locations:[{start:{line:907,column:10},end:{line:907,column:12}},{start:{line:907,column:16},end:{line:907,column:37}}],line:907},"157":{loc:{start:{line:913,column:6},end:{line:943,column:7}},type:"if",locations:[{start:{line:913,column:6},end:{line:943,column:7}},{start:{line:913,column:6},end:{line:943,column:7}}],line:913},"158":{loc:{start:{line:913,column:10},end:{line:913,column:120}},type:"binary-expr",locations:[{start:{line:913,column:10},end:{line:913,column:20}},{start:{line:913,column:25},end:{line:913,column:42}},{start:{line:913,column:46},end:{line:913,column:63}},{start:{line:913,column:67},end:{line:913,column:85}},{start:{line:913,column:89},end:{line:913,column:119}}],line:913},"159":{loc:{start:{line:919,column:10},end:{line:931,column:11}},type:"if",locations:[{start:{line:919,column:10},end:{line:931,column:11}},{start:{line:919,column:10},end:{line:931,column:11}}],line:919},"160":{loc:{start:{line:921,column:17},end:{line:931,column:11}},type:"if",locations:[{start:{line:921,column:17},end:{line:931,column:11}},{start:{line:921,column:17},end:{line:931,column:11}}],line:921},"161":{loc:{start:{line:923,column:17},end:{line:931,column:11}},type:"if",locations:[{start:{line:923,column:17},end:{line:931,column:11}},{start:{line:923,column:17},end:{line:931,column:11}}],line:923},"162":{loc:{start:{line:926,column:17},end:{line:931,column:11}},type:"if",locations:[{start:{line:926,column:17},end:{line:931,column:11}},{start:{line:926,column:17},end:{line:931,column:11}}],line:926},"163":{loc:{start:{line:950,column:8},end:{line:952,column:9}},type:"if",locations:[{start:{line:950,column:8},end:{line:952,column:9}},{start:{line:950,column:8},end:{line:952,column:9}}],line:950},"164":{loc:{start:{line:955,column:10},end:{line:959,column:11}},type:"if",locations:[{start:{line:955,column:10},end:{line:959,column:11}},{start:{line:955,column:10},end:{line:959,column:11}}],line:955},"165":{loc:{start:{line:976,column:4},end:{line:980,column:5}},type:"if",locations:[{start:{line:976,column:4},end:{line:980,column:5}},{start:{line:976,column:4},end:{line:980,column:5}}],line:976},"166":{loc:{start:{line:982,column:4},end:{line:986,column:5}},type:"if",locations:[{start:{line:982,column:4},end:{line:986,column:5}},{start:{line:982,column:4},end:{line:986,column:5}}],line:982},"167":{loc:{start:{line:990,column:4},end:{line:996,column:5}},type:"if",locations:[{start:{line:990,column:4},end:{line:996,column:5}},{start:{line:990,column:4},end:{line:996,column:5}}],line:990},"168":{loc:{start:{line:999,column:20},end:{line:999,column:30}},type:"default-arg",locations:[{start:{line:999,column:26},end:{line:999,column:30}}],line:999},"169":{loc:{start:{line:1000,column:26},end:{line:1000,column:86}},type:"cond-expr",locations:[{start:{line:1000,column:63},end:{line:1000,column:79}},{start:{line:1000,column:82},end:{line:1000,column:86}}],line:1000},"170":{loc:{start:{line:1001,column:22},end:{line:1001,column:94}},type:"cond-expr",locations:[{start:{line:1001,column:64},end:{line:1001,column:87}},{start:{line:1001,column:90},end:{line:1001,column:94}}],line:1001},"171":{loc:{start:{line:1001,column:22},end:{line:1001,column:61}},type:"binary-expr",locations:[{start:{line:1001,column:22},end:{line:1001,column:36}},{start:{line:1001,column:40},end:{line:1001,column:61}}],line:1001},"172":{loc:{start:{line:1002,column:22},end:{line:1002,column:92}},type:"cond-expr",locations:[{start:{line:1002,column:64},end:{line:1002,column:85}},{start:{line:1002,column:88},end:{line:1002,column:92}}],line:1002},"173":{loc:{start:{line:1002,column:22},end:{line:1002,column:61}},type:"binary-expr",locations:[{start:{line:1002,column:22},end:{line:1002,column:36}},{start:{line:1002,column:40},end:{line:1002,column:61}}],line:1002},"174":{loc:{start:{line:1008,column:4},end:{line:1012,column:5}},type:"if",locations:[{start:{line:1008,column:4},end:{line:1012,column:5}},{start:{line:1008,column:4},end:{line:1012,column:5}}],line:1008},"175":{loc:{start:{line:1015,column:4},end:{line:1024,column:5}},type:"if",locations:[{start:{line:1015,column:4},end:{line:1024,column:5}},{start:{line:1015,column:4},end:{line:1024,column:5}}],line:1015},"176":{loc:{start:{line:1019,column:11},end:{line:1024,column:5}},type:"if",locations:[{start:{line:1019,column:11},end:{line:1024,column:5}},{start:{line:1019,column:11},end:{line:1024,column:5}}],line:1019},"177":{loc:{start:{line:1030,column:23},end:{line:1030,column:31}},type:"default-arg",locations:[{start:{line:1030,column:29},end:{line:1030,column:31}}],line:1030},"178":{loc:{start:{line:1031,column:23},end:{line:1031,column:93}},type:"cond-expr",locations:[{start:{line:1031,column:66},end:{line:1031,column:88}},{start:{line:1031,column:91},end:{line:1031,column:93}}],line:1031},"179":{loc:{start:{line:1031,column:23},end:{line:1031,column:63}},type:"binary-expr",locations:[{start:{line:1031,column:23},end:{line:1031,column:37}},{start:{line:1031,column:41},end:{line:1031,column:63}}],line:1031},"180":{loc:{start:{line:1036,column:4},end:{line:1045,column:5}},type:"if",locations:[{start:{line:1036,column:4},end:{line:1045,column:5}},{start:{line:1036,column:4},end:{line:1045,column:5}}],line:1036},"181":{loc:{start:{line:1040,column:11},end:{line:1045,column:5}},type:"if",locations:[{start:{line:1040,column:11},end:{line:1045,column:5}},{start:{line:1040,column:11},end:{line:1045,column:5}}],line:1040},"182":{loc:{start:{line:1066,column:25},end:{line:1080,column:8}},type:"default-arg",locations:[{start:{line:1080,column:6},end:{line:1080,column:8}}],line:1066},"183":{loc:{start:{line:1070,column:4},end:{line:1070,column:13}},type:"default-arg",locations:[{start:{line:1070,column:11},end:{line:1070,column:13}}],line:1070},"184":{loc:{start:{line:1078,column:4},end:{line:1078,column:27}},type:"default-arg",locations:[{start:{line:1078,column:22},end:{line:1078,column:27}}],line:1078},"185":{loc:{start:{line:1080,column:10},end:{line:1080,column:19}},type:"default-arg",locations:[{start:{line:1080,column:17},end:{line:1080,column:19}}],line:1080},"186":{loc:{start:{line:1082,column:21},end:{line:1082,column:30}},type:"binary-expr",locations:[{start:{line:1082,column:21},end:{line:1082,column:24}},{start:{line:1082,column:28},end:{line:1082,column:30}}],line:1082},"187":{loc:{start:{line:1083,column:9},end:{line:1083,column:102}},type:"binary-expr",locations:[{start:{line:1083,column:9},end:{line:1083,column:11}},{start:{line:1083,column:16},end:{line:1083,column:101}}],line:1083},"188":{loc:{start:{line:1083,column:16},end:{line:1083,column:101}},type:"cond-expr",locations:[{start:{line:1083,column:87},end:{line:1083,column:92}},{start:{line:1083,column:95},end:{line:1083,column:101}}],line:1083},"189":{loc:{start:{line:1083,column:16},end:{line:1083,column:84}},type:"binary-expr",locations:[{start:{line:1083,column:16},end:{line:1083,column:49}},{start:{line:1083,column:53},end:{line:1083,column:84}}],line:1083},"190":{loc:{start:{line:1085,column:9},end:{line:1085,column:38}},type:"cond-expr",locations:[{start:{line:1085,column:26},end:{line:1085,column:33}},{start:{line:1085,column:36},end:{line:1085,column:38}}],line:1085},"191":{loc:{start:{line:1094,column:8},end:{line:1099,column:9}},type:"if",locations:[{start:{line:1094,column:8},end:{line:1099,column:9}},{start:{line:1094,column:8},end:{line:1099,column:9}}],line:1094},"192":{loc:{start:{line:1106,column:8},end:{line:1109,column:9}},type:"if",locations:[{start:{line:1106,column:8},end:{line:1109,column:9}},{start:{line:1106,column:8},end:{line:1109,column:9}}],line:1106},"193":{loc:{start:{line:1111,column:8},end:{line:1114,column:9}},type:"if",locations:[{start:{line:1111,column:8},end:{line:1114,column:9}},{start:{line:1111,column:8},end:{line:1114,column:9}}],line:1111},"194":{loc:{start:{line:1127,column:10},end:{line:1129,column:11}},type:"if",locations:[{start:{line:1127,column:10},end:{line:1129,column:11}},{start:{line:1127,column:10},end:{line:1129,column:11}}],line:1127},"195":{loc:{start:{line:1133,column:10},end:{line:1135,column:11}},type:"if",locations:[{start:{line:1133,column:10},end:{line:1135,column:11}},{start:{line:1133,column:10},end:{line:1135,column:11}}],line:1133},"196":{loc:{start:{line:1137,column:16},end:{line:1137,column:107}},type:"cond-expr",locations:[{start:{line:1137,column:27},end:{line:1137,column:44}},{start:{line:1137,column:47},end:{line:1137,column:107}}],line:1137},"197":{loc:{start:{line:1140,column:10},end:{line:1147,column:11}},type:"if",locations:[{start:{line:1140,column:10},end:{line:1147,column:11}},{start:{line:1140,column:10},end:{line:1147,column:11}}],line:1140},"198":{loc:{start:{line:1149,column:10},end:{line:1155,column:11}},type:"if",locations:[{start:{line:1149,column:10},end:{line:1155,column:11}},{start:{line:1149,column:10},end:{line:1155,column:11}}],line:1149},"199":{loc:{start:{line:1150,column:12},end:{line:1154,column:13}},type:"if",locations:[{start:{line:1150,column:12},end:{line:1154,column:13}},{start:{line:1150,column:12},end:{line:1154,column:13}}],line:1150},"200":{loc:{start:{line:1157,column:10},end:{line:1163,column:11}},type:"if",locations:[{start:{line:1157,column:10},end:{line:1163,column:11}},{start:{line:1157,column:10},end:{line:1163,column:11}}],line:1157},"201":{loc:{start:{line:1158,column:12},end:{line:1162,column:13}},type:"if",locations:[{start:{line:1158,column:12},end:{line:1162,column:13}},{start:{line:1158,column:12},end:{line:1162,column:13}}],line:1158},"202":{loc:{start:{line:1158,column:16},end:{line:1158,column:50}},type:"binary-expr",locations:[{start:{line:1158,column:16},end:{line:1158,column:31}},{start:{line:1158,column:35},end:{line:1158,column:50}}],line:1158},"203":{loc:{start:{line:1167,column:10},end:{line:1194,column:11}},type:"if",locations:[{start:{line:1167,column:10},end:{line:1194,column:11}},{start:{line:1167,column:10},end:{line:1194,column:11}}],line:1167},"204":{loc:{start:{line:1168,column:12},end:{line:1172,column:13}},type:"if",locations:[{start:{line:1168,column:12},end:{line:1172,column:13}},{start:{line:1168,column:12},end:{line:1172,column:13}}],line:1168},"205":{loc:{start:{line:1173,column:17},end:{line:1194,column:11}},type:"if",locations:[{start:{line:1173,column:17},end:{line:1194,column:11}},{start:{line:1173,column:17},end:{line:1194,column:11}}],line:1173},"206":{loc:{start:{line:1174,column:12},end:{line:1178,column:13}},type:"if",locations:[{start:{line:1174,column:12},end:{line:1178,column:13}},{start:{line:1174,column:12},end:{line:1178,column:13}}],line:1174},"207":{loc:{start:{line:1179,column:17},end:{line:1194,column:11}},type:"if",locations:[{start:{line:1179,column:17},end:{line:1194,column:11}},{start:{line:1179,column:17},end:{line:1194,column:11}}],line:1179},"208":{loc:{start:{line:1180,column:12},end:{line:1184,column:13}},type:"if",locations:[{start:{line:1180,column:12},end:{line:1184,column:13}},{start:{line:1180,column:12},end:{line:1184,column:13}}],line:1180},"209":{loc:{start:{line:1185,column:17},end:{line:1194,column:11}},type:"if",locations:[{start:{line:1185,column:17},end:{line:1194,column:11}},{start:{line:1185,column:17},end:{line:1194,column:11}}],line:1185},"210":{loc:{start:{line:1208,column:6},end:{line:1214,column:7}},type:"if",locations:[{start:{line:1208,column:6},end:{line:1214,column:7}},{start:{line:1208,column:6},end:{line:1214,column:7}}],line:1208},"211":{loc:{start:{line:1219,column:8},end:{line:1221,column:9}},type:"if",locations:[{start:{line:1219,column:8},end:{line:1221,column:9}},{start:{line:1219,column:8},end:{line:1221,column:9}}],line:1219},"212":{loc:{start:{line:1225,column:8},end:{line:1234,column:9}},type:"if",locations:[{start:{line:1225,column:8},end:{line:1234,column:9}},{start:{line:1225,column:8},end:{line:1234,column:9}}],line:1225},"213":{loc:{start:{line:1248,column:4},end:{line:1250,column:5}},type:"if",locations:[{start:{line:1248,column:4},end:{line:1250,column:5}},{start:{line:1248,column:4},end:{line:1250,column:5}}],line:1248},"214":{loc:{start:{line:1260,column:36},end:{line:1260,column:91}},type:"cond-expr",locations:[{start:{line:1260,column:76},end:{line:1260,column:82}},{start:{line:1260,column:85},end:{line:1260,column:91}}],line:1260},"215":{loc:{start:{line:1261,column:78},end:{line:1261,column:117}},type:"cond-expr",locations:[{start:{line:1261,column:112},end:{line:1261,column:113}},{start:{line:1261,column:116},end:{line:1261,column:117}}],line:1261},"216":{loc:{start:{line:1264,column:10},end:{line:1271,column:11}},type:"if",locations:[{start:{line:1264,column:10},end:{line:1271,column:11}},{start:{line:1264,column:10},end:{line:1271,column:11}}],line:1264},"217":{loc:{start:{line:1276,column:4},end:{line:1279,column:5}},type:"if",locations:[{start:{line:1276,column:4},end:{line:1279,column:5}},{start:{line:1276,column:4},end:{line:1279,column:5}}],line:1276},"218":{loc:{start:{line:1286,column:4},end:{line:1288,column:5}},type:"if",locations:[{start:{line:1286,column:4},end:{line:1288,column:5}},{start:{line:1286,column:4},end:{line:1288,column:5}}],line:1286},"219":{loc:{start:{line:1298,column:36},end:{line:1298,column:91}},type:"cond-expr",locations:[{start:{line:1298,column:76},end:{line:1298,column:82}},{start:{line:1298,column:85},end:{line:1298,column:91}}],line:1298},"220":{loc:{start:{line:1299,column:78},end:{line:1299,column:117}},type:"cond-expr",locations:[{start:{line:1299,column:112},end:{line:1299,column:113}},{start:{line:1299,column:116},end:{line:1299,column:117}}],line:1299},"221":{loc:{start:{line:1302,column:10},end:{line:1309,column:11}},type:"if",locations:[{start:{line:1302,column:10},end:{line:1309,column:11}},{start:{line:1302,column:10},end:{line:1309,column:11}}],line:1302},"222":{loc:{start:{line:1314,column:4},end:{line:1317,column:5}},type:"if",locations:[{start:{line:1314,column:4},end:{line:1317,column:5}},{start:{line:1314,column:4},end:{line:1317,column:5}}],line:1314},"223":{loc:{start:{line:1327,column:61},end:{line:1327,column:74}},type:"default-arg",locations:[{start:{line:1327,column:72},end:{line:1327,column:74}}],line:1327},"224":{loc:{start:{line:1330,column:4},end:{line:1332,column:5}},type:"if",locations:[{start:{line:1330,column:4},end:{line:1332,column:5}},{start:{line:1330,column:4},end:{line:1332,column:5}}],line:1330},"225":{loc:{start:{line:1336,column:13},end:{line:1336,column:52}},type:"binary-expr",locations:[{start:{line:1336,column:13},end:{line:1336,column:38}},{start:{line:1336,column:42},end:{line:1336,column:52}}],line:1336},"226":{loc:{start:{line:1338,column:21},end:{line:1338,column:108}},type:"cond-expr",locations:[{start:{line:1338,column:72},end:{line:1338,column:88}},{start:{line:1338,column:91},end:{line:1338,column:108}}],line:1338},"227":{loc:{start:{line:1341,column:4},end:{line:1343,column:5}},type:"if",locations:[{start:{line:1341,column:4},end:{line:1343,column:5}},{start:{line:1341,column:4},end:{line:1343,column:5}}],line:1341},"228":{loc:{start:{line:1341,column:8},end:{line:1341,column:58}},type:"binary-expr",locations:[{start:{line:1341,column:8},end:{line:1341,column:24}},{start:{line:1341,column:28},end:{line:1341,column:58}}],line:1341},"229":{loc:{start:{line:1345,column:4},end:{line:1351,column:5}},type:"if",locations:[{start:{line:1345,column:4},end:{line:1351,column:5}},{start:{line:1345,column:4},end:{line:1351,column:5}}],line:1345},"230":{loc:{start:{line:1347,column:8},end:{line:1349,column:9}},type:"if",locations:[{start:{line:1347,column:8},end:{line:1349,column:9}},{start:{line:1347,column:8},end:{line:1349,column:9}}],line:1347},"231":{loc:{start:{line:1354,column:4},end:{line:1411,column:5}},type:"if",locations:[{start:{line:1354,column:4},end:{line:1411,column:5}},{start:{line:1354,column:4},end:{line:1411,column:5}}],line:1354},"232":{loc:{start:{line:1358,column:6},end:{line:1360,column:7}},type:"if",locations:[{start:{line:1358,column:6},end:{line:1360,column:7}},{start:{line:1358,column:6},end:{line:1360,column:7}}],line:1358},"233":{loc:{start:{line:1370,column:26},end:{line:1370,column:175}},type:"cond-expr",locations:[{start:{line:1370,column:148},end:{line:1370,column:168}},{start:{line:1370,column:171},end:{line:1370,column:175}}],line:1370},"234":{loc:{start:{line:1370,column:26},end:{line:1370,column:145}},type:"binary-expr",locations:[{start:{line:1370,column:26},end:{line:1370,column:41}},{start:{line:1370,column:45},end:{line:1370,column:80}},{start:{line:1370,column:84},end:{line:1370,column:145}}],line:1370},"235":{loc:{start:{line:1373,column:8},end:{line:1394,column:9}},type:"if",locations:[{start:{line:1373,column:8},end:{line:1394,column:9}},{start:{line:1373,column:8},end:{line:1394,column:9}}],line:1373},"236":{loc:{start:{line:1378,column:15},end:{line:1394,column:9}},type:"if",locations:[{start:{line:1378,column:15},end:{line:1394,column:9}},{start:{line:1378,column:15},end:{line:1394,column:9}}],line:1378},"237":{loc:{start:{line:1385,column:15},end:{line:1394,column:9}},type:"if",locations:[{start:{line:1385,column:15},end:{line:1394,column:9}},{start:{line:1385,column:15},end:{line:1394,column:9}}],line:1385},"238":{loc:{start:{line:1397,column:8},end:{line:1401,column:9}},type:"if",locations:[{start:{line:1397,column:8},end:{line:1401,column:9}},{start:{line:1397,column:8},end:{line:1401,column:9}}],line:1397},"239":{loc:{start:{line:1406,column:13},end:{line:1408,column:8}},type:"cond-expr",locations:[{start:{line:1406,column:36},end:{line:1406,column:46}},{start:{line:1406,column:49},end:{line:1408,column:8}}],line:1406},"240":{loc:{start:{line:1414,column:40},end:{line:1414,column:50}},type:"default-arg",locations:[{start:{line:1414,column:48},end:{line:1414,column:50}}],line:1414},"241":{loc:{start:{line:1414,column:52},end:{line:1414,column:65}},type:"default-arg",locations:[{start:{line:1414,column:63},end:{line:1414,column:65}}],line:1414},"242":{loc:{start:{line:1414,column:67},end:{line:1414,column:76}},type:"default-arg",locations:[{start:{line:1414,column:74},end:{line:1414,column:76}}],line:1414},"243":{loc:{start:{line:1414,column:78},end:{line:1414,column:95}},type:"default-arg",locations:[{start:{line:1414,column:93},end:{line:1414,column:95}}],line:1414},"244":{loc:{start:{line:1416,column:4},end:{line:1416,column:28}},type:"if",locations:[{start:{line:1416,column:4},end:{line:1416,column:28}},{start:{line:1416,column:4},end:{line:1416,column:28}}],line:1416},"245":{loc:{start:{line:1418,column:4},end:{line:1418,column:38}},type:"if",locations:[{start:{line:1418,column:4},end:{line:1418,column:38}},{start:{line:1418,column:4},end:{line:1418,column:38}}],line:1418},"246":{loc:{start:{line:1419,column:4},end:{line:1419,column:59}},type:"if",locations:[{start:{line:1419,column:4},end:{line:1419,column:59}},{start:{line:1419,column:4},end:{line:1419,column:59}}],line:1419},"247":{loc:{start:{line:1431,column:19},end:{line:1431,column:39}},type:"binary-expr",locations:[{start:{line:1431,column:19},end:{line:1431,column:33}},{start:{line:1431,column:37},end:{line:1431,column:39}}],line:1431},"248":{loc:{start:{line:1440,column:6},end:{line:1453,column:7}},type:"if",locations:[{start:{line:1440,column:6},end:{line:1453,column:7}},{start:{line:1440,column:6},end:{line:1453,column:7}}],line:1440},"249":{loc:{start:{line:1441,column:8},end:{line:1450,column:9}},type:"if",locations:[{start:{line:1441,column:8},end:{line:1450,column:9}},{start:{line:1441,column:8},end:{line:1450,column:9}}],line:1441},"250":{loc:{start:{line:1444,column:10},end:{line:1449,column:11}},type:"if",locations:[{start:{line:1444,column:10},end:{line:1449,column:11}},{start:{line:1444,column:10},end:{line:1449,column:11}}],line:1444},"251":{loc:{start:{line:1446,column:12},end:{line:1446,column:66}},type:"binary-expr",locations:[{start:{line:1446,column:12},end:{line:1446,column:29}},{start:{line:1446,column:33},end:{line:1446,column:66}}],line:1446},"252":{loc:{start:{line:1456,column:6},end:{line:1459,column:7}},type:"if",locations:[{start:{line:1456,column:6},end:{line:1459,column:7}},{start:{line:1456,column:6},end:{line:1459,column:7}}],line:1456},"253":{loc:{start:{line:1461,column:6},end:{line:1472,column:7}},type:"if",locations:[{start:{line:1461,column:6},end:{line:1472,column:7}},{start:{line:1461,column:6},end:{line:1472,column:7}}],line:1461},"254":{loc:{start:{line:1462,column:8},end:{line:1466,column:9}},type:"if",locations:[{start:{line:1462,column:8},end:{line:1466,column:9}},{start:{line:1462,column:8},end:{line:1466,column:9}}],line:1462},"255":{loc:{start:{line:1468,column:8},end:{line:1471,column:9}},type:"if",locations:[{start:{line:1468,column:8},end:{line:1471,column:9}},{start:{line:1468,column:8},end:{line:1471,column:9}}],line:1468},"256":{loc:{start:{line:1468,column:12},end:{line:1468,column:49}},type:"binary-expr",locations:[{start:{line:1468,column:12},end:{line:1468,column:22}},{start:{line:1468,column:26},end:{line:1468,column:49}}],line:1468},"257":{loc:{start:{line:1476,column:4},end:{line:1482,column:5}},type:"if",locations:[{start:{line:1476,column:4},end:{line:1482,column:5}},{start:{line:1476,column:4},end:{line:1482,column:5}}],line:1476},"258":{loc:{start:{line:1479,column:6},end:{line:1481,column:7}},type:"if",locations:[{start:{line:1479,column:6},end:{line:1481,column:7}},{start:{line:1479,column:6},end:{line:1481,column:7}}],line:1479},"259":{loc:{start:{line:1485,column:4},end:{line:1487,column:5}},type:"if",locations:[{start:{line:1485,column:4},end:{line:1487,column:5}},{start:{line:1485,column:4},end:{line:1487,column:5}}],line:1485},"260":{loc:{start:{line:1490,column:6},end:{line:1492,column:7}},type:"if",locations:[{start:{line:1490,column:6},end:{line:1492,column:7}},{start:{line:1490,column:6},end:{line:1492,column:7}}],line:1490},"261":{loc:{start:{line:1498,column:6},end:{line:1500,column:7}},type:"if",locations:[{start:{line:1498,column:6},end:{line:1500,column:7}},{start:{line:1498,column:6},end:{line:1500,column:7}}],line:1498},"262":{loc:{start:{line:1512,column:4},end:{line:1514,column:5}},type:"if",locations:[{start:{line:1512,column:4},end:{line:1514,column:5}},{start:{line:1512,column:4},end:{line:1514,column:5}}],line:1512},"263":{loc:{start:{line:1522,column:4},end:{line:1524,column:5}},type:"if",locations:[{start:{line:1522,column:4},end:{line:1524,column:5}},{start:{line:1522,column:4},end:{line:1524,column:5}}],line:1522},"264":{loc:{start:{line:1549,column:4},end:{line:1551,column:5}},type:"if",locations:[{start:{line:1549,column:4},end:{line:1551,column:5}},{start:{line:1549,column:4},end:{line:1551,column:5}}],line:1549},"265":{loc:{start:{line:1584,column:4},end:{line:1597,column:5}},type:"if",locations:[{start:{line:1584,column:4},end:{line:1597,column:5}},{start:{line:1584,column:4},end:{line:1597,column:5}}],line:1584}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":0,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":0,"458":0,"459":0,"460":0,"461":0,"462":0,"463":0,"464":0,"465":0,"466":0,"467":0,"468":0,"469":0,"470":0,"471":0,"472":0,"473":0,"474":0,"475":0,"476":0,"477":0,"478":0,"479":0,"480":0,"481":0,"482":0,"483":0,"484":0,"485":0,"486":0,"487":0,"488":0,"489":0,"490":0,"491":0,"492":0,"493":0,"494":0,"495":0,"496":0,"497":0,"498":0,"499":0,"500":0,"501":0,"502":0,"503":0,"504":0,"505":0,"506":0,"507":0,"508":0,"509":0,"510":0,"511":0,"512":0,"513":0,"514":0,"515":0,"516":0,"517":0,"518":0,"519":0,"520":0,"521":0,"522":0,"523":0,"524":0,"525":0,"526":0,"527":0,"528":0,"529":0,"530":0,"531":0,"532":0,"533":0,"534":0,"535":0,"536":0,"537":0,"538":0,"539":0,"540":0,"541":0,"542":0,"543":0,"544":0,"545":0,"546":0,"547":0,"548":0,"549":0,"550":0,"551":0,"552":0,"553":0,"554":0,"555":0,"556":0,"557":0,"558":0,"559":0,"560":0,"561":0,"562":0,"563":0,"564":0,"565":0,"566":0,"567":0,"568":0,"569":0,"570":0,"571":0,"572":0,"573":0,"574":0,"575":0,"576":0,"577":0,"578":0,"579":0,"580":0,"581":0,"582":0,"583":0,"584":0,"585":0,"586":0,"587":0,"588":0,"589":0,"590":0,"591":0,"592":0,"593":0,"594":0,"595":0,"596":0,"597":0,"598":0,"599":0,"600":0,"601":0,"602":0,"603":0,"604":0,"605":0,"606":0,"607":0,"608":0,"609":0,"610":0,"611":0,"612":0,"613":0,"614":0,"615":0,"616":0,"617":0,"618":0,"619":0,"620":0,"621":0,"622":0,"623":0,"624":0,"625":0,"626":0,"627":0,"628":0,"629":0,"630":0,"631":0,"632":0,"633":0,"634":0,"635":0,"636":0,"637":0,"638":0,"639":0,"640":0,"641":0,"642":0,"643":0,"644":0,"645":0,"646":0,"647":0,"648":0,"649":0,"650":0,"651":0,"652":0,"653":0,"654":0,"655":0,"656":0,"657":0,"658":0,"659":0,"660":0,"661":0,"662":0,"663":0,"664":0,"665":0,"666":0,"667":0,"668":0,"669":0,"670":0,"671":0,"672":0,"673":0,"674":0,"675":0,"676":0,"677":0,"678":0,"679":0,"680":0,"681":0,"682":0,"683":0,"684":0,"685":0,"686":0,"687":0,"688":0,"689":0,"690":0,"691":0,"692":0,"693":0,"694":0,"695":0,"696":0,"697":0,"698":0,"699":0,"700":0,"701":0,"702":0,"703":0,"704":0,"705":0,"706":0,"707":0,"708":0,"709":0,"710":0,"711":0,"712":0,"713":0,"714":0,"715":0,"716":0,"717":0,"718":0,"719":0,"720":0,"721":0,"722":0,"723":0,"724":0,"725":0,"726":0,"727":0,"728":0,"729":0,"730":0,"731":0,"732":0,"733":0,"734":0,"735":0,"736":0,"737":0,"738":0,"739":0,"740":0,"741":0,"742":0,"743":0,"744":0,"745":0,"746":0,"747":0,"748":0,"749":0,"750":0,"751":0,"752":0,"753":0,"754":0,"755":0,"756":0,"757":0,"758":0,"759":0,"760":0,"761":0,"762":0,"763":0,"764":0,"765":0,"766":0,"767":0,"768":0,"769":0,"770":0,"771":0,"772":0,"773":0,"774":0,"775":0,"776":0,"777":0,"778":0,"779":0,"780":0,"781":0,"782":0,"783":0,"784":0,"785":0,"786":0,"787":0,"788":0,"789":0,"790":0,"791":0,"792":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0,0],"62":[0,0],"63":[0,0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0,0,0],"72":[0,0],"73":[0,0],"74":[0,0,0,0,0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0],"90":[0,0],"91":[0],"92":[0,0],"93":[0,0],"94":[0,0,0],"95":[0,0],"96":[0,0],"97":[0],"98":[0],"99":[0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0,0],"112":[0,0],"113":[0,0],"114":[0,0],"115":[0,0],"116":[0,0],"117":[0,0],"118":[0,0],"119":[0,0],"120":[0,0],"121":[0,0],"122":[0,0],"123":[0,0],"124":[0,0],"125":[0,0],"126":[0,0],"127":[0,0],"128":[0,0],"129":[0,0],"130":[0,0],"131":[0],"132":[0,0],"133":[0,0],"134":[0,0],"135":[0,0],"136":[0,0],"137":[0,0],"138":[0,0],"139":[0,0],"140":[0],"141":[0],"142":[0,0],"143":[0,0],"144":[0,0],"145":[0,0],"146":[0,0],"147":[0,0],"148":[0,0,0],"149":[0,0],"150":[0],"151":[0,0],"152":[0,0,0],"153":[0,0],"154":[0,0],"155":[0,0],"156":[0,0],"157":[0,0],"158":[0,0,0,0,0],"159":[0,0],"160":[0,0],"161":[0,0],"162":[0,0],"163":[0,0],"164":[0,0],"165":[0,0],"166":[0,0],"167":[0,0],"168":[0],"169":[0,0],"170":[0,0],"171":[0,0],"172":[0,0],"173":[0,0],"174":[0,0],"175":[0,0],"176":[0,0],"177":[0],"178":[0,0],"179":[0,0],"180":[0,0],"181":[0,0],"182":[0],"183":[0],"184":[0],"185":[0],"186":[0,0],"187":[0,0],"188":[0,0],"189":[0,0],"190":[0,0],"191":[0,0],"192":[0,0],"193":[0,0],"194":[0,0],"195":[0,0],"196":[0,0],"197":[0,0],"198":[0,0],"199":[0,0],"200":[0,0],"201":[0,0],"202":[0,0],"203":[0,0],"204":[0,0],"205":[0,0],"206":[0,0],"207":[0,0],"208":[0,0],"209":[0,0],"210":[0,0],"211":[0,0],"212":[0,0],"213":[0,0],"214":[0,0],"215":[0,0],"216":[0,0],"217":[0,0],"218":[0,0],"219":[0,0],"220":[0,0],"221":[0,0],"222":[0,0],"223":[0],"224":[0,0],"225":[0,0],"226":[0,0],"227":[0,0],"228":[0,0],"229":[0,0],"230":[0,0],"231":[0,0],"232":[0,0],"233":[0,0],"234":[0,0,0],"235":[0,0],"236":[0,0],"237":[0,0],"238":[0,0],"239":[0,0],"240":[0],"241":[0],"242":[0],"243":[0],"244":[0,0],"245":[0,0],"246":[0,0],"247":[0,0],"248":[0,0],"249":[0,0],"250":[0,0],"251":[0,0],"252":[0,0],"253":[0,0],"254":[0,0],"255":[0,0],"256":[0,0],"257":[0,0],"258":[0,0],"259":[0,0],"260":[0,0],"261":[0,0],"262":[0,0],"263":[0,0],"264":[0,0],"265":[0,0]},inputSourceMap:{version:3,sources:["../../src/Controllers/DatabaseController.js"],names:["addWriteACL","query","acl","newQuery","_","cloneDeep","_wperm","$in","addReadACL","_rperm","transformObjectACL","ACL","result","entry","read","push","write","specialQuerykeys","isSpecialQueryKey","key","indexOf","validateQuery","Parse","Error","INVALID_QUERY","$or","Array","forEach","$and","$nor","length","Object","keys","$regex","$options","match","INVALID_KEY_NAME","filterSensitiveData","isMaster","aclGroup","auth","operation","schema","className","protectedFields","object","userId","user","id","perms","getClassLevelPermissions","isReadOperation","protectedFieldsPointerPerm","filter","startsWith","map","substring","value","newProtectedFields","overrideProtectedFields","pointerPerm","pointerPermIncludesUser","readUserFieldValue","isArray","some","objectId","fields","v","includes","isUserClass","k","temporaryKeys","password","_hashed_password","sessionToken","_email_verify_token","_perishable_token","_perishable_token_expires_at","_tombstone","_email_verify_token_expires_at","_failed_login_count","_account_lockout_expires_at","_password_changed_at","_password_history","authData","specialKeysForUpdate","isSpecialUpdateKey","expandResultOnKeyPath","path","split","firstKey","nextPath","slice","join","sanitizeDatabaseResult","originalObject","response","Promise","resolve","keyUpdate","__op","joinTableName","flattenUpdateOperatorsForCreate","amount","INVALID_JSON","objects","COMMAND_UNAVAILABLE","transformAuthData","provider","providerData","fieldName","type","untransformObjectACL","output","getRootFieldName","relationSchema","relatedId","owningId","DatabaseController","constructor","adapter","schemaPromise","_transactionalSession","collectionExists","classExists","purgeCollection","loadSchema","then","schemaController","getOneSchema","deleteObjectsByQuery","validateClassName","SchemaController","classNameIsValid","reject","INVALID_CLASS_NAME","options","clearCache","load","loadSchemaIfNeeded","redirectClassNameForKey","t","getExpectedType","targetClass","validateObject","runOptions","undefined","s","canAddField","update","many","upsert","addsField","skipSanitization","validateOnly","validSchemaController","originalQuery","originalUpdate","relationUpdates","validatePermission","collectRelationUpdates","addPointerPermissions","catch","error","rootFieldName","fieldNameIsValid","updateOperation","innerKey","INVALID_NESTED_KEY","find","OBJECT_NOT_FOUND","updateObjectsByQuery","upsertOneObject","findOneAndUpdate","handleRelationUpdates","ops","deleteMe","process","op","x","pending","addRelation","removeRelation","all","fromClassName","fromId","toId","doc","code","destroy","parseFormatSchema","create","createdAt","iso","__type","updatedAt","enforceClassExists","createObject","convertSchemaToAdapterSchema","classSchema","schemaData","schemaFields","newKeys","field","action","deleteEverything","fast","SchemaCache","clear","deleteAllClasses","relatedIds","queryOptions","skip","limit","sort","findOptions","canSortOnJoinTables","_id","results","owningIds","reduceInRelation","ors","aQuery","index","ands","promises","queries","constraintKey","isNegation","r","q","ids","addNotInObjectIdsIds","addInObjectIdsIds","reduceRelationKeys","relatedTo","idsFromString","idsFromEq","idsFromIn","allIds","list","totalLength","reduce","memo","idsIntersection","intersect","big","$eq","idsFromNin","Set","$nin","count","distinct","pipeline","readPreference","hint","caseInsensitive","explain","_created_at","_updated_at","addProtectedFields","aggregate","INTERNAL_SERVER_ERROR","deleteSchema","deleteClass","wasParseCollection","relationFieldNames","name","del","reloadData","objectToEntriesStrings","entries","a","JSON","stringify","reduceOrOperation","repeat","i","j","shorter","longer","foundEntries","acc","shorterEntries","splice","reduceAndOperation","testPermissionsForClassName","userACL","groupKey","permFields","pointerFields","userPointer","fieldDescriptor","fieldType","prototype","hasOwnProperty","call","queryClause","$all","assign","preserveKeys","serverOnlyKeys","authenticated","roles","userRoles","protectedKeysSets","protectedKeys","next","createTransactionalSession","transactionalSession","commitTransactionalSession","abortTransactionalSession","performInitialization","VolatileClassesSchemas","requiredUserFields","defaultColumns","_Default","_User","requiredRoleFields","_Role","requiredIdempotencyFields","_Idempotency","MongoStorageAdapter","ensureUniqueness","logger","warn","ensureIndex","ttl","updateSchemaWithIndexes","module","exports","_validateQuery"],mappings:"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",sourcesContent:["\uFEFF// @flow\n// A database adapter that works with data exported from the hosted\n// Parse database.\n\n// @flow-disable-next\nimport { Parse } from 'parse/node';\n// @flow-disable-next\nimport _ from 'lodash';\n// @flow-disable-next\nimport intersect from 'intersect';\n// @flow-disable-next\nimport deepcopy from 'deepcopy';\nimport logger from '../logger';\nimport * as SchemaController from './SchemaController';\nimport { StorageAdapter } from '../Adapters/Storage/StorageAdapter';\nimport MongoStorageAdapter from '../Adapters/Storage/Mongo/MongoStorageAdapter';\nimport SchemaCache from '../Adapters/Cache/SchemaCache';\nimport type { LoadSchemaOptions } from './types';\nimport type { QueryOptions, FullQueryOptions } from '../Adapters/Storage/StorageAdapter';\n\nfunction addWriteACL(query, acl) {\n  const newQuery = _.cloneDeep(query);\n  //Can't be any existing '_wperm' query, we don't allow client queries on that, no need to $and\n  newQuery._wperm = { $in: [null, ...acl] };\n  return newQuery;\n}\n\nfunction addReadACL(query, acl) {\n  const newQuery = _.cloneDeep(query);\n  //Can't be any existing '_rperm' query, we don't allow client queries on that, no need to $and\n  newQuery._rperm = { $in: [null, '*', ...acl] };\n  return newQuery;\n}\n\n// Transforms a REST API formatted ACL object to our two-field mongo format.\nconst transformObjectACL = ({ ACL, ...result }) => {\n  if (!ACL) {\n    return result;\n  }\n\n  result._wperm = [];\n  result._rperm = [];\n\n  for (const entry in ACL) {\n    if (ACL[entry].read) {\n      result._rperm.push(entry);\n    }\n    if (ACL[entry].write) {\n      result._wperm.push(entry);\n    }\n  }\n  return result;\n};\n\nconst specialQuerykeys = [\n  '$and',\n  '$or',\n  '$nor',\n  '_rperm',\n  '_wperm',\n  '_perishable_token',\n  '_email_verify_token',\n  '_email_verify_token_expires_at',\n  '_account_lockout_expires_at',\n  '_failed_login_count',\n];\n\nconst isSpecialQueryKey = key => {\n  return specialQuerykeys.indexOf(key) >= 0;\n};\n\nconst validateQuery = (query: any): void => {\n  if (query.ACL) {\n    throw new Parse.Error(Parse.Error.INVALID_QUERY, 'Cannot query on ACL.');\n  }\n\n  if (query.$or) {\n    if (query.$or instanceof Array) {\n      query.$or.forEach(validateQuery);\n    } else {\n      throw new Parse.Error(Parse.Error.INVALID_QUERY, 'Bad $or format - use an array value.');\n    }\n  }\n\n  if (query.$and) {\n    if (query.$and instanceof Array) {\n      query.$and.forEach(validateQuery);\n    } else {\n      throw new Parse.Error(Parse.Error.INVALID_QUERY, 'Bad $and format - use an array value.');\n    }\n  }\n\n  if (query.$nor) {\n    if (query.$nor instanceof Array && query.$nor.length > 0) {\n      query.$nor.forEach(validateQuery);\n    } else {\n      throw new Parse.Error(\n        Parse.Error.INVALID_QUERY,\n        'Bad $nor format - use an array of at least 1 value.'\n      );\n    }\n  }\n\n  Object.keys(query).forEach(key => {\n    if (query && query[key] && query[key].$regex) {\n      if (typeof query[key].$options === 'string') {\n        if (!query[key].$options.match(/^[imxs]+$/)) {\n          throw new Parse.Error(\n            Parse.Error.INVALID_QUERY,\n            `Bad $options value for query: ${query[key].$options}`\n          );\n        }\n      }\n    }\n    if (!isSpecialQueryKey(key) && !key.match(/^[a-zA-Z][a-zA-Z0-9_\\.]*$/)) {\n      throw new Parse.Error(Parse.Error.INVALID_KEY_NAME, `Invalid key name: ${key}`);\n    }\n  });\n};\n\n// Filters out any data that shouldn't be on this REST-formatted object.\nconst filterSensitiveData = (\n  isMaster: boolean,\n  aclGroup: any[],\n  auth: any,\n  operation: any,\n  schema: SchemaController.SchemaController,\n  className: string,\n  protectedFields: null | Array<any>,\n  object: any\n) => {\n  let userId = null;\n  if (auth && auth.user) userId = auth.user.id;\n\n  // replace protectedFields when using pointer-permissions\n  const perms = schema.getClassLevelPermissions(className);\n  if (perms) {\n    const isReadOperation = ['get', 'find'].indexOf(operation) > -1;\n\n    if (isReadOperation && perms.protectedFields) {\n      // extract protectedFields added with the pointer-permission prefix\n      const protectedFieldsPointerPerm = Object.keys(perms.protectedFields)\n        .filter(key => key.startsWith('userField:'))\n        .map(key => {\n          return { key: key.substring(10), value: perms.protectedFields[key] };\n        });\n\n      const newProtectedFields: Array<string>[] = [];\n      let overrideProtectedFields = false;\n\n      // check if the object grants the current user access based on the extracted fields\n      protectedFieldsPointerPerm.forEach(pointerPerm => {\n        let pointerPermIncludesUser = false;\n        const readUserFieldValue = object[pointerPerm.key];\n        if (readUserFieldValue) {\n          if (Array.isArray(readUserFieldValue)) {\n            pointerPermIncludesUser = readUserFieldValue.some(\n              user => user.objectId && user.objectId === userId\n            );\n          } else {\n            pointerPermIncludesUser =\n              readUserFieldValue.objectId && readUserFieldValue.objectId === userId;\n          }\n        }\n\n        if (pointerPermIncludesUser) {\n          overrideProtectedFields = true;\n          newProtectedFields.push(pointerPerm.value);\n        }\n      });\n\n      // if at least one pointer-permission affected the current user\n      // intersect vs protectedFields from previous stage (@see addProtectedFields)\n      // Sets theory (intersections): A x (B x C) == (A x B) x C\n      if (overrideProtectedFields && protectedFields) {\n        newProtectedFields.push(protectedFields);\n      }\n      // intersect all sets of protectedFields\n      newProtectedFields.forEach(fields => {\n        if (fields) {\n          // if there're no protctedFields by other criteria ( id / role / auth)\n          // then we must intersect each set (per userField)\n          if (!protectedFields) {\n            protectedFields = fields;\n          } else {\n            protectedFields = protectedFields.filter(v => fields.includes(v));\n          }\n        }\n      });\n    }\n  }\n\n  const isUserClass = className === '_User';\n\n  /* special treat for the user class: don't filter protectedFields if currently loggedin user is\n  the retrieved user */\n  if (!(isUserClass && userId && object.objectId === userId)) {\n    protectedFields && protectedFields.forEach(k => delete object[k]);\n\n    // fields not requested by client (excluded),\n    //but were needed to apply protecttedFields\n    perms.protectedFields &&\n      perms.protectedFields.temporaryKeys &&\n      perms.protectedFields.temporaryKeys.forEach(k => delete object[k]);\n  }\n\n  if (!isUserClass) {\n    return object;\n  }\n\n  object.password = object._hashed_password;\n  delete object._hashed_password;\n\n  delete object.sessionToken;\n\n  if (isMaster) {\n    return object;\n  }\n  delete object._email_verify_token;\n  delete object._perishable_token;\n  delete object._perishable_token_expires_at;\n  delete object._tombstone;\n  delete object._email_verify_token_expires_at;\n  delete object._failed_login_count;\n  delete object._account_lockout_expires_at;\n  delete object._password_changed_at;\n  delete object._password_history;\n\n  if (aclGroup.indexOf(object.objectId) > -1) {\n    return object;\n  }\n  delete object.authData;\n  return object;\n};\n\n// Runs an update on the database.\n// Returns a promise for an object with the new values for field\n// modifications that don't know their results ahead of time, like\n// 'increment'.\n// Options:\n//   acl:  a list of strings. If the object to be updated has an ACL,\n//         one of the provided strings must provide the caller with\n//         write permissions.\nconst specialKeysForUpdate = [\n  '_hashed_password',\n  '_perishable_token',\n  '_email_verify_token',\n  '_email_verify_token_expires_at',\n  '_account_lockout_expires_at',\n  '_failed_login_count',\n  '_perishable_token_expires_at',\n  '_password_changed_at',\n  '_password_history',\n];\n\nconst isSpecialUpdateKey = key => {\n  return specialKeysForUpdate.indexOf(key) >= 0;\n};\n\nfunction expandResultOnKeyPath(object, key, value) {\n  if (key.indexOf('.') < 0) {\n    object[key] = value[key];\n    return object;\n  }\n  const path = key.split('.');\n  const firstKey = path[0];\n  const nextPath = path.slice(1).join('.');\n  object[firstKey] = expandResultOnKeyPath(object[firstKey] || {}, nextPath, value[firstKey]);\n  delete object[key];\n  return object;\n}\n\nfunction sanitizeDatabaseResult(originalObject, result): Promise<any> {\n  const response = {};\n  if (!result) {\n    return Promise.resolve(response);\n  }\n  Object.keys(originalObject).forEach(key => {\n    const keyUpdate = originalObject[key];\n    // determine if that was an op\n    if (\n      keyUpdate &&\n      typeof keyUpdate === 'object' &&\n      keyUpdate.__op &&\n      ['Add', 'AddUnique', 'Remove', 'Increment'].indexOf(keyUpdate.__op) > -1\n    ) {\n      // only valid ops that produce an actionable result\n      // the op may have happend on a keypath\n      expandResultOnKeyPath(response, key, result);\n    }\n  });\n  return Promise.resolve(response);\n}\n\nfunction joinTableName(className, key) {\n  return `_Join:${key}:${className}`;\n}\n\nconst flattenUpdateOperatorsForCreate = object => {\n  for (const key in object) {\n    if (object[key] && object[key].__op) {\n      switch (object[key].__op) {\n        case 'Increment':\n          if (typeof object[key].amount !== 'number') {\n            throw new Parse.Error(Parse.Error.INVALID_JSON, 'objects to add must be an array');\n          }\n          object[key] = object[key].amount;\n          break;\n        case 'Add':\n          if (!(object[key].objects instanceof Array)) {\n            throw new Parse.Error(Parse.Error.INVALID_JSON, 'objects to add must be an array');\n          }\n          object[key] = object[key].objects;\n          break;\n        case 'AddUnique':\n          if (!(object[key].objects instanceof Array)) {\n            throw new Parse.Error(Parse.Error.INVALID_JSON, 'objects to add must be an array');\n          }\n          object[key] = object[key].objects;\n          break;\n        case 'Remove':\n          if (!(object[key].objects instanceof Array)) {\n            throw new Parse.Error(Parse.Error.INVALID_JSON, 'objects to add must be an array');\n          }\n          object[key] = [];\n          break;\n        case 'Delete':\n          delete object[key];\n          break;\n        default:\n          throw new Parse.Error(\n            Parse.Error.COMMAND_UNAVAILABLE,\n            `The ${object[key].__op} operator is not supported yet.`\n          );\n      }\n    }\n  }\n};\n\nconst transformAuthData = (className, object, schema) => {\n  if (object.authData && className === '_User') {\n    Object.keys(object.authData).forEach(provider => {\n      const providerData = object.authData[provider];\n      const fieldName = `_auth_data_${provider}`;\n      if (providerData == null) {\n        object[fieldName] = {\n          __op: 'Delete',\n        };\n      } else {\n        object[fieldName] = providerData;\n        schema.fields[fieldName] = { type: 'Object' };\n      }\n    });\n    delete object.authData;\n  }\n};\n// Transforms a Database format ACL to a REST API format ACL\nconst untransformObjectACL = ({ _rperm, _wperm, ...output }) => {\n  if (_rperm || _wperm) {\n    output.ACL = {};\n\n    (_rperm || []).forEach(entry => {\n      if (!output.ACL[entry]) {\n        output.ACL[entry] = { read: true };\n      } else {\n        output.ACL[entry]['read'] = true;\n      }\n    });\n\n    (_wperm || []).forEach(entry => {\n      if (!output.ACL[entry]) {\n        output.ACL[entry] = { write: true };\n      } else {\n        output.ACL[entry]['write'] = true;\n      }\n    });\n  }\n  return output;\n};\n\n/**\n * When querying, the fieldName may be compound, extract the root fieldName\n *     `temperature.celsius` becomes `temperature`\n * @param {string} fieldName that may be a compound field name\n * @returns {string} the root name of the field\n */\nconst getRootFieldName = (fieldName: string): string => {\n  return fieldName.split('.')[0];\n};\n\nconst relationSchema = {\n  fields: { relatedId: { type: 'String' }, owningId: { type: 'String' } },\n};\n\nclass DatabaseController {\n  adapter: StorageAdapter;\n  schemaCache: any;\n  schemaPromise: ?Promise<SchemaController.SchemaController>;\n  _transactionalSession: ?any;\n\n  constructor(adapter: StorageAdapter) {\n    this.adapter = adapter;\n    // We don't want a mutable this.schema, because then you could have\n    // one request that uses different schemas for different parts of\n    // it. Instead, use loadSchema to get a schema.\n    this.schemaPromise = null;\n    this._transactionalSession = null;\n  }\n\n  collectionExists(className: string): Promise<boolean> {\n    return this.adapter.classExists(className);\n  }\n\n  purgeCollection(className: string): Promise<void> {\n    return this.loadSchema()\n      .then(schemaController => schemaController.getOneSchema(className))\n      .then(schema => this.adapter.deleteObjectsByQuery(className, schema, {}));\n  }\n\n  validateClassName(className: string): Promise<void> {\n    if (!SchemaController.classNameIsValid(className)) {\n      return Promise.reject(\n        new Parse.Error(Parse.Error.INVALID_CLASS_NAME, 'invalid className: ' + className)\n      );\n    }\n    return Promise.resolve();\n  }\n\n  // Returns a promise for a schemaController.\n  loadSchema(\n    options: LoadSchemaOptions = { clearCache: false }\n  ): Promise<SchemaController.SchemaController> {\n    if (this.schemaPromise != null) {\n      return this.schemaPromise;\n    }\n    this.schemaPromise = SchemaController.load(this.adapter, options);\n    this.schemaPromise.then(\n      () => delete this.schemaPromise,\n      () => delete this.schemaPromise\n    );\n    return this.loadSchema(options);\n  }\n\n  loadSchemaIfNeeded(\n    schemaController: SchemaController.SchemaController,\n    options: LoadSchemaOptions = { clearCache: false }\n  ): Promise<SchemaController.SchemaController> {\n    return schemaController ? Promise.resolve(schemaController) : this.loadSchema(options);\n  }\n\n  // Returns a promise for the classname that is related to the given\n  // classname through the key.\n  // TODO: make this not in the DatabaseController interface\n  redirectClassNameForKey(className: string, key: string): Promise<?string> {\n    return this.loadSchema().then(schema => {\n      var t = schema.getExpectedType(className, key);\n      if (t != null && typeof t !== 'string' && t.type === 'Relation') {\n        return t.targetClass;\n      }\n      return className;\n    });\n  }\n\n  // Uses the schema to validate the object (REST API format).\n  // Returns a promise that resolves to the new schema.\n  // This does not update this.schema, because in a situation like a\n  // batch request, that could confuse other users of the schema.\n  validateObject(\n    className: string,\n    object: any,\n    query: any,\n    runOptions: QueryOptions\n  ): Promise<boolean> {\n    let schema;\n    const acl = runOptions.acl;\n    const isMaster = acl === undefined;\n    var aclGroup: string[] = acl || [];\n    return this.loadSchema()\n      .then(s => {\n        schema = s;\n        if (isMaster) {\n          return Promise.resolve();\n        }\n        return this.canAddField(schema, className, object, aclGroup, runOptions);\n      })\n      .then(() => {\n        return schema.validateObject(className, object, query);\n      });\n  }\n\n  update(\n    className: string,\n    query: any,\n    update: any,\n    { acl, many, upsert, addsField }: FullQueryOptions = {},\n    skipSanitization: boolean = false,\n    validateOnly: boolean = false,\n    validSchemaController: SchemaController.SchemaController\n  ): Promise<any> {\n    const originalQuery = query;\n    const originalUpdate = update;\n    // Make a copy of the object, so we don't mutate the incoming data.\n    update = deepcopy(update);\n    var relationUpdates = [];\n    var isMaster = acl === undefined;\n    var aclGroup = acl || [];\n\n    return this.loadSchemaIfNeeded(validSchemaController).then(schemaController => {\n      return (isMaster\n        ? Promise.resolve()\n        : schemaController.validatePermission(className, aclGroup, 'update')\n      )\n        .then(() => {\n          relationUpdates = this.collectRelationUpdates(className, originalQuery.objectId, update);\n          if (!isMaster) {\n            query = this.addPointerPermissions(\n              schemaController,\n              className,\n              'update',\n              query,\n              aclGroup\n            );\n\n            if (addsField) {\n              query = {\n                $and: [\n                  query,\n                  this.addPointerPermissions(\n                    schemaController,\n                    className,\n                    'addField',\n                    query,\n                    aclGroup\n                  ),\n                ],\n              };\n            }\n          }\n          if (!query) {\n            return Promise.resolve();\n          }\n          if (acl) {\n            query = addWriteACL(query, acl);\n          }\n          validateQuery(query);\n          return schemaController\n            .getOneSchema(className, true)\n            .catch(error => {\n              // If the schema doesn't exist, pretend it exists with no fields. This behavior\n              // will likely need revisiting.\n              if (error === undefined) {\n                return { fields: {} };\n              }\n              throw error;\n            })\n            .then(schema => {\n              Object.keys(update).forEach(fieldName => {\n                if (fieldName.match(/^authData\\.([a-zA-Z0-9_]+)\\.id$/)) {\n                  throw new Parse.Error(\n                    Parse.Error.INVALID_KEY_NAME,\n                    `Invalid field name for update: ${fieldName}`\n                  );\n                }\n                const rootFieldName = getRootFieldName(fieldName);\n                if (\n                  !SchemaController.fieldNameIsValid(rootFieldName, className) &&\n                  !isSpecialUpdateKey(rootFieldName)\n                ) {\n                  throw new Parse.Error(\n                    Parse.Error.INVALID_KEY_NAME,\n                    `Invalid field name for update: ${fieldName}`\n                  );\n                }\n              });\n              for (const updateOperation in update) {\n                if (\n                  update[updateOperation] &&\n                  typeof update[updateOperation] === 'object' &&\n                  Object.keys(update[updateOperation]).some(\n                    innerKey => innerKey.includes('$') || innerKey.includes('.')\n                  )\n                ) {\n                  throw new Parse.Error(\n                    Parse.Error.INVALID_NESTED_KEY,\n                    \"Nested keys should not contain the '$' or '.' characters\"\n                  );\n                }\n              }\n              update = transformObjectACL(update);\n              transformAuthData(className, update, schema);\n              if (validateOnly) {\n                return this.adapter.find(className, schema, query, {}).then(result => {\n                  if (!result || !result.length) {\n                    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Object not found.');\n                  }\n                  return {};\n                });\n              }\n              if (many) {\n                return this.adapter.updateObjectsByQuery(\n                  className,\n                  schema,\n                  query,\n                  update,\n                  this._transactionalSession\n                );\n              } else if (upsert) {\n                return this.adapter.upsertOneObject(\n                  className,\n                  schema,\n                  query,\n                  update,\n                  this._transactionalSession\n                );\n              } else {\n                return this.adapter.findOneAndUpdate(\n                  className,\n                  schema,\n                  query,\n                  update,\n                  this._transactionalSession\n                );\n              }\n            });\n        })\n        .then((result: any) => {\n          if (!result) {\n            throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Object not found.');\n          }\n          if (validateOnly) {\n            return result;\n          }\n          return this.handleRelationUpdates(\n            className,\n            originalQuery.objectId,\n            update,\n            relationUpdates\n          ).then(() => {\n            return result;\n          });\n        })\n        .then(result => {\n          if (skipSanitization) {\n            return Promise.resolve(result);\n          }\n          return sanitizeDatabaseResult(originalUpdate, result);\n        });\n    });\n  }\n\n  // Collect all relation-updating operations from a REST-format update.\n  // Returns a list of all relation updates to perform\n  // This mutates update.\n  collectRelationUpdates(className: string, objectId: ?string, update: any) {\n    var ops = [];\n    var deleteMe = [];\n    objectId = update.objectId || objectId;\n\n    var process = (op, key) => {\n      if (!op) {\n        return;\n      }\n      if (op.__op == 'AddRelation') {\n        ops.push({ key, op });\n        deleteMe.push(key);\n      }\n\n      if (op.__op == 'RemoveRelation') {\n        ops.push({ key, op });\n        deleteMe.push(key);\n      }\n\n      if (op.__op == 'Batch') {\n        for (var x of op.ops) {\n          process(x, key);\n        }\n      }\n    };\n\n    for (const key in update) {\n      process(update[key], key);\n    }\n    for (const key of deleteMe) {\n      delete update[key];\n    }\n    return ops;\n  }\n\n  // Processes relation-updating operations from a REST-format update.\n  // Returns a promise that resolves when all updates have been performed\n  handleRelationUpdates(className: string, objectId: string, update: any, ops: any) {\n    var pending = [];\n    objectId = update.objectId || objectId;\n    ops.forEach(({ key, op }) => {\n      if (!op) {\n        return;\n      }\n      if (op.__op == 'AddRelation') {\n        for (const object of op.objects) {\n          pending.push(this.addRelation(key, className, objectId, object.objectId));\n        }\n      }\n\n      if (op.__op == 'RemoveRelation') {\n        for (const object of op.objects) {\n          pending.push(this.removeRelation(key, className, objectId, object.objectId));\n        }\n      }\n    });\n\n    return Promise.all(pending);\n  }\n\n  // Adds a relation.\n  // Returns a promise that resolves successfully iff the add was successful.\n  addRelation(key: string, fromClassName: string, fromId: string, toId: string) {\n    const doc = {\n      relatedId: toId,\n      owningId: fromId,\n    };\n    return this.adapter.upsertOneObject(\n      `_Join:${key}:${fromClassName}`,\n      relationSchema,\n      doc,\n      doc,\n      this._transactionalSession\n    );\n  }\n\n  // Removes a relation.\n  // Returns a promise that resolves successfully iff the remove was\n  // successful.\n  removeRelation(key: string, fromClassName: string, fromId: string, toId: string) {\n    var doc = {\n      relatedId: toId,\n      owningId: fromId,\n    };\n    return this.adapter\n      .deleteObjectsByQuery(\n        `_Join:${key}:${fromClassName}`,\n        relationSchema,\n        doc,\n        this._transactionalSession\n      )\n      .catch(error => {\n        // We don't care if they try to delete a non-existent relation.\n        if (error.code == Parse.Error.OBJECT_NOT_FOUND) {\n          return;\n        }\n        throw error;\n      });\n  }\n\n  // Removes objects matches this query from the database.\n  // Returns a promise that resolves successfully iff the object was\n  // deleted.\n  // Options:\n  //   acl:  a list of strings. If the object to be updated has an ACL,\n  //         one of the provided strings must provide the caller with\n  //         write permissions.\n  destroy(\n    className: string,\n    query: any,\n    { acl }: QueryOptions = {},\n    validSchemaController: SchemaController.SchemaController\n  ): Promise<any> {\n    const isMaster = acl === undefined;\n    const aclGroup = acl || [];\n\n    return this.loadSchemaIfNeeded(validSchemaController).then(schemaController => {\n      return (isMaster\n        ? Promise.resolve()\n        : schemaController.validatePermission(className, aclGroup, 'delete')\n      ).then(() => {\n        if (!isMaster) {\n          query = this.addPointerPermissions(\n            schemaController,\n            className,\n            'delete',\n            query,\n            aclGroup\n          );\n          if (!query) {\n            throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Object not found.');\n          }\n        }\n        // delete by query\n        if (acl) {\n          query = addWriteACL(query, acl);\n        }\n        validateQuery(query);\n        return schemaController\n          .getOneSchema(className)\n          .catch(error => {\n            // If the schema doesn't exist, pretend it exists with no fields. This behavior\n            // will likely need revisiting.\n            if (error === undefined) {\n              return { fields: {} };\n            }\n            throw error;\n          })\n          .then(parseFormatSchema =>\n            this.adapter.deleteObjectsByQuery(\n              className,\n              parseFormatSchema,\n              query,\n              this._transactionalSession\n            )\n          )\n          .catch(error => {\n            // When deleting sessions while changing passwords, don't throw an error if they don't have any sessions.\n            if (className === '_Session' && error.code === Parse.Error.OBJECT_NOT_FOUND) {\n              return Promise.resolve({});\n            }\n            throw error;\n          });\n      });\n    });\n  }\n\n  // Inserts an object into the database.\n  // Returns a promise that resolves successfully iff the object saved.\n  create(\n    className: string,\n    object: any,\n    { acl }: QueryOptions = {},\n    validateOnly: boolean = false,\n    validSchemaController: SchemaController.SchemaController\n  ): Promise<any> {\n    // Make a copy of the object, so we don't mutate the incoming data.\n    const originalObject = object;\n    object = transformObjectACL(object);\n\n    object.createdAt = { iso: object.createdAt, __type: 'Date' };\n    object.updatedAt = { iso: object.updatedAt, __type: 'Date' };\n\n    var isMaster = acl === undefined;\n    var aclGroup = acl || [];\n    const relationUpdates = this.collectRelationUpdates(className, null, object);\n\n    return this.validateClassName(className)\n      .then(() => this.loadSchemaIfNeeded(validSchemaController))\n      .then(schemaController => {\n        return (isMaster\n          ? Promise.resolve()\n          : schemaController.validatePermission(className, aclGroup, 'create')\n        )\n          .then(() => schemaController.enforceClassExists(className))\n          .then(() => schemaController.getOneSchema(className, true))\n          .then(schema => {\n            transformAuthData(className, object, schema);\n            flattenUpdateOperatorsForCreate(object);\n            if (validateOnly) {\n              return {};\n            }\n            return this.adapter.createObject(\n              className,\n              SchemaController.convertSchemaToAdapterSchema(schema),\n              object,\n              this._transactionalSession\n            );\n          })\n          .then(result => {\n            if (validateOnly) {\n              return originalObject;\n            }\n            return this.handleRelationUpdates(\n              className,\n              object.objectId,\n              object,\n              relationUpdates\n            ).then(() => {\n              return sanitizeDatabaseResult(originalObject, result.ops[0]);\n            });\n          });\n      });\n  }\n\n  canAddField(\n    schema: SchemaController.SchemaController,\n    className: string,\n    object: any,\n    aclGroup: string[],\n    runOptions: QueryOptions\n  ): Promise<void> {\n    const classSchema = schema.schemaData[className];\n    if (!classSchema) {\n      return Promise.resolve();\n    }\n    const fields = Object.keys(object);\n    const schemaFields = Object.keys(classSchema.fields);\n    const newKeys = fields.filter(field => {\n      // Skip fields that are unset\n      if (object[field] && object[field].__op && object[field].__op === 'Delete') {\n        return false;\n      }\n      return schemaFields.indexOf(getRootFieldName(field)) < 0;\n    });\n    if (newKeys.length > 0) {\n      // adds a marker that new field is being adding during update\n      runOptions.addsField = true;\n\n      const action = runOptions.action;\n      return schema.validatePermission(className, aclGroup, 'addField', action);\n    }\n    return Promise.resolve();\n  }\n\n  // Won't delete collections in the system namespace\n  /**\n   * Delete all classes and clears the schema cache\n   *\n   * @param {boolean} fast set to true if it's ok to just delete rows and not indexes\n   * @returns {Promise<void>} when the deletions completes\n   */\n  deleteEverything(fast: boolean = false): Promise<any> {\n    this.schemaPromise = null;\n    SchemaCache.clear();\n    return this.adapter.deleteAllClasses(fast);\n  }\n\n  // Returns a promise for a list of related ids given an owning id.\n  // className here is the owning className.\n  relatedIds(\n    className: string,\n    key: string,\n    owningId: string,\n    queryOptions: QueryOptions\n  ): Promise<Array<string>> {\n    const { skip, limit, sort } = queryOptions;\n    const findOptions = {};\n    if (sort && sort.createdAt && this.adapter.canSortOnJoinTables) {\n      findOptions.sort = { _id: sort.createdAt };\n      findOptions.limit = limit;\n      findOptions.skip = skip;\n      queryOptions.skip = 0;\n    }\n    return this.adapter\n      .find(joinTableName(className, key), relationSchema, { owningId }, findOptions)\n      .then(results => results.map(result => result.relatedId));\n  }\n\n  // Returns a promise for a list of owning ids given some related ids.\n  // className here is the owning className.\n  owningIds(className: string, key: string, relatedIds: string[]): Promise<string[]> {\n    return this.adapter\n      .find(\n        joinTableName(className, key),\n        relationSchema,\n        { relatedId: { $in: relatedIds } },\n        { keys: ['owningId'] }\n      )\n      .then(results => results.map(result => result.owningId));\n  }\n\n  // Modifies query so that it no longer has $in on relation fields, or\n  // equal-to-pointer constraints on relation fields.\n  // Returns a promise that resolves when query is mutated\n  reduceInRelation(className: string, query: any, schema: any): Promise<any> {\n    // Search for an in-relation or equal-to-relation\n    // Make it sequential for now, not sure of paralleization side effects\n    if (query['$or']) {\n      const ors = query['$or'];\n      return Promise.all(\n        ors.map((aQuery, index) => {\n          return this.reduceInRelation(className, aQuery, schema).then(aQuery => {\n            query['$or'][index] = aQuery;\n          });\n        })\n      ).then(() => {\n        return Promise.resolve(query);\n      });\n    }\n    if (query['$and']) {\n      const ands = query['$and'];\n      return Promise.all(\n        ands.map((aQuery, index) => {\n          return this.reduceInRelation(className, aQuery, schema).then(aQuery => {\n            query['$and'][index] = aQuery;\n          });\n        })\n      ).then(() => {\n        return Promise.resolve(query);\n      });\n    }\n\n    const promises = Object.keys(query).map(key => {\n      const t = schema.getExpectedType(className, key);\n      if (!t || t.type !== 'Relation') {\n        return Promise.resolve(query);\n      }\n      let queries: ?(any[]) = null;\n      if (\n        query[key] &&\n        (query[key]['$in'] ||\n          query[key]['$ne'] ||\n          query[key]['$nin'] ||\n          query[key].__type == 'Pointer')\n      ) {\n        // Build the list of queries\n        queries = Object.keys(query[key]).map(constraintKey => {\n          let relatedIds;\n          let isNegation = false;\n          if (constraintKey === 'objectId') {\n            relatedIds = [query[key].objectId];\n          } else if (constraintKey == '$in') {\n            relatedIds = query[key]['$in'].map(r => r.objectId);\n          } else if (constraintKey == '$nin') {\n            isNegation = true;\n            relatedIds = query[key]['$nin'].map(r => r.objectId);\n          } else if (constraintKey == '$ne') {\n            isNegation = true;\n            relatedIds = [query[key]['$ne'].objectId];\n          } else {\n            return;\n          }\n          return {\n            isNegation,\n            relatedIds,\n          };\n        });\n      } else {\n        queries = [{ isNegation: false, relatedIds: [] }];\n      }\n\n      // remove the current queryKey as we don,t need it anymore\n      delete query[key];\n      // execute each query independently to build the list of\n      // $in / $nin\n      const promises = queries.map(q => {\n        if (!q) {\n          return Promise.resolve();\n        }\n        return this.owningIds(className, key, q.relatedIds).then(ids => {\n          if (q.isNegation) {\n            this.addNotInObjectIdsIds(ids, query);\n          } else {\n            this.addInObjectIdsIds(ids, query);\n          }\n          return Promise.resolve();\n        });\n      });\n\n      return Promise.all(promises).then(() => {\n        return Promise.resolve();\n      });\n    });\n\n    return Promise.all(promises).then(() => {\n      return Promise.resolve(query);\n    });\n  }\n\n  // Modifies query so that it no longer has $relatedTo\n  // Returns a promise that resolves when query is mutated\n  reduceRelationKeys(className: string, query: any, queryOptions: any): ?Promise<void> {\n    if (query['$or']) {\n      return Promise.all(\n        query['$or'].map(aQuery => {\n          return this.reduceRelationKeys(className, aQuery, queryOptions);\n        })\n      );\n    }\n    if (query['$and']) {\n      return Promise.all(\n        query['$and'].map(aQuery => {\n          return this.reduceRelationKeys(className, aQuery, queryOptions);\n        })\n      );\n    }\n    var relatedTo = query['$relatedTo'];\n    if (relatedTo) {\n      return this.relatedIds(\n        relatedTo.object.className,\n        relatedTo.key,\n        relatedTo.object.objectId,\n        queryOptions\n      )\n        .then(ids => {\n          delete query['$relatedTo'];\n          this.addInObjectIdsIds(ids, query);\n          return this.reduceRelationKeys(className, query, queryOptions);\n        })\n        .then(() => {});\n    }\n  }\n\n  addInObjectIdsIds(ids: ?Array<string> = null, query: any) {\n    const idsFromString: ?Array<string> =\n      typeof query.objectId === 'string' ? [query.objectId] : null;\n    const idsFromEq: ?Array<string> =\n      query.objectId && query.objectId['$eq'] ? [query.objectId['$eq']] : null;\n    const idsFromIn: ?Array<string> =\n      query.objectId && query.objectId['$in'] ? query.objectId['$in'] : null;\n\n    // @flow-disable-next\n    const allIds: Array<Array<string>> = [idsFromString, idsFromEq, idsFromIn, ids].filter(\n      list => list !== null\n    );\n    const totalLength = allIds.reduce((memo, list) => memo + list.length, 0);\n\n    let idsIntersection = [];\n    if (totalLength > 125) {\n      idsIntersection = intersect.big(allIds);\n    } else {\n      idsIntersection = intersect(allIds);\n    }\n\n    // Need to make sure we don't clobber existing shorthand $eq constraints on objectId.\n    if (!('objectId' in query)) {\n      query.objectId = {\n        $in: undefined,\n      };\n    } else if (typeof query.objectId === 'string') {\n      query.objectId = {\n        $in: undefined,\n        $eq: query.objectId,\n      };\n    }\n    query.objectId['$in'] = idsIntersection;\n\n    return query;\n  }\n\n  addNotInObjectIdsIds(ids: string[] = [], query: any) {\n    const idsFromNin = query.objectId && query.objectId['$nin'] ? query.objectId['$nin'] : [];\n    let allIds = [...idsFromNin, ...ids].filter(list => list !== null);\n\n    // make a set and spread to remove duplicates\n    allIds = [...new Set(allIds)];\n\n    // Need to make sure we don't clobber existing shorthand $eq constraints on objectId.\n    if (!('objectId' in query)) {\n      query.objectId = {\n        $nin: undefined,\n      };\n    } else if (typeof query.objectId === 'string') {\n      query.objectId = {\n        $nin: undefined,\n        $eq: query.objectId,\n      };\n    }\n\n    query.objectId['$nin'] = allIds;\n    return query;\n  }\n\n  // Runs a query on the database.\n  // Returns a promise that resolves to a list of items.\n  // Options:\n  //   skip    number of results to skip.\n  //   limit   limit to this number of results.\n  //   sort    an object where keys are the fields to sort by.\n  //           the value is +1 for ascending, -1 for descending.\n  //   count   run a count instead of returning results.\n  //   acl     restrict this operation with an ACL for the provided array\n  //           of user objectIds and roles. acl: null means no user.\n  //           when this field is not present, don't do anything regarding ACLs.\n  //  caseInsensitive make string comparisons case insensitive\n  // TODO: make userIds not needed here. The db adapter shouldn't know\n  // anything about users, ideally. Then, improve the format of the ACL\n  // arg to work like the others.\n  find(\n    className: string,\n    query: any,\n    {\n      skip,\n      limit,\n      acl,\n      sort = {},\n      count,\n      keys,\n      op,\n      distinct,\n      pipeline,\n      readPreference,\n      hint,\n      caseInsensitive = false,\n      explain,\n    }: any = {},\n    auth: any = {},\n    validSchemaController: SchemaController.SchemaController\n  ): Promise<any> {\n    const isMaster = acl === undefined;\n    const aclGroup = acl || [];\n    op =\n      op || (typeof query.objectId == 'string' && Object.keys(query).length === 1 ? 'get' : 'find');\n    // Count operation if counting\n    op = count === true ? 'count' : op;\n\n    let classExists = true;\n    return this.loadSchemaIfNeeded(validSchemaController).then(schemaController => {\n      //Allow volatile classes if querying with Master (for _PushStatus)\n      //TODO: Move volatile classes concept into mongo adapter, postgres adapter shouldn't care\n      //that api.parse.com breaks when _PushStatus exists in mongo.\n      return schemaController\n        .getOneSchema(className, isMaster)\n        .catch(error => {\n          // Behavior for non-existent classes is kinda weird on Parse.com. Probably doesn't matter too much.\n          // For now, pretend the class exists but has no objects,\n          if (error === undefined) {\n            classExists = false;\n            return { fields: {} };\n          }\n          throw error;\n        })\n        .then(schema => {\n          // Parse.com treats queries on _created_at and _updated_at as if they were queries on createdAt and updatedAt,\n          // so duplicate that behavior here. If both are specified, the correct behavior to match Parse.com is to\n          // use the one that appears first in the sort list.\n          if (sort._created_at) {\n            sort.createdAt = sort._created_at;\n            delete sort._created_at;\n          }\n          if (sort._updated_at) {\n            sort.updatedAt = sort._updated_at;\n            delete sort._updated_at;\n          }\n          const queryOptions = {\n            skip,\n            limit,\n            sort,\n            keys,\n            readPreference,\n            hint,\n            caseInsensitive,\n            explain,\n          };\n          Object.keys(sort).forEach(fieldName => {\n            if (fieldName.match(/^authData\\.([a-zA-Z0-9_]+)\\.id$/)) {\n              throw new Parse.Error(Parse.Error.INVALID_KEY_NAME, `Cannot sort by ${fieldName}`);\n            }\n            const rootFieldName = getRootFieldName(fieldName);\n            if (!SchemaController.fieldNameIsValid(rootFieldName, className)) {\n              throw new Parse.Error(\n                Parse.Error.INVALID_KEY_NAME,\n                `Invalid field name: ${fieldName}.`\n              );\n            }\n          });\n          return (isMaster\n            ? Promise.resolve()\n            : schemaController.validatePermission(className, aclGroup, op)\n          )\n            .then(() => this.reduceRelationKeys(className, query, queryOptions))\n            .then(() => this.reduceInRelation(className, query, schemaController))\n            .then(() => {\n              let protectedFields;\n              if (!isMaster) {\n                query = this.addPointerPermissions(\n                  schemaController,\n                  className,\n                  op,\n                  query,\n                  aclGroup\n                );\n                /* Don't use projections to optimize the protectedFields since the protectedFields\n                  based on pointer-permissions are determined after querying. The filtering can\n                  overwrite the protected fields. */\n                protectedFields = this.addProtectedFields(\n                  schemaController,\n                  className,\n                  query,\n                  aclGroup,\n                  auth,\n                  queryOptions\n                );\n              }\n              if (!query) {\n                if (op === 'get') {\n                  throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Object not found.');\n                } else {\n                  return [];\n                }\n              }\n              if (!isMaster) {\n                if (op === 'update' || op === 'delete') {\n                  query = addWriteACL(query, aclGroup);\n                } else {\n                  query = addReadACL(query, aclGroup);\n                }\n              }\n              validateQuery(query);\n              if (count) {\n                if (!classExists) {\n                  return 0;\n                } else {\n                  return this.adapter.count(\n                    className,\n                    schema,\n                    query,\n                    readPreference,\n                    undefined,\n                    hint\n                  );\n                }\n              } else if (distinct) {\n                if (!classExists) {\n                  return [];\n                } else {\n                  return this.adapter.distinct(className, schema, query, distinct);\n                }\n              } else if (pipeline) {\n                if (!classExists) {\n                  return [];\n                } else {\n                  return this.adapter.aggregate(\n                    className,\n                    schema,\n                    pipeline,\n                    readPreference,\n                    hint,\n                    explain\n                  );\n                }\n              } else if (explain) {\n                return this.adapter.find(className, schema, query, queryOptions);\n              } else {\n                return this.adapter\n                  .find(className, schema, query, queryOptions)\n                  .then(objects =>\n                    objects.map(object => {\n                      object = untransformObjectACL(object);\n                      return filterSensitiveData(\n                        isMaster,\n                        aclGroup,\n                        auth,\n                        op,\n                        schemaController,\n                        className,\n                        protectedFields,\n                        object\n                      );\n                    })\n                  )\n                  .catch(error => {\n                    throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, error);\n                  });\n              }\n            });\n        });\n    });\n  }\n\n  deleteSchema(className: string): Promise<void> {\n    let schemaController;\n    return this.loadSchema({ clearCache: true })\n      .then(s => {\n        schemaController = s;\n        return schemaController.getOneSchema(className, true);\n      })\n      .catch(error => {\n        if (error === undefined) {\n          return { fields: {} };\n        } else {\n          throw error;\n        }\n      })\n      .then((schema: any) => {\n        return this.collectionExists(className)\n          .then(() => this.adapter.count(className, { fields: {} }, null, '', false))\n          .then(count => {\n            if (count > 0) {\n              throw new Parse.Error(\n                255,\n                `Class ${className} is not empty, contains ${count} objects, cannot drop schema.`\n              );\n            }\n            return this.adapter.deleteClass(className);\n          })\n          .then(wasParseCollection => {\n            if (wasParseCollection) {\n              const relationFieldNames = Object.keys(schema.fields).filter(\n                fieldName => schema.fields[fieldName].type === 'Relation'\n              );\n              return Promise.all(\n                relationFieldNames.map(name =>\n                  this.adapter.deleteClass(joinTableName(className, name))\n                )\n              ).then(() => {\n                SchemaCache.del(className);\n                return schemaController.reloadData();\n              });\n            } else {\n              return Promise.resolve();\n            }\n          });\n      });\n  }\n\n  // This helps to create intermediate objects for simpler comparison of\n  // key value pairs used in query objects. Each key value pair will represented\n  // in a similar way to json\n  objectToEntriesStrings(query: any): Array<string> {\n    return Object.entries(query).map(a => a.map(s => JSON.stringify(s)).join(':'));\n  }\n\n  // Naive logic reducer for OR operations meant to be used only for pointer permissions.\n  reduceOrOperation(query: { $or: Array<any> }): any {\n    if (!query.$or) {\n      return query;\n    }\n    const queries = query.$or.map(q => this.objectToEntriesStrings(q));\n    let repeat = false;\n    do {\n      repeat = false;\n      for (let i = 0; i < queries.length - 1; i++) {\n        for (let j = i + 1; j < queries.length; j++) {\n          const [shorter, longer] = queries[i].length > queries[j].length ? [j, i] : [i, j];\n          const foundEntries = queries[shorter].reduce(\n            (acc, entry) => acc + (queries[longer].includes(entry) ? 1 : 0),\n            0\n          );\n          const shorterEntries = queries[shorter].length;\n          if (foundEntries === shorterEntries) {\n            // If the shorter query is completely contained in the longer one, we can strike\n            // out the longer query.\n            query.$or.splice(longer, 1);\n            queries.splice(longer, 1);\n            repeat = true;\n            break;\n          }\n        }\n      }\n    } while (repeat);\n    if (query.$or.length === 1) {\n      query = { ...query, ...query.$or[0] };\n      delete query.$or;\n    }\n    return query;\n  }\n\n  // Naive logic reducer for AND operations meant to be used only for pointer permissions.\n  reduceAndOperation(query: { $and: Array<any> }): any {\n    if (!query.$and) {\n      return query;\n    }\n    const queries = query.$and.map(q => this.objectToEntriesStrings(q));\n    let repeat = false;\n    do {\n      repeat = false;\n      for (let i = 0; i < queries.length - 1; i++) {\n        for (let j = i + 1; j < queries.length; j++) {\n          const [shorter, longer] = queries[i].length > queries[j].length ? [j, i] : [i, j];\n          const foundEntries = queries[shorter].reduce(\n            (acc, entry) => acc + (queries[longer].includes(entry) ? 1 : 0),\n            0\n          );\n          const shorterEntries = queries[shorter].length;\n          if (foundEntries === shorterEntries) {\n            // If the shorter query is completely contained in the longer one, we can strike\n            // out the shorter query.\n            query.$and.splice(shorter, 1);\n            queries.splice(shorter, 1);\n            repeat = true;\n            break;\n          }\n        }\n      }\n    } while (repeat);\n    if (query.$and.length === 1) {\n      query = { ...query, ...query.$and[0] };\n      delete query.$and;\n    }\n    return query;\n  }\n\n  // Constraints query using CLP's pointer permissions (PP) if any.\n  // 1. Etract the user id from caller's ACLgroup;\n  // 2. Exctract a list of field names that are PP for target collection and operation;\n  // 3. Constraint the original query so that each PP field must\n  // point to caller's id (or contain it in case of PP field being an array)\n  addPointerPermissions(\n    schema: SchemaController.SchemaController,\n    className: string,\n    operation: string,\n    query: any,\n    aclGroup: any[] = []\n  ): any {\n    // Check if class has public permission for operation\n    // If the BaseCLP pass, let go through\n    if (schema.testPermissionsForClassName(className, aclGroup, operation)) {\n      return query;\n    }\n    const perms = schema.getClassLevelPermissions(className);\n\n    const userACL = aclGroup.filter(acl => {\n      return acl.indexOf('role:') != 0 && acl != '*';\n    });\n\n    const groupKey =\n      ['get', 'find', 'count'].indexOf(operation) > -1 ? 'readUserFields' : 'writeUserFields';\n\n    const permFields = [];\n\n    if (perms[operation] && perms[operation].pointerFields) {\n      permFields.push(...perms[operation].pointerFields);\n    }\n\n    if (perms[groupKey]) {\n      for (const field of perms[groupKey]) {\n        if (!permFields.includes(field)) {\n          permFields.push(field);\n        }\n      }\n    }\n    // the ACL should have exactly 1 user\n    if (permFields.length > 0) {\n      // the ACL should have exactly 1 user\n      // No user set return undefined\n      // If the length is > 1, that means we didn't de-dupe users correctly\n      if (userACL.length != 1) {\n        return;\n      }\n      const userId = userACL[0];\n      const userPointer = {\n        __type: 'Pointer',\n        className: '_User',\n        objectId: userId,\n      };\n\n      const queries = permFields.map(key => {\n        const fieldDescriptor = schema.getExpectedType(className, key);\n        const fieldType =\n          fieldDescriptor &&\n          typeof fieldDescriptor === 'object' &&\n          Object.prototype.hasOwnProperty.call(fieldDescriptor, 'type')\n            ? fieldDescriptor.type\n            : null;\n\n        let queryClause;\n\n        if (fieldType === 'Pointer') {\n          // constraint for single pointer setup\n          queryClause = { [key]: userPointer };\n        } else if (fieldType === 'Array') {\n          // constraint for users-array setup\n          queryClause = { [key]: { $all: [userPointer] } };\n        } else if (fieldType === 'Object') {\n          // constraint for object setup\n          queryClause = { [key]: userPointer };\n        } else {\n          // This means that there is a CLP field of an unexpected type. This condition should not happen, which is\n          // why is being treated as an error.\n          throw Error(\n            `An unexpected condition occurred when resolving pointer permissions: ${className} ${key}`\n          );\n        }\n        // if we already have a constraint on the key, use the $and\n        if (Object.prototype.hasOwnProperty.call(query, key)) {\n          return this.reduceAndOperation({ $and: [queryClause, query] });\n        }\n        // otherwise just add the constaint\n        return Object.assign({}, query, queryClause);\n      });\n\n      return queries.length === 1 ? queries[0] : this.reduceOrOperation({ $or: queries });\n    } else {\n      return query;\n    }\n  }\n\n  addProtectedFields(\n    schema: SchemaController.SchemaController,\n    className: string,\n    query: any = {},\n    aclGroup: any[] = [],\n    auth: any = {},\n    queryOptions: FullQueryOptions = {}\n  ): null | string[] {\n    const perms = schema.getClassLevelPermissions(className);\n    if (!perms) return null;\n\n    const protectedFields = perms.protectedFields;\n    if (!protectedFields) return null;\n\n    if (aclGroup.indexOf(query.objectId) > -1) return null;\n\n    // for queries where \"keys\" are set and do not include all 'userField':{field},\n    // we have to transparently include it, and then remove before returning to client\n    // Because if such key not projected the permission won't be enforced properly\n    // PS this is called when 'excludeKeys' already reduced to 'keys'\n    const preserveKeys = queryOptions.keys;\n\n    // these are keys that need to be included only\n    // to be able to apply protectedFields by pointer\n    // and then unset before returning to client (later in  filterSensitiveFields)\n    const serverOnlyKeys = [];\n\n    const authenticated = auth.user;\n\n    // map to allow check without array search\n    const roles = (auth.userRoles || []).reduce((acc, r) => {\n      acc[r] = protectedFields[r];\n      return acc;\n    }, {});\n\n    // array of sets of protected fields. separate item for each applicable criteria\n    const protectedKeysSets = [];\n\n    for (const key in protectedFields) {\n      // skip userFields\n      if (key.startsWith('userField:')) {\n        if (preserveKeys) {\n          const fieldName = key.substring(10);\n          if (!preserveKeys.includes(fieldName)) {\n            // 1. put it there temporarily\n            queryOptions.keys && queryOptions.keys.push(fieldName);\n            // 2. preserve it delete later\n            serverOnlyKeys.push(fieldName);\n          }\n        }\n        continue;\n      }\n\n      // add public tier\n      if (key === '*') {\n        protectedKeysSets.push(protectedFields[key]);\n        continue;\n      }\n\n      if (authenticated) {\n        if (key === 'authenticated') {\n          // for logged in users\n          protectedKeysSets.push(protectedFields[key]);\n          continue;\n        }\n\n        if (roles[key] && key.startsWith('role:')) {\n          // add applicable roles\n          protectedKeysSets.push(roles[key]);\n        }\n      }\n    }\n\n    // check if there's a rule for current user's id\n    if (authenticated) {\n      const userId = auth.user.id;\n      if (perms.protectedFields[userId]) {\n        protectedKeysSets.push(perms.protectedFields[userId]);\n      }\n    }\n\n    // preserve fields to be removed before sending response to client\n    if (serverOnlyKeys.length > 0) {\n      perms.protectedFields.temporaryKeys = serverOnlyKeys;\n    }\n\n    let protectedKeys = protectedKeysSets.reduce((acc, next) => {\n      if (next) {\n        acc.push(...next);\n      }\n      return acc;\n    }, []);\n\n    // intersect all sets of protectedFields\n    protectedKeysSets.forEach(fields => {\n      if (fields) {\n        protectedKeys = protectedKeys.filter(v => fields.includes(v));\n      }\n    });\n\n    return protectedKeys;\n  }\n\n  createTransactionalSession() {\n    return this.adapter.createTransactionalSession().then(transactionalSession => {\n      this._transactionalSession = transactionalSession;\n    });\n  }\n\n  commitTransactionalSession() {\n    if (!this._transactionalSession) {\n      throw new Error('There is no transactional session to commit');\n    }\n    return this.adapter.commitTransactionalSession(this._transactionalSession).then(() => {\n      this._transactionalSession = null;\n    });\n  }\n\n  abortTransactionalSession() {\n    if (!this._transactionalSession) {\n      throw new Error('There is no transactional session to abort');\n    }\n    return this.adapter.abortTransactionalSession(this._transactionalSession).then(() => {\n      this._transactionalSession = null;\n    });\n  }\n\n  // TODO: create indexes on first creation of a _User object. Otherwise it's impossible to\n  // have a Parse app without it having a _User collection.\n  async performInitialization() {\n    await this.adapter.performInitialization({\n      VolatileClassesSchemas: SchemaController.VolatileClassesSchemas,\n    });\n    const requiredUserFields = {\n      fields: {\n        ...SchemaController.defaultColumns._Default,\n        ...SchemaController.defaultColumns._User,\n      },\n    };\n    const requiredRoleFields = {\n      fields: {\n        ...SchemaController.defaultColumns._Default,\n        ...SchemaController.defaultColumns._Role,\n      },\n    };\n    const requiredIdempotencyFields = {\n      fields: {\n        ...SchemaController.defaultColumns._Default,\n        ...SchemaController.defaultColumns._Idempotency,\n      },\n    };\n    await this.loadSchema().then(schema => schema.enforceClassExists('_User'));\n    await this.loadSchema().then(schema => schema.enforceClassExists('_Role'));\n    if (this.adapter instanceof MongoStorageAdapter) {\n      await this.loadSchema().then(schema => schema.enforceClassExists('_Idempotency'));\n    }\n\n    await this.adapter.ensureUniqueness('_User', requiredUserFields, ['username']).catch(error => {\n      logger.warn('Unable to ensure uniqueness for usernames: ', error);\n      throw error;\n    });\n\n    await this.adapter\n      .ensureIndex('_User', requiredUserFields, ['username'], 'case_insensitive_username', true)\n      .catch(error => {\n        logger.warn('Unable to create case insensitive username index: ', error);\n        throw error;\n      });\n    await this.adapter\n      .ensureIndex('_User', requiredUserFields, ['username'], 'case_insensitive_username', true)\n      .catch(error => {\n        logger.warn('Unable to create case insensitive username index: ', error);\n        throw error;\n      });\n\n    await this.adapter.ensureUniqueness('_User', requiredUserFields, ['email']).catch(error => {\n      logger.warn('Unable to ensure uniqueness for user email addresses: ', error);\n      throw error;\n    });\n\n    await this.adapter\n      .ensureIndex('_User', requiredUserFields, ['email'], 'case_insensitive_email', true)\n      .catch(error => {\n        logger.warn('Unable to create case insensitive email index: ', error);\n        throw error;\n      });\n\n    await this.adapter.ensureUniqueness('_Role', requiredRoleFields, ['name']).catch(error => {\n      logger.warn('Unable to ensure uniqueness for role name: ', error);\n      throw error;\n    });\n    if (this.adapter instanceof MongoStorageAdapter) {\n      await this.adapter\n        .ensureUniqueness('_Idempotency', requiredIdempotencyFields, ['reqId'])\n        .catch(error => {\n          logger.warn('Unable to ensure uniqueness for idempotency request ID: ', error);\n          throw error;\n        });\n\n      await this.adapter\n        .ensureIndex('_Idempotency', requiredIdempotencyFields, ['expire'], 'ttl', false, {\n          ttl: 0,\n        })\n        .catch(error => {\n          logger.warn('Unable to create TTL index for idempotency expire date: ', error);\n          throw error;\n        });\n    }\n    await this.adapter.updateSchemaWithIndexes();\n  }\n\n  static _validateQuery: any => void;\n}\n\nmodule.exports = DatabaseController;\n// Expose validateQuery for tests\nmodule.exports._validateQuery = validateQuery;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"a11e3b3456bad0c38467f9be0d8d5a82b92bdbbe"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_cxckea6v3=function(){return actualCoverage;};}return actualCoverage;}cov_cxckea6v3();var _node=(cov_cxckea6v3().s[0]++,require("parse/node"));var _lodash=(cov_cxckea6v3().s[1]++,_interopRequireDefault(require("lodash")));var _intersect=(cov_cxckea6v3().s[2]++,_interopRequireDefault(require("intersect")));var _deepcopy=(cov_cxckea6v3().s[3]++,_interopRequireDefault(require("deepcopy")));var _logger=(cov_cxckea6v3().s[4]++,_interopRequireDefault(require("../logger")));var SchemaController=(cov_cxckea6v3().s[5]++,_interopRequireWildcard(require("./SchemaController")));var _StorageAdapter=(cov_cxckea6v3().s[6]++,require("../Adapters/Storage/StorageAdapter"));var _MongoStorageAdapter=(cov_cxckea6v3().s[7]++,_interopRequireDefault(require("../Adapters/Storage/Mongo/MongoStorageAdapter")));var _SchemaCache=(cov_cxckea6v3().s[8]++,_interopRequireDefault(require("../Adapters/Cache/SchemaCache")));function _getRequireWildcardCache(nodeInterop){cov_cxckea6v3().f[0]++;cov_cxckea6v3().s[9]++;if(typeof WeakMap!=="function"){cov_cxckea6v3().b[0][0]++;cov_cxckea6v3().s[10]++;return null;}else{cov_cxckea6v3().b[0][1]++;}var cacheBabelInterop=(cov_cxckea6v3().s[11]++,new WeakMap());var cacheNodeInterop=(cov_cxckea6v3().s[12]++,new WeakMap());cov_cxckea6v3().s[13]++;return(_getRequireWildcardCache=function(nodeInterop){cov_cxckea6v3().f[1]++;cov_cxckea6v3().s[14]++;return nodeInterop?(cov_cxckea6v3().b[1][0]++,cacheNodeInterop):(cov_cxckea6v3().b[1][1]++,cacheBabelInterop);})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){cov_cxckea6v3().f[2]++;cov_cxckea6v3().s[15]++;if((cov_cxckea6v3().b[3][0]++,!nodeInterop)&&(cov_cxckea6v3().b[3][1]++,obj)&&(cov_cxckea6v3().b[3][2]++,obj.__esModule)){cov_cxckea6v3().b[2][0]++;cov_cxckea6v3().s[16]++;return obj;}else{cov_cxckea6v3().b[2][1]++;}cov_cxckea6v3().s[17]++;if((cov_cxckea6v3().b[5][0]++,obj===null)||(cov_cxckea6v3().b[5][1]++,typeof obj!=="object")&&(cov_cxckea6v3().b[5][2]++,typeof obj!=="function")){cov_cxckea6v3().b[4][0]++;cov_cxckea6v3().s[18]++;return{default:obj};}else{cov_cxckea6v3().b[4][1]++;}var cache=(cov_cxckea6v3().s[19]++,_getRequireWildcardCache(nodeInterop));cov_cxckea6v3().s[20]++;if((cov_cxckea6v3().b[7][0]++,cache)&&(cov_cxckea6v3().b[7][1]++,cache.has(obj))){cov_cxckea6v3().b[6][0]++;cov_cxckea6v3().s[21]++;return cache.get(obj);}else{cov_cxckea6v3().b[6][1]++;}var newObj=(cov_cxckea6v3().s[22]++,{});var hasPropertyDescriptor=(cov_cxckea6v3().s[23]++,(cov_cxckea6v3().b[8][0]++,Object.defineProperty)&&(cov_cxckea6v3().b[8][1]++,Object.getOwnPropertyDescriptor));cov_cxckea6v3().s[24]++;for(var key in obj){cov_cxckea6v3().s[25]++;if((cov_cxckea6v3().b[10][0]++,key!=="default")&&(cov_cxckea6v3().b[10][1]++,Object.prototype.hasOwnProperty.call(obj,key))){cov_cxckea6v3().b[9][0]++;var desc=(cov_cxckea6v3().s[26]++,hasPropertyDescriptor?(cov_cxckea6v3().b[11][0]++,Object.getOwnPropertyDescriptor(obj,key)):(cov_cxckea6v3().b[11][1]++,null));cov_cxckea6v3().s[27]++;if((cov_cxckea6v3().b[13][0]++,desc)&&((cov_cxckea6v3().b[13][1]++,desc.get)||(cov_cxckea6v3().b[13][2]++,desc.set))){cov_cxckea6v3().b[12][0]++;cov_cxckea6v3().s[28]++;Object.defineProperty(newObj,key,desc);}else{cov_cxckea6v3().b[12][1]++;cov_cxckea6v3().s[29]++;newObj[key]=obj[key];}}else{cov_cxckea6v3().b[9][1]++;}}cov_cxckea6v3().s[30]++;newObj.default=obj;cov_cxckea6v3().s[31]++;if(cache){cov_cxckea6v3().b[14][0]++;cov_cxckea6v3().s[32]++;cache.set(obj,newObj);}else{cov_cxckea6v3().b[14][1]++;}cov_cxckea6v3().s[33]++;return newObj;}function _interopRequireDefault(obj){cov_cxckea6v3().f[3]++;cov_cxckea6v3().s[34]++;return(cov_cxckea6v3().b[16][0]++,obj)&&(cov_cxckea6v3().b[16][1]++,obj.__esModule)?(cov_cxckea6v3().b[15][0]++,obj):(cov_cxckea6v3().b[15][1]++,{default:obj});}function ownKeys(object,enumerableOnly){cov_cxckea6v3().f[4]++;var keys=(cov_cxckea6v3().s[35]++,Object.keys(object));cov_cxckea6v3().s[36]++;if(Object.getOwnPropertySymbols){cov_cxckea6v3().b[17][0]++;var symbols=(cov_cxckea6v3().s[37]++,Object.getOwnPropertySymbols(object));cov_cxckea6v3().s[38]++;if(enumerableOnly){cov_cxckea6v3().b[18][0]++;cov_cxckea6v3().s[39]++;symbols=symbols.filter(function(sym){cov_cxckea6v3().f[5]++;cov_cxckea6v3().s[40]++;return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}else{cov_cxckea6v3().b[18][1]++;}cov_cxckea6v3().s[41]++;keys.push.apply(keys,symbols);}else{cov_cxckea6v3().b[17][1]++;}cov_cxckea6v3().s[42]++;return keys;}function _objectSpread(target){cov_cxckea6v3().f[6]++;cov_cxckea6v3().s[43]++;for(var i=(cov_cxckea6v3().s[44]++,1);i<arguments.length;i++){var source=(cov_cxckea6v3().s[45]++,arguments[i]!=null?(cov_cxckea6v3().b[19][0]++,arguments[i]):(cov_cxckea6v3().b[19][1]++,{}));cov_cxckea6v3().s[46]++;if(i%2){cov_cxckea6v3().b[20][0]++;cov_cxckea6v3().s[47]++;ownKeys(Object(source),true).forEach(function(key){cov_cxckea6v3().f[7]++;cov_cxckea6v3().s[48]++;_defineProperty(target,key,source[key]);});}else{cov_cxckea6v3().b[20][1]++;cov_cxckea6v3().s[49]++;if(Object.getOwnPropertyDescriptors){cov_cxckea6v3().b[21][0]++;cov_cxckea6v3().s[50]++;Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{cov_cxckea6v3().b[21][1]++;cov_cxckea6v3().s[51]++;ownKeys(Object(source)).forEach(function(key){cov_cxckea6v3().f[8]++;cov_cxckea6v3().s[52]++;Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}}cov_cxckea6v3().s[53]++;return target;}function _defineProperty(obj,key,value){cov_cxckea6v3().f[9]++;cov_cxckea6v3().s[54]++;if(key in obj){cov_cxckea6v3().b[22][0]++;cov_cxckea6v3().s[55]++;Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{cov_cxckea6v3().b[22][1]++;cov_cxckea6v3().s[56]++;obj[key]=value;}cov_cxckea6v3().s[57]++;return obj;}function _objectWithoutProperties(source,excluded){cov_cxckea6v3().f[10]++;cov_cxckea6v3().s[58]++;if(source==null){cov_cxckea6v3().b[23][0]++;cov_cxckea6v3().s[59]++;return{};}else{cov_cxckea6v3().b[23][1]++;}var target=(cov_cxckea6v3().s[60]++,_objectWithoutPropertiesLoose(source,excluded));var key,i;cov_cxckea6v3().s[61]++;if(Object.getOwnPropertySymbols){cov_cxckea6v3().b[24][0]++;var sourceSymbolKeys=(cov_cxckea6v3().s[62]++,Object.getOwnPropertySymbols(source));cov_cxckea6v3().s[63]++;for(i=0;i<sourceSymbolKeys.length;i++){cov_cxckea6v3().s[64]++;key=sourceSymbolKeys[i];cov_cxckea6v3().s[65]++;if(excluded.indexOf(key)>=0){cov_cxckea6v3().b[25][0]++;cov_cxckea6v3().s[66]++;continue;}else{cov_cxckea6v3().b[25][1]++;}cov_cxckea6v3().s[67]++;if(!Object.prototype.propertyIsEnumerable.call(source,key)){cov_cxckea6v3().b[26][0]++;cov_cxckea6v3().s[68]++;continue;}else{cov_cxckea6v3().b[26][1]++;}cov_cxckea6v3().s[69]++;target[key]=source[key];}}else{cov_cxckea6v3().b[24][1]++;}cov_cxckea6v3().s[70]++;return target;}function _objectWithoutPropertiesLoose(source,excluded){cov_cxckea6v3().f[11]++;cov_cxckea6v3().s[71]++;if(source==null){cov_cxckea6v3().b[27][0]++;cov_cxckea6v3().s[72]++;return{};}else{cov_cxckea6v3().b[27][1]++;}var target=(cov_cxckea6v3().s[73]++,{});var sourceKeys=(cov_cxckea6v3().s[74]++,Object.keys(source));var key,i;cov_cxckea6v3().s[75]++;for(i=0;i<sourceKeys.length;i++){cov_cxckea6v3().s[76]++;key=sourceKeys[i];cov_cxckea6v3().s[77]++;if(excluded.indexOf(key)>=0){cov_cxckea6v3().b[28][0]++;cov_cxckea6v3().s[78]++;continue;}else{cov_cxckea6v3().b[28][1]++;}cov_cxckea6v3().s[79]++;target[key]=source[key];}cov_cxckea6v3().s[80]++;return target;}function addWriteACL(query,acl){cov_cxckea6v3().f[12]++;const newQuery=(cov_cxckea6v3().s[81]++,_lodash.default.cloneDeep(query));//Can't be any existing '_wperm' query, we don't allow client queries on that, no need to $and
cov_cxckea6v3().s[82]++;newQuery._wperm={$in:[null,...acl]};cov_cxckea6v3().s[83]++;return newQuery;}function addReadACL(query,acl){cov_cxckea6v3().f[13]++;const newQuery=(cov_cxckea6v3().s[84]++,_lodash.default.cloneDeep(query));//Can't be any existing '_rperm' query, we don't allow client queries on that, no need to $and
cov_cxckea6v3().s[85]++;newQuery._rperm={$in:[null,'*',...acl]};cov_cxckea6v3().s[86]++;return newQuery;}// Transforms a REST API formatted ACL object to our two-field mongo format.
cov_cxckea6v3().s[87]++;const transformObjectACL=_ref=>{cov_cxckea6v3().f[14]++;let{ACL}=(cov_cxckea6v3().s[88]++,_ref),result=(cov_cxckea6v3().s[89]++,_objectWithoutProperties(_ref,["ACL"]));cov_cxckea6v3().s[90]++;if(!ACL){cov_cxckea6v3().b[29][0]++;cov_cxckea6v3().s[91]++;return result;}else{cov_cxckea6v3().b[29][1]++;}cov_cxckea6v3().s[92]++;result._wperm=[];cov_cxckea6v3().s[93]++;result._rperm=[];cov_cxckea6v3().s[94]++;for(const entry in ACL){cov_cxckea6v3().s[95]++;if(ACL[entry].read){cov_cxckea6v3().b[30][0]++;cov_cxckea6v3().s[96]++;result._rperm.push(entry);}else{cov_cxckea6v3().b[30][1]++;}cov_cxckea6v3().s[97]++;if(ACL[entry].write){cov_cxckea6v3().b[31][0]++;cov_cxckea6v3().s[98]++;result._wperm.push(entry);}else{cov_cxckea6v3().b[31][1]++;}}cov_cxckea6v3().s[99]++;return result;};const specialQuerykeys=(cov_cxckea6v3().s[100]++,['$and','$or','$nor','_rperm','_wperm','_perishable_token','_email_verify_token','_email_verify_token_expires_at','_account_lockout_expires_at','_failed_login_count']);cov_cxckea6v3().s[101]++;const isSpecialQueryKey=key=>{cov_cxckea6v3().f[15]++;cov_cxckea6v3().s[102]++;return specialQuerykeys.indexOf(key)>=0;};cov_cxckea6v3().s[103]++;const validateQuery=query=>{cov_cxckea6v3().f[16]++;cov_cxckea6v3().s[104]++;if(query.ACL){cov_cxckea6v3().b[32][0]++;cov_cxckea6v3().s[105]++;throw new _node.Parse.Error(_node.Parse.Error.INVALID_QUERY,'Cannot query on ACL.');}else{cov_cxckea6v3().b[32][1]++;}cov_cxckea6v3().s[106]++;if(query.$or){cov_cxckea6v3().b[33][0]++;cov_cxckea6v3().s[107]++;if(query.$or instanceof Array){cov_cxckea6v3().b[34][0]++;cov_cxckea6v3().s[108]++;query.$or.forEach(validateQuery);}else{cov_cxckea6v3().b[34][1]++;cov_cxckea6v3().s[109]++;throw new _node.Parse.Error(_node.Parse.Error.INVALID_QUERY,'Bad $or format - use an array value.');}}else{cov_cxckea6v3().b[33][1]++;}cov_cxckea6v3().s[110]++;if(query.$and){cov_cxckea6v3().b[35][0]++;cov_cxckea6v3().s[111]++;if(query.$and instanceof Array){cov_cxckea6v3().b[36][0]++;cov_cxckea6v3().s[112]++;query.$and.forEach(validateQuery);}else{cov_cxckea6v3().b[36][1]++;cov_cxckea6v3().s[113]++;throw new _node.Parse.Error(_node.Parse.Error.INVALID_QUERY,'Bad $and format - use an array value.');}}else{cov_cxckea6v3().b[35][1]++;}cov_cxckea6v3().s[114]++;if(query.$nor){cov_cxckea6v3().b[37][0]++;cov_cxckea6v3().s[115]++;if((cov_cxckea6v3().b[39][0]++,query.$nor instanceof Array)&&(cov_cxckea6v3().b[39][1]++,query.$nor.length>0)){cov_cxckea6v3().b[38][0]++;cov_cxckea6v3().s[116]++;query.$nor.forEach(validateQuery);}else{cov_cxckea6v3().b[38][1]++;cov_cxckea6v3().s[117]++;throw new _node.Parse.Error(_node.Parse.Error.INVALID_QUERY,'Bad $nor format - use an array of at least 1 value.');}}else{cov_cxckea6v3().b[37][1]++;}cov_cxckea6v3().s[118]++;Object.keys(query).forEach(key=>{cov_cxckea6v3().f[17]++;cov_cxckea6v3().s[119]++;if((cov_cxckea6v3().b[41][0]++,query)&&(cov_cxckea6v3().b[41][1]++,query[key])&&(cov_cxckea6v3().b[41][2]++,query[key].$regex)){cov_cxckea6v3().b[40][0]++;cov_cxckea6v3().s[120]++;if(typeof query[key].$options==='string'){cov_cxckea6v3().b[42][0]++;cov_cxckea6v3().s[121]++;if(!query[key].$options.match(/^[imxs]+$/)){cov_cxckea6v3().b[43][0]++;cov_cxckea6v3().s[122]++;throw new _node.Parse.Error(_node.Parse.Error.INVALID_QUERY,`Bad $options value for query: ${query[key].$options}`);}else{cov_cxckea6v3().b[43][1]++;}}else{cov_cxckea6v3().b[42][1]++;}}else{cov_cxckea6v3().b[40][1]++;}cov_cxckea6v3().s[123]++;if((cov_cxckea6v3().b[45][0]++,!isSpecialQueryKey(key))&&(cov_cxckea6v3().b[45][1]++,!key.match(/^[a-zA-Z][a-zA-Z0-9_\.]*$/))){cov_cxckea6v3().b[44][0]++;cov_cxckea6v3().s[124]++;throw new _node.Parse.Error(_node.Parse.Error.INVALID_KEY_NAME,`Invalid key name: ${key}`);}else{cov_cxckea6v3().b[44][1]++;}});};// Filters out any data that shouldn't be on this REST-formatted object.
cov_cxckea6v3().s[125]++;const filterSensitiveData=(isMaster,aclGroup,auth,operation,schema,className,protectedFields,object)=>{cov_cxckea6v3().f[18]++;let userId=(cov_cxckea6v3().s[126]++,null);cov_cxckea6v3().s[127]++;if((cov_cxckea6v3().b[47][0]++,auth)&&(cov_cxckea6v3().b[47][1]++,auth.user)){cov_cxckea6v3().b[46][0]++;cov_cxckea6v3().s[128]++;userId=auth.user.id;}else{cov_cxckea6v3().b[46][1]++;}// replace protectedFields when using pointer-permissions
const perms=(cov_cxckea6v3().s[129]++,schema.getClassLevelPermissions(className));cov_cxckea6v3().s[130]++;if(perms){cov_cxckea6v3().b[48][0]++;const isReadOperation=(cov_cxckea6v3().s[131]++,['get','find'].indexOf(operation)>-1);cov_cxckea6v3().s[132]++;if((cov_cxckea6v3().b[50][0]++,isReadOperation)&&(cov_cxckea6v3().b[50][1]++,perms.protectedFields)){cov_cxckea6v3().b[49][0]++;// extract protectedFields added with the pointer-permission prefix
const protectedFieldsPointerPerm=(cov_cxckea6v3().s[133]++,Object.keys(perms.protectedFields).filter(key=>{cov_cxckea6v3().f[19]++;cov_cxckea6v3().s[134]++;return key.startsWith('userField:');}).map(key=>{cov_cxckea6v3().f[20]++;cov_cxckea6v3().s[135]++;return{key:key.substring(10),value:perms.protectedFields[key]};}));const newProtectedFields=(cov_cxckea6v3().s[136]++,[]);let overrideProtectedFields=(cov_cxckea6v3().s[137]++,false);// check if the object grants the current user access based on the extracted fields
cov_cxckea6v3().s[138]++;protectedFieldsPointerPerm.forEach(pointerPerm=>{cov_cxckea6v3().f[21]++;let pointerPermIncludesUser=(cov_cxckea6v3().s[139]++,false);const readUserFieldValue=(cov_cxckea6v3().s[140]++,object[pointerPerm.key]);cov_cxckea6v3().s[141]++;if(readUserFieldValue){cov_cxckea6v3().b[51][0]++;cov_cxckea6v3().s[142]++;if(Array.isArray(readUserFieldValue)){cov_cxckea6v3().b[52][0]++;cov_cxckea6v3().s[143]++;pointerPermIncludesUser=readUserFieldValue.some(user=>{cov_cxckea6v3().f[22]++;cov_cxckea6v3().s[144]++;return(cov_cxckea6v3().b[53][0]++,user.objectId)&&(cov_cxckea6v3().b[53][1]++,user.objectId===userId);});}else{cov_cxckea6v3().b[52][1]++;cov_cxckea6v3().s[145]++;pointerPermIncludesUser=(cov_cxckea6v3().b[54][0]++,readUserFieldValue.objectId)&&(cov_cxckea6v3().b[54][1]++,readUserFieldValue.objectId===userId);}}else{cov_cxckea6v3().b[51][1]++;}cov_cxckea6v3().s[146]++;if(pointerPermIncludesUser){cov_cxckea6v3().b[55][0]++;cov_cxckea6v3().s[147]++;overrideProtectedFields=true;cov_cxckea6v3().s[148]++;newProtectedFields.push(pointerPerm.value);}else{cov_cxckea6v3().b[55][1]++;}});// if at least one pointer-permission affected the current user
// intersect vs protectedFields from previous stage (@see addProtectedFields)
// Sets theory (intersections): A x (B x C) == (A x B) x C
cov_cxckea6v3().s[149]++;if((cov_cxckea6v3().b[57][0]++,overrideProtectedFields)&&(cov_cxckea6v3().b[57][1]++,protectedFields)){cov_cxckea6v3().b[56][0]++;cov_cxckea6v3().s[150]++;newProtectedFields.push(protectedFields);}else{cov_cxckea6v3().b[56][1]++;}// intersect all sets of protectedFields
cov_cxckea6v3().s[151]++;newProtectedFields.forEach(fields=>{cov_cxckea6v3().f[23]++;cov_cxckea6v3().s[152]++;if(fields){cov_cxckea6v3().b[58][0]++;cov_cxckea6v3().s[153]++;// if there're no protctedFields by other criteria ( id / role / auth)
// then we must intersect each set (per userField)
if(!protectedFields){cov_cxckea6v3().b[59][0]++;cov_cxckea6v3().s[154]++;protectedFields=fields;}else{cov_cxckea6v3().b[59][1]++;cov_cxckea6v3().s[155]++;protectedFields=protectedFields.filter(v=>{cov_cxckea6v3().f[24]++;cov_cxckea6v3().s[156]++;return fields.includes(v);});}}else{cov_cxckea6v3().b[58][1]++;}});}else{cov_cxckea6v3().b[49][1]++;}}else{cov_cxckea6v3().b[48][1]++;}const isUserClass=(cov_cxckea6v3().s[157]++,className==='_User');/* special treat for the user class: don't filter protectedFields if currently loggedin user is
  the retrieved user */cov_cxckea6v3().s[158]++;if(!((cov_cxckea6v3().b[61][0]++,isUserClass)&&(cov_cxckea6v3().b[61][1]++,userId)&&(cov_cxckea6v3().b[61][2]++,object.objectId===userId))){cov_cxckea6v3().b[60][0]++;cov_cxckea6v3().s[159]++;(cov_cxckea6v3().b[62][0]++,protectedFields)&&(cov_cxckea6v3().b[62][1]++,protectedFields.forEach(k=>{cov_cxckea6v3().f[25]++;cov_cxckea6v3().s[160]++;return delete object[k];}));// fields not requested by client (excluded),
//but were needed to apply protecttedFields
cov_cxckea6v3().s[161]++;(cov_cxckea6v3().b[63][0]++,perms.protectedFields)&&(cov_cxckea6v3().b[63][1]++,perms.protectedFields.temporaryKeys)&&(cov_cxckea6v3().b[63][2]++,perms.protectedFields.temporaryKeys.forEach(k=>{cov_cxckea6v3().f[26]++;cov_cxckea6v3().s[162]++;return delete object[k];}));}else{cov_cxckea6v3().b[60][1]++;}cov_cxckea6v3().s[163]++;if(!isUserClass){cov_cxckea6v3().b[64][0]++;cov_cxckea6v3().s[164]++;return object;}else{cov_cxckea6v3().b[64][1]++;}cov_cxckea6v3().s[165]++;object.password=object._hashed_password;cov_cxckea6v3().s[166]++;delete object._hashed_password;cov_cxckea6v3().s[167]++;delete object.sessionToken;cov_cxckea6v3().s[168]++;if(isMaster){cov_cxckea6v3().b[65][0]++;cov_cxckea6v3().s[169]++;return object;}else{cov_cxckea6v3().b[65][1]++;}cov_cxckea6v3().s[170]++;delete object._email_verify_token;cov_cxckea6v3().s[171]++;delete object._perishable_token;cov_cxckea6v3().s[172]++;delete object._perishable_token_expires_at;cov_cxckea6v3().s[173]++;delete object._tombstone;cov_cxckea6v3().s[174]++;delete object._email_verify_token_expires_at;cov_cxckea6v3().s[175]++;delete object._failed_login_count;cov_cxckea6v3().s[176]++;delete object._account_lockout_expires_at;cov_cxckea6v3().s[177]++;delete object._password_changed_at;cov_cxckea6v3().s[178]++;delete object._password_history;cov_cxckea6v3().s[179]++;if(aclGroup.indexOf(object.objectId)>-1){cov_cxckea6v3().b[66][0]++;cov_cxckea6v3().s[180]++;return object;}else{cov_cxckea6v3().b[66][1]++;}cov_cxckea6v3().s[181]++;delete object.authData;cov_cxckea6v3().s[182]++;return object;};// Runs an update on the database.
// Returns a promise for an object with the new values for field
// modifications that don't know their results ahead of time, like
// 'increment'.
// Options:
//   acl:  a list of strings. If the object to be updated has an ACL,
//         one of the provided strings must provide the caller with
//         write permissions.
const specialKeysForUpdate=(cov_cxckea6v3().s[183]++,['_hashed_password','_perishable_token','_email_verify_token','_email_verify_token_expires_at','_account_lockout_expires_at','_failed_login_count','_perishable_token_expires_at','_password_changed_at','_password_history']);cov_cxckea6v3().s[184]++;const isSpecialUpdateKey=key=>{cov_cxckea6v3().f[27]++;cov_cxckea6v3().s[185]++;return specialKeysForUpdate.indexOf(key)>=0;};function expandResultOnKeyPath(object,key,value){cov_cxckea6v3().f[28]++;cov_cxckea6v3().s[186]++;if(key.indexOf('.')<0){cov_cxckea6v3().b[67][0]++;cov_cxckea6v3().s[187]++;object[key]=value[key];cov_cxckea6v3().s[188]++;return object;}else{cov_cxckea6v3().b[67][1]++;}cov_cxckea6v3().s[189]++;console.log(ex,ex.stack.split("\n"));const path=(cov_cxckea6v3().s[190]++,key.split('.'));const firstKey=(cov_cxckea6v3().s[191]++,path[0]);const nextPath=(cov_cxckea6v3().s[192]++,path.slice(1).join('.'));cov_cxckea6v3().s[193]++;object[firstKey]=expandResultOnKeyPath((cov_cxckea6v3().b[68][0]++,object[firstKey])||(cov_cxckea6v3().b[68][1]++,{}),nextPath,value[firstKey]);cov_cxckea6v3().s[194]++;delete object[key];cov_cxckea6v3().s[195]++;return object;}function sanitizeDatabaseResult(originalObject,result){cov_cxckea6v3().f[29]++;const response=(cov_cxckea6v3().s[196]++,{});cov_cxckea6v3().s[197]++;if(!result){cov_cxckea6v3().b[69][0]++;cov_cxckea6v3().s[198]++;return Promise.resolve(response);}else{cov_cxckea6v3().b[69][1]++;}cov_cxckea6v3().s[199]++;Object.keys(originalObject).forEach(key=>{cov_cxckea6v3().f[30]++;const keyUpdate=(cov_cxckea6v3().s[200]++,originalObject[key]);// determine if that was an op
cov_cxckea6v3().s[201]++;if((cov_cxckea6v3().b[71][0]++,keyUpdate)&&(cov_cxckea6v3().b[71][1]++,typeof keyUpdate==='object')&&(cov_cxckea6v3().b[71][2]++,keyUpdate.__op)&&(cov_cxckea6v3().b[71][3]++,['Add','AddUnique','Remove','Increment'].indexOf(keyUpdate.__op)>-1)){cov_cxckea6v3().b[70][0]++;cov_cxckea6v3().s[202]++;// only valid ops that produce an actionable result
// the op may have happend on a keypath
expandResultOnKeyPath(response,key,result);}else{cov_cxckea6v3().b[70][1]++;}});cov_cxckea6v3().s[203]++;return Promise.resolve(response);}function joinTableName(className,key){cov_cxckea6v3().f[31]++;cov_cxckea6v3().s[204]++;return`_Join:${key}:${className}`;}cov_cxckea6v3().s[205]++;const flattenUpdateOperatorsForCreate=object=>{cov_cxckea6v3().f[32]++;cov_cxckea6v3().s[206]++;for(const key in object){cov_cxckea6v3().s[207]++;if((cov_cxckea6v3().b[73][0]++,object[key])&&(cov_cxckea6v3().b[73][1]++,object[key].__op)){cov_cxckea6v3().b[72][0]++;cov_cxckea6v3().s[208]++;switch(object[key].__op){case'Increment':cov_cxckea6v3().b[74][0]++;cov_cxckea6v3().s[209]++;if(typeof object[key].amount!=='number'){cov_cxckea6v3().b[75][0]++;cov_cxckea6v3().s[210]++;throw new _node.Parse.Error(_node.Parse.Error.INVALID_JSON,'objects to add must be an array');}else{cov_cxckea6v3().b[75][1]++;}cov_cxckea6v3().s[211]++;object[key]=object[key].amount;cov_cxckea6v3().s[212]++;break;case'Add':cov_cxckea6v3().b[74][1]++;cov_cxckea6v3().s[213]++;if(!(object[key].objects instanceof Array)){cov_cxckea6v3().b[76][0]++;cov_cxckea6v3().s[214]++;throw new _node.Parse.Error(_node.Parse.Error.INVALID_JSON,'objects to add must be an array');}else{cov_cxckea6v3().b[76][1]++;}cov_cxckea6v3().s[215]++;object[key]=object[key].objects;cov_cxckea6v3().s[216]++;break;case'AddUnique':cov_cxckea6v3().b[74][2]++;cov_cxckea6v3().s[217]++;if(!(object[key].objects instanceof Array)){cov_cxckea6v3().b[77][0]++;cov_cxckea6v3().s[218]++;throw new _node.Parse.Error(_node.Parse.Error.INVALID_JSON,'objects to add must be an array');}else{cov_cxckea6v3().b[77][1]++;}cov_cxckea6v3().s[219]++;object[key]=object[key].objects;cov_cxckea6v3().s[220]++;break;case'Remove':cov_cxckea6v3().b[74][3]++;cov_cxckea6v3().s[221]++;if(!(object[key].objects instanceof Array)){cov_cxckea6v3().b[78][0]++;cov_cxckea6v3().s[222]++;throw new _node.Parse.Error(_node.Parse.Error.INVALID_JSON,'objects to add must be an array');}else{cov_cxckea6v3().b[78][1]++;}cov_cxckea6v3().s[223]++;object[key]=[];cov_cxckea6v3().s[224]++;break;case'Delete':cov_cxckea6v3().b[74][4]++;cov_cxckea6v3().s[225]++;delete object[key];cov_cxckea6v3().s[226]++;break;default:cov_cxckea6v3().b[74][5]++;cov_cxckea6v3().s[227]++;throw new _node.Parse.Error(_node.Parse.Error.COMMAND_UNAVAILABLE,`The ${object[key].__op} operator is not supported yet.`);}}else{cov_cxckea6v3().b[72][1]++;}}};cov_cxckea6v3().s[228]++;const transformAuthData=(className,object,schema)=>{cov_cxckea6v3().f[33]++;cov_cxckea6v3().s[229]++;if((cov_cxckea6v3().b[80][0]++,object.authData)&&(cov_cxckea6v3().b[80][1]++,className==='_User')){cov_cxckea6v3().b[79][0]++;cov_cxckea6v3().s[230]++;Object.keys(object.authData).forEach(provider=>{cov_cxckea6v3().f[34]++;const providerData=(cov_cxckea6v3().s[231]++,object.authData[provider]);const fieldName=(cov_cxckea6v3().s[232]++,`_auth_data_${provider}`);cov_cxckea6v3().s[233]++;if(providerData==null){cov_cxckea6v3().b[81][0]++;cov_cxckea6v3().s[234]++;object[fieldName]={__op:'Delete'};}else{cov_cxckea6v3().b[81][1]++;cov_cxckea6v3().s[235]++;object[fieldName]=providerData;cov_cxckea6v3().s[236]++;schema.fields[fieldName]={type:'Object'};}});cov_cxckea6v3().s[237]++;delete object.authData;}else{cov_cxckea6v3().b[79][1]++;}};// Transforms a Database format ACL to a REST API format ACL
cov_cxckea6v3().s[238]++;const untransformObjectACL=_ref2=>{cov_cxckea6v3().f[35]++;let{_rperm,_wperm}=(cov_cxckea6v3().s[239]++,_ref2),output=(cov_cxckea6v3().s[240]++,_objectWithoutProperties(_ref2,["_rperm","_wperm"]));cov_cxckea6v3().s[241]++;if((cov_cxckea6v3().b[83][0]++,_rperm)||(cov_cxckea6v3().b[83][1]++,_wperm)){cov_cxckea6v3().b[82][0]++;cov_cxckea6v3().s[242]++;output.ACL={};cov_cxckea6v3().s[243]++;((cov_cxckea6v3().b[84][0]++,_rperm)||(cov_cxckea6v3().b[84][1]++,[])).forEach(entry=>{cov_cxckea6v3().f[36]++;cov_cxckea6v3().s[244]++;if(!output.ACL[entry]){cov_cxckea6v3().b[85][0]++;cov_cxckea6v3().s[245]++;output.ACL[entry]={read:true};}else{cov_cxckea6v3().b[85][1]++;cov_cxckea6v3().s[246]++;output.ACL[entry]['read']=true;}});cov_cxckea6v3().s[247]++;((cov_cxckea6v3().b[86][0]++,_wperm)||(cov_cxckea6v3().b[86][1]++,[])).forEach(entry=>{cov_cxckea6v3().f[37]++;cov_cxckea6v3().s[248]++;if(!output.ACL[entry]){cov_cxckea6v3().b[87][0]++;cov_cxckea6v3().s[249]++;output.ACL[entry]={write:true};}else{cov_cxckea6v3().b[87][1]++;cov_cxckea6v3().s[250]++;output.ACL[entry]['write']=true;}});}else{cov_cxckea6v3().b[82][1]++;}cov_cxckea6v3().s[251]++;return output;};/**
 * When querying, the fieldName may be compound, extract the root fieldName
 *     `temperature.celsius` becomes `temperature`
 * @param {string} fieldName that may be a compound field name
 * @returns {string} the root name of the field
 */cov_cxckea6v3().s[252]++;const getRootFieldName=fieldName=>{cov_cxckea6v3().f[38]++;cov_cxckea6v3().s[253]++;return fieldName.split('.')[0];};const relationSchema=(cov_cxckea6v3().s[254]++,{fields:{relatedId:{type:'String'},owningId:{type:'String'}}});class DatabaseController{constructor(adapter){cov_cxckea6v3().f[39]++;cov_cxckea6v3().s[255]++;this.adapter=adapter;// We don't want a mutable this.schema, because then you could have
// one request that uses different schemas for different parts of
// it. Instead, use loadSchema to get a schema.
cov_cxckea6v3().s[256]++;this.schemaPromise=null;cov_cxckea6v3().s[257]++;this._transactionalSession=null;}collectionExists(className){cov_cxckea6v3().f[40]++;cov_cxckea6v3().s[258]++;return this.adapter.classExists(className);}purgeCollection(className){cov_cxckea6v3().f[41]++;cov_cxckea6v3().s[259]++;return this.loadSchema().then(schemaController=>{cov_cxckea6v3().f[42]++;cov_cxckea6v3().s[260]++;return schemaController.getOneSchema(className);}).then(schema=>{cov_cxckea6v3().f[43]++;cov_cxckea6v3().s[261]++;return this.adapter.deleteObjectsByQuery(className,schema,{});});}validateClassName(className){cov_cxckea6v3().f[44]++;cov_cxckea6v3().s[262]++;if(!SchemaController.classNameIsValid(className)){cov_cxckea6v3().b[88][0]++;cov_cxckea6v3().s[263]++;return Promise.reject(new _node.Parse.Error(_node.Parse.Error.INVALID_CLASS_NAME,'invalid className: '+className));}else{cov_cxckea6v3().b[88][1]++;}cov_cxckea6v3().s[264]++;return Promise.resolve();}// Returns a promise for a schemaController.
loadSchema(options=(cov_cxckea6v3().b[89][0]++,{clearCache:false})){cov_cxckea6v3().f[45]++;cov_cxckea6v3().s[265]++;if(this.schemaPromise!=null){cov_cxckea6v3().b[90][0]++;cov_cxckea6v3().s[266]++;return this.schemaPromise;}else{cov_cxckea6v3().b[90][1]++;}cov_cxckea6v3().s[267]++;this.schemaPromise=SchemaController.load(this.adapter,options);cov_cxckea6v3().s[268]++;this.schemaPromise.then(()=>{cov_cxckea6v3().f[46]++;cov_cxckea6v3().s[269]++;return delete this.schemaPromise;},()=>{cov_cxckea6v3().f[47]++;cov_cxckea6v3().s[270]++;return delete this.schemaPromise;});cov_cxckea6v3().s[271]++;return this.loadSchema(options);}loadSchemaIfNeeded(schemaController,options=(cov_cxckea6v3().b[91][0]++,{clearCache:false})){cov_cxckea6v3().f[48]++;cov_cxckea6v3().s[272]++;return schemaController?(cov_cxckea6v3().b[92][0]++,Promise.resolve(schemaController)):(cov_cxckea6v3().b[92][1]++,this.loadSchema(options));}// Returns a promise for the classname that is related to the given
// classname through the key.
// TODO: make this not in the DatabaseController interface
redirectClassNameForKey(className,key){cov_cxckea6v3().f[49]++;cov_cxckea6v3().s[273]++;return this.loadSchema().then(schema=>{cov_cxckea6v3().f[50]++;var t=(cov_cxckea6v3().s[274]++,schema.getExpectedType(className,key));cov_cxckea6v3().s[275]++;if((cov_cxckea6v3().b[94][0]++,t!=null)&&(cov_cxckea6v3().b[94][1]++,typeof t!=='string')&&(cov_cxckea6v3().b[94][2]++,t.type==='Relation')){cov_cxckea6v3().b[93][0]++;cov_cxckea6v3().s[276]++;return t.targetClass;}else{cov_cxckea6v3().b[93][1]++;}cov_cxckea6v3().s[277]++;return className;});}// Uses the schema to validate the object (REST API format).
// Returns a promise that resolves to the new schema.
// This does not update this.schema, because in a situation like a
// batch request, that could confuse other users of the schema.
validateObject(className,object,query,runOptions){cov_cxckea6v3().f[51]++;let schema;const acl=(cov_cxckea6v3().s[278]++,runOptions.acl);const isMaster=(cov_cxckea6v3().s[279]++,acl===undefined);var aclGroup=(cov_cxckea6v3().s[280]++,(cov_cxckea6v3().b[95][0]++,acl)||(cov_cxckea6v3().b[95][1]++,[]));cov_cxckea6v3().s[281]++;return this.loadSchema().then(s=>{cov_cxckea6v3().f[52]++;cov_cxckea6v3().s[282]++;schema=s;cov_cxckea6v3().s[283]++;if(isMaster){cov_cxckea6v3().b[96][0]++;cov_cxckea6v3().s[284]++;return Promise.resolve();}else{cov_cxckea6v3().b[96][1]++;}cov_cxckea6v3().s[285]++;return this.canAddField(schema,className,object,aclGroup,runOptions);}).then(()=>{cov_cxckea6v3().f[53]++;cov_cxckea6v3().s[286]++;return schema.validateObject(className,object,query);});}update(className,query,update,{acl,many,upsert,addsField}=(cov_cxckea6v3().b[97][0]++,{}),skipSanitization=(cov_cxckea6v3().b[98][0]++,false),validateOnly=(cov_cxckea6v3().b[99][0]++,false),validSchemaController){cov_cxckea6v3().f[54]++;const originalQuery=(cov_cxckea6v3().s[287]++,query);const originalUpdate=(cov_cxckea6v3().s[288]++,update);// Make a copy of the object, so we don't mutate the incoming data.
cov_cxckea6v3().s[289]++;update=(0,_deepcopy.default)(update);var relationUpdates=(cov_cxckea6v3().s[290]++,[]);var isMaster=(cov_cxckea6v3().s[291]++,acl===undefined);var aclGroup=(cov_cxckea6v3().s[292]++,(cov_cxckea6v3().b[100][0]++,acl)||(cov_cxckea6v3().b[100][1]++,[]));cov_cxckea6v3().s[293]++;return this.loadSchemaIfNeeded(validSchemaController).then(schemaController=>{cov_cxckea6v3().f[55]++;cov_cxckea6v3().s[294]++;return(isMaster?(cov_cxckea6v3().b[101][0]++,Promise.resolve()):(cov_cxckea6v3().b[101][1]++,schemaController.validatePermission(className,aclGroup,'update'))).then(()=>{cov_cxckea6v3().f[56]++;cov_cxckea6v3().s[295]++;relationUpdates=this.collectRelationUpdates(className,originalQuery.objectId,update);cov_cxckea6v3().s[296]++;if(!isMaster){cov_cxckea6v3().b[102][0]++;cov_cxckea6v3().s[297]++;query=this.addPointerPermissions(schemaController,className,'update',query,aclGroup);cov_cxckea6v3().s[298]++;if(addsField){cov_cxckea6v3().b[103][0]++;cov_cxckea6v3().s[299]++;query={$and:[query,this.addPointerPermissions(schemaController,className,'addField',query,aclGroup)]};}else{cov_cxckea6v3().b[103][1]++;}}else{cov_cxckea6v3().b[102][1]++;}cov_cxckea6v3().s[300]++;if(!query){cov_cxckea6v3().b[104][0]++;cov_cxckea6v3().s[301]++;return Promise.resolve();}else{cov_cxckea6v3().b[104][1]++;}cov_cxckea6v3().s[302]++;if(acl){cov_cxckea6v3().b[105][0]++;cov_cxckea6v3().s[303]++;query=addWriteACL(query,acl);}else{cov_cxckea6v3().b[105][1]++;}cov_cxckea6v3().s[304]++;validateQuery(query);cov_cxckea6v3().s[305]++;return schemaController.getOneSchema(className,true).catch(error=>{cov_cxckea6v3().f[57]++;cov_cxckea6v3().s[306]++;// If the schema doesn't exist, pretend it exists with no fields. This behavior
// will likely need revisiting.
if(error===undefined){cov_cxckea6v3().b[106][0]++;cov_cxckea6v3().s[307]++;return{fields:{}};}else{cov_cxckea6v3().b[106][1]++;}cov_cxckea6v3().s[308]++;throw error;}).then(schema=>{cov_cxckea6v3().f[58]++;cov_cxckea6v3().s[309]++;Object.keys(update).forEach(fieldName=>{cov_cxckea6v3().f[59]++;cov_cxckea6v3().s[310]++;if(fieldName.match(/^authData\.([a-zA-Z0-9_]+)\.id$/)){cov_cxckea6v3().b[107][0]++;cov_cxckea6v3().s[311]++;throw new _node.Parse.Error(_node.Parse.Error.INVALID_KEY_NAME,`Invalid field name for update: ${fieldName}`);}else{cov_cxckea6v3().b[107][1]++;}const rootFieldName=(cov_cxckea6v3().s[312]++,getRootFieldName(fieldName));cov_cxckea6v3().s[313]++;if((cov_cxckea6v3().b[109][0]++,!SchemaController.fieldNameIsValid(rootFieldName,className))&&(cov_cxckea6v3().b[109][1]++,!isSpecialUpdateKey(rootFieldName))){cov_cxckea6v3().b[108][0]++;cov_cxckea6v3().s[314]++;throw new _node.Parse.Error(_node.Parse.Error.INVALID_KEY_NAME,`Invalid field name for update: ${fieldName}`);}else{cov_cxckea6v3().b[108][1]++;}});cov_cxckea6v3().s[315]++;for(const updateOperation in update){cov_cxckea6v3().s[316]++;if((cov_cxckea6v3().b[111][0]++,update[updateOperation])&&(cov_cxckea6v3().b[111][1]++,typeof update[updateOperation]==='object')&&(cov_cxckea6v3().b[111][2]++,Object.keys(update[updateOperation]).some(innerKey=>{cov_cxckea6v3().f[60]++;cov_cxckea6v3().s[317]++;return(cov_cxckea6v3().b[112][0]++,innerKey.includes('$'))||(cov_cxckea6v3().b[112][1]++,innerKey.includes('.'));}))){cov_cxckea6v3().b[110][0]++;cov_cxckea6v3().s[318]++;throw new _node.Parse.Error(_node.Parse.Error.INVALID_NESTED_KEY,"Nested keys should not contain the '$' or '.' characters");}else{cov_cxckea6v3().b[110][1]++;}}cov_cxckea6v3().s[319]++;update=transformObjectACL(update);cov_cxckea6v3().s[320]++;transformAuthData(className,update,schema);cov_cxckea6v3().s[321]++;if(validateOnly){cov_cxckea6v3().b[113][0]++;cov_cxckea6v3().s[322]++;return this.adapter.find(className,schema,query,{}).then(result=>{cov_cxckea6v3().f[61]++;cov_cxckea6v3().s[323]++;if((cov_cxckea6v3().b[115][0]++,!result)||(cov_cxckea6v3().b[115][1]++,!result.length)){cov_cxckea6v3().b[114][0]++;cov_cxckea6v3().s[324]++;throw new _node.Parse.Error(_node.Parse.Error.OBJECT_NOT_FOUND,'Object not found.');}else{cov_cxckea6v3().b[114][1]++;}cov_cxckea6v3().s[325]++;return{};});}else{cov_cxckea6v3().b[113][1]++;}cov_cxckea6v3().s[326]++;if(many){cov_cxckea6v3().b[116][0]++;cov_cxckea6v3().s[327]++;return this.adapter.updateObjectsByQuery(className,schema,query,update,this._transactionalSession);}else{cov_cxckea6v3().b[116][1]++;cov_cxckea6v3().s[328]++;if(upsert){cov_cxckea6v3().b[117][0]++;cov_cxckea6v3().s[329]++;return this.adapter.upsertOneObject(className,schema,query,update,this._transactionalSession);}else{cov_cxckea6v3().b[117][1]++;cov_cxckea6v3().s[330]++;return this.adapter.findOneAndUpdate(className,schema,query,update,this._transactionalSession);}}});}).then(result=>{cov_cxckea6v3().f[62]++;cov_cxckea6v3().s[331]++;if(!result){cov_cxckea6v3().b[118][0]++;cov_cxckea6v3().s[332]++;throw new _node.Parse.Error(_node.Parse.Error.OBJECT_NOT_FOUND,'Object not found.');}else{cov_cxckea6v3().b[118][1]++;}cov_cxckea6v3().s[333]++;if(validateOnly){cov_cxckea6v3().b[119][0]++;cov_cxckea6v3().s[334]++;return result;}else{cov_cxckea6v3().b[119][1]++;}cov_cxckea6v3().s[335]++;return this.handleRelationUpdates(className,originalQuery.objectId,update,relationUpdates).then(()=>{cov_cxckea6v3().f[63]++;cov_cxckea6v3().s[336]++;return result;});}).then(result=>{cov_cxckea6v3().f[64]++;cov_cxckea6v3().s[337]++;if(skipSanitization){cov_cxckea6v3().b[120][0]++;cov_cxckea6v3().s[338]++;return Promise.resolve(result);}else{cov_cxckea6v3().b[120][1]++;}cov_cxckea6v3().s[339]++;return sanitizeDatabaseResult(originalUpdate,result);});});}// Collect all relation-updating operations from a REST-format update.
// Returns a list of all relation updates to perform
// This mutates update.
collectRelationUpdates(className,objectId,update){cov_cxckea6v3().f[65]++;var ops=(cov_cxckea6v3().s[340]++,[]);var deleteMe=(cov_cxckea6v3().s[341]++,[]);cov_cxckea6v3().s[342]++;objectId=(cov_cxckea6v3().b[121][0]++,update.objectId)||(cov_cxckea6v3().b[121][1]++,objectId);cov_cxckea6v3().s[343]++;var process=(op,key)=>{cov_cxckea6v3().f[66]++;cov_cxckea6v3().s[344]++;if(!op){cov_cxckea6v3().b[122][0]++;cov_cxckea6v3().s[345]++;return;}else{cov_cxckea6v3().b[122][1]++;}cov_cxckea6v3().s[346]++;if(op.__op=='AddRelation'){cov_cxckea6v3().b[123][0]++;cov_cxckea6v3().s[347]++;ops.push({key,op});cov_cxckea6v3().s[348]++;deleteMe.push(key);}else{cov_cxckea6v3().b[123][1]++;}cov_cxckea6v3().s[349]++;if(op.__op=='RemoveRelation'){cov_cxckea6v3().b[124][0]++;cov_cxckea6v3().s[350]++;ops.push({key,op});cov_cxckea6v3().s[351]++;deleteMe.push(key);}else{cov_cxckea6v3().b[124][1]++;}cov_cxckea6v3().s[352]++;if(op.__op=='Batch'){cov_cxckea6v3().b[125][0]++;cov_cxckea6v3().s[353]++;for(var x of op.ops){cov_cxckea6v3().s[354]++;process(x,key);}}else{cov_cxckea6v3().b[125][1]++;}};cov_cxckea6v3().s[355]++;for(const key in update){cov_cxckea6v3().s[356]++;process(update[key],key);}cov_cxckea6v3().s[357]++;for(const key of deleteMe){cov_cxckea6v3().s[358]++;delete update[key];}cov_cxckea6v3().s[359]++;return ops;}// Processes relation-updating operations from a REST-format update.
// Returns a promise that resolves when all updates have been performed
handleRelationUpdates(className,objectId,update,ops){cov_cxckea6v3().f[67]++;var pending=(cov_cxckea6v3().s[360]++,[]);cov_cxckea6v3().s[361]++;objectId=(cov_cxckea6v3().b[126][0]++,update.objectId)||(cov_cxckea6v3().b[126][1]++,objectId);cov_cxckea6v3().s[362]++;ops.forEach(({key,op})=>{cov_cxckea6v3().f[68]++;cov_cxckea6v3().s[363]++;if(!op){cov_cxckea6v3().b[127][0]++;cov_cxckea6v3().s[364]++;return;}else{cov_cxckea6v3().b[127][1]++;}cov_cxckea6v3().s[365]++;if(op.__op=='AddRelation'){cov_cxckea6v3().b[128][0]++;cov_cxckea6v3().s[366]++;for(const object of op.objects){cov_cxckea6v3().s[367]++;pending.push(this.addRelation(key,className,objectId,object.objectId));}}else{cov_cxckea6v3().b[128][1]++;}cov_cxckea6v3().s[368]++;if(op.__op=='RemoveRelation'){cov_cxckea6v3().b[129][0]++;cov_cxckea6v3().s[369]++;for(const object of op.objects){cov_cxckea6v3().s[370]++;pending.push(this.removeRelation(key,className,objectId,object.objectId));}}else{cov_cxckea6v3().b[129][1]++;}});cov_cxckea6v3().s[371]++;return Promise.all(pending);}// Adds a relation.
// Returns a promise that resolves successfully iff the add was successful.
addRelation(key,fromClassName,fromId,toId){cov_cxckea6v3().f[69]++;const doc=(cov_cxckea6v3().s[372]++,{relatedId:toId,owningId:fromId});cov_cxckea6v3().s[373]++;return this.adapter.upsertOneObject(`_Join:${key}:${fromClassName}`,relationSchema,doc,doc,this._transactionalSession);}// Removes a relation.
// Returns a promise that resolves successfully iff the remove was
// successful.
removeRelation(key,fromClassName,fromId,toId){cov_cxckea6v3().f[70]++;var doc=(cov_cxckea6v3().s[374]++,{relatedId:toId,owningId:fromId});cov_cxckea6v3().s[375]++;return this.adapter.deleteObjectsByQuery(`_Join:${key}:${fromClassName}`,relationSchema,doc,this._transactionalSession).catch(error=>{cov_cxckea6v3().f[71]++;cov_cxckea6v3().s[376]++;// We don't care if they try to delete a non-existent relation.
if(error.code==_node.Parse.Error.OBJECT_NOT_FOUND){cov_cxckea6v3().b[130][0]++;cov_cxckea6v3().s[377]++;return;}else{cov_cxckea6v3().b[130][1]++;}cov_cxckea6v3().s[378]++;throw error;});}// Removes objects matches this query from the database.
// Returns a promise that resolves successfully iff the object was
// deleted.
// Options:
//   acl:  a list of strings. If the object to be updated has an ACL,
//         one of the provided strings must provide the caller with
//         write permissions.
destroy(className,query,{acl}=(cov_cxckea6v3().b[131][0]++,{}),validSchemaController){cov_cxckea6v3().f[72]++;const isMaster=(cov_cxckea6v3().s[379]++,acl===undefined);const aclGroup=(cov_cxckea6v3().s[380]++,(cov_cxckea6v3().b[132][0]++,acl)||(cov_cxckea6v3().b[132][1]++,[]));cov_cxckea6v3().s[381]++;return this.loadSchemaIfNeeded(validSchemaController).then(schemaController=>{cov_cxckea6v3().f[73]++;cov_cxckea6v3().s[382]++;return(isMaster?(cov_cxckea6v3().b[133][0]++,Promise.resolve()):(cov_cxckea6v3().b[133][1]++,schemaController.validatePermission(className,aclGroup,'delete'))).then(()=>{cov_cxckea6v3().f[74]++;cov_cxckea6v3().s[383]++;if(!isMaster){cov_cxckea6v3().b[134][0]++;cov_cxckea6v3().s[384]++;query=this.addPointerPermissions(schemaController,className,'delete',query,aclGroup);cov_cxckea6v3().s[385]++;if(!query){cov_cxckea6v3().b[135][0]++;cov_cxckea6v3().s[386]++;throw new _node.Parse.Error(_node.Parse.Error.OBJECT_NOT_FOUND,'Object not found.');}else{cov_cxckea6v3().b[135][1]++;}}else{cov_cxckea6v3().b[134][1]++;}// delete by query
cov_cxckea6v3().s[387]++;if(acl){cov_cxckea6v3().b[136][0]++;cov_cxckea6v3().s[388]++;query=addWriteACL(query,acl);}else{cov_cxckea6v3().b[136][1]++;}cov_cxckea6v3().s[389]++;validateQuery(query);cov_cxckea6v3().s[390]++;return schemaController.getOneSchema(className).catch(error=>{cov_cxckea6v3().f[75]++;cov_cxckea6v3().s[391]++;// If the schema doesn't exist, pretend it exists with no fields. This behavior
// will likely need revisiting.
if(error===undefined){cov_cxckea6v3().b[137][0]++;cov_cxckea6v3().s[392]++;return{fields:{}};}else{cov_cxckea6v3().b[137][1]++;}cov_cxckea6v3().s[393]++;throw error;}).then(parseFormatSchema=>{cov_cxckea6v3().f[76]++;cov_cxckea6v3().s[394]++;return this.adapter.deleteObjectsByQuery(className,parseFormatSchema,query,this._transactionalSession);}).catch(error=>{cov_cxckea6v3().f[77]++;cov_cxckea6v3().s[395]++;// When deleting sessions while changing passwords, don't throw an error if they don't have any sessions.
if((cov_cxckea6v3().b[139][0]++,className==='_Session')&&(cov_cxckea6v3().b[139][1]++,error.code===_node.Parse.Error.OBJECT_NOT_FOUND)){cov_cxckea6v3().b[138][0]++;cov_cxckea6v3().s[396]++;return Promise.resolve({});}else{cov_cxckea6v3().b[138][1]++;}cov_cxckea6v3().s[397]++;throw error;});});});}// Inserts an object into the database.
// Returns a promise that resolves successfully iff the object saved.
create(className,object,{acl}=(cov_cxckea6v3().b[140][0]++,{}),validateOnly=(cov_cxckea6v3().b[141][0]++,false),validSchemaController){cov_cxckea6v3().f[78]++;// Make a copy of the object, so we don't mutate the incoming data.
const originalObject=(cov_cxckea6v3().s[398]++,object);cov_cxckea6v3().s[399]++;object=transformObjectACL(object);cov_cxckea6v3().s[400]++;object.createdAt={iso:object.createdAt,__type:'Date'};cov_cxckea6v3().s[401]++;object.updatedAt={iso:object.updatedAt,__type:'Date'};var isMaster=(cov_cxckea6v3().s[402]++,acl===undefined);var aclGroup=(cov_cxckea6v3().s[403]++,(cov_cxckea6v3().b[142][0]++,acl)||(cov_cxckea6v3().b[142][1]++,[]));const relationUpdates=(cov_cxckea6v3().s[404]++,this.collectRelationUpdates(className,null,object));cov_cxckea6v3().s[405]++;return this.validateClassName(className).then(()=>{cov_cxckea6v3().f[79]++;cov_cxckea6v3().s[406]++;return this.loadSchemaIfNeeded(validSchemaController);}).then(schemaController=>{cov_cxckea6v3().f[80]++;cov_cxckea6v3().s[407]++;return(isMaster?(cov_cxckea6v3().b[143][0]++,Promise.resolve()):(cov_cxckea6v3().b[143][1]++,schemaController.validatePermission(className,aclGroup,'create'))).then(()=>{cov_cxckea6v3().f[81]++;cov_cxckea6v3().s[408]++;return schemaController.enforceClassExists(className);}).then(()=>{cov_cxckea6v3().f[82]++;cov_cxckea6v3().s[409]++;return schemaController.getOneSchema(className,true);}).then(schema=>{cov_cxckea6v3().f[83]++;cov_cxckea6v3().s[410]++;transformAuthData(className,object,schema);cov_cxckea6v3().s[411]++;flattenUpdateOperatorsForCreate(object);cov_cxckea6v3().s[412]++;if(validateOnly){cov_cxckea6v3().b[144][0]++;cov_cxckea6v3().s[413]++;return{};}else{cov_cxckea6v3().b[144][1]++;}cov_cxckea6v3().s[414]++;return this.adapter.createObject(className,SchemaController.convertSchemaToAdapterSchema(schema),object,this._transactionalSession);}).then(result=>{cov_cxckea6v3().f[84]++;cov_cxckea6v3().s[415]++;if(validateOnly){cov_cxckea6v3().b[145][0]++;cov_cxckea6v3().s[416]++;return originalObject;}else{cov_cxckea6v3().b[145][1]++;}cov_cxckea6v3().s[417]++;return this.handleRelationUpdates(className,object.objectId,object,relationUpdates).then(()=>{cov_cxckea6v3().f[85]++;cov_cxckea6v3().s[418]++;return sanitizeDatabaseResult(originalObject,result.ops[0]);});});});}canAddField(schema,className,object,aclGroup,runOptions){cov_cxckea6v3().f[86]++;const classSchema=(cov_cxckea6v3().s[419]++,schema.schemaData[className]);cov_cxckea6v3().s[420]++;if(!classSchema){cov_cxckea6v3().b[146][0]++;cov_cxckea6v3().s[421]++;return Promise.resolve();}else{cov_cxckea6v3().b[146][1]++;}const fields=(cov_cxckea6v3().s[422]++,Object.keys(object));const schemaFields=(cov_cxckea6v3().s[423]++,Object.keys(classSchema.fields));const newKeys=(cov_cxckea6v3().s[424]++,fields.filter(field=>{cov_cxckea6v3().f[87]++;cov_cxckea6v3().s[425]++;// Skip fields that are unset
if((cov_cxckea6v3().b[148][0]++,object[field])&&(cov_cxckea6v3().b[148][1]++,object[field].__op)&&(cov_cxckea6v3().b[148][2]++,object[field].__op==='Delete')){cov_cxckea6v3().b[147][0]++;cov_cxckea6v3().s[426]++;return false;}else{cov_cxckea6v3().b[147][1]++;}cov_cxckea6v3().s[427]++;return schemaFields.indexOf(getRootFieldName(field))<0;}));cov_cxckea6v3().s[428]++;if(newKeys.length>0){cov_cxckea6v3().b[149][0]++;cov_cxckea6v3().s[429]++;// adds a marker that new field is being adding during update
runOptions.addsField=true;const action=(cov_cxckea6v3().s[430]++,runOptions.action);cov_cxckea6v3().s[431]++;return schema.validatePermission(className,aclGroup,'addField',action);}else{cov_cxckea6v3().b[149][1]++;}cov_cxckea6v3().s[432]++;return Promise.resolve();}// Won't delete collections in the system namespace
/**
   * Delete all classes and clears the schema cache
   *
   * @param {boolean} fast set to true if it's ok to just delete rows and not indexes
   * @returns {Promise<void>} when the deletions completes
   */deleteEverything(fast=(cov_cxckea6v3().b[150][0]++,false)){cov_cxckea6v3().f[88]++;cov_cxckea6v3().s[433]++;this.schemaPromise=null;cov_cxckea6v3().s[434]++;_SchemaCache.default.clear();cov_cxckea6v3().s[435]++;return this.adapter.deleteAllClasses(fast);}// Returns a promise for a list of related ids given an owning id.
// className here is the owning className.
relatedIds(className,key,owningId,queryOptions){cov_cxckea6v3().f[89]++;const{skip,limit,sort}=(cov_cxckea6v3().s[436]++,queryOptions);const findOptions=(cov_cxckea6v3().s[437]++,{});cov_cxckea6v3().s[438]++;if((cov_cxckea6v3().b[152][0]++,sort)&&(cov_cxckea6v3().b[152][1]++,sort.createdAt)&&(cov_cxckea6v3().b[152][2]++,this.adapter.canSortOnJoinTables)){cov_cxckea6v3().b[151][0]++;cov_cxckea6v3().s[439]++;findOptions.sort={_id:sort.createdAt};cov_cxckea6v3().s[440]++;findOptions.limit=limit;cov_cxckea6v3().s[441]++;findOptions.skip=skip;cov_cxckea6v3().s[442]++;queryOptions.skip=0;}else{cov_cxckea6v3().b[151][1]++;}cov_cxckea6v3().s[443]++;return this.adapter.find(joinTableName(className,key),relationSchema,{owningId},findOptions).then(results=>{cov_cxckea6v3().f[90]++;cov_cxckea6v3().s[444]++;return results.map(result=>{cov_cxckea6v3().f[91]++;cov_cxckea6v3().s[445]++;return result.relatedId;});});}// Returns a promise for a list of owning ids given some related ids.
// className here is the owning className.
owningIds(className,key,relatedIds){cov_cxckea6v3().f[92]++;cov_cxckea6v3().s[446]++;return this.adapter.find(joinTableName(className,key),relationSchema,{relatedId:{$in:relatedIds}},{keys:['owningId']}).then(results=>{cov_cxckea6v3().f[93]++;cov_cxckea6v3().s[447]++;return results.map(result=>{cov_cxckea6v3().f[94]++;cov_cxckea6v3().s[448]++;return result.owningId;});});}// Modifies query so that it no longer has $in on relation fields, or
// equal-to-pointer constraints on relation fields.
// Returns a promise that resolves when query is mutated
reduceInRelation(className,query,schema){cov_cxckea6v3().f[95]++;cov_cxckea6v3().s[449]++;// Search for an in-relation or equal-to-relation
// Make it sequential for now, not sure of paralleization side effects
if(query['$or']){cov_cxckea6v3().b[153][0]++;const ors=(cov_cxckea6v3().s[450]++,query['$or']);cov_cxckea6v3().s[451]++;return Promise.all(ors.map((aQuery,index)=>{cov_cxckea6v3().f[96]++;cov_cxckea6v3().s[452]++;return this.reduceInRelation(className,aQuery,schema).then(aQuery=>{cov_cxckea6v3().f[97]++;cov_cxckea6v3().s[453]++;query['$or'][index]=aQuery;});})).then(()=>{cov_cxckea6v3().f[98]++;cov_cxckea6v3().s[454]++;return Promise.resolve(query);});}else{cov_cxckea6v3().b[153][1]++;}cov_cxckea6v3().s[455]++;if(query['$and']){cov_cxckea6v3().b[154][0]++;const ands=(cov_cxckea6v3().s[456]++,query['$and']);cov_cxckea6v3().s[457]++;return Promise.all(ands.map((aQuery,index)=>{cov_cxckea6v3().f[99]++;cov_cxckea6v3().s[458]++;return this.reduceInRelation(className,aQuery,schema).then(aQuery=>{cov_cxckea6v3().f[100]++;cov_cxckea6v3().s[459]++;query['$and'][index]=aQuery;});})).then(()=>{cov_cxckea6v3().f[101]++;cov_cxckea6v3().s[460]++;return Promise.resolve(query);});}else{cov_cxckea6v3().b[154][1]++;}const promises=(cov_cxckea6v3().s[461]++,Object.keys(query).map(key=>{cov_cxckea6v3().f[102]++;const t=(cov_cxckea6v3().s[462]++,schema.getExpectedType(className,key));cov_cxckea6v3().s[463]++;if((cov_cxckea6v3().b[156][0]++,!t)||(cov_cxckea6v3().b[156][1]++,t.type!=='Relation')){cov_cxckea6v3().b[155][0]++;cov_cxckea6v3().s[464]++;return Promise.resolve(query);}else{cov_cxckea6v3().b[155][1]++;}let queries=(cov_cxckea6v3().s[465]++,null);cov_cxckea6v3().s[466]++;if((cov_cxckea6v3().b[158][0]++,query[key])&&((cov_cxckea6v3().b[158][1]++,query[key]['$in'])||(cov_cxckea6v3().b[158][2]++,query[key]['$ne'])||(cov_cxckea6v3().b[158][3]++,query[key]['$nin'])||(cov_cxckea6v3().b[158][4]++,query[key].__type=='Pointer'))){cov_cxckea6v3().b[157][0]++;cov_cxckea6v3().s[467]++;// Build the list of queries
queries=Object.keys(query[key]).map(constraintKey=>{cov_cxckea6v3().f[103]++;let relatedIds;let isNegation=(cov_cxckea6v3().s[468]++,false);cov_cxckea6v3().s[469]++;if(constraintKey==='objectId'){cov_cxckea6v3().b[159][0]++;cov_cxckea6v3().s[470]++;relatedIds=[query[key].objectId];}else{cov_cxckea6v3().b[159][1]++;cov_cxckea6v3().s[471]++;if(constraintKey=='$in'){cov_cxckea6v3().b[160][0]++;cov_cxckea6v3().s[472]++;relatedIds=query[key]['$in'].map(r=>{cov_cxckea6v3().f[104]++;cov_cxckea6v3().s[473]++;return r.objectId;});}else{cov_cxckea6v3().b[160][1]++;cov_cxckea6v3().s[474]++;if(constraintKey=='$nin'){cov_cxckea6v3().b[161][0]++;cov_cxckea6v3().s[475]++;isNegation=true;cov_cxckea6v3().s[476]++;relatedIds=query[key]['$nin'].map(r=>{cov_cxckea6v3().f[105]++;cov_cxckea6v3().s[477]++;return r.objectId;});}else{cov_cxckea6v3().b[161][1]++;cov_cxckea6v3().s[478]++;if(constraintKey=='$ne'){cov_cxckea6v3().b[162][0]++;cov_cxckea6v3().s[479]++;isNegation=true;cov_cxckea6v3().s[480]++;relatedIds=[query[key]['$ne'].objectId];}else{cov_cxckea6v3().b[162][1]++;cov_cxckea6v3().s[481]++;return;}}}}cov_cxckea6v3().s[482]++;return{isNegation,relatedIds};});}else{cov_cxckea6v3().b[157][1]++;cov_cxckea6v3().s[483]++;queries=[{isNegation:false,relatedIds:[]}];}// remove the current queryKey as we don,t need it anymore
cov_cxckea6v3().s[484]++;delete query[key];// execute each query independently to build the list of
// $in / $nin
const promises=(cov_cxckea6v3().s[485]++,queries.map(q=>{cov_cxckea6v3().f[106]++;cov_cxckea6v3().s[486]++;if(!q){cov_cxckea6v3().b[163][0]++;cov_cxckea6v3().s[487]++;return Promise.resolve();}else{cov_cxckea6v3().b[163][1]++;}cov_cxckea6v3().s[488]++;return this.owningIds(className,key,q.relatedIds).then(ids=>{cov_cxckea6v3().f[107]++;cov_cxckea6v3().s[489]++;if(q.isNegation){cov_cxckea6v3().b[164][0]++;cov_cxckea6v3().s[490]++;this.addNotInObjectIdsIds(ids,query);}else{cov_cxckea6v3().b[164][1]++;cov_cxckea6v3().s[491]++;this.addInObjectIdsIds(ids,query);}cov_cxckea6v3().s[492]++;return Promise.resolve();});}));cov_cxckea6v3().s[493]++;return Promise.all(promises).then(()=>{cov_cxckea6v3().f[108]++;cov_cxckea6v3().s[494]++;return Promise.resolve();});}));cov_cxckea6v3().s[495]++;return Promise.all(promises).then(()=>{cov_cxckea6v3().f[109]++;cov_cxckea6v3().s[496]++;return Promise.resolve(query);});}// Modifies query so that it no longer has $relatedTo
// Returns a promise that resolves when query is mutated
reduceRelationKeys(className,query,queryOptions){cov_cxckea6v3().f[110]++;cov_cxckea6v3().s[497]++;if(query['$or']){cov_cxckea6v3().b[165][0]++;cov_cxckea6v3().s[498]++;return Promise.all(query['$or'].map(aQuery=>{cov_cxckea6v3().f[111]++;cov_cxckea6v3().s[499]++;return this.reduceRelationKeys(className,aQuery,queryOptions);}));}else{cov_cxckea6v3().b[165][1]++;}cov_cxckea6v3().s[500]++;if(query['$and']){cov_cxckea6v3().b[166][0]++;cov_cxckea6v3().s[501]++;return Promise.all(query['$and'].map(aQuery=>{cov_cxckea6v3().f[112]++;cov_cxckea6v3().s[502]++;return this.reduceRelationKeys(className,aQuery,queryOptions);}));}else{cov_cxckea6v3().b[166][1]++;}var relatedTo=(cov_cxckea6v3().s[503]++,query['$relatedTo']);cov_cxckea6v3().s[504]++;if(relatedTo){cov_cxckea6v3().b[167][0]++;cov_cxckea6v3().s[505]++;return this.relatedIds(relatedTo.object.className,relatedTo.key,relatedTo.object.objectId,queryOptions).then(ids=>{cov_cxckea6v3().f[113]++;cov_cxckea6v3().s[506]++;delete query['$relatedTo'];cov_cxckea6v3().s[507]++;this.addInObjectIdsIds(ids,query);cov_cxckea6v3().s[508]++;return this.reduceRelationKeys(className,query,queryOptions);}).then(()=>{cov_cxckea6v3().f[114]++;});}else{cov_cxckea6v3().b[167][1]++;}}addInObjectIdsIds(ids=(cov_cxckea6v3().b[168][0]++,null),query){cov_cxckea6v3().f[115]++;const idsFromString=(cov_cxckea6v3().s[509]++,typeof query.objectId==='string'?(cov_cxckea6v3().b[169][0]++,[query.objectId]):(cov_cxckea6v3().b[169][1]++,null));const idsFromEq=(cov_cxckea6v3().s[510]++,(cov_cxckea6v3().b[171][0]++,query.objectId)&&(cov_cxckea6v3().b[171][1]++,query.objectId['$eq'])?(cov_cxckea6v3().b[170][0]++,[query.objectId['$eq']]):(cov_cxckea6v3().b[170][1]++,null));const idsFromIn=(cov_cxckea6v3().s[511]++,(cov_cxckea6v3().b[173][0]++,query.objectId)&&(cov_cxckea6v3().b[173][1]++,query.objectId['$in'])?(cov_cxckea6v3().b[172][0]++,query.objectId['$in']):(cov_cxckea6v3().b[172][1]++,null));// -disable-next
const allIds=(cov_cxckea6v3().s[512]++,[idsFromString,idsFromEq,idsFromIn,ids].filter(list=>{cov_cxckea6v3().f[116]++;cov_cxckea6v3().s[513]++;return list!==null;}));const totalLength=(cov_cxckea6v3().s[514]++,allIds.reduce((memo,list)=>{cov_cxckea6v3().f[117]++;cov_cxckea6v3().s[515]++;return memo+list.length;},0));let idsIntersection=(cov_cxckea6v3().s[516]++,[]);cov_cxckea6v3().s[517]++;if(totalLength>125){cov_cxckea6v3().b[174][0]++;cov_cxckea6v3().s[518]++;idsIntersection=_intersect.default.big(allIds);}else{cov_cxckea6v3().b[174][1]++;cov_cxckea6v3().s[519]++;idsIntersection=(0,_intersect.default)(allIds);}// Need to make sure we don't clobber existing shorthand $eq constraints on objectId.
cov_cxckea6v3().s[520]++;if(!('objectId'in query)){cov_cxckea6v3().b[175][0]++;cov_cxckea6v3().s[521]++;query.objectId={$in:undefined};}else{cov_cxckea6v3().b[175][1]++;cov_cxckea6v3().s[522]++;if(typeof query.objectId==='string'){cov_cxckea6v3().b[176][0]++;cov_cxckea6v3().s[523]++;query.objectId={$in:undefined,$eq:query.objectId};}else{cov_cxckea6v3().b[176][1]++;}}cov_cxckea6v3().s[524]++;query.objectId['$in']=idsIntersection;cov_cxckea6v3().s[525]++;return query;}addNotInObjectIdsIds(ids=(cov_cxckea6v3().b[177][0]++,[]),query){cov_cxckea6v3().f[118]++;const idsFromNin=(cov_cxckea6v3().s[526]++,(cov_cxckea6v3().b[179][0]++,query.objectId)&&(cov_cxckea6v3().b[179][1]++,query.objectId['$nin'])?(cov_cxckea6v3().b[178][0]++,query.objectId['$nin']):(cov_cxckea6v3().b[178][1]++,[]));let allIds=(cov_cxckea6v3().s[527]++,[...idsFromNin,...ids].filter(list=>{cov_cxckea6v3().f[119]++;cov_cxckea6v3().s[528]++;return list!==null;}));// make a set and spread to remove duplicates
cov_cxckea6v3().s[529]++;allIds=[...new Set(allIds)];// Need to make sure we don't clobber existing shorthand $eq constraints on objectId.
cov_cxckea6v3().s[530]++;if(!('objectId'in query)){cov_cxckea6v3().b[180][0]++;cov_cxckea6v3().s[531]++;query.objectId={$nin:undefined};}else{cov_cxckea6v3().b[180][1]++;cov_cxckea6v3().s[532]++;if(typeof query.objectId==='string'){cov_cxckea6v3().b[181][0]++;cov_cxckea6v3().s[533]++;query.objectId={$nin:undefined,$eq:query.objectId};}else{cov_cxckea6v3().b[181][1]++;}}cov_cxckea6v3().s[534]++;query.objectId['$nin']=allIds;cov_cxckea6v3().s[535]++;return query;}// Runs a query on the database.
// Returns a promise that resolves to a list of items.
// Options:
//   skip    number of results to skip.
//   limit   limit to this number of results.
//   sort    an object where keys are the fields to sort by.
//           the value is +1 for ascending, -1 for descending.
//   count   run a count instead of returning results.
//   acl     restrict this operation with an ACL for the provided array
//           of user objectIds and roles. acl: null means no user.
//           when this field is not present, don't do anything regarding ACLs.
//  caseInsensitive make string comparisons case insensitive
// TODO: make userIds not needed here. The db adapter shouldn't know
// anything about users, ideally. Then, improve the format of the ACL
// arg to work like the others.
find(className,query,{skip,limit,acl,sort=(cov_cxckea6v3().b[183][0]++,{}),count,keys,op,distinct,pipeline,readPreference,hint,caseInsensitive=(cov_cxckea6v3().b[184][0]++,false),explain}=(cov_cxckea6v3().b[182][0]++,{}),auth=(cov_cxckea6v3().b[185][0]++,{}),validSchemaController){cov_cxckea6v3().f[120]++;const isMaster=(cov_cxckea6v3().s[536]++,acl===undefined);const aclGroup=(cov_cxckea6v3().s[537]++,(cov_cxckea6v3().b[186][0]++,acl)||(cov_cxckea6v3().b[186][1]++,[]));cov_cxckea6v3().s[538]++;op=(cov_cxckea6v3().b[187][0]++,op)||(cov_cxckea6v3().b[187][1]++,(cov_cxckea6v3().b[189][0]++,typeof query.objectId=='string')&&(cov_cxckea6v3().b[189][1]++,Object.keys(query).length===1)?(cov_cxckea6v3().b[188][0]++,'get'):(cov_cxckea6v3().b[188][1]++,'find'));// Count operation if counting
cov_cxckea6v3().s[539]++;op=count===true?(cov_cxckea6v3().b[190][0]++,'count'):(cov_cxckea6v3().b[190][1]++,op);let classExists=(cov_cxckea6v3().s[540]++,true);cov_cxckea6v3().s[541]++;return this.loadSchemaIfNeeded(validSchemaController).then(schemaController=>{cov_cxckea6v3().f[121]++;cov_cxckea6v3().s[542]++;//Allow volatile classes if querying with Master (for _PushStatus)
//TODO: Move volatile classes concept into mongo adapter, postgres adapter shouldn't care
//that api.parse.com breaks when _PushStatus exists in mongo.
return schemaController.getOneSchema(className,isMaster).catch(error=>{cov_cxckea6v3().f[122]++;cov_cxckea6v3().s[543]++;// Behavior for non-existent classes is kinda weird on Parse.com. Probably doesn't matter too much.
// For now, pretend the class exists but has no objects,
if(error===undefined){cov_cxckea6v3().b[191][0]++;cov_cxckea6v3().s[544]++;classExists=false;cov_cxckea6v3().s[545]++;return{fields:{}};}else{cov_cxckea6v3().b[191][1]++;}cov_cxckea6v3().s[546]++;throw error;}).then(schema=>{cov_cxckea6v3().f[123]++;cov_cxckea6v3().s[547]++;// Parse.com treats queries on _created_at and _updated_at as if they were queries on createdAt and updatedAt,
// so duplicate that behavior here. If both are specified, the correct behavior to match Parse.com is to
// use the one that appears first in the sort list.
if(sort._created_at){cov_cxckea6v3().b[192][0]++;cov_cxckea6v3().s[548]++;sort.createdAt=sort._created_at;cov_cxckea6v3().s[549]++;delete sort._created_at;}else{cov_cxckea6v3().b[192][1]++;}cov_cxckea6v3().s[550]++;if(sort._updated_at){cov_cxckea6v3().b[193][0]++;cov_cxckea6v3().s[551]++;sort.updatedAt=sort._updated_at;cov_cxckea6v3().s[552]++;delete sort._updated_at;}else{cov_cxckea6v3().b[193][1]++;}const queryOptions=(cov_cxckea6v3().s[553]++,{skip,limit,sort,keys,readPreference,hint,caseInsensitive,explain});cov_cxckea6v3().s[554]++;Object.keys(sort).forEach(fieldName=>{cov_cxckea6v3().f[124]++;cov_cxckea6v3().s[555]++;if(fieldName.match(/^authData\.([a-zA-Z0-9_]+)\.id$/)){cov_cxckea6v3().b[194][0]++;cov_cxckea6v3().s[556]++;throw new _node.Parse.Error(_node.Parse.Error.INVALID_KEY_NAME,`Cannot sort by ${fieldName}`);}else{cov_cxckea6v3().b[194][1]++;}const rootFieldName=(cov_cxckea6v3().s[557]++,getRootFieldName(fieldName));cov_cxckea6v3().s[558]++;if(!SchemaController.fieldNameIsValid(rootFieldName,className)){cov_cxckea6v3().b[195][0]++;cov_cxckea6v3().s[559]++;throw new _node.Parse.Error(_node.Parse.Error.INVALID_KEY_NAME,`Invalid field name: ${fieldName}.`);}else{cov_cxckea6v3().b[195][1]++;}});cov_cxckea6v3().s[560]++;return(isMaster?(cov_cxckea6v3().b[196][0]++,Promise.resolve()):(cov_cxckea6v3().b[196][1]++,schemaController.validatePermission(className,aclGroup,op))).then(()=>{cov_cxckea6v3().f[125]++;cov_cxckea6v3().s[561]++;return this.reduceRelationKeys(className,query,queryOptions);}).then(()=>{cov_cxckea6v3().f[126]++;cov_cxckea6v3().s[562]++;return this.reduceInRelation(className,query,schemaController);}).then(()=>{cov_cxckea6v3().f[127]++;let protectedFields;cov_cxckea6v3().s[563]++;if(!isMaster){cov_cxckea6v3().b[197][0]++;cov_cxckea6v3().s[564]++;query=this.addPointerPermissions(schemaController,className,op,query,aclGroup);/* Don't use projections to optimize the protectedFields since the protectedFields
              based on pointer-permissions are determined after querying. The filtering can
              overwrite the protected fields. */cov_cxckea6v3().s[565]++;protectedFields=this.addProtectedFields(schemaController,className,query,aclGroup,auth,queryOptions);}else{cov_cxckea6v3().b[197][1]++;}cov_cxckea6v3().s[566]++;if(!query){cov_cxckea6v3().b[198][0]++;cov_cxckea6v3().s[567]++;if(op==='get'){cov_cxckea6v3().b[199][0]++;cov_cxckea6v3().s[568]++;throw new _node.Parse.Error(_node.Parse.Error.OBJECT_NOT_FOUND,'Object not found.');}else{cov_cxckea6v3().b[199][1]++;cov_cxckea6v3().s[569]++;return[];}}else{cov_cxckea6v3().b[198][1]++;}cov_cxckea6v3().s[570]++;if(!isMaster){cov_cxckea6v3().b[200][0]++;cov_cxckea6v3().s[571]++;if((cov_cxckea6v3().b[202][0]++,op==='update')||(cov_cxckea6v3().b[202][1]++,op==='delete')){cov_cxckea6v3().b[201][0]++;cov_cxckea6v3().s[572]++;query=addWriteACL(query,aclGroup);}else{cov_cxckea6v3().b[201][1]++;cov_cxckea6v3().s[573]++;query=addReadACL(query,aclGroup);}}else{cov_cxckea6v3().b[200][1]++;}cov_cxckea6v3().s[574]++;validateQuery(query);cov_cxckea6v3().s[575]++;if(count){cov_cxckea6v3().b[203][0]++;cov_cxckea6v3().s[576]++;if(!classExists){cov_cxckea6v3().b[204][0]++;cov_cxckea6v3().s[577]++;return 0;}else{cov_cxckea6v3().b[204][1]++;cov_cxckea6v3().s[578]++;return this.adapter.count(className,schema,query,readPreference,undefined,hint);}}else{cov_cxckea6v3().b[203][1]++;cov_cxckea6v3().s[579]++;if(distinct){cov_cxckea6v3().b[205][0]++;cov_cxckea6v3().s[580]++;if(!classExists){cov_cxckea6v3().b[206][0]++;cov_cxckea6v3().s[581]++;return[];}else{cov_cxckea6v3().b[206][1]++;cov_cxckea6v3().s[582]++;return this.adapter.distinct(className,schema,query,distinct);}}else{cov_cxckea6v3().b[205][1]++;cov_cxckea6v3().s[583]++;if(pipeline){cov_cxckea6v3().b[207][0]++;cov_cxckea6v3().s[584]++;if(!classExists){cov_cxckea6v3().b[208][0]++;cov_cxckea6v3().s[585]++;return[];}else{cov_cxckea6v3().b[208][1]++;cov_cxckea6v3().s[586]++;return this.adapter.aggregate(className,schema,pipeline,readPreference,hint,explain);}}else{cov_cxckea6v3().b[207][1]++;cov_cxckea6v3().s[587]++;if(explain){cov_cxckea6v3().b[209][0]++;cov_cxckea6v3().s[588]++;return this.adapter.find(className,schema,query,queryOptions);}else{cov_cxckea6v3().b[209][1]++;cov_cxckea6v3().s[589]++;return this.adapter.find(className,schema,query,queryOptions).then(objects=>{cov_cxckea6v3().f[128]++;cov_cxckea6v3().s[590]++;return objects.map(object=>{cov_cxckea6v3().f[129]++;cov_cxckea6v3().s[591]++;object=untransformObjectACL(object);cov_cxckea6v3().s[592]++;return filterSensitiveData(isMaster,aclGroup,auth,op,schemaController,className,protectedFields,object);});}).catch(error=>{cov_cxckea6v3().f[130]++;cov_cxckea6v3().s[593]++;throw new _node.Parse.Error(_node.Parse.Error.INTERNAL_SERVER_ERROR,error);});}}}}});});});}deleteSchema(className){cov_cxckea6v3().f[131]++;let schemaController;cov_cxckea6v3().s[594]++;return this.loadSchema({clearCache:true}).then(s=>{cov_cxckea6v3().f[132]++;cov_cxckea6v3().s[595]++;schemaController=s;cov_cxckea6v3().s[596]++;return schemaController.getOneSchema(className,true);}).catch(error=>{cov_cxckea6v3().f[133]++;cov_cxckea6v3().s[597]++;if(error===undefined){cov_cxckea6v3().b[210][0]++;cov_cxckea6v3().s[598]++;return{fields:{}};}else{cov_cxckea6v3().b[210][1]++;cov_cxckea6v3().s[599]++;throw error;}}).then(schema=>{cov_cxckea6v3().f[134]++;cov_cxckea6v3().s[600]++;return this.collectionExists(className).then(()=>{cov_cxckea6v3().f[135]++;cov_cxckea6v3().s[601]++;return this.adapter.count(className,{fields:{}},null,'',false);}).then(count=>{cov_cxckea6v3().f[136]++;cov_cxckea6v3().s[602]++;if(count>0){cov_cxckea6v3().b[211][0]++;cov_cxckea6v3().s[603]++;throw new _node.Parse.Error(255,`Class ${className} is not empty, contains ${count} objects, cannot drop schema.`);}else{cov_cxckea6v3().b[211][1]++;}cov_cxckea6v3().s[604]++;return this.adapter.deleteClass(className);}).then(wasParseCollection=>{cov_cxckea6v3().f[137]++;cov_cxckea6v3().s[605]++;if(wasParseCollection){cov_cxckea6v3().b[212][0]++;const relationFieldNames=(cov_cxckea6v3().s[606]++,Object.keys(schema.fields).filter(fieldName=>{cov_cxckea6v3().f[138]++;cov_cxckea6v3().s[607]++;return schema.fields[fieldName].type==='Relation';}));cov_cxckea6v3().s[608]++;return Promise.all(relationFieldNames.map(name=>{cov_cxckea6v3().f[139]++;cov_cxckea6v3().s[609]++;return this.adapter.deleteClass(joinTableName(className,name));})).then(()=>{cov_cxckea6v3().f[140]++;cov_cxckea6v3().s[610]++;_SchemaCache.default.del(className);cov_cxckea6v3().s[611]++;return schemaController.reloadData();});}else{cov_cxckea6v3().b[212][1]++;cov_cxckea6v3().s[612]++;return Promise.resolve();}});});}// This helps to create intermediate objects for simpler comparison of
// key value pairs used in query objects. Each key value pair will represented
// in a similar way to json
objectToEntriesStrings(query){cov_cxckea6v3().f[141]++;cov_cxckea6v3().s[613]++;return Object.entries(query).map(a=>{cov_cxckea6v3().f[142]++;cov_cxckea6v3().s[614]++;return a.map(s=>{cov_cxckea6v3().f[143]++;cov_cxckea6v3().s[615]++;return JSON.stringify(s);}).join(':');});}// Naive logic reducer for OR operations meant to be used only for pointer permissions.
reduceOrOperation(query){cov_cxckea6v3().f[144]++;cov_cxckea6v3().s[616]++;if(!query.$or){cov_cxckea6v3().b[213][0]++;cov_cxckea6v3().s[617]++;return query;}else{cov_cxckea6v3().b[213][1]++;}const queries=(cov_cxckea6v3().s[618]++,query.$or.map(q=>{cov_cxckea6v3().f[145]++;cov_cxckea6v3().s[619]++;return this.objectToEntriesStrings(q);}));let repeat=(cov_cxckea6v3().s[620]++,false);cov_cxckea6v3().s[621]++;do{cov_cxckea6v3().s[622]++;repeat=false;cov_cxckea6v3().s[623]++;for(let i=(cov_cxckea6v3().s[624]++,0);i<queries.length-1;i++){cov_cxckea6v3().s[625]++;for(let j=(cov_cxckea6v3().s[626]++,i+1);j<queries.length;j++){const[shorter,longer]=(cov_cxckea6v3().s[627]++,queries[i].length>queries[j].length?(cov_cxckea6v3().b[214][0]++,[j,i]):(cov_cxckea6v3().b[214][1]++,[i,j]));const foundEntries=(cov_cxckea6v3().s[628]++,queries[shorter].reduce((acc,entry)=>{cov_cxckea6v3().f[146]++;cov_cxckea6v3().s[629]++;return acc+(queries[longer].includes(entry)?(cov_cxckea6v3().b[215][0]++,1):(cov_cxckea6v3().b[215][1]++,0));},0));const shorterEntries=(cov_cxckea6v3().s[630]++,queries[shorter].length);cov_cxckea6v3().s[631]++;if(foundEntries===shorterEntries){cov_cxckea6v3().b[216][0]++;cov_cxckea6v3().s[632]++;// If the shorter query is completely contained in the longer one, we can strike
// out the longer query.
query.$or.splice(longer,1);cov_cxckea6v3().s[633]++;queries.splice(longer,1);cov_cxckea6v3().s[634]++;repeat=true;cov_cxckea6v3().s[635]++;break;}else{cov_cxckea6v3().b[216][1]++;}}}}while(repeat);cov_cxckea6v3().s[636]++;if(query.$or.length===1){cov_cxckea6v3().b[217][0]++;cov_cxckea6v3().s[637]++;query=_objectSpread(_objectSpread({},query),query.$or[0]);cov_cxckea6v3().s[638]++;delete query.$or;}else{cov_cxckea6v3().b[217][1]++;}cov_cxckea6v3().s[639]++;return query;}// Naive logic reducer for AND operations meant to be used only for pointer permissions.
reduceAndOperation(query){cov_cxckea6v3().f[147]++;cov_cxckea6v3().s[640]++;if(!query.$and){cov_cxckea6v3().b[218][0]++;cov_cxckea6v3().s[641]++;return query;}else{cov_cxckea6v3().b[218][1]++;}const queries=(cov_cxckea6v3().s[642]++,query.$and.map(q=>{cov_cxckea6v3().f[148]++;cov_cxckea6v3().s[643]++;return this.objectToEntriesStrings(q);}));let repeat=(cov_cxckea6v3().s[644]++,false);cov_cxckea6v3().s[645]++;do{cov_cxckea6v3().s[646]++;repeat=false;cov_cxckea6v3().s[647]++;for(let i=(cov_cxckea6v3().s[648]++,0);i<queries.length-1;i++){cov_cxckea6v3().s[649]++;for(let j=(cov_cxckea6v3().s[650]++,i+1);j<queries.length;j++){const[shorter,longer]=(cov_cxckea6v3().s[651]++,queries[i].length>queries[j].length?(cov_cxckea6v3().b[219][0]++,[j,i]):(cov_cxckea6v3().b[219][1]++,[i,j]));const foundEntries=(cov_cxckea6v3().s[652]++,queries[shorter].reduce((acc,entry)=>{cov_cxckea6v3().f[149]++;cov_cxckea6v3().s[653]++;return acc+(queries[longer].includes(entry)?(cov_cxckea6v3().b[220][0]++,1):(cov_cxckea6v3().b[220][1]++,0));},0));const shorterEntries=(cov_cxckea6v3().s[654]++,queries[shorter].length);cov_cxckea6v3().s[655]++;if(foundEntries===shorterEntries){cov_cxckea6v3().b[221][0]++;cov_cxckea6v3().s[656]++;// If the shorter query is completely contained in the longer one, we can strike
// out the shorter query.
query.$and.splice(shorter,1);cov_cxckea6v3().s[657]++;queries.splice(shorter,1);cov_cxckea6v3().s[658]++;repeat=true;cov_cxckea6v3().s[659]++;break;}else{cov_cxckea6v3().b[221][1]++;}}}}while(repeat);cov_cxckea6v3().s[660]++;if(query.$and.length===1){cov_cxckea6v3().b[222][0]++;cov_cxckea6v3().s[661]++;query=_objectSpread(_objectSpread({},query),query.$and[0]);cov_cxckea6v3().s[662]++;delete query.$and;}else{cov_cxckea6v3().b[222][1]++;}cov_cxckea6v3().s[663]++;return query;}// Constraints query using CLP's pointer permissions (PP) if any.
// 1. Etract the user id from caller's ACLgroup;
// 2. Exctract a list of field names that are PP for target collection and operation;
// 3. Constraint the original query so that each PP field must
// point to caller's id (or contain it in case of PP field being an array)
addPointerPermissions(schema,className,operation,query,aclGroup=(cov_cxckea6v3().b[223][0]++,[])){cov_cxckea6v3().f[150]++;cov_cxckea6v3().s[664]++;// Check if class has public permission for operation
// If the BaseCLP pass, let go through
if(schema.testPermissionsForClassName(className,aclGroup,operation)){cov_cxckea6v3().b[224][0]++;cov_cxckea6v3().s[665]++;return query;}else{cov_cxckea6v3().b[224][1]++;}const perms=(cov_cxckea6v3().s[666]++,schema.getClassLevelPermissions(className));const userACL=(cov_cxckea6v3().s[667]++,aclGroup.filter(acl=>{cov_cxckea6v3().f[151]++;cov_cxckea6v3().s[668]++;return(cov_cxckea6v3().b[225][0]++,acl.indexOf('role:')!=0)&&(cov_cxckea6v3().b[225][1]++,acl!='*');}));const groupKey=(cov_cxckea6v3().s[669]++,['get','find','count'].indexOf(operation)>-1?(cov_cxckea6v3().b[226][0]++,'readUserFields'):(cov_cxckea6v3().b[226][1]++,'writeUserFields'));const permFields=(cov_cxckea6v3().s[670]++,[]);cov_cxckea6v3().s[671]++;if((cov_cxckea6v3().b[228][0]++,perms[operation])&&(cov_cxckea6v3().b[228][1]++,perms[operation].pointerFields)){cov_cxckea6v3().b[227][0]++;cov_cxckea6v3().s[672]++;permFields.push(...perms[operation].pointerFields);}else{cov_cxckea6v3().b[227][1]++;}cov_cxckea6v3().s[673]++;if(perms[groupKey]){cov_cxckea6v3().b[229][0]++;cov_cxckea6v3().s[674]++;for(const field of perms[groupKey]){cov_cxckea6v3().s[675]++;if(!permFields.includes(field)){cov_cxckea6v3().b[230][0]++;cov_cxckea6v3().s[676]++;permFields.push(field);}else{cov_cxckea6v3().b[230][1]++;}}}else{cov_cxckea6v3().b[229][1]++;}// the ACL should have exactly 1 user
cov_cxckea6v3().s[677]++;if(permFields.length>0){cov_cxckea6v3().b[231][0]++;cov_cxckea6v3().s[678]++;// the ACL should have exactly 1 user
// No user set return undefined
// If the length is > 1, that means we didn't de-dupe users correctly
if(userACL.length!=1){cov_cxckea6v3().b[232][0]++;cov_cxckea6v3().s[679]++;return;}else{cov_cxckea6v3().b[232][1]++;}const userId=(cov_cxckea6v3().s[680]++,userACL[0]);const userPointer=(cov_cxckea6v3().s[681]++,{__type:'Pointer',className:'_User',objectId:userId});const queries=(cov_cxckea6v3().s[682]++,permFields.map(key=>{cov_cxckea6v3().f[152]++;const fieldDescriptor=(cov_cxckea6v3().s[683]++,schema.getExpectedType(className,key));const fieldType=(cov_cxckea6v3().s[684]++,(cov_cxckea6v3().b[234][0]++,fieldDescriptor)&&(cov_cxckea6v3().b[234][1]++,typeof fieldDescriptor==='object')&&(cov_cxckea6v3().b[234][2]++,Object.prototype.hasOwnProperty.call(fieldDescriptor,'type'))?(cov_cxckea6v3().b[233][0]++,fieldDescriptor.type):(cov_cxckea6v3().b[233][1]++,null));let queryClause;cov_cxckea6v3().s[685]++;if(fieldType==='Pointer'){cov_cxckea6v3().b[235][0]++;cov_cxckea6v3().s[686]++;// constraint for single pointer setup
queryClause={[key]:userPointer};}else{cov_cxckea6v3().b[235][1]++;cov_cxckea6v3().s[687]++;if(fieldType==='Array'){cov_cxckea6v3().b[236][0]++;cov_cxckea6v3().s[688]++;// constraint for users-array setup
queryClause={[key]:{$all:[userPointer]}};}else{cov_cxckea6v3().b[236][1]++;cov_cxckea6v3().s[689]++;if(fieldType==='Object'){cov_cxckea6v3().b[237][0]++;cov_cxckea6v3().s[690]++;// constraint for object setup
queryClause={[key]:userPointer};}else{cov_cxckea6v3().b[237][1]++;cov_cxckea6v3().s[691]++;// This means that there is a CLP field of an unexpected type. This condition should not happen, which is
// why is being treated as an error.
throw Error(`An unexpected condition occurred when resolving pointer permissions: ${className} ${key}`);}}}// if we already have a constraint on the key, use the $and
cov_cxckea6v3().s[692]++;if(Object.prototype.hasOwnProperty.call(query,key)){cov_cxckea6v3().b[238][0]++;cov_cxckea6v3().s[693]++;return this.reduceAndOperation({$and:[queryClause,query]});}else{cov_cxckea6v3().b[238][1]++;}// otherwise just add the constaint
cov_cxckea6v3().s[694]++;return Object.assign({},query,queryClause);}));cov_cxckea6v3().s[695]++;return queries.length===1?(cov_cxckea6v3().b[239][0]++,queries[0]):(cov_cxckea6v3().b[239][1]++,this.reduceOrOperation({$or:queries}));}else{cov_cxckea6v3().b[231][1]++;cov_cxckea6v3().s[696]++;return query;}}addProtectedFields(schema,className,query=(cov_cxckea6v3().b[240][0]++,{}),aclGroup=(cov_cxckea6v3().b[241][0]++,[]),auth=(cov_cxckea6v3().b[242][0]++,{}),queryOptions=(cov_cxckea6v3().b[243][0]++,{})){cov_cxckea6v3().f[153]++;const perms=(cov_cxckea6v3().s[697]++,schema.getClassLevelPermissions(className));cov_cxckea6v3().s[698]++;if(!perms){cov_cxckea6v3().b[244][0]++;cov_cxckea6v3().s[699]++;return null;}else{cov_cxckea6v3().b[244][1]++;}const protectedFields=(cov_cxckea6v3().s[700]++,perms.protectedFields);cov_cxckea6v3().s[701]++;if(!protectedFields){cov_cxckea6v3().b[245][0]++;cov_cxckea6v3().s[702]++;return null;}else{cov_cxckea6v3().b[245][1]++;}cov_cxckea6v3().s[703]++;if(aclGroup.indexOf(query.objectId)>-1){cov_cxckea6v3().b[246][0]++;cov_cxckea6v3().s[704]++;return null;}else{cov_cxckea6v3().b[246][1]++;}// for queries where "keys" are set and do not include all 'userField':{field},
// we have to transparently include it, and then remove before returning to client
// Because if such key not projected the permission won't be enforced properly
// PS this is called when 'excludeKeys' already reduced to 'keys'
const preserveKeys=(cov_cxckea6v3().s[705]++,queryOptions.keys);// these are keys that need to be included only
// to be able to apply protectedFields by pointer
// and then unset before returning to client (later in  filterSensitiveFields)
const serverOnlyKeys=(cov_cxckea6v3().s[706]++,[]);const authenticated=(cov_cxckea6v3().s[707]++,auth.user);// map to allow check without array search
const roles=(cov_cxckea6v3().s[708]++,((cov_cxckea6v3().b[247][0]++,auth.userRoles)||(cov_cxckea6v3().b[247][1]++,[])).reduce((acc,r)=>{cov_cxckea6v3().f[154]++;cov_cxckea6v3().s[709]++;acc[r]=protectedFields[r];cov_cxckea6v3().s[710]++;return acc;},{}));// array of sets of protected fields. separate item for each applicable criteria
const protectedKeysSets=(cov_cxckea6v3().s[711]++,[]);cov_cxckea6v3().s[712]++;for(const key in protectedFields){cov_cxckea6v3().s[713]++;// skip userFields
if(key.startsWith('userField:')){cov_cxckea6v3().b[248][0]++;cov_cxckea6v3().s[714]++;if(preserveKeys){cov_cxckea6v3().b[249][0]++;const fieldName=(cov_cxckea6v3().s[715]++,key.substring(10));cov_cxckea6v3().s[716]++;if(!preserveKeys.includes(fieldName)){cov_cxckea6v3().b[250][0]++;cov_cxckea6v3().s[717]++;// 1. put it there temporarily
(cov_cxckea6v3().b[251][0]++,queryOptions.keys)&&(cov_cxckea6v3().b[251][1]++,queryOptions.keys.push(fieldName));// 2. preserve it delete later
cov_cxckea6v3().s[718]++;serverOnlyKeys.push(fieldName);}else{cov_cxckea6v3().b[250][1]++;}}else{cov_cxckea6v3().b[249][1]++;}cov_cxckea6v3().s[719]++;continue;}else{cov_cxckea6v3().b[248][1]++;}// add public tier
cov_cxckea6v3().s[720]++;if(key==='*'){cov_cxckea6v3().b[252][0]++;cov_cxckea6v3().s[721]++;protectedKeysSets.push(protectedFields[key]);cov_cxckea6v3().s[722]++;continue;}else{cov_cxckea6v3().b[252][1]++;}cov_cxckea6v3().s[723]++;if(authenticated){cov_cxckea6v3().b[253][0]++;cov_cxckea6v3().s[724]++;if(key==='authenticated'){cov_cxckea6v3().b[254][0]++;cov_cxckea6v3().s[725]++;// for logged in users
protectedKeysSets.push(protectedFields[key]);cov_cxckea6v3().s[726]++;continue;}else{cov_cxckea6v3().b[254][1]++;}cov_cxckea6v3().s[727]++;if((cov_cxckea6v3().b[256][0]++,roles[key])&&(cov_cxckea6v3().b[256][1]++,key.startsWith('role:'))){cov_cxckea6v3().b[255][0]++;cov_cxckea6v3().s[728]++;// add applicable roles
protectedKeysSets.push(roles[key]);}else{cov_cxckea6v3().b[255][1]++;}}else{cov_cxckea6v3().b[253][1]++;}}// check if there's a rule for current user's id
cov_cxckea6v3().s[729]++;if(authenticated){cov_cxckea6v3().b[257][0]++;const userId=(cov_cxckea6v3().s[730]++,auth.user.id);cov_cxckea6v3().s[731]++;if(perms.protectedFields[userId]){cov_cxckea6v3().b[258][0]++;cov_cxckea6v3().s[732]++;protectedKeysSets.push(perms.protectedFields[userId]);}else{cov_cxckea6v3().b[258][1]++;}}else{cov_cxckea6v3().b[257][1]++;}// preserve fields to be removed before sending response to client
cov_cxckea6v3().s[733]++;if(serverOnlyKeys.length>0){cov_cxckea6v3().b[259][0]++;cov_cxckea6v3().s[734]++;perms.protectedFields.temporaryKeys=serverOnlyKeys;}else{cov_cxckea6v3().b[259][1]++;}let protectedKeys=(cov_cxckea6v3().s[735]++,protectedKeysSets.reduce((acc,next)=>{cov_cxckea6v3().f[155]++;cov_cxckea6v3().s[736]++;if(next){cov_cxckea6v3().b[260][0]++;cov_cxckea6v3().s[737]++;acc.push(...next);}else{cov_cxckea6v3().b[260][1]++;}cov_cxckea6v3().s[738]++;return acc;},[]));// intersect all sets of protectedFields
cov_cxckea6v3().s[739]++;protectedKeysSets.forEach(fields=>{cov_cxckea6v3().f[156]++;cov_cxckea6v3().s[740]++;if(fields){cov_cxckea6v3().b[261][0]++;cov_cxckea6v3().s[741]++;protectedKeys=protectedKeys.filter(v=>{cov_cxckea6v3().f[157]++;cov_cxckea6v3().s[742]++;return fields.includes(v);});}else{cov_cxckea6v3().b[261][1]++;}});cov_cxckea6v3().s[743]++;return protectedKeys;}createTransactionalSession(){cov_cxckea6v3().f[158]++;cov_cxckea6v3().s[744]++;return this.adapter.createTransactionalSession().then(transactionalSession=>{cov_cxckea6v3().f[159]++;cov_cxckea6v3().s[745]++;this._transactionalSession=transactionalSession;});}commitTransactionalSession(){cov_cxckea6v3().f[160]++;cov_cxckea6v3().s[746]++;if(!this._transactionalSession){cov_cxckea6v3().b[262][0]++;cov_cxckea6v3().s[747]++;throw new Error('There is no transactional session to commit');}else{cov_cxckea6v3().b[262][1]++;}cov_cxckea6v3().s[748]++;return this.adapter.commitTransactionalSession(this._transactionalSession).then(()=>{cov_cxckea6v3().f[161]++;cov_cxckea6v3().s[749]++;this._transactionalSession=null;});}abortTransactionalSession(){cov_cxckea6v3().f[162]++;cov_cxckea6v3().s[750]++;if(!this._transactionalSession){cov_cxckea6v3().b[263][0]++;cov_cxckea6v3().s[751]++;throw new Error('There is no transactional session to abort');}else{cov_cxckea6v3().b[263][1]++;}cov_cxckea6v3().s[752]++;return this.adapter.abortTransactionalSession(this._transactionalSession).then(()=>{cov_cxckea6v3().f[163]++;cov_cxckea6v3().s[753]++;this._transactionalSession=null;});}// TODO: create indexes on first creation of a _User object. Otherwise it's impossible to
// have a Parse app without it having a _User collection.
async performInitialization(){cov_cxckea6v3().f[164]++;cov_cxckea6v3().s[754]++;await this.adapter.performInitialization({VolatileClassesSchemas:SchemaController.VolatileClassesSchemas});const requiredUserFields=(cov_cxckea6v3().s[755]++,{fields:_objectSpread(_objectSpread({},SchemaController.defaultColumns._Default),SchemaController.defaultColumns._User)});const requiredRoleFields=(cov_cxckea6v3().s[756]++,{fields:_objectSpread(_objectSpread({},SchemaController.defaultColumns._Default),SchemaController.defaultColumns._Role)});const requiredIdempotencyFields=(cov_cxckea6v3().s[757]++,{fields:_objectSpread(_objectSpread({},SchemaController.defaultColumns._Default),SchemaController.defaultColumns._Idempotency)});cov_cxckea6v3().s[758]++;await this.loadSchema().then(schema=>{cov_cxckea6v3().f[165]++;cov_cxckea6v3().s[759]++;return schema.enforceClassExists('_User');});cov_cxckea6v3().s[760]++;await this.loadSchema().then(schema=>{cov_cxckea6v3().f[166]++;cov_cxckea6v3().s[761]++;return schema.enforceClassExists('_Role');});cov_cxckea6v3().s[762]++;if(this.adapter instanceof _MongoStorageAdapter.default){cov_cxckea6v3().b[264][0]++;cov_cxckea6v3().s[763]++;await this.loadSchema().then(schema=>{cov_cxckea6v3().f[167]++;cov_cxckea6v3().s[764]++;return schema.enforceClassExists('_Idempotency');});}else{cov_cxckea6v3().b[264][1]++;}cov_cxckea6v3().s[765]++;await this.adapter.ensureUniqueness('_User',requiredUserFields,['username']).catch(error=>{cov_cxckea6v3().f[168]++;cov_cxckea6v3().s[766]++;_logger.default.warn('Unable to ensure uniqueness for usernames: ',error);cov_cxckea6v3().s[767]++;throw error;});cov_cxckea6v3().s[768]++;await this.adapter.ensureIndex('_User',requiredUserFields,['username'],'case_insensitive_username',true).catch(error=>{cov_cxckea6v3().f[169]++;cov_cxckea6v3().s[769]++;_logger.default.warn('Unable to create case insensitive username index: ',error);cov_cxckea6v3().s[770]++;throw error;});cov_cxckea6v3().s[771]++;await this.adapter.ensureIndex('_User',requiredUserFields,['username'],'case_insensitive_username',true).catch(error=>{cov_cxckea6v3().f[170]++;cov_cxckea6v3().s[772]++;_logger.default.warn('Unable to create case insensitive username index: ',error);cov_cxckea6v3().s[773]++;throw error;});cov_cxckea6v3().s[774]++;await this.adapter.ensureUniqueness('_User',requiredUserFields,['email']).catch(error=>{cov_cxckea6v3().f[171]++;cov_cxckea6v3().s[775]++;_logger.default.warn('Unable to ensure uniqueness for user email addresses: ',error);cov_cxckea6v3().s[776]++;throw error;});cov_cxckea6v3().s[777]++;await this.adapter.ensureIndex('_User',requiredUserFields,['email'],'case_insensitive_email',true).catch(error=>{cov_cxckea6v3().f[172]++;cov_cxckea6v3().s[778]++;_logger.default.warn('Unable to create case insensitive email index: ',error);cov_cxckea6v3().s[779]++;throw error;});cov_cxckea6v3().s[780]++;await this.adapter.ensureUniqueness('_Role',requiredRoleFields,['name']).catch(error=>{cov_cxckea6v3().f[173]++;cov_cxckea6v3().s[781]++;_logger.default.warn('Unable to ensure uniqueness for role name: ',error);cov_cxckea6v3().s[782]++;throw error;});cov_cxckea6v3().s[783]++;if(this.adapter instanceof _MongoStorageAdapter.default){cov_cxckea6v3().b[265][0]++;cov_cxckea6v3().s[784]++;await this.adapter.ensureUniqueness('_Idempotency',requiredIdempotencyFields,['reqId']).catch(error=>{cov_cxckea6v3().f[174]++;cov_cxckea6v3().s[785]++;_logger.default.warn('Unable to ensure uniqueness for idempotency request ID: ',error);cov_cxckea6v3().s[786]++;throw error;});cov_cxckea6v3().s[787]++;await this.adapter.ensureIndex('_Idempotency',requiredIdempotencyFields,['expire'],'ttl',false,{ttl:0}).catch(error=>{cov_cxckea6v3().f[175]++;cov_cxckea6v3().s[788]++;_logger.default.warn('Unable to create TTL index for idempotency expire date: ',error);cov_cxckea6v3().s[789]++;throw error;});}else{cov_cxckea6v3().b[265][1]++;}cov_cxckea6v3().s[790]++;await this.adapter.updateSchemaWithIndexes();}}cov_cxckea6v3().s[791]++;module.exports=DatabaseController;// Expose validateQuery for tests
cov_cxckea6v3().s[792]++;module.exports._validateQuery=validateQuery;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,