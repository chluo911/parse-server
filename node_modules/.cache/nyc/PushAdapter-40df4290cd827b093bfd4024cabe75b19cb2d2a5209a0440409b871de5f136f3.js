"use strict";function cov_2rhgtyfy0g(){var path="/parse-server/lib/Adapters/Push/PushAdapter.js";var hash="0f53f2ee30dc37df3051a8139a1302cda5f571d0";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Adapters/Push/PushAdapter.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:47}},"2":{start:{line:42,column:4},end:{line:42,column:14}},"3":{start:{line:47,column:0},end:{line:47,column:34}},"4":{start:{line:48,column:15},end:{line:48,column:26}},"5":{start:{line:49,column:0},end:{line:49,column:27}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:34,column:2},end:{line:34,column:3}},loc:{start:{line:34,column:40},end:{line:34,column:42}},line:34},"1":{name:"(anonymous_1)",decl:{start:{line:41,column:2},end:{line:41,column:3}},loc:{start:{line:41,column:22},end:{line:43,column:3}},line:41}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0,"1":0},b:{},inputSourceMap:{version:3,sources:["../../../src/Adapters/Push/PushAdapter.js"],names:["PushAdapter","send","body","installations","pushStatus","getValidPushTypes"],mappings:";;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA;AACA;AACA;AACO,MAAMA,WAAN,CAAkB;AACvB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,IAAI,CAACC,IAAD,EAAYC,aAAZ,EAAkCC,UAAlC,EAAgE,CAAE;AAEtE;AACF;AACA;AACA;;;AACEC,EAAAA,iBAAiB,GAAa;AAC5B,WAAO,EAAP;AACD;;AAfsB;;;eAkBVL,W",sourcesContent:["// @flow\n/*eslint no-unused-vars: \"off\"*/\n// Push Adapter\n//\n// Allows you to change the push notification mechanism.\n//\n// Adapter classes must implement the following functions:\n// * getValidPushTypes()\n// * send(devices, installations, pushStatus)\n//\n// Default is ParsePushAdapter, which uses GCM for\n// android push and APNS for ios push.\n\n/**\n * @module Adapters\n */\n/**\n * @interface PushAdapter\n */\nexport class PushAdapter {\n  /**\n   * @param {any} body\n   * @param {Parse.Installation[]} installations\n   * @param {any} pushStatus\n   * @returns {Promise}\n   */\n  send(body: any, installations: any[], pushStatus: any): ?Promise<*> {}\n\n  /**\n   * Get an array of valid push types.\n   * @returns {Array} An array of valid push types\n   */\n  getValidPushTypes(): string[] {\n    return [];\n  }\n}\n\nexport default PushAdapter;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"0f53f2ee30dc37df3051a8139a1302cda5f571d0"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2rhgtyfy0g=function(){return actualCoverage;};}return actualCoverage;}cov_2rhgtyfy0g();cov_2rhgtyfy0g().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2rhgtyfy0g().s[1]++;exports.default=exports.PushAdapter=void 0;/*eslint no-unused-vars: "off"*/ // Push Adapter
//
// Allows you to change the push notification mechanism.
//
// Adapter classes must implement the following functions:
// * getValidPushTypes()
// * send(devices, installations, pushStatus)
//
// Default is ParsePushAdapter, which uses GCM for
// android push and APNS for ios push.
/**
 * @module Adapters
 */ /**
 * @interface PushAdapter
 */class PushAdapter{/**
   * @param {any} body
   * @param {Parse.Installation[]} installations
   * @param {any} pushStatus
   * @returns {Promise}
   */send(body,installations,pushStatus){cov_2rhgtyfy0g().f[0]++;}/**
   * Get an array of valid push types.
   * @returns {Array} An array of valid push types
   */getValidPushTypes(){cov_2rhgtyfy0g().f[1]++;cov_2rhgtyfy0g().s[2]++;return[];}}cov_2rhgtyfy0g().s[3]++;exports.PushAdapter=PushAdapter;var _default=(cov_2rhgtyfy0g().s[4]++,PushAdapter);cov_2rhgtyfy0g().s[5]++;exports.default=_default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9QdXNoL1B1c2hBZGFwdGVyLmpzIl0sIm5hbWVzIjpbIlB1c2hBZGFwdGVyIiwic2VuZCIsImJvZHkiLCJpbnN0YWxsYXRpb25zIiwicHVzaFN0YXR1cyIsImdldFZhbGlkUHVzaFR5cGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsV0FBTixDQUFrQjtBQUN2QjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRUMsRUFBQUEsSUFBSSxDQUFDQyxJQUFELEVBQVlDLGFBQVosRUFBa0NDLFVBQWxDLEVBQWdFLENBQUU7QUFFdEU7QUFDRjtBQUNBO0FBQ0E7OztBQUNFQyxFQUFBQSxpQkFBaUIsR0FBYTtBQUM1QixXQUFPLEVBQVA7QUFDRDs7QUFmc0I7OztlQWtCVkwsVyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG4vKmVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiovXG4vLyBQdXNoIEFkYXB0ZXJcbi8vXG4vLyBBbGxvd3MgeW91IHRvIGNoYW5nZSB0aGUgcHVzaCBub3RpZmljYXRpb24gbWVjaGFuaXNtLlxuLy9cbi8vIEFkYXB0ZXIgY2xhc3NlcyBtdXN0IGltcGxlbWVudCB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uczpcbi8vICogZ2V0VmFsaWRQdXNoVHlwZXMoKVxuLy8gKiBzZW5kKGRldmljZXMsIGluc3RhbGxhdGlvbnMsIHB1c2hTdGF0dXMpXG4vL1xuLy8gRGVmYXVsdCBpcyBQYXJzZVB1c2hBZGFwdGVyLCB3aGljaCB1c2VzIEdDTSBmb3Jcbi8vIGFuZHJvaWQgcHVzaCBhbmQgQVBOUyBmb3IgaW9zIHB1c2guXG5cbi8qKlxuICogQG1vZHVsZSBBZGFwdGVyc1xuICovXG4vKipcbiAqIEBpbnRlcmZhY2UgUHVzaEFkYXB0ZXJcbiAqL1xuZXhwb3J0IGNsYXNzIFB1c2hBZGFwdGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSBib2R5XG4gICAqIEBwYXJhbSB7UGFyc2UuSW5zdGFsbGF0aW9uW119IGluc3RhbGxhdGlvbnNcbiAgICogQHBhcmFtIHthbnl9IHB1c2hTdGF0dXNcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBzZW5kKGJvZHk6IGFueSwgaW5zdGFsbGF0aW9uczogYW55W10sIHB1c2hTdGF0dXM6IGFueSk6ID9Qcm9taXNlPCo+IHt9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBhcnJheSBvZiB2YWxpZCBwdXNoIHR5cGVzLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IEFuIGFycmF5IG9mIHZhbGlkIHB1c2ggdHlwZXNcbiAgICovXG4gIGdldFZhbGlkUHVzaFR5cGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUHVzaEFkYXB0ZXI7XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9QdXNoL1B1c2hBZGFwdGVyLmpzIl0sIm5hbWVzIjpbInNlbmQiLCJnZXRWYWxpZFB1c2hUeXBlcyIsIlB1c2hBZGFwdGVyIl0sIm1hcHBpbmdzIjoia2tGQVNBOytPQVJBLGdDLENBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0EsRyxDQUNBO0FBQ0E7QUFDQSxHQUNPLEtBQUEsQ0FBQSxXQUFrQixDQUN2QjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FDRUEsSUFBSSxDQUFBLElBQUEsQ0FBQSxhQUFBLENBQUEsVUFBQSxDQUFnRSx5QkFBRSxDQUV0RTtBQUNGO0FBQ0E7QUFDQSxLQUNFQyxpQkFBaUIsRUFBYSxpREFDNUIsTUFBQSxFQUFBLENBQ0QsQ0Fmc0IsQyw4RkFrQlZDLFciLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuLyplc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIqL1xuLy8gUHVzaCBBZGFwdGVyXG4vL1xuLy8gQWxsb3dzIHlvdSB0byBjaGFuZ2UgdGhlIHB1c2ggbm90aWZpY2F0aW9uIG1lY2hhbmlzbS5cbi8vXG4vLyBBZGFwdGVyIGNsYXNzZXMgbXVzdCBpbXBsZW1lbnQgdGhlIGZvbGxvd2luZyBmdW5jdGlvbnM6XG4vLyAqIGdldFZhbGlkUHVzaFR5cGVzKClcbi8vICogc2VuZChkZXZpY2VzLCBpbnN0YWxsYXRpb25zLCBwdXNoU3RhdHVzKVxuLy9cbi8vIERlZmF1bHQgaXMgUGFyc2VQdXNoQWRhcHRlciwgd2hpY2ggdXNlcyBHQ00gZm9yXG4vLyBhbmRyb2lkIHB1c2ggYW5kIEFQTlMgZm9yIGlvcyBwdXNoLlxuXG4vKipcbiAqIEBtb2R1bGUgQWRhcHRlcnNcbiAqL1xuLyoqXG4gKiBAaW50ZXJmYWNlIFB1c2hBZGFwdGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBQdXNoQWRhcHRlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gYm9keVxuICAgKiBAcGFyYW0ge1BhcnNlLkluc3RhbGxhdGlvbltdfSBpbnN0YWxsYXRpb25zXG4gICAqIEBwYXJhbSB7YW55fSBwdXNoU3RhdHVzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgc2VuZChib2R5OiBhbnksIGluc3RhbGxhdGlvbnM6IGFueVtdLCBwdXNoU3RhdHVzOiBhbnkpOiA/UHJvbWlzZTwqPiB7fVxuXG4gIC8qKlxuICAgKiBHZXQgYW4gYXJyYXkgb2YgdmFsaWQgcHVzaCB0eXBlcy5cbiAgICogQHJldHVybnMge0FycmF5fSBBbiBhcnJheSBvZiB2YWxpZCBwdXNoIHR5cGVzXG4gICAqL1xuICBnZXRWYWxpZFB1c2hUeXBlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFB1c2hBZGFwdGVyO1xuIl19