{"version":3,"sources":["../../../src/GraphQL/transformers/mutation.js"],"names":["transformTypes","inputType","fields","className","parseGraphQLSchema","req","classGraphQLCreateType","classGraphQLUpdateType","config","isCreateEnabled","isUpdateEnabled","parseClassTypes","parseClass","parseClasses","find","clazz","classGraphQLCreateTypeFields","getFields","classGraphQLUpdateTypeFields","promises","Object","keys","map","field","inputTypeField","type","defaultGraphQLTypes","GEO_POINT_INPUT","__op","transformers","geoPoint","POLYGON_INPUT","polygon","FILE_INPUT","file","relation","targetClass","pointer","Promise","all","ACL","input","upload","fileInfo","__type","name","url","Parse","Error","FILE_SAVE_ERROR","value","coordinates","latitude","longitude","parseACL","public","read","write","users","forEach","rule","globalIdObject","userId","id","roles","roleName","auth","info","length","INVALID_POINTER","op","ops","nestedObjectsToAdd","createAndAdd","parseFields","objectsMutations","createObject","object","objectId","add","push","objects","remove","nestedObjectToAdd","createAndLink","link"],"mappings":"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","sourcesContent":["import Parse from 'parse/node';\nimport { fromGlobalId } from 'graphql-relay';\nimport { handleUpload } from '../loaders/filesMutations';\nimport * as defaultGraphQLTypes from '../loaders/defaultGraphQLTypes';\nimport * as objectsMutations from '../helpers/objectsMutations';\n\nconst transformTypes = async (\n  inputType: 'create' | 'update',\n  fields,\n  { className, parseGraphQLSchema, req }\n) => {\n  const {\n    classGraphQLCreateType,\n    classGraphQLUpdateType,\n    config: { isCreateEnabled, isUpdateEnabled },\n  } = parseGraphQLSchema.parseClassTypes[className];\n  const parseClass = parseGraphQLSchema.parseClasses.find(clazz => clazz.className === className);\n  if (fields) {\n    const classGraphQLCreateTypeFields =\n      isCreateEnabled && classGraphQLCreateType ? classGraphQLCreateType.getFields() : null;\n    const classGraphQLUpdateTypeFields =\n      isUpdateEnabled && classGraphQLUpdateType ? classGraphQLUpdateType.getFields() : null;\n    const promises = Object.keys(fields).map(async field => {\n      let inputTypeField;\n      if (inputType === 'create' && classGraphQLCreateTypeFields) {\n        inputTypeField = classGraphQLCreateTypeFields[field];\n      } else if (classGraphQLUpdateTypeFields) {\n        inputTypeField = classGraphQLUpdateTypeFields[field];\n      }\n      if (inputTypeField) {\n        switch (true) {\n          case inputTypeField.type === defaultGraphQLTypes.GEO_POINT_INPUT:\n            if (fields[field] === null) {\n              fields[field] = { __op: 'Delete' };\n              break;\n            }\n            fields[field] = transformers.geoPoint(fields[field]);\n            break;\n          case inputTypeField.type === defaultGraphQLTypes.POLYGON_INPUT:\n            if (fields[field] === null) {\n              fields[field] = { __op: 'Delete' };\n              break;\n            }\n            fields[field] = transformers.polygon(fields[field]);\n            break;\n          case inputTypeField.type === defaultGraphQLTypes.FILE_INPUT:\n            fields[field] = await transformers.file(fields[field], req);\n            break;\n          case parseClass.fields[field].type === 'Relation':\n            fields[field] = await transformers.relation(\n              parseClass.fields[field].targetClass,\n              field,\n              fields[field],\n              parseGraphQLSchema,\n              req\n            );\n            break;\n          case parseClass.fields[field].type === 'Pointer':\n            if (fields[field] === null) {\n              fields[field] = { __op: 'Delete' };\n              break;\n            }\n            fields[field] = await transformers.pointer(\n              parseClass.fields[field].targetClass,\n              field,\n              fields[field],\n              parseGraphQLSchema,\n              req\n            );\n            break;\n          default:\n            if (fields[field] === null) {\n              fields[field] = { __op: 'Delete' };\n              return;\n            }\n            break;\n        }\n      }\n    });\n    await Promise.all(promises);\n    if (fields.ACL) fields.ACL = transformers.ACL(fields.ACL);\n  }\n  return fields;\n};\n\nconst transformers = {\n  file: async (input, { config }) => {\n    if (input === null) {\n      return { __op: 'Delete' };\n    }\n    const { file, upload } = input;\n    if (upload) {\n      const { fileInfo } = await handleUpload(upload, config);\n      return { ...fileInfo, __type: 'File' };\n    } else if (file && file.name) {\n      return { name: file.name, __type: 'File', url: file.url };\n    }\n    throw new Parse.Error(Parse.Error.FILE_SAVE_ERROR, 'Invalid file upload.');\n  },\n  polygon: value => ({\n    __type: 'Polygon',\n    coordinates: value.map(geoPoint => [geoPoint.latitude, geoPoint.longitude]),\n  }),\n  geoPoint: value => ({\n    ...value,\n    __type: 'GeoPoint',\n  }),\n  ACL: value => {\n    const parseACL = {};\n    if (value.public) {\n      parseACL['*'] = {\n        read: value.public.read,\n        write: value.public.write,\n      };\n    }\n    if (value.users) {\n      value.users.forEach(rule => {\n        const globalIdObject = fromGlobalId(rule.userId);\n        if (globalIdObject.type === '_User') {\n          rule.userId = globalIdObject.id;\n        }\n        parseACL[rule.userId] = {\n          read: rule.read,\n          write: rule.write,\n        };\n      });\n    }\n    if (value.roles) {\n      value.roles.forEach(rule => {\n        parseACL[`role:${rule.roleName}`] = {\n          read: rule.read,\n          write: rule.write,\n        };\n      });\n    }\n    return parseACL;\n  },\n  relation: async (targetClass, field, value, parseGraphQLSchema, { config, auth, info }) => {\n    if (Object.keys(value).length === 0)\n      throw new Parse.Error(\n        Parse.Error.INVALID_POINTER,\n        `You need to provide at least one operation on the relation mutation of field ${field}`\n      );\n\n    const op = {\n      __op: 'Batch',\n      ops: [],\n    };\n    let nestedObjectsToAdd = [];\n\n    if (value.createAndAdd) {\n      nestedObjectsToAdd = (\n        await Promise.all(\n          value.createAndAdd.map(async input => {\n            const parseFields = await transformTypes('create', input, {\n              className: targetClass,\n              parseGraphQLSchema,\n              req: { config, auth, info },\n            });\n            return objectsMutations.createObject(targetClass, parseFields, config, auth, info);\n          })\n        )\n      ).map(object => ({\n        __type: 'Pointer',\n        className: targetClass,\n        objectId: object.objectId,\n      }));\n    }\n\n    if (value.add || nestedObjectsToAdd.length > 0) {\n      if (!value.add) value.add = [];\n      value.add = value.add.map(input => {\n        const globalIdObject = fromGlobalId(input);\n        if (globalIdObject.type === targetClass) {\n          input = globalIdObject.id;\n        }\n        return {\n          __type: 'Pointer',\n          className: targetClass,\n          objectId: input,\n        };\n      });\n      op.ops.push({\n        __op: 'AddRelation',\n        objects: [...value.add, ...nestedObjectsToAdd],\n      });\n    }\n\n    if (value.remove) {\n      op.ops.push({\n        __op: 'RemoveRelation',\n        objects: value.remove.map(input => {\n          const globalIdObject = fromGlobalId(input);\n          if (globalIdObject.type === targetClass) {\n            input = globalIdObject.id;\n          }\n          return {\n            __type: 'Pointer',\n            className: targetClass,\n            objectId: input,\n          };\n        }),\n      });\n    }\n    return op;\n  },\n  pointer: async (targetClass, field, value, parseGraphQLSchema, { config, auth, info }) => {\n    if (Object.keys(value).length > 1 || Object.keys(value).length === 0)\n      throw new Parse.Error(\n        Parse.Error.INVALID_POINTER,\n        `You need to provide link OR createLink on the pointer mutation of field ${field}`\n      );\n\n    let nestedObjectToAdd;\n    if (value.createAndLink) {\n      const parseFields = await transformTypes('create', value.createAndLink, {\n        className: targetClass,\n        parseGraphQLSchema,\n        req: { config, auth, info },\n      });\n      nestedObjectToAdd = await objectsMutations.createObject(\n        targetClass,\n        parseFields,\n        config,\n        auth,\n        info\n      );\n      return {\n        __type: 'Pointer',\n        className: targetClass,\n        objectId: nestedObjectToAdd.objectId,\n      };\n    }\n    if (value.link) {\n      let objectId = value.link;\n      const globalIdObject = fromGlobalId(objectId);\n      if (globalIdObject.type === targetClass) {\n        objectId = globalIdObject.id;\n      }\n      return {\n        __type: 'Pointer',\n        className: targetClass,\n        objectId,\n      };\n    }\n  },\n};\n\nexport { transformTypes };\n"]}