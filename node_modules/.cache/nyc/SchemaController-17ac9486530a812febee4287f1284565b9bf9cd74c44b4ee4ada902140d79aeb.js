"use strict";function cov_2jz9nwd12j(){var path="/parse-server/lib/Controllers/SchemaController.js";var hash="1abd8d0c5907e5fa26bef12fa9352e6f7905ea59";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Controllers/SchemaController.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:44}},"2":{start:{line:7,column:0},end:{line:7,column:44}},"3":{start:{line:8,column:0},end:{line:8,column:58}},"4":{start:{line:9,column:0},end:{line:9,column:58}},"5":{start:{line:10,column:0},end:{line:10,column:188}},"6":{start:{line:12,column:22},end:{line:12,column:67}},"7":{start:{line:14,column:19},end:{line:14,column:83}},"8":{start:{line:16,column:26},end:{line:16,column:81}},"9":{start:{line:18,column:14},end:{line:18,column:58}},"10":{start:{line:20,column:16},end:{line:20,column:59}},"11":{start:{line:22,column:39},end:{line:22,column:93}},"12":{start:{line:24,column:54},end:{line:24,column:73}},"13":{start:{line:24,column:75},end:{line:24,column:330}},"14":{start:{line:24,column:125},end:{line:24,column:161}},"15":{start:{line:24,column:163},end:{line:24,column:296}},"16":{start:{line:24,column:185},end:{line:24,column:294}},"17":{start:{line:24,column:227},end:{line:24,column:290}},"18":{start:{line:24,column:297},end:{line:24,column:328}},"19":{start:{line:24,column:331},end:{line:24,column:343}},"20":{start:{line:26,column:33},end:{line:26,column:517}},"21":{start:{line:26,column:46},end:{line:26,column:47}},"22":{start:{line:26,column:91},end:{line:26,column:131}},"23":{start:{line:26,column:133},end:{line:26,column:515}},"24":{start:{line:26,column:146},end:{line:26,column:247}},"25":{start:{line:26,column:201},end:{line:26,column:243}},"26":{start:{line:26,column:255},end:{line:26,column:515}},"27":{start:{line:26,column:295},end:{line:26,column:369}},"28":{start:{line:26,column:379},end:{line:26,column:513}},"29":{start:{line:26,column:428},end:{line:26,column:509}},"30":{start:{line:26,column:518},end:{line:26,column:532}},"31":{start:{line:28,column:44},end:{line:28,column:195}},"32":{start:{line:28,column:62},end:{line:28,column:166}},"33":{start:{line:28,column:176},end:{line:28,column:193}},"34":{start:{line:28,column:196},end:{line:28,column:207}},"35":{start:{line:30,column:22},end:{line:30,column:275}},"36":{start:{line:30,column:70},end:{line:30,column:257}},"37":{start:{line:30,column:83},end:{line:30,column:84}},"38":{start:{line:30,column:128},end:{line:30,column:140}},"39":{start:{line:30,column:142},end:{line:30,column:255}},"40":{start:{line:30,column:168},end:{line:30,column:253}},"41":{start:{line:30,column:225},end:{line:30,column:251}},"42":{start:{line:30,column:258},end:{line:30,column:272}},"43":{start:{line:30,column:276},end:{line:30,column:315}},"44":{start:{line:48,column:14},end:{line:48,column:41}},"45":{start:{line:50,column:23},end:{line:345,column:2}},"46":{start:{line:346,column:0},end:{line:346,column:40}},"47":{start:{line:347,column:24},end:{line:350,column:2}},"48":{start:{line:351,column:23},end:{line:351,column:33}},"49":{start:{line:352,column:22},end:{line:352,column:170}},"50":{start:{line:353,column:0},end:{line:353,column:38}},"51":{start:{line:354,column:24},end:{line:354,column:158}},"52":{start:{line:356,column:18},end:{line:356,column:28}},"53":{start:{line:358,column:36},end:{line:358,column:51}},"54":{start:{line:360,column:20},end:{line:360,column:26}},"55":{start:{line:361,column:27},end:{line:361,column:44}},"56":{start:{line:362,column:36},end:{line:362,column:62}},"57":{start:{line:363,column:24},end:{line:363,column:41}},"58":{start:{line:365,column:29},end:{line:365,column:117}},"59":{start:{line:367,column:23},end:{line:367,column:108}},"60":{start:{line:370,column:20},end:{line:370,column:25}},"61":{start:{line:372,column:2},end:{line:377,column:3}},"62":{start:{line:373,column:4},end:{line:376,column:5}},"63":{start:{line:374,column:6},end:{line:374,column:25}},"64":{start:{line:375,column:6},end:{line:375,column:12}},"65":{start:{line:380,column:16},end:{line:380,column:63}},"66":{start:{line:382,column:2},end:{line:384,column:3}},"67":{start:{line:383,column:4},end:{line:383,column:111}},"68":{start:{line:388,column:20},end:{line:388,column:25}},"69":{start:{line:390,column:2},end:{line:395,column:3}},"70":{start:{line:391,column:4},end:{line:394,column:5}},"71":{start:{line:392,column:6},end:{line:392,column:25}},"72":{start:{line:393,column:6},end:{line:393,column:12}},"73":{start:{line:398,column:16},end:{line:398,column:63}},"74":{start:{line:400,column:2},end:{line:402,column:3}},"75":{start:{line:401,column:4},end:{line:401,column:111}},"76":{start:{line:405,column:21},end:{line:405,column:158}},"77":{start:{line:408,column:2},end:{line:410,column:3}},"78":{start:{line:409,column:4},end:{line:409,column:11}},"79":{start:{line:412,column:2},end:{line:497,column:3}},"80":{start:{line:413,column:4},end:{line:415,column:5}},"81":{start:{line:414,column:6},end:{line:414,column:126}},"82":{start:{line:417,column:22},end:{line:417,column:41}},"83":{start:{line:420,column:4},end:{line:420,column:45}},"84":{start:{line:422,column:4},end:{line:432,column:5}},"85":{start:{line:425,column:6},end:{line:427,column:7}},"86":{start:{line:426,column:8},end:{line:426,column:67}},"87":{start:{line:431,column:6},end:{line:431,column:15}},"88":{start:{line:435,column:4},end:{line:461,column:5}},"89":{start:{line:436,column:6},end:{line:457,column:7}},"90":{start:{line:438,column:8},end:{line:438,column:57}},"91":{start:{line:439,column:32},end:{line:439,column:49}},"92":{start:{line:441,column:8},end:{line:443,column:9}},"93":{start:{line:442,column:10},end:{line:442,column:155}},"94":{start:{line:446,column:8},end:{line:456,column:9}},"95":{start:{line:448,column:10},end:{line:450,column:11}},"96":{start:{line:449,column:12},end:{line:449,column:109}},"97":{start:{line:453,column:10},end:{line:455,column:11}},"98":{start:{line:454,column:12},end:{line:454,column:124}},"99":{start:{line:460,column:6},end:{line:460,column:15}},"100":{start:{line:470,column:4},end:{line:496,column:5}},"101":{start:{line:472,column:6},end:{line:472,column:50}},"102":{start:{line:475,column:6},end:{line:488,column:7}},"103":{start:{line:476,column:30},end:{line:476,column:47}},"104":{start:{line:478,column:8},end:{line:484,column:9}},"105":{start:{line:479,column:10},end:{line:481,column:11}},"106":{start:{line:480,column:12},end:{line:480,column:71}},"107":{start:{line:483,column:10},end:{line:483,column:153}},"108":{start:{line:487,column:8},end:{line:487,column:17}},"109":{start:{line:491,column:21},end:{line:491,column:38}},"110":{start:{line:493,column:6},end:{line:495,column:7}},"111":{start:{line:494,column:8},end:{line:494,column:156}},"112":{start:{line:501,column:2},end:{line:512,column:3}},"113":{start:{line:502,column:4},end:{line:504,column:5}},"114":{start:{line:503,column:6},end:{line:503,column:156}},"115":{start:{line:506,column:4},end:{line:511,column:5}},"116":{start:{line:508,column:6},end:{line:508,column:13}},"117":{start:{line:510,column:6},end:{line:510,column:157}},"118":{start:{line:523,column:2},end:{line:525,column:3}},"119":{start:{line:524,column:4},end:{line:524,column:141}},"120":{start:{line:528,column:23},end:{line:528,column:59}},"121":{start:{line:529,column:27},end:{line:529,column:52}},"122":{start:{line:533,column:2},end:{line:537,column:4}},"123":{start:{line:543,column:2},end:{line:547,column:3}},"124":{start:{line:544,column:4},end:{line:546,column:5}},"125":{start:{line:545,column:6},end:{line:545,column:19}},"126":{start:{line:549,column:2},end:{line:549,column:83}},"127":{start:{line:554,column:2},end:{line:556,column:3}},"128":{start:{line:555,column:4},end:{line:555,column:17}},"129":{start:{line:558,column:2},end:{line:560,column:3}},"130":{start:{line:559,column:4},end:{line:559,column:17}},"131":{start:{line:562,column:2},end:{line:564,column:3}},"132":{start:{line:563,column:4},end:{line:563,column:17}},"133":{start:{line:566,column:2},end:{line:566,column:14}},"134":{start:{line:570,column:2},end:{line:570,column:145}},"135":{start:{line:573,column:25},end:{line:573,column:82}},"136":{start:{line:574,column:39},end:{line:574,column:137}},"137":{start:{line:576,column:27},end:{line:601,column:1}},"138":{start:{line:580,column:2},end:{line:590,column:3}},"139":{start:{line:581,column:4},end:{line:589,column:5}},"140":{start:{line:582,column:6},end:{line:582,column:69}},"141":{start:{line:583,column:11},end:{line:589,column:5}},"142":{start:{line:584,column:6},end:{line:584,column:30}},"143":{start:{line:585,column:11},end:{line:589,column:5}},"144":{start:{line:586,column:6},end:{line:586,column:99}},"145":{start:{line:588,column:6},end:{line:588,column:23}},"146":{start:{line:592,column:2},end:{line:594,column:3}},"147":{start:{line:593,column:4},end:{line:593,column:28}},"148":{start:{line:596,column:2},end:{line:598,column:3}},"149":{start:{line:597,column:4},end:{line:597,column:86}},"150":{start:{line:600,column:2},end:{line:600,column:19}},"151":{start:{line:603,column:37},end:{line:621,column:1}},"152":{start:{line:604,column:2},end:{line:604,column:39}},"153":{start:{line:605,column:2},end:{line:605,column:27}},"154":{start:{line:606,column:2},end:{line:608,column:4}},"155":{start:{line:609,column:2},end:{line:611,column:4}},"156":{start:{line:613,column:2},end:{line:618,column:3}},"157":{start:{line:614,column:4},end:{line:614,column:34}},"158":{start:{line:615,column:4},end:{line:617,column:6}},"159":{start:{line:620,column:2},end:{line:620,column:16}},"160":{start:{line:623,column:0},end:{line:623,column:68}},"161":{start:{line:625,column:42},end:{line:648,column:1}},"162":{start:{line:626,column:15},end:{line:626,column:33}},"163":{start:{line:628,column:2},end:{line:628,column:30}},"164":{start:{line:629,column:2},end:{line:629,column:30}},"165":{start:{line:630,column:2},end:{line:632,column:4}},"166":{start:{line:634,column:2},end:{line:641,column:3}},"167":{start:{line:635,column:4},end:{line:635,column:34}},"168":{start:{line:637,column:4},end:{line:637,column:42}},"169":{start:{line:638,column:4},end:{line:640,column:6}},"170":{start:{line:643,column:2},end:{line:645,column:3}},"171":{start:{line:644,column:4},end:{line:644,column:26}},"172":{start:{line:647,column:2},end:{line:647,column:16}},"173":{start:{line:652,column:4},end:{line:652,column:21}},"174":{start:{line:653,column:4},end:{line:653,column:45}},"175":{start:{line:654,column:4},end:{line:681,column:7}},"176":{start:{line:655,column:6},end:{line:657,column:7}},"177":{start:{line:656,column:8},end:{line:656,column:15}},"178":{start:{line:659,column:6},end:{line:680,column:9}},"179":{start:{line:661,column:10},end:{line:676,column:11}},"180":{start:{line:662,column:25},end:{line:662,column:27}},"181":{start:{line:663,column:12},end:{line:663,column:61}},"182":{start:{line:664,column:12},end:{line:664,column:94}},"183":{start:{line:665,column:12},end:{line:665,column:42}},"184":{start:{line:666,column:41},end:{line:666,column:81}},"185":{start:{line:668,column:12},end:{line:673,column:13}},"186":{start:{line:669,column:14},end:{line:672,column:15}},"187":{start:{line:670,column:28},end:{line:670,column:127}},"188":{start:{line:671,column:16},end:{line:671,column:82}},"189":{start:{line:675,column:12},end:{line:675,column:49}},"190":{start:{line:678,column:10},end:{line:678,column:47}},"191":{start:{line:683,column:4},end:{line:702,column:7}},"192":{start:{line:684,column:6},end:{line:701,column:9}},"193":{start:{line:686,column:10},end:{line:697,column:11}},"194":{start:{line:687,column:27},end:{line:691,column:14}},"195":{start:{line:692,column:25},end:{line:692,column:27}},"196":{start:{line:693,column:12},end:{line:693,column:40}},"197":{start:{line:694,column:12},end:{line:694,column:70}},"198":{start:{line:695,column:12},end:{line:695,column:42}},"199":{start:{line:696,column:12},end:{line:696,column:42}},"200":{start:{line:699,column:10},end:{line:699,column:40}},"201":{start:{line:707,column:28},end:{line:724,column:1}},"202":{start:{line:713,column:24},end:{line:717,column:3}},"203":{start:{line:719,column:2},end:{line:721,column:3}},"204":{start:{line:720,column:4},end:{line:720,column:36}},"205":{start:{line:723,column:2},end:{line:723,column:23}},"206":{start:{line:726,column:21},end:{line:729,column:1}},"207":{start:{line:730,column:28},end:{line:733,column:1}},"208":{start:{line:734,column:29},end:{line:737,column:1}},"209":{start:{line:739,column:26},end:{line:743,column:3}},"210":{start:{line:745,column:25},end:{line:749,column:3}},"211":{start:{line:751,column:27},end:{line:755,column:3}},"212":{start:{line:757,column:24},end:{line:761,column:3}},"213":{start:{line:763,column:27},end:{line:767,column:3}},"214":{start:{line:769,column:31},end:{line:769,column:182}},"215":{start:{line:770,column:0},end:{line:770,column:56}},"216":{start:{line:772,column:32},end:{line:778,column:1}},"217":{start:{line:773,column:2},end:{line:773,column:52}},"218":{start:{line:773,column:39},end:{line:773,column:52}},"219":{start:{line:774,column:2},end:{line:774,column:66}},"220":{start:{line:774,column:53},end:{line:774,column:66}},"221":{start:{line:775,column:2},end:{line:775,column:46}},"222":{start:{line:775,column:34},end:{line:775,column:46}},"223":{start:{line:776,column:2},end:{line:776,column:51}},"224":{start:{line:776,column:39},end:{line:776,column:51}},"225":{start:{line:777,column:2},end:{line:777,column:15}},"226":{start:{line:780,column:21},end:{line:790,column:1}},"227":{start:{line:781,column:2},end:{line:783,column:3}},"228":{start:{line:782,column:4},end:{line:782,column:16}},"229":{start:{line:785,column:2},end:{line:787,column:3}},"230":{start:{line:786,column:4},end:{line:786,column:47}},"231":{start:{line:789,column:2},end:{line:789,column:24}},"232":{start:{line:796,column:4},end:{line:796,column:38}},"233":{start:{line:797,column:4},end:{line:797,column:87}},"234":{start:{line:798,column:4},end:{line:798,column:84}},"235":{start:{line:800,column:22},end:{line:800,column:82}},"236":{start:{line:802,column:26},end:{line:802,column:36}},"237":{start:{line:804,column:24},end:{line:804,column:43}},"238":{start:{line:805,column:4},end:{line:805,column:63}},"239":{start:{line:807,column:4},end:{line:811,column:7}},"240":{start:{line:808,column:6},end:{line:810,column:9}},"241":{start:{line:817,column:4},end:{line:819,column:5}},"242":{start:{line:818,column:6},end:{line:818,column:36}},"243":{start:{line:821,column:4},end:{line:828,column:22}},"244":{start:{line:822,column:6},end:{line:822,column:73}},"245":{start:{line:823,column:6},end:{line:823,column:36}},"246":{start:{line:825,column:6},end:{line:825,column:41}},"247":{start:{line:826,column:6},end:{line:826,column:36}},"248":{start:{line:827,column:6},end:{line:827,column:16}},"249":{start:{line:829,column:4},end:{line:829,column:34}},"250":{start:{line:835,column:4},end:{line:837,column:5}},"251":{start:{line:836,column:6},end:{line:836,column:34}},"252":{start:{line:839,column:19},end:{line:839,column:45}},"253":{start:{line:841,column:4},end:{line:843,column:5}},"254":{start:{line:842,column:6},end:{line:842,column:37}},"255":{start:{line:845,column:4},end:{line:845,column:32}},"256":{start:{line:849,column:4},end:{line:853,column:7}},"257":{start:{line:849,column:62},end:{line:849,column:97}},"258":{start:{line:850,column:6},end:{line:850,column:43}},"259":{start:{line:852,column:6},end:{line:852,column:24}},"260":{start:{line:859,column:4},end:{line:861,column:5}},"261":{start:{line:860,column:6},end:{line:860,column:35}},"262":{start:{line:863,column:4},end:{line:871,column:5}},"263":{start:{line:864,column:19},end:{line:864,column:45}},"264":{start:{line:865,column:6},end:{line:870,column:9}},"265":{start:{line:873,column:19},end:{line:873,column:54}},"266":{start:{line:875,column:4},end:{line:877,column:5}},"267":{start:{line:876,column:6},end:{line:876,column:37}},"268":{start:{line:879,column:4},end:{line:887,column:7}},"269":{start:{line:880,column:24},end:{line:880,column:81}},"270":{start:{line:880,column:50},end:{line:880,column:80}},"271":{start:{line:882,column:6},end:{line:884,column:7}},"272":{start:{line:883,column:8},end:{line:883,column:41}},"273":{start:{line:886,column:6},end:{line:886,column:23}},"274":{start:{line:898,column:26},end:{line:898,column:89}},"275":{start:{line:900,column:4},end:{line:908,column:5}},"276":{start:{line:901,column:6},end:{line:905,column:7}},"277":{start:{line:902,column:8},end:{line:902,column:47}},"278":{start:{line:903,column:13},end:{line:905,column:7}},"279":{start:{line:904,column:8},end:{line:904,column:92}},"280":{start:{line:907,column:6},end:{line:907,column:45}},"281":{start:{line:910,column:4},end:{line:929,column:5}},"282":{start:{line:911,column:28},end:{line:916,column:9}},"283":{start:{line:918,column:6},end:{line:920,column:9}},"284":{start:{line:921,column:26},end:{line:921,column:74}},"285":{start:{line:922,column:6},end:{line:922,column:25}},"286":{start:{line:924,column:6},end:{line:928,column:7}},"287":{start:{line:925,column:8},end:{line:925,column:100}},"288":{start:{line:927,column:8},end:{line:927,column:20}},"289":{start:{line:933,column:4},end:{line:1012,column:7}},"290":{start:{line:934,column:29},end:{line:934,column:42}},"291":{start:{line:935,column:6},end:{line:945,column:9}},"292":{start:{line:936,column:22},end:{line:936,column:43}},"293":{start:{line:938,column:8},end:{line:940,column:9}},"294":{start:{line:939,column:10},end:{line:939,column:77}},"295":{start:{line:942,column:8},end:{line:944,column:9}},"296":{start:{line:943,column:10},end:{line:943,column:85}},"297":{start:{line:946,column:6},end:{line:946,column:35}},"298":{start:{line:947,column:6},end:{line:947,column:35}},"299":{start:{line:948,column:24},end:{line:948,column:80}},"300":{start:{line:949,column:28},end:{line:949,column:80}},"301":{start:{line:950,column:28},end:{line:950,column:71}},"302":{start:{line:951,column:30},end:{line:951,column:127}},"303":{start:{line:953,column:6},end:{line:955,column:7}},"304":{start:{line:954,column:8},end:{line:954,column:75}},"305":{start:{line:959,column:28},end:{line:959,column:30}},"306":{start:{line:960,column:29},end:{line:960,column:31}},"307":{start:{line:961,column:6},end:{line:967,column:9}},"308":{start:{line:962,column:8},end:{line:966,column:9}},"309":{start:{line:963,column:10},end:{line:963,column:40}},"310":{start:{line:965,column:10},end:{line:965,column:41}},"311":{start:{line:968,column:26},end:{line:968,column:43}},"312":{start:{line:970,column:6},end:{line:972,column:7}},"313":{start:{line:971,column:8},end:{line:971,column:78}},"314":{start:{line:974,column:26},end:{line:974,column:28}},"315":{start:{line:975,column:6},end:{line:1005,column:9}},"316":{start:{line:976,column:18},end:{line:978,column:8}},"317":{start:{line:980,column:25},end:{line:983,column:10}},"318":{start:{line:981,column:23},end:{line:981,column:49}},"319":{start:{line:982,column:10},end:{line:982,column:69}},"320":{start:{line:984,column:8},end:{line:984,column:37}},"321":{start:{line:986,column:8},end:{line:986,column:59}},"322":{start:{line:986,column:49},end:{line:986,column:57}},"323":{start:{line:987,column:8},end:{line:987,column:80}},"324":{start:{line:988,column:20},end:{line:988,column:113}},"325":{start:{line:988,column:126},end:{line:990,column:8}},"326":{start:{line:992,column:8},end:{line:992,column:41}},"327":{start:{line:993,column:23},end:{line:993,column:49}},"328":{start:{line:994,column:31},end:{line:998,column:9}},"329":{start:{line:1000,column:8},end:{line:1002,column:9}},"330":{start:{line:1001,column:10},end:{line:1001,column:50}},"331":{start:{line:1004,column:8},end:{line:1004,column:30}},"332":{start:{line:1007,column:6},end:{line:1011,column:7}},"333":{start:{line:1008,column:8},end:{line:1008,column:100}},"334":{start:{line:1010,column:8},end:{line:1010,column:20}},"335":{start:{line:1018,column:4},end:{line:1020,column:5}},"336":{start:{line:1019,column:6},end:{line:1019,column:35}},"337":{start:{line:1023,column:4},end:{line:1043,column:6}},"338":{start:{line:1029,column:8},end:{line:1031,column:11}},"339":{start:{line:1034,column:8},end:{line:1038,column:9}},"340":{start:{line:1035,column:10},end:{line:1035,column:22}},"341":{start:{line:1037,column:10},end:{line:1037,column:88}},"342":{start:{line:1041,column:8},end:{line:1041,column:97}},"343":{start:{line:1047,column:4},end:{line:1049,column:5}},"344":{start:{line:1048,column:6},end:{line:1048,column:98}},"345":{start:{line:1051,column:4},end:{line:1056,column:5}},"346":{start:{line:1052,column:6},end:{line:1055,column:8}},"347":{start:{line:1058,column:4},end:{line:1058,column:81}},"348":{start:{line:1062,column:4},end:{line:1114,column:5}},"349":{start:{line:1063,column:6},end:{line:1113,column:7}},"350":{start:{line:1064,column:8},end:{line:1069,column:9}},"351":{start:{line:1065,column:10},end:{line:1068,column:12}},"352":{start:{line:1071,column:8},end:{line:1076,column:9}},"353":{start:{line:1072,column:10},end:{line:1075,column:12}},"354":{start:{line:1078,column:26},end:{line:1078,column:43}},"355":{start:{line:1079,column:22},end:{line:1079,column:51}},"356":{start:{line:1080,column:8},end:{line:1083,column:10}},"357":{start:{line:1080,column:19},end:{line:1083,column:10}},"358":{start:{line:1085,column:8},end:{line:1112,column:9}},"359":{start:{line:1086,column:33},end:{line:1086,column:64}},"360":{start:{line:1088,column:10},end:{line:1097,column:11}},"361":{start:{line:1089,column:12},end:{line:1091,column:14}},"362":{start:{line:1092,column:17},end:{line:1097,column:11}},"363":{start:{line:1093,column:12},end:{line:1096,column:14}},"364":{start:{line:1099,column:10},end:{line:1104,column:11}},"365":{start:{line:1100,column:12},end:{line:1103,column:14}},"366":{start:{line:1105,column:15},end:{line:1112,column:9}},"367":{start:{line:1106,column:10},end:{line:1111,column:11}},"368":{start:{line:1107,column:12},end:{line:1110,column:14}},"369":{start:{line:1116,column:4},end:{line:1118,column:5}},"370":{start:{line:1117,column:6},end:{line:1117,column:63}},"371":{start:{line:1120,column:22},end:{line:1120,column:103}},"372":{start:{line:1120,column:56},end:{line:1120,column:102}},"373":{start:{line:1122,column:4},end:{line:1127,column:5}},"374":{start:{line:1123,column:6},end:{line:1126,column:8}},"375":{start:{line:1129,column:4},end:{line:1129,column:65}},"376":{start:{line:1134,column:4},end:{line:1136,column:5}},"377":{start:{line:1135,column:6},end:{line:1135,column:31}},"378":{start:{line:1138,column:4},end:{line:1138,column:52}},"379":{start:{line:1139,column:4},end:{line:1139,column:69}},"380":{start:{line:1141,column:19},end:{line:1141,column:54}},"381":{start:{line:1143,column:4},end:{line:1145,column:5}},"382":{start:{line:1144,column:6},end:{line:1144,column:43}},"383":{start:{line:1153,column:4},end:{line:1157,column:5}},"384":{start:{line:1155,column:6},end:{line:1155,column:42}},"385":{start:{line:1156,column:6},end:{line:1156,column:22}},"386":{start:{line:1159,column:4},end:{line:1161,column:5}},"387":{start:{line:1160,column:6},end:{line:1160,column:95}},"388":{start:{line:1164,column:4},end:{line:1166,column:5}},"389":{start:{line:1165,column:6},end:{line:1165,column:23}},"390":{start:{line:1168,column:25},end:{line:1168,column:67}},"391":{start:{line:1170,column:4},end:{line:1174,column:5}},"392":{start:{line:1171,column:6},end:{line:1173,column:8}},"393":{start:{line:1176,column:4},end:{line:1188,column:5}},"394":{start:{line:1177,column:29},end:{line:1177,column:55}},"395":{start:{line:1179,column:6},end:{line:1183,column:7}},"396":{start:{line:1180,column:8},end:{line:1182,column:10}},"397":{start:{line:1185,column:6},end:{line:1187,column:7}},"398":{start:{line:1186,column:8},end:{line:1186,column:195}},"399":{start:{line:1190,column:4},end:{line:1204,column:5}},"400":{start:{line:1191,column:6},end:{line:1193,column:7}},"401":{start:{line:1192,column:8},end:{line:1192,column:177}},"402":{start:{line:1197,column:6},end:{line:1199,column:7}},"403":{start:{line:1198,column:8},end:{line:1198,column:25}},"404":{start:{line:1203,column:6},end:{line:1203,column:76}},"405":{start:{line:1206,column:4},end:{line:1222,column:7}},"406":{start:{line:1207,column:6},end:{line:1210,column:7}},"407":{start:{line:1209,column:8},end:{line:1209,column:20}},"408":{start:{line:1215,column:6},end:{line:1215,column:31}},"409":{start:{line:1217,column:6},end:{line:1221,column:8}},"410":{start:{line:1226,column:4},end:{line:1245,column:5}},"411":{start:{line:1226,column:17},end:{line:1226,column:18}},"412":{start:{line:1230,column:10},end:{line:1230,column:19}},"413":{start:{line:1233,column:10},end:{line:1233,column:19}},"414":{start:{line:1234,column:27},end:{line:1234,column:69}},"415":{start:{line:1236,column:6},end:{line:1240,column:7}},"416":{start:{line:1237,column:8},end:{line:1239,column:10}},"417":{start:{line:1242,column:6},end:{line:1244,column:7}},"418":{start:{line:1243,column:8},end:{line:1243,column:92}},"419":{start:{line:1250,column:4},end:{line:1250,column:63}},"420":{start:{line:1261,column:4},end:{line:1263,column:5}},"421":{start:{line:1262,column:6},end:{line:1262,column:96}},"422":{start:{line:1265,column:4},end:{line:1274,column:7}},"423":{start:{line:1266,column:6},end:{line:1268,column:7}},"424":{start:{line:1267,column:8},end:{line:1267,column:96}},"425":{start:{line:1271,column:6},end:{line:1273,column:7}},"426":{start:{line:1272,column:8},end:{line:1272,column:75}},"427":{start:{line:1275,column:4},end:{line:1306,column:7}},"428":{start:{line:1278,column:6},end:{line:1282,column:7}},"429":{start:{line:1279,column:8},end:{line:1279,column:100}},"430":{start:{line:1281,column:8},end:{line:1281,column:20}},"431":{start:{line:1284,column:6},end:{line:1288,column:9}},"432":{start:{line:1285,column:8},end:{line:1287,column:9}},"433":{start:{line:1286,column:10},end:{line:1286,column:90}},"434":{start:{line:1290,column:27},end:{line:1290,column:59}},"435":{start:{line:1292,column:6},end:{line:1303,column:9}},"436":{start:{line:1293,column:8},end:{line:1302,column:12}},"437":{start:{line:1294,column:24},end:{line:1294,column:47}},"438":{start:{line:1296,column:10},end:{line:1299,column:11}},"439":{start:{line:1298,column:12},end:{line:1298,column:83}},"440":{start:{line:1301,column:10},end:{line:1301,column:35}},"441":{start:{line:1305,column:6},end:{line:1305,column:35}},"442":{start:{line:1313,column:19},end:{line:1313,column:20}},"443":{start:{line:1314,column:19},end:{line:1314,column:59}},"444":{start:{line:1315,column:21},end:{line:1315,column:23}},"445":{start:{line:1317,column:4},end:{line:1325,column:5}},"446":{start:{line:1318,column:6},end:{line:1320,column:7}},"447":{start:{line:1319,column:8},end:{line:1319,column:19}},"448":{start:{line:1322,column:6},end:{line:1324,column:7}},"449":{start:{line:1323,column:8},end:{line:1323,column:126}},"450":{start:{line:1327,column:4},end:{line:1344,column:5}},"451":{start:{line:1328,column:6},end:{line:1330,column:7}},"452":{start:{line:1329,column:8},end:{line:1329,column:17}},"453":{start:{line:1332,column:23},end:{line:1332,column:49}},"454":{start:{line:1334,column:6},end:{line:1336,column:7}},"455":{start:{line:1335,column:8},end:{line:1335,column:17}},"456":{start:{line:1338,column:6},end:{line:1341,column:7}},"457":{start:{line:1340,column:8},end:{line:1340,column:17}},"458":{start:{line:1343,column:6},end:{line:1343,column:85}},"459":{start:{line:1346,column:20},end:{line:1346,column:47}},"460":{start:{line:1347,column:26},end:{line:1347,column:60}},"461":{start:{line:1347,column:51},end:{line:1347,column:59}},"462":{start:{line:1349,column:4},end:{line:1354,column:5}},"463":{start:{line:1351,column:6},end:{line:1353,column:9}},"464":{start:{line:1356,column:4},end:{line:1356,column:37}},"465":{start:{line:1357,column:20},end:{line:1357,column:43}},"466":{start:{line:1358,column:4},end:{line:1358,column:74}},"467":{start:{line:1363,column:20},end:{line:1363,column:46}},"468":{start:{line:1365,column:4},end:{line:1367,column:5}},"469":{start:{line:1366,column:6},end:{line:1366,column:35}},"470":{start:{line:1369,column:27},end:{line:1381,column:6}},"471":{start:{line:1370,column:6},end:{line:1378,column:7}},"472":{start:{line:1371,column:8},end:{line:1374,column:9}},"473":{start:{line:1373,column:10},end:{line:1373,column:49}},"474":{start:{line:1377,column:8},end:{line:1377,column:21}},"475":{start:{line:1380,column:6},end:{line:1380,column:29}},"476":{start:{line:1383,column:4},end:{line:1385,column:5}},"477":{start:{line:1384,column:6},end:{line:1384,column:93}},"478":{start:{line:1387,column:4},end:{line:1387,column:33}},"479":{start:{line:1391,column:4},end:{line:1391,column:107}},"480":{start:{line:1396,column:4},end:{line:1398,column:5}},"481":{start:{line:1397,column:6},end:{line:1397,column:18}},"482":{start:{line:1400,column:18},end:{line:1400,column:45}},"483":{start:{line:1402,column:4},end:{line:1404,column:5}},"484":{start:{line:1403,column:6},end:{line:1403,column:18}},"485":{start:{line:1407,column:4},end:{line:1411,column:5}},"486":{start:{line:1408,column:6},end:{line:1408,column:33}},"487":{start:{line:1410,column:6},end:{line:1410,column:18}},"488":{start:{line:1413,column:4},end:{line:1413,column:17}},"489":{start:{line:1418,column:4},end:{line:1420,column:5}},"490":{start:{line:1419,column:6},end:{line:1419,column:31}},"491":{start:{line:1422,column:4},end:{line:1424,column:5}},"492":{start:{line:1423,column:6},end:{line:1423,column:18}},"493":{start:{line:1426,column:18},end:{line:1426,column:45}},"494":{start:{line:1429,column:4},end:{line:1440,column:5}},"495":{start:{line:1431,column:6},end:{line:1435,column:7}},"496":{start:{line:1432,column:8},end:{line:1432,column:114}},"497":{start:{line:1433,column:13},end:{line:1435,column:7}},"498":{start:{line:1434,column:8},end:{line:1434,column:114}},"499":{start:{line:1439,column:6},end:{line:1439,column:31}},"500":{start:{line:1444,column:28},end:{line:1444,column:115}},"501":{start:{line:1446,column:4},end:{line:1448,column:5}},"502":{start:{line:1447,column:6},end:{line:1447,column:129}},"503":{start:{line:1451,column:4},end:{line:1453,column:5}},"504":{start:{line:1452,column:6},end:{line:1452,column:31}},"505":{start:{line:1455,column:26},end:{line:1455,column:67}},"506":{start:{line:1457,column:4},end:{line:1463,column:5}},"507":{start:{line:1459,column:6},end:{line:1462,column:7}},"508":{start:{line:1461,column:8},end:{line:1461,column:33}},"509":{start:{line:1465,column:4},end:{line:1465,column:127}},"510":{start:{line:1470,column:4},end:{line:1470,column:129}},"511":{start:{line:1474,column:4},end:{line:1474,column:90}},"512":{start:{line:1480,column:4},end:{line:1483,column:5}},"513":{start:{line:1481,column:27},end:{line:1481,column:71}},"514":{start:{line:1482,column:6},end:{line:1482,column:62}},"515":{start:{line:1485,column:4},end:{line:1485,column:21}},"516":{start:{line:1490,column:4},end:{line:1492,column:5}},"517":{start:{line:1491,column:6},end:{line:1491,column:35}},"518":{start:{line:1494,column:4},end:{line:1494,column:70}},"519":{start:{line:1494,column:40},end:{line:1494,column:68}},"520":{start:{line:1500,column:0},end:{line:1500,column:62}},"521":{start:{line:1502,column:13},end:{line:1505,column:1}},"522":{start:{line:1503,column:17},end:{line:1503,column:48}},"523":{start:{line:1504,column:2},end:{line:1504,column:55}},"524":{start:{line:1504,column:47},end:{line:1504,column:53}},"525":{start:{line:1512,column:0},end:{line:1512,column:20}},"526":{start:{line:1515,column:20},end:{line:1515,column:22}},"527":{start:{line:1517,column:25},end:{line:1517,column:142}},"528":{start:{line:1519,column:2},end:{line:1531,column:3}},"529":{start:{line:1520,column:4},end:{line:1530,column:5}},"530":{start:{line:1521,column:6},end:{line:1523,column:7}},"531":{start:{line:1522,column:8},end:{line:1522,column:17}},"532":{start:{line:1525,column:29},end:{line:1525,column:91}},"533":{start:{line:1527,column:6},end:{line:1529,column:7}},"534":{start:{line:1528,column:8},end:{line:1528,column:55}},"535":{start:{line:1533,column:2},end:{line:1541,column:3}},"536":{start:{line:1534,column:4},end:{line:1540,column:5}},"537":{start:{line:1535,column:6},end:{line:1537,column:7}},"538":{start:{line:1536,column:8},end:{line:1536,column:17}},"539":{start:{line:1539,column:6},end:{line:1539,column:49}},"540":{start:{line:1543,column:2},end:{line:1543,column:19}},"541":{start:{line:1549,column:2},end:{line:1551,column:5}},"542":{start:{line:1550,column:4},end:{line:1550,column:68}},"543":{start:{line:1560,column:15},end:{line:1560,column:25}},"544":{start:{line:1562,column:2},end:{line:1585,column:3}},"545":{start:{line:1564,column:6},end:{line:1564,column:23}},"546":{start:{line:1567,column:6},end:{line:1567,column:22}},"547":{start:{line:1570,column:6},end:{line:1570,column:22}},"548":{start:{line:1574,column:6},end:{line:1576,column:7}},"549":{start:{line:1575,column:8},end:{line:1575,column:25}},"550":{start:{line:1578,column:6},end:{line:1578,column:32}},"551":{start:{line:1584,column:6},end:{line:1584,column:30}},"552":{start:{line:1592,column:2},end:{line:1594,column:3}},"553":{start:{line:1593,column:4},end:{line:1593,column:19}},"554":{start:{line:1596,column:2},end:{line:1655,column:3}},"555":{start:{line:1597,column:4},end:{line:1652,column:5}},"556":{start:{line:1599,column:8},end:{line:1604,column:9}},"557":{start:{line:1600,column:10},end:{line:1603,column:12}},"558":{start:{line:1606,column:8},end:{line:1606,column:14}},"559":{start:{line:1609,column:8},end:{line:1614,column:9}},"560":{start:{line:1610,column:10},end:{line:1613,column:12}},"561":{start:{line:1616,column:8},end:{line:1616,column:14}},"562":{start:{line:1619,column:8},end:{line:1621,column:9}},"563":{start:{line:1620,column:10},end:{line:1620,column:24}},"564":{start:{line:1623,column:8},end:{line:1623,column:14}},"565":{start:{line:1626,column:8},end:{line:1628,column:9}},"566":{start:{line:1627,column:10},end:{line:1627,column:24}},"567":{start:{line:1630,column:8},end:{line:1630,column:14}},"568":{start:{line:1633,column:8},end:{line:1635,column:9}},"569":{start:{line:1634,column:10},end:{line:1634,column:28}},"570":{start:{line:1637,column:8},end:{line:1637,column:14}},"571":{start:{line:1640,column:8},end:{line:1642,column:9}},"572":{start:{line:1641,column:10},end:{line:1641,column:25}},"573":{start:{line:1644,column:8},end:{line:1644,column:14}},"574":{start:{line:1647,column:8},end:{line:1649,column:9}},"575":{start:{line:1648,column:10},end:{line:1648,column:27}},"576":{start:{line:1651,column:8},end:{line:1651,column:14}},"577":{start:{line:1654,column:4},end:{line:1654,column:91}},"578":{start:{line:1657,column:2},end:{line:1659,column:3}},"579":{start:{line:1658,column:4},end:{line:1658,column:37}},"580":{start:{line:1661,column:2},end:{line:1687,column:3}},"581":{start:{line:1662,column:4},end:{line:1686,column:5}},"582":{start:{line:1664,column:8},end:{line:1664,column:24}},"583":{start:{line:1667,column:8},end:{line:1667,column:20}},"584":{start:{line:1672,column:8},end:{line:1672,column:23}},"585":{start:{line:1676,column:8},end:{line:1679,column:10}},"586":{start:{line:1682,column:8},end:{line:1682,column:41}},"587":{start:{line:1685,column:8},end:{line:1685,column:43}},"588":{start:{line:1689,column:2},end:{line:1689,column:18}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:22,column:9},end:{line:22,column:31}},loc:{start:{line:22,column:37},end:{line:22,column:95}},line:22},"1":{name:"ownKeys",decl:{start:{line:24,column:9},end:{line:24,column:16}},loc:{start:{line:24,column:41},end:{line:24,column:345}},line:24},"2":{name:"(anonymous_2)",decl:{start:{line:24,column:210},end:{line:24,column:211}},loc:{start:{line:24,column:225},end:{line:24,column:292}},line:24},"3":{name:"_objectSpread",decl:{start:{line:26,column:9},end:{line:26,column:22}},loc:{start:{line:26,column:31},end:{line:26,column:534}},line:26},"4":{name:"(anonymous_4)",decl:{start:{line:26,column:184},end:{line:26,column:185}},loc:{start:{line:26,column:199},end:{line:26,column:245}},line:26},"5":{name:"(anonymous_5)",decl:{start:{line:26,column:411},end:{line:26,column:412}},loc:{start:{line:26,column:426},end:{line:26,column:511}},line:26},"6":{name:"_defineProperty",decl:{start:{line:28,column:9},end:{line:28,column:24}},loc:{start:{line:28,column:42},end:{line:28,column:209}},line:28},"7":{name:"_extends",decl:{start:{line:30,column:9},end:{line:30,column:17}},loc:{start:{line:30,column:20},end:{line:30,column:317}},line:30},"8":{name:"(anonymous_8)",decl:{start:{line:30,column:50},end:{line:30,column:51}},loc:{start:{line:30,column:68},end:{line:30,column:274}},line:30},"9":{name:"validatePermissionKey",decl:{start:{line:369,column:9},end:{line:369,column:30}},loc:{start:{line:369,column:50},end:{line:385,column:1}},line:369},"10":{name:"validateProtectedFieldsKey",decl:{start:{line:387,column:9},end:{line:387,column:35}},loc:{start:{line:387,column:55},end:{line:403,column:1}},line:387},"11":{name:"validateCLP",decl:{start:{line:407,column:9},end:{line:407,column:20}},loc:{start:{line:407,column:50},end:{line:498,column:1}},line:407},"12":{name:"validateCLPjson",decl:{start:{line:500,column:9},end:{line:500,column:24}},loc:{start:{line:500,column:50},end:{line:513,column:1}},line:500},"13":{name:"validatePointerPermission",decl:{start:{line:515,column:9},end:{line:515,column:34}},loc:{start:{line:515,column:65},end:{line:526,column:1}},line:515},"14":{name:"classNameIsValid",decl:{start:{line:531,column:9},end:{line:531,column:25}},loc:{start:{line:531,column:37},end:{line:538,column:1}},line:531},"15":{name:"fieldNameIsValid",decl:{start:{line:542,column:9},end:{line:542,column:25}},loc:{start:{line:542,column:48},end:{line:550,column:1}},line:542},"16":{name:"fieldNameIsValidForClass",decl:{start:{line:553,column:9},end:{line:553,column:33}},loc:{start:{line:553,column:56},end:{line:567,column:1}},line:553},"17":{name:"invalidClassNameMessage",decl:{start:{line:569,column:9},end:{line:569,column:32}},loc:{start:{line:569,column:44},end:{line:571,column:1}},line:569},"18":{name:"(anonymous_18)",decl:{start:{line:576,column:27},end:{line:576,column:28}},loc:{start:{line:579,column:6},end:{line:601,column:1}},line:579},"19":{name:"(anonymous_19)",decl:{start:{line:603,column:37},end:{line:603,column:38}},loc:{start:{line:603,column:47},end:{line:621,column:1}},line:603},"20":{name:"(anonymous_20)",decl:{start:{line:625,column:42},end:{line:625,column:43}},loc:{start:{line:625,column:50},end:{line:648,column:1}},line:625},"21":{name:"(anonymous_21)",decl:{start:{line:651,column:2},end:{line:651,column:3}},loc:{start:{line:651,column:53},end:{line:703,column:3}},line:651},"22":{name:"(anonymous_22)",decl:{start:{line:654,column:23},end:{line:654,column:24}},loc:{start:{line:654,column:33},end:{line:681,column:5}},line:654},"23":{name:"(anonymous_23)",decl:{start:{line:660,column:13},end:{line:660,column:14}},loc:{start:{line:660,column:19},end:{line:679,column:9}},line:660},"24":{name:"(anonymous_24)",decl:{start:{line:683,column:28},end:{line:683,column:29}},loc:{start:{line:683,column:41},end:{line:702,column:5}},line:683},"25":{name:"(anonymous_25)",decl:{start:{line:685,column:13},end:{line:685,column:14}},loc:{start:{line:685,column:19},end:{line:700,column:9}},line:685},"26":{name:"(anonymous_26)",decl:{start:{line:707,column:28},end:{line:707,column:29}},loc:{start:{line:712,column:6},end:{line:724,column:1}},line:712},"27":{name:"(anonymous_27)",decl:{start:{line:772,column:32},end:{line:772,column:33}},loc:{start:{line:772,column:56},end:{line:778,column:1}},line:772},"28":{name:"(anonymous_28)",decl:{start:{line:780,column:21},end:{line:780,column:22}},loc:{start:{line:780,column:29},end:{line:790,column:1}},line:780},"29":{name:"(anonymous_29)",decl:{start:{line:795,column:2},end:{line:795,column:3}},loc:{start:{line:795,column:31},end:{line:812,column:3}},line:795},"30":{name:"(anonymous_30)",decl:{start:{line:807,column:26},end:{line:807,column:27}},loc:{start:{line:807,column:32},end:{line:811,column:5}},line:807},"31":{name:"(anonymous_31)",decl:{start:{line:814,column:2},end:{line:814,column:3}},loc:{start:{line:816,column:5},end:{line:830,column:3}},line:816},"32":{name:"(anonymous_32)",decl:{start:{line:821,column:62},end:{line:821,column:63}},loc:{start:{line:821,column:76},end:{line:824,column:5}},line:821},"33":{name:"(anonymous_33)",decl:{start:{line:824,column:7},end:{line:824,column:8}},loc:{start:{line:824,column:14},end:{line:828,column:5}},line:824},"34":{name:"(anonymous_34)",decl:{start:{line:828,column:12},end:{line:828,column:13}},loc:{start:{line:828,column:18},end:{line:828,column:20}},line:828},"35":{name:"(anonymous_35)",decl:{start:{line:832,column:2},end:{line:832,column:3}},loc:{start:{line:834,column:5},end:{line:846,column:3}},line:834},"36":{name:"(anonymous_36)",decl:{start:{line:848,column:2},end:{line:848,column:3}},loc:{start:{line:848,column:18},end:{line:854,column:3}},line:848},"37":{name:"(anonymous_37)",decl:{start:{line:849,column:48},end:{line:849,column:49}},loc:{start:{line:849,column:62},end:{line:849,column:97}},line:849},"38":{name:"(anonymous_38)",decl:{start:{line:849,column:104},end:{line:849,column:105}},loc:{start:{line:849,column:118},end:{line:853,column:5}},line:849},"39":{name:"(anonymous_39)",decl:{start:{line:856,column:2},end:{line:856,column:3}},loc:{start:{line:858,column:5},end:{line:888,column:3}},line:858},"40":{name:"(anonymous_40)",decl:{start:{line:879,column:37},end:{line:879,column:38}},loc:{start:{line:879,column:51},end:{line:887,column:5}},line:879},"41":{name:"(anonymous_41)",decl:{start:{line:880,column:40},end:{line:880,column:41}},loc:{start:{line:880,column:50},end:{line:880,column:80}},line:880},"42":{name:"(anonymous_42)",decl:{start:{line:897,column:2},end:{line:897,column:3}},loc:{start:{line:897,column:89},end:{line:930,column:3}},line:897},"43":{name:"(anonymous_43)",decl:{start:{line:932,column:2},end:{line:932,column:3}},loc:{start:{line:932,column:84},end:{line:1013,column:3}},line:932},"44":{name:"(anonymous_44)",decl:{start:{line:933,column:45},end:{line:933,column:46}},loc:{start:{line:933,column:55},end:{line:1006,column:5}},line:933},"45":{name:"(anonymous_45)",decl:{start:{line:935,column:43},end:{line:935,column:44}},loc:{start:{line:935,column:51},end:{line:945,column:7}},line:935},"46":{name:"(anonymous_46)",decl:{start:{line:961,column:43},end:{line:961,column:44}},loc:{start:{line:961,column:56},end:{line:967,column:7}},line:961},"47":{name:"(anonymous_47)",decl:{start:{line:976,column:12},end:{line:976,column:13}},loc:{start:{line:976,column:18},end:{line:978,column:8}},line:976},"48":{name:"(anonymous_48)",decl:{start:{line:979,column:12},end:{line:979,column:13}},loc:{start:{line:979,column:18},end:{line:985,column:7}},line:979},"49":{name:"(anonymous_49)",decl:{start:{line:980,column:44},end:{line:980,column:45}},loc:{start:{line:980,column:57},end:{line:983,column:9}},line:980},"50":{name:"(anonymous_50)",decl:{start:{line:985,column:14},end:{line:985,column:15}},loc:{start:{line:985,column:25},end:{line:988,column:7}},line:985},"51":{name:"(anonymous_51)",decl:{start:{line:986,column:39},end:{line:986,column:40}},loc:{start:{line:986,column:49},end:{line:986,column:57}},line:986},"52":{name:"(anonymous_52)",decl:{start:{line:988,column:14},end:{line:988,column:15}},loc:{start:{line:988,column:20},end:{line:988,column:113}},line:988},"53":{name:"(anonymous_53)",decl:{start:{line:988,column:120},end:{line:988,column:121}},loc:{start:{line:988,column:126},end:{line:990,column:8}},line:988},"54":{name:"(anonymous_54)",decl:{start:{line:991,column:12},end:{line:991,column:13}},loc:{start:{line:991,column:18},end:{line:1005,column:7}},line:991},"55":{name:"(anonymous_55)",decl:{start:{line:1006,column:13},end:{line:1006,column:14}},loc:{start:{line:1006,column:22},end:{line:1012,column:5}},line:1006},"56":{name:"(anonymous_56)",decl:{start:{line:1017,column:2},end:{line:1017,column:3}},loc:{start:{line:1017,column:32},end:{line:1044,column:3}},line:1017},"57":{name:"(anonymous_57)",decl:{start:{line:1024,column:48},end:{line:1024,column:49}},loc:{start:{line:1024,column:54},end:{line:1032,column:7}},line:1024},"58":{name:"(anonymous_58)",decl:{start:{line:1032,column:14},end:{line:1032,column:15}},loc:{start:{line:1032,column:20},end:{line:1039,column:7}},line:1032},"59":{name:"(anonymous_59)",decl:{start:{line:1039,column:15},end:{line:1039,column:16}},loc:{start:{line:1039,column:21},end:{line:1042,column:7}},line:1039},"60":{name:"(anonymous_60)",decl:{start:{line:1046,column:2},end:{line:1046,column:3}},loc:{start:{line:1046,column:66},end:{line:1059,column:3}},line:1046},"61":{name:"(anonymous_61)",decl:{start:{line:1061,column:2},end:{line:1061,column:3}},loc:{start:{line:1061,column:83},end:{line:1130,column:3}},line:1061},"62":{name:"(anonymous_62)",decl:{start:{line:1120,column:49},end:{line:1120,column:50}},loc:{start:{line:1120,column:56},end:{line:1120,column:102}},line:1120},"63":{name:"(anonymous_63)",decl:{start:{line:1133,column:2},end:{line:1133,column:3}},loc:{start:{line:1133,column:52},end:{line:1146,column:3}},line:1133},"64":{name:"(anonymous_64)",decl:{start:{line:1152,column:2},end:{line:1152,column:3}},loc:{start:{line:1152,column:63},end:{line:1223,column:3}},line:1152},"65":{name:"(anonymous_65)",decl:{start:{line:1206,column:81},end:{line:1206,column:82}},loc:{start:{line:1206,column:90},end:{line:1216,column:5}},line:1206},"66":{name:"(anonymous_66)",decl:{start:{line:1216,column:12},end:{line:1216,column:13}},loc:{start:{line:1216,column:18},end:{line:1222,column:5}},line:1216},"67":{name:"(anonymous_67)",decl:{start:{line:1225,column:2},end:{line:1225,column:3}},loc:{start:{line:1225,column:23},end:{line:1246,column:3}},line:1225},"68":{name:"(anonymous_68)",decl:{start:{line:1249,column:2},end:{line:1249,column:3}},loc:{start:{line:1249,column:46},end:{line:1251,column:3}},line:1249},"69":{name:"(anonymous_69)",decl:{start:{line:1260,column:2},end:{line:1260,column:3}},loc:{start:{line:1260,column:48},end:{line:1307,column:3}},line:1260},"70":{name:"(anonymous_70)",decl:{start:{line:1265,column:23},end:{line:1265,column:24}},loc:{start:{line:1265,column:36},end:{line:1274,column:5}},line:1265},"71":{name:"(anonymous_71)",decl:{start:{line:1277,column:13},end:{line:1277,column:14}},loc:{start:{line:1277,column:22},end:{line:1283,column:5}},line:1277},"72":{name:"(anonymous_72)",decl:{start:{line:1283,column:12},end:{line:1283,column:13}},loc:{start:{line:1283,column:22},end:{line:1304,column:5}},line:1283},"73":{name:"(anonymous_73)",decl:{start:{line:1284,column:25},end:{line:1284,column:26}},loc:{start:{line:1284,column:38},end:{line:1288,column:7}},line:1284},"74":{name:"(anonymous_74)",decl:{start:{line:1292,column:79},end:{line:1292,column:80}},loc:{start:{line:1292,column:85},end:{line:1303,column:7}},line:1292},"75":{name:"(anonymous_75)",decl:{start:{line:1293,column:42},end:{line:1293,column:43}},loc:{start:{line:1293,column:55},end:{line:1302,column:9}},line:1293},"76":{name:"(anonymous_76)",decl:{start:{line:1304,column:12},end:{line:1304,column:13}},loc:{start:{line:1304,column:18},end:{line:1306,column:5}},line:1304},"77":{name:"(anonymous_77)",decl:{start:{line:1312,column:2},end:{line:1312,column:3}},loc:{start:{line:1312,column:49},end:{line:1359,column:3}},line:1312},"78":{name:"(anonymous_78)",decl:{start:{line:1347,column:41},end:{line:1347,column:42}},loc:{start:{line:1347,column:51},end:{line:1347,column:59}},line:1347},"79":{name:"(anonymous_79)",decl:{start:{line:1362,column:2},end:{line:1362,column:3}},loc:{start:{line:1362,column:52},end:{line:1388,column:3}},line:1362},"80":{name:"(anonymous_80)",decl:{start:{line:1369,column:42},end:{line:1369,column:43}},loc:{start:{line:1369,column:60},end:{line:1381,column:5}},line:1369},"81":{name:"(anonymous_81)",decl:{start:{line:1390,column:2},end:{line:1390,column:3}},loc:{start:{line:1390,column:62},end:{line:1392,column:3}},line:1390},"82":{name:"(anonymous_82)",decl:{start:{line:1395,column:2},end:{line:1395,column:3}},loc:{start:{line:1395,column:64},end:{line:1414,column:3}},line:1395},"83":{name:"(anonymous_83)",decl:{start:{line:1407,column:22},end:{line:1407,column:23}},loc:{start:{line:1407,column:29},end:{line:1409,column:5}},line:1407},"84":{name:"(anonymous_84)",decl:{start:{line:1417,column:2},end:{line:1417,column:3}},loc:{start:{line:1417,column:86},end:{line:1466,column:3}},line:1417},"85":{name:"(anonymous_85)",decl:{start:{line:1469,column:2},end:{line:1469,column:3}},loc:{start:{line:1469,column:61},end:{line:1471,column:3}},line:1469},"86":{name:"(anonymous_86)",decl:{start:{line:1473,column:2},end:{line:1473,column:3}},loc:{start:{line:1473,column:38},end:{line:1475,column:3}},line:1473},"87":{name:"(anonymous_87)",decl:{start:{line:1479,column:2},end:{line:1479,column:3}},loc:{start:{line:1479,column:40},end:{line:1486,column:3}},line:1479},"88":{name:"(anonymous_88)",decl:{start:{line:1489,column:2},end:{line:1489,column:3}},loc:{start:{line:1489,column:22},end:{line:1495,column:3}},line:1489},"89":{name:"(anonymous_89)",decl:{start:{line:1494,column:34},end:{line:1494,column:35}},loc:{start:{line:1494,column:40},end:{line:1494,column:68}},line:1494},"90":{name:"(anonymous_90)",decl:{start:{line:1502,column:13},end:{line:1502,column:14}},loc:{start:{line:1502,column:37},end:{line:1505,column:1}},line:1502},"91":{name:"(anonymous_91)",decl:{start:{line:1504,column:41},end:{line:1504,column:42}},loc:{start:{line:1504,column:47},end:{line:1504,column:53}},line:1504},"92":{name:"buildMergedSchemaObject",decl:{start:{line:1514,column:9},end:{line:1514,column:32}},loc:{start:{line:1514,column:61},end:{line:1544,column:1}},line:1514},"93":{name:"thenValidateRequiredColumns",decl:{start:{line:1548,column:9},end:{line:1548,column:36}},loc:{start:{line:1548,column:78},end:{line:1552,column:1}},line:1548},"94":{name:"(anonymous_94)",decl:{start:{line:1549,column:28},end:{line:1549,column:29}},loc:{start:{line:1549,column:38},end:{line:1551,column:3}},line:1549},"95":{name:"getType",decl:{start:{line:1559,column:9},end:{line:1559,column:16}},loc:{start:{line:1559,column:22},end:{line:1586,column:1}},line:1559},"96":{name:"getObjectType",decl:{start:{line:1591,column:9},end:{line:1591,column:22}},loc:{start:{line:1591,column:28},end:{line:1690,column:1}},line:1591}},branchMap:{"0":{loc:{start:{line:22,column:46},end:{line:22,column:92}},type:"cond-expr",locations:[{start:{line:22,column:70},end:{line:22,column:73}},{start:{line:22,column:76},end:{line:22,column:92}}],line:22},"1":{loc:{start:{line:22,column:46},end:{line:22,column:67}},type:"binary-expr",locations:[{start:{line:22,column:46},end:{line:22,column:49}},{start:{line:22,column:53},end:{line:22,column:67}}],line:22},"2":{loc:{start:{line:24,column:75},end:{line:24,column:330}},type:"if",locations:[{start:{line:24,column:75},end:{line:24,column:330}},{start:{line:24,column:75},end:{line:24,column:330}}],line:24},"3":{loc:{start:{line:24,column:163},end:{line:24,column:296}},type:"if",locations:[{start:{line:24,column:163},end:{line:24,column:296}},{start:{line:24,column:163},end:{line:24,column:296}}],line:24},"4":{loc:{start:{line:26,column:91},end:{line:26,column:131}},type:"cond-expr",locations:[{start:{line:26,column:114},end:{line:26,column:126}},{start:{line:26,column:129},end:{line:26,column:131}}],line:26},"5":{loc:{start:{line:26,column:133},end:{line:26,column:515}},type:"if",locations:[{start:{line:26,column:133},end:{line:26,column:515}},{start:{line:26,column:133},end:{line:26,column:515}}],line:26},"6":{loc:{start:{line:26,column:255},end:{line:26,column:515}},type:"if",locations:[{start:{line:26,column:255},end:{line:26,column:515}},{start:{line:26,column:255},end:{line:26,column:515}}],line:26},"7":{loc:{start:{line:28,column:44},end:{line:28,column:195}},type:"if",locations:[{start:{line:28,column:44},end:{line:28,column:195}},{start:{line:28,column:44},end:{line:28,column:195}}],line:28},"8":{loc:{start:{line:30,column:33},end:{line:30,column:274}},type:"binary-expr",locations:[{start:{line:30,column:33},end:{line:30,column:46}},{start:{line:30,column:50},end:{line:30,column:274}}],line:30},"9":{loc:{start:{line:30,column:168},end:{line:30,column:253}},type:"if",locations:[{start:{line:30,column:168},end:{line:30,column:253}},{start:{line:30,column:168},end:{line:30,column:253}}],line:30},"10":{loc:{start:{line:373,column:4},end:{line:376,column:5}},type:"if",locations:[{start:{line:373,column:4},end:{line:376,column:5}},{start:{line:373,column:4},end:{line:376,column:5}}],line:373},"11":{loc:{start:{line:380,column:16},end:{line:380,column:63}},type:"binary-expr",locations:[{start:{line:380,column:16},end:{line:380,column:27}},{start:{line:380,column:31},end:{line:380,column:63}}],line:380},"12":{loc:{start:{line:382,column:2},end:{line:384,column:3}},type:"if",locations:[{start:{line:382,column:2},end:{line:384,column:3}},{start:{line:382,column:2},end:{line:384,column:3}}],line:382},"13":{loc:{start:{line:391,column:4},end:{line:394,column:5}},type:"if",locations:[{start:{line:391,column:4},end:{line:394,column:5}},{start:{line:391,column:4},end:{line:394,column:5}}],line:391},"14":{loc:{start:{line:398,column:16},end:{line:398,column:63}},type:"binary-expr",locations:[{start:{line:398,column:16},end:{line:398,column:27}},{start:{line:398,column:31},end:{line:398,column:63}}],line:398},"15":{loc:{start:{line:400,column:2},end:{line:402,column:3}},type:"if",locations:[{start:{line:400,column:2},end:{line:402,column:3}},{start:{line:400,column:2},end:{line:402,column:3}}],line:400},"16":{loc:{start:{line:408,column:2},end:{line:410,column:3}},type:"if",locations:[{start:{line:408,column:2},end:{line:410,column:3}},{start:{line:408,column:2},end:{line:410,column:3}}],line:408},"17":{loc:{start:{line:413,column:4},end:{line:415,column:5}},type:"if",locations:[{start:{line:413,column:4},end:{line:415,column:5}},{start:{line:413,column:4},end:{line:415,column:5}}],line:413},"18":{loc:{start:{line:422,column:4},end:{line:432,column:5}},type:"if",locations:[{start:{line:422,column:4},end:{line:432,column:5}},{start:{line:422,column:4},end:{line:432,column:5}}],line:422},"19":{loc:{start:{line:422,column:8},end:{line:422,column:79}},type:"binary-expr",locations:[{start:{line:422,column:8},end:{line:422,column:41}},{start:{line:422,column:45},end:{line:422,column:79}}],line:422},"20":{loc:{start:{line:435,column:4},end:{line:461,column:5}},type:"if",locations:[{start:{line:435,column:4},end:{line:461,column:5}},{start:{line:435,column:4},end:{line:461,column:5}}],line:435},"21":{loc:{start:{line:441,column:8},end:{line:443,column:9}},type:"if",locations:[{start:{line:441,column:8},end:{line:443,column:9}},{start:{line:441,column:8},end:{line:443,column:9}}],line:441},"22":{loc:{start:{line:448,column:10},end:{line:450,column:11}},type:"if",locations:[{start:{line:448,column:10},end:{line:450,column:11}},{start:{line:448,column:10},end:{line:450,column:11}}],line:448},"23":{loc:{start:{line:453,column:10},end:{line:455,column:11}},type:"if",locations:[{start:{line:453,column:10},end:{line:455,column:11}},{start:{line:453,column:10},end:{line:455,column:11}}],line:453},"24":{loc:{start:{line:475,column:6},end:{line:488,column:7}},type:"if",locations:[{start:{line:475,column:6},end:{line:488,column:7}},{start:{line:475,column:6},end:{line:488,column:7}}],line:475},"25":{loc:{start:{line:478,column:8},end:{line:484,column:9}},type:"if",locations:[{start:{line:478,column:8},end:{line:484,column:9}},{start:{line:478,column:8},end:{line:484,column:9}}],line:478},"26":{loc:{start:{line:493,column:6},end:{line:495,column:7}},type:"if",locations:[{start:{line:493,column:6},end:{line:495,column:7}},{start:{line:493,column:6},end:{line:495,column:7}}],line:493},"27":{loc:{start:{line:501,column:2},end:{line:512,column:3}},type:"if",locations:[{start:{line:501,column:2},end:{line:512,column:3}},{start:{line:501,column:2},end:{line:512,column:3}}],line:501},"28":{loc:{start:{line:501,column:6},end:{line:501,column:77}},type:"binary-expr",locations:[{start:{line:501,column:6},end:{line:501,column:39}},{start:{line:501,column:43},end:{line:501,column:77}}],line:501},"29":{loc:{start:{line:502,column:4},end:{line:504,column:5}},type:"if",locations:[{start:{line:502,column:4},end:{line:504,column:5}},{start:{line:502,column:4},end:{line:504,column:5}}],line:502},"30":{loc:{start:{line:506,column:4},end:{line:511,column:5}},type:"if",locations:[{start:{line:506,column:4},end:{line:511,column:5}},{start:{line:506,column:4},end:{line:511,column:5}}],line:506},"31":{loc:{start:{line:506,column:8},end:{line:506,column:59}},type:"binary-expr",locations:[{start:{line:506,column:8},end:{line:506,column:37}},{start:{line:506,column:41},end:{line:506,column:59}}],line:506},"32":{loc:{start:{line:523,column:2},end:{line:525,column:3}},type:"if",locations:[{start:{line:523,column:2},end:{line:525,column:3}},{start:{line:523,column:2},end:{line:525,column:3}}],line:523},"33":{loc:{start:{line:523,column:8},end:{line:523,column:147}},type:"binary-expr",locations:[{start:{line:523,column:8},end:{line:523,column:25}},{start:{line:523,column:30},end:{line:523,column:65}},{start:{line:523,column:69},end:{line:523,column:109}},{start:{line:523,column:113},end:{line:523,column:146}}],line:523},"34":{loc:{start:{line:534,column:4},end:{line:536,column:42}},type:"binary-expr",locations:[{start:{line:534,column:4},end:{line:534,column:41}},{start:{line:535,column:4},end:{line:535,column:34}},{start:{line:536,column:4},end:{line:536,column:42}}],line:534},"35":{loc:{start:{line:543,column:2},end:{line:547,column:3}},type:"if",locations:[{start:{line:543,column:2},end:{line:547,column:3}},{start:{line:543,column:2},end:{line:547,column:3}}],line:543},"36":{loc:{start:{line:543,column:6},end:{line:543,column:41}},type:"binary-expr",locations:[{start:{line:543,column:6},end:{line:543,column:15}},{start:{line:543,column:19},end:{line:543,column:41}}],line:543},"37":{loc:{start:{line:544,column:4},end:{line:546,column:5}},type:"if",locations:[{start:{line:544,column:4},end:{line:546,column:5}},{start:{line:544,column:4},end:{line:546,column:5}}],line:544},"38":{loc:{start:{line:549,column:9},end:{line:549,column:82}},type:"binary-expr",locations:[{start:{line:549,column:9},end:{line:549,column:43}},{start:{line:549,column:47},end:{line:549,column:82}}],line:549},"39":{loc:{start:{line:554,column:2},end:{line:556,column:3}},type:"if",locations:[{start:{line:554,column:2},end:{line:556,column:3}},{start:{line:554,column:2},end:{line:556,column:3}}],line:554},"40":{loc:{start:{line:558,column:2},end:{line:560,column:3}},type:"if",locations:[{start:{line:558,column:2},end:{line:560,column:3}},{start:{line:558,column:2},end:{line:560,column:3}}],line:558},"41":{loc:{start:{line:562,column:2},end:{line:564,column:3}},type:"if",locations:[{start:{line:562,column:2},end:{line:564,column:3}},{start:{line:562,column:2},end:{line:564,column:3}}],line:562},"42":{loc:{start:{line:562,column:6},end:{line:562,column:71}},type:"binary-expr",locations:[{start:{line:562,column:6},end:{line:562,column:31}},{start:{line:562,column:35},end:{line:562,column:71}}],line:562},"43":{loc:{start:{line:580,column:2},end:{line:590,column:3}},type:"if",locations:[{start:{line:580,column:2},end:{line:590,column:3}},{start:{line:580,column:2},end:{line:590,column:3}}],line:580},"44":{loc:{start:{line:581,column:4},end:{line:589,column:5}},type:"if",locations:[{start:{line:581,column:4},end:{line:589,column:5}},{start:{line:581,column:4},end:{line:589,column:5}}],line:581},"45":{loc:{start:{line:583,column:11},end:{line:589,column:5}},type:"if",locations:[{start:{line:583,column:11},end:{line:589,column:5}},{start:{line:583,column:11},end:{line:589,column:5}}],line:583},"46":{loc:{start:{line:585,column:11},end:{line:589,column:5}},type:"if",locations:[{start:{line:585,column:11},end:{line:589,column:5}},{start:{line:585,column:11},end:{line:589,column:5}}],line:585},"47":{loc:{start:{line:592,column:2},end:{line:594,column:3}},type:"if",locations:[{start:{line:592,column:2},end:{line:594,column:3}},{start:{line:592,column:2},end:{line:594,column:3}}],line:592},"48":{loc:{start:{line:596,column:2},end:{line:598,column:3}},type:"if",locations:[{start:{line:596,column:2},end:{line:598,column:3}},{start:{line:596,column:2},end:{line:598,column:3}}],line:596},"49":{loc:{start:{line:613,column:2},end:{line:618,column:3}},type:"if",locations:[{start:{line:613,column:2},end:{line:618,column:3}},{start:{line:613,column:2},end:{line:618,column:3}}],line:613},"50":{loc:{start:{line:634,column:2},end:{line:641,column:3}},type:"if",locations:[{start:{line:634,column:2},end:{line:641,column:3}},{start:{line:634,column:2},end:{line:641,column:3}}],line:634},"51":{loc:{start:{line:643,column:2},end:{line:645,column:3}},type:"if",locations:[{start:{line:643,column:2},end:{line:645,column:3}},{start:{line:643,column:2},end:{line:645,column:3}}],line:643},"52":{loc:{start:{line:643,column:6},end:{line:643,column:64}},type:"binary-expr",locations:[{start:{line:643,column:6},end:{line:643,column:20}},{start:{line:643,column:24},end:{line:643,column:64}}],line:643},"53":{loc:{start:{line:651,column:14},end:{line:651,column:29}},type:"default-arg",locations:[{start:{line:651,column:27},end:{line:651,column:29}}],line:651},"54":{loc:{start:{line:651,column:31},end:{line:651,column:51}},type:"default-arg",locations:[{start:{line:651,column:49},end:{line:651,column:51}}],line:651},"55":{loc:{start:{line:655,column:6},end:{line:657,column:7}},type:"if",locations:[{start:{line:655,column:6},end:{line:657,column:7}},{start:{line:655,column:6},end:{line:657,column:7}}],line:655},"56":{loc:{start:{line:661,column:10},end:{line:676,column:11}},type:"if",locations:[{start:{line:661,column:10},end:{line:676,column:11}},{start:{line:661,column:10},end:{line:676,column:11}}],line:661},"57":{loc:{start:{line:668,column:12},end:{line:673,column:13}},type:"if",locations:[{start:{line:668,column:12},end:{line:673,column:13}},{start:{line:668,column:12},end:{line:673,column:13}}],line:668},"58":{loc:{start:{line:670,column:41},end:{line:670,column:94}},type:"binary-expr",locations:[{start:{line:670,column:41},end:{line:670,column:88}},{start:{line:670,column:92},end:{line:670,column:94}}],line:670},"59":{loc:{start:{line:686,column:10},end:{line:697,column:11}},type:"if",locations:[{start:{line:686,column:10},end:{line:697,column:11}},{start:{line:686,column:10},end:{line:697,column:11}}],line:686},"60":{loc:{start:{line:715,column:84},end:{line:715,column:115}},type:"binary-expr",locations:[{start:{line:715,column:84},end:{line:715,column:109}},{start:{line:715,column:113},end:{line:715,column:115}}],line:715},"61":{loc:{start:{line:719,column:2},end:{line:721,column:3}},type:"if",locations:[{start:{line:719,column:2},end:{line:721,column:3}},{start:{line:719,column:2},end:{line:721,column:3}}],line:719},"62":{loc:{start:{line:719,column:6},end:{line:719,column:50}},type:"binary-expr",locations:[{start:{line:719,column:6},end:{line:719,column:13}},{start:{line:719,column:17},end:{line:719,column:50}}],line:719},"63":{loc:{start:{line:773,column:2},end:{line:773,column:52}},type:"if",locations:[{start:{line:773,column:2},end:{line:773,column:52}},{start:{line:773,column:2},end:{line:773,column:52}}],line:773},"64":{loc:{start:{line:774,column:2},end:{line:774,column:66}},type:"if",locations:[{start:{line:774,column:2},end:{line:774,column:66}},{start:{line:774,column:2},end:{line:774,column:66}}],line:774},"65":{loc:{start:{line:775,column:2},end:{line:775,column:46}},type:"if",locations:[{start:{line:775,column:2},end:{line:775,column:46}},{start:{line:775,column:2},end:{line:775,column:46}}],line:775},"66":{loc:{start:{line:776,column:2},end:{line:776,column:51}},type:"if",locations:[{start:{line:776,column:2},end:{line:776,column:51}},{start:{line:776,column:2},end:{line:776,column:51}}],line:776},"67":{loc:{start:{line:781,column:2},end:{line:783,column:3}},type:"if",locations:[{start:{line:781,column:2},end:{line:783,column:3}},{start:{line:781,column:2},end:{line:783,column:3}}],line:781},"68":{loc:{start:{line:785,column:2},end:{line:787,column:3}},type:"if",locations:[{start:{line:785,column:2},end:{line:787,column:3}},{start:{line:785,column:2},end:{line:787,column:3}}],line:785},"69":{loc:{start:{line:805,column:23},end:{line:805,column:62}},type:"cond-expr",locations:[{start:{line:805,column:35},end:{line:805,column:48}},{start:{line:805,column:51},end:{line:805,column:62}}],line:805},"70":{loc:{start:{line:814,column:13},end:{line:816,column:3}},type:"default-arg",locations:[{start:{line:814,column:23},end:{line:816,column:3}}],line:814},"71":{loc:{start:{line:817,column:4},end:{line:819,column:5}},type:"if",locations:[{start:{line:817,column:4},end:{line:819,column:5}},{start:{line:817,column:4},end:{line:819,column:5}}],line:817},"72":{loc:{start:{line:817,column:8},end:{line:817,column:53}},type:"binary-expr",locations:[{start:{line:817,column:8},end:{line:817,column:30}},{start:{line:817,column:34},end:{line:817,column:53}}],line:817},"73":{loc:{start:{line:832,column:16},end:{line:834,column:3}},type:"default-arg",locations:[{start:{line:832,column:26},end:{line:834,column:3}}],line:832},"74":{loc:{start:{line:835,column:4},end:{line:837,column:5}},type:"if",locations:[{start:{line:835,column:4},end:{line:837,column:5}},{start:{line:835,column:4},end:{line:837,column:5}}],line:835},"75":{loc:{start:{line:841,column:4},end:{line:843,column:5}},type:"if",locations:[{start:{line:841,column:4},end:{line:843,column:5}},{start:{line:841,column:4},end:{line:843,column:5}}],line:841},"76":{loc:{start:{line:841,column:8},end:{line:841,column:31}},type:"binary-expr",locations:[{start:{line:841,column:8},end:{line:841,column:14}},{start:{line:841,column:18},end:{line:841,column:31}}],line:841},"77":{loc:{start:{line:856,column:26},end:{line:856,column:54}},type:"default-arg",locations:[{start:{line:856,column:49},end:{line:856,column:54}}],line:856},"78":{loc:{start:{line:856,column:56},end:{line:858,column:3}},type:"default-arg",locations:[{start:{line:856,column:66},end:{line:858,column:3}}],line:856},"79":{loc:{start:{line:859,column:4},end:{line:861,column:5}},type:"if",locations:[{start:{line:859,column:4},end:{line:861,column:5}},{start:{line:859,column:4},end:{line:861,column:5}}],line:859},"80":{loc:{start:{line:863,column:4},end:{line:871,column:5}},type:"if",locations:[{start:{line:863,column:4},end:{line:871,column:5}},{start:{line:863,column:4},end:{line:871,column:5}}],line:863},"81":{loc:{start:{line:863,column:8},end:{line:863,column:71}},type:"binary-expr",locations:[{start:{line:863,column:8},end:{line:863,column:28}},{start:{line:863,column:32},end:{line:863,column:71}}],line:863},"82":{loc:{start:{line:875,column:4},end:{line:877,column:5}},type:"if",locations:[{start:{line:875,column:4},end:{line:877,column:5}},{start:{line:875,column:4},end:{line:877,column:5}}],line:875},"83":{loc:{start:{line:875,column:8},end:{line:875,column:37}},type:"binary-expr",locations:[{start:{line:875,column:8},end:{line:875,column:14}},{start:{line:875,column:18},end:{line:875,column:37}}],line:875},"84":{loc:{start:{line:882,column:6},end:{line:884,column:7}},type:"if",locations:[{start:{line:882,column:6},end:{line:884,column:7}},{start:{line:882,column:6},end:{line:884,column:7}}],line:882},"85":{loc:{start:{line:897,column:39},end:{line:897,column:50}},type:"default-arg",locations:[{start:{line:897,column:48},end:{line:897,column:50}}],line:897},"86":{loc:{start:{line:897,column:75},end:{line:897,column:87}},type:"default-arg",locations:[{start:{line:897,column:85},end:{line:897,column:87}}],line:897},"87":{loc:{start:{line:900,column:4},end:{line:908,column:5}},type:"if",locations:[{start:{line:900,column:4},end:{line:908,column:5}},{start:{line:900,column:4},end:{line:908,column:5}}],line:900},"88":{loc:{start:{line:901,column:6},end:{line:905,column:7}},type:"if",locations:[{start:{line:901,column:6},end:{line:905,column:7}},{start:{line:901,column:6},end:{line:905,column:7}}],line:901},"89":{loc:{start:{line:903,column:13},end:{line:905,column:7}},type:"if",locations:[{start:{line:903,column:13},end:{line:905,column:7}},{start:{line:903,column:13},end:{line:905,column:7}}],line:903},"90":{loc:{start:{line:903,column:17},end:{line:903,column:62}},type:"binary-expr",locations:[{start:{line:903,column:17},end:{line:903,column:37}},{start:{line:903,column:41},end:{line:903,column:62}}],line:903},"91":{loc:{start:{line:924,column:6},end:{line:928,column:7}},type:"if",locations:[{start:{line:924,column:6},end:{line:928,column:7}},{start:{line:924,column:6},end:{line:928,column:7}}],line:924},"92":{loc:{start:{line:924,column:10},end:{line:924,column:61}},type:"binary-expr",locations:[{start:{line:924,column:10},end:{line:924,column:15}},{start:{line:924,column:19},end:{line:924,column:61}}],line:924},"93":{loc:{start:{line:938,column:8},end:{line:940,column:9}},type:"if",locations:[{start:{line:938,column:8},end:{line:940,column:9}},{start:{line:938,column:8},end:{line:940,column:9}}],line:938},"94":{loc:{start:{line:938,column:12},end:{line:938,column:103}},type:"binary-expr",locations:[{start:{line:938,column:12},end:{line:938,column:32}},{start:{line:938,column:36},end:{line:938,column:76}},{start:{line:938,column:80},end:{line:938,column:103}}],line:938},"95":{loc:{start:{line:942,column:8},end:{line:944,column:9}},type:"if",locations:[{start:{line:942,column:8},end:{line:944,column:9}},{start:{line:942,column:8},end:{line:944,column:9}}],line:942},"96":{loc:{start:{line:942,column:12},end:{line:942,column:60}},type:"binary-expr",locations:[{start:{line:942,column:12},end:{line:942,column:33}},{start:{line:942,column:37},end:{line:942,column:60}}],line:942},"97":{loc:{start:{line:949,column:28},end:{line:949,column:80}},type:"binary-expr",locations:[{start:{line:949,column:28},end:{line:949,column:53}},{start:{line:949,column:57},end:{line:949,column:80}}],line:949},"98":{loc:{start:{line:953,column:6},end:{line:955,column:7}},type:"if",locations:[{start:{line:953,column:6},end:{line:955,column:7}},{start:{line:953,column:6},end:{line:955,column:7}}],line:953},"99":{loc:{start:{line:962,column:8},end:{line:966,column:9}},type:"if",locations:[{start:{line:962,column:8},end:{line:966,column:9}},{start:{line:962,column:8},end:{line:966,column:9}}],line:962},"100":{loc:{start:{line:970,column:6},end:{line:972,column:7}},type:"if",locations:[{start:{line:970,column:6},end:{line:972,column:7}},{start:{line:970,column:6},end:{line:972,column:7}}],line:970},"101":{loc:{start:{line:1000,column:8},end:{line:1002,column:9}},type:"if",locations:[{start:{line:1000,column:8},end:{line:1002,column:9}},{start:{line:1000,column:8},end:{line:1002,column:9}}],line:1000},"102":{loc:{start:{line:1000,column:12},end:{line:1000,column:70}},type:"binary-expr",locations:[{start:{line:1000,column:12},end:{line:1000,column:26}},{start:{line:1000,column:30},end:{line:1000,column:70}}],line:1000},"103":{loc:{start:{line:1007,column:6},end:{line:1011,column:7}},type:"if",locations:[{start:{line:1007,column:6},end:{line:1011,column:7}},{start:{line:1007,column:6},end:{line:1011,column:7}}],line:1007},"104":{loc:{start:{line:1018,column:4},end:{line:1020,column:5}},type:"if",locations:[{start:{line:1018,column:4},end:{line:1020,column:5}},{start:{line:1018,column:4},end:{line:1020,column:5}}],line:1018},"105":{loc:{start:{line:1034,column:8},end:{line:1038,column:9}},type:"if",locations:[{start:{line:1034,column:8},end:{line:1038,column:9}},{start:{line:1034,column:8},end:{line:1038,column:9}}],line:1034},"106":{loc:{start:{line:1046,column:30},end:{line:1046,column:41}},type:"default-arg",locations:[{start:{line:1046,column:39},end:{line:1046,column:41}}],line:1046},"107":{loc:{start:{line:1047,column:4},end:{line:1049,column:5}},type:"if",locations:[{start:{line:1047,column:4},end:{line:1049,column:5}},{start:{line:1047,column:4},end:{line:1049,column:5}}],line:1047},"108":{loc:{start:{line:1051,column:4},end:{line:1056,column:5}},type:"if",locations:[{start:{line:1051,column:4},end:{line:1056,column:5}},{start:{line:1051,column:4},end:{line:1056,column:5}}],line:1051},"109":{loc:{start:{line:1063,column:6},end:{line:1113,column:7}},type:"if",locations:[{start:{line:1063,column:6},end:{line:1113,column:7}},{start:{line:1063,column:6},end:{line:1113,column:7}}],line:1063},"110":{loc:{start:{line:1064,column:8},end:{line:1069,column:9}},type:"if",locations:[{start:{line:1064,column:8},end:{line:1069,column:9}},{start:{line:1064,column:8},end:{line:1069,column:9}}],line:1064},"111":{loc:{start:{line:1071,column:8},end:{line:1076,column:9}},type:"if",locations:[{start:{line:1071,column:8},end:{line:1076,column:9}},{start:{line:1071,column:8},end:{line:1076,column:9}}],line:1071},"112":{loc:{start:{line:1080,column:8},end:{line:1083,column:10}},type:"if",locations:[{start:{line:1080,column:8},end:{line:1083,column:10}},{start:{line:1080,column:8},end:{line:1083,column:10}}],line:1080},"113":{loc:{start:{line:1085,column:8},end:{line:1112,column:9}},type:"if",locations:[{start:{line:1085,column:8},end:{line:1112,column:9}},{start:{line:1085,column:8},end:{line:1112,column:9}}],line:1085},"114":{loc:{start:{line:1088,column:10},end:{line:1097,column:11}},type:"if",locations:[{start:{line:1088,column:10},end:{line:1097,column:11}},{start:{line:1088,column:10},end:{line:1097,column:11}}],line:1088},"115":{loc:{start:{line:1092,column:17},end:{line:1097,column:11}},type:"if",locations:[{start:{line:1092,column:17},end:{line:1097,column:11}},{start:{line:1092,column:17},end:{line:1097,column:11}}],line:1092},"116":{loc:{start:{line:1092,column:21},end:{line:1092,column:90}},type:"binary-expr",locations:[{start:{line:1092,column:21},end:{line:1092,column:57}},{start:{line:1092,column:61},end:{line:1092,column:90}}],line:1092},"117":{loc:{start:{line:1099,column:10},end:{line:1104,column:11}},type:"if",locations:[{start:{line:1099,column:10},end:{line:1104,column:11}},{start:{line:1099,column:10},end:{line:1104,column:11}}],line:1099},"118":{loc:{start:{line:1105,column:15},end:{line:1112,column:9}},type:"if",locations:[{start:{line:1105,column:15},end:{line:1112,column:9}},{start:{line:1105,column:15},end:{line:1112,column:9}}],line:1105},"119":{loc:{start:{line:1106,column:10},end:{line:1111,column:11}},type:"if",locations:[{start:{line:1106,column:10},end:{line:1111,column:11}},{start:{line:1106,column:10},end:{line:1111,column:11}}],line:1106},"120":{loc:{start:{line:1106,column:14},end:{line:1106,column:76}},type:"binary-expr",locations:[{start:{line:1106,column:14},end:{line:1106,column:43}},{start:{line:1106,column:47},end:{line:1106,column:76}}],line:1106},"121":{loc:{start:{line:1120,column:56},end:{line:1120,column:102}},type:"binary-expr",locations:[{start:{line:1120,column:56},end:{line:1120,column:67}},{start:{line:1120,column:71},end:{line:1120,column:102}}],line:1120},"122":{loc:{start:{line:1122,column:4},end:{line:1127,column:5}},type:"if",locations:[{start:{line:1122,column:4},end:{line:1127,column:5}},{start:{line:1122,column:4},end:{line:1127,column:5}}],line:1122},"123":{loc:{start:{line:1134,column:4},end:{line:1136,column:5}},type:"if",locations:[{start:{line:1134,column:4},end:{line:1136,column:5}},{start:{line:1134,column:4},end:{line:1136,column:5}}],line:1134},"124":{loc:{start:{line:1143,column:4},end:{line:1145,column:5}},type:"if",locations:[{start:{line:1143,column:4},end:{line:1145,column:5}},{start:{line:1143,column:4},end:{line:1145,column:5}}],line:1143},"125":{loc:{start:{line:1153,column:4},end:{line:1157,column:5}},type:"if",locations:[{start:{line:1153,column:4},end:{line:1157,column:5}},{start:{line:1153,column:4},end:{line:1157,column:5}}],line:1153},"126":{loc:{start:{line:1159,column:4},end:{line:1161,column:5}},type:"if",locations:[{start:{line:1159,column:4},end:{line:1161,column:5}},{start:{line:1159,column:4},end:{line:1161,column:5}}],line:1159},"127":{loc:{start:{line:1164,column:4},end:{line:1166,column:5}},type:"if",locations:[{start:{line:1164,column:4},end:{line:1166,column:5}},{start:{line:1164,column:4},end:{line:1166,column:5}}],line:1164},"128":{loc:{start:{line:1170,column:4},end:{line:1174,column:5}},type:"if",locations:[{start:{line:1170,column:4},end:{line:1174,column:5}},{start:{line:1170,column:4},end:{line:1174,column:5}}],line:1170},"129":{loc:{start:{line:1176,column:4},end:{line:1188,column:5}},type:"if",locations:[{start:{line:1176,column:4},end:{line:1188,column:5}},{start:{line:1176,column:4},end:{line:1188,column:5}}],line:1176},"130":{loc:{start:{line:1179,column:6},end:{line:1183,column:7}},type:"if",locations:[{start:{line:1179,column:6},end:{line:1183,column:7}},{start:{line:1179,column:6},end:{line:1183,column:7}}],line:1179},"131":{loc:{start:{line:1185,column:6},end:{line:1187,column:7}},type:"if",locations:[{start:{line:1185,column:6},end:{line:1187,column:7}},{start:{line:1185,column:6},end:{line:1187,column:7}}],line:1185},"132":{loc:{start:{line:1190,column:4},end:{line:1204,column:5}},type:"if",locations:[{start:{line:1190,column:4},end:{line:1204,column:5}},{start:{line:1190,column:4},end:{line:1204,column:5}}],line:1190},"133":{loc:{start:{line:1191,column:6},end:{line:1193,column:7}},type:"if",locations:[{start:{line:1191,column:6},end:{line:1193,column:7}},{start:{line:1191,column:6},end:{line:1193,column:7}}],line:1191},"134":{loc:{start:{line:1197,column:6},end:{line:1199,column:7}},type:"if",locations:[{start:{line:1197,column:6},end:{line:1199,column:7}},{start:{line:1197,column:6},end:{line:1199,column:7}}],line:1197},"135":{loc:{start:{line:1197,column:10},end:{line:1197,column:79}},type:"binary-expr",locations:[{start:{line:1197,column:10},end:{line:1197,column:22}},{start:{line:1197,column:26},end:{line:1197,column:79}}],line:1197},"136":{loc:{start:{line:1207,column:6},end:{line:1210,column:7}},type:"if",locations:[{start:{line:1207,column:6},end:{line:1210,column:7}},{start:{line:1207,column:6},end:{line:1210,column:7}}],line:1207},"137":{loc:{start:{line:1236,column:6},end:{line:1240,column:7}},type:"if",locations:[{start:{line:1236,column:6},end:{line:1240,column:7}},{start:{line:1236,column:6},end:{line:1240,column:7}}],line:1236},"138":{loc:{start:{line:1242,column:6},end:{line:1244,column:7}},type:"if",locations:[{start:{line:1242,column:6},end:{line:1244,column:7}},{start:{line:1242,column:6},end:{line:1244,column:7}}],line:1242},"139":{loc:{start:{line:1242,column:10},end:{line:1242,column:71}},type:"binary-expr",locations:[{start:{line:1242,column:10},end:{line:1242,column:23}},{start:{line:1242,column:27},end:{line:1242,column:71}}],line:1242},"140":{loc:{start:{line:1261,column:4},end:{line:1263,column:5}},type:"if",locations:[{start:{line:1261,column:4},end:{line:1263,column:5}},{start:{line:1261,column:4},end:{line:1263,column:5}}],line:1261},"141":{loc:{start:{line:1266,column:6},end:{line:1268,column:7}},type:"if",locations:[{start:{line:1266,column:6},end:{line:1268,column:7}},{start:{line:1266,column:6},end:{line:1268,column:7}}],line:1266},"142":{loc:{start:{line:1271,column:6},end:{line:1273,column:7}},type:"if",locations:[{start:{line:1271,column:6},end:{line:1273,column:7}},{start:{line:1271,column:6},end:{line:1273,column:7}}],line:1271},"143":{loc:{start:{line:1278,column:6},end:{line:1282,column:7}},type:"if",locations:[{start:{line:1278,column:6},end:{line:1282,column:7}},{start:{line:1278,column:6},end:{line:1282,column:7}}],line:1278},"144":{loc:{start:{line:1285,column:8},end:{line:1287,column:9}},type:"if",locations:[{start:{line:1285,column:8},end:{line:1287,column:9}},{start:{line:1285,column:8},end:{line:1287,column:9}}],line:1285},"145":{loc:{start:{line:1296,column:10},end:{line:1299,column:11}},type:"if",locations:[{start:{line:1296,column:10},end:{line:1299,column:11}},{start:{line:1296,column:10},end:{line:1299,column:11}}],line:1296},"146":{loc:{start:{line:1296,column:14},end:{line:1296,column:48}},type:"binary-expr",locations:[{start:{line:1296,column:14},end:{line:1296,column:19}},{start:{line:1296,column:23},end:{line:1296,column:48}}],line:1296},"147":{loc:{start:{line:1318,column:6},end:{line:1320,column:7}},type:"if",locations:[{start:{line:1318,column:6},end:{line:1320,column:7}},{start:{line:1318,column:6},end:{line:1320,column:7}}],line:1318},"148":{loc:{start:{line:1318,column:10},end:{line:1318,column:72}},type:"binary-expr",locations:[{start:{line:1318,column:10},end:{line:1318,column:27}},{start:{line:1318,column:31},end:{line:1318,column:72}}],line:1318},"149":{loc:{start:{line:1322,column:6},end:{line:1324,column:7}},type:"if",locations:[{start:{line:1322,column:6},end:{line:1324,column:7}},{start:{line:1322,column:6},end:{line:1324,column:7}}],line:1322},"150":{loc:{start:{line:1328,column:6},end:{line:1330,column:7}},type:"if",locations:[{start:{line:1328,column:6},end:{line:1330,column:7}},{start:{line:1328,column:6},end:{line:1330,column:7}}],line:1328},"151":{loc:{start:{line:1334,column:6},end:{line:1336,column:7}},type:"if",locations:[{start:{line:1334,column:6},end:{line:1336,column:7}},{start:{line:1334,column:6},end:{line:1336,column:7}}],line:1334},"152":{loc:{start:{line:1338,column:6},end:{line:1341,column:7}},type:"if",locations:[{start:{line:1338,column:6},end:{line:1341,column:7}},{start:{line:1338,column:6},end:{line:1341,column:7}}],line:1338},"153":{loc:{start:{line:1349,column:4},end:{line:1354,column:5}},type:"if",locations:[{start:{line:1349,column:4},end:{line:1354,column:5}},{start:{line:1349,column:4},end:{line:1354,column:5}}],line:1349},"154":{loc:{start:{line:1365,column:4},end:{line:1367,column:5}},type:"if",locations:[{start:{line:1365,column:4},end:{line:1367,column:5}},{start:{line:1365,column:4},end:{line:1367,column:5}}],line:1365},"155":{loc:{start:{line:1365,column:8},end:{line:1365,column:39}},type:"binary-expr",locations:[{start:{line:1365,column:8},end:{line:1365,column:16}},{start:{line:1365,column:20},end:{line:1365,column:39}}],line:1365},"156":{loc:{start:{line:1370,column:6},end:{line:1378,column:7}},type:"if",locations:[{start:{line:1370,column:6},end:{line:1378,column:7}},{start:{line:1370,column:6},end:{line:1378,column:7}}],line:1370},"157":{loc:{start:{line:1370,column:10},end:{line:1370,column:33}},type:"binary-expr",locations:[{start:{line:1370,column:10},end:{line:1370,column:15}},{start:{line:1370,column:19},end:{line:1370,column:33}}],line:1370},"158":{loc:{start:{line:1371,column:8},end:{line:1374,column:9}},type:"if",locations:[{start:{line:1371,column:8},end:{line:1374,column:9}},{start:{line:1371,column:8},end:{line:1374,column:9}}],line:1371},"159":{loc:{start:{line:1371,column:12},end:{line:1371,column:64}},type:"binary-expr",locations:[{start:{line:1371,column:12},end:{line:1371,column:26}},{start:{line:1371,column:30},end:{line:1371,column:64}}],line:1371},"160":{loc:{start:{line:1383,column:4},end:{line:1385,column:5}},type:"if",locations:[{start:{line:1383,column:4},end:{line:1385,column:5}},{start:{line:1383,column:4},end:{line:1385,column:5}}],line:1383},"161":{loc:{start:{line:1396,column:4},end:{line:1398,column:5}},type:"if",locations:[{start:{line:1396,column:4},end:{line:1398,column:5}},{start:{line:1396,column:4},end:{line:1398,column:5}}],line:1396},"162":{loc:{start:{line:1396,column:8},end:{line:1396,column:57}},type:"binary-expr",locations:[{start:{line:1396,column:8},end:{line:1396,column:25}},{start:{line:1396,column:29},end:{line:1396,column:57}}],line:1396},"163":{loc:{start:{line:1402,column:4},end:{line:1404,column:5}},type:"if",locations:[{start:{line:1402,column:4},end:{line:1404,column:5}},{start:{line:1402,column:4},end:{line:1404,column:5}}],line:1402},"164":{loc:{start:{line:1407,column:4},end:{line:1411,column:5}},type:"if",locations:[{start:{line:1407,column:4},end:{line:1411,column:5}},{start:{line:1407,column:4},end:{line:1411,column:5}}],line:1407},"165":{loc:{start:{line:1418,column:4},end:{line:1420,column:5}},type:"if",locations:[{start:{line:1418,column:4},end:{line:1420,column:5}},{start:{line:1418,column:4},end:{line:1420,column:5}}],line:1418},"166":{loc:{start:{line:1422,column:4},end:{line:1424,column:5}},type:"if",locations:[{start:{line:1422,column:4},end:{line:1424,column:5}},{start:{line:1422,column:4},end:{line:1424,column:5}}],line:1422},"167":{loc:{start:{line:1422,column:8},end:{line:1422,column:57}},type:"binary-expr",locations:[{start:{line:1422,column:8},end:{line:1422,column:25}},{start:{line:1422,column:29},end:{line:1422,column:57}}],line:1422},"168":{loc:{start:{line:1429,column:4},end:{line:1440,column:5}},type:"if",locations:[{start:{line:1429,column:4},end:{line:1440,column:5}},{start:{line:1429,column:4},end:{line:1440,column:5}}],line:1429},"169":{loc:{start:{line:1431,column:6},end:{line:1435,column:7}},type:"if",locations:[{start:{line:1431,column:6},end:{line:1435,column:7}},{start:{line:1431,column:6},end:{line:1435,column:7}}],line:1431},"170":{loc:{start:{line:1431,column:10},end:{line:1431,column:43}},type:"binary-expr",locations:[{start:{line:1431,column:10},end:{line:1431,column:19}},{start:{line:1431,column:23},end:{line:1431,column:43}}],line:1431},"171":{loc:{start:{line:1433,column:13},end:{line:1435,column:7}},type:"if",locations:[{start:{line:1433,column:13},end:{line:1435,column:7}},{start:{line:1433,column:13},end:{line:1435,column:7}}],line:1433},"172":{loc:{start:{line:1433,column:17},end:{line:1433,column:67}},type:"binary-expr",locations:[{start:{line:1433,column:17},end:{line:1433,column:43}},{start:{line:1433,column:47},end:{line:1433,column:67}}],line:1433},"173":{loc:{start:{line:1444,column:28},end:{line:1444,column:115}},type:"cond-expr",locations:[{start:{line:1444,column:79},end:{line:1444,column:95}},{start:{line:1444,column:98},end:{line:1444,column:115}}],line:1444},"174":{loc:{start:{line:1446,column:4},end:{line:1448,column:5}},type:"if",locations:[{start:{line:1446,column:4},end:{line:1448,column:5}},{start:{line:1446,column:4},end:{line:1448,column:5}}],line:1446},"175":{loc:{start:{line:1446,column:8},end:{line:1446,column:69}},type:"binary-expr",locations:[{start:{line:1446,column:8},end:{line:1446,column:44}},{start:{line:1446,column:48},end:{line:1446,column:69}}],line:1446},"176":{loc:{start:{line:1451,column:4},end:{line:1453,column:5}},type:"if",locations:[{start:{line:1451,column:4},end:{line:1453,column:5}},{start:{line:1451,column:4},end:{line:1453,column:5}}],line:1451},"177":{loc:{start:{line:1451,column:8},end:{line:1451,column:104}},type:"binary-expr",locations:[{start:{line:1451,column:8},end:{line:1451,column:56}},{start:{line:1451,column:60},end:{line:1451,column:104}}],line:1451},"178":{loc:{start:{line:1457,column:4},end:{line:1463,column:5}},type:"if",locations:[{start:{line:1457,column:4},end:{line:1463,column:5}},{start:{line:1457,column:4},end:{line:1463,column:5}}],line:1457},"179":{loc:{start:{line:1457,column:8},end:{line:1457,column:64}},type:"binary-expr",locations:[{start:{line:1457,column:8},end:{line:1457,column:36}},{start:{line:1457,column:40},end:{line:1457,column:64}}],line:1457},"180":{loc:{start:{line:1459,column:6},end:{line:1462,column:7}},type:"if",locations:[{start:{line:1459,column:6},end:{line:1462,column:7}},{start:{line:1459,column:6},end:{line:1462,column:7}}],line:1459},"181":{loc:{start:{line:1459,column:10},end:{line:1459,column:57}},type:"binary-expr",locations:[{start:{line:1459,column:10},end:{line:1459,column:34}},{start:{line:1459,column:38},end:{line:1459,column:57}}],line:1459},"182":{loc:{start:{line:1474,column:11},end:{line:1474,column:89}},type:"binary-expr",locations:[{start:{line:1474,column:11},end:{line:1474,column:37}},{start:{line:1474,column:41},end:{line:1474,column:89}}],line:1474},"183":{loc:{start:{line:1480,column:4},end:{line:1483,column:5}},type:"if",locations:[{start:{line:1480,column:4},end:{line:1483,column:5}},{start:{line:1480,column:4},end:{line:1483,column:5}}],line:1480},"184":{loc:{start:{line:1482,column:13},end:{line:1482,column:61}},type:"cond-expr",locations:[{start:{line:1482,column:38},end:{line:1482,column:46}},{start:{line:1482,column:49},end:{line:1482,column:61}}],line:1482},"185":{loc:{start:{line:1490,column:4},end:{line:1492,column:5}},type:"if",locations:[{start:{line:1490,column:4},end:{line:1492,column:5}},{start:{line:1490,column:4},end:{line:1492,column:5}}],line:1490},"186":{loc:{start:{line:1517,column:25},end:{line:1517,column:142}},type:"cond-expr",locations:[{start:{line:1517,column:90},end:{line:1517,column:92}},{start:{line:1517,column:95},end:{line:1517,column:142}}],line:1517},"187":{loc:{start:{line:1520,column:4},end:{line:1530,column:5}},type:"if",locations:[{start:{line:1520,column:4},end:{line:1530,column:5}},{start:{line:1520,column:4},end:{line:1530,column:5}}],line:1520},"188":{loc:{start:{line:1520,column:8},end:{line:1520,column:131}},type:"binary-expr",locations:[{start:{line:1520,column:8},end:{line:1520,column:26}},{start:{line:1520,column:30},end:{line:1520,column:48}},{start:{line:1520,column:52},end:{line:1520,column:76}},{start:{line:1520,column:80},end:{line:1520,column:104}},{start:{line:1520,column:108},end:{line:1520,column:131}}],line:1520},"189":{loc:{start:{line:1521,column:6},end:{line:1523,column:7}},type:"if",locations:[{start:{line:1521,column:6},end:{line:1523,column:7}},{start:{line:1521,column:6},end:{line:1523,column:7}}],line:1521},"190":{loc:{start:{line:1521,column:10},end:{line:1521,column:78}},type:"binary-expr",locations:[{start:{line:1521,column:10},end:{line:1521,column:35}},{start:{line:1521,column:39},end:{line:1521,column:78}}],line:1521},"191":{loc:{start:{line:1525,column:29},end:{line:1525,column:91}},type:"binary-expr",locations:[{start:{line:1525,column:29},end:{line:1525,column:49}},{start:{line:1525,column:53},end:{line:1525,column:91}}],line:1525},"192":{loc:{start:{line:1527,column:6},end:{line:1529,column:7}},type:"if",locations:[{start:{line:1527,column:6},end:{line:1529,column:7}},{start:{line:1527,column:6},end:{line:1529,column:7}}],line:1527},"193":{loc:{start:{line:1534,column:4},end:{line:1540,column:5}},type:"if",locations:[{start:{line:1534,column:4},end:{line:1540,column:5}},{start:{line:1534,column:4},end:{line:1540,column:5}}],line:1534},"194":{loc:{start:{line:1534,column:8},end:{line:1534,column:73}},type:"binary-expr",locations:[{start:{line:1534,column:8},end:{line:1534,column:31}},{start:{line:1534,column:35},end:{line:1534,column:73}}],line:1534},"195":{loc:{start:{line:1535,column:6},end:{line:1537,column:7}},type:"if",locations:[{start:{line:1535,column:6},end:{line:1537,column:7}},{start:{line:1535,column:6},end:{line:1537,column:7}}],line:1535},"196":{loc:{start:{line:1535,column:10},end:{line:1535,column:78}},type:"binary-expr",locations:[{start:{line:1535,column:10},end:{line:1535,column:35}},{start:{line:1535,column:39},end:{line:1535,column:78}}],line:1535},"197":{loc:{start:{line:1562,column:2},end:{line:1585,column:3}},type:"switch",locations:[{start:{line:1563,column:4},end:{line:1564,column:23}},{start:{line:1566,column:4},end:{line:1567,column:22}},{start:{line:1569,column:4},end:{line:1570,column:22}},{start:{line:1572,column:4},end:{line:1572,column:15}},{start:{line:1573,column:4},end:{line:1578,column:32}},{start:{line:1580,column:4},end:{line:1580,column:20}},{start:{line:1581,column:4},end:{line:1581,column:18}},{start:{line:1582,column:4},end:{line:1582,column:21}},{start:{line:1583,column:4},end:{line:1584,column:30}}],line:1562},"198":{loc:{start:{line:1574,column:6},end:{line:1576,column:7}},type:"if",locations:[{start:{line:1574,column:6},end:{line:1576,column:7}},{start:{line:1574,column:6},end:{line:1576,column:7}}],line:1574},"199":{loc:{start:{line:1592,column:2},end:{line:1594,column:3}},type:"if",locations:[{start:{line:1592,column:2},end:{line:1594,column:3}},{start:{line:1592,column:2},end:{line:1594,column:3}}],line:1592},"200":{loc:{start:{line:1596,column:2},end:{line:1655,column:3}},type:"if",locations:[{start:{line:1596,column:2},end:{line:1655,column:3}},{start:{line:1596,column:2},end:{line:1655,column:3}}],line:1596},"201":{loc:{start:{line:1597,column:4},end:{line:1652,column:5}},type:"switch",locations:[{start:{line:1598,column:6},end:{line:1606,column:14}},{start:{line:1608,column:6},end:{line:1616,column:14}},{start:{line:1618,column:6},end:{line:1623,column:14}},{start:{line:1625,column:6},end:{line:1630,column:14}},{start:{line:1632,column:6},end:{line:1637,column:14}},{start:{line:1639,column:6},end:{line:1644,column:14}},{start:{line:1646,column:6},end:{line:1651,column:14}}],line:1597},"202":{loc:{start:{line:1599,column:8},end:{line:1604,column:9}},type:"if",locations:[{start:{line:1599,column:8},end:{line:1604,column:9}},{start:{line:1599,column:8},end:{line:1604,column:9}}],line:1599},"203":{loc:{start:{line:1609,column:8},end:{line:1614,column:9}},type:"if",locations:[{start:{line:1609,column:8},end:{line:1614,column:9}},{start:{line:1609,column:8},end:{line:1614,column:9}}],line:1609},"204":{loc:{start:{line:1619,column:8},end:{line:1621,column:9}},type:"if",locations:[{start:{line:1619,column:8},end:{line:1621,column:9}},{start:{line:1619,column:8},end:{line:1621,column:9}}],line:1619},"205":{loc:{start:{line:1626,column:8},end:{line:1628,column:9}},type:"if",locations:[{start:{line:1626,column:8},end:{line:1628,column:9}},{start:{line:1626,column:8},end:{line:1628,column:9}}],line:1626},"206":{loc:{start:{line:1633,column:8},end:{line:1635,column:9}},type:"if",locations:[{start:{line:1633,column:8},end:{line:1635,column:9}},{start:{line:1633,column:8},end:{line:1635,column:9}}],line:1633},"207":{loc:{start:{line:1633,column:12},end:{line:1633,column:57}},type:"binary-expr",locations:[{start:{line:1633,column:12},end:{line:1633,column:32}},{start:{line:1633,column:36},end:{line:1633,column:57}}],line:1633},"208":{loc:{start:{line:1640,column:8},end:{line:1642,column:9}},type:"if",locations:[{start:{line:1640,column:8},end:{line:1642,column:9}},{start:{line:1640,column:8},end:{line:1642,column:9}}],line:1640},"209":{loc:{start:{line:1647,column:8},end:{line:1649,column:9}},type:"if",locations:[{start:{line:1647,column:8},end:{line:1649,column:9}},{start:{line:1647,column:8},end:{line:1649,column:9}}],line:1647},"210":{loc:{start:{line:1657,column:2},end:{line:1659,column:3}},type:"if",locations:[{start:{line:1657,column:2},end:{line:1659,column:3}},{start:{line:1657,column:2},end:{line:1659,column:3}}],line:1657},"211":{loc:{start:{line:1661,column:2},end:{line:1687,column:3}},type:"if",locations:[{start:{line:1661,column:2},end:{line:1687,column:3}},{start:{line:1661,column:2},end:{line:1687,column:3}}],line:1661},"212":{loc:{start:{line:1662,column:4},end:{line:1686,column:5}},type:"switch",locations:[{start:{line:1663,column:6},end:{line:1664,column:24}},{start:{line:1666,column:6},end:{line:1667,column:20}},{start:{line:1669,column:6},end:{line:1669,column:17}},{start:{line:1670,column:6},end:{line:1670,column:23}},{start:{line:1671,column:6},end:{line:1672,column:23}},{start:{line:1674,column:6},end:{line:1674,column:25}},{start:{line:1675,column:6},end:{line:1679,column:10}},{start:{line:1681,column:6},end:{line:1682,column:41}},{start:{line:1684,column:6},end:{line:1685,column:43}}],line:1662}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":0,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":0,"458":0,"459":0,"460":0,"461":0,"462":0,"463":0,"464":0,"465":0,"466":0,"467":0,"468":0,"469":0,"470":0,"471":0,"472":0,"473":0,"474":0,"475":0,"476":0,"477":0,"478":0,"479":0,"480":0,"481":0,"482":0,"483":0,"484":0,"485":0,"486":0,"487":0,"488":0,"489":0,"490":0,"491":0,"492":0,"493":0,"494":0,"495":0,"496":0,"497":0,"498":0,"499":0,"500":0,"501":0,"502":0,"503":0,"504":0,"505":0,"506":0,"507":0,"508":0,"509":0,"510":0,"511":0,"512":0,"513":0,"514":0,"515":0,"516":0,"517":0,"518":0,"519":0,"520":0,"521":0,"522":0,"523":0,"524":0,"525":0,"526":0,"527":0,"528":0,"529":0,"530":0,"531":0,"532":0,"533":0,"534":0,"535":0,"536":0,"537":0,"538":0,"539":0,"540":0,"541":0,"542":0,"543":0,"544":0,"545":0,"546":0,"547":0,"548":0,"549":0,"550":0,"551":0,"552":0,"553":0,"554":0,"555":0,"556":0,"557":0,"558":0,"559":0,"560":0,"561":0,"562":0,"563":0,"564":0,"565":0,"566":0,"567":0,"568":0,"569":0,"570":0,"571":0,"572":0,"573":0,"574":0,"575":0,"576":0,"577":0,"578":0,"579":0,"580":0,"581":0,"582":0,"583":0,"584":0,"585":0,"586":0,"587":0,"588":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0,0,0],"34":[0,0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0],"54":[0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0],"71":[0,0],"72":[0,0],"73":[0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0],"78":[0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0],"86":[0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0],"113":[0,0],"114":[0,0],"115":[0,0],"116":[0,0],"117":[0,0],"118":[0,0],"119":[0,0],"120":[0,0],"121":[0,0],"122":[0,0],"123":[0,0],"124":[0,0],"125":[0,0],"126":[0,0],"127":[0,0],"128":[0,0],"129":[0,0],"130":[0,0],"131":[0,0],"132":[0,0],"133":[0,0],"134":[0,0],"135":[0,0],"136":[0,0],"137":[0,0],"138":[0,0],"139":[0,0],"140":[0,0],"141":[0,0],"142":[0,0],"143":[0,0],"144":[0,0],"145":[0,0],"146":[0,0],"147":[0,0],"148":[0,0],"149":[0,0],"150":[0,0],"151":[0,0],"152":[0,0],"153":[0,0],"154":[0,0],"155":[0,0],"156":[0,0],"157":[0,0],"158":[0,0],"159":[0,0],"160":[0,0],"161":[0,0],"162":[0,0],"163":[0,0],"164":[0,0],"165":[0,0],"166":[0,0],"167":[0,0],"168":[0,0],"169":[0,0],"170":[0,0],"171":[0,0],"172":[0,0],"173":[0,0],"174":[0,0],"175":[0,0],"176":[0,0],"177":[0,0],"178":[0,0],"179":[0,0],"180":[0,0],"181":[0,0],"182":[0,0],"183":[0,0],"184":[0,0],"185":[0,0],"186":[0,0],"187":[0,0],"188":[0,0,0,0,0],"189":[0,0],"190":[0,0],"191":[0,0],"192":[0,0],"193":[0,0],"194":[0,0],"195":[0,0],"196":[0,0],"197":[0,0,0,0,0,0,0,0,0],"198":[0,0],"199":[0,0],"200":[0,0],"201":[0,0,0,0,0,0,0],"202":[0,0],"203":[0,0],"204":[0,0],"205":[0,0],"206":[0,0],"207":[0,0],"208":[0,0],"209":[0,0],"210":[0,0],"211":[0,0],"212":[0,0,0,0,0,0,0,0,0]},inputSourceMap:{version:3,sources:["../../src/Controllers/SchemaController.js"],names:["Parse","require","defaultColumns","Object","freeze","_Default","objectId","type","createdAt","updatedAt","ACL","_User","username","password","email","emailVerified","authData","_Installation","installationId","deviceToken","channels","deviceType","pushType","GCMSenderId","timeZone","localeIdentifier","badge","appVersion","appName","appIdentifier","parseVersion","_Role","name","users","targetClass","roles","_Session","user","sessionToken","expiresAt","createdWith","_Product","productIdentifier","download","downloadName","icon","order","title","subtitle","_PushStatus","pushTime","source","query","payload","expiry","expiration_interval","status","numSent","numFailed","pushHash","errorMessage","sentPerType","failedPerType","sentPerUTCOffset","failedPerUTCOffset","count","_JobStatus","jobName","message","params","finishedAt","_JobSchedule","description","startAfter","daysOfWeek","timeOfDay","lastRun","repeatMinutes","_Hooks","functionName","className","triggerName","url","_GlobalConfig","masterKeyOnly","_GraphQLConfig","config","_Audience","lastUsed","timesUsed","_Idempotency","reqId","expire","requiredColumns","invalidColumns","systemClasses","volatileClasses","roleRegex","protectedFieldsPointerRegex","publicRegex","authenticatedRegex","requiresAuthenticationRegex","clpPointerRegex","protectedFieldsRegex","clpFieldsRegex","validatePermissionKey","key","userIdRegExp","matchesSome","regEx","match","valid","Error","INVALID_JSON","validateProtectedFieldsKey","CLPValidKeys","validateCLP","perms","fields","operationKey","indexOf","operation","validateCLPjson","fieldName","validatePointerPermission","entity","protectedFields","Array","isArray","field","prototype","hasOwnProperty","call","pointerFields","pointerField","permit","joinClassRegex","classAndFieldRegex","classNameIsValid","test","fieldNameIsValid","includes","fieldNameIsValidForClass","invalidClassNameMessage","invalidJsonError","validNonRelationOrPointerTypes","fieldTypeIsInvalid","INVALID_CLASS_NAME","undefined","INCORRECT_TYPE","convertSchemaToAdapterSchema","schema","injectDefaultSchema","_rperm","_wperm","_hashed_password","convertAdapterSchemaToParseSchema","indexes","keys","length","SchemaData","constructor","allSchemas","__data","__protectedFields","forEach","defineProperty","get","data","classLevelPermissions","classProtectedFields","unq","Set","from","defaultSchema","_HooksSchema","_GlobalConfigSchema","_GraphQLConfigSchema","_PushStatusSchema","_JobStatusSchema","_JobScheduleSchema","_AudienceSchema","_IdempotencySchema","VolatileClassesSchemas","dbTypeMatchesObjectType","dbType","objectType","typeToString","SchemaController","databaseAdapter","_dbAdapter","schemaData","SchemaCache","all","Config","applicationId","customIds","allowCustomObjectId","customIdRegEx","autoIdRegEx","userIdRegEx","watch","reloadData","clearCache","options","reloadDataPromise","getAllClasses","then","err","setAllClasses","cached","Promise","resolve","map","put","getOneSchema","allowVolatileClasses","clear","oneSchema","find","reject","addClassIfNotExists","validationError","validateNewClass","code","error","adapterSchema","createClass","parseSchema","DUPLICATE_VALUE","updateClass","submittedFields","database","existingFields","__op","newSchema","buildMergedSchemaObject","defaultFields","fullNewSchema","assign","validateSchemaData","deletedFields","insertedFields","push","deletePromise","deleteFields","enforceFields","promises","enforceFieldExists","results","filter","result","setPermissions","setIndexesWithSchemaFormat","ensureFields","reloadedSchema","catch","enforceClassExists","existingFieldNames","INVALID_KEY_NAME","fieldType","defaultValue","defaultValueType","getType","required","geoPoints","setClassLevelPermissions","isValidation","split","expectedType","getExpectedType","JSON","stringify","updateFieldOptions","addFieldIfNotExists","i","deleteField","fieldNames","schemaFields","adapter","deleteClass","validateObject","object","geocount","expected","promise","thenValidateRequiredColumns","validateRequiredColumns","columns","missingColumns","column","testPermissionsForClassName","aclGroup","testPermissions","getClassLevelPermissions","classPermissions","some","acl","validatePermission","action","OBJECT_NOT_FOUND","permissionField","OPERATION_FORBIDDEN","hasClass","load","dbAdapter","putRequest","sysSchemaField","_id","oldField","fieldIsDeleted","newField","schemaPromise","obj","getObjectType","__type","iso","latitude","longitude","base64","coordinates","objects","ops"],mappings:"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",sourcesContent:["// @flow\n// This class handles schema validation, persistence, and modification.\n//\n// Each individual Schema object should be immutable. The helpers to\n// do things with the Schema just return a new schema when the schema\n// is changed.\n//\n// The canonical place to store this Schema is in the database itself,\n// in a _SCHEMA collection. This is not the right way to do it for an\n// open source framework, but it's backward compatible, so we're\n// keeping it this way for now.\n//\n// In API-handling code, you should only use the Schema class via the\n// DatabaseController. This will let us replace the schema logic for\n// different databases.\n// TODO: hide all schema logic inside the database adapter.\n// @flow-disable-next\nconst Parse = require('parse/node').Parse;\nimport { StorageAdapter } from '../Adapters/Storage/StorageAdapter';\nimport SchemaCache from '../Adapters/Cache/SchemaCache';\nimport DatabaseController from './DatabaseController';\nimport Config from '../Config';\n// @flow-disable-next\nimport deepcopy from 'deepcopy';\nimport type {\n  Schema,\n  SchemaFields,\n  ClassLevelPermissions,\n  SchemaField,\n  LoadSchemaOptions,\n} from './types';\n\nconst defaultColumns: { [string]: SchemaFields } = Object.freeze({\n  // Contain the default columns for every parse object type (except _Join collection)\n  _Default: {\n    objectId: { type: 'String' },\n    createdAt: { type: 'Date' },\n    updatedAt: { type: 'Date' },\n    ACL: { type: 'ACL' },\n  },\n  // The additional default columns for the _User collection (in addition to DefaultCols)\n  _User: {\n    username: { type: 'String' },\n    password: { type: 'String' },\n    email: { type: 'String' },\n    emailVerified: { type: 'Boolean' },\n    authData: { type: 'Object' },\n  },\n  // The additional default columns for the _Installation collection (in addition to DefaultCols)\n  _Installation: {\n    installationId: { type: 'String' },\n    deviceToken: { type: 'String' },\n    channels: { type: 'Array' },\n    deviceType: { type: 'String' },\n    pushType: { type: 'String' },\n    GCMSenderId: { type: 'String' },\n    timeZone: { type: 'String' },\n    localeIdentifier: { type: 'String' },\n    badge: { type: 'Number' },\n    appVersion: { type: 'String' },\n    appName: { type: 'String' },\n    appIdentifier: { type: 'String' },\n    parseVersion: { type: 'String' },\n  },\n  // The additional default columns for the _Role collection (in addition to DefaultCols)\n  _Role: {\n    name: { type: 'String' },\n    users: { type: 'Relation', targetClass: '_User' },\n    roles: { type: 'Relation', targetClass: '_Role' },\n  },\n  // The additional default columns for the _Session collection (in addition to DefaultCols)\n  _Session: {\n    user: { type: 'Pointer', targetClass: '_User' },\n    installationId: { type: 'String' },\n    sessionToken: { type: 'String' },\n    expiresAt: { type: 'Date' },\n    createdWith: { type: 'Object' },\n  },\n  _Product: {\n    productIdentifier: { type: 'String' },\n    download: { type: 'File' },\n    downloadName: { type: 'String' },\n    icon: { type: 'File' },\n    order: { type: 'Number' },\n    title: { type: 'String' },\n    subtitle: { type: 'String' },\n  },\n  _PushStatus: {\n    pushTime: { type: 'String' },\n    source: { type: 'String' }, // rest or webui\n    query: { type: 'String' }, // the stringified JSON query\n    payload: { type: 'String' }, // the stringified JSON payload,\n    title: { type: 'String' },\n    expiry: { type: 'Number' },\n    expiration_interval: { type: 'Number' },\n    status: { type: 'String' },\n    numSent: { type: 'Number' },\n    numFailed: { type: 'Number' },\n    pushHash: { type: 'String' },\n    errorMessage: { type: 'Object' },\n    sentPerType: { type: 'Object' },\n    failedPerType: { type: 'Object' },\n    sentPerUTCOffset: { type: 'Object' },\n    failedPerUTCOffset: { type: 'Object' },\n    count: { type: 'Number' }, // tracks # of batches queued and pending\n  },\n  _JobStatus: {\n    jobName: { type: 'String' },\n    source: { type: 'String' },\n    status: { type: 'String' },\n    message: { type: 'String' },\n    params: { type: 'Object' }, // params received when calling the job\n    finishedAt: { type: 'Date' },\n  },\n  _JobSchedule: {\n    jobName: { type: 'String' },\n    description: { type: 'String' },\n    params: { type: 'String' },\n    startAfter: { type: 'String' },\n    daysOfWeek: { type: 'Array' },\n    timeOfDay: { type: 'String' },\n    lastRun: { type: 'Number' },\n    repeatMinutes: { type: 'Number' },\n  },\n  _Hooks: {\n    functionName: { type: 'String' },\n    className: { type: 'String' },\n    triggerName: { type: 'String' },\n    url: { type: 'String' },\n  },\n  _GlobalConfig: {\n    objectId: { type: 'String' },\n    params: { type: 'Object' },\n    masterKeyOnly: { type: 'Object' },\n  },\n  _GraphQLConfig: {\n    objectId: { type: 'String' },\n    config: { type: 'Object' },\n  },\n  _Audience: {\n    objectId: { type: 'String' },\n    name: { type: 'String' },\n    query: { type: 'String' }, //storing query as JSON string to prevent \"Nested keys should not contain the '$' or '.' characters\" error\n    lastUsed: { type: 'Date' },\n    timesUsed: { type: 'Number' },\n  },\n  _Idempotency: {\n    reqId: { type: 'String' },\n    expire: { type: 'Date' },\n  },\n});\n\nconst requiredColumns = Object.freeze({\n  _Product: ['productIdentifier', 'icon', 'order', 'title', 'subtitle'],\n  _Role: ['name', 'ACL'],\n});\n\nconst invalidColumns = ['length'];\n\nconst systemClasses = Object.freeze([\n  '_User',\n  '_Installation',\n  '_Role',\n  '_Session',\n  '_Product',\n  '_PushStatus',\n  '_JobStatus',\n  '_JobSchedule',\n  '_Audience',\n  '_Idempotency',\n]);\n\nconst volatileClasses = Object.freeze([\n  '_JobStatus',\n  '_PushStatus',\n  '_Hooks',\n  '_GlobalConfig',\n  '_GraphQLConfig',\n  '_JobSchedule',\n  '_Audience',\n  '_Idempotency',\n]);\n\n// Anything that start with role\nconst roleRegex = /^role:.*/;\n// Anything that starts with userField (allowed for protected fields only)\nconst protectedFieldsPointerRegex = /^userField:.*/;\n// * permission\nconst publicRegex = /^\\*$/;\n\nconst authenticatedRegex = /^authenticated$/;\n\nconst requiresAuthenticationRegex = /^requiresAuthentication$/;\n\nconst clpPointerRegex = /^pointerFields$/;\n\n// regex for validating entities in protectedFields object\nconst protectedFieldsRegex = Object.freeze([\n  protectedFieldsPointerRegex,\n  publicRegex,\n  authenticatedRegex,\n  roleRegex,\n]);\n\n// clp regex\nconst clpFieldsRegex = Object.freeze([\n  clpPointerRegex,\n  publicRegex,\n  requiresAuthenticationRegex,\n  roleRegex,\n]);\n\nfunction validatePermissionKey(key, userIdRegExp) {\n  let matchesSome = false;\n  for (const regEx of clpFieldsRegex) {\n    if (key.match(regEx) !== null) {\n      matchesSome = true;\n      break;\n    }\n  }\n\n  // userId depends on startup options so it's dynamic\n  const valid = matchesSome || key.match(userIdRegExp) !== null;\n  if (!valid) {\n    throw new Parse.Error(\n      Parse.Error.INVALID_JSON,\n      `'${key}' is not a valid key for class level permissions`\n    );\n  }\n}\n\nfunction validateProtectedFieldsKey(key, userIdRegExp) {\n  let matchesSome = false;\n  for (const regEx of protectedFieldsRegex) {\n    if (key.match(regEx) !== null) {\n      matchesSome = true;\n      break;\n    }\n  }\n\n  // userId regex depends on launch options so it's dynamic\n  const valid = matchesSome || key.match(userIdRegExp) !== null;\n  if (!valid) {\n    throw new Parse.Error(\n      Parse.Error.INVALID_JSON,\n      `'${key}' is not a valid key for class level permissions`\n    );\n  }\n}\n\nconst CLPValidKeys = Object.freeze([\n  'find',\n  'count',\n  'get',\n  'create',\n  'update',\n  'delete',\n  'addField',\n  'readUserFields',\n  'writeUserFields',\n  'protectedFields',\n]);\n\n// validation before setting class-level permissions on collection\nfunction validateCLP(perms: ClassLevelPermissions, fields: SchemaFields, userIdRegExp: RegExp) {\n  if (!perms) {\n    return;\n  }\n  for (const operationKey in perms) {\n    if (CLPValidKeys.indexOf(operationKey) == -1) {\n      throw new Parse.Error(\n        Parse.Error.INVALID_JSON,\n        `${operationKey} is not a valid operation for class level permissions`\n      );\n    }\n\n    const operation = perms[operationKey];\n    // proceed with next operationKey\n\n    // throws when root fields are of wrong type\n    validateCLPjson(operation, operationKey);\n\n    if (operationKey === 'readUserFields' || operationKey === 'writeUserFields') {\n      // validate grouped pointer permissions\n      // must be an array with field names\n      for (const fieldName of operation) {\n        validatePointerPermission(fieldName, fields, operationKey);\n      }\n      // readUserFields and writerUserFields do not have nesdted fields\n      // proceed with next operationKey\n      continue;\n    }\n\n    // validate protected fields\n    if (operationKey === 'protectedFields') {\n      for (const entity in operation) {\n        // throws on unexpected key\n        validateProtectedFieldsKey(entity, userIdRegExp);\n\n        const protectedFields = operation[entity];\n\n        if (!Array.isArray(protectedFields)) {\n          throw new Parse.Error(\n            Parse.Error.INVALID_JSON,\n            `'${protectedFields}' is not a valid value for protectedFields[${entity}] - expected an array.`\n          );\n        }\n\n        // if the field is in form of array\n        for (const field of protectedFields) {\n          // do not alloow to protect default fields\n          if (defaultColumns._Default[field]) {\n            throw new Parse.Error(\n              Parse.Error.INVALID_JSON,\n              `Default field '${field}' can not be protected`\n            );\n          }\n          // field should exist on collection\n          if (!Object.prototype.hasOwnProperty.call(fields, field)) {\n            throw new Parse.Error(\n              Parse.Error.INVALID_JSON,\n              `Field '${field}' in protectedFields:${entity} does not exist`\n            );\n          }\n        }\n      }\n      // proceed with next operationKey\n      continue;\n    }\n\n    // validate other fields\n    // Entity can be:\n    // \"*\" - Public,\n    // \"requiresAuthentication\" - authenticated users,\n    // \"objectId\" - _User id,\n    // \"role:rolename\",\n    // \"pointerFields\" - array of field names containing pointers to users\n    for (const entity in operation) {\n      // throws on unexpected key\n      validatePermissionKey(entity, userIdRegExp);\n\n      // entity can be either:\n      // \"pointerFields\": string[]\n      if (entity === 'pointerFields') {\n        const pointerFields = operation[entity];\n\n        if (Array.isArray(pointerFields)) {\n          for (const pointerField of pointerFields) {\n            validatePointerPermission(pointerField, fields, operation);\n          }\n        } else {\n          throw new Parse.Error(\n            Parse.Error.INVALID_JSON,\n            `'${pointerFields}' is not a valid value for ${operationKey}[${entity}] - expected an array.`\n          );\n        }\n        // proceed with next entity key\n        continue;\n      }\n\n      // or [entity]: boolean\n      const permit = operation[entity];\n\n      if (permit !== true) {\n        throw new Parse.Error(\n          Parse.Error.INVALID_JSON,\n          `'${permit}' is not a valid value for class level permissions ${operationKey}:${entity}:${permit}`\n        );\n      }\n    }\n  }\n}\n\nfunction validateCLPjson(operation: any, operationKey: string) {\n  if (operationKey === 'readUserFields' || operationKey === 'writeUserFields') {\n    if (!Array.isArray(operation)) {\n      throw new Parse.Error(\n        Parse.Error.INVALID_JSON,\n        `'${operation}' is not a valid value for class level permissions ${operationKey} - must be an array`\n      );\n    }\n  } else {\n    if (typeof operation === 'object' && operation !== null) {\n      // ok to proceed\n      return;\n    } else {\n      throw new Parse.Error(\n        Parse.Error.INVALID_JSON,\n        `'${operation}' is not a valid value for class level permissions ${operationKey} - must be an object`\n      );\n    }\n  }\n}\n\nfunction validatePointerPermission(fieldName: string, fields: Object, operation: string) {\n  // Uses collection schema to ensure the field is of type:\n  // - Pointer<_User> (pointers)\n  // - Array\n  //\n  //    It's not possible to enforce type on Array's items in schema\n  //  so we accept any Array field, and later when applying permissions\n  //  only items that are pointers to _User are considered.\n  if (\n    !(\n      fields[fieldName] &&\n      ((fields[fieldName].type == 'Pointer' && fields[fieldName].targetClass == '_User') ||\n        fields[fieldName].type == 'Array')\n    )\n  ) {\n    throw new Parse.Error(\n      Parse.Error.INVALID_JSON,\n      `'${fieldName}' is not a valid column for class level pointer permissions ${operation}`\n    );\n  }\n}\n\nconst joinClassRegex = /^_Join:[A-Za-z0-9_]+:[A-Za-z0-9_]+/;\nconst classAndFieldRegex = /^[A-Za-z][A-Za-z0-9_]*$/;\nfunction classNameIsValid(className: string): boolean {\n  // Valid classes must:\n  return (\n    // Be one of _User, _Installation, _Role, _Session OR\n    systemClasses.indexOf(className) > -1 ||\n    // Be a join table OR\n    joinClassRegex.test(className) ||\n    // Include only alpha-numeric and underscores, and not start with an underscore or number\n    fieldNameIsValid(className, className)\n  );\n}\n\n// Valid fields must be alpha-numeric, and not start with an underscore or number\n// must not be a reserved key\nfunction fieldNameIsValid(fieldName: string, className: string): boolean {\n  if (className && className !== '_Hooks') {\n    if (fieldName === 'className') {\n      return false;\n    }\n  }\n  return classAndFieldRegex.test(fieldName) && !invalidColumns.includes(fieldName);\n}\n\n// Checks that it's not trying to clobber one of the default fields of the class.\nfunction fieldNameIsValidForClass(fieldName: string, className: string): boolean {\n  if (!fieldNameIsValid(fieldName, className)) {\n    return false;\n  }\n  if (defaultColumns._Default[fieldName]) {\n    return false;\n  }\n  if (defaultColumns[className] && defaultColumns[className][fieldName]) {\n    return false;\n  }\n  return true;\n}\n\nfunction invalidClassNameMessage(className: string): string {\n  return (\n    'Invalid classname: ' +\n    className +\n    ', classnames can only have alphanumeric characters and _, and must start with an alpha character '\n  );\n}\n\nconst invalidJsonError = new Parse.Error(Parse.Error.INVALID_JSON, 'invalid JSON');\nconst validNonRelationOrPointerTypes = [\n  'Number',\n  'String',\n  'Boolean',\n  'Date',\n  'Object',\n  'Array',\n  'GeoPoint',\n  'File',\n  'Bytes',\n  'Polygon',\n];\n// Returns an error suitable for throwing if the type is invalid\nconst fieldTypeIsInvalid = ({ type, targetClass }) => {\n  if (['Pointer', 'Relation'].indexOf(type) >= 0) {\n    if (!targetClass) {\n      return new Parse.Error(135, `type ${type} needs a class name`);\n    } else if (typeof targetClass !== 'string') {\n      return invalidJsonError;\n    } else if (!classNameIsValid(targetClass)) {\n      return new Parse.Error(Parse.Error.INVALID_CLASS_NAME, invalidClassNameMessage(targetClass));\n    } else {\n      return undefined;\n    }\n  }\n  if (typeof type !== 'string') {\n    return invalidJsonError;\n  }\n  if (validNonRelationOrPointerTypes.indexOf(type) < 0) {\n    return new Parse.Error(Parse.Error.INCORRECT_TYPE, `invalid field type: ${type}`);\n  }\n  return undefined;\n};\n\nconst convertSchemaToAdapterSchema = (schema: any) => {\n  schema = injectDefaultSchema(schema);\n  delete schema.fields.ACL;\n  schema.fields._rperm = { type: 'Array' };\n  schema.fields._wperm = { type: 'Array' };\n\n  if (schema.className === '_User') {\n    delete schema.fields.password;\n    schema.fields._hashed_password = { type: 'String' };\n  }\n\n  return schema;\n};\n\nconst convertAdapterSchemaToParseSchema = ({ ...schema }) => {\n  delete schema.fields._rperm;\n  delete schema.fields._wperm;\n\n  schema.fields.ACL = { type: 'ACL' };\n\n  if (schema.className === '_User') {\n    delete schema.fields.authData; //Auth data is implicit\n    delete schema.fields._hashed_password;\n    schema.fields.password = { type: 'String' };\n  }\n\n  if (schema.indexes && Object.keys(schema.indexes).length === 0) {\n    delete schema.indexes;\n  }\n\n  return schema;\n};\n\nclass SchemaData {\n  __data: any;\n  __protectedFields: any;\n  constructor(allSchemas = [], protectedFields = {}) {\n    this.__data = {};\n    this.__protectedFields = protectedFields;\n    allSchemas.forEach(schema => {\n      if (volatileClasses.includes(schema.className)) {\n        return;\n      }\n      Object.defineProperty(this, schema.className, {\n        get: () => {\n          if (!this.__data[schema.className]) {\n            const data = {};\n            data.fields = injectDefaultSchema(schema).fields;\n            data.classLevelPermissions = deepcopy(schema.classLevelPermissions);\n            data.indexes = schema.indexes;\n\n            const classProtectedFields = this.__protectedFields[schema.className];\n            if (classProtectedFields) {\n              for (const key in classProtectedFields) {\n                const unq = new Set([\n                  ...(data.classLevelPermissions.protectedFields[key] || []),\n                  ...classProtectedFields[key],\n                ]);\n                data.classLevelPermissions.protectedFields[key] = Array.from(unq);\n              }\n            }\n\n            this.__data[schema.className] = data;\n          }\n          return this.__data[schema.className];\n        },\n      });\n    });\n\n    // Inject the in-memory classes\n    volatileClasses.forEach(className => {\n      Object.defineProperty(this, className, {\n        get: () => {\n          if (!this.__data[className]) {\n            const schema = injectDefaultSchema({\n              className,\n              fields: {},\n              classLevelPermissions: {},\n            });\n            const data = {};\n            data.fields = schema.fields;\n            data.classLevelPermissions = schema.classLevelPermissions;\n            data.indexes = schema.indexes;\n            this.__data[className] = data;\n          }\n          return this.__data[className];\n        },\n      });\n    });\n  }\n}\n\nconst injectDefaultSchema = ({ className, fields, classLevelPermissions, indexes }: Schema) => {\n  const defaultSchema: Schema = {\n    className,\n    fields: {\n      ...defaultColumns._Default,\n      ...(defaultColumns[className] || {}),\n      ...fields,\n    },\n    classLevelPermissions,\n  };\n  if (indexes && Object.keys(indexes).length !== 0) {\n    defaultSchema.indexes = indexes;\n  }\n  return defaultSchema;\n};\n\nconst _HooksSchema = { className: '_Hooks', fields: defaultColumns._Hooks };\nconst _GlobalConfigSchema = {\n  className: '_GlobalConfig',\n  fields: defaultColumns._GlobalConfig,\n};\nconst _GraphQLConfigSchema = {\n  className: '_GraphQLConfig',\n  fields: defaultColumns._GraphQLConfig,\n};\nconst _PushStatusSchema = convertSchemaToAdapterSchema(\n  injectDefaultSchema({\n    className: '_PushStatus',\n    fields: {},\n    classLevelPermissions: {},\n  })\n);\nconst _JobStatusSchema = convertSchemaToAdapterSchema(\n  injectDefaultSchema({\n    className: '_JobStatus',\n    fields: {},\n    classLevelPermissions: {},\n  })\n);\nconst _JobScheduleSchema = convertSchemaToAdapterSchema(\n  injectDefaultSchema({\n    className: '_JobSchedule',\n    fields: {},\n    classLevelPermissions: {},\n  })\n);\nconst _AudienceSchema = convertSchemaToAdapterSchema(\n  injectDefaultSchema({\n    className: '_Audience',\n    fields: defaultColumns._Audience,\n    classLevelPermissions: {},\n  })\n);\nconst _IdempotencySchema = convertSchemaToAdapterSchema(\n  injectDefaultSchema({\n    className: '_Idempotency',\n    fields: defaultColumns._Idempotency,\n    classLevelPermissions: {},\n  })\n);\nconst VolatileClassesSchemas = [\n  _HooksSchema,\n  _JobStatusSchema,\n  _JobScheduleSchema,\n  _PushStatusSchema,\n  _GlobalConfigSchema,\n  _GraphQLConfigSchema,\n  _AudienceSchema,\n  _IdempotencySchema,\n];\n\nconst dbTypeMatchesObjectType = (dbType: SchemaField | string, objectType: SchemaField) => {\n  if (dbType.type !== objectType.type) return false;\n  if (dbType.targetClass !== objectType.targetClass) return false;\n  if (dbType === objectType.type) return true;\n  if (dbType.type === objectType.type) return true;\n  return false;\n};\n\nconst typeToString = (type: SchemaField | string): string => {\n  if (typeof type === 'string') {\n    return type;\n  }\n  if (type.targetClass) {\n    return `${type.type}<${type.targetClass}>`;\n  }\n  return `${type.type}`;\n};\n\n// Stores the entire schema of the app in a weird hybrid format somewhere between\n// the mongo format and the Parse format. Soon, this will all be Parse format.\nexport default class SchemaController {\n  _dbAdapter: StorageAdapter;\n  schemaData: { [string]: Schema };\n  reloadDataPromise: ?Promise<any>;\n  protectedFields: any;\n  userIdRegEx: RegExp;\n\n  constructor(databaseAdapter: StorageAdapter) {\n    this._dbAdapter = databaseAdapter;\n    this.schemaData = new SchemaData(SchemaCache.all(), this.protectedFields);\n    this.protectedFields = Config.get(Parse.applicationId).protectedFields;\n\n    const customIds = Config.get(Parse.applicationId).allowCustomObjectId;\n\n    const customIdRegEx = /^.{1,}$/u; // 1+ chars\n    const autoIdRegEx = /^[a-zA-Z0-9]{1,}$/;\n\n    this.userIdRegEx = customIds ? customIdRegEx : autoIdRegEx;\n\n    this._dbAdapter.watch(() => {\n      this.reloadData({ clearCache: true });\n    });\n  }\n\n  reloadData(options: LoadSchemaOptions = { clearCache: false }): Promise<any> {\n    if (this.reloadDataPromise && !options.clearCache) {\n      return this.reloadDataPromise;\n    }\n    this.reloadDataPromise = this.getAllClasses(options)\n      .then(\n        allSchemas => {\n          this.schemaData = new SchemaData(allSchemas, this.protectedFields);\n          delete this.reloadDataPromise;\n        },\n        err => {\n          this.schemaData = new SchemaData();\n          delete this.reloadDataPromise;\n          throw err;\n        }\n      )\n      .then(() => {});\n    return this.reloadDataPromise;\n  }\n\n  getAllClasses(options: LoadSchemaOptions = { clearCache: false }): Promise<Array<Schema>> {\n    if (options.clearCache) {\n      return this.setAllClasses();\n    }\n    const cached = SchemaCache.all();\n    if (cached && cached.length) {\n      return Promise.resolve(cached);\n    }\n    return this.setAllClasses();\n  }\n\n  setAllClasses(): Promise<Array<Schema>> {\n    return this._dbAdapter\n      .getAllClasses()\n      .then(allSchemas => allSchemas.map(injectDefaultSchema))\n      .then(allSchemas => {\n        SchemaCache.put(allSchemas);\n        return allSchemas;\n      });\n  }\n\n  getOneSchema(\n    className: string,\n    allowVolatileClasses: boolean = false,\n    options: LoadSchemaOptions = { clearCache: false }\n  ): Promise<Schema> {\n    if (options.clearCache) {\n      SchemaCache.clear();\n    }\n    if (allowVolatileClasses && volatileClasses.indexOf(className) > -1) {\n      const data = this.schemaData[className];\n      return Promise.resolve({\n        className,\n        fields: data.fields,\n        classLevelPermissions: data.classLevelPermissions,\n        indexes: data.indexes,\n      });\n    }\n    const cached = SchemaCache.get(className);\n    if (cached && !options.clearCache) {\n      return Promise.resolve(cached);\n    }\n    return this.setAllClasses().then(allSchemas => {\n      const oneSchema = allSchemas.find(schema => schema.className === className);\n      if (!oneSchema) {\n        return Promise.reject(undefined);\n      }\n      return oneSchema;\n    });\n  }\n\n  // Create a new class that includes the three default fields.\n  // ACL is an implicit column that does not get an entry in the\n  // _SCHEMAS database. Returns a promise that resolves with the\n  // created schema, in mongo format.\n  // on success, and rejects with an error on fail. Ensure you\n  // have authorization (master key, or client class creation\n  // enabled) before calling this function.\n  async addClassIfNotExists(\n    className: string,\n    fields: SchemaFields = {},\n    classLevelPermissions: any,\n    indexes: any = {}\n  ): Promise<void | Schema> {\n    var validationError = this.validateNewClass(className, fields, classLevelPermissions);\n    if (validationError) {\n      if (validationError instanceof Parse.Error) {\n        return Promise.reject(validationError);\n      } else if (validationError.code && validationError.error) {\n        return Promise.reject(new Parse.Error(validationError.code, validationError.error));\n      }\n      return Promise.reject(validationError);\n    }\n    try {\n      const adapterSchema = await this._dbAdapter.createClass(\n        className,\n        convertSchemaToAdapterSchema({\n          fields,\n          classLevelPermissions,\n          indexes,\n          className,\n        })\n      );\n      // TODO: Remove by updating schema cache directly\n      await this.reloadData({ clearCache: true });\n      const parseSchema = convertAdapterSchemaToParseSchema(adapterSchema);\n      return parseSchema;\n    } catch (error) {\n      if (error && error.code === Parse.Error.DUPLICATE_VALUE) {\n        throw new Parse.Error(Parse.Error.INVALID_CLASS_NAME, `Class ${className} already exists.`);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  updateClass(\n    className: string,\n    submittedFields: SchemaFields,\n    classLevelPermissions: any,\n    indexes: any,\n    database: DatabaseController\n  ) {\n    return this.getOneSchema(className)\n      .then(schema => {\n        const existingFields = schema.fields;\n        Object.keys(submittedFields).forEach(name => {\n          const field = submittedFields[name];\n          if (\n            existingFields[name] &&\n            existingFields[name].type !== field.type &&\n            field.__op !== 'Delete'\n          ) {\n            throw new Parse.Error(255, `Field ${name} exists, cannot update.`);\n          }\n          if (!existingFields[name] && field.__op === 'Delete') {\n            throw new Parse.Error(255, `Field ${name} does not exist, cannot delete.`);\n          }\n        });\n\n        delete existingFields._rperm;\n        delete existingFields._wperm;\n        const newSchema = buildMergedSchemaObject(existingFields, submittedFields);\n        const defaultFields = defaultColumns[className] || defaultColumns._Default;\n        const fullNewSchema = Object.assign({}, newSchema, defaultFields);\n        const validationError = this.validateSchemaData(\n          className,\n          newSchema,\n          classLevelPermissions,\n          Object.keys(existingFields)\n        );\n        if (validationError) {\n          throw new Parse.Error(validationError.code, validationError.error);\n        }\n\n        // Finally we have checked to make sure the request is valid and we can start deleting fields.\n        // Do all deletions first, then a single save to _SCHEMA collection to handle all additions.\n        const deletedFields: string[] = [];\n        const insertedFields = [];\n        Object.keys(submittedFields).forEach(fieldName => {\n          if (submittedFields[fieldName].__op === 'Delete') {\n            deletedFields.push(fieldName);\n          } else {\n            insertedFields.push(fieldName);\n          }\n        });\n\n        let deletePromise = Promise.resolve();\n        if (deletedFields.length > 0) {\n          deletePromise = this.deleteFields(deletedFields, className, database);\n        }\n        let enforceFields = [];\n        return (\n          deletePromise // Delete Everything\n            .then(() => this.reloadData({ clearCache: true })) // Reload our Schema, so we have all the new values\n            .then(() => {\n              const promises = insertedFields.map(fieldName => {\n                const type = submittedFields[fieldName];\n                return this.enforceFieldExists(className, fieldName, type);\n              });\n              return Promise.all(promises);\n            })\n            .then(results => {\n              enforceFields = results.filter(result => !!result);\n              return this.setPermissions(className, classLevelPermissions, newSchema);\n            })\n            .then(() =>\n              this._dbAdapter.setIndexesWithSchemaFormat(\n                className,\n                indexes,\n                schema.indexes,\n                fullNewSchema\n              )\n            )\n            .then(() => this.reloadData({ clearCache: true }))\n            //TODO: Move this logic into the database adapter\n            .then(() => {\n              this.ensureFields(enforceFields);\n              const schema = this.schemaData[className];\n              const reloadedSchema: Schema = {\n                className: className,\n                fields: schema.fields,\n                classLevelPermissions: schema.classLevelPermissions,\n              };\n              if (schema.indexes && Object.keys(schema.indexes).length !== 0) {\n                reloadedSchema.indexes = schema.indexes;\n              }\n              return reloadedSchema;\n            })\n        );\n      })\n      .catch(error => {\n        if (error === undefined) {\n          throw new Parse.Error(\n            Parse.Error.INVALID_CLASS_NAME,\n            `Class ${className} does not exist.`\n          );\n        } else {\n          throw error;\n        }\n      });\n  }\n\n  // Returns a promise that resolves successfully to the new schema\n  // object or fails with a reason.\n  enforceClassExists(className: string): Promise<SchemaController> {\n    if (this.schemaData[className]) {\n      return Promise.resolve(this);\n    }\n    // We don't have this class. Update the schema\n    return (\n      // The schema update succeeded. Reload the schema\n      this.addClassIfNotExists(className)\n        .catch(() => {\n          // The schema update failed. This can be okay - it might\n          // have failed because there's a race condition and a different\n          // client is making the exact same schema update that we want.\n          // So just reload the schema.\n          return this.reloadData({ clearCache: true });\n        })\n        .then(() => {\n          // Ensure that the schema now validates\n          if (this.schemaData[className]) {\n            return this;\n          } else {\n            throw new Parse.Error(Parse.Error.INVALID_JSON, `Failed to add ${className}`);\n          }\n        })\n        .catch(() => {\n          // The schema still doesn't validate. Give up\n          throw new Parse.Error(Parse.Error.INVALID_JSON, 'schema class name does not revalidate');\n        })\n    );\n  }\n\n  validateNewClass(className: string, fields: SchemaFields = {}, classLevelPermissions: any): any {\n    if (this.schemaData[className]) {\n      throw new Parse.Error(Parse.Error.INVALID_CLASS_NAME, `Class ${className} already exists.`);\n    }\n    if (!classNameIsValid(className)) {\n      return {\n        code: Parse.Error.INVALID_CLASS_NAME,\n        error: invalidClassNameMessage(className),\n      };\n    }\n    return this.validateSchemaData(className, fields, classLevelPermissions, []);\n  }\n\n  validateSchemaData(\n    className: string,\n    fields: SchemaFields,\n    classLevelPermissions: ClassLevelPermissions,\n    existingFieldNames: Array<string>\n  ) {\n    for (const fieldName in fields) {\n      if (existingFieldNames.indexOf(fieldName) < 0) {\n        if (!fieldNameIsValid(fieldName, className)) {\n          return {\n            code: Parse.Error.INVALID_KEY_NAME,\n            error: 'invalid field name: ' + fieldName,\n          };\n        }\n        if (!fieldNameIsValidForClass(fieldName, className)) {\n          return {\n            code: 136,\n            error: 'field ' + fieldName + ' cannot be added',\n          };\n        }\n        const fieldType = fields[fieldName];\n        const error = fieldTypeIsInvalid(fieldType);\n        if (error) return { code: error.code, error: error.message };\n        if (fieldType.defaultValue !== undefined) {\n          let defaultValueType = getType(fieldType.defaultValue);\n          if (typeof defaultValueType === 'string') {\n            defaultValueType = { type: defaultValueType };\n          } else if (typeof defaultValueType === 'object' && fieldType.type === 'Relation') {\n            return {\n              code: Parse.Error.INCORRECT_TYPE,\n              error: `The 'default value' option is not applicable for ${typeToString(fieldType)}`,\n            };\n          }\n          if (!dbTypeMatchesObjectType(fieldType, defaultValueType)) {\n            return {\n              code: Parse.Error.INCORRECT_TYPE,\n              error: `schema mismatch for ${className}.${fieldName} default value; expected ${typeToString(\n                fieldType\n              )} but got ${typeToString(defaultValueType)}`,\n            };\n          }\n        } else if (fieldType.required) {\n          if (typeof fieldType === 'object' && fieldType.type === 'Relation') {\n            return {\n              code: Parse.Error.INCORRECT_TYPE,\n              error: `The 'required' option is not applicable for ${typeToString(fieldType)}`,\n            };\n          }\n        }\n      }\n    }\n\n    for (const fieldName in defaultColumns[className]) {\n      fields[fieldName] = defaultColumns[className][fieldName];\n    }\n\n    const geoPoints = Object.keys(fields).filter(\n      key => fields[key] && fields[key].type === 'GeoPoint'\n    );\n    if (geoPoints.length > 1) {\n      return {\n        code: Parse.Error.INCORRECT_TYPE,\n        error:\n          'currently, only one GeoPoint field may exist in an object. Adding ' +\n          geoPoints[1] +\n          ' when ' +\n          geoPoints[0] +\n          ' already exists.',\n      };\n    }\n    validateCLP(classLevelPermissions, fields, this.userIdRegEx);\n  }\n\n  // Sets the Class-level permissions for a given className, which must exist.\n  async setPermissions(className: string, perms: any, newSchema: SchemaFields) {\n    if (typeof perms === 'undefined') {\n      return Promise.resolve();\n    }\n    validateCLP(perms, newSchema, this.userIdRegEx);\n    await this._dbAdapter.setClassLevelPermissions(className, perms);\n    const cached = SchemaCache.get(className);\n    if (cached) {\n      cached.classLevelPermissions = perms;\n    }\n  }\n\n  // Returns a promise that resolves successfully to the new schema\n  // object if the provided className-fieldName-type tuple is valid.\n  // The className must already be validated.\n  // If 'freeze' is true, refuse to update the schema for this field.\n  enforceFieldExists(\n    className: string,\n    fieldName: string,\n    type: string | SchemaField,\n    isValidation?: boolean\n  ) {\n    if (fieldName.indexOf('.') > 0) {\n      // subdocument key (x.y) => ok if x is of type 'object'\n      fieldName = fieldName.split('.')[0];\n      type = 'Object';\n    }\n    if (!fieldNameIsValid(fieldName, className)) {\n      throw new Parse.Error(Parse.Error.INVALID_KEY_NAME, `Invalid field name: ${fieldName}.`);\n    }\n\n    // If someone tries to create a new field with null/undefined as the value, return;\n    if (!type) {\n      return undefined;\n    }\n\n    const expectedType = this.getExpectedType(className, fieldName);\n    if (typeof type === 'string') {\n      type = ({ type }: SchemaField);\n    }\n\n    if (type.defaultValue !== undefined) {\n      let defaultValueType = getType(type.defaultValue);\n      if (typeof defaultValueType === 'string') {\n        defaultValueType = { type: defaultValueType };\n      }\n      if (!dbTypeMatchesObjectType(type, defaultValueType)) {\n        throw new Parse.Error(\n          Parse.Error.INCORRECT_TYPE,\n          `schema mismatch for ${className}.${fieldName} default value; expected ${typeToString(\n            type\n          )} but got ${typeToString(defaultValueType)}`\n        );\n      }\n    }\n\n    if (expectedType) {\n      if (!dbTypeMatchesObjectType(expectedType, type)) {\n        throw new Parse.Error(\n          Parse.Error.INCORRECT_TYPE,\n          `schema mismatch for ${className}.${fieldName}; expected ${typeToString(\n            expectedType\n          )} but got ${typeToString(type)}`\n        );\n      }\n      // If type options do not change\n      // we can safely return\n      if (isValidation || JSON.stringify(expectedType) === JSON.stringify(type)) {\n        return undefined;\n      }\n      // Field options are may be changed\n      // ensure to have an update to date schema field\n      return this._dbAdapter.updateFieldOptions(className, fieldName, type);\n    }\n\n    return this._dbAdapter\n      .addFieldIfNotExists(className, fieldName, type)\n      .catch(error => {\n        if (error.code == Parse.Error.INCORRECT_TYPE) {\n          // Make sure that we throw errors when it is appropriate to do so.\n          throw error;\n        }\n        // The update failed. This can be okay - it might have been a race\n        // condition where another client updated the schema in the same\n        // way that we wanted to. So, just reload the schema\n        return Promise.resolve();\n      })\n      .then(() => {\n        return {\n          className,\n          fieldName,\n          type,\n        };\n      });\n  }\n\n  ensureFields(fields: any) {\n    for (let i = 0; i < fields.length; i += 1) {\n      const { className, fieldName } = fields[i];\n      let { type } = fields[i];\n      const expectedType = this.getExpectedType(className, fieldName);\n      if (typeof type === 'string') {\n        type = { type: type };\n      }\n      if (!expectedType || !dbTypeMatchesObjectType(expectedType, type)) {\n        throw new Parse.Error(Parse.Error.INVALID_JSON, `Could not add field ${fieldName}`);\n      }\n    }\n  }\n\n  // maintain compatibility\n  deleteField(fieldName: string, className: string, database: DatabaseController) {\n    return this.deleteFields([fieldName], className, database);\n  }\n\n  // Delete fields, and remove that data from all objects. This is intended\n  // to remove unused fields, if other writers are writing objects that include\n  // this field, the field may reappear. Returns a Promise that resolves with\n  // no object on success, or rejects with { code, error } on failure.\n  // Passing the database and prefix is necessary in order to drop relation collections\n  // and remove fields from objects. Ideally the database would belong to\n  // a database adapter and this function would close over it or access it via member.\n  deleteFields(fieldNames: Array<string>, className: string, database: DatabaseController) {\n    if (!classNameIsValid(className)) {\n      throw new Parse.Error(Parse.Error.INVALID_CLASS_NAME, invalidClassNameMessage(className));\n    }\n\n    fieldNames.forEach(fieldName => {\n      if (!fieldNameIsValid(fieldName, className)) {\n        throw new Parse.Error(Parse.Error.INVALID_KEY_NAME, `invalid field name: ${fieldName}`);\n      }\n      //Don't allow deleting the default fields.\n      if (!fieldNameIsValidForClass(fieldName, className)) {\n        throw new Parse.Error(136, `field ${fieldName} cannot be changed`);\n      }\n    });\n\n    return this.getOneSchema(className, false, { clearCache: true })\n      .catch(error => {\n        if (error === undefined) {\n          throw new Parse.Error(\n            Parse.Error.INVALID_CLASS_NAME,\n            `Class ${className} does not exist.`\n          );\n        } else {\n          throw error;\n        }\n      })\n      .then(schema => {\n        fieldNames.forEach(fieldName => {\n          if (!schema.fields[fieldName]) {\n            throw new Parse.Error(255, `Field ${fieldName} does not exist, cannot delete.`);\n          }\n        });\n\n        const schemaFields = { ...schema.fields };\n        return database.adapter.deleteFields(className, schema, fieldNames).then(() => {\n          return Promise.all(\n            fieldNames.map(fieldName => {\n              const field = schemaFields[fieldName];\n              if (field && field.type === 'Relation') {\n                //For relations, drop the _Join table\n                return database.adapter.deleteClass(`_Join:${fieldName}:${className}`);\n              }\n              return Promise.resolve();\n            })\n          );\n        });\n      })\n      .then(() => {\n        SchemaCache.clear();\n      });\n  }\n\n  // Validates an object provided in REST format.\n  // Returns a promise that resolves to the new schema if this object is\n  // valid.\n  async validateObject(className: string, object: any, query: any) {\n    let geocount = 0;\n    const schema = await this.enforceClassExists(className);\n    const promises = [];\n\n    for (const fieldName in object) {\n      if (object[fieldName] && getType(object[fieldName]) === 'GeoPoint') {\n        geocount++;\n      }\n      if (geocount > 1) {\n        return Promise.reject(\n          new Parse.Error(\n            Parse.Error.INCORRECT_TYPE,\n            'there can only be one geopoint field in a class'\n          )\n        );\n      }\n    }\n    for (const fieldName in object) {\n      if (object[fieldName] === undefined) {\n        continue;\n      }\n      const expected = getType(object[fieldName]);\n      if (!expected) {\n        continue;\n      }\n      if (fieldName === 'ACL') {\n        // Every object has ACL implicitly.\n        continue;\n      }\n      promises.push(schema.enforceFieldExists(className, fieldName, expected, true));\n    }\n    const results = await Promise.all(promises);\n    const enforceFields = results.filter(result => !!result);\n\n    if (enforceFields.length !== 0) {\n      // TODO: Remove by updating schema cache directly\n      await this.reloadData({ clearCache: true });\n    }\n    this.ensureFields(enforceFields);\n\n    const promise = Promise.resolve(schema);\n    return thenValidateRequiredColumns(promise, className, object, query);\n  }\n\n  // Validates that all the properties are set for the object\n  validateRequiredColumns(className: string, object: any, query: any) {\n    const columns = requiredColumns[className];\n    if (!columns || columns.length == 0) {\n      return Promise.resolve(this);\n    }\n\n    const missingColumns = columns.filter(function (column) {\n      if (query && query.objectId) {\n        if (object[column] && typeof object[column] === 'object') {\n          // Trying to delete a required column\n          return object[column].__op == 'Delete';\n        }\n        // Not trying to do anything there\n        return false;\n      }\n      return !object[column];\n    });\n\n    if (missingColumns.length > 0) {\n      throw new Parse.Error(Parse.Error.INCORRECT_TYPE, missingColumns[0] + ' is required.');\n    }\n    return Promise.resolve(this);\n  }\n\n  testPermissionsForClassName(className: string, aclGroup: string[], operation: string) {\n    return SchemaController.testPermissions(\n      this.getClassLevelPermissions(className),\n      aclGroup,\n      operation\n    );\n  }\n\n  // Tests that the class level permission let pass the operation for a given aclGroup\n  static testPermissions(classPermissions: ?any, aclGroup: string[], operation: string): boolean {\n    if (!classPermissions || !classPermissions[operation]) {\n      return true;\n    }\n    const perms = classPermissions[operation];\n    if (perms['*']) {\n      return true;\n    }\n    // Check permissions against the aclGroup provided (array of userId/roles)\n    if (\n      aclGroup.some(acl => {\n        return perms[acl] === true;\n      })\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  // Validates an operation passes class-level-permissions set in the schema\n  static validatePermission(\n    classPermissions: ?any,\n    className: string,\n    aclGroup: string[],\n    operation: string,\n    action?: string\n  ) {\n    if (SchemaController.testPermissions(classPermissions, aclGroup, operation)) {\n      return Promise.resolve();\n    }\n\n    if (!classPermissions || !classPermissions[operation]) {\n      return true;\n    }\n    const perms = classPermissions[operation];\n    // If only for authenticated users\n    // make sure we have an aclGroup\n    if (perms['requiresAuthentication']) {\n      // If aclGroup has * (public)\n      if (!aclGroup || aclGroup.length == 0) {\n        throw new Parse.Error(\n          Parse.Error.OBJECT_NOT_FOUND,\n          'Permission denied, user needs to be authenticated.'\n        );\n      } else if (aclGroup.indexOf('*') > -1 && aclGroup.length == 1) {\n        throw new Parse.Error(\n          Parse.Error.OBJECT_NOT_FOUND,\n          'Permission denied, user needs to be authenticated.'\n        );\n      }\n      // requiresAuthentication passed, just move forward\n      // probably would be wise at some point to rename to 'authenticatedUser'\n      return Promise.resolve();\n    }\n\n    // No matching CLP, let's check the Pointer permissions\n    // And handle those later\n    const permissionField =\n      ['get', 'find', 'count'].indexOf(operation) > -1 ? 'readUserFields' : 'writeUserFields';\n\n    // Reject create when write lockdown\n    if (permissionField == 'writeUserFields' && operation == 'create') {\n      throw new Parse.Error(\n        Parse.Error.OPERATION_FORBIDDEN,\n        `Permission denied for action ${operation} on class ${className}.`\n      );\n    }\n\n    // Process the readUserFields later\n    if (\n      Array.isArray(classPermissions[permissionField]) &&\n      classPermissions[permissionField].length > 0\n    ) {\n      return Promise.resolve();\n    }\n\n    const pointerFields = classPermissions[operation].pointerFields;\n    if (Array.isArray(pointerFields) && pointerFields.length > 0) {\n      // any op except 'addField as part of create' is ok.\n      if (operation !== 'addField' || action === 'update') {\n        // We can allow adding field on update flow only.\n        return Promise.resolve();\n      }\n    }\n\n    throw new Parse.Error(\n      Parse.Error.OPERATION_FORBIDDEN,\n      `Permission denied for action ${operation} on class ${className}.`\n    );\n  }\n\n  // Validates an operation passes class-level-permissions set in the schema\n  validatePermission(className: string, aclGroup: string[], operation: string, action?: string) {\n    return SchemaController.validatePermission(\n      this.getClassLevelPermissions(className),\n      className,\n      aclGroup,\n      operation,\n      action\n    );\n  }\n\n  getClassLevelPermissions(className: string): any {\n    return this.schemaData[className] && this.schemaData[className].classLevelPermissions;\n  }\n\n  // Returns the expected type for a className+key combination\n  // or undefined if the schema is not set\n  getExpectedType(className: string, fieldName: string): ?(SchemaField | string) {\n    if (this.schemaData[className]) {\n      const expectedType = this.schemaData[className].fields[fieldName];\n      return expectedType === 'map' ? 'Object' : expectedType;\n    }\n    return undefined;\n  }\n\n  // Checks if a given class is in the schema.\n  hasClass(className: string) {\n    if (this.schemaData[className]) {\n      return Promise.resolve(true);\n    }\n    return this.reloadData().then(() => !!this.schemaData[className]);\n  }\n}\n\n// Returns a promise for a new Schema.\nconst load = (dbAdapter: StorageAdapter, options: any): Promise<SchemaController> => {\n  const schema = new SchemaController(dbAdapter);\n  return schema.reloadData(options).then(() => schema);\n};\n\n// Builds a new schema (in schema API response format) out of an\n// existing mongo schema + a schemas API put request. This response\n// does not include the default fields, as it is intended to be passed\n// to mongoSchemaFromFieldsAndClassName. No validation is done here, it\n// is done in mongoSchemaFromFieldsAndClassName.\nfunction buildMergedSchemaObject(existingFields: SchemaFields, putRequest: any): SchemaFields {\n  const newSchema = {};\n  // @flow-disable-next\n  const sysSchemaField =\n    Object.keys(defaultColumns).indexOf(existingFields._id) === -1\n      ? []\n      : Object.keys(defaultColumns[existingFields._id]);\n  for (const oldField in existingFields) {\n    if (\n      oldField !== '_id' &&\n      oldField !== 'ACL' &&\n      oldField !== 'updatedAt' &&\n      oldField !== 'createdAt' &&\n      oldField !== 'objectId'\n    ) {\n      if (sysSchemaField.length > 0 && sysSchemaField.indexOf(oldField) !== -1) {\n        continue;\n      }\n      const fieldIsDeleted = putRequest[oldField] && putRequest[oldField].__op === 'Delete';\n      if (!fieldIsDeleted) {\n        newSchema[oldField] = existingFields[oldField];\n      }\n    }\n  }\n  for (const newField in putRequest) {\n    if (newField !== 'objectId' && putRequest[newField].__op !== 'Delete') {\n      if (sysSchemaField.length > 0 && sysSchemaField.indexOf(newField) !== -1) {\n        continue;\n      }\n      newSchema[newField] = putRequest[newField];\n    }\n  }\n  return newSchema;\n}\n\n// Given a schema promise, construct another schema promise that\n// validates this field once the schema loads.\nfunction thenValidateRequiredColumns(schemaPromise, className, object, query) {\n  return schemaPromise.then(schema => {\n    return schema.validateRequiredColumns(className, object, query);\n  });\n}\n\n// Gets the type from a REST API formatted object, where 'type' is\n// extended past javascript types to include the rest of the Parse\n// type system.\n// The output should be a valid schema value.\n// TODO: ensure that this is compatible with the format used in Open DB\nfunction getType(obj: any): ?(SchemaField | string) {\n  const type = typeof obj;\n  switch (type) {\n    case 'boolean':\n      return 'Boolean';\n    case 'string':\n      return 'String';\n    case 'number':\n      return 'Number';\n    case 'map':\n    case 'object':\n      if (!obj) {\n        return undefined;\n      }\n      return getObjectType(obj);\n    case 'function':\n    case 'symbol':\n    case 'undefined':\n    default:\n      throw 'bad obj: ' + obj;\n  }\n}\n\n// This gets the type for non-JSON types like pointers and files, but\n// also gets the appropriate type for $ operators.\n// Returns null if the type is unknown.\nfunction getObjectType(obj): ?(SchemaField | string) {\n  if (obj instanceof Array) {\n    return 'Array';\n  }\n  if (obj.__type) {\n    switch (obj.__type) {\n      case 'Pointer':\n        if (obj.className) {\n          return {\n            type: 'Pointer',\n            targetClass: obj.className,\n          };\n        }\n        break;\n      case 'Relation':\n        if (obj.className) {\n          return {\n            type: 'Relation',\n            targetClass: obj.className,\n          };\n        }\n        break;\n      case 'File':\n        if (obj.name) {\n          return 'File';\n        }\n        break;\n      case 'Date':\n        if (obj.iso) {\n          return 'Date';\n        }\n        break;\n      case 'GeoPoint':\n        if (obj.latitude != null && obj.longitude != null) {\n          return 'GeoPoint';\n        }\n        break;\n      case 'Bytes':\n        if (obj.base64) {\n          return 'Bytes';\n        }\n        break;\n      case 'Polygon':\n        if (obj.coordinates) {\n          return 'Polygon';\n        }\n        break;\n    }\n    throw new Parse.Error(Parse.Error.INCORRECT_TYPE, 'This is not a valid ' + obj.__type);\n  }\n  if (obj['$ne']) {\n    return getObjectType(obj['$ne']);\n  }\n  if (obj.__op) {\n    switch (obj.__op) {\n      case 'Increment':\n        return 'Number';\n      case 'Delete':\n        return null;\n      case 'Add':\n      case 'AddUnique':\n      case 'Remove':\n        return 'Array';\n      case 'AddRelation':\n      case 'RemoveRelation':\n        return {\n          type: 'Relation',\n          targetClass: obj.objects[0].className,\n        };\n      case 'Batch':\n        return getObjectType(obj.ops[0]);\n      default:\n        throw 'unexpected op: ' + obj.__op;\n    }\n  }\n  return 'Object';\n}\n\nexport {\n  load,\n  classNameIsValid,\n  fieldNameIsValid,\n  invalidClassNameMessage,\n  buildMergedSchemaObject,\n  systemClasses,\n  defaultColumns,\n  convertSchemaToAdapterSchema,\n  VolatileClassesSchemas,\n  SchemaController,\n};\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"1abd8d0c5907e5fa26bef12fa9352e6f7905ea59"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2jz9nwd12j=function(){return actualCoverage;};}return actualCoverage;}cov_2jz9nwd12j();cov_2jz9nwd12j().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2jz9nwd12j().s[1]++;exports.classNameIsValid=classNameIsValid;cov_2jz9nwd12j().s[2]++;exports.fieldNameIsValid=fieldNameIsValid;cov_2jz9nwd12j().s[3]++;exports.invalidClassNameMessage=invalidClassNameMessage;cov_2jz9nwd12j().s[4]++;exports.buildMergedSchemaObject=buildMergedSchemaObject;cov_2jz9nwd12j().s[5]++;exports.VolatileClassesSchemas=exports.convertSchemaToAdapterSchema=exports.defaultColumns=exports.systemClasses=exports.load=exports.SchemaController=exports.default=void 0;var _StorageAdapter=(cov_2jz9nwd12j().s[6]++,require("../Adapters/Storage/StorageAdapter"));var _SchemaCache=(cov_2jz9nwd12j().s[7]++,_interopRequireDefault(require("../Adapters/Cache/SchemaCache")));var _DatabaseController=(cov_2jz9nwd12j().s[8]++,_interopRequireDefault(require("./DatabaseController")));var _Config=(cov_2jz9nwd12j().s[9]++,_interopRequireDefault(require("../Config")));var _deepcopy=(cov_2jz9nwd12j().s[10]++,_interopRequireDefault(require("deepcopy")));function _interopRequireDefault(obj){cov_2jz9nwd12j().f[0]++;cov_2jz9nwd12j().s[11]++;return(cov_2jz9nwd12j().b[1][0]++,obj)&&(cov_2jz9nwd12j().b[1][1]++,obj.__esModule)?(cov_2jz9nwd12j().b[0][0]++,obj):(cov_2jz9nwd12j().b[0][1]++,{default:obj});}function ownKeys(object,enumerableOnly){cov_2jz9nwd12j().f[1]++;var keys=(cov_2jz9nwd12j().s[12]++,Object.keys(object));cov_2jz9nwd12j().s[13]++;if(Object.getOwnPropertySymbols){cov_2jz9nwd12j().b[2][0]++;var symbols=(cov_2jz9nwd12j().s[14]++,Object.getOwnPropertySymbols(object));cov_2jz9nwd12j().s[15]++;if(enumerableOnly){cov_2jz9nwd12j().b[3][0]++;cov_2jz9nwd12j().s[16]++;symbols=symbols.filter(function(sym){cov_2jz9nwd12j().f[2]++;cov_2jz9nwd12j().s[17]++;return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}else{cov_2jz9nwd12j().b[3][1]++;}cov_2jz9nwd12j().s[18]++;keys.push.apply(keys,symbols);}else{cov_2jz9nwd12j().b[2][1]++;}cov_2jz9nwd12j().s[19]++;return keys;}function _objectSpread(target){cov_2jz9nwd12j().f[3]++;cov_2jz9nwd12j().s[20]++;for(var i=(cov_2jz9nwd12j().s[21]++,1);i<arguments.length;i++){var source=(cov_2jz9nwd12j().s[22]++,arguments[i]!=null?(cov_2jz9nwd12j().b[4][0]++,arguments[i]):(cov_2jz9nwd12j().b[4][1]++,{}));cov_2jz9nwd12j().s[23]++;if(i%2){cov_2jz9nwd12j().b[5][0]++;cov_2jz9nwd12j().s[24]++;ownKeys(Object(source),true).forEach(function(key){cov_2jz9nwd12j().f[4]++;cov_2jz9nwd12j().s[25]++;_defineProperty(target,key,source[key]);});}else{cov_2jz9nwd12j().b[5][1]++;cov_2jz9nwd12j().s[26]++;if(Object.getOwnPropertyDescriptors){cov_2jz9nwd12j().b[6][0]++;cov_2jz9nwd12j().s[27]++;Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{cov_2jz9nwd12j().b[6][1]++;cov_2jz9nwd12j().s[28]++;ownKeys(Object(source)).forEach(function(key){cov_2jz9nwd12j().f[5]++;cov_2jz9nwd12j().s[29]++;Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}}cov_2jz9nwd12j().s[30]++;return target;}function _defineProperty(obj,key,value){cov_2jz9nwd12j().f[6]++;cov_2jz9nwd12j().s[31]++;if(key in obj){cov_2jz9nwd12j().b[7][0]++;cov_2jz9nwd12j().s[32]++;Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{cov_2jz9nwd12j().b[7][1]++;cov_2jz9nwd12j().s[33]++;obj[key]=value;}cov_2jz9nwd12j().s[34]++;return obj;}function _extends(){cov_2jz9nwd12j().f[7]++;cov_2jz9nwd12j().s[35]++;_extends=(cov_2jz9nwd12j().b[8][0]++,Object.assign)||(cov_2jz9nwd12j().b[8][1]++,function(target){cov_2jz9nwd12j().f[8]++;cov_2jz9nwd12j().s[36]++;for(var i=(cov_2jz9nwd12j().s[37]++,1);i<arguments.length;i++){var source=(cov_2jz9nwd12j().s[38]++,arguments[i]);cov_2jz9nwd12j().s[39]++;for(var key in source){cov_2jz9nwd12j().s[40]++;if(Object.prototype.hasOwnProperty.call(source,key)){cov_2jz9nwd12j().b[9][0]++;cov_2jz9nwd12j().s[41]++;target[key]=source[key];}else{cov_2jz9nwd12j().b[9][1]++;}}}cov_2jz9nwd12j().s[42]++;return target;});cov_2jz9nwd12j().s[43]++;return _extends.apply(this,arguments);}// This class handles schema validation, persistence, and modification.
//
// Each individual Schema object should be immutable. The helpers to
// do things with the Schema just return a new schema when the schema
// is changed.
//
// The canonical place to store this Schema is in the database itself,
// in a _SCHEMA collection. This is not the right way to do it for an
// open source framework, but it's backward compatible, so we're
// keeping it this way for now.
//
// In API-handling code, you should only use the Schema class via the
// DatabaseController. This will let us replace the schema logic for
// different databases.
// TODO: hide all schema logic inside the database adapter.
// -disable-next
const Parse=(cov_2jz9nwd12j().s[44]++,require('parse/node').Parse);const defaultColumns=(cov_2jz9nwd12j().s[45]++,Object.freeze({// Contain the default columns for every parse object type (except _Join collection)
_Default:{objectId:{type:'String'},createdAt:{type:'Date'},updatedAt:{type:'Date'},ACL:{type:'ACL'}},// The additional default columns for the _User collection (in addition to DefaultCols)
_User:{username:{type:'String'},password:{type:'String'},email:{type:'String'},emailVerified:{type:'Boolean'},authData:{type:'Object'}},// The additional default columns for the _Installation collection (in addition to DefaultCols)
_Installation:{installationId:{type:'String'},deviceToken:{type:'String'},channels:{type:'Array'},deviceType:{type:'String'},pushType:{type:'String'},GCMSenderId:{type:'String'},timeZone:{type:'String'},localeIdentifier:{type:'String'},badge:{type:'Number'},appVersion:{type:'String'},appName:{type:'String'},appIdentifier:{type:'String'},parseVersion:{type:'String'}},// The additional default columns for the _Role collection (in addition to DefaultCols)
_Role:{name:{type:'String'},users:{type:'Relation',targetClass:'_User'},roles:{type:'Relation',targetClass:'_Role'}},// The additional default columns for the _Session collection (in addition to DefaultCols)
_Session:{user:{type:'Pointer',targetClass:'_User'},installationId:{type:'String'},sessionToken:{type:'String'},expiresAt:{type:'Date'},createdWith:{type:'Object'}},_Product:{productIdentifier:{type:'String'},download:{type:'File'},downloadName:{type:'String'},icon:{type:'File'},order:{type:'Number'},title:{type:'String'},subtitle:{type:'String'}},_PushStatus:{pushTime:{type:'String'},source:{type:'String'},// rest or webui
query:{type:'String'},// the stringified JSON query
payload:{type:'String'},// the stringified JSON payload,
title:{type:'String'},expiry:{type:'Number'},expiration_interval:{type:'Number'},status:{type:'String'},numSent:{type:'Number'},numFailed:{type:'Number'},pushHash:{type:'String'},errorMessage:{type:'Object'},sentPerType:{type:'Object'},failedPerType:{type:'Object'},sentPerUTCOffset:{type:'Object'},failedPerUTCOffset:{type:'Object'},count:{type:'Number'}// tracks # of batches queued and pending
},_JobStatus:{jobName:{type:'String'},source:{type:'String'},status:{type:'String'},message:{type:'String'},params:{type:'Object'},// params received when calling the job
finishedAt:{type:'Date'}},_JobSchedule:{jobName:{type:'String'},description:{type:'String'},params:{type:'String'},startAfter:{type:'String'},daysOfWeek:{type:'Array'},timeOfDay:{type:'String'},lastRun:{type:'Number'},repeatMinutes:{type:'Number'}},_Hooks:{functionName:{type:'String'},className:{type:'String'},triggerName:{type:'String'},url:{type:'String'}},_GlobalConfig:{objectId:{type:'String'},params:{type:'Object'},masterKeyOnly:{type:'Object'}},_GraphQLConfig:{objectId:{type:'String'},config:{type:'Object'}},_Audience:{objectId:{type:'String'},name:{type:'String'},query:{type:'String'},//storing query as JSON string to prevent "Nested keys should not contain the '$' or '.' characters" error
lastUsed:{type:'Date'},timesUsed:{type:'Number'}},_Idempotency:{reqId:{type:'String'},expire:{type:'Date'}}}));cov_2jz9nwd12j().s[46]++;exports.defaultColumns=defaultColumns;const requiredColumns=(cov_2jz9nwd12j().s[47]++,Object.freeze({_Product:['productIdentifier','icon','order','title','subtitle'],_Role:['name','ACL']}));const invalidColumns=(cov_2jz9nwd12j().s[48]++,['length']);const systemClasses=(cov_2jz9nwd12j().s[49]++,Object.freeze(['_User','_Installation','_Role','_Session','_Product','_PushStatus','_JobStatus','_JobSchedule','_Audience','_Idempotency']));cov_2jz9nwd12j().s[50]++;exports.systemClasses=systemClasses;const volatileClasses=(cov_2jz9nwd12j().s[51]++,Object.freeze(['_JobStatus','_PushStatus','_Hooks','_GlobalConfig','_GraphQLConfig','_JobSchedule','_Audience','_Idempotency']));// Anything that start with role
const roleRegex=(cov_2jz9nwd12j().s[52]++,/^role:.*/);// Anything that starts with userField (allowed for protected fields only)
const protectedFieldsPointerRegex=(cov_2jz9nwd12j().s[53]++,/^userField:.*/);// * permission
const publicRegex=(cov_2jz9nwd12j().s[54]++,/^\*$/);const authenticatedRegex=(cov_2jz9nwd12j().s[55]++,/^authenticated$/);const requiresAuthenticationRegex=(cov_2jz9nwd12j().s[56]++,/^requiresAuthentication$/);const clpPointerRegex=(cov_2jz9nwd12j().s[57]++,/^pointerFields$/);// regex for validating entities in protectedFields object
const protectedFieldsRegex=(cov_2jz9nwd12j().s[58]++,Object.freeze([protectedFieldsPointerRegex,publicRegex,authenticatedRegex,roleRegex]));// clp regex
const clpFieldsRegex=(cov_2jz9nwd12j().s[59]++,Object.freeze([clpPointerRegex,publicRegex,requiresAuthenticationRegex,roleRegex]));function validatePermissionKey(key,userIdRegExp){cov_2jz9nwd12j().f[9]++;let matchesSome=(cov_2jz9nwd12j().s[60]++,false);cov_2jz9nwd12j().s[61]++;for(const regEx of clpFieldsRegex){cov_2jz9nwd12j().s[62]++;if(key.match(regEx)!==null){cov_2jz9nwd12j().b[10][0]++;cov_2jz9nwd12j().s[63]++;matchesSome=true;cov_2jz9nwd12j().s[64]++;break;}else{cov_2jz9nwd12j().b[10][1]++;}}// userId depends on startup options so it's dynamic
const valid=(cov_2jz9nwd12j().s[65]++,(cov_2jz9nwd12j().b[11][0]++,matchesSome)||(cov_2jz9nwd12j().b[11][1]++,key.match(userIdRegExp)!==null));cov_2jz9nwd12j().s[66]++;if(!valid){cov_2jz9nwd12j().b[12][0]++;cov_2jz9nwd12j().s[67]++;throw new Parse.Error(Parse.Error.INVALID_JSON,`'${key}' is not a valid key for class level permissions`);}else{cov_2jz9nwd12j().b[12][1]++;}}function validateProtectedFieldsKey(key,userIdRegExp){cov_2jz9nwd12j().f[10]++;let matchesSome=(cov_2jz9nwd12j().s[68]++,false);cov_2jz9nwd12j().s[69]++;for(const regEx of protectedFieldsRegex){cov_2jz9nwd12j().s[70]++;if(key.match(regEx)!==null){cov_2jz9nwd12j().b[13][0]++;cov_2jz9nwd12j().s[71]++;matchesSome=true;cov_2jz9nwd12j().s[72]++;break;}else{cov_2jz9nwd12j().b[13][1]++;}}// userId regex depends on launch options so it's dynamic
const valid=(cov_2jz9nwd12j().s[73]++,(cov_2jz9nwd12j().b[14][0]++,matchesSome)||(cov_2jz9nwd12j().b[14][1]++,key.match(userIdRegExp)!==null));cov_2jz9nwd12j().s[74]++;if(!valid){cov_2jz9nwd12j().b[15][0]++;cov_2jz9nwd12j().s[75]++;throw new Parse.Error(Parse.Error.INVALID_JSON,`'${key}' is not a valid key for class level permissions`);}else{cov_2jz9nwd12j().b[15][1]++;}}const CLPValidKeys=(cov_2jz9nwd12j().s[76]++,Object.freeze(['find','count','get','create','update','delete','addField','readUserFields','writeUserFields','protectedFields']));// validation before setting class-level permissions on collection
function validateCLP(perms,fields,userIdRegExp){cov_2jz9nwd12j().f[11]++;cov_2jz9nwd12j().s[77]++;if(!perms){cov_2jz9nwd12j().b[16][0]++;cov_2jz9nwd12j().s[78]++;return;}else{cov_2jz9nwd12j().b[16][1]++;}cov_2jz9nwd12j().s[79]++;for(const operationKey in perms){cov_2jz9nwd12j().s[80]++;if(CLPValidKeys.indexOf(operationKey)==-1){cov_2jz9nwd12j().b[17][0]++;cov_2jz9nwd12j().s[81]++;throw new Parse.Error(Parse.Error.INVALID_JSON,`${operationKey} is not a valid operation for class level permissions`);}else{cov_2jz9nwd12j().b[17][1]++;}const operation=(cov_2jz9nwd12j().s[82]++,perms[operationKey]);// proceed with next operationKey
// throws when root fields are of wrong type
cov_2jz9nwd12j().s[83]++;validateCLPjson(operation,operationKey);cov_2jz9nwd12j().s[84]++;if((cov_2jz9nwd12j().b[19][0]++,operationKey==='readUserFields')||(cov_2jz9nwd12j().b[19][1]++,operationKey==='writeUserFields')){cov_2jz9nwd12j().b[18][0]++;cov_2jz9nwd12j().s[85]++;// validate grouped pointer permissions
// must be an array with field names
for(const fieldName of operation){cov_2jz9nwd12j().s[86]++;validatePointerPermission(fieldName,fields,operationKey);}// readUserFields and writerUserFields do not have nesdted fields
// proceed with next operationKey
cov_2jz9nwd12j().s[87]++;continue;}else{cov_2jz9nwd12j().b[18][1]++;}// validate protected fields
cov_2jz9nwd12j().s[88]++;if(operationKey==='protectedFields'){cov_2jz9nwd12j().b[20][0]++;cov_2jz9nwd12j().s[89]++;for(const entity in operation){cov_2jz9nwd12j().s[90]++;// throws on unexpected key
validateProtectedFieldsKey(entity,userIdRegExp);const protectedFields=(cov_2jz9nwd12j().s[91]++,operation[entity]);cov_2jz9nwd12j().s[92]++;if(!Array.isArray(protectedFields)){cov_2jz9nwd12j().b[21][0]++;cov_2jz9nwd12j().s[93]++;throw new Parse.Error(Parse.Error.INVALID_JSON,`'${protectedFields}' is not a valid value for protectedFields[${entity}] - expected an array.`);}else{cov_2jz9nwd12j().b[21][1]++;}// if the field is in form of array
cov_2jz9nwd12j().s[94]++;for(const field of protectedFields){cov_2jz9nwd12j().s[95]++;// do not alloow to protect default fields
if(defaultColumns._Default[field]){cov_2jz9nwd12j().b[22][0]++;cov_2jz9nwd12j().s[96]++;throw new Parse.Error(Parse.Error.INVALID_JSON,`Default field '${field}' can not be protected`);}else{cov_2jz9nwd12j().b[22][1]++;}// field should exist on collection
cov_2jz9nwd12j().s[97]++;if(!Object.prototype.hasOwnProperty.call(fields,field)){cov_2jz9nwd12j().b[23][0]++;cov_2jz9nwd12j().s[98]++;throw new Parse.Error(Parse.Error.INVALID_JSON,`Field '${field}' in protectedFields:${entity} does not exist`);}else{cov_2jz9nwd12j().b[23][1]++;}}}// proceed with next operationKey
cov_2jz9nwd12j().s[99]++;continue;}else{cov_2jz9nwd12j().b[20][1]++;}// validate other fields
// Entity can be:
// "*" - Public,
// "requiresAuthentication" - authenticated users,
// "objectId" - _User id,
// "role:rolename",
// "pointerFields" - array of field names containing pointers to users
cov_2jz9nwd12j().s[100]++;for(const entity in operation){cov_2jz9nwd12j().s[101]++;// throws on unexpected key
validatePermissionKey(entity,userIdRegExp);// entity can be either:
// "pointerFields": string[]
cov_2jz9nwd12j().s[102]++;if(entity==='pointerFields'){cov_2jz9nwd12j().b[24][0]++;const pointerFields=(cov_2jz9nwd12j().s[103]++,operation[entity]);cov_2jz9nwd12j().s[104]++;if(Array.isArray(pointerFields)){cov_2jz9nwd12j().b[25][0]++;cov_2jz9nwd12j().s[105]++;for(const pointerField of pointerFields){cov_2jz9nwd12j().s[106]++;validatePointerPermission(pointerField,fields,operation);}}else{cov_2jz9nwd12j().b[25][1]++;cov_2jz9nwd12j().s[107]++;throw new Parse.Error(Parse.Error.INVALID_JSON,`'${pointerFields}' is not a valid value for ${operationKey}[${entity}] - expected an array.`);}// proceed with next entity key
cov_2jz9nwd12j().s[108]++;continue;}else{cov_2jz9nwd12j().b[24][1]++;}// or [entity]: boolean
const permit=(cov_2jz9nwd12j().s[109]++,operation[entity]);cov_2jz9nwd12j().s[110]++;if(permit!==true){cov_2jz9nwd12j().b[26][0]++;cov_2jz9nwd12j().s[111]++;throw new Parse.Error(Parse.Error.INVALID_JSON,`'${permit}' is not a valid value for class level permissions ${operationKey}:${entity}:${permit}`);}else{cov_2jz9nwd12j().b[26][1]++;}}}}function validateCLPjson(operation,operationKey){cov_2jz9nwd12j().f[12]++;cov_2jz9nwd12j().s[112]++;if((cov_2jz9nwd12j().b[28][0]++,operationKey==='readUserFields')||(cov_2jz9nwd12j().b[28][1]++,operationKey==='writeUserFields')){cov_2jz9nwd12j().b[27][0]++;cov_2jz9nwd12j().s[113]++;if(!Array.isArray(operation)){cov_2jz9nwd12j().b[29][0]++;cov_2jz9nwd12j().s[114]++;throw new Parse.Error(Parse.Error.INVALID_JSON,`'${operation}' is not a valid value for class level permissions ${operationKey} - must be an array`);}else{cov_2jz9nwd12j().b[29][1]++;}}else{cov_2jz9nwd12j().b[27][1]++;cov_2jz9nwd12j().s[115]++;if((cov_2jz9nwd12j().b[31][0]++,typeof operation==='object')&&(cov_2jz9nwd12j().b[31][1]++,operation!==null)){cov_2jz9nwd12j().b[30][0]++;cov_2jz9nwd12j().s[116]++;// ok to proceed
return;}else{cov_2jz9nwd12j().b[30][1]++;cov_2jz9nwd12j().s[117]++;throw new Parse.Error(Parse.Error.INVALID_JSON,`'${operation}' is not a valid value for class level permissions ${operationKey} - must be an object`);}}}function validatePointerPermission(fieldName,fields,operation){cov_2jz9nwd12j().f[13]++;cov_2jz9nwd12j().s[118]++;// Uses collection schema to ensure the field is of type:
// - Pointer<_User> (pointers)
// - Array
//
//    It's not possible to enforce type on Array's items in schema
//  so we accept any Array field, and later when applying permissions
//  only items that are pointers to _User are considered.
if(!((cov_2jz9nwd12j().b[33][0]++,fields[fieldName])&&((cov_2jz9nwd12j().b[33][1]++,fields[fieldName].type=='Pointer')&&(cov_2jz9nwd12j().b[33][2]++,fields[fieldName].targetClass=='_User')||(cov_2jz9nwd12j().b[33][3]++,fields[fieldName].type=='Array')))){cov_2jz9nwd12j().b[32][0]++;cov_2jz9nwd12j().s[119]++;throw new Parse.Error(Parse.Error.INVALID_JSON,`'${fieldName}' is not a valid column for class level pointer permissions ${operation}`);}else{cov_2jz9nwd12j().b[32][1]++;}}const joinClassRegex=(cov_2jz9nwd12j().s[120]++,/^_Join:[A-Za-z0-9_]+:[A-Za-z0-9_]+/);const classAndFieldRegex=(cov_2jz9nwd12j().s[121]++,/^[A-Za-z][A-Za-z0-9_]*$/);function classNameIsValid(className){cov_2jz9nwd12j().f[14]++;cov_2jz9nwd12j().s[122]++;// Valid classes must:
return(// Be one of _User, _Installation, _Role, _Session OR
(cov_2jz9nwd12j().b[34][0]++,systemClasses.indexOf(className)>-1)||(cov_2jz9nwd12j().b[34][1]++,// Be a join table OR
joinClassRegex.test(className))||(cov_2jz9nwd12j().b[34][2]++,// Include only alpha-numeric and underscores, and not start with an underscore or number
fieldNameIsValid(className,className)));}// Valid fields must be alpha-numeric, and not start with an underscore or number
// must not be a reserved key
function fieldNameIsValid(fieldName,className){cov_2jz9nwd12j().f[15]++;cov_2jz9nwd12j().s[123]++;if((cov_2jz9nwd12j().b[36][0]++,className)&&(cov_2jz9nwd12j().b[36][1]++,className!=='_Hooks')){cov_2jz9nwd12j().b[35][0]++;cov_2jz9nwd12j().s[124]++;if(fieldName==='className'){cov_2jz9nwd12j().b[37][0]++;cov_2jz9nwd12j().s[125]++;return false;}else{cov_2jz9nwd12j().b[37][1]++;}}else{cov_2jz9nwd12j().b[35][1]++;}cov_2jz9nwd12j().s[126]++;return(cov_2jz9nwd12j().b[38][0]++,classAndFieldRegex.test(fieldName))&&(cov_2jz9nwd12j().b[38][1]++,!invalidColumns.includes(fieldName));}// Checks that it's not trying to clobber one of the default fields of the class.
function fieldNameIsValidForClass(fieldName,className){cov_2jz9nwd12j().f[16]++;cov_2jz9nwd12j().s[127]++;if(!fieldNameIsValid(fieldName,className)){cov_2jz9nwd12j().b[39][0]++;cov_2jz9nwd12j().s[128]++;return false;}else{cov_2jz9nwd12j().b[39][1]++;}cov_2jz9nwd12j().s[129]++;if(defaultColumns._Default[fieldName]){cov_2jz9nwd12j().b[40][0]++;cov_2jz9nwd12j().s[130]++;return false;}else{cov_2jz9nwd12j().b[40][1]++;}cov_2jz9nwd12j().s[131]++;if((cov_2jz9nwd12j().b[42][0]++,defaultColumns[className])&&(cov_2jz9nwd12j().b[42][1]++,defaultColumns[className][fieldName])){cov_2jz9nwd12j().b[41][0]++;cov_2jz9nwd12j().s[132]++;return false;}else{cov_2jz9nwd12j().b[41][1]++;}cov_2jz9nwd12j().s[133]++;return true;}function invalidClassNameMessage(className){cov_2jz9nwd12j().f[17]++;cov_2jz9nwd12j().s[134]++;return'Invalid classname: '+className+', classnames can only have alphanumeric characters and _, and must start with an alpha character ';}const invalidJsonError=(cov_2jz9nwd12j().s[135]++,new Parse.Error(Parse.Error.INVALID_JSON,'invalid JSON'));const validNonRelationOrPointerTypes=(cov_2jz9nwd12j().s[136]++,['Number','String','Boolean','Date','Object','Array','GeoPoint','File','Bytes','Polygon']);// Returns an error suitable for throwing if the type is invalid
cov_2jz9nwd12j().s[137]++;const fieldTypeIsInvalid=({type,targetClass})=>{cov_2jz9nwd12j().f[18]++;cov_2jz9nwd12j().s[138]++;if(['Pointer','Relation'].indexOf(type)>=0){cov_2jz9nwd12j().b[43][0]++;cov_2jz9nwd12j().s[139]++;if(!targetClass){cov_2jz9nwd12j().b[44][0]++;cov_2jz9nwd12j().s[140]++;return new Parse.Error(135,`type ${type} needs a class name`);}else{cov_2jz9nwd12j().b[44][1]++;cov_2jz9nwd12j().s[141]++;if(typeof targetClass!=='string'){cov_2jz9nwd12j().b[45][0]++;cov_2jz9nwd12j().s[142]++;return invalidJsonError;}else{cov_2jz9nwd12j().b[45][1]++;cov_2jz9nwd12j().s[143]++;if(!classNameIsValid(targetClass)){cov_2jz9nwd12j().b[46][0]++;cov_2jz9nwd12j().s[144]++;return new Parse.Error(Parse.Error.INVALID_CLASS_NAME,invalidClassNameMessage(targetClass));}else{cov_2jz9nwd12j().b[46][1]++;cov_2jz9nwd12j().s[145]++;return undefined;}}}}else{cov_2jz9nwd12j().b[43][1]++;}cov_2jz9nwd12j().s[146]++;if(typeof type!=='string'){cov_2jz9nwd12j().b[47][0]++;cov_2jz9nwd12j().s[147]++;return invalidJsonError;}else{cov_2jz9nwd12j().b[47][1]++;}cov_2jz9nwd12j().s[148]++;if(validNonRelationOrPointerTypes.indexOf(type)<0){cov_2jz9nwd12j().b[48][0]++;cov_2jz9nwd12j().s[149]++;return new Parse.Error(Parse.Error.INCORRECT_TYPE,`invalid field type: ${type}`);}else{cov_2jz9nwd12j().b[48][1]++;}cov_2jz9nwd12j().s[150]++;return undefined;};cov_2jz9nwd12j().s[151]++;const convertSchemaToAdapterSchema=schema=>{cov_2jz9nwd12j().f[19]++;cov_2jz9nwd12j().s[152]++;schema=injectDefaultSchema(schema);cov_2jz9nwd12j().s[153]++;delete schema.fields.ACL;cov_2jz9nwd12j().s[154]++;schema.fields._rperm={type:'Array'};cov_2jz9nwd12j().s[155]++;schema.fields._wperm={type:'Array'};cov_2jz9nwd12j().s[156]++;if(schema.className==='_User'){cov_2jz9nwd12j().b[49][0]++;cov_2jz9nwd12j().s[157]++;delete schema.fields.password;cov_2jz9nwd12j().s[158]++;schema.fields._hashed_password={type:'String'};}else{cov_2jz9nwd12j().b[49][1]++;}cov_2jz9nwd12j().s[159]++;return schema;};cov_2jz9nwd12j().s[160]++;exports.convertSchemaToAdapterSchema=convertSchemaToAdapterSchema;cov_2jz9nwd12j().s[161]++;const convertAdapterSchemaToParseSchema=_ref=>{cov_2jz9nwd12j().f[20]++;let schema=(cov_2jz9nwd12j().s[162]++,_extends({},_ref));cov_2jz9nwd12j().s[163]++;delete schema.fields._rperm;cov_2jz9nwd12j().s[164]++;delete schema.fields._wperm;cov_2jz9nwd12j().s[165]++;schema.fields.ACL={type:'ACL'};cov_2jz9nwd12j().s[166]++;if(schema.className==='_User'){cov_2jz9nwd12j().b[50][0]++;cov_2jz9nwd12j().s[167]++;delete schema.fields.authData;//Auth data is implicit
cov_2jz9nwd12j().s[168]++;delete schema.fields._hashed_password;cov_2jz9nwd12j().s[169]++;schema.fields.password={type:'String'};}else{cov_2jz9nwd12j().b[50][1]++;}cov_2jz9nwd12j().s[170]++;if((cov_2jz9nwd12j().b[52][0]++,schema.indexes)&&(cov_2jz9nwd12j().b[52][1]++,Object.keys(schema.indexes).length===0)){cov_2jz9nwd12j().b[51][0]++;cov_2jz9nwd12j().s[171]++;delete schema.indexes;}else{cov_2jz9nwd12j().b[51][1]++;}cov_2jz9nwd12j().s[172]++;return schema;};class SchemaData{constructor(allSchemas=(cov_2jz9nwd12j().b[53][0]++,[]),protectedFields=(cov_2jz9nwd12j().b[54][0]++,{})){cov_2jz9nwd12j().f[21]++;cov_2jz9nwd12j().s[173]++;this.__data={};cov_2jz9nwd12j().s[174]++;this.__protectedFields=protectedFields;cov_2jz9nwd12j().s[175]++;allSchemas.forEach(schema=>{cov_2jz9nwd12j().f[22]++;cov_2jz9nwd12j().s[176]++;if(volatileClasses.includes(schema.className)){cov_2jz9nwd12j().b[55][0]++;cov_2jz9nwd12j().s[177]++;return;}else{cov_2jz9nwd12j().b[55][1]++;}cov_2jz9nwd12j().s[178]++;Object.defineProperty(this,schema.className,{get:()=>{cov_2jz9nwd12j().f[23]++;cov_2jz9nwd12j().s[179]++;if(!this.__data[schema.className]){cov_2jz9nwd12j().b[56][0]++;const data=(cov_2jz9nwd12j().s[180]++,{});cov_2jz9nwd12j().s[181]++;data.fields=injectDefaultSchema(schema).fields;cov_2jz9nwd12j().s[182]++;data.classLevelPermissions=(0,_deepcopy.default)(schema.classLevelPermissions);cov_2jz9nwd12j().s[183]++;data.indexes=schema.indexes;const classProtectedFields=(cov_2jz9nwd12j().s[184]++,this.__protectedFields[schema.className]);cov_2jz9nwd12j().s[185]++;if(classProtectedFields){cov_2jz9nwd12j().b[57][0]++;cov_2jz9nwd12j().s[186]++;for(const key in classProtectedFields){const unq=(cov_2jz9nwd12j().s[187]++,new Set([...((cov_2jz9nwd12j().b[58][0]++,data.classLevelPermissions.protectedFields[key])||(cov_2jz9nwd12j().b[58][1]++,[])),...classProtectedFields[key]]));cov_2jz9nwd12j().s[188]++;data.classLevelPermissions.protectedFields[key]=Array.from(unq);}}else{cov_2jz9nwd12j().b[57][1]++;}cov_2jz9nwd12j().s[189]++;this.__data[schema.className]=data;}else{cov_2jz9nwd12j().b[56][1]++;}cov_2jz9nwd12j().s[190]++;return this.__data[schema.className];}});});// Inject the in-memory classes
cov_2jz9nwd12j().s[191]++;volatileClasses.forEach(className=>{cov_2jz9nwd12j().f[24]++;cov_2jz9nwd12j().s[192]++;Object.defineProperty(this,className,{get:()=>{cov_2jz9nwd12j().f[25]++;cov_2jz9nwd12j().s[193]++;if(!this.__data[className]){cov_2jz9nwd12j().b[59][0]++;const schema=(cov_2jz9nwd12j().s[194]++,injectDefaultSchema({className,fields:{},classLevelPermissions:{}}));const data=(cov_2jz9nwd12j().s[195]++,{});cov_2jz9nwd12j().s[196]++;data.fields=schema.fields;cov_2jz9nwd12j().s[197]++;data.classLevelPermissions=schema.classLevelPermissions;cov_2jz9nwd12j().s[198]++;data.indexes=schema.indexes;cov_2jz9nwd12j().s[199]++;this.__data[className]=data;}else{cov_2jz9nwd12j().b[59][1]++;}cov_2jz9nwd12j().s[200]++;return this.__data[className];}});});}}cov_2jz9nwd12j().s[201]++;const injectDefaultSchema=({className,fields,classLevelPermissions,indexes})=>{cov_2jz9nwd12j().f[26]++;const defaultSchema=(cov_2jz9nwd12j().s[202]++,{className,fields:_objectSpread(_objectSpread(_objectSpread({},defaultColumns._Default),(cov_2jz9nwd12j().b[60][0]++,defaultColumns[className])||(cov_2jz9nwd12j().b[60][1]++,{})),fields),classLevelPermissions});cov_2jz9nwd12j().s[203]++;if((cov_2jz9nwd12j().b[62][0]++,indexes)&&(cov_2jz9nwd12j().b[62][1]++,Object.keys(indexes).length!==0)){cov_2jz9nwd12j().b[61][0]++;cov_2jz9nwd12j().s[204]++;defaultSchema.indexes=indexes;}else{cov_2jz9nwd12j().b[61][1]++;}cov_2jz9nwd12j().s[205]++;return defaultSchema;};const _HooksSchema=(cov_2jz9nwd12j().s[206]++,{className:'_Hooks',fields:defaultColumns._Hooks});const _GlobalConfigSchema=(cov_2jz9nwd12j().s[207]++,{className:'_GlobalConfig',fields:defaultColumns._GlobalConfig});const _GraphQLConfigSchema=(cov_2jz9nwd12j().s[208]++,{className:'_GraphQLConfig',fields:defaultColumns._GraphQLConfig});const _PushStatusSchema=(cov_2jz9nwd12j().s[209]++,convertSchemaToAdapterSchema(injectDefaultSchema({className:'_PushStatus',fields:{},classLevelPermissions:{}})));const _JobStatusSchema=(cov_2jz9nwd12j().s[210]++,convertSchemaToAdapterSchema(injectDefaultSchema({className:'_JobStatus',fields:{},classLevelPermissions:{}})));const _JobScheduleSchema=(cov_2jz9nwd12j().s[211]++,convertSchemaToAdapterSchema(injectDefaultSchema({className:'_JobSchedule',fields:{},classLevelPermissions:{}})));const _AudienceSchema=(cov_2jz9nwd12j().s[212]++,convertSchemaToAdapterSchema(injectDefaultSchema({className:'_Audience',fields:defaultColumns._Audience,classLevelPermissions:{}})));const _IdempotencySchema=(cov_2jz9nwd12j().s[213]++,convertSchemaToAdapterSchema(injectDefaultSchema({className:'_Idempotency',fields:defaultColumns._Idempotency,classLevelPermissions:{}})));const VolatileClassesSchemas=(cov_2jz9nwd12j().s[214]++,[_HooksSchema,_JobStatusSchema,_JobScheduleSchema,_PushStatusSchema,_GlobalConfigSchema,_GraphQLConfigSchema,_AudienceSchema,_IdempotencySchema]);cov_2jz9nwd12j().s[215]++;exports.VolatileClassesSchemas=VolatileClassesSchemas;cov_2jz9nwd12j().s[216]++;const dbTypeMatchesObjectType=(dbType,objectType)=>{cov_2jz9nwd12j().f[27]++;cov_2jz9nwd12j().s[217]++;if(dbType.type!==objectType.type){cov_2jz9nwd12j().b[63][0]++;cov_2jz9nwd12j().s[218]++;return false;}else{cov_2jz9nwd12j().b[63][1]++;}cov_2jz9nwd12j().s[219]++;if(dbType.targetClass!==objectType.targetClass){cov_2jz9nwd12j().b[64][0]++;cov_2jz9nwd12j().s[220]++;return false;}else{cov_2jz9nwd12j().b[64][1]++;}cov_2jz9nwd12j().s[221]++;if(dbType===objectType.type){cov_2jz9nwd12j().b[65][0]++;cov_2jz9nwd12j().s[222]++;return true;}else{cov_2jz9nwd12j().b[65][1]++;}cov_2jz9nwd12j().s[223]++;if(dbType.type===objectType.type){cov_2jz9nwd12j().b[66][0]++;cov_2jz9nwd12j().s[224]++;return true;}else{cov_2jz9nwd12j().b[66][1]++;}cov_2jz9nwd12j().s[225]++;return false;};cov_2jz9nwd12j().s[226]++;const typeToString=type=>{cov_2jz9nwd12j().f[28]++;cov_2jz9nwd12j().s[227]++;if(typeof type==='string'){cov_2jz9nwd12j().b[67][0]++;cov_2jz9nwd12j().s[228]++;return type;}else{cov_2jz9nwd12j().b[67][1]++;}cov_2jz9nwd12j().s[229]++;if(type.targetClass){cov_2jz9nwd12j().b[68][0]++;cov_2jz9nwd12j().s[230]++;return`${type.type}<${type.targetClass}>`;}else{cov_2jz9nwd12j().b[68][1]++;}cov_2jz9nwd12j().s[231]++;return`${type.type}`;};// Stores the entire schema of the app in a weird hybrid format somewhere between
// the mongo format and the Parse format. Soon, this will all be Parse format.
class SchemaController{constructor(databaseAdapter){cov_2jz9nwd12j().f[29]++;cov_2jz9nwd12j().s[232]++;this._dbAdapter=databaseAdapter;cov_2jz9nwd12j().s[233]++;this.schemaData=new SchemaData(_SchemaCache.default.all(),this.protectedFields);cov_2jz9nwd12j().s[234]++;this.protectedFields=_Config.default.get(Parse.applicationId).protectedFields;const customIds=(cov_2jz9nwd12j().s[235]++,_Config.default.get(Parse.applicationId).allowCustomObjectId);const customIdRegEx=(cov_2jz9nwd12j().s[236]++,/^.{1,}$/u);// 1+ chars
const autoIdRegEx=(cov_2jz9nwd12j().s[237]++,/^[a-zA-Z0-9]{1,}$/);cov_2jz9nwd12j().s[238]++;this.userIdRegEx=customIds?(cov_2jz9nwd12j().b[69][0]++,customIdRegEx):(cov_2jz9nwd12j().b[69][1]++,autoIdRegEx);cov_2jz9nwd12j().s[239]++;this._dbAdapter.watch(()=>{cov_2jz9nwd12j().f[30]++;cov_2jz9nwd12j().s[240]++;this.reloadData({clearCache:true});});}reloadData(options=(cov_2jz9nwd12j().b[70][0]++,{clearCache:false})){cov_2jz9nwd12j().f[31]++;cov_2jz9nwd12j().s[241]++;if((cov_2jz9nwd12j().b[72][0]++,this.reloadDataPromise)&&(cov_2jz9nwd12j().b[72][1]++,!options.clearCache)){cov_2jz9nwd12j().b[71][0]++;cov_2jz9nwd12j().s[242]++;return this.reloadDataPromise;}else{cov_2jz9nwd12j().b[71][1]++;}cov_2jz9nwd12j().s[243]++;this.reloadDataPromise=this.getAllClasses(options).then(allSchemas=>{cov_2jz9nwd12j().f[32]++;cov_2jz9nwd12j().s[244]++;this.schemaData=new SchemaData(allSchemas,this.protectedFields);cov_2jz9nwd12j().s[245]++;delete this.reloadDataPromise;},err=>{cov_2jz9nwd12j().f[33]++;cov_2jz9nwd12j().s[246]++;this.schemaData=new SchemaData();cov_2jz9nwd12j().s[247]++;delete this.reloadDataPromise;cov_2jz9nwd12j().s[248]++;throw err;}).then(()=>{cov_2jz9nwd12j().f[34]++;});cov_2jz9nwd12j().s[249]++;return this.reloadDataPromise;}getAllClasses(options=(cov_2jz9nwd12j().b[73][0]++,{clearCache:false})){cov_2jz9nwd12j().f[35]++;cov_2jz9nwd12j().s[250]++;if(options.clearCache){cov_2jz9nwd12j().b[74][0]++;cov_2jz9nwd12j().s[251]++;return this.setAllClasses();}else{cov_2jz9nwd12j().b[74][1]++;}const cached=(cov_2jz9nwd12j().s[252]++,_SchemaCache.default.all());cov_2jz9nwd12j().s[253]++;if((cov_2jz9nwd12j().b[76][0]++,cached)&&(cov_2jz9nwd12j().b[76][1]++,cached.length)){cov_2jz9nwd12j().b[75][0]++;cov_2jz9nwd12j().s[254]++;return Promise.resolve(cached);}else{cov_2jz9nwd12j().b[75][1]++;}cov_2jz9nwd12j().s[255]++;return this.setAllClasses();}setAllClasses(){cov_2jz9nwd12j().f[36]++;cov_2jz9nwd12j().s[256]++;return this._dbAdapter.getAllClasses().then(allSchemas=>{cov_2jz9nwd12j().f[37]++;cov_2jz9nwd12j().s[257]++;return allSchemas.map(injectDefaultSchema);}).then(allSchemas=>{cov_2jz9nwd12j().f[38]++;cov_2jz9nwd12j().s[258]++;_SchemaCache.default.put(allSchemas);cov_2jz9nwd12j().s[259]++;return allSchemas;});}getOneSchema(className,allowVolatileClasses=(cov_2jz9nwd12j().b[77][0]++,false),options=(cov_2jz9nwd12j().b[78][0]++,{clearCache:false})){cov_2jz9nwd12j().f[39]++;cov_2jz9nwd12j().s[260]++;if(options.clearCache){cov_2jz9nwd12j().b[79][0]++;cov_2jz9nwd12j().s[261]++;_SchemaCache.default.clear();}else{cov_2jz9nwd12j().b[79][1]++;}cov_2jz9nwd12j().s[262]++;if((cov_2jz9nwd12j().b[81][0]++,allowVolatileClasses)&&(cov_2jz9nwd12j().b[81][1]++,volatileClasses.indexOf(className)>-1)){cov_2jz9nwd12j().b[80][0]++;const data=(cov_2jz9nwd12j().s[263]++,this.schemaData[className]);cov_2jz9nwd12j().s[264]++;return Promise.resolve({className,fields:data.fields,classLevelPermissions:data.classLevelPermissions,indexes:data.indexes});}else{cov_2jz9nwd12j().b[80][1]++;}const cached=(cov_2jz9nwd12j().s[265]++,_SchemaCache.default.get(className));cov_2jz9nwd12j().s[266]++;if((cov_2jz9nwd12j().b[83][0]++,cached)&&(cov_2jz9nwd12j().b[83][1]++,!options.clearCache)){cov_2jz9nwd12j().b[82][0]++;cov_2jz9nwd12j().s[267]++;return Promise.resolve(cached);}else{cov_2jz9nwd12j().b[82][1]++;}cov_2jz9nwd12j().s[268]++;return this.setAllClasses().then(allSchemas=>{cov_2jz9nwd12j().f[40]++;const oneSchema=(cov_2jz9nwd12j().s[269]++,allSchemas.find(schema=>{cov_2jz9nwd12j().f[41]++;cov_2jz9nwd12j().s[270]++;return schema.className===className;}));cov_2jz9nwd12j().s[271]++;if(!oneSchema){cov_2jz9nwd12j().b[84][0]++;cov_2jz9nwd12j().s[272]++;return Promise.reject(undefined);}else{cov_2jz9nwd12j().b[84][1]++;}cov_2jz9nwd12j().s[273]++;return oneSchema;});}// Create a new class that includes the three default fields.
// ACL is an implicit column that does not get an entry in the
// _SCHEMAS database. Returns a promise that resolves with the
// created schema, in mongo format.
// on success, and rejects with an error on fail. Ensure you
// have authorization (master key, or client class creation
// enabled) before calling this function.
async addClassIfNotExists(className,fields=(cov_2jz9nwd12j().b[85][0]++,{}),classLevelPermissions,indexes=(cov_2jz9nwd12j().b[86][0]++,{})){cov_2jz9nwd12j().f[42]++;var validationError=(cov_2jz9nwd12j().s[274]++,this.validateNewClass(className,fields,classLevelPermissions));cov_2jz9nwd12j().s[275]++;if(validationError){cov_2jz9nwd12j().b[87][0]++;cov_2jz9nwd12j().s[276]++;if(validationError instanceof Parse.Error){cov_2jz9nwd12j().b[88][0]++;cov_2jz9nwd12j().s[277]++;return Promise.reject(validationError);}else{cov_2jz9nwd12j().b[88][1]++;cov_2jz9nwd12j().s[278]++;if((cov_2jz9nwd12j().b[90][0]++,validationError.code)&&(cov_2jz9nwd12j().b[90][1]++,validationError.error)){cov_2jz9nwd12j().b[89][0]++;cov_2jz9nwd12j().s[279]++;return Promise.reject(new Parse.Error(validationError.code,validationError.error));}else{cov_2jz9nwd12j().b[89][1]++;}}cov_2jz9nwd12j().s[280]++;return Promise.reject(validationError);}else{cov_2jz9nwd12j().b[87][1]++;}cov_2jz9nwd12j().s[281]++;try{const adapterSchema=(cov_2jz9nwd12j().s[282]++,await this._dbAdapter.createClass(className,convertSchemaToAdapterSchema({fields,classLevelPermissions,indexes,className})));// TODO: Remove by updating schema cache directly
cov_2jz9nwd12j().s[283]++;await this.reloadData({clearCache:true});const parseSchema=(cov_2jz9nwd12j().s[284]++,convertAdapterSchemaToParseSchema(adapterSchema));cov_2jz9nwd12j().s[285]++;return parseSchema;}catch(error){cov_2jz9nwd12j().s[286]++;if((cov_2jz9nwd12j().b[92][0]++,error)&&(cov_2jz9nwd12j().b[92][1]++,error.code===Parse.Error.DUPLICATE_VALUE)){cov_2jz9nwd12j().b[91][0]++;cov_2jz9nwd12j().s[287]++;throw new Parse.Error(Parse.Error.INVALID_CLASS_NAME,`Class ${className} already exists.`);}else{cov_2jz9nwd12j().b[91][1]++;cov_2jz9nwd12j().s[288]++;throw error;}}}updateClass(className,submittedFields,classLevelPermissions,indexes,database){cov_2jz9nwd12j().f[43]++;cov_2jz9nwd12j().s[289]++;return this.getOneSchema(className).then(schema=>{cov_2jz9nwd12j().f[44]++;const existingFields=(cov_2jz9nwd12j().s[290]++,schema.fields);cov_2jz9nwd12j().s[291]++;Object.keys(submittedFields).forEach(name=>{cov_2jz9nwd12j().f[45]++;const field=(cov_2jz9nwd12j().s[292]++,submittedFields[name]);cov_2jz9nwd12j().s[293]++;if((cov_2jz9nwd12j().b[94][0]++,existingFields[name])&&(cov_2jz9nwd12j().b[94][1]++,existingFields[name].type!==field.type)&&(cov_2jz9nwd12j().b[94][2]++,field.__op!=='Delete')){cov_2jz9nwd12j().b[93][0]++;cov_2jz9nwd12j().s[294]++;throw new Parse.Error(255,`Field ${name} exists, cannot update.`);}else{cov_2jz9nwd12j().b[93][1]++;}cov_2jz9nwd12j().s[295]++;if((cov_2jz9nwd12j().b[96][0]++,!existingFields[name])&&(cov_2jz9nwd12j().b[96][1]++,field.__op==='Delete')){cov_2jz9nwd12j().b[95][0]++;cov_2jz9nwd12j().s[296]++;throw new Parse.Error(255,`Field ${name} does not exist, cannot delete.`);}else{cov_2jz9nwd12j().b[95][1]++;}});cov_2jz9nwd12j().s[297]++;delete existingFields._rperm;cov_2jz9nwd12j().s[298]++;delete existingFields._wperm;const newSchema=(cov_2jz9nwd12j().s[299]++,buildMergedSchemaObject(existingFields,submittedFields));const defaultFields=(cov_2jz9nwd12j().s[300]++,(cov_2jz9nwd12j().b[97][0]++,defaultColumns[className])||(cov_2jz9nwd12j().b[97][1]++,defaultColumns._Default));const fullNewSchema=(cov_2jz9nwd12j().s[301]++,Object.assign({},newSchema,defaultFields));const validationError=(cov_2jz9nwd12j().s[302]++,this.validateSchemaData(className,newSchema,classLevelPermissions,Object.keys(existingFields)));cov_2jz9nwd12j().s[303]++;if(validationError){cov_2jz9nwd12j().b[98][0]++;cov_2jz9nwd12j().s[304]++;throw new Parse.Error(validationError.code,validationError.error);}else{cov_2jz9nwd12j().b[98][1]++;}// Finally we have checked to make sure the request is valid and we can start deleting fields.
// Do all deletions first, then a single save to _SCHEMA collection to handle all additions.
const deletedFields=(cov_2jz9nwd12j().s[305]++,[]);const insertedFields=(cov_2jz9nwd12j().s[306]++,[]);cov_2jz9nwd12j().s[307]++;Object.keys(submittedFields).forEach(fieldName=>{cov_2jz9nwd12j().f[46]++;cov_2jz9nwd12j().s[308]++;if(submittedFields[fieldName].__op==='Delete'){cov_2jz9nwd12j().b[99][0]++;cov_2jz9nwd12j().s[309]++;deletedFields.push(fieldName);}else{cov_2jz9nwd12j().b[99][1]++;cov_2jz9nwd12j().s[310]++;insertedFields.push(fieldName);}});let deletePromise=(cov_2jz9nwd12j().s[311]++,Promise.resolve());cov_2jz9nwd12j().s[312]++;if(deletedFields.length>0){cov_2jz9nwd12j().b[100][0]++;cov_2jz9nwd12j().s[313]++;deletePromise=this.deleteFields(deletedFields,className,database);}else{cov_2jz9nwd12j().b[100][1]++;}let enforceFields=(cov_2jz9nwd12j().s[314]++,[]);cov_2jz9nwd12j().s[315]++;return deletePromise// Delete Everything
.then(()=>{cov_2jz9nwd12j().f[47]++;cov_2jz9nwd12j().s[316]++;return this.reloadData({clearCache:true});})// Reload our Schema, so we have all the new values
.then(()=>{cov_2jz9nwd12j().f[48]++;const promises=(cov_2jz9nwd12j().s[317]++,insertedFields.map(fieldName=>{cov_2jz9nwd12j().f[49]++;const type=(cov_2jz9nwd12j().s[318]++,submittedFields[fieldName]);cov_2jz9nwd12j().s[319]++;return this.enforceFieldExists(className,fieldName,type);}));cov_2jz9nwd12j().s[320]++;return Promise.all(promises);}).then(results=>{cov_2jz9nwd12j().f[50]++;cov_2jz9nwd12j().s[321]++;enforceFields=results.filter(result=>{cov_2jz9nwd12j().f[51]++;cov_2jz9nwd12j().s[322]++;return!!result;});cov_2jz9nwd12j().s[323]++;return this.setPermissions(className,classLevelPermissions,newSchema);}).then(()=>{cov_2jz9nwd12j().f[52]++;cov_2jz9nwd12j().s[324]++;return this._dbAdapter.setIndexesWithSchemaFormat(className,indexes,schema.indexes,fullNewSchema);}).then(()=>{cov_2jz9nwd12j().f[53]++;cov_2jz9nwd12j().s[325]++;return this.reloadData({clearCache:true});})//TODO: Move this logic into the database adapter
.then(()=>{cov_2jz9nwd12j().f[54]++;cov_2jz9nwd12j().s[326]++;this.ensureFields(enforceFields);const schema=(cov_2jz9nwd12j().s[327]++,this.schemaData[className]);const reloadedSchema=(cov_2jz9nwd12j().s[328]++,{className:className,fields:schema.fields,classLevelPermissions:schema.classLevelPermissions});cov_2jz9nwd12j().s[329]++;if((cov_2jz9nwd12j().b[102][0]++,schema.indexes)&&(cov_2jz9nwd12j().b[102][1]++,Object.keys(schema.indexes).length!==0)){cov_2jz9nwd12j().b[101][0]++;cov_2jz9nwd12j().s[330]++;reloadedSchema.indexes=schema.indexes;}else{cov_2jz9nwd12j().b[101][1]++;}cov_2jz9nwd12j().s[331]++;return reloadedSchema;});}).catch(error=>{cov_2jz9nwd12j().f[55]++;cov_2jz9nwd12j().s[332]++;if(error===undefined){cov_2jz9nwd12j().b[103][0]++;cov_2jz9nwd12j().s[333]++;throw new Parse.Error(Parse.Error.INVALID_CLASS_NAME,`Class ${className} does not exist.`);}else{cov_2jz9nwd12j().b[103][1]++;cov_2jz9nwd12j().s[334]++;throw error;}});}// Returns a promise that resolves successfully to the new schema
// object or fails with a reason.
enforceClassExists(className){cov_2jz9nwd12j().f[56]++;cov_2jz9nwd12j().s[335]++;if(this.schemaData[className]){cov_2jz9nwd12j().b[104][0]++;cov_2jz9nwd12j().s[336]++;return Promise.resolve(this);}else{cov_2jz9nwd12j().b[104][1]++;}// We don't have this class. Update the schema
cov_2jz9nwd12j().s[337]++;return(// The schema update succeeded. Reload the schema
this.addClassIfNotExists(className).catch(()=>{cov_2jz9nwd12j().f[57]++;cov_2jz9nwd12j().s[338]++;// The schema update failed. This can be okay - it might
// have failed because there's a race condition and a different
// client is making the exact same schema update that we want.
// So just reload the schema.
return this.reloadData({clearCache:true});}).then(()=>{cov_2jz9nwd12j().f[58]++;cov_2jz9nwd12j().s[339]++;// Ensure that the schema now validates
if(this.schemaData[className]){cov_2jz9nwd12j().b[105][0]++;cov_2jz9nwd12j().s[340]++;return this;}else{cov_2jz9nwd12j().b[105][1]++;cov_2jz9nwd12j().s[341]++;throw new Parse.Error(Parse.Error.INVALID_JSON,`Failed to add ${className}`);}}).catch(()=>{cov_2jz9nwd12j().f[59]++;cov_2jz9nwd12j().s[342]++;// The schema still doesn't validate. Give up
throw new Parse.Error(Parse.Error.INVALID_JSON,'schema class name does not revalidate');}));}validateNewClass(className,fields=(cov_2jz9nwd12j().b[106][0]++,{}),classLevelPermissions){cov_2jz9nwd12j().f[60]++;cov_2jz9nwd12j().s[343]++;if(this.schemaData[className]){cov_2jz9nwd12j().b[107][0]++;cov_2jz9nwd12j().s[344]++;throw new Parse.Error(Parse.Error.INVALID_CLASS_NAME,`Class ${className} already exists.`);}else{cov_2jz9nwd12j().b[107][1]++;}cov_2jz9nwd12j().s[345]++;if(!classNameIsValid(className)){cov_2jz9nwd12j().b[108][0]++;cov_2jz9nwd12j().s[346]++;return{code:Parse.Error.INVALID_CLASS_NAME,error:invalidClassNameMessage(className)};}else{cov_2jz9nwd12j().b[108][1]++;}cov_2jz9nwd12j().s[347]++;return this.validateSchemaData(className,fields,classLevelPermissions,[]);}validateSchemaData(className,fields,classLevelPermissions,existingFieldNames){cov_2jz9nwd12j().f[61]++;cov_2jz9nwd12j().s[348]++;for(const fieldName in fields){cov_2jz9nwd12j().s[349]++;if(existingFieldNames.indexOf(fieldName)<0){cov_2jz9nwd12j().b[109][0]++;cov_2jz9nwd12j().s[350]++;if(!fieldNameIsValid(fieldName,className)){cov_2jz9nwd12j().b[110][0]++;cov_2jz9nwd12j().s[351]++;return{code:Parse.Error.INVALID_KEY_NAME,error:'invalid field name: '+fieldName};}else{cov_2jz9nwd12j().b[110][1]++;}cov_2jz9nwd12j().s[352]++;if(!fieldNameIsValidForClass(fieldName,className)){cov_2jz9nwd12j().b[111][0]++;cov_2jz9nwd12j().s[353]++;return{code:136,error:'field '+fieldName+' cannot be added'};}else{cov_2jz9nwd12j().b[111][1]++;}const fieldType=(cov_2jz9nwd12j().s[354]++,fields[fieldName]);const error=(cov_2jz9nwd12j().s[355]++,fieldTypeIsInvalid(fieldType));cov_2jz9nwd12j().s[356]++;if(error){cov_2jz9nwd12j().b[112][0]++;cov_2jz9nwd12j().s[357]++;return{code:error.code,error:error.message};}else{cov_2jz9nwd12j().b[112][1]++;}cov_2jz9nwd12j().s[358]++;if(fieldType.defaultValue!==undefined){cov_2jz9nwd12j().b[113][0]++;let defaultValueType=(cov_2jz9nwd12j().s[359]++,getType(fieldType.defaultValue));cov_2jz9nwd12j().s[360]++;if(typeof defaultValueType==='string'){cov_2jz9nwd12j().b[114][0]++;cov_2jz9nwd12j().s[361]++;defaultValueType={type:defaultValueType};}else{cov_2jz9nwd12j().b[114][1]++;cov_2jz9nwd12j().s[362]++;if((cov_2jz9nwd12j().b[116][0]++,typeof defaultValueType==='object')&&(cov_2jz9nwd12j().b[116][1]++,fieldType.type==='Relation')){cov_2jz9nwd12j().b[115][0]++;cov_2jz9nwd12j().s[363]++;return{code:Parse.Error.INCORRECT_TYPE,error:`The 'default value' option is not applicable for ${typeToString(fieldType)}`};}else{cov_2jz9nwd12j().b[115][1]++;}}cov_2jz9nwd12j().s[364]++;if(!dbTypeMatchesObjectType(fieldType,defaultValueType)){cov_2jz9nwd12j().b[117][0]++;cov_2jz9nwd12j().s[365]++;return{code:Parse.Error.INCORRECT_TYPE,error:`schema mismatch for ${className}.${fieldName} default value; expected ${typeToString(fieldType)} but got ${typeToString(defaultValueType)}`};}else{cov_2jz9nwd12j().b[117][1]++;}}else{cov_2jz9nwd12j().b[113][1]++;cov_2jz9nwd12j().s[366]++;if(fieldType.required){cov_2jz9nwd12j().b[118][0]++;cov_2jz9nwd12j().s[367]++;if((cov_2jz9nwd12j().b[120][0]++,typeof fieldType==='object')&&(cov_2jz9nwd12j().b[120][1]++,fieldType.type==='Relation')){cov_2jz9nwd12j().b[119][0]++;cov_2jz9nwd12j().s[368]++;return{code:Parse.Error.INCORRECT_TYPE,error:`The 'required' option is not applicable for ${typeToString(fieldType)}`};}else{cov_2jz9nwd12j().b[119][1]++;}}else{cov_2jz9nwd12j().b[118][1]++;}}}else{cov_2jz9nwd12j().b[109][1]++;}}cov_2jz9nwd12j().s[369]++;for(const fieldName in defaultColumns[className]){cov_2jz9nwd12j().s[370]++;fields[fieldName]=defaultColumns[className][fieldName];}const geoPoints=(cov_2jz9nwd12j().s[371]++,Object.keys(fields).filter(key=>{cov_2jz9nwd12j().f[62]++;cov_2jz9nwd12j().s[372]++;return(cov_2jz9nwd12j().b[121][0]++,fields[key])&&(cov_2jz9nwd12j().b[121][1]++,fields[key].type==='GeoPoint');}));cov_2jz9nwd12j().s[373]++;if(geoPoints.length>1){cov_2jz9nwd12j().b[122][0]++;cov_2jz9nwd12j().s[374]++;return{code:Parse.Error.INCORRECT_TYPE,error:'currently, only one GeoPoint field may exist in an object. Adding '+geoPoints[1]+' when '+geoPoints[0]+' already exists.'};}else{cov_2jz9nwd12j().b[122][1]++;}cov_2jz9nwd12j().s[375]++;validateCLP(classLevelPermissions,fields,this.userIdRegEx);}// Sets the Class-level permissions for a given className, which must exist.
async setPermissions(className,perms,newSchema){cov_2jz9nwd12j().f[63]++;cov_2jz9nwd12j().s[376]++;if(typeof perms==='undefined'){cov_2jz9nwd12j().b[123][0]++;cov_2jz9nwd12j().s[377]++;return Promise.resolve();}else{cov_2jz9nwd12j().b[123][1]++;}cov_2jz9nwd12j().s[378]++;validateCLP(perms,newSchema,this.userIdRegEx);cov_2jz9nwd12j().s[379]++;await this._dbAdapter.setClassLevelPermissions(className,perms);const cached=(cov_2jz9nwd12j().s[380]++,_SchemaCache.default.get(className));cov_2jz9nwd12j().s[381]++;if(cached){cov_2jz9nwd12j().b[124][0]++;cov_2jz9nwd12j().s[382]++;cached.classLevelPermissions=perms;}else{cov_2jz9nwd12j().b[124][1]++;}}// Returns a promise that resolves successfully to the new schema
// object if the provided className-fieldName-type tuple is valid.
// The className must already be validated.
// If 'freeze' is true, refuse to update the schema for this field.
enforceFieldExists(className,fieldName,type,isValidation){cov_2jz9nwd12j().f[64]++;cov_2jz9nwd12j().s[383]++;if(fieldName.indexOf('.')>0){cov_2jz9nwd12j().b[125][0]++;cov_2jz9nwd12j().s[384]++;// subdocument key (x.y) => ok if x is of type 'object'
fieldName=fieldName.split('.')[0];cov_2jz9nwd12j().s[385]++;type='Object';}else{cov_2jz9nwd12j().b[125][1]++;}cov_2jz9nwd12j().s[386]++;if(!fieldNameIsValid(fieldName,className)){cov_2jz9nwd12j().b[126][0]++;cov_2jz9nwd12j().s[387]++;throw new Parse.Error(Parse.Error.INVALID_KEY_NAME,`Invalid field name: ${fieldName}.`);}else{cov_2jz9nwd12j().b[126][1]++;}// If someone tries to create a new field with null/undefined as the value, return;
cov_2jz9nwd12j().s[388]++;if(!type){cov_2jz9nwd12j().b[127][0]++;cov_2jz9nwd12j().s[389]++;return undefined;}else{cov_2jz9nwd12j().b[127][1]++;}const expectedType=(cov_2jz9nwd12j().s[390]++,this.getExpectedType(className,fieldName));cov_2jz9nwd12j().s[391]++;if(typeof type==='string'){cov_2jz9nwd12j().b[128][0]++;cov_2jz9nwd12j().s[392]++;type={type};}else{cov_2jz9nwd12j().b[128][1]++;}cov_2jz9nwd12j().s[393]++;if(type.defaultValue!==undefined){cov_2jz9nwd12j().b[129][0]++;let defaultValueType=(cov_2jz9nwd12j().s[394]++,getType(type.defaultValue));cov_2jz9nwd12j().s[395]++;if(typeof defaultValueType==='string'){cov_2jz9nwd12j().b[130][0]++;cov_2jz9nwd12j().s[396]++;defaultValueType={type:defaultValueType};}else{cov_2jz9nwd12j().b[130][1]++;}cov_2jz9nwd12j().s[397]++;if(!dbTypeMatchesObjectType(type,defaultValueType)){cov_2jz9nwd12j().b[131][0]++;cov_2jz9nwd12j().s[398]++;throw new Parse.Error(Parse.Error.INCORRECT_TYPE,`schema mismatch for ${className}.${fieldName} default value; expected ${typeToString(type)} but got ${typeToString(defaultValueType)}`);}else{cov_2jz9nwd12j().b[131][1]++;}}else{cov_2jz9nwd12j().b[129][1]++;}cov_2jz9nwd12j().s[399]++;if(expectedType){cov_2jz9nwd12j().b[132][0]++;cov_2jz9nwd12j().s[400]++;if(!dbTypeMatchesObjectType(expectedType,type)){cov_2jz9nwd12j().b[133][0]++;cov_2jz9nwd12j().s[401]++;throw new Parse.Error(Parse.Error.INCORRECT_TYPE,`schema mismatch for ${className}.${fieldName}; expected ${typeToString(expectedType)} but got ${typeToString(type)}`);}else{cov_2jz9nwd12j().b[133][1]++;}// If type options do not change
// we can safely return
cov_2jz9nwd12j().s[402]++;if((cov_2jz9nwd12j().b[135][0]++,isValidation)||(cov_2jz9nwd12j().b[135][1]++,JSON.stringify(expectedType)===JSON.stringify(type))){cov_2jz9nwd12j().b[134][0]++;cov_2jz9nwd12j().s[403]++;return undefined;}else{cov_2jz9nwd12j().b[134][1]++;}// Field options are may be changed
// ensure to have an update to date schema field
cov_2jz9nwd12j().s[404]++;return this._dbAdapter.updateFieldOptions(className,fieldName,type);}else{cov_2jz9nwd12j().b[132][1]++;}cov_2jz9nwd12j().s[405]++;return this._dbAdapter.addFieldIfNotExists(className,fieldName,type).catch(error=>{cov_2jz9nwd12j().f[65]++;cov_2jz9nwd12j().s[406]++;if(error.code==Parse.Error.INCORRECT_TYPE){cov_2jz9nwd12j().b[136][0]++;cov_2jz9nwd12j().s[407]++;// Make sure that we throw errors when it is appropriate to do so.
throw error;}else{cov_2jz9nwd12j().b[136][1]++;}// The update failed. This can be okay - it might have been a race
// condition where another client updated the schema in the same
// way that we wanted to. So, just reload the schema
cov_2jz9nwd12j().s[408]++;return Promise.resolve();}).then(()=>{cov_2jz9nwd12j().f[66]++;cov_2jz9nwd12j().s[409]++;return{className,fieldName,type};});}ensureFields(fields){cov_2jz9nwd12j().f[67]++;cov_2jz9nwd12j().s[410]++;for(let i=(cov_2jz9nwd12j().s[411]++,0);i<fields.length;i+=1){const{className,fieldName}=(cov_2jz9nwd12j().s[412]++,fields[i]);let{type}=(cov_2jz9nwd12j().s[413]++,fields[i]);const expectedType=(cov_2jz9nwd12j().s[414]++,this.getExpectedType(className,fieldName));cov_2jz9nwd12j().s[415]++;if(typeof type==='string'){cov_2jz9nwd12j().b[137][0]++;cov_2jz9nwd12j().s[416]++;type={type:type};}else{cov_2jz9nwd12j().b[137][1]++;}cov_2jz9nwd12j().s[417]++;if((cov_2jz9nwd12j().b[139][0]++,!expectedType)||(cov_2jz9nwd12j().b[139][1]++,!dbTypeMatchesObjectType(expectedType,type))){cov_2jz9nwd12j().b[138][0]++;cov_2jz9nwd12j().s[418]++;throw new Parse.Error(Parse.Error.INVALID_JSON,`Could not add field ${fieldName}`);}else{cov_2jz9nwd12j().b[138][1]++;}}}// maintain compatibility
deleteField(fieldName,className,database){cov_2jz9nwd12j().f[68]++;cov_2jz9nwd12j().s[419]++;return this.deleteFields([fieldName],className,database);}// Delete fields, and remove that data from all objects. This is intended
// to remove unused fields, if other writers are writing objects that include
// this field, the field may reappear. Returns a Promise that resolves with
// no object on success, or rejects with { code, error } on failure.
// Passing the database and prefix is necessary in order to drop relation collections
// and remove fields from objects. Ideally the database would belong to
// a database adapter and this function would close over it or access it via member.
deleteFields(fieldNames,className,database){cov_2jz9nwd12j().f[69]++;cov_2jz9nwd12j().s[420]++;if(!classNameIsValid(className)){cov_2jz9nwd12j().b[140][0]++;cov_2jz9nwd12j().s[421]++;throw new Parse.Error(Parse.Error.INVALID_CLASS_NAME,invalidClassNameMessage(className));}else{cov_2jz9nwd12j().b[140][1]++;}cov_2jz9nwd12j().s[422]++;fieldNames.forEach(fieldName=>{cov_2jz9nwd12j().f[70]++;cov_2jz9nwd12j().s[423]++;if(!fieldNameIsValid(fieldName,className)){cov_2jz9nwd12j().b[141][0]++;cov_2jz9nwd12j().s[424]++;throw new Parse.Error(Parse.Error.INVALID_KEY_NAME,`invalid field name: ${fieldName}`);}else{cov_2jz9nwd12j().b[141][1]++;}//Don't allow deleting the default fields.
cov_2jz9nwd12j().s[425]++;if(!fieldNameIsValidForClass(fieldName,className)){cov_2jz9nwd12j().b[142][0]++;cov_2jz9nwd12j().s[426]++;throw new Parse.Error(136,`field ${fieldName} cannot be changed`);}else{cov_2jz9nwd12j().b[142][1]++;}});cov_2jz9nwd12j().s[427]++;return this.getOneSchema(className,false,{clearCache:true}).catch(error=>{cov_2jz9nwd12j().f[71]++;cov_2jz9nwd12j().s[428]++;if(error===undefined){cov_2jz9nwd12j().b[143][0]++;cov_2jz9nwd12j().s[429]++;throw new Parse.Error(Parse.Error.INVALID_CLASS_NAME,`Class ${className} does not exist.`);}else{cov_2jz9nwd12j().b[143][1]++;cov_2jz9nwd12j().s[430]++;throw error;}}).then(schema=>{cov_2jz9nwd12j().f[72]++;cov_2jz9nwd12j().s[431]++;fieldNames.forEach(fieldName=>{cov_2jz9nwd12j().f[73]++;cov_2jz9nwd12j().s[432]++;if(!schema.fields[fieldName]){cov_2jz9nwd12j().b[144][0]++;cov_2jz9nwd12j().s[433]++;throw new Parse.Error(255,`Field ${fieldName} does not exist, cannot delete.`);}else{cov_2jz9nwd12j().b[144][1]++;}});const schemaFields=(cov_2jz9nwd12j().s[434]++,_objectSpread({},schema.fields));cov_2jz9nwd12j().s[435]++;return database.adapter.deleteFields(className,schema,fieldNames).then(()=>{cov_2jz9nwd12j().f[74]++;cov_2jz9nwd12j().s[436]++;return Promise.all(fieldNames.map(fieldName=>{cov_2jz9nwd12j().f[75]++;const field=(cov_2jz9nwd12j().s[437]++,schemaFields[fieldName]);cov_2jz9nwd12j().s[438]++;if((cov_2jz9nwd12j().b[146][0]++,field)&&(cov_2jz9nwd12j().b[146][1]++,field.type==='Relation')){cov_2jz9nwd12j().b[145][0]++;cov_2jz9nwd12j().s[439]++;//For relations, drop the _Join table
return database.adapter.deleteClass(`_Join:${fieldName}:${className}`);}else{cov_2jz9nwd12j().b[145][1]++;}cov_2jz9nwd12j().s[440]++;return Promise.resolve();}));});}).then(()=>{cov_2jz9nwd12j().f[76]++;cov_2jz9nwd12j().s[441]++;_SchemaCache.default.clear();});}// Validates an object provided in REST format.
// Returns a promise that resolves to the new schema if this object is
// valid.
async validateObject(className,object,query){cov_2jz9nwd12j().f[77]++;let geocount=(cov_2jz9nwd12j().s[442]++,0);const schema=(cov_2jz9nwd12j().s[443]++,await this.enforceClassExists(className));const promises=(cov_2jz9nwd12j().s[444]++,[]);cov_2jz9nwd12j().s[445]++;for(const fieldName in object){cov_2jz9nwd12j().s[446]++;if((cov_2jz9nwd12j().b[148][0]++,object[fieldName])&&(cov_2jz9nwd12j().b[148][1]++,getType(object[fieldName])==='GeoPoint')){cov_2jz9nwd12j().b[147][0]++;cov_2jz9nwd12j().s[447]++;geocount++;}else{cov_2jz9nwd12j().b[147][1]++;}cov_2jz9nwd12j().s[448]++;if(geocount>1){cov_2jz9nwd12j().b[149][0]++;cov_2jz9nwd12j().s[449]++;return Promise.reject(new Parse.Error(Parse.Error.INCORRECT_TYPE,'there can only be one geopoint field in a class'));}else{cov_2jz9nwd12j().b[149][1]++;}}cov_2jz9nwd12j().s[450]++;for(const fieldName in object){cov_2jz9nwd12j().s[451]++;if(object[fieldName]===undefined){cov_2jz9nwd12j().b[150][0]++;cov_2jz9nwd12j().s[452]++;continue;}else{cov_2jz9nwd12j().b[150][1]++;}const expected=(cov_2jz9nwd12j().s[453]++,getType(object[fieldName]));cov_2jz9nwd12j().s[454]++;if(!expected){cov_2jz9nwd12j().b[151][0]++;cov_2jz9nwd12j().s[455]++;continue;}else{cov_2jz9nwd12j().b[151][1]++;}cov_2jz9nwd12j().s[456]++;if(fieldName==='ACL'){cov_2jz9nwd12j().b[152][0]++;cov_2jz9nwd12j().s[457]++;// Every object has ACL implicitly.
continue;}else{cov_2jz9nwd12j().b[152][1]++;}cov_2jz9nwd12j().s[458]++;promises.push(schema.enforceFieldExists(className,fieldName,expected,true));}const results=(cov_2jz9nwd12j().s[459]++,await Promise.all(promises));const enforceFields=(cov_2jz9nwd12j().s[460]++,results.filter(result=>{cov_2jz9nwd12j().f[78]++;cov_2jz9nwd12j().s[461]++;return!!result;}));cov_2jz9nwd12j().s[462]++;if(enforceFields.length!==0){cov_2jz9nwd12j().b[153][0]++;cov_2jz9nwd12j().s[463]++;// TODO: Remove by updating schema cache directly
await this.reloadData({clearCache:true});}else{cov_2jz9nwd12j().b[153][1]++;}cov_2jz9nwd12j().s[464]++;this.ensureFields(enforceFields);const promise=(cov_2jz9nwd12j().s[465]++,Promise.resolve(schema));cov_2jz9nwd12j().s[466]++;return thenValidateRequiredColumns(promise,className,object,query);}// Validates that all the properties are set for the object
validateRequiredColumns(className,object,query){cov_2jz9nwd12j().f[79]++;const columns=(cov_2jz9nwd12j().s[467]++,requiredColumns[className]);cov_2jz9nwd12j().s[468]++;if((cov_2jz9nwd12j().b[155][0]++,!columns)||(cov_2jz9nwd12j().b[155][1]++,columns.length==0)){cov_2jz9nwd12j().b[154][0]++;cov_2jz9nwd12j().s[469]++;return Promise.resolve(this);}else{cov_2jz9nwd12j().b[154][1]++;}const missingColumns=(cov_2jz9nwd12j().s[470]++,columns.filter(function(column){cov_2jz9nwd12j().f[80]++;cov_2jz9nwd12j().s[471]++;if((cov_2jz9nwd12j().b[157][0]++,query)&&(cov_2jz9nwd12j().b[157][1]++,query.objectId)){cov_2jz9nwd12j().b[156][0]++;cov_2jz9nwd12j().s[472]++;if((cov_2jz9nwd12j().b[159][0]++,object[column])&&(cov_2jz9nwd12j().b[159][1]++,typeof object[column]==='object')){cov_2jz9nwd12j().b[158][0]++;cov_2jz9nwd12j().s[473]++;// Trying to delete a required column
return object[column].__op=='Delete';}else{cov_2jz9nwd12j().b[158][1]++;}// Not trying to do anything there
cov_2jz9nwd12j().s[474]++;return false;}else{cov_2jz9nwd12j().b[156][1]++;}cov_2jz9nwd12j().s[475]++;return!object[column];}));cov_2jz9nwd12j().s[476]++;if(missingColumns.length>0){cov_2jz9nwd12j().b[160][0]++;cov_2jz9nwd12j().s[477]++;throw new Parse.Error(Parse.Error.INCORRECT_TYPE,missingColumns[0]+' is required.');}else{cov_2jz9nwd12j().b[160][1]++;}cov_2jz9nwd12j().s[478]++;return Promise.resolve(this);}testPermissionsForClassName(className,aclGroup,operation){cov_2jz9nwd12j().f[81]++;cov_2jz9nwd12j().s[479]++;return SchemaController.testPermissions(this.getClassLevelPermissions(className),aclGroup,operation);}// Tests that the class level permission let pass the operation for a given aclGroup
static testPermissions(classPermissions,aclGroup,operation){cov_2jz9nwd12j().f[82]++;cov_2jz9nwd12j().s[480]++;if((cov_2jz9nwd12j().b[162][0]++,!classPermissions)||(cov_2jz9nwd12j().b[162][1]++,!classPermissions[operation])){cov_2jz9nwd12j().b[161][0]++;cov_2jz9nwd12j().s[481]++;return true;}else{cov_2jz9nwd12j().b[161][1]++;}const perms=(cov_2jz9nwd12j().s[482]++,classPermissions[operation]);cov_2jz9nwd12j().s[483]++;if(perms['*']){cov_2jz9nwd12j().b[163][0]++;cov_2jz9nwd12j().s[484]++;return true;}else{cov_2jz9nwd12j().b[163][1]++;}// Check permissions against the aclGroup provided (array of userId/roles)
cov_2jz9nwd12j().s[485]++;if(aclGroup.some(acl=>{cov_2jz9nwd12j().f[83]++;cov_2jz9nwd12j().s[486]++;return perms[acl]===true;})){cov_2jz9nwd12j().b[164][0]++;cov_2jz9nwd12j().s[487]++;return true;}else{cov_2jz9nwd12j().b[164][1]++;}cov_2jz9nwd12j().s[488]++;return false;}// Validates an operation passes class-level-permissions set in the schema
static validatePermission(classPermissions,className,aclGroup,operation,action){cov_2jz9nwd12j().f[84]++;cov_2jz9nwd12j().s[489]++;if(SchemaController.testPermissions(classPermissions,aclGroup,operation)){cov_2jz9nwd12j().b[165][0]++;cov_2jz9nwd12j().s[490]++;return Promise.resolve();}else{cov_2jz9nwd12j().b[165][1]++;}cov_2jz9nwd12j().s[491]++;if((cov_2jz9nwd12j().b[167][0]++,!classPermissions)||(cov_2jz9nwd12j().b[167][1]++,!classPermissions[operation])){cov_2jz9nwd12j().b[166][0]++;cov_2jz9nwd12j().s[492]++;return true;}else{cov_2jz9nwd12j().b[166][1]++;}const perms=(cov_2jz9nwd12j().s[493]++,classPermissions[operation]);// If only for authenticated users
// make sure we have an aclGroup
cov_2jz9nwd12j().s[494]++;if(perms['requiresAuthentication']){cov_2jz9nwd12j().b[168][0]++;cov_2jz9nwd12j().s[495]++;// If aclGroup has * (public)
if((cov_2jz9nwd12j().b[170][0]++,!aclGroup)||(cov_2jz9nwd12j().b[170][1]++,aclGroup.length==0)){cov_2jz9nwd12j().b[169][0]++;cov_2jz9nwd12j().s[496]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,'Permission denied, user needs to be authenticated.');}else{cov_2jz9nwd12j().b[169][1]++;cov_2jz9nwd12j().s[497]++;if((cov_2jz9nwd12j().b[172][0]++,aclGroup.indexOf('*')>-1)&&(cov_2jz9nwd12j().b[172][1]++,aclGroup.length==1)){cov_2jz9nwd12j().b[171][0]++;cov_2jz9nwd12j().s[498]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,'Permission denied, user needs to be authenticated.');}else{cov_2jz9nwd12j().b[171][1]++;}}// requiresAuthentication passed, just move forward
// probably would be wise at some point to rename to 'authenticatedUser'
cov_2jz9nwd12j().s[499]++;return Promise.resolve();}else{cov_2jz9nwd12j().b[168][1]++;}// No matching CLP, let's check the Pointer permissions
// And handle those later
const permissionField=(cov_2jz9nwd12j().s[500]++,['get','find','count'].indexOf(operation)>-1?(cov_2jz9nwd12j().b[173][0]++,'readUserFields'):(cov_2jz9nwd12j().b[173][1]++,'writeUserFields'));// Reject create when write lockdown
cov_2jz9nwd12j().s[501]++;if((cov_2jz9nwd12j().b[175][0]++,permissionField=='writeUserFields')&&(cov_2jz9nwd12j().b[175][1]++,operation=='create')){cov_2jz9nwd12j().b[174][0]++;cov_2jz9nwd12j().s[502]++;throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN,`Permission denied for action ${operation} on class ${className}.`);}else{cov_2jz9nwd12j().b[174][1]++;}// Process the readUserFields later
cov_2jz9nwd12j().s[503]++;if((cov_2jz9nwd12j().b[177][0]++,Array.isArray(classPermissions[permissionField]))&&(cov_2jz9nwd12j().b[177][1]++,classPermissions[permissionField].length>0)){cov_2jz9nwd12j().b[176][0]++;cov_2jz9nwd12j().s[504]++;return Promise.resolve();}else{cov_2jz9nwd12j().b[176][1]++;}const pointerFields=(cov_2jz9nwd12j().s[505]++,classPermissions[operation].pointerFields);cov_2jz9nwd12j().s[506]++;if((cov_2jz9nwd12j().b[179][0]++,Array.isArray(pointerFields))&&(cov_2jz9nwd12j().b[179][1]++,pointerFields.length>0)){cov_2jz9nwd12j().b[178][0]++;cov_2jz9nwd12j().s[507]++;// any op except 'addField as part of create' is ok.
if((cov_2jz9nwd12j().b[181][0]++,operation!=='addField')||(cov_2jz9nwd12j().b[181][1]++,action==='update')){cov_2jz9nwd12j().b[180][0]++;cov_2jz9nwd12j().s[508]++;// We can allow adding field on update flow only.
return Promise.resolve();}else{cov_2jz9nwd12j().b[180][1]++;}}else{cov_2jz9nwd12j().b[178][1]++;}cov_2jz9nwd12j().s[509]++;throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN,`Permission denied for action ${operation} on class ${className}.`);}// Validates an operation passes class-level-permissions set in the schema
validatePermission(className,aclGroup,operation,action){cov_2jz9nwd12j().f[85]++;cov_2jz9nwd12j().s[510]++;return SchemaController.validatePermission(this.getClassLevelPermissions(className),className,aclGroup,operation,action);}getClassLevelPermissions(className){cov_2jz9nwd12j().f[86]++;cov_2jz9nwd12j().s[511]++;return(cov_2jz9nwd12j().b[182][0]++,this.schemaData[className])&&(cov_2jz9nwd12j().b[182][1]++,this.schemaData[className].classLevelPermissions);}// Returns the expected type for a className+key combination
// or undefined if the schema is not set
getExpectedType(className,fieldName){cov_2jz9nwd12j().f[87]++;cov_2jz9nwd12j().s[512]++;if(this.schemaData[className]){cov_2jz9nwd12j().b[183][0]++;const expectedType=(cov_2jz9nwd12j().s[513]++,this.schemaData[className].fields[fieldName]);cov_2jz9nwd12j().s[514]++;return expectedType==='map'?(cov_2jz9nwd12j().b[184][0]++,'Object'):(cov_2jz9nwd12j().b[184][1]++,expectedType);}else{cov_2jz9nwd12j().b[183][1]++;}cov_2jz9nwd12j().s[515]++;return undefined;}// Checks if a given class is in the schema.
hasClass(className){cov_2jz9nwd12j().f[88]++;cov_2jz9nwd12j().s[516]++;if(this.schemaData[className]){cov_2jz9nwd12j().b[185][0]++;cov_2jz9nwd12j().s[517]++;return Promise.resolve(true);}else{cov_2jz9nwd12j().b[185][1]++;}cov_2jz9nwd12j().s[518]++;return this.reloadData().then(()=>{cov_2jz9nwd12j().f[89]++;cov_2jz9nwd12j().s[519]++;return!!this.schemaData[className];});}}// Returns a promise for a new Schema.
cov_2jz9nwd12j().s[520]++;exports.SchemaController=exports.default=SchemaController;cov_2jz9nwd12j().s[521]++;const load=(dbAdapter,options)=>{cov_2jz9nwd12j().f[90]++;const schema=(cov_2jz9nwd12j().s[522]++,new SchemaController(dbAdapter));cov_2jz9nwd12j().s[523]++;return schema.reloadData(options).then(()=>{cov_2jz9nwd12j().f[91]++;cov_2jz9nwd12j().s[524]++;return schema;});};// Builds a new schema (in schema API response format) out of an
// existing mongo schema + a schemas API put request. This response
// does not include the default fields, as it is intended to be passed
// to mongoSchemaFromFieldsAndClassName. No validation is done here, it
// is done in mongoSchemaFromFieldsAndClassName.
cov_2jz9nwd12j().s[525]++;exports.load=load;function buildMergedSchemaObject(existingFields,putRequest){cov_2jz9nwd12j().f[92]++;const newSchema=(cov_2jz9nwd12j().s[526]++,{});// -disable-next
const sysSchemaField=(cov_2jz9nwd12j().s[527]++,Object.keys(defaultColumns).indexOf(existingFields._id)===-1?(cov_2jz9nwd12j().b[186][0]++,[]):(cov_2jz9nwd12j().b[186][1]++,Object.keys(defaultColumns[existingFields._id])));cov_2jz9nwd12j().s[528]++;for(const oldField in existingFields){cov_2jz9nwd12j().s[529]++;if((cov_2jz9nwd12j().b[188][0]++,oldField!=='_id')&&(cov_2jz9nwd12j().b[188][1]++,oldField!=='ACL')&&(cov_2jz9nwd12j().b[188][2]++,oldField!=='updatedAt')&&(cov_2jz9nwd12j().b[188][3]++,oldField!=='createdAt')&&(cov_2jz9nwd12j().b[188][4]++,oldField!=='objectId')){cov_2jz9nwd12j().b[187][0]++;cov_2jz9nwd12j().s[530]++;if((cov_2jz9nwd12j().b[190][0]++,sysSchemaField.length>0)&&(cov_2jz9nwd12j().b[190][1]++,sysSchemaField.indexOf(oldField)!==-1)){cov_2jz9nwd12j().b[189][0]++;cov_2jz9nwd12j().s[531]++;continue;}else{cov_2jz9nwd12j().b[189][1]++;}const fieldIsDeleted=(cov_2jz9nwd12j().s[532]++,(cov_2jz9nwd12j().b[191][0]++,putRequest[oldField])&&(cov_2jz9nwd12j().b[191][1]++,putRequest[oldField].__op==='Delete'));cov_2jz9nwd12j().s[533]++;if(!fieldIsDeleted){cov_2jz9nwd12j().b[192][0]++;cov_2jz9nwd12j().s[534]++;newSchema[oldField]=existingFields[oldField];}else{cov_2jz9nwd12j().b[192][1]++;}}else{cov_2jz9nwd12j().b[187][1]++;}}cov_2jz9nwd12j().s[535]++;for(const newField in putRequest){cov_2jz9nwd12j().s[536]++;if((cov_2jz9nwd12j().b[194][0]++,newField!=='objectId')&&(cov_2jz9nwd12j().b[194][1]++,putRequest[newField].__op!=='Delete')){cov_2jz9nwd12j().b[193][0]++;cov_2jz9nwd12j().s[537]++;if((cov_2jz9nwd12j().b[196][0]++,sysSchemaField.length>0)&&(cov_2jz9nwd12j().b[196][1]++,sysSchemaField.indexOf(newField)!==-1)){cov_2jz9nwd12j().b[195][0]++;cov_2jz9nwd12j().s[538]++;continue;}else{cov_2jz9nwd12j().b[195][1]++;}cov_2jz9nwd12j().s[539]++;newSchema[newField]=putRequest[newField];}else{cov_2jz9nwd12j().b[193][1]++;}}cov_2jz9nwd12j().s[540]++;return newSchema;}// Given a schema promise, construct another schema promise that
// validates this field once the schema loads.
function thenValidateRequiredColumns(schemaPromise,className,object,query){cov_2jz9nwd12j().f[93]++;cov_2jz9nwd12j().s[541]++;return schemaPromise.then(schema=>{cov_2jz9nwd12j().f[94]++;cov_2jz9nwd12j().s[542]++;return schema.validateRequiredColumns(className,object,query);});}// Gets the type from a REST API formatted object, where 'type' is
// extended past javascript types to include the rest of the Parse
// type system.
// The output should be a valid schema value.
// TODO: ensure that this is compatible with the format used in Open DB
function getType(obj){cov_2jz9nwd12j().f[95]++;const type=(cov_2jz9nwd12j().s[543]++,typeof obj);cov_2jz9nwd12j().s[544]++;switch(type){case'boolean':cov_2jz9nwd12j().b[197][0]++;cov_2jz9nwd12j().s[545]++;return'Boolean';case'string':cov_2jz9nwd12j().b[197][1]++;cov_2jz9nwd12j().s[546]++;return'String';case'number':cov_2jz9nwd12j().b[197][2]++;cov_2jz9nwd12j().s[547]++;return'Number';case'map':cov_2jz9nwd12j().b[197][3]++;case'object':cov_2jz9nwd12j().b[197][4]++;cov_2jz9nwd12j().s[548]++;if(!obj){cov_2jz9nwd12j().b[198][0]++;cov_2jz9nwd12j().s[549]++;return undefined;}else{cov_2jz9nwd12j().b[198][1]++;}cov_2jz9nwd12j().s[550]++;return getObjectType(obj);case'function':cov_2jz9nwd12j().b[197][5]++;case'symbol':cov_2jz9nwd12j().b[197][6]++;case'undefined':cov_2jz9nwd12j().b[197][7]++;default:cov_2jz9nwd12j().b[197][8]++;cov_2jz9nwd12j().s[551]++;throw'bad obj: '+obj;}}// This gets the type for non-JSON types like pointers and files, but
// also gets the appropriate type for $ operators.
// Returns null if the type is unknown.
function getObjectType(obj){cov_2jz9nwd12j().f[96]++;cov_2jz9nwd12j().s[552]++;if(obj instanceof Array){cov_2jz9nwd12j().b[199][0]++;cov_2jz9nwd12j().s[553]++;return'Array';}else{cov_2jz9nwd12j().b[199][1]++;}cov_2jz9nwd12j().s[554]++;if(obj.__type){cov_2jz9nwd12j().b[200][0]++;cov_2jz9nwd12j().s[555]++;switch(obj.__type){case'Pointer':cov_2jz9nwd12j().b[201][0]++;cov_2jz9nwd12j().s[556]++;if(obj.className){cov_2jz9nwd12j().b[202][0]++;cov_2jz9nwd12j().s[557]++;return{type:'Pointer',targetClass:obj.className};}else{cov_2jz9nwd12j().b[202][1]++;}cov_2jz9nwd12j().s[558]++;break;case'Relation':cov_2jz9nwd12j().b[201][1]++;cov_2jz9nwd12j().s[559]++;if(obj.className){cov_2jz9nwd12j().b[203][0]++;cov_2jz9nwd12j().s[560]++;return{type:'Relation',targetClass:obj.className};}else{cov_2jz9nwd12j().b[203][1]++;}cov_2jz9nwd12j().s[561]++;break;case'File':cov_2jz9nwd12j().b[201][2]++;cov_2jz9nwd12j().s[562]++;if(obj.name){cov_2jz9nwd12j().b[204][0]++;cov_2jz9nwd12j().s[563]++;return'File';}else{cov_2jz9nwd12j().b[204][1]++;}cov_2jz9nwd12j().s[564]++;break;case'Date':cov_2jz9nwd12j().b[201][3]++;cov_2jz9nwd12j().s[565]++;if(obj.iso){cov_2jz9nwd12j().b[205][0]++;cov_2jz9nwd12j().s[566]++;return'Date';}else{cov_2jz9nwd12j().b[205][1]++;}cov_2jz9nwd12j().s[567]++;break;case'GeoPoint':cov_2jz9nwd12j().b[201][4]++;cov_2jz9nwd12j().s[568]++;if((cov_2jz9nwd12j().b[207][0]++,obj.latitude!=null)&&(cov_2jz9nwd12j().b[207][1]++,obj.longitude!=null)){cov_2jz9nwd12j().b[206][0]++;cov_2jz9nwd12j().s[569]++;return'GeoPoint';}else{cov_2jz9nwd12j().b[206][1]++;}cov_2jz9nwd12j().s[570]++;break;case'Bytes':cov_2jz9nwd12j().b[201][5]++;cov_2jz9nwd12j().s[571]++;if(obj.base64){cov_2jz9nwd12j().b[208][0]++;cov_2jz9nwd12j().s[572]++;return'Bytes';}else{cov_2jz9nwd12j().b[208][1]++;}cov_2jz9nwd12j().s[573]++;break;case'Polygon':cov_2jz9nwd12j().b[201][6]++;cov_2jz9nwd12j().s[574]++;if(obj.coordinates){cov_2jz9nwd12j().b[209][0]++;cov_2jz9nwd12j().s[575]++;return'Polygon';}else{cov_2jz9nwd12j().b[209][1]++;}cov_2jz9nwd12j().s[576]++;break;}cov_2jz9nwd12j().s[577]++;throw new Parse.Error(Parse.Error.INCORRECT_TYPE,'This is not a valid '+obj.__type);}else{cov_2jz9nwd12j().b[200][1]++;}cov_2jz9nwd12j().s[578]++;if(obj['$ne']){cov_2jz9nwd12j().b[210][0]++;cov_2jz9nwd12j().s[579]++;return getObjectType(obj['$ne']);}else{cov_2jz9nwd12j().b[210][1]++;}cov_2jz9nwd12j().s[580]++;if(obj.__op){cov_2jz9nwd12j().b[211][0]++;cov_2jz9nwd12j().s[581]++;switch(obj.__op){case'Increment':cov_2jz9nwd12j().b[212][0]++;cov_2jz9nwd12j().s[582]++;return'Number';case'Delete':cov_2jz9nwd12j().b[212][1]++;cov_2jz9nwd12j().s[583]++;return null;case'Add':cov_2jz9nwd12j().b[212][2]++;case'AddUnique':cov_2jz9nwd12j().b[212][3]++;case'Remove':cov_2jz9nwd12j().b[212][4]++;cov_2jz9nwd12j().s[584]++;return'Array';case'AddRelation':cov_2jz9nwd12j().b[212][5]++;case'RemoveRelation':cov_2jz9nwd12j().b[212][6]++;cov_2jz9nwd12j().s[585]++;return{type:'Relation',targetClass:obj.objects[0].className};case'Batch':cov_2jz9nwd12j().b[212][7]++;cov_2jz9nwd12j().s[586]++;return getObjectType(obj.ops[0]);default:cov_2jz9nwd12j().b[212][8]++;cov_2jz9nwd12j().s[587]++;throw'unexpected op: '+obj.__op;}}else{cov_2jz9nwd12j().b[211][1]++;}cov_2jz9nwd12j().s[588]++;return'Object';}//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,