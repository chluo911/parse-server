"use strict";// An object that encapsulates everything we need to run a 'find'
// operation, encoded in the REST API format.
function cov_311fiay8r(){var path="/parse-server/lib/RestQuery.js";var hash="20a6d3c5d8b032bd210e72f1edc5e3b6694cb86b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/RestQuery.js",statementMap:{"0":{start:{line:5,column:23},end:{line:5,column:64}},"1":{start:{line:7,column:12},end:{line:7,column:39}},"2":{start:{line:9,column:17},end:{line:9,column:38}},"3":{start:{line:13,column:4},end:{line:13,column:42}},"4":{start:{line:15,column:27},end:{line:15,column:72}},"5":{start:{line:29,column:2},end:{line:29,column:23}},"6":{start:{line:30,column:2},end:{line:30,column:19}},"7":{start:{line:31,column:2},end:{line:31,column:29}},"8":{start:{line:32,column:2},end:{line:32,column:29}},"9":{start:{line:33,column:2},end:{line:33,column:33}},"10":{start:{line:34,column:2},end:{line:34,column:29}},"11":{start:{line:35,column:2},end:{line:35,column:35}},"12":{start:{line:36,column:2},end:{line:36,column:23}},"13":{start:{line:37,column:2},end:{line:37,column:24}},"14":{start:{line:38,column:2},end:{line:38,column:31}},"15":{start:{line:40,column:2},end:{line:56,column:3}},"16":{start:{line:41,column:4},end:{line:55,column:5}},"17":{start:{line:42,column:6},end:{line:44,column:7}},"18":{start:{line:43,column:8},end:{line:43,column:90}},"19":{start:{line:46,column:6},end:{line:54,column:8}},"20":{start:{line:58,column:2},end:{line:58,column:23}},"21":{start:{line:59,column:2},end:{line:59,column:26}},"22":{start:{line:66,column:2},end:{line:66,column:20}},"23":{start:{line:67,column:23},end:{line:67,column:25}},"24":{start:{line:70,column:2},end:{line:72,column:3}},"25":{start:{line:71,column:4},end:{line:71,column:38}},"26":{start:{line:76,column:2},end:{line:78,column:3}},"27":{start:{line:77,column:4},end:{line:77,column:52}},"28":{start:{line:80,column:2},end:{line:98,column:3}},"29":{start:{line:81,column:4},end:{line:88,column:17}},"30":{start:{line:83,column:6},end:{line:83,column:39}},"31":{start:{line:87,column:6},end:{line:87,column:48}},"32":{start:{line:91,column:4},end:{line:97,column:5}},"33":{start:{line:92,column:6},end:{line:96,column:7}},"34":{start:{line:93,column:8},end:{line:93,column:45}},"35":{start:{line:95,column:8},end:{line:95,column:52}},"36":{start:{line:100,column:2},end:{line:192,column:3}},"37":{start:{line:101,column:4},end:{line:191,column:5}},"38":{start:{line:104,column:23},end:{line:104,column:107}},"39":{start:{line:104,column:65},end:{line:104,column:79}},"40":{start:{line:105,column:10},end:{line:105,column:48}},"41":{start:{line:106,column:10},end:{line:106,column:16}},"42":{start:{line:111,column:26},end:{line:111,column:107}},"43":{start:{line:111,column:73},end:{line:111,column:106}},"44":{start:{line:112,column:10},end:{line:112,column:58}},"45":{start:{line:113,column:10},end:{line:113,column:16}},"46":{start:{line:117,column:8},end:{line:117,column:28}},"47":{start:{line:118,column:8},end:{line:118,column:14}},"48":{start:{line:121,column:8},end:{line:121,column:31}},"49":{start:{line:122,column:8},end:{line:122,column:14}},"50":{start:{line:131,column:8},end:{line:131,column:55}},"51":{start:{line:132,column:8},end:{line:132,column:14}},"52":{start:{line:135,column:21},end:{line:135,column:49}},"53":{start:{line:136,column:8},end:{line:150,column:15}},"54":{start:{line:137,column:10},end:{line:137,column:31}},"55":{start:{line:139,column:10},end:{line:147,column:11}},"56":{start:{line:140,column:12},end:{line:142,column:14}},"57":{start:{line:143,column:17},end:{line:147,column:11}},"58":{start:{line:144,column:12},end:{line:144,column:41}},"59":{start:{line:146,column:12},end:{line:146,column:31}},"60":{start:{line:149,column:10},end:{line:149,column:25}},"61":{start:{line:151,column:8},end:{line:151,column:14}},"62":{start:{line:155,column:24},end:{line:155,column:54}},"63":{start:{line:157,column:10},end:{line:160,column:11}},"64":{start:{line:158,column:12},end:{line:158,column:35}},"65":{start:{line:159,column:12},end:{line:159,column:18}},"66":{start:{line:163,column:26},end:{line:171,column:16}},"67":{start:{line:167,column:12},end:{line:170,column:21}},"68":{start:{line:168,column:14},end:{line:168,column:63}},"69":{start:{line:169,column:14},end:{line:169,column:26}},"70":{start:{line:172,column:10},end:{line:176,column:13}},"71":{start:{line:173,column:12},end:{line:173,column:32}},"72":{start:{line:175,column:12},end:{line:175,column:39}},"73":{start:{line:177,column:10},end:{line:177,column:16}},"74":{start:{line:181,column:8},end:{line:181,column:63}},"75":{start:{line:182,column:8},end:{line:182,column:38}},"76":{start:{line:183,column:8},end:{line:183,column:14}},"77":{start:{line:187,column:8},end:{line:187,column:14}},"78":{start:{line:190,column:8},end:{line:190,column:81}},"79":{start:{line:200,column:0},end:{line:218,column:2}},"80":{start:{line:201,column:2},end:{line:217,column:5}},"81":{start:{line:202,column:4},end:{line:202,column:33}},"82":{start:{line:204,column:4},end:{line:204,column:35}},"83":{start:{line:206,column:4},end:{line:206,column:36}},"84":{start:{line:208,column:4},end:{line:208,column:40}},"85":{start:{line:210,column:4},end:{line:210,column:27}},"86":{start:{line:212,column:4},end:{line:212,column:32}},"87":{start:{line:214,column:4},end:{line:214,column:38}},"88":{start:{line:216,column:4},end:{line:216,column:25}},"89":{start:{line:220,column:0},end:{line:249,column:2}},"90":{start:{line:228,column:6},end:{line:228,column:10}},"91":{start:{line:230,column:2},end:{line:230,column:47}},"92":{start:{line:231,column:2},end:{line:231,column:33}},"93":{start:{line:232,column:17},end:{line:232,column:22}},"94":{start:{line:233,column:2},end:{line:248,column:5}},"95":{start:{line:234,column:4},end:{line:234,column:21}},"96":{start:{line:236,column:18},end:{line:236,column:124}},"97":{start:{line:239,column:8},end:{line:239,column:29}},"98":{start:{line:240,column:4},end:{line:240,column:30}},"99":{start:{line:241,column:4},end:{line:241,column:50}},"100":{start:{line:243,column:4},end:{line:247,column:5}},"101":{start:{line:244,column:6},end:{line:246,column:9}},"102":{start:{line:251,column:0},end:{line:269,column:2}},"103":{start:{line:252,column:2},end:{line:268,column:5}},"104":{start:{line:253,column:4},end:{line:253,column:36}},"105":{start:{line:255,column:4},end:{line:255,column:42}},"106":{start:{line:257,column:4},end:{line:257,column:46}},"107":{start:{line:259,column:4},end:{line:259,column:32}},"108":{start:{line:261,column:4},end:{line:261,column:36}},"109":{start:{line:263,column:4},end:{line:263,column:33}},"110":{start:{line:265,column:4},end:{line:265,column:36}},"111":{start:{line:267,column:4},end:{line:267,column:34}},"112":{start:{line:272,column:0},end:{line:287,column:2}},"113":{start:{line:273,column:2},end:{line:275,column:3}},"114":{start:{line:274,column:4},end:{line:274,column:29}},"115":{start:{line:277,column:2},end:{line:277,column:31}},"116":{start:{line:279,column:2},end:{line:286,column:3}},"117":{start:{line:280,column:4},end:{line:283,column:7}},"118":{start:{line:281,column:6},end:{line:281,column:85}},"119":{start:{line:282,column:6},end:{line:282,column:13}},"120":{start:{line:285,column:4},end:{line:285,column:29}},"121":{start:{line:291,column:0},end:{line:301,column:2}},"122":{start:{line:292,column:2},end:{line:294,column:3}},"123":{start:{line:293,column:4},end:{line:293,column:29}},"124":{start:{line:297,column:2},end:{line:300,column:5}},"125":{start:{line:298,column:4},end:{line:298,column:34}},"126":{start:{line:299,column:4},end:{line:299,column:42}},"127":{start:{line:304,column:0},end:{line:314,column:2}},"128":{start:{line:305,column:2},end:{line:313,column:3}},"129":{start:{line:306,column:4},end:{line:310,column:7}},"130":{start:{line:306,column:70},end:{line:306,column:111}},"131":{start:{line:307,column:6},end:{line:309,column:7}},"132":{start:{line:308,column:8},end:{line:308,column:144}},"133":{start:{line:312,column:4},end:{line:312,column:29}},"134":{start:{line:317,column:15},end:{line:317,column:17}},"135":{start:{line:319,column:2},end:{line:325,column:3}},"136":{start:{line:320,column:4},end:{line:324,column:7}},"137":{start:{line:327,column:2},end:{line:327,column:35}},"138":{start:{line:329,column:2},end:{line:333,column:3}},"139":{start:{line:330,column:4},end:{line:330,column:63}},"140":{start:{line:332,column:4},end:{line:332,column:34}},"141":{start:{line:340,column:0},end:{line:371,column:2}},"142":{start:{line:341,column:22},end:{line:341,column:67}},"143":{start:{line:343,column:2},end:{line:345,column:3}},"144":{start:{line:344,column:4},end:{line:344,column:11}},"145":{start:{line:348,column:21},end:{line:348,column:46}},"146":{start:{line:350,column:2},end:{line:352,column:3}},"147":{start:{line:351,column:4},end:{line:351,column:83}},"148":{start:{line:354,column:28},end:{line:356,column:3}},"149":{start:{line:358,column:2},end:{line:363,column:3}},"150":{start:{line:359,column:4},end:{line:359,column:79}},"151":{start:{line:360,column:4},end:{line:360,column:87}},"152":{start:{line:361,column:9},end:{line:363,column:3}},"153":{start:{line:362,column:4},end:{line:362,column:71}},"154":{start:{line:365,column:17},end:{line:365,column:117}},"155":{start:{line:366,column:2},end:{line:370,column:5}},"156":{start:{line:367,column:4},end:{line:367,column:74}},"157":{start:{line:369,column:4},end:{line:369,column:33}},"158":{start:{line:374,column:15},end:{line:374,column:17}},"159":{start:{line:376,column:2},end:{line:382,column:3}},"160":{start:{line:377,column:4},end:{line:381,column:7}},"161":{start:{line:384,column:2},end:{line:384,column:41}},"162":{start:{line:386,column:2},end:{line:390,column:3}},"163":{start:{line:387,column:4},end:{line:387,column:71}},"164":{start:{line:389,column:4},end:{line:389,column:38}},"165":{start:{line:397,column:0},end:{line:428,column:2}},"166":{start:{line:398,column:25},end:{line:398,column:73}},"167":{start:{line:400,column:2},end:{line:402,column:3}},"168":{start:{line:401,column:4},end:{line:401,column:11}},"169":{start:{line:405,column:24},end:{line:405,column:55}},"170":{start:{line:407,column:2},end:{line:409,column:3}},"171":{start:{line:408,column:4},end:{line:408,column:86}},"172":{start:{line:411,column:28},end:{line:413,column:3}},"173":{start:{line:415,column:2},end:{line:420,column:3}},"174":{start:{line:416,column:4},end:{line:416,column:79}},"175":{start:{line:417,column:4},end:{line:417,column:87}},"176":{start:{line:418,column:9},end:{line:420,column:3}},"177":{start:{line:419,column:4},end:{line:419,column:71}},"178":{start:{line:422,column:17},end:{line:422,column:123}},"179":{start:{line:423,column:2},end:{line:427,column:5}},"180":{start:{line:424,column:4},end:{line:424,column:80}},"181":{start:{line:426,column:4},end:{line:426,column:36}},"182":{start:{line:431,column:32},end:{line:437,column:1}},"183":{start:{line:432,column:2},end:{line:434,column:3}},"184":{start:{line:433,column:4},end:{line:433,column:21}},"185":{start:{line:436,column:2},end:{line:436,column:16}},"186":{start:{line:439,column:24},end:{line:453,column:1}},"187":{start:{line:440,column:15},end:{line:440,column:17}},"188":{start:{line:442,column:2},end:{line:444,column:3}},"189":{start:{line:443,column:4},end:{line:443,column:72}},"190":{start:{line:446,column:2},end:{line:446,column:33}},"191":{start:{line:448,column:2},end:{line:452,column:3}},"192":{start:{line:449,column:4},end:{line:449,column:61}},"193":{start:{line:451,column:4},end:{line:451,column:33}},"194":{start:{line:460,column:0},end:{line:491,column:2}},"195":{start:{line:461,column:21},end:{line:461,column:65}},"196":{start:{line:463,column:2},end:{line:465,column:3}},"197":{start:{line:464,column:4},end:{line:464,column:11}},"198":{start:{line:468,column:20},end:{line:468,column:43}},"199":{start:{line:470,column:2},end:{line:472,column:3}},"200":{start:{line:471,column:4},end:{line:471,column:82}},"201":{start:{line:474,column:28},end:{line:476,column:3}},"202":{start:{line:478,column:2},end:{line:483,column:3}},"203":{start:{line:479,column:4},end:{line:479,column:79}},"204":{start:{line:480,column:4},end:{line:480,column:87}},"205":{start:{line:481,column:9},end:{line:483,column:3}},"206":{start:{line:482,column:4},end:{line:482,column:71}},"207":{start:{line:485,column:17},end:{line:485,column:127}},"208":{start:{line:486,column:2},end:{line:490,column:5}},"209":{start:{line:487,column:4},end:{line:487,column:69}},"210":{start:{line:489,column:4},end:{line:489,column:32}},"211":{start:{line:493,column:28},end:{line:507,column:1}},"212":{start:{line:494,column:15},end:{line:494,column:17}},"213":{start:{line:496,column:2},end:{line:498,column:3}},"214":{start:{line:497,column:4},end:{line:497,column:72}},"215":{start:{line:500,column:2},end:{line:500,column:41}},"216":{start:{line:502,column:2},end:{line:506,column:3}},"217":{start:{line:503,column:4},end:{line:503,column:71}},"218":{start:{line:505,column:4},end:{line:505,column:38}},"219":{start:{line:514,column:0},end:{line:545,column:2}},"220":{start:{line:515,column:25},end:{line:515,column:73}},"221":{start:{line:517,column:2},end:{line:519,column:3}},"222":{start:{line:518,column:4},end:{line:518,column:11}},"223":{start:{line:522,column:24},end:{line:522,column:55}},"224":{start:{line:524,column:2},end:{line:526,column:3}},"225":{start:{line:525,column:4},end:{line:525,column:86}},"226":{start:{line:528,column:28},end:{line:530,column:3}},"227":{start:{line:532,column:2},end:{line:537,column:3}},"228":{start:{line:533,column:4},end:{line:533,column:79}},"229":{start:{line:534,column:4},end:{line:534,column:87}},"230":{start:{line:535,column:9},end:{line:537,column:3}},"231":{start:{line:536,column:4},end:{line:536,column:71}},"232":{start:{line:539,column:17},end:{line:539,column:135}},"233":{start:{line:540,column:2},end:{line:544,column:5}},"234":{start:{line:541,column:4},end:{line:541,column:81}},"235":{start:{line:543,column:4},end:{line:543,column:36}},"236":{start:{line:547,column:28},end:{line:561,column:1}},"237":{start:{line:548,column:2},end:{line:548,column:25}},"238":{start:{line:550,column:2},end:{line:560,column:3}},"239":{start:{line:551,column:4},end:{line:555,column:7}},"240":{start:{line:552,column:6},end:{line:554,column:7}},"241":{start:{line:553,column:8},end:{line:553,column:41}},"242":{start:{line:557,column:4},end:{line:559,column:5}},"243":{start:{line:558,column:6},end:{line:558,column:29}},"244":{start:{line:563,column:34},end:{line:589,column:1}},"245":{start:{line:564,column:2},end:{line:566,column:3}},"246":{start:{line:565,column:4},end:{line:565,column:22}},"247":{start:{line:568,column:24},end:{line:568,column:26}},"248":{start:{line:569,column:28},end:{line:569,column:33}},"249":{start:{line:570,column:30},end:{line:570,column:35}},"250":{start:{line:572,column:2},end:{line:579,column:3}},"251":{start:{line:573,column:4},end:{line:578,column:5}},"252":{start:{line:574,column:6},end:{line:574,column:33}},"253":{start:{line:575,column:6},end:{line:575,column:43}},"254":{start:{line:577,column:6},end:{line:577,column:35}},"255":{start:{line:581,column:2},end:{line:586,column:3}},"256":{start:{line:582,column:4},end:{line:582,column:38}},"257":{start:{line:583,column:4},end:{line:585,column:7}},"258":{start:{line:584,column:6},end:{line:584,column:29}},"259":{start:{line:588,column:2},end:{line:588,column:20}},"260":{start:{line:591,column:0},end:{line:599,column:2}},"261":{start:{line:592,column:2},end:{line:594,column:3}},"262":{start:{line:593,column:4},end:{line:593,column:11}},"263":{start:{line:596,column:2},end:{line:598,column:3}},"264":{start:{line:597,column:4},end:{line:597,column:73}},"265":{start:{line:603,column:0},end:{line:642,column:2}},"266":{start:{line:604,column:2},end:{line:609,column:3}},"267":{start:{line:605,column:4},end:{line:607,column:6}},"268":{start:{line:608,column:4},end:{line:608,column:29}},"269":{start:{line:611,column:22},end:{line:611,column:57}},"270":{start:{line:613,column:2},end:{line:617,column:3}},"271":{start:{line:614,column:4},end:{line:616,column:7}},"272":{start:{line:615,column:6},end:{line:615,column:31}},"273":{start:{line:619,column:2},end:{line:621,column:3}},"274":{start:{line:620,column:4},end:{line:620,column:32}},"275":{start:{line:623,column:2},end:{line:641,column:5}},"276":{start:{line:624,column:4},end:{line:628,column:5}},"277":{start:{line:625,column:6},end:{line:627,column:7}},"278":{start:{line:626,column:8},end:{line:626,column:36}},"279":{start:{line:630,column:4},end:{line:630,column:74}},"280":{start:{line:632,column:4},end:{line:636,column:5}},"281":{start:{line:633,column:6},end:{line:635,column:7}},"282":{start:{line:634,column:8},end:{line:634,column:45}},"283":{start:{line:638,column:4},end:{line:640,column:6}},"284":{start:{line:646,column:0},end:{line:657,column:2}},"285":{start:{line:647,column:2},end:{line:649,column:3}},"286":{start:{line:648,column:4},end:{line:648,column:11}},"287":{start:{line:651,column:2},end:{line:651,column:32}},"288":{start:{line:652,column:2},end:{line:652,column:31}},"289":{start:{line:653,column:2},end:{line:653,column:32}},"290":{start:{line:654,column:2},end:{line:656,column:5}},"291":{start:{line:655,column:4},end:{line:655,column:28}},"292":{start:{line:660,column:0},end:{line:683,column:2}},"293":{start:{line:661,column:2},end:{line:663,column:3}},"294":{start:{line:662,column:4},end:{line:662,column:11}},"295":{start:{line:665,column:2},end:{line:682,column:5}},"296":{start:{line:665,column:68},end:{line:665,column:113}},"297":{start:{line:666,column:26},end:{line:666,column:28}},"298":{start:{line:667,column:22},end:{line:667,column:24}},"299":{start:{line:669,column:4},end:{line:674,column:5}},"300":{start:{line:670,column:6},end:{line:673,column:7}},"301":{start:{line:671,column:8},end:{line:671,column:36}},"302":{start:{line:672,column:8},end:{line:672,column:30}},"303":{start:{line:677,column:4},end:{line:677,column:69}},"304":{start:{line:679,column:4},end:{line:681,column:5}},"305":{start:{line:680,column:6},end:{line:680,column:61}},"306":{start:{line:686,column:0},end:{line:700,column:2}},"307":{start:{line:687,column:2},end:{line:689,column:3}},"308":{start:{line:688,column:4},end:{line:688,column:11}},"309":{start:{line:691,column:2},end:{line:694,column:3}},"310":{start:{line:692,column:4},end:{line:692,column:69}},"311":{start:{line:692,column:38},end:{line:692,column:67}},"312":{start:{line:693,column:4},end:{line:693,column:11}},"313":{start:{line:696,column:2},end:{line:699,column:5}},"314":{start:{line:696,column:68},end:{line:696,column:113}},"315":{start:{line:697,column:19},end:{line:697,column:45}},"316":{start:{line:698,column:4},end:{line:698,column:66}},"317":{start:{line:698,column:35},end:{line:698,column:64}},"318":{start:{line:703,column:0},end:{line:722,column:2}},"319":{start:{line:704,column:2},end:{line:706,column:3}},"320":{start:{line:705,column:4},end:{line:705,column:11}},"321":{start:{line:708,column:21},end:{line:708,column:106}},"322":{start:{line:710,column:2},end:{line:719,column:3}},"323":{start:{line:711,column:4},end:{line:715,column:7}},"324":{start:{line:712,column:6},end:{line:712,column:34}},"325":{start:{line:713,column:6},end:{line:713,column:43}},"326":{start:{line:714,column:6},end:{line:714,column:34}},"327":{start:{line:716,column:9},end:{line:719,column:3}},"328":{start:{line:717,column:4},end:{line:717,column:41}},"329":{start:{line:718,column:4},end:{line:718,column:32}},"330":{start:{line:721,column:2},end:{line:721,column:22}},"331":{start:{line:725,column:0},end:{line:766,column:2}},"332":{start:{line:726,column:2},end:{line:728,column:3}},"333":{start:{line:727,column:4},end:{line:727,column:11}},"334":{start:{line:730,column:2},end:{line:732,column:3}},"335":{start:{line:731,column:4},end:{line:731,column:11}},"336":{start:{line:735,column:27},end:{line:735,column:118}},"337":{start:{line:737,column:2},end:{line:739,column:3}},"338":{start:{line:738,column:4},end:{line:738,column:29}},"339":{start:{line:742,column:2},end:{line:744,column:3}},"340":{start:{line:743,column:4},end:{line:743,column:29}},"341":{start:{line:746,column:15},end:{line:746,column:50}},"342":{start:{line:747,column:2},end:{line:747,column:30}},"343":{start:{line:748,column:21},end:{line:748,column:52}},"344":{start:{line:749,column:2},end:{line:749,column:28}},"345":{start:{line:751,column:2},end:{line:765,column:5}},"346":{start:{line:753,column:4},end:{line:764,column:5}},"347":{start:{line:754,column:6},end:{line:761,column:9}},"348":{start:{line:755,column:8},end:{line:757,column:9}},"349":{start:{line:756,column:10},end:{line:756,column:35}},"350":{start:{line:759,column:8},end:{line:759,column:50}},"351":{start:{line:760,column:8},end:{line:760,column:22}},"352":{start:{line:763,column:6},end:{line:763,column:38}},"353":{start:{line:772,column:17},end:{line:772,column:53}},"354":{start:{line:774,column:2},end:{line:776,column:3}},"355":{start:{line:775,column:4},end:{line:775,column:20}},"356":{start:{line:778,column:23},end:{line:778,column:25}},"357":{start:{line:780,column:2},end:{line:791,column:3}},"358":{start:{line:781,column:4},end:{line:783,column:5}},"359":{start:{line:782,column:6},end:{line:782,column:15}},"360":{start:{line:785,column:22},end:{line:785,column:39}},"361":{start:{line:787,column:4},end:{line:790,column:5}},"362":{start:{line:788,column:6},end:{line:788,column:69}},"363":{start:{line:789,column:6},end:{line:789,column:52}},"364":{start:{line:793,column:29},end:{line:793,column:31}},"365":{start:{line:795,column:2},end:{line:817,column:3}},"366":{start:{line:796,column:17},end:{line:796,column:53}},"367":{start:{line:797,column:19},end:{line:812,column:17}},"368":{start:{line:798,column:22},end:{line:798,column:36}},"369":{start:{line:799,column:14},end:{line:799,column:15}},"370":{start:{line:801,column:6},end:{line:805,column:7}},"371":{start:{line:802,column:8},end:{line:804,column:9}},"372":{start:{line:803,column:10},end:{line:803,column:21}},"373":{start:{line:807,column:6},end:{line:809,column:7}},"374":{start:{line:808,column:8},end:{line:808,column:28}},"375":{start:{line:811,column:6},end:{line:811,column:17}},"376":{start:{line:814,column:4},end:{line:816,column:5}},"377":{start:{line:815,column:6},end:{line:815,column:61}},"378":{start:{line:819,column:2},end:{line:841,column:3}},"379":{start:{line:820,column:24},end:{line:820,column:67}},"380":{start:{line:821,column:26},end:{line:836,column:17}},"381":{start:{line:822,column:22},end:{line:822,column:36}},"382":{start:{line:823,column:14},end:{line:823,column:15}},"383":{start:{line:825,column:6},end:{line:829,column:7}},"384":{start:{line:826,column:8},end:{line:828,column:9}},"385":{start:{line:827,column:10},end:{line:827,column:21}},"386":{start:{line:831,column:6},end:{line:833,column:7}},"387":{start:{line:832,column:8},end:{line:832,column:28}},"388":{start:{line:835,column:6},end:{line:835,column:17}},"389":{start:{line:838,column:4},end:{line:840,column:5}},"390":{start:{line:839,column:6},end:{line:839,column:75}},"391":{start:{line:843,column:2},end:{line:848,column:3}},"392":{start:{line:844,column:4},end:{line:844,column:74}},"393":{start:{line:845,column:4},end:{line:845,column:81}},"394":{start:{line:846,column:9},end:{line:848,column:3}},"395":{start:{line:847,column:4},end:{line:847,column:67}},"396":{start:{line:850,column:24},end:{line:873,column:4}},"397":{start:{line:851,column:22},end:{line:851,column:57}},"398":{start:{line:854,column:4},end:{line:864,column:5}},"399":{start:{line:855,column:6},end:{line:857,column:8}},"400":{start:{line:859,column:6},end:{line:863,column:8}},"401":{start:{line:866,column:16},end:{line:866,column:81}},"402":{start:{line:867,column:4},end:{line:872,column:7}},"403":{start:{line:870,column:6},end:{line:870,column:36}},"404":{start:{line:871,column:6},end:{line:871,column:38}},"405":{start:{line:875,column:2},end:{line:900,column:5}},"406":{start:{line:876,column:18},end:{line:890,column:10}},"407":{start:{line:877,column:6},end:{line:887,column:7}},"408":{start:{line:878,column:8},end:{line:878,column:30}},"409":{start:{line:879,column:8},end:{line:879,column:50}},"410":{start:{line:881,column:8},end:{line:884,column:9}},"411":{start:{line:882,column:10},end:{line:882,column:34}},"412":{start:{line:883,column:10},end:{line:883,column:30}},"413":{start:{line:886,column:8},end:{line:886,column:36}},"414":{start:{line:889,column:6},end:{line:889,column:21}},"415":{start:{line:891,column:15},end:{line:893,column:5}},"416":{start:{line:895,column:4},end:{line:897,column:5}},"417":{start:{line:896,column:6},end:{line:896,column:34}},"418":{start:{line:899,column:4},end:{line:899,column:16}},"419":{start:{line:909,column:2},end:{line:917,column:3}},"420":{start:{line:910,column:17},end:{line:910,column:19}},"421":{start:{line:912,column:4},end:{line:914,column:5}},"422":{start:{line:913,column:6},end:{line:913,column:52}},"423":{start:{line:916,column:4},end:{line:916,column:18}},"424":{start:{line:919,column:2},end:{line:921,column:3}},"425":{start:{line:920,column:4},end:{line:920,column:14}},"426":{start:{line:923,column:2},end:{line:929,column:3}},"427":{start:{line:924,column:4},end:{line:926,column:5}},"428":{start:{line:925,column:6},end:{line:925,column:22}},"429":{start:{line:928,column:4},end:{line:928,column:14}},"430":{start:{line:931,column:18},end:{line:931,column:33}},"431":{start:{line:933,column:2},end:{line:935,column:3}},"432":{start:{line:934,column:4},end:{line:934,column:14}},"433":{start:{line:937,column:2},end:{line:937,column:48}},"434":{start:{line:947,column:2},end:{line:949,column:3}},"435":{start:{line:948,column:4},end:{line:948,column:108}},"436":{start:{line:948,column:29},end:{line:948,column:64}},"437":{start:{line:948,column:80},end:{line:948,column:106}},"438":{start:{line:951,column:2},end:{line:953,column:3}},"439":{start:{line:952,column:4},end:{line:952,column:18}},"440":{start:{line:955,column:2},end:{line:961,column:3}},"441":{start:{line:956,column:4},end:{line:958,column:5}},"442":{start:{line:957,column:6},end:{line:957,column:38}},"443":{start:{line:960,column:4},end:{line:960,column:18}},"444":{start:{line:963,column:18},end:{line:963,column:33}},"445":{start:{line:965,column:2},end:{line:967,column:3}},"446":{start:{line:966,column:4},end:{line:966,column:18}},"447":{start:{line:969,column:15},end:{line:969,column:65}},"448":{start:{line:970,column:15},end:{line:970,column:17}},"449":{start:{line:972,column:2},end:{line:978,column:3}},"450":{start:{line:973,column:4},end:{line:977,column:5}},"451":{start:{line:974,column:6},end:{line:974,column:27}},"452":{start:{line:976,column:6},end:{line:976,column:32}},"453":{start:{line:980,column:2},end:{line:980,column:16}},"454":{start:{line:986,column:2},end:{line:988,column:3}},"455":{start:{line:987,column:4},end:{line:987,column:11}},"456":{start:{line:990,column:2},end:{line:998,column:3}},"457":{start:{line:991,column:4},end:{line:997,column:5}},"458":{start:{line:992,column:21},end:{line:992,column:49}},"459":{start:{line:994,column:6},end:{line:996,column:7}},"460":{start:{line:995,column:8},end:{line:995,column:22}},"461":{start:{line:1000,column:2},end:{line:1002,column:3}},"462":{start:{line:1001,column:4},end:{line:1001,column:16}},"463":{start:{line:1004,column:2},end:{line:1010,column:3}},"464":{start:{line:1005,column:19},end:{line:1005,column:55}},"465":{start:{line:1007,column:4},end:{line:1009,column:5}},"466":{start:{line:1008,column:6},end:{line:1008,column:20}},"467":{start:{line:1013,column:0},end:{line:1013,column:27}}},fnMap:{"0":{name:"RestQuery",decl:{start:{line:28,column:9},end:{line:28,column:18}},loc:{start:{line:28,column:119},end:{line:193,column:1}},line:28},"1":{name:"(anonymous_1)",decl:{start:{line:81,column:54},end:{line:81,column:55}},loc:{start:{line:81,column:61},end:{line:84,column:5}},line:81},"2":{name:"(anonymous_2)",decl:{start:{line:84,column:11},end:{line:84,column:12}},loc:{start:{line:84,column:18},end:{line:88,column:5}},line:84},"3":{name:"(anonymous_3)",decl:{start:{line:104,column:58},end:{line:104,column:59}},loc:{start:{line:104,column:65},end:{line:104,column:79}},line:104},"4":{name:"(anonymous_4)",decl:{start:{line:111,column:68},end:{line:111,column:69}},loc:{start:{line:111,column:73},end:{line:111,column:106}},line:111},"5":{name:"(anonymous_5)",decl:{start:{line:136,column:46},end:{line:136,column:47}},loc:{start:{line:136,column:66},end:{line:150,column:9}},line:136},"6":{name:"(anonymous_6)",decl:{start:{line:163,column:39},end:{line:163,column:40}},loc:{start:{line:163,column:55},end:{line:171,column:11}},line:163},"7":{name:"(anonymous_7)",decl:{start:{line:167,column:42},end:{line:167,column:43}},loc:{start:{line:167,column:72},end:{line:170,column:13}},line:167},"8":{name:"(anonymous_8)",decl:{start:{line:172,column:50},end:{line:172,column:51}},loc:{start:{line:172,column:55},end:{line:174,column:11}},line:172},"9":{name:"(anonymous_9)",decl:{start:{line:174,column:18},end:{line:174,column:19}},loc:{start:{line:174,column:28},end:{line:176,column:11}},line:174},"10":{name:"(anonymous_10)",decl:{start:{line:200,column:30},end:{line:200,column:31}},loc:{start:{line:200,column:56},end:{line:218,column:1}},line:200},"11":{name:"(anonymous_11)",decl:{start:{line:201,column:32},end:{line:201,column:33}},loc:{start:{line:201,column:38},end:{line:203,column:3}},line:201},"12":{name:"(anonymous_12)",decl:{start:{line:203,column:10},end:{line:203,column:11}},loc:{start:{line:203,column:16},end:{line:205,column:3}},line:203},"13":{name:"(anonymous_13)",decl:{start:{line:205,column:10},end:{line:205,column:11}},loc:{start:{line:205,column:16},end:{line:207,column:3}},line:205},"14":{name:"(anonymous_14)",decl:{start:{line:207,column:10},end:{line:207,column:11}},loc:{start:{line:207,column:16},end:{line:209,column:3}},line:207},"15":{name:"(anonymous_15)",decl:{start:{line:209,column:10},end:{line:209,column:11}},loc:{start:{line:209,column:16},end:{line:211,column:3}},line:209},"16":{name:"(anonymous_16)",decl:{start:{line:211,column:10},end:{line:211,column:11}},loc:{start:{line:211,column:16},end:{line:213,column:3}},line:211},"17":{name:"(anonymous_17)",decl:{start:{line:213,column:10},end:{line:213,column:11}},loc:{start:{line:213,column:16},end:{line:215,column:3}},line:213},"18":{name:"(anonymous_18)",decl:{start:{line:215,column:10},end:{line:215,column:11}},loc:{start:{line:215,column:16},end:{line:217,column:3}},line:215},"19":{name:"(anonymous_19)",decl:{start:{line:220,column:27},end:{line:220,column:28}},loc:{start:{line:220,column:47},end:{line:249,column:1}},line:220},"20":{name:"(anonymous_20)",decl:{start:{line:233,column:23},end:{line:233,column:24}},loc:{start:{line:233,column:29},end:{line:235,column:3}},line:233},"21":{name:"(anonymous_21)",decl:{start:{line:235,column:5},end:{line:235,column:6}},loc:{start:{line:235,column:17},end:{line:248,column:3}},line:235},"22":{name:"(anonymous_22)",decl:{start:{line:251,column:37},end:{line:251,column:38}},loc:{start:{line:251,column:49},end:{line:269,column:1}},line:251},"23":{name:"(anonymous_23)",decl:{start:{line:252,column:32},end:{line:252,column:33}},loc:{start:{line:252,column:38},end:{line:254,column:3}},line:252},"24":{name:"(anonymous_24)",decl:{start:{line:254,column:10},end:{line:254,column:11}},loc:{start:{line:254,column:16},end:{line:256,column:3}},line:254},"25":{name:"(anonymous_25)",decl:{start:{line:256,column:10},end:{line:256,column:11}},loc:{start:{line:256,column:16},end:{line:258,column:3}},line:256},"26":{name:"(anonymous_26)",decl:{start:{line:258,column:10},end:{line:258,column:11}},loc:{start:{line:258,column:16},end:{line:260,column:3}},line:258},"27":{name:"(anonymous_27)",decl:{start:{line:260,column:10},end:{line:260,column:11}},loc:{start:{line:260,column:16},end:{line:262,column:3}},line:260},"28":{name:"(anonymous_28)",decl:{start:{line:262,column:10},end:{line:262,column:11}},loc:{start:{line:262,column:16},end:{line:264,column:3}},line:262},"29":{name:"(anonymous_29)",decl:{start:{line:264,column:10},end:{line:264,column:11}},loc:{start:{line:264,column:16},end:{line:266,column:3}},line:264},"30":{name:"(anonymous_30)",decl:{start:{line:266,column:10},end:{line:266,column:11}},loc:{start:{line:266,column:16},end:{line:268,column:3}},line:266},"31":{name:"(anonymous_31)",decl:{start:{line:272,column:40},end:{line:272,column:41}},loc:{start:{line:272,column:52},end:{line:287,column:1}},line:272},"32":{name:"(anonymous_32)",decl:{start:{line:280,column:41},end:{line:280,column:42}},loc:{start:{line:280,column:50},end:{line:283,column:5}},line:280},"33":{name:"(anonymous_33)",decl:{start:{line:291,column:46},end:{line:291,column:47}},loc:{start:{line:291,column:58},end:{line:301,column:1}},line:291},"34":{name:"(anonymous_34)",decl:{start:{line:297,column:93},end:{line:297,column:94}},loc:{start:{line:297,column:109},end:{line:300,column:3}},line:297},"35":{name:"(anonymous_35)",decl:{start:{line:304,column:50},end:{line:304,column:51}},loc:{start:{line:304,column:62},end:{line:314,column:1}},line:304},"36":{name:"(anonymous_36)",decl:{start:{line:306,column:50},end:{line:306,column:51}},loc:{start:{line:306,column:70},end:{line:306,column:111}},line:306},"37":{name:"(anonymous_37)",decl:{start:{line:306,column:118},end:{line:306,column:119}},loc:{start:{line:306,column:130},end:{line:310,column:5}},line:306},"38":{name:"transformInQuery",decl:{start:{line:316,column:9},end:{line:316,column:25}},loc:{start:{line:316,column:61},end:{line:334,column:1}},line:316},"39":{name:"(anonymous_39)",decl:{start:{line:340,column:37},end:{line:340,column:38}},loc:{start:{line:340,column:49},end:{line:371,column:1}},line:340},"40":{name:"(anonymous_40)",decl:{start:{line:366,column:33},end:{line:366,column:34}},loc:{start:{line:366,column:45},end:{line:370,column:3}},line:366},"41":{name:"transformNotInQuery",decl:{start:{line:373,column:9},end:{line:373,column:28}},loc:{start:{line:373,column:67},end:{line:391,column:1}},line:373},"42":{name:"(anonymous_42)",decl:{start:{line:397,column:40},end:{line:397,column:41}},loc:{start:{line:397,column:52},end:{line:428,column:1}},line:397},"43":{name:"(anonymous_43)",decl:{start:{line:423,column:33},end:{line:423,column:34}},loc:{start:{line:423,column:45},end:{line:427,column:3}},line:423},"44":{name:"(anonymous_44)",decl:{start:{line:431,column:32},end:{line:431,column:33}},loc:{start:{line:431,column:57},end:{line:437,column:1}},line:431},"45":{name:"(anonymous_45)",decl:{start:{line:439,column:24},end:{line:439,column:25}},loc:{start:{line:439,column:56},end:{line:453,column:1}},line:439},"46":{name:"(anonymous_46)",decl:{start:{line:460,column:36},end:{line:460,column:37}},loc:{start:{line:460,column:48},end:{line:491,column:1}},line:460},"47":{name:"(anonymous_47)",decl:{start:{line:486,column:33},end:{line:486,column:34}},loc:{start:{line:486,column:45},end:{line:490,column:3}},line:486},"48":{name:"(anonymous_48)",decl:{start:{line:493,column:28},end:{line:493,column:29}},loc:{start:{line:493,column:64},end:{line:507,column:1}},line:493},"49":{name:"(anonymous_49)",decl:{start:{line:514,column:40},end:{line:514,column:41}},loc:{start:{line:514,column:52},end:{line:545,column:1}},line:514},"50":{name:"(anonymous_50)",decl:{start:{line:540,column:33},end:{line:540,column:34}},loc:{start:{line:540,column:45},end:{line:544,column:3}},line:540},"51":{name:"(anonymous_51)",decl:{start:{line:547,column:28},end:{line:547,column:29}},loc:{start:{line:547,column:46},end:{line:561,column:1}},line:547},"52":{name:"(anonymous_52)",decl:{start:{line:551,column:41},end:{line:551,column:42}},loc:{start:{line:551,column:53},end:{line:555,column:5}},line:551},"53":{name:"(anonymous_53)",decl:{start:{line:563,column:34},end:{line:563,column:35}},loc:{start:{line:563,column:48},end:{line:589,column:1}},line:563},"54":{name:"(anonymous_54)",decl:{start:{line:583,column:39},end:{line:583,column:40}},loc:{start:{line:583,column:46},end:{line:585,column:5}},line:583},"55":{name:"(anonymous_55)",decl:{start:{line:591,column:38},end:{line:591,column:39}},loc:{start:{line:591,column:50},end:{line:599,column:1}},line:591},"56":{name:"(anonymous_56)",decl:{start:{line:603,column:30},end:{line:603,column:31}},loc:{start:{line:603,column:54},end:{line:642,column:1}},line:603},"57":{name:"(anonymous_57)",decl:{start:{line:614,column:37},end:{line:614,column:38}},loc:{start:{line:614,column:44},end:{line:616,column:5}},line:614},"58":{name:"(anonymous_58)",decl:{start:{line:623,column:96},end:{line:623,column:97}},loc:{start:{line:623,column:107},end:{line:641,column:3}},line:623},"59":{name:"(anonymous_59)",decl:{start:{line:646,column:31},end:{line:646,column:32}},loc:{start:{line:646,column:43},end:{line:657,column:1}},line:646},"60":{name:"(anonymous_60)",decl:{start:{line:654,column:90},end:{line:654,column:91}},loc:{start:{line:654,column:95},end:{line:656,column:3}},line:654},"61":{name:"(anonymous_61)",decl:{start:{line:660,column:39},end:{line:660,column:40}},loc:{start:{line:660,column:51},end:{line:683,column:1}},line:660},"62":{name:"(anonymous_62)",decl:{start:{line:665,column:48},end:{line:665,column:49}},loc:{start:{line:665,column:68},end:{line:665,column:113}},line:665},"63":{name:"(anonymous_63)",decl:{start:{line:665,column:120},end:{line:665,column:121}},loc:{start:{line:665,column:130},end:{line:682,column:3}},line:665},"64":{name:"(anonymous_64)",decl:{start:{line:686,column:40},end:{line:686,column:41}},loc:{start:{line:686,column:52},end:{line:700,column:1}},line:686},"65":{name:"(anonymous_65)",decl:{start:{line:692,column:33},end:{line:692,column:34}},loc:{start:{line:692,column:38},end:{line:692,column:67}},line:692},"66":{name:"(anonymous_66)",decl:{start:{line:696,column:48},end:{line:696,column:49}},loc:{start:{line:696,column:68},end:{line:696,column:113}},line:696},"67":{name:"(anonymous_67)",decl:{start:{line:696,column:120},end:{line:696,column:121}},loc:{start:{line:696,column:130},end:{line:699,column:3}},line:696},"68":{name:"(anonymous_68)",decl:{start:{line:698,column:30},end:{line:698,column:31}},loc:{start:{line:698,column:35},end:{line:698,column:64}},line:698},"69":{name:"(anonymous_69)",decl:{start:{line:703,column:36},end:{line:703,column:37}},loc:{start:{line:703,column:48},end:{line:722,column:1}},line:703},"70":{name:"(anonymous_70)",decl:{start:{line:711,column:29},end:{line:711,column:30}},loc:{start:{line:711,column:44},end:{line:715,column:5}},line:711},"71":{name:"(anonymous_71)",decl:{start:{line:725,column:42},end:{line:725,column:43}},loc:{start:{line:725,column:54},end:{line:766,column:1}},line:725},"72":{name:"(anonymous_72)",decl:{start:{line:751,column:163},end:{line:751,column:164}},loc:{start:{line:751,column:174},end:{line:765,column:3}},line:751},"73":{name:"(anonymous_73)",decl:{start:{line:754,column:42},end:{line:754,column:43}},loc:{start:{line:754,column:52},end:{line:761,column:7}},line:754},"74":{name:"includePath",decl:{start:{line:771,column:9},end:{line:771,column:20}},loc:{start:{line:771,column:69},end:{line:901,column:1}},line:771},"75":{name:"(anonymous_75)",decl:{start:{line:797,column:43},end:{line:797,column:44}},loc:{start:{line:797,column:57},end:{line:812,column:5}},line:797},"76":{name:"(anonymous_76)",decl:{start:{line:821,column:57},end:{line:821,column:58}},loc:{start:{line:821,column:71},end:{line:836,column:5}},line:821},"77":{name:"(anonymous_77)",decl:{start:{line:850,column:54},end:{line:850,column:55}},loc:{start:{line:850,column:67},end:{line:873,column:3}},line:850},"78":{name:"(anonymous_78)",decl:{start:{line:869,column:12},end:{line:869,column:13}},loc:{start:{line:869,column:23},end:{line:872,column:5}},line:869},"79":{name:"(anonymous_79)",decl:{start:{line:875,column:41},end:{line:875,column:42}},loc:{start:{line:875,column:54},end:{line:900,column:3}},line:875},"80":{name:"(anonymous_80)",decl:{start:{line:876,column:35},end:{line:876,column:36}},loc:{start:{line:876,column:65},end:{line:890,column:5}},line:876},"81":{name:"findPointers",decl:{start:{line:908,column:9},end:{line:908,column:21}},loc:{start:{line:908,column:36},end:{line:938,column:1}},line:908},"82":{name:"replacePointers",decl:{start:{line:946,column:9},end:{line:946,column:24}},loc:{start:{line:946,column:48},end:{line:981,column:1}},line:946},"83":{name:"(anonymous_83)",decl:{start:{line:948,column:22},end:{line:948,column:23}},loc:{start:{line:948,column:29},end:{line:948,column:64}},line:948},"84":{name:"(anonymous_84)",decl:{start:{line:948,column:73},end:{line:948,column:74}},loc:{start:{line:948,column:80},end:{line:948,column:106}},line:948},"85":{name:"findObjectWithKey",decl:{start:{line:985,column:9},end:{line:985,column:26}},loc:{start:{line:985,column:38},end:{line:1011,column:1}},line:985}},branchMap:{"0":{loc:{start:{line:28,column:44},end:{line:28,column:58}},type:"default-arg",locations:[{start:{line:28,column:56},end:{line:28,column:58}}],line:28},"1":{loc:{start:{line:28,column:60},end:{line:28,column:76}},type:"default-arg",locations:[{start:{line:28,column:74},end:{line:28,column:76}}],line:28},"2":{loc:{start:{line:28,column:89},end:{line:28,column:108}},type:"default-arg",locations:[{start:{line:28,column:104},end:{line:28,column:108}}],line:28},"3":{loc:{start:{line:38,column:17},end:{line:38,column:30}},type:"binary-expr",locations:[{start:{line:38,column:17},end:{line:38,column:24}},{start:{line:38,column:28},end:{line:38,column:30}}],line:38},"4":{loc:{start:{line:40,column:2},end:{line:56,column:3}},type:"if",locations:[{start:{line:40,column:2},end:{line:56,column:3}},{start:{line:40,column:2},end:{line:56,column:3}}],line:40},"5":{loc:{start:{line:41,column:4},end:{line:55,column:5}},type:"if",locations:[{start:{line:41,column:4},end:{line:55,column:5}},{start:{line:41,column:4},end:{line:55,column:5}}],line:41},"6":{loc:{start:{line:42,column:6},end:{line:44,column:7}},type:"if",locations:[{start:{line:42,column:6},end:{line:44,column:7}},{start:{line:42,column:6},end:{line:44,column:7}}],line:42},"7":{loc:{start:{line:70,column:2},end:{line:72,column:3}},type:"if",locations:[{start:{line:70,column:2},end:{line:72,column:3}},{start:{line:70,column:2},end:{line:72,column:3}}],line:70},"8":{loc:{start:{line:76,column:2},end:{line:78,column:3}},type:"if",locations:[{start:{line:76,column:2},end:{line:78,column:3}},{start:{line:76,column:2},end:{line:78,column:3}}],line:76},"9":{loc:{start:{line:80,column:2},end:{line:98,column:3}},type:"if",locations:[{start:{line:80,column:2},end:{line:98,column:3}},{start:{line:80,column:2},end:{line:98,column:3}}],line:80},"10":{loc:{start:{line:91,column:4},end:{line:97,column:5}},type:"if",locations:[{start:{line:91,column:4},end:{line:97,column:5}},{start:{line:91,column:4},end:{line:97,column:5}}],line:91},"11":{loc:{start:{line:92,column:6},end:{line:96,column:7}},type:"if",locations:[{start:{line:92,column:6},end:{line:96,column:7}},{start:{line:92,column:6},end:{line:96,column:7}}],line:92},"12":{loc:{start:{line:92,column:10},end:{line:92,column:65}},type:"binary-expr",locations:[{start:{line:92,column:10},end:{line:92,column:30}},{start:{line:92,column:34},end:{line:92,column:65}}],line:92},"13":{loc:{start:{line:101,column:4},end:{line:191,column:5}},type:"switch",locations:[{start:{line:102,column:6},end:{line:107,column:9}},{start:{line:109,column:6},end:{line:114,column:9}},{start:{line:116,column:6},end:{line:118,column:14}},{start:{line:120,column:6},end:{line:122,column:14}},{start:{line:124,column:6},end:{line:124,column:21}},{start:{line:125,column:6},end:{line:125,column:18}},{start:{line:126,column:6},end:{line:126,column:22}},{start:{line:127,column:6},end:{line:127,column:22}},{start:{line:128,column:6},end:{line:128,column:18}},{start:{line:129,column:6},end:{line:129,column:19}},{start:{line:130,column:6},end:{line:132,column:14}},{start:{line:134,column:6},end:{line:151,column:14}},{start:{line:153,column:6},end:{line:178,column:9}},{start:{line:180,column:6},end:{line:183,column:14}},{start:{line:185,column:6},end:{line:185,column:35}},{start:{line:186,column:6},end:{line:187,column:14}},{start:{line:189,column:6},end:{line:190,column:81}}],line:101},"14":{loc:{start:{line:139,column:10},end:{line:147,column:11}},type:"if",locations:[{start:{line:139,column:10},end:{line:147,column:11}},{start:{line:139,column:10},end:{line:147,column:11}}],line:139},"15":{loc:{start:{line:139,column:14},end:{line:139,column:55}},type:"binary-expr",locations:[{start:{line:139,column:14},end:{line:139,column:32}},{start:{line:139,column:36},end:{line:139,column:55}}],line:139},"16":{loc:{start:{line:143,column:17},end:{line:147,column:11}},type:"if",locations:[{start:{line:143,column:17},end:{line:147,column:11}},{start:{line:143,column:17},end:{line:147,column:11}}],line:143},"17":{loc:{start:{line:157,column:10},end:{line:160,column:11}},type:"if",locations:[{start:{line:157,column:10},end:{line:160,column:11}},{start:{line:157,column:10},end:{line:160,column:11}}],line:157},"18":{loc:{start:{line:230,column:22},end:{line:230,column:46}},type:"binary-expr",locations:[{start:{line:230,column:22},end:{line:230,column:39}},{start:{line:230,column:43},end:{line:230,column:46}}],line:230},"19":{loc:{start:{line:243,column:4},end:{line:247,column:5}},type:"if",locations:[{start:{line:243,column:4},end:{line:247,column:5}},{start:{line:243,column:4},end:{line:247,column:5}}],line:243},"20":{loc:{start:{line:273,column:2},end:{line:275,column:3}},type:"if",locations:[{start:{line:273,column:2},end:{line:275,column:3}},{start:{line:273,column:2},end:{line:275,column:3}}],line:273},"21":{loc:{start:{line:279,column:2},end:{line:286,column:3}},type:"if",locations:[{start:{line:279,column:2},end:{line:286,column:3}},{start:{line:279,column:2},end:{line:286,column:3}}],line:279},"22":{loc:{start:{line:292,column:2},end:{line:294,column:3}},type:"if",locations:[{start:{line:292,column:2},end:{line:294,column:3}},{start:{line:292,column:2},end:{line:294,column:3}}],line:292},"23":{loc:{start:{line:305,column:2},end:{line:313,column:3}},type:"if",locations:[{start:{line:305,column:2},end:{line:313,column:3}},{start:{line:305,column:2},end:{line:313,column:3}}],line:305},"24":{loc:{start:{line:305,column:6},end:{line:305,column:140}},type:"binary-expr",locations:[{start:{line:305,column:6},end:{line:305,column:52}},{start:{line:305,column:56},end:{line:305,column:75}},{start:{line:305,column:79},end:{line:305,column:140}}],line:305},"25":{loc:{start:{line:307,column:6},end:{line:309,column:7}},type:"if",locations:[{start:{line:307,column:6},end:{line:309,column:7}},{start:{line:307,column:6},end:{line:309,column:7}}],line:307},"26":{loc:{start:{line:329,column:2},end:{line:333,column:3}},type:"if",locations:[{start:{line:329,column:2},end:{line:333,column:3}},{start:{line:329,column:2},end:{line:333,column:3}}],line:329},"27":{loc:{start:{line:343,column:2},end:{line:345,column:3}},type:"if",locations:[{start:{line:343,column:2},end:{line:345,column:3}},{start:{line:343,column:2},end:{line:345,column:3}}],line:343},"28":{loc:{start:{line:350,column:2},end:{line:352,column:3}},type:"if",locations:[{start:{line:350,column:2},end:{line:352,column:3}},{start:{line:350,column:2},end:{line:352,column:3}}],line:350},"29":{loc:{start:{line:350,column:6},end:{line:350,column:52}},type:"binary-expr",locations:[{start:{line:350,column:6},end:{line:350,column:25}},{start:{line:350,column:29},end:{line:350,column:52}}],line:350},"30":{loc:{start:{line:358,column:2},end:{line:363,column:3}},type:"if",locations:[{start:{line:358,column:2},end:{line:363,column:3}},{start:{line:358,column:2},end:{line:363,column:3}}],line:358},"31":{loc:{start:{line:361,column:9},end:{line:363,column:3}},type:"if",locations:[{start:{line:361,column:9},end:{line:363,column:3}},{start:{line:361,column:9},end:{line:363,column:3}}],line:361},"32":{loc:{start:{line:386,column:2},end:{line:390,column:3}},type:"if",locations:[{start:{line:386,column:2},end:{line:390,column:3}},{start:{line:386,column:2},end:{line:390,column:3}}],line:386},"33":{loc:{start:{line:400,column:2},end:{line:402,column:3}},type:"if",locations:[{start:{line:400,column:2},end:{line:402,column:3}},{start:{line:400,column:2},end:{line:402,column:3}}],line:400},"34":{loc:{start:{line:407,column:2},end:{line:409,column:3}},type:"if",locations:[{start:{line:407,column:2},end:{line:409,column:3}},{start:{line:407,column:2},end:{line:409,column:3}}],line:407},"35":{loc:{start:{line:407,column:6},end:{line:407,column:58}},type:"binary-expr",locations:[{start:{line:407,column:6},end:{line:407,column:28}},{start:{line:407,column:32},end:{line:407,column:58}}],line:407},"36":{loc:{start:{line:415,column:2},end:{line:420,column:3}},type:"if",locations:[{start:{line:415,column:2},end:{line:420,column:3}},{start:{line:415,column:2},end:{line:420,column:3}}],line:415},"37":{loc:{start:{line:418,column:9},end:{line:420,column:3}},type:"if",locations:[{start:{line:418,column:9},end:{line:420,column:3}},{start:{line:418,column:9},end:{line:420,column:3}}],line:418},"38":{loc:{start:{line:432,column:2},end:{line:434,column:3}},type:"if",locations:[{start:{line:432,column:2},end:{line:434,column:3}},{start:{line:432,column:2},end:{line:434,column:3}}],line:432},"39":{loc:{start:{line:448,column:2},end:{line:452,column:3}},type:"if",locations:[{start:{line:448,column:2},end:{line:452,column:3}},{start:{line:448,column:2},end:{line:452,column:3}}],line:448},"40":{loc:{start:{line:463,column:2},end:{line:465,column:3}},type:"if",locations:[{start:{line:463,column:2},end:{line:465,column:3}},{start:{line:463,column:2},end:{line:465,column:3}}],line:463},"41":{loc:{start:{line:470,column:2},end:{line:472,column:3}},type:"if",locations:[{start:{line:470,column:2},end:{line:472,column:3}},{start:{line:470,column:2},end:{line:472,column:3}}],line:470},"42":{loc:{start:{line:470,column:6},end:{line:470,column:158}},type:"binary-expr",locations:[{start:{line:470,column:6},end:{line:470,column:24}},{start:{line:470,column:28},end:{line:470,column:44}},{start:{line:470,column:48},end:{line:470,column:85}},{start:{line:470,column:89},end:{line:470,column:117}},{start:{line:470,column:121},end:{line:470,column:158}}],line:470},"43":{loc:{start:{line:478,column:2},end:{line:483,column:3}},type:"if",locations:[{start:{line:478,column:2},end:{line:483,column:3}},{start:{line:478,column:2},end:{line:483,column:3}}],line:478},"44":{loc:{start:{line:481,column:9},end:{line:483,column:3}},type:"if",locations:[{start:{line:481,column:9},end:{line:483,column:3}},{start:{line:481,column:9},end:{line:483,column:3}}],line:481},"45":{loc:{start:{line:502,column:2},end:{line:506,column:3}},type:"if",locations:[{start:{line:502,column:2},end:{line:506,column:3}},{start:{line:502,column:2},end:{line:506,column:3}}],line:502},"46":{loc:{start:{line:517,column:2},end:{line:519,column:3}},type:"if",locations:[{start:{line:517,column:2},end:{line:519,column:3}},{start:{line:517,column:2},end:{line:519,column:3}}],line:517},"47":{loc:{start:{line:524,column:2},end:{line:526,column:3}},type:"if",locations:[{start:{line:524,column:2},end:{line:526,column:3}},{start:{line:524,column:2},end:{line:526,column:3}}],line:524},"48":{loc:{start:{line:524,column:6},end:{line:524,column:178}},type:"binary-expr",locations:[{start:{line:524,column:6},end:{line:524,column:28}},{start:{line:524,column:32},end:{line:524,column:52}},{start:{line:524,column:56},end:{line:524,column:97}},{start:{line:524,column:101},end:{line:524,column:133}},{start:{line:524,column:137},end:{line:524,column:178}}],line:524},"49":{loc:{start:{line:532,column:2},end:{line:537,column:3}},type:"if",locations:[{start:{line:532,column:2},end:{line:537,column:3}},{start:{line:532,column:2},end:{line:537,column:3}}],line:532},"50":{loc:{start:{line:535,column:9},end:{line:537,column:3}},type:"if",locations:[{start:{line:535,column:9},end:{line:537,column:3}},{start:{line:535,column:9},end:{line:537,column:3}}],line:535},"51":{loc:{start:{line:550,column:2},end:{line:560,column:3}},type:"if",locations:[{start:{line:550,column:2},end:{line:560,column:3}},{start:{line:550,column:2},end:{line:560,column:3}}],line:550},"52":{loc:{start:{line:552,column:6},end:{line:554,column:7}},type:"if",locations:[{start:{line:552,column:6},end:{line:554,column:7}},{start:{line:552,column:6},end:{line:554,column:7}}],line:552},"53":{loc:{start:{line:557,column:4},end:{line:559,column:5}},type:"if",locations:[{start:{line:557,column:4},end:{line:559,column:5}},{start:{line:557,column:4},end:{line:559,column:5}}],line:557},"54":{loc:{start:{line:564,column:2},end:{line:566,column:3}},type:"if",locations:[{start:{line:564,column:2},end:{line:566,column:3}},{start:{line:564,column:2},end:{line:566,column:3}}],line:564},"55":{loc:{start:{line:573,column:4},end:{line:578,column:5}},type:"if",locations:[{start:{line:573,column:4},end:{line:578,column:5}},{start:{line:573,column:4},end:{line:578,column:5}}],line:573},"56":{loc:{start:{line:581,column:2},end:{line:586,column:3}},type:"if",locations:[{start:{line:581,column:2},end:{line:586,column:3}},{start:{line:581,column:2},end:{line:586,column:3}}],line:581},"57":{loc:{start:{line:581,column:6},end:{line:581,column:50}},type:"binary-expr",locations:[{start:{line:581,column:6},end:{line:581,column:25}},{start:{line:581,column:29},end:{line:581,column:50}}],line:581},"58":{loc:{start:{line:592,column:2},end:{line:594,column:3}},type:"if",locations:[{start:{line:592,column:2},end:{line:594,column:3}},{start:{line:592,column:2},end:{line:594,column:3}}],line:592},"59":{loc:{start:{line:603,column:40},end:{line:603,column:52}},type:"default-arg",locations:[{start:{line:603,column:50},end:{line:603,column:52}}],line:603},"60":{loc:{start:{line:604,column:2},end:{line:609,column:3}},type:"if",locations:[{start:{line:604,column:2},end:{line:609,column:3}},{start:{line:604,column:2},end:{line:609,column:3}}],line:604},"61":{loc:{start:{line:613,column:2},end:{line:617,column:3}},type:"if",locations:[{start:{line:613,column:2},end:{line:617,column:3}},{start:{line:613,column:2},end:{line:617,column:3}}],line:613},"62":{loc:{start:{line:619,column:2},end:{line:621,column:3}},type:"if",locations:[{start:{line:619,column:2},end:{line:621,column:3}},{start:{line:619,column:2},end:{line:621,column:3}}],line:619},"63":{loc:{start:{line:624,column:4},end:{line:628,column:5}},type:"if",locations:[{start:{line:624,column:4},end:{line:628,column:5}},{start:{line:624,column:4},end:{line:628,column:5}}],line:624},"64":{loc:{start:{line:624,column:8},end:{line:624,column:58}},type:"binary-expr",locations:[{start:{line:624,column:8},end:{line:624,column:34}},{start:{line:624,column:38},end:{line:624,column:58}}],line:624},"65":{loc:{start:{line:632,column:4},end:{line:636,column:5}},type:"if",locations:[{start:{line:632,column:4},end:{line:636,column:5}},{start:{line:632,column:4},end:{line:636,column:5}}],line:632},"66":{loc:{start:{line:647,column:2},end:{line:649,column:3}},type:"if",locations:[{start:{line:647,column:2},end:{line:649,column:3}},{start:{line:647,column:2},end:{line:649,column:3}}],line:647},"67":{loc:{start:{line:661,column:2},end:{line:663,column:3}},type:"if",locations:[{start:{line:661,column:2},end:{line:663,column:3}},{start:{line:661,column:2},end:{line:663,column:3}}],line:661},"68":{loc:{start:{line:670,column:6},end:{line:673,column:7}},type:"if",locations:[{start:{line:670,column:6},end:{line:673,column:7}},{start:{line:670,column:6},end:{line:673,column:7}}],line:670},"69":{loc:{start:{line:670,column:10},end:{line:670,column:148}},type:"binary-expr",locations:[{start:{line:670,column:10},end:{line:670,column:35}},{start:{line:670,column:39},end:{line:670,column:78}},{start:{line:670,column:82},end:{line:670,column:107}},{start:{line:670,column:111},end:{line:670,column:148}}],line:670},"70":{loc:{start:{line:679,column:4},end:{line:681,column:5}},type:"if",locations:[{start:{line:679,column:4},end:{line:681,column:5}},{start:{line:679,column:4},end:{line:681,column:5}}],line:679},"71":{loc:{start:{line:687,column:2},end:{line:689,column:3}},type:"if",locations:[{start:{line:687,column:2},end:{line:689,column:3}},{start:{line:687,column:2},end:{line:689,column:3}}],line:687},"72":{loc:{start:{line:691,column:2},end:{line:694,column:3}},type:"if",locations:[{start:{line:691,column:2},end:{line:694,column:3}},{start:{line:691,column:2},end:{line:694,column:3}}],line:691},"73":{loc:{start:{line:704,column:2},end:{line:706,column:3}},type:"if",locations:[{start:{line:704,column:2},end:{line:706,column:3}},{start:{line:704,column:2},end:{line:706,column:3}}],line:704},"74":{loc:{start:{line:710,column:2},end:{line:719,column:3}},type:"if",locations:[{start:{line:710,column:2},end:{line:719,column:3}},{start:{line:710,column:2},end:{line:719,column:3}}],line:710},"75":{loc:{start:{line:716,column:9},end:{line:719,column:3}},type:"if",locations:[{start:{line:716,column:9},end:{line:719,column:3}},{start:{line:716,column:9},end:{line:719,column:3}}],line:716},"76":{loc:{start:{line:726,column:2},end:{line:728,column:3}},type:"if",locations:[{start:{line:726,column:2},end:{line:728,column:3}},{start:{line:726,column:2},end:{line:728,column:3}}],line:726},"77":{loc:{start:{line:730,column:2},end:{line:732,column:3}},type:"if",locations:[{start:{line:730,column:2},end:{line:732,column:3}},{start:{line:730,column:2},end:{line:732,column:3}}],line:730},"78":{loc:{start:{line:737,column:2},end:{line:739,column:3}},type:"if",locations:[{start:{line:737,column:2},end:{line:739,column:3}},{start:{line:737,column:2},end:{line:739,column:3}}],line:737},"79":{loc:{start:{line:742,column:2},end:{line:744,column:3}},type:"if",locations:[{start:{line:742,column:2},end:{line:744,column:3}},{start:{line:742,column:2},end:{line:744,column:3}}],line:742},"80":{loc:{start:{line:742,column:6},end:{line:742,column:60}},type:"binary-expr",locations:[{start:{line:742,column:6},end:{line:742,column:31}},{start:{line:742,column:35},end:{line:742,column:60}}],line:742},"81":{loc:{start:{line:753,column:4},end:{line:764,column:5}},type:"if",locations:[{start:{line:753,column:4},end:{line:764,column:5}},{start:{line:753,column:4},end:{line:764,column:5}}],line:753},"82":{loc:{start:{line:755,column:8},end:{line:757,column:9}},type:"if",locations:[{start:{line:755,column:8},end:{line:757,column:9}},{start:{line:755,column:8},end:{line:757,column:9}}],line:755},"83":{loc:{start:{line:771,column:51},end:{line:771,column:67}},type:"default-arg",locations:[{start:{line:771,column:65},end:{line:771,column:67}}],line:771},"84":{loc:{start:{line:774,column:2},end:{line:776,column:3}},type:"if",locations:[{start:{line:774,column:2},end:{line:776,column:3}},{start:{line:774,column:2},end:{line:776,column:3}}],line:774},"85":{loc:{start:{line:781,column:4},end:{line:783,column:5}},type:"if",locations:[{start:{line:781,column:4},end:{line:783,column:5}},{start:{line:781,column:4},end:{line:783,column:5}}],line:781},"86":{loc:{start:{line:787,column:4},end:{line:790,column:5}},type:"if",locations:[{start:{line:787,column:4},end:{line:790,column:5}},{start:{line:787,column:4},end:{line:790,column:5}}],line:787},"87":{loc:{start:{line:788,column:32},end:{line:788,column:68}},type:"binary-expr",locations:[{start:{line:788,column:32},end:{line:788,column:55}},{start:{line:788,column:59},end:{line:788,column:68}}],line:788},"88":{loc:{start:{line:795,column:2},end:{line:817,column:3}},type:"if",locations:[{start:{line:795,column:2},end:{line:817,column:3}},{start:{line:795,column:2},end:{line:817,column:3}}],line:795},"89":{loc:{start:{line:802,column:8},end:{line:804,column:9}},type:"if",locations:[{start:{line:802,column:8},end:{line:804,column:9}},{start:{line:802,column:8},end:{line:804,column:9}}],line:802},"90":{loc:{start:{line:807,column:6},end:{line:809,column:7}},type:"if",locations:[{start:{line:807,column:6},end:{line:809,column:7}},{start:{line:807,column:6},end:{line:809,column:7}}],line:807},"91":{loc:{start:{line:814,column:4},end:{line:816,column:5}},type:"if",locations:[{start:{line:814,column:4},end:{line:816,column:5}},{start:{line:814,column:4},end:{line:816,column:5}}],line:814},"92":{loc:{start:{line:819,column:2},end:{line:841,column:3}},type:"if",locations:[{start:{line:819,column:2},end:{line:841,column:3}},{start:{line:819,column:2},end:{line:841,column:3}}],line:819},"93":{loc:{start:{line:826,column:8},end:{line:828,column:9}},type:"if",locations:[{start:{line:826,column:8},end:{line:828,column:9}},{start:{line:826,column:8},end:{line:828,column:9}}],line:826},"94":{loc:{start:{line:831,column:6},end:{line:833,column:7}},type:"if",locations:[{start:{line:831,column:6},end:{line:833,column:7}},{start:{line:831,column:6},end:{line:833,column:7}}],line:831},"95":{loc:{start:{line:838,column:4},end:{line:840,column:5}},type:"if",locations:[{start:{line:838,column:4},end:{line:840,column:5}},{start:{line:838,column:4},end:{line:840,column:5}}],line:838},"96":{loc:{start:{line:843,column:2},end:{line:848,column:3}},type:"if",locations:[{start:{line:843,column:2},end:{line:848,column:3}},{start:{line:843,column:2},end:{line:848,column:3}}],line:843},"97":{loc:{start:{line:846,column:9},end:{line:848,column:3}},type:"if",locations:[{start:{line:846,column:9},end:{line:848,column:3}},{start:{line:846,column:9},end:{line:848,column:3}}],line:846},"98":{loc:{start:{line:854,column:4},end:{line:864,column:5}},type:"if",locations:[{start:{line:854,column:4},end:{line:864,column:5}},{start:{line:854,column:4},end:{line:864,column:5}}],line:854},"99":{loc:{start:{line:881,column:8},end:{line:884,column:9}},type:"if",locations:[{start:{line:881,column:8},end:{line:884,column:9}},{start:{line:881,column:8},end:{line:884,column:9}}],line:881},"100":{loc:{start:{line:881,column:12},end:{line:881,column:54}},type:"binary-expr",locations:[{start:{line:881,column:12},end:{line:881,column:36}},{start:{line:881,column:40},end:{line:881,column:54}}],line:881},"101":{loc:{start:{line:895,column:4},end:{line:897,column:5}},type:"if",locations:[{start:{line:895,column:4},end:{line:897,column:5}},{start:{line:895,column:4},end:{line:897,column:5}}],line:895},"102":{loc:{start:{line:909,column:2},end:{line:917,column:3}},type:"if",locations:[{start:{line:909,column:2},end:{line:917,column:3}},{start:{line:909,column:2},end:{line:917,column:3}}],line:909},"103":{loc:{start:{line:919,column:2},end:{line:921,column:3}},type:"if",locations:[{start:{line:919,column:2},end:{line:921,column:3}},{start:{line:919,column:2},end:{line:921,column:3}}],line:919},"104":{loc:{start:{line:919,column:6},end:{line:919,column:43}},type:"binary-expr",locations:[{start:{line:919,column:6},end:{line:919,column:32}},{start:{line:919,column:36},end:{line:919,column:43}}],line:919},"105":{loc:{start:{line:923,column:2},end:{line:929,column:3}},type:"if",locations:[{start:{line:923,column:2},end:{line:929,column:3}},{start:{line:923,column:2},end:{line:929,column:3}}],line:923},"106":{loc:{start:{line:924,column:4},end:{line:926,column:5}},type:"if",locations:[{start:{line:924,column:4},end:{line:926,column:5}},{start:{line:924,column:4},end:{line:926,column:5}}],line:924},"107":{loc:{start:{line:924,column:8},end:{line:924,column:53}},type:"binary-expr",locations:[{start:{line:924,column:8},end:{line:924,column:23}},{start:{line:924,column:27},end:{line:924,column:53}}],line:924},"108":{loc:{start:{line:933,column:2},end:{line:935,column:3}},type:"if",locations:[{start:{line:933,column:2},end:{line:935,column:3}},{start:{line:933,column:2},end:{line:935,column:3}}],line:933},"109":{loc:{start:{line:947,column:2},end:{line:949,column:3}},type:"if",locations:[{start:{line:947,column:2},end:{line:949,column:3}},{start:{line:947,column:2},end:{line:949,column:3}}],line:947},"110":{loc:{start:{line:951,column:2},end:{line:953,column:3}},type:"if",locations:[{start:{line:951,column:2},end:{line:953,column:3}},{start:{line:951,column:2},end:{line:953,column:3}}],line:951},"111":{loc:{start:{line:951,column:6},end:{line:951,column:43}},type:"binary-expr",locations:[{start:{line:951,column:6},end:{line:951,column:32}},{start:{line:951,column:36},end:{line:951,column:43}}],line:951},"112":{loc:{start:{line:955,column:2},end:{line:961,column:3}},type:"if",locations:[{start:{line:955,column:2},end:{line:961,column:3}},{start:{line:955,column:2},end:{line:961,column:3}}],line:955},"113":{loc:{start:{line:956,column:4},end:{line:958,column:5}},type:"if",locations:[{start:{line:956,column:4},end:{line:958,column:5}},{start:{line:956,column:4},end:{line:958,column:5}}],line:956},"114":{loc:{start:{line:956,column:8},end:{line:956,column:45}},type:"binary-expr",locations:[{start:{line:956,column:8},end:{line:956,column:14}},{start:{line:956,column:18},end:{line:956,column:45}}],line:956},"115":{loc:{start:{line:965,column:2},end:{line:967,column:3}},type:"if",locations:[{start:{line:965,column:2},end:{line:967,column:3}},{start:{line:965,column:2},end:{line:967,column:3}}],line:965},"116":{loc:{start:{line:973,column:4},end:{line:977,column:5}},type:"if",locations:[{start:{line:973,column:4},end:{line:977,column:5}},{start:{line:973,column:4},end:{line:977,column:5}}],line:973},"117":{loc:{start:{line:986,column:2},end:{line:988,column:3}},type:"if",locations:[{start:{line:986,column:2},end:{line:988,column:3}},{start:{line:986,column:2},end:{line:988,column:3}}],line:986},"118":{loc:{start:{line:990,column:2},end:{line:998,column:3}},type:"if",locations:[{start:{line:990,column:2},end:{line:998,column:3}},{start:{line:990,column:2},end:{line:998,column:3}}],line:990},"119":{loc:{start:{line:994,column:6},end:{line:996,column:7}},type:"if",locations:[{start:{line:994,column:6},end:{line:996,column:7}},{start:{line:994,column:6},end:{line:996,column:7}}],line:994},"120":{loc:{start:{line:1000,column:2},end:{line:1002,column:3}},type:"if",locations:[{start:{line:1000,column:2},end:{line:1002,column:3}},{start:{line:1000,column:2},end:{line:1002,column:3}}],line:1000},"121":{loc:{start:{line:1000,column:6},end:{line:1000,column:23}},type:"binary-expr",locations:[{start:{line:1000,column:6},end:{line:1000,column:10}},{start:{line:1000,column:14},end:{line:1000,column:23}}],line:1000},"122":{loc:{start:{line:1007,column:4},end:{line:1009,column:5}},type:"if",locations:[{start:{line:1007,column:4},end:{line:1009,column:5}},{start:{line:1007,column:4},end:{line:1009,column:5}}],line:1007}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":0,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":0,"458":0,"459":0,"460":0,"461":0,"462":0,"463":0,"464":0,"465":0,"466":0,"467":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0},b:{"0":[0],"1":[0],"2":[0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0,0,0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0,0,0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0,0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0],"113":[0,0],"114":[0,0],"115":[0,0],"116":[0,0],"117":[0,0],"118":[0,0],"119":[0,0],"120":[0,0],"121":[0,0],"122":[0,0]},inputSourceMap:{version:3,sources:["../src/RestQuery.js"],names:["SchemaController","require","Parse","triggers","continueWhile","AlwaysSelectedKeys","RestQuery","config","auth","className","restWhere","restOptions","clientSDK","runAfterFind","context","response","findOptions","isMaster","user","Error","INVALID_SESSION_TOKEN","$and","__type","objectId","id","doCount","includeAll","include","keysForInclude","Object","prototype","hasOwnProperty","call","keys","excludeKeys","length","split","filter","key","map","slice","lastIndexOf","join","option","concat","Array","from","Set","exclude","k","indexOf","fields","order","sort","reduce","sortMap","field","trim","score","$meta","paths","includes","pathSet","memo","path","index","parts","s","a","b","redirectKey","redirectClassNameForKey","redirectClassName","INVALID_JSON","execute","executeOptions","Promise","resolve","then","buildRestWhere","handleIncludeAll","handleExcludeKeys","runFind","runCount","handleInclude","runAfterFindTrigger","each","callback","limit","finished","query","results","forEach","assign","$gt","getUserAndRoleACL","validateClientClassCreation","replaceSelect","replaceDontSelect","replaceInQuery","replaceNotInQuery","replaceEquality","acl","getUserRoles","roles","database","newClassName","allowClientClassCreation","systemClasses","loadSchema","schemaController","hasClass","OPERATION_FORBIDDEN","transformInQuery","inQueryObject","values","result","push","isArray","findObjectWithKey","inQueryValue","where","INVALID_QUERY","additionalOptions","subqueryReadPreference","readPreference","subquery","transformNotInQuery","notInQueryObject","notInQueryValue","getDeepestObjectFromKey","json","idx","src","splice","transformSelect","selectObject","objects","selectValue","transformDontSelect","dontSelectObject","dontSelectValue","cleanResultAuthData","password","authData","provider","replaceEqualityConstraint","constraint","equalToObject","hasDirectConstraint","hasOperatorConstraint","options","op","find","explain","filesController","expandFilesInObject","r","count","skip","c","getOneSchema","schema","includeFields","keyFields","type","pathResponse","includePath","newResponse","hasAfterFindHook","triggerExists","Types","afterFind","applicationId","pipeline","distinct","parseQuery","Query","withJSON","maybeRunAfterFindTrigger","object","toJSON","pointers","findPointers","pointersHash","pointer","add","includeRestOptions","keySet","set","keyPath","i","size","excludeKeySet","includeReadPreference","queryPromises","objectIds","$in","all","responses","replace","includeResponse","obj","sessionToken","resp","replacePointers","answer","x","subobject","newsub","root","item","subkey","module","exports"],mappings:"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",sourcesContent:["// An object that encapsulates everything we need to run a 'find'\n// operation, encoded in the REST API format.\n\nvar SchemaController = require('./Controllers/SchemaController');\nvar Parse = require('parse/node').Parse;\nconst triggers = require('./triggers');\nconst { continueWhile } = require('parse/lib/node/promiseUtils');\nconst AlwaysSelectedKeys = ['objectId', 'createdAt', 'updatedAt', 'ACL'];\n// restOptions can include:\n//   skip\n//   limit\n//   order\n//   count\n//   include\n//   keys\n//   excludeKeys\n//   redirectClassNameForKey\n//   readPreference\n//   includeReadPreference\n//   subqueryReadPreference\nfunction RestQuery(\n  config,\n  auth,\n  className,\n  restWhere = {},\n  restOptions = {},\n  clientSDK,\n  runAfterFind = true,\n  context\n) {\n  this.config = config;\n  this.auth = auth;\n  this.className = className;\n  this.restWhere = restWhere;\n  this.restOptions = restOptions;\n  this.clientSDK = clientSDK;\n  this.runAfterFind = runAfterFind;\n  this.response = null;\n  this.findOptions = {};\n  this.context = context || {};\n  if (!this.auth.isMaster) {\n    if (this.className == '_Session') {\n      if (!this.auth.user) {\n        throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Invalid session token');\n      }\n      this.restWhere = {\n        $and: [\n          this.restWhere,\n          {\n            user: {\n              __type: 'Pointer',\n              className: '_User',\n              objectId: this.auth.user.id,\n            },\n          },\n        ],\n      };\n    }\n  }\n\n  this.doCount = false;\n  this.includeAll = false;\n\n  // The format for this.include is not the same as the format for the\n  // include option - it's the paths we should include, in order,\n  // stored as arrays, taking into account that we need to include foo\n  // before including foo.bar. Also it should dedupe.\n  // For example, passing an arg of include=foo.bar,foo.baz could lead to\n  // this.include = [['foo'], ['foo', 'baz'], ['foo', 'bar']]\n  this.include = [];\n  let keysForInclude = '';\n\n  // If we have keys, we probably want to force some includes (n-1 level)\n  // See issue: https://github.com/parse-community/parse-server/issues/3185\n  if (Object.prototype.hasOwnProperty.call(restOptions, 'keys')) {\n    keysForInclude = restOptions.keys;\n  }\n\n  // If we have keys, we probably want to force some includes (n-1 level)\n  // in order to exclude specific keys.\n  if (Object.prototype.hasOwnProperty.call(restOptions, 'excludeKeys')) {\n    keysForInclude += ',' + restOptions.excludeKeys;\n  }\n\n  if (keysForInclude.length > 0) {\n    keysForInclude = keysForInclude\n      .split(',')\n      .filter(key => {\n        // At least 2 components\n        return key.split('.').length > 1;\n      })\n      .map(key => {\n        // Slice the last component (a.b.c -> a.b)\n        // Otherwise we'll include one level too much.\n        return key.slice(0, key.lastIndexOf('.'));\n      })\n      .join(',');\n\n    // Concat the possibly present include string with the one from the keys\n    // Dedup / sorting is handle in 'include' case.\n    if (keysForInclude.length > 0) {\n      if (!restOptions.include || restOptions.include.length == 0) {\n        restOptions.include = keysForInclude;\n      } else {\n        restOptions.include += ',' + keysForInclude;\n      }\n    }\n  }\n\n  for (var option in restOptions) {\n    switch (option) {\n      case 'keys': {\n        const keys = restOptions.keys\n          .split(',')\n          .filter(key => key.length > 0)\n          .concat(AlwaysSelectedKeys);\n        this.keys = Array.from(new Set(keys));\n        break;\n      }\n      case 'excludeKeys': {\n        const exclude = restOptions.excludeKeys\n          .split(',')\n          .filter(k => AlwaysSelectedKeys.indexOf(k) < 0);\n        this.excludeKeys = Array.from(new Set(exclude));\n        break;\n      }\n      case 'count':\n        this.doCount = true;\n        break;\n      case 'includeAll':\n        this.includeAll = true;\n        break;\n      case 'explain':\n      case 'hint':\n      case 'distinct':\n      case 'pipeline':\n      case 'skip':\n      case 'limit':\n      case 'readPreference':\n        this.findOptions[option] = restOptions[option];\n        break;\n      case 'order':\n        var fields = restOptions.order.split(',');\n        this.findOptions.sort = fields.reduce((sortMap, field) => {\n          field = field.trim();\n          if (field === '$score' || field === '-$score') {\n            sortMap.score = { $meta: 'textScore' };\n          } else if (field[0] == '-') {\n            sortMap[field.slice(1)] = -1;\n          } else {\n            sortMap[field] = 1;\n          }\n          return sortMap;\n        }, {});\n        break;\n      case 'include': {\n        const paths = restOptions.include.split(',');\n        if (paths.includes('*')) {\n          this.includeAll = true;\n          break;\n        }\n        // Load the existing includes (from keys)\n        const pathSet = paths.reduce((memo, path) => {\n          // Split each paths on . (a.b.c -> [a,b,c])\n          // reduce to create all paths\n          // ([a,b,c] -> {a: true, 'a.b': true, 'a.b.c': true})\n          return path.split('.').reduce((memo, path, index, parts) => {\n            memo[parts.slice(0, index + 1).join('.')] = true;\n            return memo;\n          }, memo);\n        }, {});\n\n        this.include = Object.keys(pathSet)\n          .map(s => {\n            return s.split('.');\n          })\n          .sort((a, b) => {\n            return a.length - b.length; // Sort by number of components\n          });\n        break;\n      }\n      case 'redirectClassNameForKey':\n        this.redirectKey = restOptions.redirectClassNameForKey;\n        this.redirectClassName = null;\n        break;\n      case 'includeReadPreference':\n      case 'subqueryReadPreference':\n        break;\n      default:\n        throw new Parse.Error(Parse.Error.INVALID_JSON, 'bad option: ' + option);\n    }\n  }\n}\n\n// A convenient method to perform all the steps of processing a query\n// in order.\n// Returns a promise for the response - an object with optional keys\n// 'results' and 'count'.\n// TODO: consolidate the replaceX functions\nRestQuery.prototype.execute = function (executeOptions) {\n  return Promise.resolve()\n    .then(() => {\n      return this.buildRestWhere();\n    })\n    .then(() => {\n      return this.handleIncludeAll();\n    })\n    .then(() => {\n      return this.handleExcludeKeys();\n    })\n    .then(() => {\n      return this.runFind(executeOptions);\n    })\n    .then(() => {\n      return this.runCount();\n    })\n    .then(() => {\n      return this.handleInclude();\n    })\n    .then(() => {\n      return this.runAfterFindTrigger();\n    })\n    .then(() => {\n      return this.response;\n    });\n};\n\nRestQuery.prototype.each = function (callback) {\n  const { config, auth, className, restWhere, restOptions, clientSDK } = this;\n  // if the limit is set, use it\n  restOptions.limit = restOptions.limit || 100;\n  restOptions.order = 'objectId';\n  let finished = false;\n\n  return continueWhile(\n    () => {\n      return !finished;\n    },\n    async () => {\n      const query = new RestQuery(\n        config,\n        auth,\n        className,\n        restWhere,\n        restOptions,\n        clientSDK,\n        this.runAfterFind,\n        this.context\n      );\n      const { results } = await query.execute();\n      results.forEach(callback);\n      finished = results.length < restOptions.limit;\n      if (!finished) {\n        restWhere.objectId = Object.assign({}, restWhere.objectId, {\n          $gt: results[results.length - 1].objectId,\n        });\n      }\n    }\n  );\n};\n\nRestQuery.prototype.buildRestWhere = function () {\n  return Promise.resolve()\n    .then(() => {\n      return this.getUserAndRoleACL();\n    })\n    .then(() => {\n      return this.redirectClassNameForKey();\n    })\n    .then(() => {\n      return this.validateClientClassCreation();\n    })\n    .then(() => {\n      return this.replaceSelect();\n    })\n    .then(() => {\n      return this.replaceDontSelect();\n    })\n    .then(() => {\n      return this.replaceInQuery();\n    })\n    .then(() => {\n      return this.replaceNotInQuery();\n    })\n    .then(() => {\n      return this.replaceEquality();\n    });\n};\n\n// Uses the Auth object to get the list of roles, adds the user id\nRestQuery.prototype.getUserAndRoleACL = function () {\n  if (this.auth.isMaster) {\n    return Promise.resolve();\n  }\n\n  this.findOptions.acl = ['*'];\n\n  if (this.auth.user) {\n    return this.auth.getUserRoles().then(roles => {\n      this.findOptions.acl = this.findOptions.acl.concat(roles, [this.auth.user.id]);\n      return;\n    });\n  } else {\n    return Promise.resolve();\n  }\n};\n\n// Changes the className if redirectClassNameForKey is set.\n// Returns a promise.\nRestQuery.prototype.redirectClassNameForKey = function () {\n  if (!this.redirectKey) {\n    return Promise.resolve();\n  }\n\n  // We need to change the class name based on the schema\n  return this.config.database\n    .redirectClassNameForKey(this.className, this.redirectKey)\n    .then(newClassName => {\n      this.className = newClassName;\n      this.redirectClassName = newClassName;\n    });\n};\n\n// Validates this operation against the allowClientClassCreation config.\nRestQuery.prototype.validateClientClassCreation = function () {\n  if (\n    this.config.allowClientClassCreation === false &&\n    !this.auth.isMaster &&\n    SchemaController.systemClasses.indexOf(this.className) === -1\n  ) {\n    return this.config.database\n      .loadSchema()\n      .then(schemaController => schemaController.hasClass(this.className))\n      .then(hasClass => {\n        if (hasClass !== true) {\n          throw new Parse.Error(\n            Parse.Error.OPERATION_FORBIDDEN,\n            'This user is not allowed to access ' + 'non-existent class: ' + this.className\n          );\n        }\n      });\n  } else {\n    return Promise.resolve();\n  }\n};\n\nfunction transformInQuery(inQueryObject, className, results) {\n  var values = [];\n  for (var result of results) {\n    values.push({\n      __type: 'Pointer',\n      className: className,\n      objectId: result.objectId,\n    });\n  }\n  delete inQueryObject['$inQuery'];\n  if (Array.isArray(inQueryObject['$in'])) {\n    inQueryObject['$in'] = inQueryObject['$in'].concat(values);\n  } else {\n    inQueryObject['$in'] = values;\n  }\n}\n\n// Replaces a $inQuery clause by running the subquery, if there is an\n// $inQuery clause.\n// The $inQuery clause turns into an $in with values that are just\n// pointers to the objects returned in the subquery.\nRestQuery.prototype.replaceInQuery = function () {\n  var inQueryObject = findObjectWithKey(this.restWhere, '$inQuery');\n  if (!inQueryObject) {\n    return;\n  }\n\n  // The inQuery value must have precisely two keys - where and className\n  var inQueryValue = inQueryObject['$inQuery'];\n  if (!inQueryValue.where || !inQueryValue.className) {\n    throw new Parse.Error(Parse.Error.INVALID_QUERY, 'improper usage of $inQuery');\n  }\n\n  const additionalOptions = {\n    redirectClassNameForKey: inQueryValue.redirectClassNameForKey,\n  };\n\n  if (this.restOptions.subqueryReadPreference) {\n    additionalOptions.readPreference = this.restOptions.subqueryReadPreference;\n    additionalOptions.subqueryReadPreference = this.restOptions.subqueryReadPreference;\n  } else if (this.restOptions.readPreference) {\n    additionalOptions.readPreference = this.restOptions.readPreference;\n  }\n\n  var subquery = new RestQuery(\n    this.config,\n    this.auth,\n    inQueryValue.className,\n    inQueryValue.where,\n    additionalOptions\n  );\n  return subquery.execute().then(response => {\n    transformInQuery(inQueryObject, subquery.className, response.results);\n    // Recurse to repeat\n    return this.replaceInQuery();\n  });\n};\n\nfunction transformNotInQuery(notInQueryObject, className, results) {\n  var values = [];\n  for (var result of results) {\n    values.push({\n      __type: 'Pointer',\n      className: className,\n      objectId: result.objectId,\n    });\n  }\n  delete notInQueryObject['$notInQuery'];\n  if (Array.isArray(notInQueryObject['$nin'])) {\n    notInQueryObject['$nin'] = notInQueryObject['$nin'].concat(values);\n  } else {\n    notInQueryObject['$nin'] = values;\n  }\n}\n\n// Replaces a $notInQuery clause by running the subquery, if there is an\n// $notInQuery clause.\n// The $notInQuery clause turns into a $nin with values that are just\n// pointers to the objects returned in the subquery.\nRestQuery.prototype.replaceNotInQuery = function () {\n  var notInQueryObject = findObjectWithKey(this.restWhere, '$notInQuery');\n  if (!notInQueryObject) {\n    return;\n  }\n\n  // The notInQuery value must have precisely two keys - where and className\n  var notInQueryValue = notInQueryObject['$notInQuery'];\n  if (!notInQueryValue.where || !notInQueryValue.className) {\n    throw new Parse.Error(Parse.Error.INVALID_QUERY, 'improper usage of $notInQuery');\n  }\n\n  const additionalOptions = {\n    redirectClassNameForKey: notInQueryValue.redirectClassNameForKey,\n  };\n\n  if (this.restOptions.subqueryReadPreference) {\n    additionalOptions.readPreference = this.restOptions.subqueryReadPreference;\n    additionalOptions.subqueryReadPreference = this.restOptions.subqueryReadPreference;\n  } else if (this.restOptions.readPreference) {\n    additionalOptions.readPreference = this.restOptions.readPreference;\n  }\n\n  var subquery = new RestQuery(\n    this.config,\n    this.auth,\n    notInQueryValue.className,\n    notInQueryValue.where,\n    additionalOptions\n  );\n  return subquery.execute().then(response => {\n    transformNotInQuery(notInQueryObject, subquery.className, response.results);\n    // Recurse to repeat\n    return this.replaceNotInQuery();\n  });\n};\n\n// Used to get the deepest object from json using dot notation.\nconst getDeepestObjectFromKey = (json, key, idx, src) => {\n  if (key in json) {\n    return json[key];\n  }\n  src.splice(1); // Exit Early\n};\n\nconst transformSelect = (selectObject, key, objects) => {\n  var values = [];\n  for (var result of objects) {\n    values.push(key.split('.').reduce(getDeepestObjectFromKey, result));\n  }\n  delete selectObject['$select'];\n  if (Array.isArray(selectObject['$in'])) {\n    selectObject['$in'] = selectObject['$in'].concat(values);\n  } else {\n    selectObject['$in'] = values;\n  }\n};\n\n// Replaces a $select clause by running the subquery, if there is a\n// $select clause.\n// The $select clause turns into an $in with values selected out of\n// the subquery.\n// Returns a possible-promise.\nRestQuery.prototype.replaceSelect = function () {\n  var selectObject = findObjectWithKey(this.restWhere, '$select');\n  if (!selectObject) {\n    return;\n  }\n\n  // The select value must have precisely two keys - query and key\n  var selectValue = selectObject['$select'];\n  // iOS SDK don't send where if not set, let it pass\n  if (\n    !selectValue.query ||\n    !selectValue.key ||\n    typeof selectValue.query !== 'object' ||\n    !selectValue.query.className ||\n    Object.keys(selectValue).length !== 2\n  ) {\n    throw new Parse.Error(Parse.Error.INVALID_QUERY, 'improper usage of $select');\n  }\n\n  const additionalOptions = {\n    redirectClassNameForKey: selectValue.query.redirectClassNameForKey,\n  };\n\n  if (this.restOptions.subqueryReadPreference) {\n    additionalOptions.readPreference = this.restOptions.subqueryReadPreference;\n    additionalOptions.subqueryReadPreference = this.restOptions.subqueryReadPreference;\n  } else if (this.restOptions.readPreference) {\n    additionalOptions.readPreference = this.restOptions.readPreference;\n  }\n\n  var subquery = new RestQuery(\n    this.config,\n    this.auth,\n    selectValue.query.className,\n    selectValue.query.where,\n    additionalOptions\n  );\n  return subquery.execute().then(response => {\n    transformSelect(selectObject, selectValue.key, response.results);\n    // Keep replacing $select clauses\n    return this.replaceSelect();\n  });\n};\n\nconst transformDontSelect = (dontSelectObject, key, objects) => {\n  var values = [];\n  for (var result of objects) {\n    values.push(key.split('.').reduce(getDeepestObjectFromKey, result));\n  }\n  delete dontSelectObject['$dontSelect'];\n  if (Array.isArray(dontSelectObject['$nin'])) {\n    dontSelectObject['$nin'] = dontSelectObject['$nin'].concat(values);\n  } else {\n    dontSelectObject['$nin'] = values;\n  }\n};\n\n// Replaces a $dontSelect clause by running the subquery, if there is a\n// $dontSelect clause.\n// The $dontSelect clause turns into an $nin with values selected out of\n// the subquery.\n// Returns a possible-promise.\nRestQuery.prototype.replaceDontSelect = function () {\n  var dontSelectObject = findObjectWithKey(this.restWhere, '$dontSelect');\n  if (!dontSelectObject) {\n    return;\n  }\n\n  // The dontSelect value must have precisely two keys - query and key\n  var dontSelectValue = dontSelectObject['$dontSelect'];\n  if (\n    !dontSelectValue.query ||\n    !dontSelectValue.key ||\n    typeof dontSelectValue.query !== 'object' ||\n    !dontSelectValue.query.className ||\n    Object.keys(dontSelectValue).length !== 2\n  ) {\n    throw new Parse.Error(Parse.Error.INVALID_QUERY, 'improper usage of $dontSelect');\n  }\n  const additionalOptions = {\n    redirectClassNameForKey: dontSelectValue.query.redirectClassNameForKey,\n  };\n\n  if (this.restOptions.subqueryReadPreference) {\n    additionalOptions.readPreference = this.restOptions.subqueryReadPreference;\n    additionalOptions.subqueryReadPreference = this.restOptions.subqueryReadPreference;\n  } else if (this.restOptions.readPreference) {\n    additionalOptions.readPreference = this.restOptions.readPreference;\n  }\n\n  var subquery = new RestQuery(\n    this.config,\n    this.auth,\n    dontSelectValue.query.className,\n    dontSelectValue.query.where,\n    additionalOptions\n  );\n  return subquery.execute().then(response => {\n    transformDontSelect(dontSelectObject, dontSelectValue.key, response.results);\n    // Keep replacing $dontSelect clauses\n    return this.replaceDontSelect();\n  });\n};\n\nconst cleanResultAuthData = function (result) {\n  delete result.password;\n  if (result.authData) {\n    Object.keys(result.authData).forEach(provider => {\n      if (result.authData[provider] === null) {\n        delete result.authData[provider];\n      }\n    });\n\n    if (Object.keys(result.authData).length == 0) {\n      delete result.authData;\n    }\n  }\n};\n\nconst replaceEqualityConstraint = constraint => {\n  if (typeof constraint !== 'object') {\n    return constraint;\n  }\n  const equalToObject = {};\n  let hasDirectConstraint = false;\n  let hasOperatorConstraint = false;\n  for (const key in constraint) {\n    if (key.indexOf('$') !== 0) {\n      hasDirectConstraint = true;\n      equalToObject[key] = constraint[key];\n    } else {\n      hasOperatorConstraint = true;\n    }\n  }\n  if (hasDirectConstraint && hasOperatorConstraint) {\n    constraint['$eq'] = equalToObject;\n    Object.keys(equalToObject).forEach(key => {\n      delete constraint[key];\n    });\n  }\n  return constraint;\n};\n\nRestQuery.prototype.replaceEquality = function () {\n  if (typeof this.restWhere !== 'object') {\n    return;\n  }\n  for (const key in this.restWhere) {\n    this.restWhere[key] = replaceEqualityConstraint(this.restWhere[key]);\n  }\n};\n\n// Returns a promise for whether it was successful.\n// Populates this.response with an object that only has 'results'.\nRestQuery.prototype.runFind = function (options = {}) {\n  if (this.findOptions.limit === 0) {\n    this.response = { results: [] };\n    return Promise.resolve();\n  }\n  const findOptions = Object.assign({}, this.findOptions);\n  if (this.keys) {\n    findOptions.keys = this.keys.map(key => {\n      return key.split('.')[0];\n    });\n  }\n  if (options.op) {\n    findOptions.op = options.op;\n  }\n  return this.config.database\n    .find(this.className, this.restWhere, findOptions, this.auth)\n    .then(results => {\n      if (this.className === '_User' && !findOptions.explain) {\n        for (var result of results) {\n          cleanResultAuthData(result);\n        }\n      }\n\n      this.config.filesController.expandFilesInObject(this.config, results);\n\n      if (this.redirectClassName) {\n        for (var r of results) {\n          r.className = this.redirectClassName;\n        }\n      }\n      this.response = { results: results };\n    });\n};\n\n// Returns a promise for whether it was successful.\n// Populates this.response.count with the count\nRestQuery.prototype.runCount = function () {\n  if (!this.doCount) {\n    return;\n  }\n  this.findOptions.count = true;\n  delete this.findOptions.skip;\n  delete this.findOptions.limit;\n  return this.config.database.find(this.className, this.restWhere, this.findOptions).then(c => {\n    this.response.count = c;\n  });\n};\n\n// Augments this.response with all pointers on an object\nRestQuery.prototype.handleIncludeAll = function () {\n  if (!this.includeAll) {\n    return;\n  }\n  return this.config.database\n    .loadSchema()\n    .then(schemaController => schemaController.getOneSchema(this.className))\n    .then(schema => {\n      const includeFields = [];\n      const keyFields = [];\n      for (const field in schema.fields) {\n        if (\n          (schema.fields[field].type && schema.fields[field].type === 'Pointer') ||\n          (schema.fields[field].type && schema.fields[field].type === 'Array')\n        ) {\n          includeFields.push([field]);\n          keyFields.push(field);\n        }\n      }\n      // Add fields to include, keys, remove dups\n      this.include = [...new Set([...this.include, ...includeFields])];\n      // if this.keys not set, then all keys are already included\n      if (this.keys) {\n        this.keys = [...new Set([...this.keys, ...keyFields])];\n      }\n    });\n};\n\n// Updates property `this.keys` to contain all keys but the ones unselected.\nRestQuery.prototype.handleExcludeKeys = function () {\n  if (!this.excludeKeys) {\n    return;\n  }\n  if (this.keys) {\n    this.keys = this.keys.filter(k => !this.excludeKeys.includes(k));\n    return;\n  }\n  return this.config.database\n    .loadSchema()\n    .then(schemaController => schemaController.getOneSchema(this.className))\n    .then(schema => {\n      const fields = Object.keys(schema.fields);\n      this.keys = fields.filter(k => !this.excludeKeys.includes(k));\n    });\n};\n\n// Augments this.response with data at the paths provided in this.include.\nRestQuery.prototype.handleInclude = function () {\n  if (this.include.length == 0) {\n    return;\n  }\n\n  var pathResponse = includePath(\n    this.config,\n    this.auth,\n    this.response,\n    this.include[0],\n    this.restOptions\n  );\n  if (pathResponse.then) {\n    return pathResponse.then(newResponse => {\n      this.response = newResponse;\n      this.include = this.include.slice(1);\n      return this.handleInclude();\n    });\n  } else if (this.include.length > 0) {\n    this.include = this.include.slice(1);\n    return this.handleInclude();\n  }\n\n  return pathResponse;\n};\n\n//Returns a promise of a processed set of results\nRestQuery.prototype.runAfterFindTrigger = function () {\n  if (!this.response) {\n    return;\n  }\n  if (!this.runAfterFind) {\n    return;\n  }\n  // Avoid doing any setup for triggers if there is no 'afterFind' trigger for this class.\n  const hasAfterFindHook = triggers.triggerExists(\n    this.className,\n    triggers.Types.afterFind,\n    this.config.applicationId\n  );\n  if (!hasAfterFindHook) {\n    return Promise.resolve();\n  }\n  // Skip Aggregate and Distinct Queries\n  if (this.findOptions.pipeline || this.findOptions.distinct) {\n    return Promise.resolve();\n  }\n\n  const json = Object.assign({}, this.restOptions);\n  json.where = this.restWhere;\n  const parseQuery = new Parse.Query(this.className);\n  parseQuery.withJSON(json);\n  // Run afterFind trigger and set the new results\n  return triggers\n    .maybeRunAfterFindTrigger(\n      triggers.Types.afterFind,\n      this.auth,\n      this.className,\n      this.response.results,\n      this.config,\n      parseQuery,\n      this.context\n    )\n    .then(results => {\n      // Ensure we properly set the className back\n      if (this.redirectClassName) {\n        this.response.results = results.map(object => {\n          if (object instanceof Parse.Object) {\n            object = object.toJSON();\n          }\n          object.className = this.redirectClassName;\n          return object;\n        });\n      } else {\n        this.response.results = results;\n      }\n    });\n};\n\n// Adds included values to the response.\n// Path is a list of field names.\n// Returns a promise for an augmented response.\nfunction includePath(config, auth, response, path, restOptions = {}) {\n  var pointers = findPointers(response.results, path);\n  if (pointers.length == 0) {\n    return response;\n  }\n  const pointersHash = {};\n  for (var pointer of pointers) {\n    if (!pointer) {\n      continue;\n    }\n    const className = pointer.className;\n    // only include the good pointers\n    if (className) {\n      pointersHash[className] = pointersHash[className] || new Set();\n      pointersHash[className].add(pointer.objectId);\n    }\n  }\n  const includeRestOptions = {};\n  if (restOptions.keys) {\n    const keys = new Set(restOptions.keys.split(','));\n    const keySet = Array.from(keys).reduce((set, key) => {\n      const keyPath = key.split('.');\n      let i = 0;\n      for (i; i < path.length; i++) {\n        if (path[i] != keyPath[i]) {\n          return set;\n        }\n      }\n      if (i < keyPath.length) {\n        set.add(keyPath[i]);\n      }\n      return set;\n    }, new Set());\n    if (keySet.size > 0) {\n      includeRestOptions.keys = Array.from(keySet).join(',');\n    }\n  }\n\n  if (restOptions.excludeKeys) {\n    const excludeKeys = new Set(restOptions.excludeKeys.split(','));\n    const excludeKeySet = Array.from(excludeKeys).reduce((set, key) => {\n      const keyPath = key.split('.');\n      let i = 0;\n      for (i; i < path.length; i++) {\n        if (path[i] != keyPath[i]) {\n          return set;\n        }\n      }\n      if (i == keyPath.length - 1) {\n        set.add(keyPath[i]);\n      }\n      return set;\n    }, new Set());\n    if (excludeKeySet.size > 0) {\n      includeRestOptions.excludeKeys = Array.from(excludeKeySet).join(',');\n    }\n  }\n\n  if (restOptions.includeReadPreference) {\n    includeRestOptions.readPreference = restOptions.includeReadPreference;\n    includeRestOptions.includeReadPreference = restOptions.includeReadPreference;\n  } else if (restOptions.readPreference) {\n    includeRestOptions.readPreference = restOptions.readPreference;\n  }\n\n  const queryPromises = Object.keys(pointersHash).map(className => {\n    const objectIds = Array.from(pointersHash[className]);\n    let where;\n    if (objectIds.length === 1) {\n      where = { objectId: objectIds[0] };\n    } else {\n      where = { objectId: { $in: objectIds } };\n    }\n    var query = new RestQuery(config, auth, className, where, includeRestOptions);\n    return query.execute({ op: 'get' }).then(results => {\n      results.className = className;\n      return Promise.resolve(results);\n    });\n  });\n\n  // Get the objects for all these object ids\n  return Promise.all(queryPromises).then(responses => {\n    var replace = responses.reduce((replace, includeResponse) => {\n      for (var obj of includeResponse.results) {\n        obj.__type = 'Object';\n        obj.className = includeResponse.className;\n\n        if (obj.className == '_User' && !auth.isMaster) {\n          delete obj.sessionToken;\n          delete obj.authData;\n        }\n        replace[obj.objectId] = obj;\n      }\n      return replace;\n    }, {});\n\n    var resp = {\n      results: replacePointers(response.results, path, replace),\n    };\n    if (response.count) {\n      resp.count = response.count;\n    }\n    return resp;\n  });\n}\n\n// Object may be a list of REST-format object to find pointers in, or\n// it may be a single object.\n// If the path yields things that aren't pointers, this throws an error.\n// Path is a list of fields to search into.\n// Returns a list of pointers in REST format.\nfunction findPointers(object, path) {\n  if (object instanceof Array) {\n    var answer = [];\n    for (var x of object) {\n      answer = answer.concat(findPointers(x, path));\n    }\n    return answer;\n  }\n\n  if (typeof object !== 'object' || !object) {\n    return [];\n  }\n\n  if (path.length == 0) {\n    if (object === null || object.__type == 'Pointer') {\n      return [object];\n    }\n    return [];\n  }\n\n  var subobject = object[path[0]];\n  if (!subobject) {\n    return [];\n  }\n  return findPointers(subobject, path.slice(1));\n}\n\n// Object may be a list of REST-format objects to replace pointers\n// in, or it may be a single object.\n// Path is a list of fields to search into.\n// replace is a map from object id -> object.\n// Returns something analogous to object, but with the appropriate\n// pointers inflated.\nfunction replacePointers(object, path, replace) {\n  if (object instanceof Array) {\n    return object\n      .map(obj => replacePointers(obj, path, replace))\n      .filter(obj => typeof obj !== 'undefined');\n  }\n\n  if (typeof object !== 'object' || !object) {\n    return object;\n  }\n\n  if (path.length === 0) {\n    if (object && object.__type === 'Pointer') {\n      return replace[object.objectId];\n    }\n    return object;\n  }\n\n  var subobject = object[path[0]];\n  if (!subobject) {\n    return object;\n  }\n  var newsub = replacePointers(subobject, path.slice(1), replace);\n  var answer = {};\n  for (var key in object) {\n    if (key == path[0]) {\n      answer[key] = newsub;\n    } else {\n      answer[key] = object[key];\n    }\n  }\n  return answer;\n}\n\n// Finds a subobject that has the given key, if there is one.\n// Returns undefined otherwise.\nfunction findObjectWithKey(root, key) {\n  if (typeof root !== 'object') {\n    return;\n  }\n  if (root instanceof Array) {\n    for (var item of root) {\n      const answer = findObjectWithKey(item, key);\n      if (answer) {\n        return answer;\n      }\n    }\n  }\n  if (root && root[key]) {\n    return root;\n  }\n  for (var subkey in root) {\n    const answer = findObjectWithKey(root[subkey], key);\n    if (answer) {\n      return answer;\n    }\n  }\n}\n\nmodule.exports = RestQuery;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"20a6d3c5d8b032bd210e72f1edc5e3b6694cb86b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_311fiay8r=function(){return actualCoverage;};}return actualCoverage;}cov_311fiay8r();var SchemaController=(cov_311fiay8r().s[0]++,require('./Controllers/SchemaController'));var Parse=(cov_311fiay8r().s[1]++,require('parse/node').Parse);const triggers=(cov_311fiay8r().s[2]++,require('./triggers'));const{continueWhile}=(cov_311fiay8r().s[3]++,require('parse/lib/node/promiseUtils'));const AlwaysSelectedKeys=(cov_311fiay8r().s[4]++,['objectId','createdAt','updatedAt','ACL']);// restOptions can include:
//   skip
//   limit
//   order
//   count
//   include
//   keys
//   excludeKeys
//   redirectClassNameForKey
//   readPreference
//   includeReadPreference
//   subqueryReadPreference
function RestQuery(config,auth,className,restWhere=(cov_311fiay8r().b[0][0]++,{}),restOptions=(cov_311fiay8r().b[1][0]++,{}),clientSDK,runAfterFind=(cov_311fiay8r().b[2][0]++,true),context){cov_311fiay8r().f[0]++;cov_311fiay8r().s[5]++;this.config=config;cov_311fiay8r().s[6]++;this.auth=auth;cov_311fiay8r().s[7]++;this.className=className;cov_311fiay8r().s[8]++;this.restWhere=restWhere;cov_311fiay8r().s[9]++;this.restOptions=restOptions;cov_311fiay8r().s[10]++;this.clientSDK=clientSDK;cov_311fiay8r().s[11]++;this.runAfterFind=runAfterFind;cov_311fiay8r().s[12]++;this.response=null;cov_311fiay8r().s[13]++;this.findOptions={};cov_311fiay8r().s[14]++;this.context=(cov_311fiay8r().b[3][0]++,context)||(cov_311fiay8r().b[3][1]++,{});cov_311fiay8r().s[15]++;if(!this.auth.isMaster){cov_311fiay8r().b[4][0]++;cov_311fiay8r().s[16]++;if(this.className=='_Session'){cov_311fiay8r().b[5][0]++;cov_311fiay8r().s[17]++;if(!this.auth.user){cov_311fiay8r().b[6][0]++;cov_311fiay8r().s[18]++;throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN,'Invalid session token');}else{cov_311fiay8r().b[6][1]++;}cov_311fiay8r().s[19]++;this.restWhere={$and:[this.restWhere,{user:{__type:'Pointer',className:'_User',objectId:this.auth.user.id}}]};}else{cov_311fiay8r().b[5][1]++;}}else{cov_311fiay8r().b[4][1]++;}cov_311fiay8r().s[20]++;this.doCount=false;cov_311fiay8r().s[21]++;this.includeAll=false;// The format for this.include is not the same as the format for the
// include option - it's the paths we should include, in order,
// stored as arrays, taking into account that we need to include foo
// before including foo.bar. Also it should dedupe.
// For example, passing an arg of include=foo.bar,foo.baz could lead to
// this.include = [['foo'], ['foo', 'baz'], ['foo', 'bar']]
cov_311fiay8r().s[22]++;this.include=[];let keysForInclude=(cov_311fiay8r().s[23]++,'');// If we have keys, we probably want to force some includes (n-1 level)
// See issue: https://github.com/parse-community/parse-server/issues/3185
cov_311fiay8r().s[24]++;if(Object.prototype.hasOwnProperty.call(restOptions,'keys')){cov_311fiay8r().b[7][0]++;cov_311fiay8r().s[25]++;keysForInclude=restOptions.keys;}else{cov_311fiay8r().b[7][1]++;}// If we have keys, we probably want to force some includes (n-1 level)
// in order to exclude specific keys.
cov_311fiay8r().s[26]++;if(Object.prototype.hasOwnProperty.call(restOptions,'excludeKeys')){cov_311fiay8r().b[8][0]++;cov_311fiay8r().s[27]++;keysForInclude+=','+restOptions.excludeKeys;}else{cov_311fiay8r().b[8][1]++;}cov_311fiay8r().s[28]++;if(keysForInclude.length>0){cov_311fiay8r().b[9][0]++;cov_311fiay8r().s[29]++;keysForInclude=keysForInclude.split(',').filter(key=>{cov_311fiay8r().f[1]++;cov_311fiay8r().s[30]++;// At least 2 components
return key.split('.').length>1;}).map(key=>{cov_311fiay8r().f[2]++;cov_311fiay8r().s[31]++;// Slice the last component (a.b.c -> a.b)
// Otherwise we'll include one level too much.
return key.slice(0,key.lastIndexOf('.'));}).join(',');// Concat the possibly present include string with the one from the keys
// Dedup / sorting is handle in 'include' case.
cov_311fiay8r().s[32]++;if(keysForInclude.length>0){cov_311fiay8r().b[10][0]++;cov_311fiay8r().s[33]++;if((cov_311fiay8r().b[12][0]++,!restOptions.include)||(cov_311fiay8r().b[12][1]++,restOptions.include.length==0)){cov_311fiay8r().b[11][0]++;cov_311fiay8r().s[34]++;restOptions.include=keysForInclude;}else{cov_311fiay8r().b[11][1]++;cov_311fiay8r().s[35]++;restOptions.include+=','+keysForInclude;}}else{cov_311fiay8r().b[10][1]++;}}else{cov_311fiay8r().b[9][1]++;}cov_311fiay8r().s[36]++;for(var option in restOptions){cov_311fiay8r().s[37]++;switch(option){case'keys':cov_311fiay8r().b[13][0]++;{const keys=(cov_311fiay8r().s[38]++,restOptions.keys.split(',').filter(key=>{cov_311fiay8r().f[3]++;cov_311fiay8r().s[39]++;return key.length>0;}).concat(AlwaysSelectedKeys));cov_311fiay8r().s[40]++;this.keys=Array.from(new Set(keys));cov_311fiay8r().s[41]++;break;}case'excludeKeys':cov_311fiay8r().b[13][1]++;{const exclude=(cov_311fiay8r().s[42]++,restOptions.excludeKeys.split(',').filter(k=>{cov_311fiay8r().f[4]++;cov_311fiay8r().s[43]++;return AlwaysSelectedKeys.indexOf(k)<0;}));cov_311fiay8r().s[44]++;this.excludeKeys=Array.from(new Set(exclude));cov_311fiay8r().s[45]++;break;}case'count':cov_311fiay8r().b[13][2]++;cov_311fiay8r().s[46]++;this.doCount=true;cov_311fiay8r().s[47]++;break;case'includeAll':cov_311fiay8r().b[13][3]++;cov_311fiay8r().s[48]++;this.includeAll=true;cov_311fiay8r().s[49]++;break;case'explain':cov_311fiay8r().b[13][4]++;case'hint':cov_311fiay8r().b[13][5]++;case'distinct':cov_311fiay8r().b[13][6]++;case'pipeline':cov_311fiay8r().b[13][7]++;case'skip':cov_311fiay8r().b[13][8]++;case'limit':cov_311fiay8r().b[13][9]++;case'readPreference':cov_311fiay8r().b[13][10]++;cov_311fiay8r().s[50]++;this.findOptions[option]=restOptions[option];cov_311fiay8r().s[51]++;break;case'order':cov_311fiay8r().b[13][11]++;var fields=(cov_311fiay8r().s[52]++,restOptions.order.split(','));cov_311fiay8r().s[53]++;this.findOptions.sort=fields.reduce((sortMap,field)=>{cov_311fiay8r().f[5]++;cov_311fiay8r().s[54]++;field=field.trim();cov_311fiay8r().s[55]++;if((cov_311fiay8r().b[15][0]++,field==='$score')||(cov_311fiay8r().b[15][1]++,field==='-$score')){cov_311fiay8r().b[14][0]++;cov_311fiay8r().s[56]++;sortMap.score={$meta:'textScore'};}else{cov_311fiay8r().b[14][1]++;cov_311fiay8r().s[57]++;if(field[0]=='-'){cov_311fiay8r().b[16][0]++;cov_311fiay8r().s[58]++;sortMap[field.slice(1)]=-1;}else{cov_311fiay8r().b[16][1]++;cov_311fiay8r().s[59]++;sortMap[field]=1;}}cov_311fiay8r().s[60]++;return sortMap;},{});cov_311fiay8r().s[61]++;break;case'include':cov_311fiay8r().b[13][12]++;{const paths=(cov_311fiay8r().s[62]++,restOptions.include.split(','));cov_311fiay8r().s[63]++;if(paths.includes('*')){cov_311fiay8r().b[17][0]++;cov_311fiay8r().s[64]++;this.includeAll=true;cov_311fiay8r().s[65]++;break;}else{cov_311fiay8r().b[17][1]++;}// Load the existing includes (from keys)
const pathSet=(cov_311fiay8r().s[66]++,paths.reduce((memo,path)=>{cov_311fiay8r().f[6]++;cov_311fiay8r().s[67]++;// Split each paths on . (a.b.c -> [a,b,c])
// reduce to create all paths
// ([a,b,c] -> {a: true, 'a.b': true, 'a.b.c': true})
return path.split('.').reduce((memo,path,index,parts)=>{cov_311fiay8r().f[7]++;cov_311fiay8r().s[68]++;memo[parts.slice(0,index+1).join('.')]=true;cov_311fiay8r().s[69]++;return memo;},memo);},{}));cov_311fiay8r().s[70]++;this.include=Object.keys(pathSet).map(s=>{cov_311fiay8r().f[8]++;cov_311fiay8r().s[71]++;return s.split('.');}).sort((a,b)=>{cov_311fiay8r().f[9]++;cov_311fiay8r().s[72]++;return a.length-b.length;// Sort by number of components
});cov_311fiay8r().s[73]++;break;}case'redirectClassNameForKey':cov_311fiay8r().b[13][13]++;cov_311fiay8r().s[74]++;this.redirectKey=restOptions.redirectClassNameForKey;cov_311fiay8r().s[75]++;this.redirectClassName=null;cov_311fiay8r().s[76]++;break;case'includeReadPreference':cov_311fiay8r().b[13][14]++;case'subqueryReadPreference':cov_311fiay8r().b[13][15]++;cov_311fiay8r().s[77]++;break;default:cov_311fiay8r().b[13][16]++;cov_311fiay8r().s[78]++;throw new Parse.Error(Parse.Error.INVALID_JSON,'bad option: '+option);}}}// A convenient method to perform all the steps of processing a query
// in order.
// Returns a promise for the response - an object with optional keys
// 'results' and 'count'.
// TODO: consolidate the replaceX functions
cov_311fiay8r().s[79]++;RestQuery.prototype.execute=function(executeOptions){cov_311fiay8r().f[10]++;cov_311fiay8r().s[80]++;return Promise.resolve().then(()=>{cov_311fiay8r().f[11]++;cov_311fiay8r().s[81]++;return this.buildRestWhere();}).then(()=>{cov_311fiay8r().f[12]++;cov_311fiay8r().s[82]++;return this.handleIncludeAll();}).then(()=>{cov_311fiay8r().f[13]++;cov_311fiay8r().s[83]++;return this.handleExcludeKeys();}).then(()=>{cov_311fiay8r().f[14]++;cov_311fiay8r().s[84]++;return this.runFind(executeOptions);}).then(()=>{cov_311fiay8r().f[15]++;cov_311fiay8r().s[85]++;return this.runCount();}).then(()=>{cov_311fiay8r().f[16]++;cov_311fiay8r().s[86]++;return this.handleInclude();}).then(()=>{cov_311fiay8r().f[17]++;cov_311fiay8r().s[87]++;return this.runAfterFindTrigger();}).then(()=>{cov_311fiay8r().f[18]++;cov_311fiay8r().s[88]++;return this.response;});};cov_311fiay8r().s[89]++;RestQuery.prototype.each=function(callback){cov_311fiay8r().f[19]++;const{config,auth,className,restWhere,restOptions,clientSDK}=(cov_311fiay8r().s[90]++,this);// if the limit is set, use it
cov_311fiay8r().s[91]++;restOptions.limit=(cov_311fiay8r().b[18][0]++,restOptions.limit)||(cov_311fiay8r().b[18][1]++,100);cov_311fiay8r().s[92]++;restOptions.order='objectId';let finished=(cov_311fiay8r().s[93]++,false);cov_311fiay8r().s[94]++;return continueWhile(()=>{cov_311fiay8r().f[20]++;cov_311fiay8r().s[95]++;return!finished;},async()=>{cov_311fiay8r().f[21]++;const query=(cov_311fiay8r().s[96]++,new RestQuery(config,auth,className,restWhere,restOptions,clientSDK,this.runAfterFind,this.context));const{results}=(cov_311fiay8r().s[97]++,await query.execute());cov_311fiay8r().s[98]++;results.forEach(callback);cov_311fiay8r().s[99]++;finished=results.length<restOptions.limit;cov_311fiay8r().s[100]++;if(!finished){cov_311fiay8r().b[19][0]++;cov_311fiay8r().s[101]++;restWhere.objectId=Object.assign({},restWhere.objectId,{$gt:results[results.length-1].objectId});}else{cov_311fiay8r().b[19][1]++;}});};cov_311fiay8r().s[102]++;RestQuery.prototype.buildRestWhere=function(){cov_311fiay8r().f[22]++;cov_311fiay8r().s[103]++;return Promise.resolve().then(()=>{cov_311fiay8r().f[23]++;cov_311fiay8r().s[104]++;return this.getUserAndRoleACL();}).then(()=>{cov_311fiay8r().f[24]++;cov_311fiay8r().s[105]++;return this.redirectClassNameForKey();}).then(()=>{cov_311fiay8r().f[25]++;cov_311fiay8r().s[106]++;return this.validateClientClassCreation();}).then(()=>{cov_311fiay8r().f[26]++;cov_311fiay8r().s[107]++;return this.replaceSelect();}).then(()=>{cov_311fiay8r().f[27]++;cov_311fiay8r().s[108]++;return this.replaceDontSelect();}).then(()=>{cov_311fiay8r().f[28]++;cov_311fiay8r().s[109]++;return this.replaceInQuery();}).then(()=>{cov_311fiay8r().f[29]++;cov_311fiay8r().s[110]++;return this.replaceNotInQuery();}).then(()=>{cov_311fiay8r().f[30]++;cov_311fiay8r().s[111]++;return this.replaceEquality();});};// Uses the Auth object to get the list of roles, adds the user id
cov_311fiay8r().s[112]++;RestQuery.prototype.getUserAndRoleACL=function(){cov_311fiay8r().f[31]++;cov_311fiay8r().s[113]++;if(this.auth.isMaster){cov_311fiay8r().b[20][0]++;cov_311fiay8r().s[114]++;return Promise.resolve();}else{cov_311fiay8r().b[20][1]++;}cov_311fiay8r().s[115]++;this.findOptions.acl=['*'];cov_311fiay8r().s[116]++;if(this.auth.user){cov_311fiay8r().b[21][0]++;cov_311fiay8r().s[117]++;return this.auth.getUserRoles().then(roles=>{cov_311fiay8r().f[32]++;cov_311fiay8r().s[118]++;this.findOptions.acl=this.findOptions.acl.concat(roles,[this.auth.user.id]);cov_311fiay8r().s[119]++;return;});}else{cov_311fiay8r().b[21][1]++;cov_311fiay8r().s[120]++;return Promise.resolve();}};// Changes the className if redirectClassNameForKey is set.
// Returns a promise.
cov_311fiay8r().s[121]++;RestQuery.prototype.redirectClassNameForKey=function(){cov_311fiay8r().f[33]++;cov_311fiay8r().s[122]++;if(!this.redirectKey){cov_311fiay8r().b[22][0]++;cov_311fiay8r().s[123]++;return Promise.resolve();}else{cov_311fiay8r().b[22][1]++;}// We need to change the class name based on the schema
cov_311fiay8r().s[124]++;return this.config.database.redirectClassNameForKey(this.className,this.redirectKey).then(newClassName=>{cov_311fiay8r().f[34]++;cov_311fiay8r().s[125]++;this.className=newClassName;cov_311fiay8r().s[126]++;this.redirectClassName=newClassName;});};// Validates this operation against the allowClientClassCreation config.
cov_311fiay8r().s[127]++;RestQuery.prototype.validateClientClassCreation=function(){cov_311fiay8r().f[35]++;cov_311fiay8r().s[128]++;if((cov_311fiay8r().b[24][0]++,this.config.allowClientClassCreation===false)&&(cov_311fiay8r().b[24][1]++,!this.auth.isMaster)&&(cov_311fiay8r().b[24][2]++,SchemaController.systemClasses.indexOf(this.className)===-1)){cov_311fiay8r().b[23][0]++;cov_311fiay8r().s[129]++;return this.config.database.loadSchema().then(schemaController=>{cov_311fiay8r().f[36]++;cov_311fiay8r().s[130]++;return schemaController.hasClass(this.className);}).then(hasClass=>{cov_311fiay8r().f[37]++;cov_311fiay8r().s[131]++;if(hasClass!==true){cov_311fiay8r().b[25][0]++;cov_311fiay8r().s[132]++;throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN,'This user is not allowed to access '+'non-existent class: '+this.className);}else{cov_311fiay8r().b[25][1]++;}});}else{cov_311fiay8r().b[23][1]++;cov_311fiay8r().s[133]++;return Promise.resolve();}};function transformInQuery(inQueryObject,className,results){cov_311fiay8r().f[38]++;var values=(cov_311fiay8r().s[134]++,[]);cov_311fiay8r().s[135]++;for(var result of results){cov_311fiay8r().s[136]++;values.push({__type:'Pointer',className:className,objectId:result.objectId});}cov_311fiay8r().s[137]++;delete inQueryObject['$inQuery'];cov_311fiay8r().s[138]++;if(Array.isArray(inQueryObject['$in'])){cov_311fiay8r().b[26][0]++;cov_311fiay8r().s[139]++;inQueryObject['$in']=inQueryObject['$in'].concat(values);}else{cov_311fiay8r().b[26][1]++;cov_311fiay8r().s[140]++;inQueryObject['$in']=values;}}// Replaces a $inQuery clause by running the subquery, if there is an
// $inQuery clause.
// The $inQuery clause turns into an $in with values that are just
// pointers to the objects returned in the subquery.
cov_311fiay8r().s[141]++;RestQuery.prototype.replaceInQuery=function(){cov_311fiay8r().f[39]++;var inQueryObject=(cov_311fiay8r().s[142]++,findObjectWithKey(this.restWhere,'$inQuery'));cov_311fiay8r().s[143]++;if(!inQueryObject){cov_311fiay8r().b[27][0]++;cov_311fiay8r().s[144]++;return;}else{cov_311fiay8r().b[27][1]++;}// The inQuery value must have precisely two keys - where and className
var inQueryValue=(cov_311fiay8r().s[145]++,inQueryObject['$inQuery']);cov_311fiay8r().s[146]++;if((cov_311fiay8r().b[29][0]++,!inQueryValue.where)||(cov_311fiay8r().b[29][1]++,!inQueryValue.className)){cov_311fiay8r().b[28][0]++;cov_311fiay8r().s[147]++;throw new Parse.Error(Parse.Error.INVALID_QUERY,'improper usage of $inQuery');}else{cov_311fiay8r().b[28][1]++;}const additionalOptions=(cov_311fiay8r().s[148]++,{redirectClassNameForKey:inQueryValue.redirectClassNameForKey});cov_311fiay8r().s[149]++;if(this.restOptions.subqueryReadPreference){cov_311fiay8r().b[30][0]++;cov_311fiay8r().s[150]++;additionalOptions.readPreference=this.restOptions.subqueryReadPreference;cov_311fiay8r().s[151]++;additionalOptions.subqueryReadPreference=this.restOptions.subqueryReadPreference;}else{cov_311fiay8r().b[30][1]++;cov_311fiay8r().s[152]++;if(this.restOptions.readPreference){cov_311fiay8r().b[31][0]++;cov_311fiay8r().s[153]++;additionalOptions.readPreference=this.restOptions.readPreference;}else{cov_311fiay8r().b[31][1]++;}}var subquery=(cov_311fiay8r().s[154]++,new RestQuery(this.config,this.auth,inQueryValue.className,inQueryValue.where,additionalOptions));cov_311fiay8r().s[155]++;return subquery.execute().then(response=>{cov_311fiay8r().f[40]++;cov_311fiay8r().s[156]++;transformInQuery(inQueryObject,subquery.className,response.results);// Recurse to repeat
cov_311fiay8r().s[157]++;return this.replaceInQuery();});};function transformNotInQuery(notInQueryObject,className,results){cov_311fiay8r().f[41]++;var values=(cov_311fiay8r().s[158]++,[]);cov_311fiay8r().s[159]++;for(var result of results){cov_311fiay8r().s[160]++;values.push({__type:'Pointer',className:className,objectId:result.objectId});}cov_311fiay8r().s[161]++;delete notInQueryObject['$notInQuery'];cov_311fiay8r().s[162]++;if(Array.isArray(notInQueryObject['$nin'])){cov_311fiay8r().b[32][0]++;cov_311fiay8r().s[163]++;notInQueryObject['$nin']=notInQueryObject['$nin'].concat(values);}else{cov_311fiay8r().b[32][1]++;cov_311fiay8r().s[164]++;notInQueryObject['$nin']=values;}}// Replaces a $notInQuery clause by running the subquery, if there is an
// $notInQuery clause.
// The $notInQuery clause turns into a $nin with values that are just
// pointers to the objects returned in the subquery.
cov_311fiay8r().s[165]++;RestQuery.prototype.replaceNotInQuery=function(){cov_311fiay8r().f[42]++;var notInQueryObject=(cov_311fiay8r().s[166]++,findObjectWithKey(this.restWhere,'$notInQuery'));cov_311fiay8r().s[167]++;if(!notInQueryObject){cov_311fiay8r().b[33][0]++;cov_311fiay8r().s[168]++;return;}else{cov_311fiay8r().b[33][1]++;}// The notInQuery value must have precisely two keys - where and className
var notInQueryValue=(cov_311fiay8r().s[169]++,notInQueryObject['$notInQuery']);cov_311fiay8r().s[170]++;if((cov_311fiay8r().b[35][0]++,!notInQueryValue.where)||(cov_311fiay8r().b[35][1]++,!notInQueryValue.className)){cov_311fiay8r().b[34][0]++;cov_311fiay8r().s[171]++;throw new Parse.Error(Parse.Error.INVALID_QUERY,'improper usage of $notInQuery');}else{cov_311fiay8r().b[34][1]++;}const additionalOptions=(cov_311fiay8r().s[172]++,{redirectClassNameForKey:notInQueryValue.redirectClassNameForKey});cov_311fiay8r().s[173]++;if(this.restOptions.subqueryReadPreference){cov_311fiay8r().b[36][0]++;cov_311fiay8r().s[174]++;additionalOptions.readPreference=this.restOptions.subqueryReadPreference;cov_311fiay8r().s[175]++;additionalOptions.subqueryReadPreference=this.restOptions.subqueryReadPreference;}else{cov_311fiay8r().b[36][1]++;cov_311fiay8r().s[176]++;if(this.restOptions.readPreference){cov_311fiay8r().b[37][0]++;cov_311fiay8r().s[177]++;additionalOptions.readPreference=this.restOptions.readPreference;}else{cov_311fiay8r().b[37][1]++;}}var subquery=(cov_311fiay8r().s[178]++,new RestQuery(this.config,this.auth,notInQueryValue.className,notInQueryValue.where,additionalOptions));cov_311fiay8r().s[179]++;return subquery.execute().then(response=>{cov_311fiay8r().f[43]++;cov_311fiay8r().s[180]++;transformNotInQuery(notInQueryObject,subquery.className,response.results);// Recurse to repeat
cov_311fiay8r().s[181]++;return this.replaceNotInQuery();});};// Used to get the deepest object from json using dot notation.
cov_311fiay8r().s[182]++;const getDeepestObjectFromKey=(json,key,idx,src)=>{cov_311fiay8r().f[44]++;cov_311fiay8r().s[183]++;if(key in json){cov_311fiay8r().b[38][0]++;cov_311fiay8r().s[184]++;return json[key];}else{cov_311fiay8r().b[38][1]++;}cov_311fiay8r().s[185]++;src.splice(1);// Exit Early
};cov_311fiay8r().s[186]++;const transformSelect=(selectObject,key,objects)=>{cov_311fiay8r().f[45]++;var values=(cov_311fiay8r().s[187]++,[]);cov_311fiay8r().s[188]++;for(var result of objects){cov_311fiay8r().s[189]++;values.push(key.split('.').reduce(getDeepestObjectFromKey,result));}cov_311fiay8r().s[190]++;delete selectObject['$select'];cov_311fiay8r().s[191]++;if(Array.isArray(selectObject['$in'])){cov_311fiay8r().b[39][0]++;cov_311fiay8r().s[192]++;selectObject['$in']=selectObject['$in'].concat(values);}else{cov_311fiay8r().b[39][1]++;cov_311fiay8r().s[193]++;selectObject['$in']=values;}};// Replaces a $select clause by running the subquery, if there is a
// $select clause.
// The $select clause turns into an $in with values selected out of
// the subquery.
// Returns a possible-promise.
cov_311fiay8r().s[194]++;RestQuery.prototype.replaceSelect=function(){cov_311fiay8r().f[46]++;var selectObject=(cov_311fiay8r().s[195]++,findObjectWithKey(this.restWhere,'$select'));cov_311fiay8r().s[196]++;if(!selectObject){cov_311fiay8r().b[40][0]++;cov_311fiay8r().s[197]++;return;}else{cov_311fiay8r().b[40][1]++;}// The select value must have precisely two keys - query and key
var selectValue=(cov_311fiay8r().s[198]++,selectObject['$select']);// iOS SDK don't send where if not set, let it pass
cov_311fiay8r().s[199]++;if((cov_311fiay8r().b[42][0]++,!selectValue.query)||(cov_311fiay8r().b[42][1]++,!selectValue.key)||(cov_311fiay8r().b[42][2]++,typeof selectValue.query!=='object')||(cov_311fiay8r().b[42][3]++,!selectValue.query.className)||(cov_311fiay8r().b[42][4]++,Object.keys(selectValue).length!==2)){cov_311fiay8r().b[41][0]++;cov_311fiay8r().s[200]++;throw new Parse.Error(Parse.Error.INVALID_QUERY,'improper usage of $select');}else{cov_311fiay8r().b[41][1]++;}const additionalOptions=(cov_311fiay8r().s[201]++,{redirectClassNameForKey:selectValue.query.redirectClassNameForKey});cov_311fiay8r().s[202]++;if(this.restOptions.subqueryReadPreference){cov_311fiay8r().b[43][0]++;cov_311fiay8r().s[203]++;additionalOptions.readPreference=this.restOptions.subqueryReadPreference;cov_311fiay8r().s[204]++;additionalOptions.subqueryReadPreference=this.restOptions.subqueryReadPreference;}else{cov_311fiay8r().b[43][1]++;cov_311fiay8r().s[205]++;if(this.restOptions.readPreference){cov_311fiay8r().b[44][0]++;cov_311fiay8r().s[206]++;additionalOptions.readPreference=this.restOptions.readPreference;}else{cov_311fiay8r().b[44][1]++;}}var subquery=(cov_311fiay8r().s[207]++,new RestQuery(this.config,this.auth,selectValue.query.className,selectValue.query.where,additionalOptions));cov_311fiay8r().s[208]++;return subquery.execute().then(response=>{cov_311fiay8r().f[47]++;cov_311fiay8r().s[209]++;transformSelect(selectObject,selectValue.key,response.results);// Keep replacing $select clauses
cov_311fiay8r().s[210]++;return this.replaceSelect();});};cov_311fiay8r().s[211]++;const transformDontSelect=(dontSelectObject,key,objects)=>{cov_311fiay8r().f[48]++;var values=(cov_311fiay8r().s[212]++,[]);cov_311fiay8r().s[213]++;for(var result of objects){cov_311fiay8r().s[214]++;values.push(key.split('.').reduce(getDeepestObjectFromKey,result));}cov_311fiay8r().s[215]++;delete dontSelectObject['$dontSelect'];cov_311fiay8r().s[216]++;if(Array.isArray(dontSelectObject['$nin'])){cov_311fiay8r().b[45][0]++;cov_311fiay8r().s[217]++;dontSelectObject['$nin']=dontSelectObject['$nin'].concat(values);}else{cov_311fiay8r().b[45][1]++;cov_311fiay8r().s[218]++;dontSelectObject['$nin']=values;}};// Replaces a $dontSelect clause by running the subquery, if there is a
// $dontSelect clause.
// The $dontSelect clause turns into an $nin with values selected out of
// the subquery.
// Returns a possible-promise.
cov_311fiay8r().s[219]++;RestQuery.prototype.replaceDontSelect=function(){cov_311fiay8r().f[49]++;var dontSelectObject=(cov_311fiay8r().s[220]++,findObjectWithKey(this.restWhere,'$dontSelect'));cov_311fiay8r().s[221]++;if(!dontSelectObject){cov_311fiay8r().b[46][0]++;cov_311fiay8r().s[222]++;return;}else{cov_311fiay8r().b[46][1]++;}// The dontSelect value must have precisely two keys - query and key
var dontSelectValue=(cov_311fiay8r().s[223]++,dontSelectObject['$dontSelect']);cov_311fiay8r().s[224]++;if((cov_311fiay8r().b[48][0]++,!dontSelectValue.query)||(cov_311fiay8r().b[48][1]++,!dontSelectValue.key)||(cov_311fiay8r().b[48][2]++,typeof dontSelectValue.query!=='object')||(cov_311fiay8r().b[48][3]++,!dontSelectValue.query.className)||(cov_311fiay8r().b[48][4]++,Object.keys(dontSelectValue).length!==2)){cov_311fiay8r().b[47][0]++;cov_311fiay8r().s[225]++;throw new Parse.Error(Parse.Error.INVALID_QUERY,'improper usage of $dontSelect');}else{cov_311fiay8r().b[47][1]++;}const additionalOptions=(cov_311fiay8r().s[226]++,{redirectClassNameForKey:dontSelectValue.query.redirectClassNameForKey});cov_311fiay8r().s[227]++;if(this.restOptions.subqueryReadPreference){cov_311fiay8r().b[49][0]++;cov_311fiay8r().s[228]++;additionalOptions.readPreference=this.restOptions.subqueryReadPreference;cov_311fiay8r().s[229]++;additionalOptions.subqueryReadPreference=this.restOptions.subqueryReadPreference;}else{cov_311fiay8r().b[49][1]++;cov_311fiay8r().s[230]++;if(this.restOptions.readPreference){cov_311fiay8r().b[50][0]++;cov_311fiay8r().s[231]++;additionalOptions.readPreference=this.restOptions.readPreference;}else{cov_311fiay8r().b[50][1]++;}}var subquery=(cov_311fiay8r().s[232]++,new RestQuery(this.config,this.auth,dontSelectValue.query.className,dontSelectValue.query.where,additionalOptions));cov_311fiay8r().s[233]++;return subquery.execute().then(response=>{cov_311fiay8r().f[50]++;cov_311fiay8r().s[234]++;transformDontSelect(dontSelectObject,dontSelectValue.key,response.results);// Keep replacing $dontSelect clauses
cov_311fiay8r().s[235]++;return this.replaceDontSelect();});};cov_311fiay8r().s[236]++;const cleanResultAuthData=function(result){cov_311fiay8r().f[51]++;cov_311fiay8r().s[237]++;delete result.password;cov_311fiay8r().s[238]++;if(result.authData){cov_311fiay8r().b[51][0]++;cov_311fiay8r().s[239]++;Object.keys(result.authData).forEach(provider=>{cov_311fiay8r().f[52]++;cov_311fiay8r().s[240]++;if(result.authData[provider]===null){cov_311fiay8r().b[52][0]++;cov_311fiay8r().s[241]++;delete result.authData[provider];}else{cov_311fiay8r().b[52][1]++;}});cov_311fiay8r().s[242]++;if(Object.keys(result.authData).length==0){cov_311fiay8r().b[53][0]++;cov_311fiay8r().s[243]++;delete result.authData;}else{cov_311fiay8r().b[53][1]++;}}else{cov_311fiay8r().b[51][1]++;}};cov_311fiay8r().s[244]++;const replaceEqualityConstraint=constraint=>{cov_311fiay8r().f[53]++;cov_311fiay8r().s[245]++;if(typeof constraint!=='object'){cov_311fiay8r().b[54][0]++;cov_311fiay8r().s[246]++;return constraint;}else{cov_311fiay8r().b[54][1]++;}const equalToObject=(cov_311fiay8r().s[247]++,{});let hasDirectConstraint=(cov_311fiay8r().s[248]++,false);let hasOperatorConstraint=(cov_311fiay8r().s[249]++,false);cov_311fiay8r().s[250]++;for(const key in constraint){cov_311fiay8r().s[251]++;if(key.indexOf('$')!==0){cov_311fiay8r().b[55][0]++;cov_311fiay8r().s[252]++;hasDirectConstraint=true;cov_311fiay8r().s[253]++;equalToObject[key]=constraint[key];}else{cov_311fiay8r().b[55][1]++;cov_311fiay8r().s[254]++;hasOperatorConstraint=true;}}cov_311fiay8r().s[255]++;if((cov_311fiay8r().b[57][0]++,hasDirectConstraint)&&(cov_311fiay8r().b[57][1]++,hasOperatorConstraint)){cov_311fiay8r().b[56][0]++;cov_311fiay8r().s[256]++;constraint['$eq']=equalToObject;cov_311fiay8r().s[257]++;Object.keys(equalToObject).forEach(key=>{cov_311fiay8r().f[54]++;cov_311fiay8r().s[258]++;delete constraint[key];});}else{cov_311fiay8r().b[56][1]++;}cov_311fiay8r().s[259]++;return constraint;};cov_311fiay8r().s[260]++;RestQuery.prototype.replaceEquality=function(){cov_311fiay8r().f[55]++;cov_311fiay8r().s[261]++;if(typeof this.restWhere!=='object'){cov_311fiay8r().b[58][0]++;cov_311fiay8r().s[262]++;return;}else{cov_311fiay8r().b[58][1]++;}cov_311fiay8r().s[263]++;for(const key in this.restWhere){cov_311fiay8r().s[264]++;this.restWhere[key]=replaceEqualityConstraint(this.restWhere[key]);}};// Returns a promise for whether it was successful.
// Populates this.response with an object that only has 'results'.
cov_311fiay8r().s[265]++;RestQuery.prototype.runFind=function(options=(cov_311fiay8r().b[59][0]++,{})){cov_311fiay8r().f[56]++;cov_311fiay8r().s[266]++;if(this.findOptions.limit===0){cov_311fiay8r().b[60][0]++;cov_311fiay8r().s[267]++;this.response={results:[]};cov_311fiay8r().s[268]++;return Promise.resolve();}else{cov_311fiay8r().b[60][1]++;}const findOptions=(cov_311fiay8r().s[269]++,Object.assign({},this.findOptions));cov_311fiay8r().s[270]++;if(this.keys){cov_311fiay8r().b[61][0]++;cov_311fiay8r().s[271]++;findOptions.keys=this.keys.map(key=>{cov_311fiay8r().f[57]++;cov_311fiay8r().s[272]++;return key.split('.')[0];});}else{cov_311fiay8r().b[61][1]++;}cov_311fiay8r().s[273]++;if(options.op){cov_311fiay8r().b[62][0]++;cov_311fiay8r().s[274]++;findOptions.op=options.op;}else{cov_311fiay8r().b[62][1]++;}cov_311fiay8r().s[275]++;return this.config.database.find(this.className,this.restWhere,findOptions,this.auth).then(results=>{cov_311fiay8r().f[58]++;cov_311fiay8r().s[276]++;if((cov_311fiay8r().b[64][0]++,this.className==='_User')&&(cov_311fiay8r().b[64][1]++,!findOptions.explain)){cov_311fiay8r().b[63][0]++;cov_311fiay8r().s[277]++;for(var result of results){cov_311fiay8r().s[278]++;cleanResultAuthData(result);}}else{cov_311fiay8r().b[63][1]++;}cov_311fiay8r().s[279]++;this.config.filesController.expandFilesInObject(this.config,results);cov_311fiay8r().s[280]++;if(this.redirectClassName){cov_311fiay8r().b[65][0]++;cov_311fiay8r().s[281]++;for(var r of results){cov_311fiay8r().s[282]++;r.className=this.redirectClassName;}}else{cov_311fiay8r().b[65][1]++;}cov_311fiay8r().s[283]++;this.response={results:results};});};// Returns a promise for whether it was successful.
// Populates this.response.count with the count
cov_311fiay8r().s[284]++;RestQuery.prototype.runCount=function(){cov_311fiay8r().f[59]++;cov_311fiay8r().s[285]++;if(!this.doCount){cov_311fiay8r().b[66][0]++;cov_311fiay8r().s[286]++;return;}else{cov_311fiay8r().b[66][1]++;}cov_311fiay8r().s[287]++;this.findOptions.count=true;cov_311fiay8r().s[288]++;delete this.findOptions.skip;cov_311fiay8r().s[289]++;delete this.findOptions.limit;cov_311fiay8r().s[290]++;return this.config.database.find(this.className,this.restWhere,this.findOptions).then(c=>{cov_311fiay8r().f[60]++;cov_311fiay8r().s[291]++;this.response.count=c;});};// Augments this.response with all pointers on an object
cov_311fiay8r().s[292]++;RestQuery.prototype.handleIncludeAll=function(){cov_311fiay8r().f[61]++;cov_311fiay8r().s[293]++;if(!this.includeAll){cov_311fiay8r().b[67][0]++;cov_311fiay8r().s[294]++;return;}else{cov_311fiay8r().b[67][1]++;}cov_311fiay8r().s[295]++;return this.config.database.loadSchema().then(schemaController=>{cov_311fiay8r().f[62]++;cov_311fiay8r().s[296]++;return schemaController.getOneSchema(this.className);}).then(schema=>{cov_311fiay8r().f[63]++;const includeFields=(cov_311fiay8r().s[297]++,[]);const keyFields=(cov_311fiay8r().s[298]++,[]);cov_311fiay8r().s[299]++;for(const field in schema.fields){cov_311fiay8r().s[300]++;if((cov_311fiay8r().b[69][0]++,schema.fields[field].type)&&(cov_311fiay8r().b[69][1]++,schema.fields[field].type==='Pointer')||(cov_311fiay8r().b[69][2]++,schema.fields[field].type)&&(cov_311fiay8r().b[69][3]++,schema.fields[field].type==='Array')){cov_311fiay8r().b[68][0]++;cov_311fiay8r().s[301]++;includeFields.push([field]);cov_311fiay8r().s[302]++;keyFields.push(field);}else{cov_311fiay8r().b[68][1]++;}}// Add fields to include, keys, remove dups
cov_311fiay8r().s[303]++;this.include=[...new Set([...this.include,...includeFields])];// if this.keys not set, then all keys are already included
cov_311fiay8r().s[304]++;if(this.keys){cov_311fiay8r().b[70][0]++;cov_311fiay8r().s[305]++;this.keys=[...new Set([...this.keys,...keyFields])];}else{cov_311fiay8r().b[70][1]++;}});};// Updates property `this.keys` to contain all keys but the ones unselected.
cov_311fiay8r().s[306]++;RestQuery.prototype.handleExcludeKeys=function(){cov_311fiay8r().f[64]++;cov_311fiay8r().s[307]++;if(!this.excludeKeys){cov_311fiay8r().b[71][0]++;cov_311fiay8r().s[308]++;return;}else{cov_311fiay8r().b[71][1]++;}cov_311fiay8r().s[309]++;if(this.keys){cov_311fiay8r().b[72][0]++;cov_311fiay8r().s[310]++;this.keys=this.keys.filter(k=>{cov_311fiay8r().f[65]++;cov_311fiay8r().s[311]++;return!this.excludeKeys.includes(k);});cov_311fiay8r().s[312]++;return;}else{cov_311fiay8r().b[72][1]++;}cov_311fiay8r().s[313]++;return this.config.database.loadSchema().then(schemaController=>{cov_311fiay8r().f[66]++;cov_311fiay8r().s[314]++;return schemaController.getOneSchema(this.className);}).then(schema=>{cov_311fiay8r().f[67]++;const fields=(cov_311fiay8r().s[315]++,Object.keys(schema.fields));cov_311fiay8r().s[316]++;this.keys=fields.filter(k=>{cov_311fiay8r().f[68]++;cov_311fiay8r().s[317]++;return!this.excludeKeys.includes(k);});});};// Augments this.response with data at the paths provided in this.include.
cov_311fiay8r().s[318]++;RestQuery.prototype.handleInclude=function(){cov_311fiay8r().f[69]++;cov_311fiay8r().s[319]++;if(this.include.length==0){cov_311fiay8r().b[73][0]++;cov_311fiay8r().s[320]++;return;}else{cov_311fiay8r().b[73][1]++;}var pathResponse=(cov_311fiay8r().s[321]++,includePath(this.config,this.auth,this.response,this.include[0],this.restOptions));cov_311fiay8r().s[322]++;if(pathResponse.then){cov_311fiay8r().b[74][0]++;cov_311fiay8r().s[323]++;return pathResponse.then(newResponse=>{cov_311fiay8r().f[70]++;cov_311fiay8r().s[324]++;this.response=newResponse;cov_311fiay8r().s[325]++;this.include=this.include.slice(1);cov_311fiay8r().s[326]++;return this.handleInclude();});}else{cov_311fiay8r().b[74][1]++;cov_311fiay8r().s[327]++;if(this.include.length>0){cov_311fiay8r().b[75][0]++;cov_311fiay8r().s[328]++;this.include=this.include.slice(1);cov_311fiay8r().s[329]++;return this.handleInclude();}else{cov_311fiay8r().b[75][1]++;}}cov_311fiay8r().s[330]++;return pathResponse;};//Returns a promise of a processed set of results
cov_311fiay8r().s[331]++;RestQuery.prototype.runAfterFindTrigger=function(){cov_311fiay8r().f[71]++;cov_311fiay8r().s[332]++;if(!this.response){cov_311fiay8r().b[76][0]++;cov_311fiay8r().s[333]++;return;}else{cov_311fiay8r().b[76][1]++;}cov_311fiay8r().s[334]++;if(!this.runAfterFind){cov_311fiay8r().b[77][0]++;cov_311fiay8r().s[335]++;return;}else{cov_311fiay8r().b[77][1]++;}// Avoid doing any setup for triggers if there is no 'afterFind' trigger for this class.
const hasAfterFindHook=(cov_311fiay8r().s[336]++,triggers.triggerExists(this.className,triggers.Types.afterFind,this.config.applicationId));cov_311fiay8r().s[337]++;if(!hasAfterFindHook){cov_311fiay8r().b[78][0]++;cov_311fiay8r().s[338]++;return Promise.resolve();}else{cov_311fiay8r().b[78][1]++;}// Skip Aggregate and Distinct Queries
cov_311fiay8r().s[339]++;if((cov_311fiay8r().b[80][0]++,this.findOptions.pipeline)||(cov_311fiay8r().b[80][1]++,this.findOptions.distinct)){cov_311fiay8r().b[79][0]++;cov_311fiay8r().s[340]++;return Promise.resolve();}else{cov_311fiay8r().b[79][1]++;}const json=(cov_311fiay8r().s[341]++,Object.assign({},this.restOptions));cov_311fiay8r().s[342]++;json.where=this.restWhere;const parseQuery=(cov_311fiay8r().s[343]++,new Parse.Query(this.className));cov_311fiay8r().s[344]++;parseQuery.withJSON(json);// Run afterFind trigger and set the new results
cov_311fiay8r().s[345]++;return triggers.maybeRunAfterFindTrigger(triggers.Types.afterFind,this.auth,this.className,this.response.results,this.config,parseQuery,this.context).then(results=>{cov_311fiay8r().f[72]++;cov_311fiay8r().s[346]++;// Ensure we properly set the className back
if(this.redirectClassName){cov_311fiay8r().b[81][0]++;cov_311fiay8r().s[347]++;this.response.results=results.map(object=>{cov_311fiay8r().f[73]++;cov_311fiay8r().s[348]++;if(object instanceof Parse.Object){cov_311fiay8r().b[82][0]++;cov_311fiay8r().s[349]++;object=object.toJSON();}else{cov_311fiay8r().b[82][1]++;}cov_311fiay8r().s[350]++;object.className=this.redirectClassName;cov_311fiay8r().s[351]++;return object;});}else{cov_311fiay8r().b[81][1]++;cov_311fiay8r().s[352]++;this.response.results=results;}});};// Adds included values to the response.
// Path is a list of field names.
// Returns a promise for an augmented response.
function includePath(config,auth,response,path,restOptions=(cov_311fiay8r().b[83][0]++,{})){cov_311fiay8r().f[74]++;var pointers=(cov_311fiay8r().s[353]++,findPointers(response.results,path));cov_311fiay8r().s[354]++;if(pointers.length==0){cov_311fiay8r().b[84][0]++;cov_311fiay8r().s[355]++;return response;}else{cov_311fiay8r().b[84][1]++;}const pointersHash=(cov_311fiay8r().s[356]++,{});cov_311fiay8r().s[357]++;for(var pointer of pointers){cov_311fiay8r().s[358]++;if(!pointer){cov_311fiay8r().b[85][0]++;cov_311fiay8r().s[359]++;continue;}else{cov_311fiay8r().b[85][1]++;}const className=(cov_311fiay8r().s[360]++,pointer.className);// only include the good pointers
cov_311fiay8r().s[361]++;if(className){cov_311fiay8r().b[86][0]++;cov_311fiay8r().s[362]++;pointersHash[className]=(cov_311fiay8r().b[87][0]++,pointersHash[className])||(cov_311fiay8r().b[87][1]++,new Set());cov_311fiay8r().s[363]++;pointersHash[className].add(pointer.objectId);}else{cov_311fiay8r().b[86][1]++;}}const includeRestOptions=(cov_311fiay8r().s[364]++,{});cov_311fiay8r().s[365]++;if(restOptions.keys){cov_311fiay8r().b[88][0]++;const keys=(cov_311fiay8r().s[366]++,new Set(restOptions.keys.split(',')));const keySet=(cov_311fiay8r().s[367]++,Array.from(keys).reduce((set,key)=>{cov_311fiay8r().f[75]++;const keyPath=(cov_311fiay8r().s[368]++,key.split('.'));let i=(cov_311fiay8r().s[369]++,0);cov_311fiay8r().s[370]++;for(i;i<path.length;i++){cov_311fiay8r().s[371]++;if(path[i]!=keyPath[i]){cov_311fiay8r().b[89][0]++;cov_311fiay8r().s[372]++;return set;}else{cov_311fiay8r().b[89][1]++;}}cov_311fiay8r().s[373]++;if(i<keyPath.length){cov_311fiay8r().b[90][0]++;cov_311fiay8r().s[374]++;set.add(keyPath[i]);}else{cov_311fiay8r().b[90][1]++;}cov_311fiay8r().s[375]++;return set;},new Set()));cov_311fiay8r().s[376]++;if(keySet.size>0){cov_311fiay8r().b[91][0]++;cov_311fiay8r().s[377]++;includeRestOptions.keys=Array.from(keySet).join(',');}else{cov_311fiay8r().b[91][1]++;}}else{cov_311fiay8r().b[88][1]++;}cov_311fiay8r().s[378]++;if(restOptions.excludeKeys){cov_311fiay8r().b[92][0]++;const excludeKeys=(cov_311fiay8r().s[379]++,new Set(restOptions.excludeKeys.split(',')));const excludeKeySet=(cov_311fiay8r().s[380]++,Array.from(excludeKeys).reduce((set,key)=>{cov_311fiay8r().f[76]++;const keyPath=(cov_311fiay8r().s[381]++,key.split('.'));let i=(cov_311fiay8r().s[382]++,0);cov_311fiay8r().s[383]++;for(i;i<path.length;i++){cov_311fiay8r().s[384]++;if(path[i]!=keyPath[i]){cov_311fiay8r().b[93][0]++;cov_311fiay8r().s[385]++;return set;}else{cov_311fiay8r().b[93][1]++;}}cov_311fiay8r().s[386]++;if(i==keyPath.length-1){cov_311fiay8r().b[94][0]++;cov_311fiay8r().s[387]++;set.add(keyPath[i]);}else{cov_311fiay8r().b[94][1]++;}cov_311fiay8r().s[388]++;return set;},new Set()));cov_311fiay8r().s[389]++;if(excludeKeySet.size>0){cov_311fiay8r().b[95][0]++;cov_311fiay8r().s[390]++;includeRestOptions.excludeKeys=Array.from(excludeKeySet).join(',');}else{cov_311fiay8r().b[95][1]++;}}else{cov_311fiay8r().b[92][1]++;}cov_311fiay8r().s[391]++;if(restOptions.includeReadPreference){cov_311fiay8r().b[96][0]++;cov_311fiay8r().s[392]++;includeRestOptions.readPreference=restOptions.includeReadPreference;cov_311fiay8r().s[393]++;includeRestOptions.includeReadPreference=restOptions.includeReadPreference;}else{cov_311fiay8r().b[96][1]++;cov_311fiay8r().s[394]++;if(restOptions.readPreference){cov_311fiay8r().b[97][0]++;cov_311fiay8r().s[395]++;includeRestOptions.readPreference=restOptions.readPreference;}else{cov_311fiay8r().b[97][1]++;}}const queryPromises=(cov_311fiay8r().s[396]++,Object.keys(pointersHash).map(className=>{cov_311fiay8r().f[77]++;const objectIds=(cov_311fiay8r().s[397]++,Array.from(pointersHash[className]));let where;cov_311fiay8r().s[398]++;if(objectIds.length===1){cov_311fiay8r().b[98][0]++;cov_311fiay8r().s[399]++;where={objectId:objectIds[0]};}else{cov_311fiay8r().b[98][1]++;cov_311fiay8r().s[400]++;where={objectId:{$in:objectIds}};}var query=(cov_311fiay8r().s[401]++,new RestQuery(config,auth,className,where,includeRestOptions));cov_311fiay8r().s[402]++;return query.execute({op:'get'}).then(results=>{cov_311fiay8r().f[78]++;cov_311fiay8r().s[403]++;results.className=className;cov_311fiay8r().s[404]++;return Promise.resolve(results);});}));// Get the objects for all these object ids
cov_311fiay8r().s[405]++;return Promise.all(queryPromises).then(responses=>{cov_311fiay8r().f[79]++;var replace=(cov_311fiay8r().s[406]++,responses.reduce((replace,includeResponse)=>{cov_311fiay8r().f[80]++;cov_311fiay8r().s[407]++;for(var obj of includeResponse.results){cov_311fiay8r().s[408]++;obj.__type='Object';cov_311fiay8r().s[409]++;obj.className=includeResponse.className;cov_311fiay8r().s[410]++;if((cov_311fiay8r().b[100][0]++,obj.className=='_User')&&(cov_311fiay8r().b[100][1]++,!auth.isMaster)){cov_311fiay8r().b[99][0]++;cov_311fiay8r().s[411]++;delete obj.sessionToken;cov_311fiay8r().s[412]++;delete obj.authData;}else{cov_311fiay8r().b[99][1]++;}cov_311fiay8r().s[413]++;replace[obj.objectId]=obj;}cov_311fiay8r().s[414]++;return replace;},{}));var resp=(cov_311fiay8r().s[415]++,{results:replacePointers(response.results,path,replace)});cov_311fiay8r().s[416]++;if(response.count){cov_311fiay8r().b[101][0]++;cov_311fiay8r().s[417]++;resp.count=response.count;}else{cov_311fiay8r().b[101][1]++;}cov_311fiay8r().s[418]++;return resp;});}// Object may be a list of REST-format object to find pointers in, or
// it may be a single object.
// If the path yields things that aren't pointers, this throws an error.
// Path is a list of fields to search into.
// Returns a list of pointers in REST format.
function findPointers(object,path){cov_311fiay8r().f[81]++;cov_311fiay8r().s[419]++;if(object instanceof Array){cov_311fiay8r().b[102][0]++;var answer=(cov_311fiay8r().s[420]++,[]);cov_311fiay8r().s[421]++;for(var x of object){cov_311fiay8r().s[422]++;answer=answer.concat(findPointers(x,path));}cov_311fiay8r().s[423]++;return answer;}else{cov_311fiay8r().b[102][1]++;}cov_311fiay8r().s[424]++;if((cov_311fiay8r().b[104][0]++,typeof object!=='object')||(cov_311fiay8r().b[104][1]++,!object)){cov_311fiay8r().b[103][0]++;cov_311fiay8r().s[425]++;return[];}else{cov_311fiay8r().b[103][1]++;}cov_311fiay8r().s[426]++;if(path.length==0){cov_311fiay8r().b[105][0]++;cov_311fiay8r().s[427]++;if((cov_311fiay8r().b[107][0]++,object===null)||(cov_311fiay8r().b[107][1]++,object.__type=='Pointer')){cov_311fiay8r().b[106][0]++;cov_311fiay8r().s[428]++;return[object];}else{cov_311fiay8r().b[106][1]++;}cov_311fiay8r().s[429]++;return[];}else{cov_311fiay8r().b[105][1]++;}var subobject=(cov_311fiay8r().s[430]++,object[path[0]]);cov_311fiay8r().s[431]++;if(!subobject){cov_311fiay8r().b[108][0]++;cov_311fiay8r().s[432]++;return[];}else{cov_311fiay8r().b[108][1]++;}cov_311fiay8r().s[433]++;return findPointers(subobject,path.slice(1));}// Object may be a list of REST-format objects to replace pointers
// in, or it may be a single object.
// Path is a list of fields to search into.
// replace is a map from object id -> object.
// Returns something analogous to object, but with the appropriate
// pointers inflated.
function replacePointers(object,path,replace){cov_311fiay8r().f[82]++;cov_311fiay8r().s[434]++;if(object instanceof Array){cov_311fiay8r().b[109][0]++;cov_311fiay8r().s[435]++;return object.map(obj=>{cov_311fiay8r().f[83]++;cov_311fiay8r().s[436]++;return replacePointers(obj,path,replace);}).filter(obj=>{cov_311fiay8r().f[84]++;cov_311fiay8r().s[437]++;return typeof obj!=='undefined';});}else{cov_311fiay8r().b[109][1]++;}cov_311fiay8r().s[438]++;if((cov_311fiay8r().b[111][0]++,typeof object!=='object')||(cov_311fiay8r().b[111][1]++,!object)){cov_311fiay8r().b[110][0]++;cov_311fiay8r().s[439]++;return object;}else{cov_311fiay8r().b[110][1]++;}cov_311fiay8r().s[440]++;if(path.length===0){cov_311fiay8r().b[112][0]++;cov_311fiay8r().s[441]++;if((cov_311fiay8r().b[114][0]++,object)&&(cov_311fiay8r().b[114][1]++,object.__type==='Pointer')){cov_311fiay8r().b[113][0]++;cov_311fiay8r().s[442]++;return replace[object.objectId];}else{cov_311fiay8r().b[113][1]++;}cov_311fiay8r().s[443]++;return object;}else{cov_311fiay8r().b[112][1]++;}var subobject=(cov_311fiay8r().s[444]++,object[path[0]]);cov_311fiay8r().s[445]++;if(!subobject){cov_311fiay8r().b[115][0]++;cov_311fiay8r().s[446]++;return object;}else{cov_311fiay8r().b[115][1]++;}var newsub=(cov_311fiay8r().s[447]++,replacePointers(subobject,path.slice(1),replace));var answer=(cov_311fiay8r().s[448]++,{});cov_311fiay8r().s[449]++;for(var key in object){cov_311fiay8r().s[450]++;if(key==path[0]){cov_311fiay8r().b[116][0]++;cov_311fiay8r().s[451]++;answer[key]=newsub;}else{cov_311fiay8r().b[116][1]++;cov_311fiay8r().s[452]++;answer[key]=object[key];}}cov_311fiay8r().s[453]++;return answer;}// Finds a subobject that has the given key, if there is one.
// Returns undefined otherwise.
function findObjectWithKey(root,key){cov_311fiay8r().f[85]++;cov_311fiay8r().s[454]++;if(typeof root!=='object'){cov_311fiay8r().b[117][0]++;cov_311fiay8r().s[455]++;return;}else{cov_311fiay8r().b[117][1]++;}cov_311fiay8r().s[456]++;if(root instanceof Array){cov_311fiay8r().b[118][0]++;cov_311fiay8r().s[457]++;for(var item of root){const answer=(cov_311fiay8r().s[458]++,findObjectWithKey(item,key));cov_311fiay8r().s[459]++;if(answer){cov_311fiay8r().b[119][0]++;cov_311fiay8r().s[460]++;return answer;}else{cov_311fiay8r().b[119][1]++;}}}else{cov_311fiay8r().b[118][1]++;}cov_311fiay8r().s[461]++;if((cov_311fiay8r().b[121][0]++,root)&&(cov_311fiay8r().b[121][1]++,root[key])){cov_311fiay8r().b[120][0]++;cov_311fiay8r().s[462]++;return root;}else{cov_311fiay8r().b[120][1]++;}cov_311fiay8r().s[463]++;for(var subkey in root){const answer=(cov_311fiay8r().s[464]++,findObjectWithKey(root[subkey],key));cov_311fiay8r().s[465]++;if(answer){cov_311fiay8r().b[122][0]++;cov_311fiay8r().s[466]++;return answer;}else{cov_311fiay8r().b[122][1]++;}}}cov_311fiay8r().s[467]++;module.exports=RestQuery;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,