"use strict";function cov_267opt4ark(){var path="/parse-server/lib/GraphQL/ParseGraphQLSchema.js";var hash="7b79a31857b867542a000b19ca5c750bc6bc829b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/GraphQL/ParseGraphQLSchema.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:36}},"2":{start:{line:8,column:12},end:{line:8,column:57}},"3":{start:{line:10,column:15},end:{line:10,column:33}},"4":{start:{line:12,column:14},end:{line:12,column:46}},"5":{start:{line:14,column:12},end:{line:14,column:27}},"6":{start:{line:16,column:13},end:{line:16,column:44}},"7":{start:{line:18,column:25},end:{line:18,column:80}},"8":{start:{line:20,column:26},end:{line:20,column:91}},"9":{start:{line:22,column:22},end:{line:22,column:83}},"10":{start:{line:24,column:24},end:{line:24,column:87}},"11":{start:{line:26,column:26},end:{line:26,column:91}},"12":{start:{line:28,column:28},end:{line:28,column:95}},"13":{start:{line:30,column:30},end:{line:30,column:99}},"14":{start:{line:32,column:30},end:{line:32,column:103}},"15":{start:{line:34,column:26},end:{line:34,column:94}},"16":{start:{line:36,column:19},end:{line:36,column:83}},"17":{start:{line:38,column:25},end:{line:38,column:55}},"18":{start:{line:40,column:23},end:{line:40,column:85}},"19":{start:{line:42,column:18},end:{line:42,column:75}},"20":{start:{line:44,column:16},end:{line:44,column:38}},"21":{start:{line:46,column:25},end:{line:46,column:89}},"22":{start:{line:48,column:49},end:{line:48,column:96}},"23":{start:{line:48,column:84},end:{line:48,column:96}},"24":{start:{line:48,column:121},end:{line:48,column:134}},"25":{start:{line:48,column:159},end:{line:48,column:172}},"26":{start:{line:48,column:174},end:{line:48,column:309}},"27":{start:{line:48,column:234},end:{line:48,column:292}},"28":{start:{line:50,column:53},end:{line:50,column:111}},"29":{start:{line:50,column:98},end:{line:50,column:109}},"30":{start:{line:50,column:112},end:{line:50,column:214}},"31":{start:{line:50,column:188},end:{line:50,column:212}},"32":{start:{line:50,column:227},end:{line:50,column:264}},"33":{start:{line:50,column:266},end:{line:50,column:321}},"34":{start:{line:50,column:297},end:{line:50,column:319}},"35":{start:{line:50,column:335},end:{line:50,column:337}},"36":{start:{line:50,column:367},end:{line:50,column:423}},"37":{start:{line:50,column:425},end:{line:50,column:726}},"38":{start:{line:50,column:448},end:{line:50,column:724}},"39":{start:{line:50,column:534},end:{line:50,column:606}},"40":{start:{line:50,column:608},end:{line:50,column:722}},"41":{start:{line:50,column:646},end:{line:50,column:687}},"42":{start:{line:50,column:697},end:{line:50,column:720}},"43":{start:{line:50,column:727},end:{line:50,column:748}},"44":{start:{line:50,column:749},end:{line:50,column:787}},"45":{start:{line:50,column:762},end:{line:50,column:785}},"46":{start:{line:50,column:788},end:{line:50,column:802}},"47":{start:{line:52,column:39},end:{line:52,column:93}},"48":{start:{line:54,column:36},end:{line:54,column:480}},"49":{start:{line:55,column:37},end:{line:55,column:77}},"50":{start:{line:56,column:40},end:{line:56,column:145}},"51":{start:{line:60,column:4},end:{line:60,column:154}},"52":{start:{line:61,column:4},end:{line:61,column:142}},"53":{start:{line:62,column:4},end:{line:62,column:97}},"54":{start:{line:63,column:4},end:{line:63,column:62}},"55":{start:{line:64,column:4},end:{line:64,column:96}},"56":{start:{line:65,column:4},end:{line:65,column:44}},"57":{start:{line:71,column:8},end:{line:71,column:47}},"58":{start:{line:72,column:25},end:{line:72,column:76}},"59":{start:{line:73,column:26},end:{line:73,column:56}},"60":{start:{line:74,column:32},end:{line:74,column:61}},"61":{start:{line:76,column:4},end:{line:82,column:5}},"62":{start:{line:81,column:6},end:{line:81,column:32}},"63":{start:{line:84,column:4},end:{line:84,column:37}},"64":{start:{line:85,column:4},end:{line:85,column:49}},"65":{start:{line:86,column:4},end:{line:86,column:39}},"66":{start:{line:87,column:4},end:{line:87,column:51}},"67":{start:{line:88,column:4},end:{line:88,column:30}},"68":{start:{line:89,column:4},end:{line:89,column:27}},"69":{start:{line:90,column:4},end:{line:90,column:34}},"70":{start:{line:91,column:4},end:{line:91,column:30}},"71":{start:{line:92,column:4},end:{line:92,column:27}},"72":{start:{line:93,column:4},end:{line:93,column:29}},"73":{start:{line:94,column:4},end:{line:94,column:31}},"74":{start:{line:95,column:4},end:{line:95,column:35}},"75":{start:{line:96,column:4},end:{line:96,column:51}},"76":{start:{line:97,column:4},end:{line:97,column:38}},"77":{start:{line:98,column:4},end:{line:98,column:35}},"78":{start:{line:99,column:4},end:{line:99,column:35}},"79":{start:{line:100,column:4},end:{line:100,column:34}},"80":{start:{line:101,column:4},end:{line:101,column:27}},"81":{start:{line:103,column:4},end:{line:125,column:7}},"82":{start:{line:106,column:6},end:{line:112,column:7}},"83":{start:{line:107,column:8},end:{line:111,column:11}},"84":{start:{line:108,column:10},end:{line:110,column:11}},"85":{start:{line:109,column:12},end:{line:109,column:48}},"86":{start:{line:117,column:28},end:{line:117,column:30}},"87":{start:{line:118,column:6},end:{line:120,column:9}},"88":{start:{line:119,column:8},end:{line:119,column:64}},"89":{start:{line:121,column:6},end:{line:121,column:40}},"90":{start:{line:122,column:6},end:{line:122,column:63}},"91":{start:{line:123,column:6},end:{line:123,column:65}},"92":{start:{line:124,column:6},end:{line:124,column:67}},"93":{start:{line:127,column:4},end:{line:127,column:60}},"94":{start:{line:128,column:4},end:{line:128,column:37}},"95":{start:{line:129,column:4},end:{line:129,column:39}},"96":{start:{line:130,column:23},end:{line:130,column:32}},"97":{start:{line:132,column:4},end:{line:139,column:5}},"98":{start:{line:133,column:6},end:{line:137,column:9}},"99":{start:{line:138,column:6},end:{line:138,column:52}},"100":{start:{line:141,column:26},end:{line:141,column:35}},"101":{start:{line:143,column:4},end:{line:150,column:5}},"102":{start:{line:144,column:6},end:{line:148,column:9}},"103":{start:{line:149,column:6},end:{line:149,column:55}},"104":{start:{line:152,column:30},end:{line:152,column:39}},"105":{start:{line:154,column:4},end:{line:161,column:5}},"106":{start:{line:155,column:6},end:{line:159,column:9}},"107":{start:{line:160,column:6},end:{line:160,column:59}},"108":{start:{line:163,column:4},end:{line:168,column:7}},"109":{start:{line:170,column:4},end:{line:270,column:5}},"110":{start:{line:171,column:6},end:{line:171,column:34}},"111":{start:{line:173,column:6},end:{line:240,column:7}},"112":{start:{line:175,column:43},end:{line:175,column:78}},"113":{start:{line:177,column:39},end:{line:189,column:9}},"114":{start:{line:178,column:10},end:{line:188,column:11}},"115":{start:{line:179,column:12},end:{line:183,column:13}},"116":{start:{line:182,column:14},end:{line:182,column:78}},"117":{start:{line:185,column:12},end:{line:187,column:13}},"118":{start:{line:186,column:14},end:{line:186,column:60}},"119":{start:{line:195,column:8},end:{line:207,column:11}},"120":{start:{line:196,column:42},end:{line:196,column:96}},"121":{start:{line:198,column:10},end:{line:200,column:11}},"122":{start:{line:199,column:12},end:{line:199,column:19}},"123":{start:{line:202,column:40},end:{line:202,column:101}},"124":{start:{line:204,column:10},end:{line:206,column:11}},"125":{start:{line:205,column:12},end:{line:205,column:100}},"126":{start:{line:211,column:8},end:{line:227,column:11}},"127":{start:{line:212,column:42},end:{line:212,column:96}},"128":{start:{line:214,column:10},end:{line:216,column:11}},"129":{start:{line:215,column:12},end:{line:215,column:19}},"130":{start:{line:218,column:40},end:{line:218,column:101}},"131":{start:{line:220,column:10},end:{line:226,column:11}},"132":{start:{line:221,column:12},end:{line:225,column:15}},"133":{start:{line:222,column:28},end:{line:222,column:69}},"134":{start:{line:223,column:14},end:{line:223,column:52}},"135":{start:{line:224,column:14},end:{line:224,column:64}},"136":{start:{line:228,column:8},end:{line:228,column:52}},"137":{start:{line:229,column:13},end:{line:240,column:7}},"138":{start:{line:230,column:8},end:{line:234,column:11}},"139":{start:{line:236,column:8},end:{line:239,column:11}},"140":{start:{line:243,column:35},end:{line:243,column:66}},"141":{start:{line:244,column:6},end:{line:265,column:9}},"142":{start:{line:245,column:34},end:{line:245,column:77}},"143":{start:{line:247,column:8},end:{line:264,column:9}},"144":{start:{line:248,column:39},end:{line:248,column:145}},"145":{start:{line:248,column:97},end:{line:248,column:144}},"146":{start:{line:250,column:10},end:{line:263,column:11}},"147":{start:{line:251,column:46},end:{line:251,column:75}},"148":{start:{line:252,column:12},end:{line:262,column:15}},"149":{start:{line:253,column:45},end:{line:253,column:98}},"150":{start:{line:255,column:14},end:{line:261,column:15}},"151":{start:{line:256,column:32},end:{line:256,column:122}},"152":{start:{line:256,column:74},end:{line:256,column:121}},"153":{start:{line:258,column:16},end:{line:260,column:17}},"154":{start:{line:259,column:18},end:{line:259,column:59}},"155":{start:{line:267,column:6},end:{line:267,column:108}},"156":{start:{line:269,column:6},end:{line:269,column:50}},"157":{start:{line:272,column:4},end:{line:272,column:30}},"158":{start:{line:276,column:4},end:{line:285,column:5}},"159":{start:{line:276,column:117},end:{line:276,column:148}},"160":{start:{line:277,column:22},end:{line:277,column:122}},"161":{start:{line:279,column:6},end:{line:281,column:7}},"162":{start:{line:280,column:8},end:{line:280,column:33}},"163":{start:{line:283,column:6},end:{line:283,column:29}},"164":{start:{line:284,column:6},end:{line:284,column:23}},"165":{start:{line:287,column:4},end:{line:287,column:33}},"166":{start:{line:288,column:4},end:{line:288,column:16}},"167":{start:{line:292,column:4},end:{line:301,column:5}},"168":{start:{line:293,column:22},end:{line:293,column:124}},"169":{start:{line:295,column:6},end:{line:297,column:7}},"170":{start:{line:296,column:8},end:{line:296,column:33}},"171":{start:{line:299,column:6},end:{line:299,column:29}},"172":{start:{line:300,column:6},end:{line:300,column:23}},"173":{start:{line:303,column:4},end:{line:303,column:43}},"174":{start:{line:304,column:4},end:{line:304,column:17}},"175":{start:{line:308,column:4},end:{line:317,column:5}},"176":{start:{line:309,column:22},end:{line:309,column:127}},"177":{start:{line:311,column:6},end:{line:313,column:7}},"178":{start:{line:312,column:8},end:{line:312,column:33}},"179":{start:{line:315,column:6},end:{line:315,column:29}},"180":{start:{line:316,column:6},end:{line:316,column:23}},"181":{start:{line:319,column:4},end:{line:319,column:45}},"182":{start:{line:320,column:4},end:{line:320,column:17}},"183":{start:{line:324,column:4},end:{line:328,column:5}},"184":{start:{line:325,column:6},end:{line:325,column:45}},"185":{start:{line:327,column:6},end:{line:327,column:76}},"186":{start:{line:330,column:4},end:{line:330,column:56}},"187":{start:{line:334,column:51},end:{line:334,column:156}},"188":{start:{line:335,column:4},end:{line:335,column:45}},"189":{start:{line:336,column:4},end:{line:338,column:6}},"190":{start:{line:350,column:8},end:{line:350,column:26}},"191":{start:{line:351,column:23},end:{line:351,column:66}},"192":{start:{line:353,column:4},end:{line:377,column:5}},"193":{start:{line:354,column:28},end:{line:354,column:38}},"194":{start:{line:356,column:6},end:{line:360,column:7}},"195":{start:{line:357,column:8},end:{line:359,column:11}},"196":{start:{line:358,column:10},end:{line:358,column:61}},"197":{start:{line:362,column:6},end:{line:369,column:7}},"198":{start:{line:366,column:8},end:{line:368,column:11}},"199":{start:{line:367,column:10},end:{line:367,column:63}},"200":{start:{line:371,column:6},end:{line:373,column:9}},"201":{start:{line:372,column:8},end:{line:372,column:43}},"202":{start:{line:374,column:6},end:{line:374,column:29}},"203":{start:{line:376,column:6},end:{line:376,column:24}},"204":{start:{line:389,column:8},end:{line:389,column:26}},"205":{start:{line:392,column:24},end:{line:415,column:5}},"206":{start:{line:393,column:6},end:{line:393,column:22}},"207":{start:{line:394,column:6},end:{line:394,column:22}},"208":{start:{line:396,column:6},end:{line:400,column:7}},"209":{start:{line:397,column:8},end:{line:399,column:9}},"210":{start:{line:398,column:10},end:{line:398,column:20}},"211":{start:{line:402,column:6},end:{line:406,column:7}},"212":{start:{line:403,column:8},end:{line:405,column:9}},"213":{start:{line:404,column:10},end:{line:404,column:19}},"214":{start:{line:408,column:6},end:{line:414,column:7}},"215":{start:{line:409,column:8},end:{line:409,column:17}},"216":{start:{line:410,column:13},end:{line:414,column:7}},"217":{start:{line:411,column:8},end:{line:411,column:18}},"218":{start:{line:413,column:8},end:{line:413,column:17}},"219":{start:{line:417,column:4},end:{line:425,column:7}},"220":{start:{line:420,column:6},end:{line:422,column:7}},"221":{start:{line:421,column:8},end:{line:421,column:88}},"222":{start:{line:421,column:50},end:{line:421,column:86}},"223":{start:{line:424,column:6},end:{line:424,column:44}},"224":{start:{line:429,column:4},end:{line:436,column:7}},"225":{start:{line:430,column:6},end:{line:435,column:7}},"226":{start:{line:431,column:8},end:{line:431,column:20}},"227":{start:{line:433,column:8},end:{line:433,column:149}},"228":{start:{line:434,column:8},end:{line:434,column:21}},"229":{start:{line:451,column:8},end:{line:451,column:14}},"230":{start:{line:453,column:4},end:{line:460,column:5}},"231":{start:{line:454,column:34},end:{line:457,column:12}},"232":{start:{line:455,column:8},end:{line:455,column:35}},"233":{start:{line:456,column:8},end:{line:456,column:19}},"234":{start:{line:458,column:6},end:{line:458,column:52}},"235":{start:{line:459,column:6},end:{line:459,column:18}},"236":{start:{line:462,column:34},end:{line:465,column:10}},"237":{start:{line:463,column:6},end:{line:463,column:33}},"238":{start:{line:464,column:6},end:{line:464,column:17}},"239":{start:{line:467,column:4},end:{line:469,column:5}},"240":{start:{line:468,column:6},end:{line:468,column:19}},"241":{start:{line:471,column:4},end:{line:471,column:52}},"242":{start:{line:472,column:4},end:{line:472,column:16}},"243":{start:{line:477,column:0},end:{line:477,column:48}}},fnMap:{"0":{name:"_getRequireWildcardCache",decl:{start:{line:48,column:9},end:{line:48,column:33}},loc:{start:{line:48,column:47},end:{line:48,column:311}},line:48},"1":{name:"(anonymous_1)",decl:{start:{line:48,column:209},end:{line:48,column:210}},loc:{start:{line:48,column:232},end:{line:48,column:294}},line:48},"2":{name:"_interopRequireWildcard",decl:{start:{line:50,column:9},end:{line:50,column:32}},loc:{start:{line:50,column:51},end:{line:50,column:804}},line:50},"3":{name:"_interopRequireDefault",decl:{start:{line:52,column:9},end:{line:52,column:31}},loc:{start:{line:52,column:37},end:{line:52,column:95}},line:52},"4":{name:"(anonymous_4)",decl:{start:{line:59,column:2},end:{line:59,column:3}},loc:{start:{line:59,column:27},end:{line:66,column:3}},line:59},"5":{name:"(anonymous_5)",decl:{start:{line:68,column:2},end:{line:68,column:3}},loc:{start:{line:68,column:15},end:{line:273,column:3}},line:68},"6":{name:"(anonymous_6)",decl:{start:{line:103,column:78},end:{line:103,column:79}},loc:{start:{line:103,column:114},end:{line:125,column:5}},line:103},"7":{name:"(anonymous_7)",decl:{start:{line:107,column:47},end:{line:107,column:48}},loc:{start:{line:107,column:60},end:{line:111,column:9}},line:107},"8":{name:"(anonymous_8)",decl:{start:{line:118,column:52},end:{line:118,column:53}},loc:{start:{line:118,column:65},end:{line:120,column:7}},line:118},"9":{name:"(anonymous_9)",decl:{start:{line:177,column:39},end:{line:177,column:40}},loc:{start:{line:177,column:56},end:{line:189,column:9}},line:177},"10":{name:"(anonymous_10)",decl:{start:{line:195,column:63},end:{line:195,column:64}},loc:{start:{line:195,column:93},end:{line:207,column:9}},line:195},"11":{name:"(anonymous_11)",decl:{start:{line:211,column:63},end:{line:211,column:64}},loc:{start:{line:211,column:93},end:{line:227,column:9}},line:211},"12":{name:"(anonymous_12)",decl:{start:{line:221,column:72},end:{line:221,column:73}},loc:{start:{line:221,column:84},end:{line:225,column:13}},line:221},"13":{name:"(anonymous_13)",decl:{start:{line:244,column:48},end:{line:244,column:49}},loc:{start:{line:244,column:73},end:{line:265,column:7}},line:244},"14":{name:"(anonymous_14)",decl:{start:{line:248,column:83},end:{line:248,column:84}},loc:{start:{line:248,column:97},end:{line:248,column:144}},line:248},"15":{name:"(anonymous_15)",decl:{start:{line:252,column:59},end:{line:252,column:60}},loc:{start:{line:252,column:89},end:{line:262,column:13}},line:252},"16":{name:"(anonymous_16)",decl:{start:{line:256,column:65},end:{line:256,column:66}},loc:{start:{line:256,column:74},end:{line:256,column:121}},line:256},"17":{name:"(anonymous_17)",decl:{start:{line:275,column:2},end:{line:275,column:3}},loc:{start:{line:275,column:93},end:{line:289,column:3}},line:275},"18":{name:"(anonymous_18)",decl:{start:{line:276,column:101},end:{line:276,column:102}},loc:{start:{line:276,column:117},end:{line:276,column:148}},line:276},"19":{name:"(anonymous_19)",decl:{start:{line:291,column:2},end:{line:291,column:3}},loc:{start:{line:291,column:80},end:{line:305,column:3}},line:291},"20":{name:"(anonymous_20)",decl:{start:{line:307,column:2},end:{line:307,column:3}},loc:{start:{line:307,column:83},end:{line:321,column:3}},line:307},"21":{name:"(anonymous_21)",decl:{start:{line:323,column:2},end:{line:323,column:3}},loc:{start:{line:323,column:21},end:{line:331,column:3}},line:323},"22":{name:"(anonymous_22)",decl:{start:{line:333,column:2},end:{line:333,column:3}},loc:{start:{line:333,column:37},end:{line:339,column:3}},line:333},"23":{name:"(anonymous_23)",decl:{start:{line:346,column:2},end:{line:346,column:3}},loc:{start:{line:346,column:49},end:{line:378,column:3}},line:346},"24":{name:"(anonymous_24)",decl:{start:{line:357,column:44},end:{line:357,column:45}},loc:{start:{line:357,column:53},end:{line:359,column:9}},line:357},"25":{name:"(anonymous_25)",decl:{start:{line:366,column:49},end:{line:366,column:50}},loc:{start:{line:366,column:58},end:{line:368,column:9}},line:366},"26":{name:"(anonymous_26)",decl:{start:{line:371,column:56},end:{line:371,column:57}},loc:{start:{line:371,column:65},end:{line:373,column:7}},line:371},"27":{name:"(anonymous_27)",decl:{start:{line:386,column:2},end:{line:386,column:3}},loc:{start:{line:386,column:63},end:{line:426,column:3}},line:386},"28":{name:"(anonymous_28)",decl:{start:{line:392,column:24},end:{line:392,column:25}},loc:{start:{line:392,column:34},end:{line:415,column:5}},line:392},"29":{name:"(anonymous_29)",decl:{start:{line:417,column:46},end:{line:417,column:47}},loc:{start:{line:417,column:60},end:{line:425,column:5}},line:417},"30":{name:"(anonymous_30)",decl:{start:{line:421,column:45},end:{line:421,column:46}},loc:{start:{line:421,column:50},end:{line:421,column:86}},line:421},"31":{name:"(anonymous_31)",decl:{start:{line:428,column:2},end:{line:428,column:3}},loc:{start:{line:428,column:28},end:{line:437,column:3}},line:428},"32":{name:"(anonymous_32)",decl:{start:{line:429,column:68},end:{line:429,column:69}},loc:{start:{line:429,column:84},end:{line:436,column:5}},line:429},"33":{name:"(anonymous_33)",decl:{start:{line:446,column:2},end:{line:446,column:3}},loc:{start:{line:446,column:33},end:{line:473,column:3}},line:446},"34":{name:"(anonymous_34)",decl:{start:{line:454,column:54},end:{line:454,column:55}},loc:{start:{line:454,column:69},end:{line:457,column:7}},line:454},"35":{name:"(anonymous_35)",decl:{start:{line:462,column:54},end:{line:462,column:55}},loc:{start:{line:462,column:69},end:{line:465,column:5}},line:462}},branchMap:{"0":{loc:{start:{line:48,column:49},end:{line:48,column:96}},type:"if",locations:[{start:{line:48,column:49},end:{line:48,column:96}},{start:{line:48,column:49},end:{line:48,column:96}}],line:48},"1":{loc:{start:{line:48,column:241},end:{line:48,column:291}},type:"cond-expr",locations:[{start:{line:48,column:255},end:{line:48,column:271}},{start:{line:48,column:274},end:{line:48,column:291}}],line:48},"2":{loc:{start:{line:50,column:53},end:{line:50,column:111}},type:"if",locations:[{start:{line:50,column:53},end:{line:50,column:111}},{start:{line:50,column:53},end:{line:50,column:111}}],line:50},"3":{loc:{start:{line:50,column:57},end:{line:50,column:94}},type:"binary-expr",locations:[{start:{line:50,column:57},end:{line:50,column:69}},{start:{line:50,column:73},end:{line:50,column:76}},{start:{line:50,column:80},end:{line:50,column:94}}],line:50},"4":{loc:{start:{line:50,column:112},end:{line:50,column:214}},type:"if",locations:[{start:{line:50,column:112},end:{line:50,column:214}},{start:{line:50,column:112},end:{line:50,column:214}}],line:50},"5":{loc:{start:{line:50,column:116},end:{line:50,column:184}},type:"binary-expr",locations:[{start:{line:50,column:116},end:{line:50,column:128}},{start:{line:50,column:132},end:{line:50,column:155}},{start:{line:50,column:159},end:{line:50,column:184}}],line:50},"6":{loc:{start:{line:50,column:266},end:{line:50,column:321}},type:"if",locations:[{start:{line:50,column:266},end:{line:50,column:321}},{start:{line:50,column:266},end:{line:50,column:321}}],line:50},"7":{loc:{start:{line:50,column:270},end:{line:50,column:293}},type:"binary-expr",locations:[{start:{line:50,column:270},end:{line:50,column:275}},{start:{line:50,column:279},end:{line:50,column:293}}],line:50},"8":{loc:{start:{line:50,column:367},end:{line:50,column:423}},type:"binary-expr",locations:[{start:{line:50,column:367},end:{line:50,column:388}},{start:{line:50,column:392},end:{line:50,column:423}}],line:50},"9":{loc:{start:{line:50,column:448},end:{line:50,column:724}},type:"if",locations:[{start:{line:50,column:448},end:{line:50,column:724}},{start:{line:50,column:448},end:{line:50,column:724}}],line:50},"10":{loc:{start:{line:50,column:452},end:{line:50,column:519}},type:"binary-expr",locations:[{start:{line:50,column:452},end:{line:50,column:469}},{start:{line:50,column:473},end:{line:50,column:519}}],line:50},"11":{loc:{start:{line:50,column:534},end:{line:50,column:606}},type:"cond-expr",locations:[{start:{line:50,column:558},end:{line:50,column:599}},{start:{line:50,column:602},end:{line:50,column:606}}],line:50},"12":{loc:{start:{line:50,column:608},end:{line:50,column:722}},type:"if",locations:[{start:{line:50,column:608},end:{line:50,column:722}},{start:{line:50,column:608},end:{line:50,column:722}}],line:50},"13":{loc:{start:{line:50,column:612},end:{line:50,column:642}},type:"binary-expr",locations:[{start:{line:50,column:612},end:{line:50,column:616}},{start:{line:50,column:621},end:{line:50,column:629}},{start:{line:50,column:633},end:{line:50,column:641}}],line:50},"14":{loc:{start:{line:50,column:749},end:{line:50,column:787}},type:"if",locations:[{start:{line:50,column:749},end:{line:50,column:787}},{start:{line:50,column:749},end:{line:50,column:787}}],line:50},"15":{loc:{start:{line:52,column:46},end:{line:52,column:92}},type:"cond-expr",locations:[{start:{line:52,column:70},end:{line:52,column:73}},{start:{line:52,column:76},end:{line:52,column:92}}],line:52},"16":{loc:{start:{line:52,column:46},end:{line:52,column:67}},type:"binary-expr",locations:[{start:{line:52,column:46},end:{line:52,column:49}},{start:{line:52,column:53},end:{line:52,column:67}}],line:52},"17":{loc:{start:{line:59,column:14},end:{line:59,column:25}},type:"default-arg",locations:[{start:{line:59,column:23},end:{line:59,column:25}}],line:59},"18":{loc:{start:{line:60,column:34},end:{line:60,column:153}},type:"binary-expr",locations:[{start:{line:60,column:34},end:{line:60,column:63}},{start:{line:60,column:67},end:{line:60,column:153}}],line:60},"19":{loc:{start:{line:61,column:30},end:{line:61,column:141}},type:"binary-expr",locations:[{start:{line:61,column:30},end:{line:61,column:55}},{start:{line:61,column:59},end:{line:61,column:141}}],line:61},"20":{loc:{start:{line:62,column:15},end:{line:62,column:96}},type:"binary-expr",locations:[{start:{line:62,column:15},end:{line:62,column:25}},{start:{line:62,column:29},end:{line:62,column:96}}],line:62},"21":{loc:{start:{line:64,column:17},end:{line:64,column:95}},type:"binary-expr",locations:[{start:{line:64,column:17},end:{line:64,column:29}},{start:{line:64,column:33},end:{line:64,column:95}}],line:64},"22":{loc:{start:{line:76,column:4},end:{line:82,column:5}},type:"if",locations:[{start:{line:76,column:4},end:{line:82,column:5}},{start:{line:76,column:4},end:{line:82,column:5}}],line:76},"23":{loc:{start:{line:106,column:6},end:{line:112,column:7}},type:"if",locations:[{start:{line:106,column:6},end:{line:112,column:7}},{start:{line:106,column:6},end:{line:112,column:7}}],line:106},"24":{loc:{start:{line:108,column:10},end:{line:110,column:11}},type:"if",locations:[{start:{line:108,column:10},end:{line:110,column:11}},{start:{line:108,column:10},end:{line:110,column:11}}],line:108},"25":{loc:{start:{line:132,column:4},end:{line:139,column:5}},type:"if",locations:[{start:{line:132,column:4},end:{line:139,column:5}},{start:{line:132,column:4},end:{line:139,column:5}}],line:132},"26":{loc:{start:{line:143,column:4},end:{line:150,column:5}},type:"if",locations:[{start:{line:143,column:4},end:{line:150,column:5}},{start:{line:143,column:4},end:{line:150,column:5}}],line:143},"27":{loc:{start:{line:154,column:4},end:{line:161,column:5}},type:"if",locations:[{start:{line:154,column:4},end:{line:161,column:5}},{start:{line:154,column:4},end:{line:161,column:5}}],line:154},"28":{loc:{start:{line:170,column:4},end:{line:270,column:5}},type:"if",locations:[{start:{line:170,column:4},end:{line:270,column:5}},{start:{line:170,column:4},end:{line:270,column:5}}],line:170},"29":{loc:{start:{line:173,column:6},end:{line:240,column:7}},type:"if",locations:[{start:{line:173,column:6},end:{line:240,column:7}},{start:{line:173,column:6},end:{line:240,column:7}}],line:173},"30":{loc:{start:{line:178,column:10},end:{line:188,column:11}},type:"if",locations:[{start:{line:178,column:10},end:{line:188,column:11}},{start:{line:178,column:10},end:{line:188,column:11}}],line:178},"31":{loc:{start:{line:179,column:12},end:{line:183,column:13}},type:"if",locations:[{start:{line:179,column:12},end:{line:183,column:13}},{start:{line:179,column:12},end:{line:183,column:13}}],line:179},"32":{loc:{start:{line:179,column:16},end:{line:179,column:134}},type:"binary-expr",locations:[{start:{line:179,column:16},end:{line:179,column:65}},{start:{line:179,column:69},end:{line:179,column:134}}],line:179},"33":{loc:{start:{line:185,column:12},end:{line:187,column:13}},type:"if",locations:[{start:{line:185,column:12},end:{line:187,column:13}},{start:{line:185,column:12},end:{line:187,column:13}}],line:185},"34":{loc:{start:{line:198,column:10},end:{line:200,column:11}},type:"if",locations:[{start:{line:198,column:10},end:{line:200,column:11}},{start:{line:198,column:10},end:{line:200,column:11}}],line:198},"35":{loc:{start:{line:198,column:14},end:{line:198,column:120}},type:"binary-expr",locations:[{start:{line:198,column:14},end:{line:198,column:38}},{start:{line:198,column:42},end:{line:198,column:71}},{start:{line:198,column:75},end:{line:198,column:120}}],line:198},"36":{loc:{start:{line:204,column:10},end:{line:206,column:11}},type:"if",locations:[{start:{line:204,column:10},end:{line:206,column:11}},{start:{line:204,column:10},end:{line:206,column:11}}],line:204},"37":{loc:{start:{line:214,column:10},end:{line:216,column:11}},type:"if",locations:[{start:{line:214,column:10},end:{line:216,column:11}},{start:{line:214,column:10},end:{line:216,column:11}}],line:214},"38":{loc:{start:{line:214,column:14},end:{line:214,column:120}},type:"binary-expr",locations:[{start:{line:214,column:14},end:{line:214,column:38}},{start:{line:214,column:42},end:{line:214,column:71}},{start:{line:214,column:75},end:{line:214,column:120}}],line:214},"39":{loc:{start:{line:220,column:10},end:{line:226,column:11}},type:"if",locations:[{start:{line:220,column:10},end:{line:226,column:11}},{start:{line:220,column:10},end:{line:226,column:11}}],line:220},"40":{loc:{start:{line:220,column:14},end:{line:220,column:94}},type:"binary-expr",locations:[{start:{line:220,column:14},end:{line:220,column:35}},{start:{line:220,column:39},end:{line:220,column:94}}],line:220},"41":{loc:{start:{line:229,column:13},end:{line:240,column:7}},type:"if",locations:[{start:{line:229,column:13},end:{line:240,column:7}},{start:{line:229,column:13},end:{line:240,column:7}}],line:229},"42":{loc:{start:{line:247,column:8},end:{line:264,column:9}},type:"if",locations:[{start:{line:247,column:8},end:{line:264,column:9}},{start:{line:247,column:8},end:{line:264,column:9}}],line:247},"43":{loc:{start:{line:247,column:12},end:{line:247,column:103}},type:"binary-expr",locations:[{start:{line:247,column:12},end:{line:247,column:61}},{start:{line:247,column:65},end:{line:247,column:103}}],line:247},"44":{loc:{start:{line:250,column:10},end:{line:263,column:11}},type:"if",locations:[{start:{line:250,column:10},end:{line:263,column:11}},{start:{line:250,column:10},end:{line:263,column:11}}],line:250},"45":{loc:{start:{line:255,column:14},end:{line:261,column:15}},type:"if",locations:[{start:{line:255,column:14},end:{line:261,column:15}},{start:{line:255,column:14},end:{line:261,column:15}}],line:255},"46":{loc:{start:{line:258,column:16},end:{line:260,column:17}},type:"if",locations:[{start:{line:258,column:16},end:{line:260,column:17}},{start:{line:258,column:16},end:{line:260,column:17}}],line:258},"47":{loc:{start:{line:275,column:23},end:{line:275,column:41}},type:"default-arg",locations:[{start:{line:275,column:36},end:{line:275,column:41}}],line:275},"48":{loc:{start:{line:275,column:43},end:{line:275,column:65}},type:"default-arg",locations:[{start:{line:275,column:60},end:{line:275,column:65}}],line:275},"49":{loc:{start:{line:275,column:67},end:{line:275,column:91}},type:"default-arg",locations:[{start:{line:275,column:86},end:{line:275,column:91}}],line:275},"50":{loc:{start:{line:276,column:4},end:{line:285,column:5}},type:"if",locations:[{start:{line:276,column:4},end:{line:285,column:5}},{start:{line:276,column:4},end:{line:285,column:5}}],line:276},"51":{loc:{start:{line:276,column:8},end:{line:276,column:206}},type:"binary-expr",locations:[{start:{line:276,column:8},end:{line:276,column:23}},{start:{line:276,column:27},end:{line:276,column:74}},{start:{line:276,column:78},end:{line:276,column:149}},{start:{line:276,column:153},end:{line:276,column:170}},{start:{line:276,column:174},end:{line:276,column:206}}],line:276},"52":{loc:{start:{line:279,column:6},end:{line:281,column:7}},type:"if",locations:[{start:{line:279,column:6},end:{line:281,column:7}},{start:{line:279,column:6},end:{line:281,column:7}}],line:279},"53":{loc:{start:{line:291,column:36},end:{line:291,column:54}},type:"default-arg",locations:[{start:{line:291,column:49},end:{line:291,column:54}}],line:291},"54":{loc:{start:{line:291,column:56},end:{line:291,column:78}},type:"default-arg",locations:[{start:{line:291,column:73},end:{line:291,column:78}}],line:291},"55":{loc:{start:{line:292,column:4},end:{line:301,column:5}},type:"if",locations:[{start:{line:292,column:4},end:{line:301,column:5}},{start:{line:292,column:4},end:{line:301,column:5}}],line:292},"56":{loc:{start:{line:292,column:8},end:{line:292,column:109}},type:"binary-expr",locations:[{start:{line:292,column:8},end:{line:292,column:23}},{start:{line:292,column:27},end:{line:292,column:75}},{start:{line:292,column:79},end:{line:292,column:109}}],line:292},"57":{loc:{start:{line:295,column:6},end:{line:297,column:7}},type:"if",locations:[{start:{line:295,column:6},end:{line:297,column:7}},{start:{line:295,column:6},end:{line:297,column:7}}],line:295},"58":{loc:{start:{line:307,column:39},end:{line:307,column:57}},type:"default-arg",locations:[{start:{line:307,column:52},end:{line:307,column:57}}],line:307},"59":{loc:{start:{line:307,column:59},end:{line:307,column:81}},type:"default-arg",locations:[{start:{line:307,column:76},end:{line:307,column:81}}],line:307},"60":{loc:{start:{line:308,column:4},end:{line:317,column:5}},type:"if",locations:[{start:{line:308,column:4},end:{line:317,column:5}},{start:{line:308,column:4},end:{line:317,column:5}}],line:308},"61":{loc:{start:{line:308,column:8},end:{line:308,column:114}},type:"binary-expr",locations:[{start:{line:308,column:8},end:{line:308,column:23}},{start:{line:308,column:27},end:{line:308,column:78}},{start:{line:308,column:82},end:{line:308,column:114}}],line:308},"62":{loc:{start:{line:311,column:6},end:{line:313,column:7}},type:"if",locations:[{start:{line:311,column:6},end:{line:313,column:7}},{start:{line:311,column:6},end:{line:313,column:7}}],line:311},"63":{loc:{start:{line:324,column:4},end:{line:328,column:5}},type:"if",locations:[{start:{line:324,column:4},end:{line:328,column:5}},{start:{line:324,column:4},end:{line:328,column:5}}],line:324},"64":{loc:{start:{line:353,column:4},end:{line:377,column:5}},type:"if",locations:[{start:{line:353,column:4},end:{line:377,column:5}},{start:{line:353,column:4},end:{line:377,column:5}}],line:353},"65":{loc:{start:{line:353,column:8},end:{line:353,column:77}},type:"binary-expr",locations:[{start:{line:353,column:8},end:{line:353,column:40}},{start:{line:353,column:44},end:{line:353,column:77}}],line:353},"66":{loc:{start:{line:356,column:6},end:{line:360,column:7}},type:"if",locations:[{start:{line:356,column:6},end:{line:360,column:7}},{start:{line:356,column:6},end:{line:360,column:7}}],line:356},"67":{loc:{start:{line:362,column:6},end:{line:369,column:7}},type:"if",locations:[{start:{line:362,column:6},end:{line:369,column:7}},{start:{line:362,column:6},end:{line:369,column:7}}],line:362},"68":{loc:{start:{line:396,column:6},end:{line:400,column:7}},type:"if",locations:[{start:{line:396,column:6},end:{line:400,column:7}},{start:{line:396,column:6},end:{line:400,column:7}}],line:396},"69":{loc:{start:{line:397,column:8},end:{line:399,column:9}},type:"if",locations:[{start:{line:397,column:8},end:{line:399,column:9}},{start:{line:397,column:8},end:{line:399,column:9}}],line:397},"70":{loc:{start:{line:402,column:6},end:{line:406,column:7}},type:"if",locations:[{start:{line:402,column:6},end:{line:406,column:7}},{start:{line:402,column:6},end:{line:406,column:7}}],line:402},"71":{loc:{start:{line:403,column:8},end:{line:405,column:9}},type:"if",locations:[{start:{line:403,column:8},end:{line:405,column:9}},{start:{line:403,column:8},end:{line:405,column:9}}],line:403},"72":{loc:{start:{line:408,column:6},end:{line:414,column:7}},type:"if",locations:[{start:{line:408,column:6},end:{line:414,column:7}},{start:{line:408,column:6},end:{line:414,column:7}}],line:408},"73":{loc:{start:{line:410,column:13},end:{line:414,column:7}},type:"if",locations:[{start:{line:410,column:13},end:{line:414,column:7}},{start:{line:410,column:13},end:{line:414,column:7}}],line:410},"74":{loc:{start:{line:420,column:6},end:{line:422,column:7}},type:"if",locations:[{start:{line:420,column:6},end:{line:422,column:7}},{start:{line:420,column:6},end:{line:422,column:7}}],line:420},"75":{loc:{start:{line:430,column:6},end:{line:435,column:7}},type:"if",locations:[{start:{line:430,column:6},end:{line:435,column:7}},{start:{line:430,column:6},end:{line:435,column:7}}],line:430},"76":{loc:{start:{line:453,column:4},end:{line:460,column:5}},type:"if",locations:[{start:{line:453,column:4},end:{line:460,column:5}},{start:{line:453,column:4},end:{line:460,column:5}}],line:453},"77":{loc:{start:{line:453,column:8},end:{line:453,column:55}},type:"binary-expr",locations:[{start:{line:453,column:8},end:{line:453,column:32}},{start:{line:453,column:36},end:{line:453,column:55}}],line:453},"78":{loc:{start:{line:467,column:4},end:{line:469,column:5}},type:"if",locations:[{start:{line:467,column:4},end:{line:469,column:5}},{start:{line:467,column:4},end:{line:469,column:5}}],line:467},"79":{loc:{start:{line:467,column:8},end:{line:467,column:213}},type:"binary-expr",locations:[{start:{line:467,column:8},end:{line:467,column:81}},{start:{line:467,column:85},end:{line:467,column:133}},{start:{line:467,column:137},end:{line:467,column:213}}],line:467}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0,0],"36":[0,0],"37":[0,0],"38":[0,0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0],"48":[0],"49":[0],"50":[0,0],"51":[0,0,0,0,0],"52":[0,0],"53":[0],"54":[0],"55":[0,0],"56":[0,0,0],"57":[0,0],"58":[0],"59":[0],"60":[0,0],"61":[0,0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0,0]},inputSourceMap:{version:3,sources:["../../src/GraphQL/ParseGraphQLSchema.js"],names:["RESERVED_GRAPHQL_TYPE_NAMES","RESERVED_GRAPHQL_QUERY_NAMES","RESERVED_GRAPHQL_MUTATION_NAMES","ParseGraphQLSchema","constructor","params","parseGraphQLController","databaseController","log","graphQLCustomTypeDefs","appId","schemaCache","SchemaCache","load","parseGraphQLConfig","_initializeSchemaAndConfig","parseClasses","_getClassesForSchema","functionNames","_getFunctionNames","functionNamesString","JSON","stringify","_hasSchemaInputChanged","graphQLSchema","parseClassTypes","viewerType","graphQLAutoSchema","graphQLTypes","graphQLQueries","graphQLMutations","graphQLSubscriptions","graphQLSchemaDirectivesDefinitions","graphQLSchemaDirectives","relayNodeInterface","defaultGraphQLTypes","defaultRelaySchema","schemaTypes","_getParseClassesWithConfig","forEach","parseClass","parseClassConfig","className","Object","keys","fields","fieldName","startsWith","orderedFields","sort","parseClassQueries","parseClassMutations","loadArrayResult","defaultGraphQLQueries","defaultGraphQLMutations","graphQLQuery","undefined","length","GraphQLObjectType","name","description","addGraphQLType","graphQLMutation","graphQLSubscription","GraphQLSchema","types","query","mutation","subscription","schemaDirectives","getTypeMap","customGraphQLSchemaTypeMap","_typeMap","findAndReplaceLastType","parent","key","ofType","customGraphQLSchemaTypeKey","customGraphQLSchemaType","autoGraphQLSchemaType","getFields","_fields","fieldKey","field","directivesDefinitionsSchema","autoSchema","stitchSchemas","schemas","mergeDirectives","graphQLSchemaTypeMap","graphQLSchemaTypeName","graphQLSchemaType","definitions","graphQLCustomTypeDef","find","definition","value","graphQLSchemaTypeFieldMap","graphQLSchemaTypeFieldName","graphQLSchemaTypeField","astNode","SchemaDirectiveVisitor","visitSchemaDirectives","type","throwError","ignoreReserved","ignoreConnection","includes","existingType","endsWith","message","Error","warn","push","addGraphQLQuery","addGraphQLMutation","handleError","error","Parse","stack","schemaController","Promise","all","loadSchema","getGraphQLConfig","enabledForClasses","disabledForClasses","allClasses","getAllClasses","Array","isArray","includedClasses","filter","clazz","isUsersClassDisabled","some","classConfigs","sortClasses","a","b","map","c","functionName","test","parseCachedClasses","thisParseClassesObj","reduce","acc","clzz","newParseCachedClasses"],mappings:"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",sourcesContent:["import Parse from 'parse/node';\nimport { GraphQLSchema, GraphQLObjectType, DocumentNode, GraphQLNamedType } from 'graphql';\nimport { stitchSchemas } from '@graphql-tools/stitch';\nimport { isDeepStrictEqual } from 'util';\nimport { SchemaDirectiveVisitor } from '@graphql-tools/utils';\nimport requiredParameter from '../requiredParameter';\nimport * as defaultGraphQLTypes from './loaders/defaultGraphQLTypes';\nimport * as parseClassTypes from './loaders/parseClassTypes';\nimport * as parseClassQueries from './loaders/parseClassQueries';\nimport * as parseClassMutations from './loaders/parseClassMutations';\nimport * as defaultGraphQLQueries from './loaders/defaultGraphQLQueries';\nimport * as defaultGraphQLMutations from './loaders/defaultGraphQLMutations';\nimport ParseGraphQLController, { ParseGraphQLConfig } from '../Controllers/ParseGraphQLController';\nimport DatabaseController from '../Controllers/DatabaseController';\nimport SchemaCache from '../Adapters/Cache/SchemaCache';\nimport { toGraphQLError } from './parseGraphQLUtils';\nimport * as schemaDirectives from './loaders/schemaDirectives';\nimport * as schemaTypes from './loaders/schemaTypes';\nimport { getFunctionNames } from '../triggers';\nimport * as defaultRelaySchema from './loaders/defaultRelaySchema';\n\nconst RESERVED_GRAPHQL_TYPE_NAMES = [\n  'String',\n  'Boolean',\n  'Int',\n  'Float',\n  'ID',\n  'ArrayResult',\n  'Query',\n  'Mutation',\n  'Subscription',\n  'CreateFileInput',\n  'CreateFilePayload',\n  'Viewer',\n  'SignUpInput',\n  'SignUpPayload',\n  'LogInInput',\n  'LogInPayload',\n  'LogOutInput',\n  'LogOutPayload',\n  'CloudCodeFunction',\n  'CallCloudCodeInput',\n  'CallCloudCodePayload',\n  'CreateClassInput',\n  'CreateClassPayload',\n  'UpdateClassInput',\n  'UpdateClassPayload',\n  'DeleteClassInput',\n  'DeleteClassPayload',\n  'PageInfo',\n];\nconst RESERVED_GRAPHQL_QUERY_NAMES = ['health', 'viewer', 'class', 'classes'];\nconst RESERVED_GRAPHQL_MUTATION_NAMES = [\n  'signUp',\n  'logIn',\n  'logOut',\n  'createFile',\n  'callCloudCode',\n  'createClass',\n  'updateClass',\n  'deleteClass',\n];\n\nclass ParseGraphQLSchema {\n  databaseController: DatabaseController;\n  parseGraphQLController: ParseGraphQLController;\n  parseGraphQLConfig: ParseGraphQLConfig;\n  log: any;\n  appId: string;\n  graphQLCustomTypeDefs: ?(string | GraphQLSchema | DocumentNode | GraphQLNamedType[]);\n  schemaCache: any;\n\n  constructor(\n    params: {\n      databaseController: DatabaseController,\n      parseGraphQLController: ParseGraphQLController,\n      log: any,\n      appId: string,\n      graphQLCustomTypeDefs: ?(string | GraphQLSchema | DocumentNode | GraphQLNamedType[]),\n    } = {}\n  ) {\n    this.parseGraphQLController =\n      params.parseGraphQLController ||\n      requiredParameter('You must provide a parseGraphQLController instance!');\n    this.databaseController =\n      params.databaseController ||\n      requiredParameter('You must provide a databaseController instance!');\n    this.log = params.log || requiredParameter('You must provide a log instance!');\n    this.graphQLCustomTypeDefs = params.graphQLCustomTypeDefs;\n    this.appId = params.appId || requiredParameter('You must provide the appId!');\n    this.schemaCache = SchemaCache;\n  }\n\n  async load() {\n    const { parseGraphQLConfig } = await this._initializeSchemaAndConfig();\n    const parseClasses = await this._getClassesForSchema(parseGraphQLConfig);\n    const functionNames = await this._getFunctionNames();\n    const functionNamesString = JSON.stringify(functionNames);\n\n    if (\n      !this._hasSchemaInputChanged({\n        parseClasses,\n        parseGraphQLConfig,\n        functionNamesString,\n      })\n    ) {\n      return this.graphQLSchema;\n    }\n\n    this.parseClasses = parseClasses;\n    this.parseGraphQLConfig = parseGraphQLConfig;\n    this.functionNames = functionNames;\n    this.functionNamesString = functionNamesString;\n    this.parseClassTypes = {};\n    this.viewerType = null;\n    this.graphQLAutoSchema = null;\n    this.graphQLSchema = null;\n    this.graphQLTypes = [];\n    this.graphQLQueries = {};\n    this.graphQLMutations = {};\n    this.graphQLSubscriptions = {};\n    this.graphQLSchemaDirectivesDefinitions = null;\n    this.graphQLSchemaDirectives = {};\n    this.relayNodeInterface = null;\n\n    defaultGraphQLTypes.load(this);\n    defaultRelaySchema.load(this);\n    schemaTypes.load(this);\n\n    this._getParseClassesWithConfig(parseClasses, parseGraphQLConfig).forEach(\n      ([parseClass, parseClassConfig]) => {\n        // Some times schema return the _auth_data_ field\n        // it will lead to unstable graphql generation order\n        if (parseClass.className === '_User') {\n          Object.keys(parseClass.fields).forEach(fieldName => {\n            if (fieldName.startsWith('_auth_data_')) {\n              delete parseClass.fields[fieldName];\n            }\n          });\n        }\n\n        // Fields order inside the schema seems to not be consistent across\n        // restart so we need to ensure an alphabetical order\n        // also it's better for the playground documentation\n        const orderedFields = {};\n        Object.keys(parseClass.fields)\n          .sort()\n          .forEach(fieldName => {\n            orderedFields[fieldName] = parseClass.fields[fieldName];\n          });\n        parseClass.fields = orderedFields;\n        parseClassTypes.load(this, parseClass, parseClassConfig);\n        parseClassQueries.load(this, parseClass, parseClassConfig);\n        parseClassMutations.load(this, parseClass, parseClassConfig);\n      }\n    );\n\n    defaultGraphQLTypes.loadArrayResult(this, parseClasses);\n    defaultGraphQLQueries.load(this);\n    defaultGraphQLMutations.load(this);\n\n    let graphQLQuery = undefined;\n    if (Object.keys(this.graphQLQueries).length > 0) {\n      graphQLQuery = new GraphQLObjectType({\n        name: 'Query',\n        description: 'Query is the top level type for queries.',\n        fields: this.graphQLQueries,\n      });\n      this.addGraphQLType(graphQLQuery, true, true);\n    }\n\n    let graphQLMutation = undefined;\n    if (Object.keys(this.graphQLMutations).length > 0) {\n      graphQLMutation = new GraphQLObjectType({\n        name: 'Mutation',\n        description: 'Mutation is the top level type for mutations.',\n        fields: this.graphQLMutations,\n      });\n      this.addGraphQLType(graphQLMutation, true, true);\n    }\n\n    let graphQLSubscription = undefined;\n    if (Object.keys(this.graphQLSubscriptions).length > 0) {\n      graphQLSubscription = new GraphQLObjectType({\n        name: 'Subscription',\n        description: 'Subscription is the top level type for subscriptions.',\n        fields: this.graphQLSubscriptions,\n      });\n      this.addGraphQLType(graphQLSubscription, true, true);\n    }\n\n    this.graphQLAutoSchema = new GraphQLSchema({\n      types: this.graphQLTypes,\n      query: graphQLQuery,\n      mutation: graphQLMutation,\n      subscription: graphQLSubscription,\n    });\n\n    if (this.graphQLCustomTypeDefs) {\n      schemaDirectives.load(this);\n\n      if (typeof this.graphQLCustomTypeDefs.getTypeMap === 'function') {\n        // In following code we use underscore attr to avoid js var un ref\n        const customGraphQLSchemaTypeMap = this.graphQLCustomTypeDefs._typeMap;\n        const findAndReplaceLastType = (parent, key) => {\n          if (parent[key].name) {\n            if (\n              this.graphQLAutoSchema._typeMap[parent[key].name] &&\n              this.graphQLAutoSchema._typeMap[parent[key].name] !== parent[key]\n            ) {\n              // To avoid unresolved field on overloaded schema\n              // replace the final type with the auto schema one\n              parent[key] = this.graphQLAutoSchema._typeMap[parent[key].name];\n            }\n          } else {\n            if (parent[key].ofType) {\n              findAndReplaceLastType(parent[key], 'ofType');\n            }\n          }\n        };\n        // Add non shared types from custom schema to auto schema\n        // note: some non shared types can use some shared types\n        // so this code need to be ran before the shared types addition\n        // we use sort to ensure schema consistency over restarts\n        Object.keys(customGraphQLSchemaTypeMap)\n          .sort()\n          .forEach(customGraphQLSchemaTypeKey => {\n            const customGraphQLSchemaType = customGraphQLSchemaTypeMap[customGraphQLSchemaTypeKey];\n            if (\n              !customGraphQLSchemaType ||\n              !customGraphQLSchemaType.name ||\n              customGraphQLSchemaType.name.startsWith('__')\n            ) {\n              return;\n            }\n            const autoGraphQLSchemaType = this.graphQLAutoSchema._typeMap[\n              customGraphQLSchemaType.name\n            ];\n            if (!autoGraphQLSchemaType) {\n              this.graphQLAutoSchema._typeMap[\n                customGraphQLSchemaType.name\n              ] = customGraphQLSchemaType;\n            }\n          });\n        // Handle shared types\n        // We pass through each type and ensure that all sub field types are replaced\n        // we use sort to ensure schema consistency over restarts\n        Object.keys(customGraphQLSchemaTypeMap)\n          .sort()\n          .forEach(customGraphQLSchemaTypeKey => {\n            const customGraphQLSchemaType = customGraphQLSchemaTypeMap[customGraphQLSchemaTypeKey];\n            if (\n              !customGraphQLSchemaType ||\n              !customGraphQLSchemaType.name ||\n              customGraphQLSchemaType.name.startsWith('__')\n            ) {\n              return;\n            }\n            const autoGraphQLSchemaType = this.graphQLAutoSchema._typeMap[\n              customGraphQLSchemaType.name\n            ];\n\n            if (autoGraphQLSchemaType && typeof customGraphQLSchemaType.getFields === 'function') {\n              Object.keys(customGraphQLSchemaType._fields)\n                .sort()\n                .forEach(fieldKey => {\n                  const field = customGraphQLSchemaType._fields[fieldKey];\n                  findAndReplaceLastType(field, 'type');\n                  autoGraphQLSchemaType._fields[field.name] = field;\n                });\n            }\n          });\n        this.graphQLSchema = this.graphQLAutoSchema;\n      } else if (typeof this.graphQLCustomTypeDefs === 'function') {\n        this.graphQLSchema = await this.graphQLCustomTypeDefs({\n          directivesDefinitionsSchema: this.graphQLSchemaDirectivesDefinitions,\n          autoSchema: this.graphQLAutoSchema,\n          stitchSchemas,\n        });\n      } else {\n        this.graphQLSchema = stitchSchemas({\n          schemas: [\n            this.graphQLSchemaDirectivesDefinitions,\n            this.graphQLAutoSchema,\n            this.graphQLCustomTypeDefs,\n          ],\n          mergeDirectives: true,\n        });\n      }\n\n      // Only merge directive when string schema provided\n      const graphQLSchemaTypeMap = this.graphQLSchema.getTypeMap();\n      Object.keys(graphQLSchemaTypeMap).forEach(graphQLSchemaTypeName => {\n        const graphQLSchemaType = graphQLSchemaTypeMap[graphQLSchemaTypeName];\n        if (\n          typeof graphQLSchemaType.getFields === 'function' &&\n          this.graphQLCustomTypeDefs.definitions\n        ) {\n          const graphQLCustomTypeDef = this.graphQLCustomTypeDefs.definitions.find(\n            definition => definition.name.value === graphQLSchemaTypeName\n          );\n          if (graphQLCustomTypeDef) {\n            const graphQLSchemaTypeFieldMap = graphQLSchemaType.getFields();\n            Object.keys(graphQLSchemaTypeFieldMap).forEach(graphQLSchemaTypeFieldName => {\n              const graphQLSchemaTypeField = graphQLSchemaTypeFieldMap[graphQLSchemaTypeFieldName];\n              if (!graphQLSchemaTypeField.astNode) {\n                const astNode = graphQLCustomTypeDef.fields.find(\n                  field => field.name.value === graphQLSchemaTypeFieldName\n                );\n                if (astNode) {\n                  graphQLSchemaTypeField.astNode = astNode;\n                }\n              }\n            });\n          }\n        }\n      });\n\n      SchemaDirectiveVisitor.visitSchemaDirectives(\n        this.graphQLSchema,\n        this.graphQLSchemaDirectives\n      );\n    } else {\n      this.graphQLSchema = this.graphQLAutoSchema;\n    }\n\n    return this.graphQLSchema;\n  }\n\n  addGraphQLType(type, throwError = false, ignoreReserved = false, ignoreConnection = false) {\n    if (\n      (!ignoreReserved && RESERVED_GRAPHQL_TYPE_NAMES.includes(type.name)) ||\n      this.graphQLTypes.find(existingType => existingType.name === type.name) ||\n      (!ignoreConnection && type.name.endsWith('Connection'))\n    ) {\n      const message = `Type ${type.name} could not be added to the auto schema because it collided with an existing type.`;\n      if (throwError) {\n        throw new Error(message);\n      }\n      this.log.warn(message);\n      return undefined;\n    }\n    this.graphQLTypes.push(type);\n    return type;\n  }\n\n  addGraphQLQuery(fieldName, field, throwError = false, ignoreReserved = false) {\n    if (\n      (!ignoreReserved && RESERVED_GRAPHQL_QUERY_NAMES.includes(fieldName)) ||\n      this.graphQLQueries[fieldName]\n    ) {\n      const message = `Query ${fieldName} could not be added to the auto schema because it collided with an existing field.`;\n      if (throwError) {\n        throw new Error(message);\n      }\n      this.log.warn(message);\n      return undefined;\n    }\n    this.graphQLQueries[fieldName] = field;\n    return field;\n  }\n\n  addGraphQLMutation(fieldName, field, throwError = false, ignoreReserved = false) {\n    if (\n      (!ignoreReserved && RESERVED_GRAPHQL_MUTATION_NAMES.includes(fieldName)) ||\n      this.graphQLMutations[fieldName]\n    ) {\n      const message = `Mutation ${fieldName} could not be added to the auto schema because it collided with an existing field.`;\n      if (throwError) {\n        throw new Error(message);\n      }\n      this.log.warn(message);\n      return undefined;\n    }\n    this.graphQLMutations[fieldName] = field;\n    return field;\n  }\n\n  handleError(error) {\n    if (error instanceof Parse.Error) {\n      this.log.error('Parse error: ', error);\n    } else {\n      this.log.error('Uncaught internal server error.', error, error.stack);\n    }\n    throw toGraphQLError(error);\n  }\n\n  async _initializeSchemaAndConfig() {\n    const [schemaController, parseGraphQLConfig] = await Promise.all([\n      this.databaseController.loadSchema(),\n      this.parseGraphQLController.getGraphQLConfig(),\n    ]);\n\n    this.schemaController = schemaController;\n\n    return {\n      parseGraphQLConfig,\n    };\n  }\n\n  /**\n   * Gets all classes found by the `schemaController`\n   * minus those filtered out by the app's parseGraphQLConfig.\n   */\n  async _getClassesForSchema(parseGraphQLConfig: ParseGraphQLConfig) {\n    const { enabledForClasses, disabledForClasses } = parseGraphQLConfig;\n    const allClasses = await this.schemaController.getAllClasses();\n\n    if (Array.isArray(enabledForClasses) || Array.isArray(disabledForClasses)) {\n      let includedClasses = allClasses;\n      if (enabledForClasses) {\n        includedClasses = allClasses.filter(clazz => {\n          return enabledForClasses.includes(clazz.className);\n        });\n      }\n      if (disabledForClasses) {\n        // Classes included in `enabledForClasses` that\n        // are also present in `disabledForClasses` will\n        // still be filtered out\n        includedClasses = includedClasses.filter(clazz => {\n          return !disabledForClasses.includes(clazz.className);\n        });\n      }\n\n      this.isUsersClassDisabled = !includedClasses.some(clazz => {\n        return clazz.className === '_User';\n      });\n\n      return includedClasses;\n    } else {\n      return allClasses;\n    }\n  }\n\n  /**\n   * This method returns a list of tuples\n   * that provide the parseClass along with\n   * its parseClassConfig where provided.\n   */\n  _getParseClassesWithConfig(parseClasses, parseGraphQLConfig: ParseGraphQLConfig) {\n    const { classConfigs } = parseGraphQLConfig;\n\n    // Make sures that the default classes and classes that\n    // starts with capitalized letter will be generated first.\n    const sortClasses = (a, b) => {\n      a = a.className;\n      b = b.className;\n      if (a[0] === '_') {\n        if (b[0] !== '_') {\n          return -1;\n        }\n      }\n      if (b[0] === '_') {\n        if (a[0] !== '_') {\n          return 1;\n        }\n      }\n      if (a === b) {\n        return 0;\n      } else if (a < b) {\n        return -1;\n      } else {\n        return 1;\n      }\n    };\n\n    return parseClasses.sort(sortClasses).map(parseClass => {\n      let parseClassConfig;\n      if (classConfigs) {\n        parseClassConfig = classConfigs.find(c => c.className === parseClass.className);\n      }\n      return [parseClass, parseClassConfig];\n    });\n  }\n\n  async _getFunctionNames() {\n    return await getFunctionNames(this.appId).filter(functionName => {\n      if (/^[_a-zA-Z][_a-zA-Z0-9]*$/.test(functionName)) {\n        return true;\n      } else {\n        this.log.warn(\n          `Function ${functionName} could not be added to the auto schema because GraphQL names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/.`\n        );\n        return false;\n      }\n    });\n  }\n\n  /**\n   * Checks for changes to the parseClasses\n   * objects (i.e. database schema) or to\n   * the parseGraphQLConfig object. If no\n   * changes are found, return true;\n   */\n  _hasSchemaInputChanged(params: {\n    parseClasses: any,\n    parseGraphQLConfig: ?ParseGraphQLConfig,\n    functionNamesString: string,\n  }): boolean {\n    const { parseClasses, parseGraphQLConfig, functionNamesString } = params;\n\n    // First init\n    if (!this.parseCachedClasses || !this.graphQLSchema) {\n      const thisParseClassesObj = parseClasses.reduce((acc, clzz) => {\n        acc[clzz.className] = clzz;\n        return acc;\n      }, {});\n      this.parseCachedClasses = thisParseClassesObj;\n      return true;\n    }\n\n    const newParseCachedClasses = parseClasses.reduce((acc, clzz) => {\n      acc[clzz.className] = clzz;\n      return acc;\n    }, {});\n\n    if (\n      isDeepStrictEqual(this.parseGraphQLConfig, parseGraphQLConfig) &&\n      this.functionNamesString === functionNamesString &&\n      isDeepStrictEqual(this.parseCachedClasses, newParseCachedClasses)\n    ) {\n      return false;\n    }\n\n    this.parseCachedClasses = newParseCachedClasses;\n    return true;\n  }\n}\n\nexport { ParseGraphQLSchema };\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"7b79a31857b867542a000b19ca5c750bc6bc829b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_267opt4ark=function(){return actualCoverage;};}return actualCoverage;}cov_267opt4ark();cov_267opt4ark().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_267opt4ark().s[1]++;exports.ParseGraphQLSchema=void 0;var _node=(cov_267opt4ark().s[2]++,_interopRequireDefault(require("parse/node")));var _graphql=(cov_267opt4ark().s[3]++,require("graphql"));var _stitch=(cov_267opt4ark().s[4]++,require("@graphql-tools/stitch"));var _util=(cov_267opt4ark().s[5]++,require("util"));var _utils=(cov_267opt4ark().s[6]++,require("@graphql-tools/utils"));var _requiredParameter=(cov_267opt4ark().s[7]++,_interopRequireDefault(require("../requiredParameter")));var defaultGraphQLTypes=(cov_267opt4ark().s[8]++,_interopRequireWildcard(require("./loaders/defaultGraphQLTypes")));var parseClassTypes=(cov_267opt4ark().s[9]++,_interopRequireWildcard(require("./loaders/parseClassTypes")));var parseClassQueries=(cov_267opt4ark().s[10]++,_interopRequireWildcard(require("./loaders/parseClassQueries")));var parseClassMutations=(cov_267opt4ark().s[11]++,_interopRequireWildcard(require("./loaders/parseClassMutations")));var defaultGraphQLQueries=(cov_267opt4ark().s[12]++,_interopRequireWildcard(require("./loaders/defaultGraphQLQueries")));var defaultGraphQLMutations=(cov_267opt4ark().s[13]++,_interopRequireWildcard(require("./loaders/defaultGraphQLMutations")));var _ParseGraphQLController=(cov_267opt4ark().s[14]++,_interopRequireWildcard(require("../Controllers/ParseGraphQLController")));var _DatabaseController=(cov_267opt4ark().s[15]++,_interopRequireDefault(require("../Controllers/DatabaseController")));var _SchemaCache=(cov_267opt4ark().s[16]++,_interopRequireDefault(require("../Adapters/Cache/SchemaCache")));var _parseGraphQLUtils=(cov_267opt4ark().s[17]++,require("./parseGraphQLUtils"));var schemaDirectives=(cov_267opt4ark().s[18]++,_interopRequireWildcard(require("./loaders/schemaDirectives")));var schemaTypes=(cov_267opt4ark().s[19]++,_interopRequireWildcard(require("./loaders/schemaTypes")));var _triggers=(cov_267opt4ark().s[20]++,require("../triggers"));var defaultRelaySchema=(cov_267opt4ark().s[21]++,_interopRequireWildcard(require("./loaders/defaultRelaySchema")));function _getRequireWildcardCache(nodeInterop){cov_267opt4ark().f[0]++;cov_267opt4ark().s[22]++;if(typeof WeakMap!=="function"){cov_267opt4ark().b[0][0]++;cov_267opt4ark().s[23]++;return null;}else{cov_267opt4ark().b[0][1]++;}var cacheBabelInterop=(cov_267opt4ark().s[24]++,new WeakMap());var cacheNodeInterop=(cov_267opt4ark().s[25]++,new WeakMap());cov_267opt4ark().s[26]++;return(_getRequireWildcardCache=function(nodeInterop){cov_267opt4ark().f[1]++;cov_267opt4ark().s[27]++;return nodeInterop?(cov_267opt4ark().b[1][0]++,cacheNodeInterop):(cov_267opt4ark().b[1][1]++,cacheBabelInterop);})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){cov_267opt4ark().f[2]++;cov_267opt4ark().s[28]++;if((cov_267opt4ark().b[3][0]++,!nodeInterop)&&(cov_267opt4ark().b[3][1]++,obj)&&(cov_267opt4ark().b[3][2]++,obj.__esModule)){cov_267opt4ark().b[2][0]++;cov_267opt4ark().s[29]++;return obj;}else{cov_267opt4ark().b[2][1]++;}cov_267opt4ark().s[30]++;if((cov_267opt4ark().b[5][0]++,obj===null)||(cov_267opt4ark().b[5][1]++,typeof obj!=="object")&&(cov_267opt4ark().b[5][2]++,typeof obj!=="function")){cov_267opt4ark().b[4][0]++;cov_267opt4ark().s[31]++;return{default:obj};}else{cov_267opt4ark().b[4][1]++;}var cache=(cov_267opt4ark().s[32]++,_getRequireWildcardCache(nodeInterop));cov_267opt4ark().s[33]++;if((cov_267opt4ark().b[7][0]++,cache)&&(cov_267opt4ark().b[7][1]++,cache.has(obj))){cov_267opt4ark().b[6][0]++;cov_267opt4ark().s[34]++;return cache.get(obj);}else{cov_267opt4ark().b[6][1]++;}var newObj=(cov_267opt4ark().s[35]++,{});var hasPropertyDescriptor=(cov_267opt4ark().s[36]++,(cov_267opt4ark().b[8][0]++,Object.defineProperty)&&(cov_267opt4ark().b[8][1]++,Object.getOwnPropertyDescriptor));cov_267opt4ark().s[37]++;for(var key in obj){cov_267opt4ark().s[38]++;if((cov_267opt4ark().b[10][0]++,key!=="default")&&(cov_267opt4ark().b[10][1]++,Object.prototype.hasOwnProperty.call(obj,key))){cov_267opt4ark().b[9][0]++;var desc=(cov_267opt4ark().s[39]++,hasPropertyDescriptor?(cov_267opt4ark().b[11][0]++,Object.getOwnPropertyDescriptor(obj,key)):(cov_267opt4ark().b[11][1]++,null));cov_267opt4ark().s[40]++;if((cov_267opt4ark().b[13][0]++,desc)&&((cov_267opt4ark().b[13][1]++,desc.get)||(cov_267opt4ark().b[13][2]++,desc.set))){cov_267opt4ark().b[12][0]++;cov_267opt4ark().s[41]++;Object.defineProperty(newObj,key,desc);}else{cov_267opt4ark().b[12][1]++;cov_267opt4ark().s[42]++;newObj[key]=obj[key];}}else{cov_267opt4ark().b[9][1]++;}}cov_267opt4ark().s[43]++;newObj.default=obj;cov_267opt4ark().s[44]++;if(cache){cov_267opt4ark().b[14][0]++;cov_267opt4ark().s[45]++;cache.set(obj,newObj);}else{cov_267opt4ark().b[14][1]++;}cov_267opt4ark().s[46]++;return newObj;}function _interopRequireDefault(obj){cov_267opt4ark().f[3]++;cov_267opt4ark().s[47]++;return(cov_267opt4ark().b[16][0]++,obj)&&(cov_267opt4ark().b[16][1]++,obj.__esModule)?(cov_267opt4ark().b[15][0]++,obj):(cov_267opt4ark().b[15][1]++,{default:obj});}const RESERVED_GRAPHQL_TYPE_NAMES=(cov_267opt4ark().s[48]++,['String','Boolean','Int','Float','ID','ArrayResult','Query','Mutation','Subscription','CreateFileInput','CreateFilePayload','Viewer','SignUpInput','SignUpPayload','LogInInput','LogInPayload','LogOutInput','LogOutPayload','CloudCodeFunction','CallCloudCodeInput','CallCloudCodePayload','CreateClassInput','CreateClassPayload','UpdateClassInput','UpdateClassPayload','DeleteClassInput','DeleteClassPayload','PageInfo']);const RESERVED_GRAPHQL_QUERY_NAMES=(cov_267opt4ark().s[49]++,['health','viewer','class','classes']);const RESERVED_GRAPHQL_MUTATION_NAMES=(cov_267opt4ark().s[50]++,['signUp','logIn','logOut','createFile','callCloudCode','createClass','updateClass','deleteClass']);class ParseGraphQLSchema{constructor(params=(cov_267opt4ark().b[17][0]++,{})){cov_267opt4ark().f[4]++;cov_267opt4ark().s[51]++;this.parseGraphQLController=(cov_267opt4ark().b[18][0]++,params.parseGraphQLController)||(cov_267opt4ark().b[18][1]++,(0,_requiredParameter.default)('You must provide a parseGraphQLController instance!'));cov_267opt4ark().s[52]++;this.databaseController=(cov_267opt4ark().b[19][0]++,params.databaseController)||(cov_267opt4ark().b[19][1]++,(0,_requiredParameter.default)('You must provide a databaseController instance!'));cov_267opt4ark().s[53]++;this.log=(cov_267opt4ark().b[20][0]++,params.log)||(cov_267opt4ark().b[20][1]++,(0,_requiredParameter.default)('You must provide a log instance!'));cov_267opt4ark().s[54]++;this.graphQLCustomTypeDefs=params.graphQLCustomTypeDefs;cov_267opt4ark().s[55]++;this.appId=(cov_267opt4ark().b[21][0]++,params.appId)||(cov_267opt4ark().b[21][1]++,(0,_requiredParameter.default)('You must provide the appId!'));cov_267opt4ark().s[56]++;this.schemaCache=_SchemaCache.default;}async load(){cov_267opt4ark().f[5]++;const{parseGraphQLConfig}=(cov_267opt4ark().s[57]++,await this._initializeSchemaAndConfig());const parseClasses=(cov_267opt4ark().s[58]++,await this._getClassesForSchema(parseGraphQLConfig));const functionNames=(cov_267opt4ark().s[59]++,await this._getFunctionNames());const functionNamesString=(cov_267opt4ark().s[60]++,JSON.stringify(functionNames));cov_267opt4ark().s[61]++;if(!this._hasSchemaInputChanged({parseClasses,parseGraphQLConfig,functionNamesString})){cov_267opt4ark().b[22][0]++;cov_267opt4ark().s[62]++;return this.graphQLSchema;}else{cov_267opt4ark().b[22][1]++;}cov_267opt4ark().s[63]++;this.parseClasses=parseClasses;cov_267opt4ark().s[64]++;this.parseGraphQLConfig=parseGraphQLConfig;cov_267opt4ark().s[65]++;this.functionNames=functionNames;cov_267opt4ark().s[66]++;this.functionNamesString=functionNamesString;cov_267opt4ark().s[67]++;this.parseClassTypes={};cov_267opt4ark().s[68]++;this.viewerType=null;cov_267opt4ark().s[69]++;this.graphQLAutoSchema=null;cov_267opt4ark().s[70]++;this.graphQLSchema=null;cov_267opt4ark().s[71]++;this.graphQLTypes=[];cov_267opt4ark().s[72]++;this.graphQLQueries={};cov_267opt4ark().s[73]++;this.graphQLMutations={};cov_267opt4ark().s[74]++;this.graphQLSubscriptions={};cov_267opt4ark().s[75]++;this.graphQLSchemaDirectivesDefinitions=null;cov_267opt4ark().s[76]++;this.graphQLSchemaDirectives={};cov_267opt4ark().s[77]++;this.relayNodeInterface=null;cov_267opt4ark().s[78]++;defaultGraphQLTypes.load(this);cov_267opt4ark().s[79]++;defaultRelaySchema.load(this);cov_267opt4ark().s[80]++;schemaTypes.load(this);cov_267opt4ark().s[81]++;this._getParseClassesWithConfig(parseClasses,parseGraphQLConfig).forEach(([parseClass,parseClassConfig])=>{cov_267opt4ark().f[6]++;cov_267opt4ark().s[82]++;// Some times schema return the _auth_data_ field
// it will lead to unstable graphql generation order
if(parseClass.className==='_User'){cov_267opt4ark().b[23][0]++;cov_267opt4ark().s[83]++;Object.keys(parseClass.fields).forEach(fieldName=>{cov_267opt4ark().f[7]++;cov_267opt4ark().s[84]++;if(fieldName.startsWith('_auth_data_')){cov_267opt4ark().b[24][0]++;cov_267opt4ark().s[85]++;delete parseClass.fields[fieldName];}else{cov_267opt4ark().b[24][1]++;}});}else{cov_267opt4ark().b[23][1]++;}// Fields order inside the schema seems to not be consistent across
// restart so we need to ensure an alphabetical order
// also it's better for the playground documentation
const orderedFields=(cov_267opt4ark().s[86]++,{});cov_267opt4ark().s[87]++;Object.keys(parseClass.fields).sort().forEach(fieldName=>{cov_267opt4ark().f[8]++;cov_267opt4ark().s[88]++;orderedFields[fieldName]=parseClass.fields[fieldName];});cov_267opt4ark().s[89]++;parseClass.fields=orderedFields;cov_267opt4ark().s[90]++;parseClassTypes.load(this,parseClass,parseClassConfig);cov_267opt4ark().s[91]++;parseClassQueries.load(this,parseClass,parseClassConfig);cov_267opt4ark().s[92]++;parseClassMutations.load(this,parseClass,parseClassConfig);});cov_267opt4ark().s[93]++;defaultGraphQLTypes.loadArrayResult(this,parseClasses);cov_267opt4ark().s[94]++;defaultGraphQLQueries.load(this);cov_267opt4ark().s[95]++;defaultGraphQLMutations.load(this);let graphQLQuery=(cov_267opt4ark().s[96]++,undefined);cov_267opt4ark().s[97]++;if(Object.keys(this.graphQLQueries).length>0){cov_267opt4ark().b[25][0]++;cov_267opt4ark().s[98]++;graphQLQuery=new _graphql.GraphQLObjectType({name:'Query',description:'Query is the top level type for queries.',fields:this.graphQLQueries});cov_267opt4ark().s[99]++;this.addGraphQLType(graphQLQuery,true,true);}else{cov_267opt4ark().b[25][1]++;}let graphQLMutation=(cov_267opt4ark().s[100]++,undefined);cov_267opt4ark().s[101]++;if(Object.keys(this.graphQLMutations).length>0){cov_267opt4ark().b[26][0]++;cov_267opt4ark().s[102]++;graphQLMutation=new _graphql.GraphQLObjectType({name:'Mutation',description:'Mutation is the top level type for mutations.',fields:this.graphQLMutations});cov_267opt4ark().s[103]++;this.addGraphQLType(graphQLMutation,true,true);}else{cov_267opt4ark().b[26][1]++;}let graphQLSubscription=(cov_267opt4ark().s[104]++,undefined);cov_267opt4ark().s[105]++;if(Object.keys(this.graphQLSubscriptions).length>0){cov_267opt4ark().b[27][0]++;cov_267opt4ark().s[106]++;graphQLSubscription=new _graphql.GraphQLObjectType({name:'Subscription',description:'Subscription is the top level type for subscriptions.',fields:this.graphQLSubscriptions});cov_267opt4ark().s[107]++;this.addGraphQLType(graphQLSubscription,true,true);}else{cov_267opt4ark().b[27][1]++;}cov_267opt4ark().s[108]++;this.graphQLAutoSchema=new _graphql.GraphQLSchema({types:this.graphQLTypes,query:graphQLQuery,mutation:graphQLMutation,subscription:graphQLSubscription});cov_267opt4ark().s[109]++;if(this.graphQLCustomTypeDefs){cov_267opt4ark().b[28][0]++;cov_267opt4ark().s[110]++;schemaDirectives.load(this);cov_267opt4ark().s[111]++;if(typeof this.graphQLCustomTypeDefs.getTypeMap==='function'){cov_267opt4ark().b[29][0]++;// In following code we use underscore attr to avoid js var un ref
const customGraphQLSchemaTypeMap=(cov_267opt4ark().s[112]++,this.graphQLCustomTypeDefs._typeMap);cov_267opt4ark().s[113]++;const findAndReplaceLastType=(parent,key)=>{cov_267opt4ark().f[9]++;cov_267opt4ark().s[114]++;if(parent[key].name){cov_267opt4ark().b[30][0]++;cov_267opt4ark().s[115]++;if((cov_267opt4ark().b[32][0]++,this.graphQLAutoSchema._typeMap[parent[key].name])&&(cov_267opt4ark().b[32][1]++,this.graphQLAutoSchema._typeMap[parent[key].name]!==parent[key])){cov_267opt4ark().b[31][0]++;cov_267opt4ark().s[116]++;// To avoid unresolved field on overloaded schema
// replace the final type with the auto schema one
parent[key]=this.graphQLAutoSchema._typeMap[parent[key].name];}else{cov_267opt4ark().b[31][1]++;}}else{cov_267opt4ark().b[30][1]++;cov_267opt4ark().s[117]++;if(parent[key].ofType){cov_267opt4ark().b[33][0]++;cov_267opt4ark().s[118]++;findAndReplaceLastType(parent[key],'ofType');}else{cov_267opt4ark().b[33][1]++;}}};// Add non shared types from custom schema to auto schema
// note: some non shared types can use some shared types
// so this code need to be ran before the shared types addition
// we use sort to ensure schema consistency over restarts
cov_267opt4ark().s[119]++;Object.keys(customGraphQLSchemaTypeMap).sort().forEach(customGraphQLSchemaTypeKey=>{cov_267opt4ark().f[10]++;const customGraphQLSchemaType=(cov_267opt4ark().s[120]++,customGraphQLSchemaTypeMap[customGraphQLSchemaTypeKey]);cov_267opt4ark().s[121]++;if((cov_267opt4ark().b[35][0]++,!customGraphQLSchemaType)||(cov_267opt4ark().b[35][1]++,!customGraphQLSchemaType.name)||(cov_267opt4ark().b[35][2]++,customGraphQLSchemaType.name.startsWith('__'))){cov_267opt4ark().b[34][0]++;cov_267opt4ark().s[122]++;return;}else{cov_267opt4ark().b[34][1]++;}const autoGraphQLSchemaType=(cov_267opt4ark().s[123]++,this.graphQLAutoSchema._typeMap[customGraphQLSchemaType.name]);cov_267opt4ark().s[124]++;if(!autoGraphQLSchemaType){cov_267opt4ark().b[36][0]++;cov_267opt4ark().s[125]++;this.graphQLAutoSchema._typeMap[customGraphQLSchemaType.name]=customGraphQLSchemaType;}else{cov_267opt4ark().b[36][1]++;}});// Handle shared types
// We pass through each type and ensure that all sub field types are replaced
// we use sort to ensure schema consistency over restarts
cov_267opt4ark().s[126]++;Object.keys(customGraphQLSchemaTypeMap).sort().forEach(customGraphQLSchemaTypeKey=>{cov_267opt4ark().f[11]++;const customGraphQLSchemaType=(cov_267opt4ark().s[127]++,customGraphQLSchemaTypeMap[customGraphQLSchemaTypeKey]);cov_267opt4ark().s[128]++;if((cov_267opt4ark().b[38][0]++,!customGraphQLSchemaType)||(cov_267opt4ark().b[38][1]++,!customGraphQLSchemaType.name)||(cov_267opt4ark().b[38][2]++,customGraphQLSchemaType.name.startsWith('__'))){cov_267opt4ark().b[37][0]++;cov_267opt4ark().s[129]++;return;}else{cov_267opt4ark().b[37][1]++;}const autoGraphQLSchemaType=(cov_267opt4ark().s[130]++,this.graphQLAutoSchema._typeMap[customGraphQLSchemaType.name]);cov_267opt4ark().s[131]++;if((cov_267opt4ark().b[40][0]++,autoGraphQLSchemaType)&&(cov_267opt4ark().b[40][1]++,typeof customGraphQLSchemaType.getFields==='function')){cov_267opt4ark().b[39][0]++;cov_267opt4ark().s[132]++;Object.keys(customGraphQLSchemaType._fields).sort().forEach(fieldKey=>{cov_267opt4ark().f[12]++;const field=(cov_267opt4ark().s[133]++,customGraphQLSchemaType._fields[fieldKey]);cov_267opt4ark().s[134]++;findAndReplaceLastType(field,'type');cov_267opt4ark().s[135]++;autoGraphQLSchemaType._fields[field.name]=field;});}else{cov_267opt4ark().b[39][1]++;}});cov_267opt4ark().s[136]++;this.graphQLSchema=this.graphQLAutoSchema;}else{cov_267opt4ark().b[29][1]++;cov_267opt4ark().s[137]++;if(typeof this.graphQLCustomTypeDefs==='function'){cov_267opt4ark().b[41][0]++;cov_267opt4ark().s[138]++;this.graphQLSchema=await this.graphQLCustomTypeDefs({directivesDefinitionsSchema:this.graphQLSchemaDirectivesDefinitions,autoSchema:this.graphQLAutoSchema,stitchSchemas:_stitch.stitchSchemas});}else{cov_267opt4ark().b[41][1]++;cov_267opt4ark().s[139]++;this.graphQLSchema=(0,_stitch.stitchSchemas)({schemas:[this.graphQLSchemaDirectivesDefinitions,this.graphQLAutoSchema,this.graphQLCustomTypeDefs],mergeDirectives:true});}}// Only merge directive when string schema provided
const graphQLSchemaTypeMap=(cov_267opt4ark().s[140]++,this.graphQLSchema.getTypeMap());cov_267opt4ark().s[141]++;Object.keys(graphQLSchemaTypeMap).forEach(graphQLSchemaTypeName=>{cov_267opt4ark().f[13]++;const graphQLSchemaType=(cov_267opt4ark().s[142]++,graphQLSchemaTypeMap[graphQLSchemaTypeName]);cov_267opt4ark().s[143]++;if((cov_267opt4ark().b[43][0]++,typeof graphQLSchemaType.getFields==='function')&&(cov_267opt4ark().b[43][1]++,this.graphQLCustomTypeDefs.definitions)){cov_267opt4ark().b[42][0]++;const graphQLCustomTypeDef=(cov_267opt4ark().s[144]++,this.graphQLCustomTypeDefs.definitions.find(definition=>{cov_267opt4ark().f[14]++;cov_267opt4ark().s[145]++;return definition.name.value===graphQLSchemaTypeName;}));cov_267opt4ark().s[146]++;if(graphQLCustomTypeDef){cov_267opt4ark().b[44][0]++;const graphQLSchemaTypeFieldMap=(cov_267opt4ark().s[147]++,graphQLSchemaType.getFields());cov_267opt4ark().s[148]++;Object.keys(graphQLSchemaTypeFieldMap).forEach(graphQLSchemaTypeFieldName=>{cov_267opt4ark().f[15]++;const graphQLSchemaTypeField=(cov_267opt4ark().s[149]++,graphQLSchemaTypeFieldMap[graphQLSchemaTypeFieldName]);cov_267opt4ark().s[150]++;if(!graphQLSchemaTypeField.astNode){cov_267opt4ark().b[45][0]++;const astNode=(cov_267opt4ark().s[151]++,graphQLCustomTypeDef.fields.find(field=>{cov_267opt4ark().f[16]++;cov_267opt4ark().s[152]++;return field.name.value===graphQLSchemaTypeFieldName;}));cov_267opt4ark().s[153]++;if(astNode){cov_267opt4ark().b[46][0]++;cov_267opt4ark().s[154]++;graphQLSchemaTypeField.astNode=astNode;}else{cov_267opt4ark().b[46][1]++;}}else{cov_267opt4ark().b[45][1]++;}});}else{cov_267opt4ark().b[44][1]++;}}else{cov_267opt4ark().b[42][1]++;}});cov_267opt4ark().s[155]++;_utils.SchemaDirectiveVisitor.visitSchemaDirectives(this.graphQLSchema,this.graphQLSchemaDirectives);}else{cov_267opt4ark().b[28][1]++;cov_267opt4ark().s[156]++;this.graphQLSchema=this.graphQLAutoSchema;}cov_267opt4ark().s[157]++;return this.graphQLSchema;}addGraphQLType(type,throwError=(cov_267opt4ark().b[47][0]++,false),ignoreReserved=(cov_267opt4ark().b[48][0]++,false),ignoreConnection=(cov_267opt4ark().b[49][0]++,false)){cov_267opt4ark().f[17]++;cov_267opt4ark().s[158]++;if((cov_267opt4ark().b[51][0]++,!ignoreReserved)&&(cov_267opt4ark().b[51][1]++,RESERVED_GRAPHQL_TYPE_NAMES.includes(type.name))||(cov_267opt4ark().b[51][2]++,this.graphQLTypes.find(existingType=>{cov_267opt4ark().f[18]++;cov_267opt4ark().s[159]++;return existingType.name===type.name;}))||(cov_267opt4ark().b[51][3]++,!ignoreConnection)&&(cov_267opt4ark().b[51][4]++,type.name.endsWith('Connection'))){cov_267opt4ark().b[50][0]++;const message=(cov_267opt4ark().s[160]++,`Type ${type.name} could not be added to the auto schema because it collided with an existing type.`);cov_267opt4ark().s[161]++;if(throwError){cov_267opt4ark().b[52][0]++;cov_267opt4ark().s[162]++;throw new Error(message);}else{cov_267opt4ark().b[52][1]++;}cov_267opt4ark().s[163]++;this.log.warn(message);cov_267opt4ark().s[164]++;return undefined;}else{cov_267opt4ark().b[50][1]++;}cov_267opt4ark().s[165]++;this.graphQLTypes.push(type);cov_267opt4ark().s[166]++;return type;}addGraphQLQuery(fieldName,field,throwError=(cov_267opt4ark().b[53][0]++,false),ignoreReserved=(cov_267opt4ark().b[54][0]++,false)){cov_267opt4ark().f[19]++;cov_267opt4ark().s[167]++;if((cov_267opt4ark().b[56][0]++,!ignoreReserved)&&(cov_267opt4ark().b[56][1]++,RESERVED_GRAPHQL_QUERY_NAMES.includes(fieldName))||(cov_267opt4ark().b[56][2]++,this.graphQLQueries[fieldName])){cov_267opt4ark().b[55][0]++;const message=(cov_267opt4ark().s[168]++,`Query ${fieldName} could not be added to the auto schema because it collided with an existing field.`);cov_267opt4ark().s[169]++;if(throwError){cov_267opt4ark().b[57][0]++;cov_267opt4ark().s[170]++;throw new Error(message);}else{cov_267opt4ark().b[57][1]++;}cov_267opt4ark().s[171]++;this.log.warn(message);cov_267opt4ark().s[172]++;return undefined;}else{cov_267opt4ark().b[55][1]++;}cov_267opt4ark().s[173]++;this.graphQLQueries[fieldName]=field;cov_267opt4ark().s[174]++;return field;}addGraphQLMutation(fieldName,field,throwError=(cov_267opt4ark().b[58][0]++,false),ignoreReserved=(cov_267opt4ark().b[59][0]++,false)){cov_267opt4ark().f[20]++;cov_267opt4ark().s[175]++;if((cov_267opt4ark().b[61][0]++,!ignoreReserved)&&(cov_267opt4ark().b[61][1]++,RESERVED_GRAPHQL_MUTATION_NAMES.includes(fieldName))||(cov_267opt4ark().b[61][2]++,this.graphQLMutations[fieldName])){cov_267opt4ark().b[60][0]++;const message=(cov_267opt4ark().s[176]++,`Mutation ${fieldName} could not be added to the auto schema because it collided with an existing field.`);cov_267opt4ark().s[177]++;if(throwError){cov_267opt4ark().b[62][0]++;cov_267opt4ark().s[178]++;throw new Error(message);}else{cov_267opt4ark().b[62][1]++;}cov_267opt4ark().s[179]++;this.log.warn(message);cov_267opt4ark().s[180]++;return undefined;}else{cov_267opt4ark().b[60][1]++;}cov_267opt4ark().s[181]++;this.graphQLMutations[fieldName]=field;cov_267opt4ark().s[182]++;return field;}handleError(error){cov_267opt4ark().f[21]++;cov_267opt4ark().s[183]++;if(error instanceof _node.default.Error){cov_267opt4ark().b[63][0]++;cov_267opt4ark().s[184]++;this.log.error('Parse error: ',error);}else{cov_267opt4ark().b[63][1]++;cov_267opt4ark().s[185]++;this.log.error('Uncaught internal server error.',error,error.stack);}cov_267opt4ark().s[186]++;throw(0,_parseGraphQLUtils.toGraphQLError)(error);}async _initializeSchemaAndConfig(){cov_267opt4ark().f[22]++;const[schemaController,parseGraphQLConfig]=(cov_267opt4ark().s[187]++,await Promise.all([this.databaseController.loadSchema(),this.parseGraphQLController.getGraphQLConfig()]));cov_267opt4ark().s[188]++;this.schemaController=schemaController;cov_267opt4ark().s[189]++;return{parseGraphQLConfig};}/**
   * Gets all classes found by the `schemaController`
   * minus those filtered out by the app's parseGraphQLConfig.
   */async _getClassesForSchema(parseGraphQLConfig){cov_267opt4ark().f[23]++;const{enabledForClasses,disabledForClasses}=(cov_267opt4ark().s[190]++,parseGraphQLConfig);const allClasses=(cov_267opt4ark().s[191]++,await this.schemaController.getAllClasses());cov_267opt4ark().s[192]++;if((cov_267opt4ark().b[65][0]++,Array.isArray(enabledForClasses))||(cov_267opt4ark().b[65][1]++,Array.isArray(disabledForClasses))){cov_267opt4ark().b[64][0]++;let includedClasses=(cov_267opt4ark().s[193]++,allClasses);cov_267opt4ark().s[194]++;if(enabledForClasses){cov_267opt4ark().b[66][0]++;cov_267opt4ark().s[195]++;includedClasses=allClasses.filter(clazz=>{cov_267opt4ark().f[24]++;cov_267opt4ark().s[196]++;return enabledForClasses.includes(clazz.className);});}else{cov_267opt4ark().b[66][1]++;}cov_267opt4ark().s[197]++;if(disabledForClasses){cov_267opt4ark().b[67][0]++;cov_267opt4ark().s[198]++;// Classes included in `enabledForClasses` that
// are also present in `disabledForClasses` will
// still be filtered out
includedClasses=includedClasses.filter(clazz=>{cov_267opt4ark().f[25]++;cov_267opt4ark().s[199]++;return!disabledForClasses.includes(clazz.className);});}else{cov_267opt4ark().b[67][1]++;}cov_267opt4ark().s[200]++;this.isUsersClassDisabled=!includedClasses.some(clazz=>{cov_267opt4ark().f[26]++;cov_267opt4ark().s[201]++;return clazz.className==='_User';});cov_267opt4ark().s[202]++;return includedClasses;}else{cov_267opt4ark().b[64][1]++;cov_267opt4ark().s[203]++;return allClasses;}}/**
   * This method returns a list of tuples
   * that provide the parseClass along with
   * its parseClassConfig where provided.
   */_getParseClassesWithConfig(parseClasses,parseGraphQLConfig){cov_267opt4ark().f[27]++;const{classConfigs}=(cov_267opt4ark().s[204]++,parseGraphQLConfig);// Make sures that the default classes and classes that
// starts with capitalized letter will be generated first.
cov_267opt4ark().s[205]++;const sortClasses=(a,b)=>{cov_267opt4ark().f[28]++;cov_267opt4ark().s[206]++;a=a.className;cov_267opt4ark().s[207]++;b=b.className;cov_267opt4ark().s[208]++;if(a[0]==='_'){cov_267opt4ark().b[68][0]++;cov_267opt4ark().s[209]++;if(b[0]!=='_'){cov_267opt4ark().b[69][0]++;cov_267opt4ark().s[210]++;return-1;}else{cov_267opt4ark().b[69][1]++;}}else{cov_267opt4ark().b[68][1]++;}cov_267opt4ark().s[211]++;if(b[0]==='_'){cov_267opt4ark().b[70][0]++;cov_267opt4ark().s[212]++;if(a[0]!=='_'){cov_267opt4ark().b[71][0]++;cov_267opt4ark().s[213]++;return 1;}else{cov_267opt4ark().b[71][1]++;}}else{cov_267opt4ark().b[70][1]++;}cov_267opt4ark().s[214]++;if(a===b){cov_267opt4ark().b[72][0]++;cov_267opt4ark().s[215]++;return 0;}else{cov_267opt4ark().b[72][1]++;cov_267opt4ark().s[216]++;if(a<b){cov_267opt4ark().b[73][0]++;cov_267opt4ark().s[217]++;return-1;}else{cov_267opt4ark().b[73][1]++;cov_267opt4ark().s[218]++;return 1;}}};cov_267opt4ark().s[219]++;return parseClasses.sort(sortClasses).map(parseClass=>{cov_267opt4ark().f[29]++;let parseClassConfig;cov_267opt4ark().s[220]++;if(classConfigs){cov_267opt4ark().b[74][0]++;cov_267opt4ark().s[221]++;parseClassConfig=classConfigs.find(c=>{cov_267opt4ark().f[30]++;cov_267opt4ark().s[222]++;return c.className===parseClass.className;});}else{cov_267opt4ark().b[74][1]++;}cov_267opt4ark().s[223]++;return[parseClass,parseClassConfig];});}async _getFunctionNames(){cov_267opt4ark().f[31]++;cov_267opt4ark().s[224]++;return await(0,_triggers.getFunctionNames)(this.appId).filter(functionName=>{cov_267opt4ark().f[32]++;cov_267opt4ark().s[225]++;if(/^[_a-zA-Z][_a-zA-Z0-9]*$/.test(functionName)){cov_267opt4ark().b[75][0]++;cov_267opt4ark().s[226]++;return true;}else{cov_267opt4ark().b[75][1]++;cov_267opt4ark().s[227]++;this.log.warn(`Function ${functionName} could not be added to the auto schema because GraphQL names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/.`);cov_267opt4ark().s[228]++;return false;}});}/**
   * Checks for changes to the parseClasses
   * objects (i.e. database schema) or to
   * the parseGraphQLConfig object. If no
   * changes are found, return true;
   */_hasSchemaInputChanged(params){cov_267opt4ark().f[33]++;const{parseClasses,parseGraphQLConfig,functionNamesString}=(cov_267opt4ark().s[229]++,params);// First init
cov_267opt4ark().s[230]++;if((cov_267opt4ark().b[77][0]++,!this.parseCachedClasses)||(cov_267opt4ark().b[77][1]++,!this.graphQLSchema)){cov_267opt4ark().b[76][0]++;const thisParseClassesObj=(cov_267opt4ark().s[231]++,parseClasses.reduce((acc,clzz)=>{cov_267opt4ark().f[34]++;cov_267opt4ark().s[232]++;acc[clzz.className]=clzz;cov_267opt4ark().s[233]++;return acc;},{}));cov_267opt4ark().s[234]++;this.parseCachedClasses=thisParseClassesObj;cov_267opt4ark().s[235]++;return true;}else{cov_267opt4ark().b[76][1]++;}const newParseCachedClasses=(cov_267opt4ark().s[236]++,parseClasses.reduce((acc,clzz)=>{cov_267opt4ark().f[35]++;cov_267opt4ark().s[237]++;acc[clzz.className]=clzz;cov_267opt4ark().s[238]++;return acc;},{}));cov_267opt4ark().s[239]++;if((cov_267opt4ark().b[79][0]++,(0,_util.isDeepStrictEqual)(this.parseGraphQLConfig,parseGraphQLConfig))&&(cov_267opt4ark().b[79][1]++,this.functionNamesString===functionNamesString)&&(cov_267opt4ark().b[79][2]++,(0,_util.isDeepStrictEqual)(this.parseCachedClasses,newParseCachedClasses))){cov_267opt4ark().b[78][0]++;cov_267opt4ark().s[240]++;return false;}else{cov_267opt4ark().b[78][1]++;}cov_267opt4ark().s[241]++;this.parseCachedClasses=newParseCachedClasses;cov_267opt4ark().s[242]++;return true;}}cov_267opt4ark().s[243]++;exports.ParseGraphQLSchema=ParseGraphQLSchema;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,