"use strict";// Helper functions for accessing the github API.
function cov_8anx0b5z5(){var path="/parse-server/lib/Adapters/Auth/github.js";var hash="e2b4ed1f3a683197febbc64b0a75fab4a4f9241d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Adapters/Auth/github.js",statementMap:{"0":{start:{line:4,column:12},end:{line:4,column:39}},"1":{start:{line:6,column:21},end:{line:6,column:46}},"2":{start:{line:10,column:2},end:{line:16,column:5}},"3":{start:{line:11,column:4},end:{line:13,column:5}},"4":{start:{line:12,column:6},end:{line:12,column:13}},"5":{start:{line:15,column:4},end:{line:15,column:97}},"6":{start:{line:21,column:2},end:{line:21,column:27}},"7":{start:{line:26,column:2},end:{line:33,column:5}},"8":{start:{line:36,column:0},end:{line:39,column:2}}},fnMap:{"0":{name:"validateAuthData",decl:{start:{line:9,column:9},end:{line:9,column:25}},loc:{start:{line:9,column:36},end:{line:17,column:1}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:10,column:53},end:{line:10,column:54}},loc:{start:{line:10,column:61},end:{line:16,column:3}},line:10},"2":{name:"validateAppId",decl:{start:{line:20,column:9},end:{line:20,column:22}},loc:{start:{line:20,column:25},end:{line:22,column:1}},line:20},"3":{name:"request",decl:{start:{line:25,column:9},end:{line:25,column:16}},loc:{start:{line:25,column:37},end:{line:34,column:1}},line:25}},branchMap:{"0":{loc:{start:{line:11,column:4},end:{line:13,column:5}},type:"if",locations:[{start:{line:11,column:4},end:{line:13,column:5}},{start:{line:11,column:4},end:{line:13,column:5}}],line:11},"1":{loc:{start:{line:11,column:8},end:{line:11,column:38}},type:"binary-expr",locations:[{start:{line:11,column:8},end:{line:11,column:12}},{start:{line:11,column:16},end:{line:11,column:38}}],line:11}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,sources:["../../../src/Adapters/Auth/github.js"],names:["Parse","require","httpsRequest","validateAuthData","authData","request","access_token","then","data","id","Error","OBJECT_NOT_FOUND","validateAppId","Promise","resolve","path","get","host","headers","Authorization","module","exports"],mappings:";;AAAA;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBD,KAAlC;;AACA,MAAME,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA5B,C,CAEA;;;AACA,SAASE,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,SAAOC,OAAO,CAAC,MAAD,EAASD,QAAQ,CAACE,YAAlB,CAAP,CAAuCC,IAAvC,CAA4CC,IAAI,IAAI;AACzD,QAAIA,IAAI,IAAIA,IAAI,CAACC,EAAL,IAAWL,QAAQ,CAACK,EAAhC,EAAoC;AAClC;AACD;;AACD,UAAM,IAAIT,KAAK,CAACU,KAAV,CAAgBV,KAAK,CAACU,KAAN,CAAYC,gBAA5B,EAA8C,uCAA9C,CAAN;AACD,GALM,CAAP;AAMD,C,CAED;;;AACA,SAASC,aAAT,GAAyB;AACvB,SAAOC,OAAO,CAACC,OAAR,EAAP;AACD,C,CAED;;;AACA,SAAST,OAAT,CAAiBU,IAAjB,EAAuBT,YAAvB,EAAqC;AACnC,SAAOJ,YAAY,CAACc,GAAb,CAAiB;AACtBC,IAAAA,IAAI,EAAE,gBADgB;AAEtBF,IAAAA,IAAI,EAAE,MAAMA,IAFU;AAGtBG,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAE,YAAYb,YADpB;AAEP,oBAAc;AAFP;AAHa,GAAjB,CAAP;AAQD;;AAEDc,MAAM,CAACC,OAAP,GAAiB;AACfT,EAAAA,aAAa,EAAEA,aADA;AAEfT,EAAAA,gBAAgB,EAAEA;AAFH,CAAjB",sourcesContent:["// Helper functions for accessing the github API.\nvar Parse = require('parse/node').Parse;\nconst httpsRequest = require('./httpsRequest');\n\n// Returns a promise that fulfills iff this user id is valid.\nfunction validateAuthData(authData) {\n  return request('user', authData.access_token).then(data => {\n    if (data && data.id == authData.id) {\n      return;\n    }\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Github auth is invalid for this user.');\n  });\n}\n\n// Returns a promise that fulfills iff this app id is valid.\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\n// A promisey wrapper for api requests\nfunction request(path, access_token) {\n  return httpsRequest.get({\n    host: 'api.github.com',\n    path: '/' + path,\n    headers: {\n      Authorization: 'bearer ' + access_token,\n      'User-Agent': 'parse-server',\n    },\n  });\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData,\n};\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"e2b4ed1f3a683197febbc64b0a75fab4a4f9241d"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_8anx0b5z5=function(){return actualCoverage;};}return actualCoverage;}cov_8anx0b5z5();var Parse=(cov_8anx0b5z5().s[0]++,require('parse/node').Parse);const httpsRequest=(cov_8anx0b5z5().s[1]++,require('./httpsRequest'));// Returns a promise that fulfills iff this user id is valid.
function validateAuthData(authData){cov_8anx0b5z5().f[0]++;cov_8anx0b5z5().s[2]++;return request('user',authData.access_token).then(data=>{cov_8anx0b5z5().f[1]++;cov_8anx0b5z5().s[3]++;if((cov_8anx0b5z5().b[1][0]++,data)&&(cov_8anx0b5z5().b[1][1]++,data.id==authData.id)){cov_8anx0b5z5().b[0][0]++;cov_8anx0b5z5().s[4]++;return;}else{cov_8anx0b5z5().b[0][1]++;}cov_8anx0b5z5().s[5]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,'Github auth is invalid for this user.');});}// Returns a promise that fulfills iff this app id is valid.
function validateAppId(){cov_8anx0b5z5().f[2]++;cov_8anx0b5z5().s[6]++;return Promise.resolve();}// A promisey wrapper for api requests
function request(path,access_token){cov_8anx0b5z5().f[3]++;cov_8anx0b5z5().s[7]++;return httpsRequest.get({host:'api.github.com',path:'/'+path,headers:{Authorization:'bearer '+access_token,'User-Agent':'parse-server'}});}cov_8anx0b5z5().s[8]++;module.exports={validateAppId:validateAppId,validateAuthData:validateAuthData};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2dpdGh1Yi5qcyJdLCJuYW1lcyI6WyJQYXJzZSIsInJlcXVpcmUiLCJodHRwc1JlcXVlc3QiLCJ2YWxpZGF0ZUF1dGhEYXRhIiwiYXV0aERhdGEiLCJyZXF1ZXN0IiwiYWNjZXNzX3Rva2VuIiwidGhlbiIsImRhdGEiLCJpZCIsIkVycm9yIiwiT0JKRUNUX05PVF9GT1VORCIsInZhbGlkYXRlQXBwSWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInBhdGgiLCJnZXQiLCJob3N0IiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0EsSUFBSUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsWUFBRCxDQUFQLENBQXNCRCxLQUFsQzs7QUFDQSxNQUFNRSxZQUFZLEdBQUdELE9BQU8sQ0FBQyxnQkFBRCxDQUE1QixDLENBRUE7OztBQUNBLFNBQVNFLGdCQUFULENBQTBCQyxRQUExQixFQUFvQztBQUNsQyxTQUFPQyxPQUFPLENBQUMsTUFBRCxFQUFTRCxRQUFRLENBQUNFLFlBQWxCLENBQVAsQ0FBdUNDLElBQXZDLENBQTRDQyxJQUFJLElBQUk7QUFDekQsUUFBSUEsSUFBSSxJQUFJQSxJQUFJLENBQUNDLEVBQUwsSUFBV0wsUUFBUSxDQUFDSyxFQUFoQyxFQUFvQztBQUNsQztBQUNEOztBQUNELFVBQU0sSUFBSVQsS0FBSyxDQUFDVSxLQUFWLENBQWdCVixLQUFLLENBQUNVLEtBQU4sQ0FBWUMsZ0JBQTVCLEVBQThDLHVDQUE5QyxDQUFOO0FBQ0QsR0FMTSxDQUFQO0FBTUQsQyxDQUVEOzs7QUFDQSxTQUFTQyxhQUFULEdBQXlCO0FBQ3ZCLFNBQU9DLE9BQU8sQ0FBQ0MsT0FBUixFQUFQO0FBQ0QsQyxDQUVEOzs7QUFDQSxTQUFTVCxPQUFULENBQWlCVSxJQUFqQixFQUF1QlQsWUFBdkIsRUFBcUM7QUFDbkMsU0FBT0osWUFBWSxDQUFDYyxHQUFiLENBQWlCO0FBQ3RCQyxJQUFBQSxJQUFJLEVBQUUsZ0JBRGdCO0FBRXRCRixJQUFBQSxJQUFJLEVBQUUsTUFBTUEsSUFGVTtBQUd0QkcsSUFBQUEsT0FBTyxFQUFFO0FBQ1BDLE1BQUFBLGFBQWEsRUFBRSxZQUFZYixZQURwQjtBQUVQLG9CQUFjO0FBRlA7QUFIYSxHQUFqQixDQUFQO0FBUUQ7O0FBRURjLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmVCxFQUFBQSxhQUFhLEVBQUVBLGFBREE7QUFFZlQsRUFBQUEsZ0JBQWdCLEVBQUVBO0FBRkgsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBIZWxwZXIgZnVuY3Rpb25zIGZvciBhY2Nlc3NpbmcgdGhlIGdpdGh1YiBBUEkuXG52YXIgUGFyc2UgPSByZXF1aXJlKCdwYXJzZS9ub2RlJykuUGFyc2U7XG5jb25zdCBodHRwc1JlcXVlc3QgPSByZXF1aXJlKCcuL2h0dHBzUmVxdWVzdCcpO1xuXG4vLyBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGZ1bGZpbGxzIGlmZiB0aGlzIHVzZXIgaWQgaXMgdmFsaWQuXG5mdW5jdGlvbiB2YWxpZGF0ZUF1dGhEYXRhKGF1dGhEYXRhKSB7XG4gIHJldHVybiByZXF1ZXN0KCd1c2VyJywgYXV0aERhdGEuYWNjZXNzX3Rva2VuKS50aGVuKGRhdGEgPT4ge1xuICAgIGlmIChkYXRhICYmIGRhdGEuaWQgPT0gYXV0aERhdGEuaWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsICdHaXRodWIgYXV0aCBpcyBpbnZhbGlkIGZvciB0aGlzIHVzZXIuJyk7XG4gIH0pO1xufVxuXG4vLyBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGZ1bGZpbGxzIGlmZiB0aGlzIGFwcCBpZCBpcyB2YWxpZC5cbmZ1bmN0aW9uIHZhbGlkYXRlQXBwSWQoKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn1cblxuLy8gQSBwcm9taXNleSB3cmFwcGVyIGZvciBhcGkgcmVxdWVzdHNcbmZ1bmN0aW9uIHJlcXVlc3QocGF0aCwgYWNjZXNzX3Rva2VuKSB7XG4gIHJldHVybiBodHRwc1JlcXVlc3QuZ2V0KHtcbiAgICBob3N0OiAnYXBpLmdpdGh1Yi5jb20nLFxuICAgIHBhdGg6ICcvJyArIHBhdGgsXG4gICAgaGVhZGVyczoge1xuICAgICAgQXV0aG9yaXphdGlvbjogJ2JlYXJlciAnICsgYWNjZXNzX3Rva2VuLFxuICAgICAgJ1VzZXItQWdlbnQnOiAncGFyc2Utc2VydmVyJyxcbiAgICB9LFxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHZhbGlkYXRlQXBwSWQ6IHZhbGlkYXRlQXBwSWQsXG4gIHZhbGlkYXRlQXV0aERhdGE6IHZhbGlkYXRlQXV0aERhdGEsXG59O1xuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2dpdGh1Yi5qcyJdLCJuYW1lcyI6WyJQYXJzZSIsInJlcXVpcmUiLCJodHRwc1JlcXVlc3QiLCJhdXRoRGF0YSIsImRhdGEiLCJQcm9taXNlIiwiaG9zdCIsInBhdGgiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsIm1vZHVsZSIsInZhbGlkYXRlQXBwSWQiLCJ2YWxpZGF0ZUF1dGhEYXRhIl0sIm1hcHBpbmdzIjoiYUFBQTs2c0lBTUU7eUZBTEYsR0FBSUEsQ0FBQUEsS0FBSyx5QkFBR0MsT0FBTyxDQUFQQSxZQUFPLENBQVBBLENBQVosS0FBUyxDQUFULENBQ0EsS0FBTUMsQ0FBQUEsWUFBWSx5QkFBR0QsT0FBTyxDQUE1QixnQkFBNEIsQ0FBVixDQUFsQixDQUVBO0FBQ0EsUUFBQSxDQUFBLGdCQUFBLENBQUEsUUFBQSxDQUFvQywrQ0FDbEMsTUFBTyxDQUFBLE9BQU8sQ0FBQSxNQUFBLENBQVNFLFFBQVEsQ0FBeEIsWUFBTyxDQUFQLENBQUEsSUFBQSxDQUE0Q0MsSUFBSSxFQUFJLCtDQUN6RCxHQUFJQSwyQkFBQUEsSUFBSSw4QkFBSUEsSUFBSSxDQUFKQSxFQUFBQSxFQUFXRCxRQUFRLENBQS9CLEVBQVEsQ0FBUixDQUFvQyxrREFDbEMsT0FDRCxDQUZELGdDQUR5RCx1QkFJekQsS0FBTSxJQUFJSCxDQUFBQSxLQUFLLENBQVQsS0FBQSxDQUFnQkEsS0FBSyxDQUFMQSxLQUFBQSxDQUFoQixnQkFBQSxDQUFOLHVDQUFNLENBQU4sQ0FKRixDQUFPLENBQVAsQyxDQVFGO0FBQ0EsUUFBQSxDQUFBLGFBQUEsRUFBeUIsK0NBQ3ZCLE1BQU9LLENBQUFBLE9BQU8sQ0FBZCxPQUFPQSxFQUFQLEMsQ0FHRjtBQUNBLFFBQUEsQ0FBQSxPQUFBLENBQUEsSUFBQSxDQUFBLFlBQUEsQ0FBcUMsK0NBQ25DLE1BQU8sQ0FBQSxZQUFZLENBQVosR0FBQSxDQUFpQixDQUN0QkMsSUFBSSxDQURrQixnQkFBQSxDQUV0QkMsSUFBSSxDQUFFLElBRmdCLElBQUEsQ0FHdEJDLE9BQU8sQ0FBRSxDQUNQQyxhQUFhLENBQUUsVUFEUixZQUFBLENBRVAsYUFBYyxjQUZQLENBSGEsQ0FBakIsQ0FBUCxDQVFELEMsdUJBRURDLE1BQU0sQ0FBTkEsT0FBQUEsQ0FBaUIsQ0FDZkMsYUFBYSxDQURFLGFBQUEsQ0FFZkMsZ0JBQWdCLENBQUVBLGdCQUZILENBQWpCRixDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSGVscGVyIGZ1bmN0aW9ucyBmb3IgYWNjZXNzaW5nIHRoZSBnaXRodWIgQVBJLlxudmFyIFBhcnNlID0gcmVxdWlyZSgncGFyc2Uvbm9kZScpLlBhcnNlO1xuY29uc3QgaHR0cHNSZXF1ZXN0ID0gcmVxdWlyZSgnLi9odHRwc1JlcXVlc3QnKTtcblxuLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCBmdWxmaWxscyBpZmYgdGhpcyB1c2VyIGlkIGlzIHZhbGlkLlxuZnVuY3Rpb24gdmFsaWRhdGVBdXRoRGF0YShhdXRoRGF0YSkge1xuICByZXR1cm4gcmVxdWVzdCgndXNlcicsIGF1dGhEYXRhLmFjY2Vzc190b2tlbikudGhlbihkYXRhID0+IHtcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmlkID09IGF1dGhEYXRhLmlkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELCAnR2l0aHViIGF1dGggaXMgaW52YWxpZCBmb3IgdGhpcyB1c2VyLicpO1xuICB9KTtcbn1cblxuLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCBmdWxmaWxscyBpZmYgdGhpcyBhcHAgaWQgaXMgdmFsaWQuXG5mdW5jdGlvbiB2YWxpZGF0ZUFwcElkKCkge1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59XG5cbi8vIEEgcHJvbWlzZXkgd3JhcHBlciBmb3IgYXBpIHJlcXVlc3RzXG5mdW5jdGlvbiByZXF1ZXN0KHBhdGgsIGFjY2Vzc190b2tlbikge1xuICByZXR1cm4gaHR0cHNSZXF1ZXN0LmdldCh7XG4gICAgaG9zdDogJ2FwaS5naXRodWIuY29tJyxcbiAgICBwYXRoOiAnLycgKyBwYXRoLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIEF1dGhvcml6YXRpb246ICdiZWFyZXIgJyArIGFjY2Vzc190b2tlbixcbiAgICAgICdVc2VyLUFnZW50JzogJ3BhcnNlLXNlcnZlcicsXG4gICAgfSxcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB2YWxpZGF0ZUFwcElkOiB2YWxpZGF0ZUFwcElkLFxuICB2YWxpZGF0ZUF1dGhEYXRhOiB2YWxpZGF0ZUF1dGhEYXRhLFxufTtcbiJdfQ==