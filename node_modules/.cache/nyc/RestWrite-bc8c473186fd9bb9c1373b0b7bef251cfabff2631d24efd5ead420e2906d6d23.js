"use strict";function cov_2dp9rvnwbz(){var path="/parse-server/lib/RestWrite.js";var hash="dc9129a2dbec1e928120a0b1846dda91b647e381";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/RestWrite.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:25}},"2":{start:{line:8,column:17},end:{line:8,column:63}},"3":{start:{line:10,column:14},end:{line:10,column:55}},"4":{start:{line:12,column:14},end:{line:12,column:57}},"5":{start:{line:14,column:39},end:{line:14,column:93}},"6":{start:{line:19,column:23},end:{line:19,column:64}},"7":{start:{line:21,column:15},end:{line:21,column:34}},"8":{start:{line:23,column:13},end:{line:23,column:30}},"9":{start:{line:25,column:18},end:{line:25,column:42}},"10":{start:{line:27,column:21},end:{line:27,column:42}},"11":{start:{line:29,column:12},end:{line:29,column:33}},"12":{start:{line:31,column:15},end:{line:31,column:36}},"13":{start:{line:33,column:16},end:{line:33,column:38}},"14":{start:{line:45,column:2},end:{line:47,column:3}},"15":{start:{line:46,column:4},end:{line:46,column:124}},"16":{start:{line:49,column:2},end:{line:49,column:23}},"17":{start:{line:50,column:2},end:{line:50,column:19}},"18":{start:{line:51,column:2},end:{line:51,column:29}},"19":{start:{line:52,column:2},end:{line:52,column:29}},"20":{start:{line:53,column:2},end:{line:53,column:20}},"21":{start:{line:54,column:2},end:{line:54,column:23}},"22":{start:{line:55,column:2},end:{line:55,column:31}},"23":{start:{line:57,column:2},end:{line:59,column:3}},"24":{start:{line:58,column:4},end:{line:58,column:36}},"25":{start:{line:61,column:2},end:{line:75,column:3}},"26":{start:{line:62,column:4},end:{line:74,column:5}},"27":{start:{line:63,column:6},end:{line:65,column:7}},"28":{start:{line:64,column:8},end:{line:64,column:110}},"29":{start:{line:67,column:6},end:{line:69,column:7}},"30":{start:{line:68,column:8},end:{line:68,column:98}},"31":{start:{line:71,column:6},end:{line:73,column:7}},"32":{start:{line:72,column:8},end:{line:72,column:92}},"33":{start:{line:82,column:2},end:{line:82,column:23}},"34":{start:{line:85,column:2},end:{line:85,column:31}},"35":{start:{line:86,column:2},end:{line:86,column:29}},"36":{start:{line:88,column:2},end:{line:88,column:35}},"37":{start:{line:90,column:2},end:{line:90,column:49}},"38":{start:{line:93,column:2},end:{line:93,column:36}},"39":{start:{line:100,column:0},end:{line:139,column:2}},"40":{start:{line:101,column:2},end:{line:138,column:5}},"41":{start:{line:102,column:4},end:{line:102,column:36}},"42":{start:{line:104,column:4},end:{line:104,column:46}},"43":{start:{line:106,column:4},end:{line:106,column:37}},"44":{start:{line:108,column:4},end:{line:108,column:32}},"45":{start:{line:110,column:4},end:{line:110,column:35}},"46":{start:{line:112,column:4},end:{line:112,column:39}},"47":{start:{line:114,column:4},end:{line:114,column:48}},"48":{start:{line:116,column:4},end:{line:116,column:33}},"49":{start:{line:118,column:4},end:{line:118,column:50}},"50":{start:{line:119,column:4},end:{line:119,column:44}},"51":{start:{line:121,column:4},end:{line:121,column:32}},"52":{start:{line:123,column:4},end:{line:123,column:48}},"53":{start:{line:125,column:4},end:{line:125,column:44}},"54":{start:{line:127,column:4},end:{line:127,column:39}},"55":{start:{line:129,column:4},end:{line:129,column:45}},"56":{start:{line:131,column:4},end:{line:131,column:33}},"57":{start:{line:133,column:4},end:{line:133,column:38}},"58":{start:{line:135,column:4},end:{line:135,column:36}},"59":{start:{line:137,column:4},end:{line:137,column:25}},"60":{start:{line:142,column:0},end:{line:157,column:2}},"61":{start:{line:143,column:2},end:{line:145,column:3}},"62":{start:{line:144,column:4},end:{line:144,column:29}},"63":{start:{line:147,column:2},end:{line:147,column:30}},"64":{start:{line:149,column:2},end:{line:156,column:3}},"65":{start:{line:150,column:4},end:{line:153,column:7}},"66":{start:{line:151,column:6},end:{line:151,column:83}},"67":{start:{line:152,column:6},end:{line:152,column:13}},"68":{start:{line:155,column:4},end:{line:155,column:29}},"69":{start:{line:160,column:0},end:{line:170,column:2}},"70":{start:{line:161,column:2},end:{line:169,column:3}},"71":{start:{line:162,column:4},end:{line:166,column:7}},"72":{start:{line:162,column:70},end:{line:162,column:111}},"73":{start:{line:163,column:6},end:{line:165,column:7}},"74":{start:{line:164,column:8},end:{line:164,column:144}},"75":{start:{line:168,column:4},end:{line:168,column:29}},"76":{start:{line:173,column:0},end:{line:175,column:2}},"77":{start:{line:174,column:2},end:{line:174,column:101}},"78":{start:{line:179,column:0},end:{line:242,column:2}},"79":{start:{line:180,column:2},end:{line:182,column:3}},"80":{start:{line:181,column:4},end:{line:181,column:11}},"81":{start:{line:185,column:2},end:{line:187,column:3}},"82":{start:{line:186,column:4},end:{line:186,column:29}},"83":{start:{line:190,column:18},end:{line:192,column:3}},"84":{start:{line:194,column:2},end:{line:196,column:3}},"85":{start:{line:195,column:4},end:{line:195,column:45}},"86":{start:{line:198,column:23},end:{line:198,column:27}},"87":{start:{line:199,column:24},end:{line:199,column:58}},"88":{start:{line:201,column:2},end:{line:204,column:3}},"89":{start:{line:203,column:4},end:{line:203,column:68}},"90":{start:{line:206,column:2},end:{line:241,column:5}},"91":{start:{line:208,column:26},end:{line:208,column:30}},"92":{start:{line:210,column:4},end:{line:216,column:5}},"93":{start:{line:212,column:6},end:{line:212,column:120}},"94":{start:{line:215,column:6},end:{line:215,column:102}},"95":{start:{line:219,column:4},end:{line:223,column:7}},"96":{start:{line:220,column:6},end:{line:222,column:7}},"97":{start:{line:221,column:8},end:{line:221,column:81}},"98":{start:{line:225,column:4},end:{line:225,column:132}},"99":{start:{line:227,column:4},end:{line:240,column:5}},"100":{start:{line:228,column:6},end:{line:234,column:13}},"101":{start:{line:229,column:8},end:{line:231,column:9}},"102":{start:{line:230,column:10},end:{line:230,column:27}},"103":{start:{line:233,column:8},end:{line:233,column:22}},"104":{start:{line:235,column:6},end:{line:235,column:34}},"105":{start:{line:237,column:6},end:{line:239,column:7}},"106":{start:{line:238,column:8},end:{line:238,column:34}},"107":{start:{line:244,column:0},end:{line:259,column:2}},"108":{start:{line:246,column:2},end:{line:248,column:3}},"109":{start:{line:247,column:4},end:{line:247,column:11}},"110":{start:{line:251,column:20},end:{line:253,column:3}},"111":{start:{line:255,column:2},end:{line:255,column:73}},"112":{start:{line:256,column:15},end:{line:256,column:52}},"113":{start:{line:258,column:2},end:{line:258,column:111}},"114":{start:{line:261,column:0},end:{line:305,column:2}},"115":{start:{line:262,column:2},end:{line:302,column:3}},"116":{start:{line:263,column:4},end:{line:301,column:7}},"117":{start:{line:264,column:21},end:{line:264,column:87}},"118":{start:{line:264,column:49},end:{line:264,column:86}},"119":{start:{line:266,column:39},end:{line:279,column:7}},"120":{start:{line:267,column:8},end:{line:278,column:9}},"121":{start:{line:268,column:10},end:{line:277,column:11}},"122":{start:{line:269,column:12},end:{line:269,column:73}},"123":{start:{line:270,column:12},end:{line:270,column:92}},"124":{start:{line:272,column:12},end:{line:274,column:13}},"125":{start:{line:273,column:14},end:{line:273,column:66}},"126":{start:{line:275,column:17},end:{line:277,column:11}},"127":{start:{line:276,column:12},end:{line:276,column:92}},"128":{start:{line:282,column:6},end:{line:282,column:43}},"129":{start:{line:284,column:6},end:{line:300,column:7}},"130":{start:{line:285,column:8},end:{line:285,column:45}},"131":{start:{line:287,column:8},end:{line:289,column:9}},"132":{start:{line:288,column:10},end:{line:288,column:81}},"133":{start:{line:291,column:8},end:{line:295,column:9}},"134":{start:{line:292,column:10},end:{line:294,column:13}},"135":{start:{line:293,column:12},end:{line:293,column:54}},"136":{start:{line:296,column:13},end:{line:300,column:7}},"137":{start:{line:297,column:8},end:{line:299,column:11}},"138":{start:{line:298,column:10},end:{line:298,column:53}},"139":{start:{line:304,column:2},end:{line:304,column:27}},"140":{start:{line:310,column:0},end:{line:349,column:2}},"141":{start:{line:311,column:2},end:{line:313,column:3}},"142":{start:{line:312,column:4},end:{line:312,column:11}},"143":{start:{line:315,column:2},end:{line:323,column:3}},"144":{start:{line:316,column:4},end:{line:318,column:5}},"145":{start:{line:317,column:6},end:{line:317,column:85}},"146":{start:{line:320,column:4},end:{line:322,column:5}},"147":{start:{line:321,column:6},end:{line:321,column:82}},"148":{start:{line:325,column:2},end:{line:331,column:3}},"149":{start:{line:327,column:4},end:{line:327,column:11}},"150":{start:{line:328,column:9},end:{line:331,column:3}},"151":{start:{line:330,column:4},end:{line:330,column:105}},"152":{start:{line:333,column:17},end:{line:333,column:35}},"153":{start:{line:334,column:18},end:{line:334,column:39}},"154":{start:{line:336,column:2},end:{line:346,column:3}},"155":{start:{line:337,column:30},end:{line:341,column:12}},"156":{start:{line:338,column:29},end:{line:338,column:47}},"157":{start:{line:339,column:21},end:{line:339,column:60}},"158":{start:{line:340,column:6},end:{line:340,column:65}},"159":{start:{line:343,column:4},end:{line:345,column:5}},"160":{start:{line:344,column:6},end:{line:344,column:43}},"161":{start:{line:348,column:2},end:{line:348,column:103}},"162":{start:{line:351,column:0},end:{line:366,column:2}},"163":{start:{line:352,column:22},end:{line:364,column:4}},"164":{start:{line:353,column:4},end:{line:355,column:5}},"165":{start:{line:354,column:6},end:{line:354,column:31}},"166":{start:{line:357,column:29},end:{line:357,column:90}},"167":{start:{line:359,column:4},end:{line:361,column:5}},"168":{start:{line:360,column:6},end:{line:360,column:107}},"169":{start:{line:363,column:4},end:{line:363,column:48}},"170":{start:{line:365,column:2},end:{line:365,column:34}},"171":{start:{line:368,column:0},end:{line:392,column:2}},"172":{start:{line:369,column:20},end:{line:369,column:41}},"173":{start:{line:370,column:16},end:{line:382,column:4}},"174":{start:{line:371,column:4},end:{line:373,column:5}},"175":{start:{line:372,column:6},end:{line:372,column:18}},"176":{start:{line:375,column:21},end:{line:375,column:46}},"177":{start:{line:376,column:18},end:{line:376,column:20}},"178":{start:{line:377,column:4},end:{line:377,column:44}},"179":{start:{line:378,column:4},end:{line:378,column:21}},"180":{start:{line:379,column:4},end:{line:379,column:16}},"181":{start:{line:381,column:4},end:{line:381,column:36}},"182":{start:{line:383,column:20},end:{line:383,column:39}},"183":{start:{line:385,column:2},end:{line:389,column:3}},"184":{start:{line:386,column:4},end:{line:388,column:11}},"185":{start:{line:391,column:2},end:{line:391,column:21}},"186":{start:{line:394,column:0},end:{line:407,column:2}},"187":{start:{line:395,column:2},end:{line:397,column:3}},"188":{start:{line:396,column:4},end:{line:396,column:19}},"189":{start:{line:399,column:2},end:{line:406,column:5}},"190":{start:{line:400,column:4},end:{line:402,column:5}},"191":{start:{line:401,column:6},end:{line:401,column:18}},"192":{start:{line:405,column:4},end:{line:405,column:60}},"193":{start:{line:409,column:0},end:{line:505,column:2}},"194":{start:{line:411,column:2},end:{line:504,column:5}},"195":{start:{line:412,column:4},end:{line:412,column:43}},"196":{start:{line:414,column:4},end:{line:496,column:5}},"197":{start:{line:415,column:6},end:{line:415,column:69}},"198":{start:{line:416,column:25},end:{line:416,column:35}},"199":{start:{line:417,column:30},end:{line:417,column:32}},"200":{start:{line:418,column:6},end:{line:425,column:9}},"201":{start:{line:419,column:29},end:{line:419,column:47}},"202":{start:{line:420,column:29},end:{line:420,column:58}},"203":{start:{line:422,column:8},end:{line:424,column:9}},"204":{start:{line:423,column:10},end:{line:423,column:51}},"205":{start:{line:426,column:33},end:{line:426,column:74}},"206":{start:{line:429,column:6},end:{line:433,column:7}},"207":{start:{line:430,column:8},end:{line:430,column:37}},"208":{start:{line:431,column:13},end:{line:433,column:7}},"209":{start:{line:432,column:8},end:{line:432,column:35}},"210":{start:{line:435,column:6},end:{line:495,column:7}},"211":{start:{line:439,column:8},end:{line:439,column:35}},"212":{start:{line:441,column:8},end:{line:441,column:49}},"213":{start:{line:443,column:8},end:{line:453,column:9}},"214":{start:{line:445,column:10},end:{line:448,column:12}},"215":{start:{line:452,column:10},end:{line:452,column:65}},"216":{start:{line:456,column:8},end:{line:458,column:9}},"217":{start:{line:457,column:10},end:{line:457,column:17}},"218":{start:{line:464,column:8},end:{line:483,column:11}},"219":{start:{line:469,column:10},end:{line:482,column:11}},"220":{start:{line:471,column:12},end:{line:473,column:15}},"221":{start:{line:472,column:14},end:{line:472,column:84}},"222":{start:{line:477,column:12},end:{line:481,column:19}},"223":{start:{line:484,column:13},end:{line:495,column:7}},"224":{start:{line:487,column:8},end:{line:489,column:9}},"225":{start:{line:488,column:10},end:{line:488,column:97}},"226":{start:{line:492,column:8},end:{line:494,column:9}},"227":{start:{line:493,column:10},end:{line:493,column:17}},"228":{start:{line:498,column:4},end:{line:503,column:7}},"229":{start:{line:499,column:6},end:{line:502,column:7}},"230":{start:{line:501,column:8},end:{line:501,column:95}},"231":{start:{line:508,column:0},end:{line:561,column:2}},"232":{start:{line:509,column:16},end:{line:509,column:33}},"233":{start:{line:511,column:2},end:{line:513,column:3}},"234":{start:{line:512,column:4},end:{line:512,column:19}},"235":{start:{line:515,column:2},end:{line:518,column:3}},"236":{start:{line:516,column:18},end:{line:516,column:81}},"237":{start:{line:517,column:4},end:{line:517,column:66}},"238":{start:{line:521,column:2},end:{line:533,column:3}},"239":{start:{line:524,column:4},end:{line:532,column:7}},"240":{start:{line:531,column:6},end:{line:531,column:101}},"241":{start:{line:531,column:41},end:{line:531,column:99}},"242":{start:{line:535,column:2},end:{line:560,column:5}},"243":{start:{line:537,column:4},end:{line:540,column:5}},"244":{start:{line:539,column:6},end:{line:539,column:31}},"245":{start:{line:542,column:4},end:{line:548,column:5}},"246":{start:{line:543,column:6},end:{line:543,column:43}},"247":{start:{line:545,column:6},end:{line:547,column:7}},"248":{start:{line:546,column:8},end:{line:546,column:50}},"249":{start:{line:550,column:4},end:{line:555,column:7}},"250":{start:{line:551,column:6},end:{line:554,column:9}},"251":{start:{line:552,column:8},end:{line:552,column:52}},"252":{start:{line:553,column:8},end:{line:553,column:34}},"253":{start:{line:557,column:4},end:{line:557,column:36}},"254":{start:{line:559,column:4},end:{line:559,column:33}},"255":{start:{line:563,column:0},end:{line:596,column:2}},"256":{start:{line:565,column:2},end:{line:572,column:3}},"257":{start:{line:566,column:4},end:{line:569,column:5}},"258":{start:{line:567,column:6},end:{line:567,column:56}},"259":{start:{line:568,column:6},end:{line:568,column:45}},"260":{start:{line:571,column:4},end:{line:571,column:29}},"261":{start:{line:581,column:2},end:{line:595,column:5}},"262":{start:{line:590,column:4},end:{line:592,column:5}},"263":{start:{line:591,column:6},end:{line:591,column:101}},"264":{start:{line:594,column:4},end:{line:594,column:11}},"265":{start:{line:611,column:0},end:{line:641,column:2}},"266":{start:{line:612,column:2},end:{line:614,column:3}},"267":{start:{line:613,column:4},end:{line:613,column:29}},"268":{start:{line:617,column:2},end:{line:619,column:3}},"269":{start:{line:618,column:4},end:{line:618,column:114}},"270":{start:{line:622,column:2},end:{line:640,column:5}},"271":{start:{line:631,column:4},end:{line:633,column:5}},"272":{start:{line:632,column:6},end:{line:632,column:103}},"273":{start:{line:635,column:4},end:{line:639,column:5}},"274":{start:{line:637,column:6},end:{line:637,column:51}},"275":{start:{line:638,column:6},end:{line:638,column:64}},"276":{start:{line:643,column:0},end:{line:648,column:2}},"277":{start:{line:644,column:2},end:{line:644,column:60}},"278":{start:{line:644,column:35},end:{line:644,column:60}},"279":{start:{line:645,column:2},end:{line:647,column:5}},"280":{start:{line:646,column:4},end:{line:646,column:43}},"281":{start:{line:650,column:0},end:{line:687,column:2}},"282":{start:{line:659,column:22},end:{line:659,column:170}},"283":{start:{line:660,column:32},end:{line:660,column:72}},"284":{start:{line:662,column:2},end:{line:664,column:3}},"285":{start:{line:663,column:4},end:{line:663,column:86}},"286":{start:{line:667,column:2},end:{line:684,column:3}},"287":{start:{line:668,column:4},end:{line:683,column:5}},"288":{start:{line:670,column:6},end:{line:670,column:155}},"289":{start:{line:670,column:63},end:{line:670,column:155}},"290":{start:{line:673,column:6},end:{line:682,column:9}},"291":{start:{line:676,column:8},end:{line:678,column:9}},"292":{start:{line:677,column:10},end:{line:677,column:26}},"293":{start:{line:680,column:8},end:{line:680,column:158}},"294":{start:{line:680,column:66},end:{line:680,column:158}},"295":{start:{line:681,column:8},end:{line:681,column:33}},"296":{start:{line:686,column:2},end:{line:686,column:27}},"297":{start:{line:689,column:0},end:{line:726,column:2}},"298":{start:{line:691,column:2},end:{line:723,column:3}},"299":{start:{line:692,column:4},end:{line:722,column:7}},"300":{start:{line:697,column:6},end:{line:699,column:7}},"301":{start:{line:698,column:8},end:{line:698,column:24}},"302":{start:{line:701,column:19},end:{line:701,column:29}},"303":{start:{line:702,column:25},end:{line:702,column:27}},"304":{start:{line:703,column:6},end:{line:703,column:145}},"305":{start:{line:703,column:34},end:{line:703,column:145}},"306":{start:{line:704,column:6},end:{line:704,column:39}},"307":{start:{line:705,column:26},end:{line:705,column:44}},"308":{start:{line:707,column:23},end:{line:713,column:8}},"309":{start:{line:708,column:8},end:{line:712,column:11}},"310":{start:{line:709,column:10},end:{line:710,column:53}},"311":{start:{line:710,column:12},end:{line:710,column:53}},"312":{start:{line:711,column:10},end:{line:711,column:35}},"313":{start:{line:715,column:6},end:{line:721,column:9}},"314":{start:{line:716,column:8},end:{line:716,column:33}},"315":{start:{line:718,column:8},end:{line:719,column:186}},"316":{start:{line:719,column:10},end:{line:719,column:186}},"317":{start:{line:720,column:8},end:{line:720,column:18}},"318":{start:{line:725,column:2},end:{line:725,column:27}},"319":{start:{line:728,column:0},end:{line:751,column:2}},"320":{start:{line:729,column:2},end:{line:731,column:3}},"321":{start:{line:730,column:4},end:{line:730,column:11}},"322":{start:{line:734,column:2},end:{line:736,column:3}},"323":{start:{line:735,column:4},end:{line:735,column:11}},"324":{start:{line:739,column:2},end:{line:741,column:3}},"325":{start:{line:740,column:4},end:{line:740,column:11}},"326":{start:{line:743,column:2},end:{line:748,column:3}},"327":{start:{line:747,column:4},end:{line:747,column:11}},"328":{start:{line:750,column:2},end:{line:750,column:35}},"329":{start:{line:753,column:0},end:{line:781,column:2}},"330":{start:{line:756,column:2},end:{line:758,column:3}},"331":{start:{line:757,column:4},end:{line:757,column:11}},"332":{start:{line:760,column:2},end:{line:762,column:3}},"333":{start:{line:761,column:4},end:{line:761,column:77}},"334":{start:{line:767,column:6},end:{line:774,column:4}},"335":{start:{line:776,column:2},end:{line:778,column:3}},"336":{start:{line:777,column:4},end:{line:777,column:67}},"337":{start:{line:780,column:2},end:{line:780,column:25}},"338":{start:{line:783,column:0},end:{line:811,column:2}},"339":{start:{line:789,column:16},end:{line:789,column:45}},"340":{start:{line:790,column:20},end:{line:790,column:53}},"341":{start:{line:791,column:22},end:{line:800,column:3}},"342":{start:{line:802,column:2},end:{line:804,column:3}},"343":{start:{line:803,column:4},end:{line:803,column:48}},"344":{start:{line:806,column:2},end:{line:806,column:52}},"345":{start:{line:807,column:2},end:{line:810,column:4}},"346":{start:{line:809,column:25},end:{line:809,column:108}},"347":{start:{line:814,column:0},end:{line:831,column:2}},"348":{start:{line:815,column:2},end:{line:818,column:3}},"349":{start:{line:817,column:4},end:{line:817,column:11}},"350":{start:{line:820,column:2},end:{line:830,column:3}},"351":{start:{line:821,column:19},end:{line:828,column:5}},"352":{start:{line:829,column:4},end:{line:829,column:49}},"353":{start:{line:833,column:0},end:{line:861,column:2}},"354":{start:{line:835,column:2},end:{line:837,column:3}},"355":{start:{line:836,column:4},end:{line:836,column:11}},"356":{start:{line:844,column:6},end:{line:844,column:15}},"357":{start:{line:846,column:2},end:{line:848,column:3}},"358":{start:{line:847,column:4},end:{line:847,column:11}},"359":{start:{line:850,column:2},end:{line:852,column:3}},"360":{start:{line:851,column:4},end:{line:851,column:11}},"361":{start:{line:854,column:2},end:{line:860,column:37}},"362":{start:{line:864,column:0},end:{line:888,column:2}},"363":{start:{line:865,column:2},end:{line:875,column:3}},"364":{start:{line:866,column:23},end:{line:872,column:5}},"365":{start:{line:873,column:4},end:{line:873,column:41}},"366":{start:{line:874,column:4},end:{line:874,column:103}},"367":{start:{line:877,column:2},end:{line:880,column:3}},"368":{start:{line:878,column:4},end:{line:878,column:46}},"369":{start:{line:879,column:4},end:{line:879,column:74}},"370":{start:{line:882,column:2},end:{line:887,column:3}},"371":{start:{line:883,column:4},end:{line:883,column:49}},"372":{start:{line:885,column:4},end:{line:885,column:64}},"373":{start:{line:886,column:4},end:{line:886,column:42}},"374":{start:{line:892,column:0},end:{line:950,column:2}},"375":{start:{line:893,column:2},end:{line:895,column:3}},"376":{start:{line:894,column:4},end:{line:894,column:11}},"377":{start:{line:897,column:2},end:{line:899,column:3}},"378":{start:{line:898,column:4},end:{line:898,column:88}},"379":{start:{line:902,column:2},end:{line:904,column:3}},"380":{start:{line:903,column:4},end:{line:903,column:93}},"381":{start:{line:906,column:2},end:{line:914,column:3}},"382":{start:{line:907,column:4},end:{line:913,column:5}},"383":{start:{line:908,column:6},end:{line:908,column:58}},"384":{start:{line:909,column:11},end:{line:913,column:5}},"385":{start:{line:910,column:6},end:{line:910,column:58}},"386":{start:{line:911,column:11},end:{line:913,column:5}},"387":{start:{line:912,column:6},end:{line:912,column:58}},"388":{start:{line:916,column:2},end:{line:949,column:3}},"389":{start:{line:917,column:34},end:{line:917,column:36}},"390":{start:{line:919,column:4},end:{line:925,column:5}},"391":{start:{line:920,column:6},end:{line:922,column:7}},"392":{start:{line:921,column:8},end:{line:921,column:17}},"393":{start:{line:924,column:6},end:{line:924,column:50}},"394":{start:{line:930,column:8},end:{line:936,column:6}},"395":{start:{line:937,column:4},end:{line:948,column:7}},"396":{start:{line:938,column:6},end:{line:940,column:7}},"397":{start:{line:939,column:8},end:{line:939,column:92}},"398":{start:{line:942,column:6},end:{line:942,column:61}},"399":{start:{line:943,column:6},end:{line:947,column:8}},"400":{start:{line:957,column:0},end:{line:1184,column:2}},"401":{start:{line:958,column:2},end:{line:960,column:3}},"402":{start:{line:959,column:4},end:{line:959,column:11}},"403":{start:{line:962,column:2},end:{line:964,column:3}},"404":{start:{line:963,column:4},end:{line:963,column:127}},"405":{start:{line:968,column:2},end:{line:970,column:3}},"406":{start:{line:969,column:4},end:{line:969,column:64}},"407":{start:{line:973,column:2},end:{line:975,column:3}},"408":{start:{line:974,column:4},end:{line:974,column:70}},"409":{start:{line:977,column:23},end:{line:977,column:47}},"410":{start:{line:979,column:2},end:{line:981,column:3}},"411":{start:{line:980,column:4},end:{line:980,column:46}},"412":{start:{line:983,column:2},end:{line:985,column:3}},"413":{start:{line:984,column:4},end:{line:984,column:50}},"414":{start:{line:988,column:2},end:{line:990,column:3}},"415":{start:{line:989,column:4},end:{line:989,column:11}},"416":{start:{line:992,column:16},end:{line:992,column:33}},"417":{start:{line:997,column:27},end:{line:997,column:29}},"418":{start:{line:999,column:20},end:{line:999,column:22}},"419":{start:{line:1001,column:2},end:{line:1005,column:3}},"420":{start:{line:1002,column:4},end:{line:1004,column:7}},"421":{start:{line:1007,column:2},end:{line:1011,column:3}},"422":{start:{line:1008,column:4},end:{line:1010,column:7}},"423":{start:{line:1013,column:2},end:{line:1017,column:3}},"424":{start:{line:1014,column:4},end:{line:1016,column:7}},"425":{start:{line:1019,column:2},end:{line:1021,column:3}},"426":{start:{line:1020,column:4},end:{line:1020,column:11}},"427":{start:{line:1023,column:2},end:{line:1182,column:5}},"428":{start:{line:1024,column:4},end:{line:1026,column:11}},"429":{start:{line:1028,column:4},end:{line:1040,column:7}},"430":{start:{line:1029,column:6},end:{line:1031,column:7}},"431":{start:{line:1030,column:8},end:{line:1030,column:31}},"432":{start:{line:1033,column:6},end:{line:1035,column:7}},"433":{start:{line:1034,column:8},end:{line:1034,column:37}},"434":{start:{line:1037,column:6},end:{line:1039,column:7}},"435":{start:{line:1038,column:8},end:{line:1038,column:40}},"436":{start:{line:1042,column:4},end:{line:1058,column:5}},"437":{start:{line:1043,column:6},end:{line:1045,column:7}},"438":{start:{line:1044,column:8},end:{line:1044,column:92}},"439":{start:{line:1047,column:6},end:{line:1049,column:7}},"440":{start:{line:1048,column:8},end:{line:1048,column:95}},"441":{start:{line:1051,column:6},end:{line:1053,column:7}},"442":{start:{line:1052,column:8},end:{line:1052,column:92}},"443":{start:{line:1055,column:6},end:{line:1057,column:7}},"444":{start:{line:1056,column:8},end:{line:1056,column:91}},"445":{start:{line:1060,column:4},end:{line:1062,column:5}},"446":{start:{line:1061,column:6},end:{line:1061,column:30}},"447":{start:{line:1064,column:4},end:{line:1066,column:5}},"448":{start:{line:1065,column:6},end:{line:1065,column:36}},"449":{start:{line:1069,column:4},end:{line:1071,column:5}},"450":{start:{line:1070,column:6},end:{line:1070,column:83}},"451":{start:{line:1073,column:4},end:{line:1172,column:5}},"452":{start:{line:1074,column:6},end:{line:1110,column:7}},"453":{start:{line:1075,column:8},end:{line:1075,column:15}},"454":{start:{line:1076,column:13},end:{line:1110,column:7}},"455":{start:{line:1080,column:8},end:{line:1080,column:49}},"456":{start:{line:1081,column:13},end:{line:1110,column:7}},"457":{start:{line:1082,column:8},end:{line:1082,column:126}},"458":{start:{line:1089,column:23},end:{line:1094,column:9}},"459":{start:{line:1096,column:8},end:{line:1098,column:9}},"460":{start:{line:1097,column:10},end:{line:1097,column:62}},"461":{start:{line:1100,column:8},end:{line:1108,column:11}},"462":{start:{line:1101,column:10},end:{line:1104,column:11}},"463":{start:{line:1103,column:12},end:{line:1103,column:19}},"464":{start:{line:1107,column:10},end:{line:1107,column:20}},"465":{start:{line:1109,column:8},end:{line:1109,column:15}},"466":{start:{line:1112,column:6},end:{line:1171,column:7}},"467":{start:{line:1116,column:25},end:{line:1118,column:9}},"468":{start:{line:1119,column:8},end:{line:1129,column:11}},"469":{start:{line:1120,column:10},end:{line:1120,column:51}},"470":{start:{line:1122,column:10},end:{line:1125,column:11}},"471":{start:{line:1124,column:12},end:{line:1124,column:19}},"472":{start:{line:1128,column:10},end:{line:1128,column:20}},"473":{start:{line:1131,column:8},end:{line:1167,column:9}},"474":{start:{line:1135,column:27},end:{line:1137,column:11}},"475":{start:{line:1140,column:10},end:{line:1152,column:11}},"476":{start:{line:1141,column:12},end:{line:1143,column:14}},"477":{start:{line:1144,column:17},end:{line:1152,column:11}},"478":{start:{line:1146,column:12},end:{line:1148,column:14}},"479":{start:{line:1151,column:12},end:{line:1151,column:36}},"480":{start:{line:1154,column:10},end:{line:1156,column:11}},"481":{start:{line:1155,column:12},end:{line:1155,column:64}},"482":{start:{line:1158,column:10},end:{line:1166,column:13}},"483":{start:{line:1159,column:12},end:{line:1162,column:13}},"484":{start:{line:1161,column:14},end:{line:1161,column:21}},"485":{start:{line:1165,column:12},end:{line:1165,column:22}},"486":{start:{line:1170,column:8},end:{line:1170,column:32}},"487":{start:{line:1174,column:4},end:{line:1180,column:5}},"488":{start:{line:1175,column:6},end:{line:1177,column:8}},"489":{start:{line:1178,column:6},end:{line:1178,column:32}},"490":{start:{line:1179,column:6},end:{line:1179,column:33}},"491":{start:{line:1183,column:2},end:{line:1183,column:17}},"492":{start:{line:1189,column:0},end:{line:1194,column:2}},"493":{start:{line:1191,column:2},end:{line:1193,column:3}},"494":{start:{line:1192,column:4},end:{line:1192,column:89}},"495":{start:{line:1196,column:0},end:{line:1368,column:2}},"496":{start:{line:1197,column:2},end:{line:1199,column:3}},"497":{start:{line:1198,column:4},end:{line:1198,column:11}},"498":{start:{line:1201,column:2},end:{line:1203,column:3}},"499":{start:{line:1202,column:4},end:{line:1202,column:45}},"500":{start:{line:1205,column:2},end:{line:1207,column:3}},"501":{start:{line:1206,column:4},end:{line:1206,column:101}},"502":{start:{line:1209,column:2},end:{line:1211,column:3}},"503":{start:{line:1210,column:4},end:{line:1210,column:53}},"504":{start:{line:1215,column:2},end:{line:1217,column:3}},"505":{start:{line:1216,column:4},end:{line:1216,column:67}},"506":{start:{line:1219,column:2},end:{line:1367,column:3}},"507":{start:{line:1222,column:4},end:{line:1227,column:5}},"508":{start:{line:1223,column:6},end:{line:1226,column:8}},"509":{start:{line:1230,column:4},end:{line:1232,column:5}},"510":{start:{line:1231,column:6},end:{line:1231,column:65}},"511":{start:{line:1235,column:4},end:{line:1235,column:31}},"512":{start:{line:1236,column:16},end:{line:1236,column:33}},"513":{start:{line:1238,column:4},end:{line:1263,column:5}},"514":{start:{line:1239,column:6},end:{line:1262,column:9}},"515":{start:{line:1244,column:8},end:{line:1246,column:9}},"516":{start:{line:1245,column:10},end:{line:1245,column:26}},"517":{start:{line:1248,column:21},end:{line:1248,column:31}},"518":{start:{line:1249,column:27},end:{line:1249,column:29}},"519":{start:{line:1251,column:8},end:{line:1253,column:9}},"520":{start:{line:1252,column:10},end:{line:1252,column:117}},"521":{start:{line:1256,column:8},end:{line:1258,column:9}},"522":{start:{line:1257,column:10},end:{line:1257,column:31}},"523":{start:{line:1260,column:8},end:{line:1260,column:41}},"524":{start:{line:1261,column:8},end:{line:1261,column:51}},"525":{start:{line:1265,column:4},end:{line:1276,column:7}},"526":{start:{line:1267,column:6},end:{line:1275,column:9}},"527":{start:{line:1268,column:8},end:{line:1268,column:44}},"528":{start:{line:1270,column:8},end:{line:1270,column:58}},"529":{start:{line:1272,column:8},end:{line:1274,column:10}},"530":{start:{line:1279,column:4},end:{line:1303,column:5}},"531":{start:{line:1280,column:16},end:{line:1280,column:29}},"532":{start:{line:1282,column:6},end:{line:1291,column:7}},"533":{start:{line:1283,column:8},end:{line:1283,column:17}},"534":{start:{line:1285,column:8},end:{line:1290,column:9}},"535":{start:{line:1286,column:10},end:{line:1289,column:12}},"536":{start:{line:1294,column:6},end:{line:1297,column:8}},"537":{start:{line:1298,column:6},end:{line:1298,column:26}},"538":{start:{line:1300,column:6},end:{line:1302,column:7}},"539":{start:{line:1301,column:8},end:{line:1301,column:67}},"540":{start:{line:1306,column:4},end:{line:1366,column:7}},"541":{start:{line:1307,column:6},end:{line:1309,column:7}},"542":{start:{line:1308,column:8},end:{line:1308,column:20}},"543":{start:{line:1312,column:6},end:{line:1314,column:7}},"544":{start:{line:1313,column:8},end:{line:1313,column:103}},"545":{start:{line:1316,column:6},end:{line:1318,column:7}},"546":{start:{line:1317,column:8},end:{line:1317,column:105}},"547":{start:{line:1324,column:6},end:{line:1350,column:9}},"548":{start:{line:1332,column:8},end:{line:1334,column:9}},"549":{start:{line:1333,column:10},end:{line:1333,column:105}},"550":{start:{line:1336,column:8},end:{line:1343,column:11}},"551":{start:{line:1345,column:8},end:{line:1347,column:9}},"552":{start:{line:1346,column:10},end:{line:1346,column:107}},"553":{start:{line:1349,column:8},end:{line:1349,column:124}},"554":{start:{line:1352,column:6},end:{line:1352,column:45}},"555":{start:{line:1353,column:6},end:{line:1353,column:47}},"556":{start:{line:1355,column:6},end:{line:1357,column:7}},"557":{start:{line:1356,column:8},end:{line:1356,column:47}},"558":{start:{line:1359,column:6},end:{line:1359,column:56}},"559":{start:{line:1361,column:6},end:{line:1365,column:8}},"560":{start:{line:1371,column:0},end:{line:1418,column:2}},"561":{start:{line:1372,column:2},end:{line:1374,column:3}},"562":{start:{line:1373,column:4},end:{line:1373,column:11}},"563":{start:{line:1377,column:27},end:{line:1377,column:118}},"564":{start:{line:1378,column:23},end:{line:1378,column:83}},"565":{start:{line:1380,column:2},end:{line:1382,column:3}},"566":{start:{line:1381,column:4},end:{line:1381,column:29}},"567":{start:{line:1384,column:18},end:{line:1386,column:3}},"568":{start:{line:1388,column:2},end:{line:1390,column:3}},"569":{start:{line:1389,column:4},end:{line:1389,column:45}},"570":{start:{line:1395,column:2},end:{line:1397,column:3}},"571":{start:{line:1396,column:4},end:{line:1396,column:68}},"572":{start:{line:1401,column:24},end:{line:1401,column:58}},"573":{start:{line:1403,column:2},end:{line:1403,column:89}},"574":{start:{line:1405,column:2},end:{line:1409,column:5}},"575":{start:{line:1407,column:18},end:{line:1407,column:84}},"576":{start:{line:1408,column:4},end:{line:1408,column:111}},"577":{start:{line:1411,column:2},end:{line:1417,column:5}},"578":{start:{line:1412,column:4},end:{line:1414,column:5}},"579":{start:{line:1413,column:6},end:{line:1413,column:38}},"580":{start:{line:1416,column:4},end:{line:1416,column:59}},"581":{start:{line:1421,column:0},end:{line:1425,column:2}},"582":{start:{line:1422,column:15},end:{line:1422,column:90}},"583":{start:{line:1423,column:16},end:{line:1423,column:58}},"584":{start:{line:1424,column:2},end:{line:1424,column:45}},"585":{start:{line:1429,column:0},end:{line:1431,column:2}},"586":{start:{line:1430,column:2},end:{line:1430,column:51}},"587":{start:{line:1434,column:0},end:{line:1444,column:2}},"588":{start:{line:1435,column:15},end:{line:1442,column:25}},"589":{start:{line:1437,column:4},end:{line:1439,column:5}},"590":{start:{line:1438,column:6},end:{line:1438,column:23}},"591":{start:{line:1441,column:4},end:{line:1441,column:16}},"592":{start:{line:1443,column:2},end:{line:1443,column:40}},"593":{start:{line:1447,column:0},end:{line:1491,column:2}},"594":{start:{line:1448,column:20},end:{line:1448,column:52}},"595":{start:{line:1449,column:29},end:{line:1449,column:119}},"596":{start:{line:1451,column:2},end:{line:1455,column:3}},"597":{start:{line:1452,column:4},end:{line:1454,column:5}},"598":{start:{line:1453,column:6},end:{line:1453,column:50}},"599":{start:{line:1457,column:24},end:{line:1457,column:70}},"600":{start:{line:1458,column:2},end:{line:1482,column:26}},"601":{start:{line:1459,column:4},end:{line:1479,column:5}},"602":{start:{line:1460,column:6},end:{line:1476,column:7}},"603":{start:{line:1461,column:8},end:{line:1463,column:9}},"604":{start:{line:1462,column:10},end:{line:1462,column:44}},"605":{start:{line:1466,column:28},end:{line:1466,column:42}},"606":{start:{line:1467,column:27},end:{line:1467,column:41}},"607":{start:{line:1468,column:24},end:{line:1468,column:53}},"608":{start:{line:1470,column:8},end:{line:1472,column:9}},"609":{start:{line:1471,column:10},end:{line:1471,column:25}},"610":{start:{line:1474,column:8},end:{line:1474,column:46}},"611":{start:{line:1475,column:8},end:{line:1475,column:49}},"612":{start:{line:1478,column:6},end:{line:1478,column:23}},"613":{start:{line:1481,column:4},end:{line:1481,column:16}},"614":{start:{line:1483,column:20},end:{line:1483,column:40}},"615":{start:{line:1485,column:2},end:{line:1487,column:3}},"616":{start:{line:1486,column:4},end:{line:1486,column:32}},"617":{start:{line:1489,column:2},end:{line:1489,column:31}},"618":{start:{line:1490,column:2},end:{line:1490,column:23}},"619":{start:{line:1493,column:0},end:{line:1509,column:2}},"620":{start:{line:1494,column:2},end:{line:1508,column:3}},"621":{start:{line:1495,column:17},end:{line:1495,column:39}},"622":{start:{line:1497,column:4},end:{line:1507,column:5}},"623":{start:{line:1498,column:6},end:{line:1502,column:9}},"624":{start:{line:1499,column:8},end:{line:1501,column:9}},"625":{start:{line:1500,column:10},end:{line:1500,column:41}},"626":{start:{line:1504,column:6},end:{line:1506,column:7}},"627":{start:{line:1505,column:8},end:{line:1505,column:29}},"628":{start:{line:1511,column:0},end:{line:1534,column:2}},"629":{start:{line:1512,column:2},end:{line:1514,column:3}},"630":{start:{line:1513,column:4},end:{line:1513,column:20}},"631":{start:{line:1516,column:31},end:{line:1516,column:78}},"632":{start:{line:1517,column:2},end:{line:1532,column:5}},"633":{start:{line:1518,column:22},end:{line:1518,column:37}},"634":{start:{line:1520,column:4},end:{line:1522,column:5}},"635":{start:{line:1521,column:6},end:{line:1521,column:38}},"636":{start:{line:1525,column:4},end:{line:1531,column:5}},"637":{start:{line:1526,column:6},end:{line:1526,column:33}},"638":{start:{line:1528,column:6},end:{line:1530,column:7}},"639":{start:{line:1529,column:8},end:{line:1529,column:40}},"640":{start:{line:1533,column:2},end:{line:1533,column:18}},"641":{start:{line:1536,column:15},end:{line:1536,column:24}},"642":{start:{line:1537,column:0},end:{line:1537,column:27}},"643":{start:{line:1538,column:0},end:{line:1538,column:27}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:14,column:9},end:{line:14,column:31}},loc:{start:{line:14,column:37},end:{line:14,column:95}},line:14},"1":{name:"RestWrite",decl:{start:{line:44,column:9},end:{line:44,column:18}},loc:{start:{line:44,column:99},end:{line:94,column:1}},line:44},"2":{name:"(anonymous_2)",decl:{start:{line:100,column:30},end:{line:100,column:31}},loc:{start:{line:100,column:42},end:{line:139,column:1}},line:100},"3":{name:"(anonymous_3)",decl:{start:{line:101,column:32},end:{line:101,column:33}},loc:{start:{line:101,column:38},end:{line:103,column:3}},line:101},"4":{name:"(anonymous_4)",decl:{start:{line:103,column:10},end:{line:103,column:11}},loc:{start:{line:103,column:16},end:{line:105,column:3}},line:103},"5":{name:"(anonymous_5)",decl:{start:{line:105,column:10},end:{line:105,column:11}},loc:{start:{line:105,column:16},end:{line:107,column:3}},line:105},"6":{name:"(anonymous_6)",decl:{start:{line:107,column:10},end:{line:107,column:11}},loc:{start:{line:107,column:16},end:{line:109,column:3}},line:107},"7":{name:"(anonymous_7)",decl:{start:{line:109,column:10},end:{line:109,column:11}},loc:{start:{line:109,column:16},end:{line:111,column:3}},line:109},"8":{name:"(anonymous_8)",decl:{start:{line:111,column:10},end:{line:111,column:11}},loc:{start:{line:111,column:16},end:{line:113,column:3}},line:111},"9":{name:"(anonymous_9)",decl:{start:{line:113,column:10},end:{line:113,column:11}},loc:{start:{line:113,column:16},end:{line:115,column:3}},line:113},"10":{name:"(anonymous_10)",decl:{start:{line:115,column:10},end:{line:115,column:11}},loc:{start:{line:115,column:16},end:{line:117,column:3}},line:115},"11":{name:"(anonymous_11)",decl:{start:{line:117,column:10},end:{line:117,column:11}},loc:{start:{line:117,column:30},end:{line:120,column:3}},line:117},"12":{name:"(anonymous_12)",decl:{start:{line:120,column:10},end:{line:120,column:11}},loc:{start:{line:120,column:16},end:{line:122,column:3}},line:120},"13":{name:"(anonymous_13)",decl:{start:{line:122,column:10},end:{line:122,column:11}},loc:{start:{line:122,column:16},end:{line:124,column:3}},line:122},"14":{name:"(anonymous_14)",decl:{start:{line:124,column:10},end:{line:124,column:11}},loc:{start:{line:124,column:16},end:{line:126,column:3}},line:124},"15":{name:"(anonymous_15)",decl:{start:{line:126,column:10},end:{line:126,column:11}},loc:{start:{line:126,column:16},end:{line:128,column:3}},line:126},"16":{name:"(anonymous_16)",decl:{start:{line:128,column:10},end:{line:128,column:11}},loc:{start:{line:128,column:16},end:{line:130,column:3}},line:128},"17":{name:"(anonymous_17)",decl:{start:{line:130,column:10},end:{line:130,column:11}},loc:{start:{line:130,column:16},end:{line:132,column:3}},line:130},"18":{name:"(anonymous_18)",decl:{start:{line:132,column:10},end:{line:132,column:11}},loc:{start:{line:132,column:16},end:{line:134,column:3}},line:132},"19":{name:"(anonymous_19)",decl:{start:{line:134,column:10},end:{line:134,column:11}},loc:{start:{line:134,column:16},end:{line:136,column:3}},line:134},"20":{name:"(anonymous_20)",decl:{start:{line:136,column:10},end:{line:136,column:11}},loc:{start:{line:136,column:16},end:{line:138,column:3}},line:136},"21":{name:"(anonymous_21)",decl:{start:{line:142,column:40},end:{line:142,column:41}},loc:{start:{line:142,column:52},end:{line:157,column:1}},line:142},"22":{name:"(anonymous_22)",decl:{start:{line:150,column:41},end:{line:150,column:42}},loc:{start:{line:150,column:50},end:{line:153,column:5}},line:150},"23":{name:"(anonymous_23)",decl:{start:{line:160,column:50},end:{line:160,column:51}},loc:{start:{line:160,column:62},end:{line:170,column:1}},line:160},"24":{name:"(anonymous_24)",decl:{start:{line:162,column:50},end:{line:162,column:51}},loc:{start:{line:162,column:70},end:{line:162,column:111}},line:162},"25":{name:"(anonymous_25)",decl:{start:{line:162,column:118},end:{line:162,column:119}},loc:{start:{line:162,column:130},end:{line:166,column:5}},line:162},"26":{name:"(anonymous_26)",decl:{start:{line:173,column:37},end:{line:173,column:38}},loc:{start:{line:173,column:49},end:{line:175,column:1}},line:173},"27":{name:"(anonymous_27)",decl:{start:{line:179,column:43},end:{line:179,column:44}},loc:{start:{line:179,column:55},end:{line:242,column:1}},line:179},"28":{name:"(anonymous_28)",decl:{start:{line:206,column:32},end:{line:206,column:33}},loc:{start:{line:206,column:38},end:{line:224,column:3}},line:206},"29":{name:"(anonymous_29)",decl:{start:{line:219,column:32},end:{line:219,column:33}},loc:{start:{line:219,column:42},end:{line:223,column:5}},line:219},"30":{name:"(anonymous_30)",decl:{start:{line:224,column:10},end:{line:224,column:11}},loc:{start:{line:224,column:16},end:{line:226,column:3}},line:224},"31":{name:"(anonymous_31)",decl:{start:{line:226,column:10},end:{line:226,column:11}},loc:{start:{line:226,column:22},end:{line:241,column:3}},line:226},"32":{name:"(anonymous_32)",decl:{start:{line:228,column:84},end:{line:228,column:85}},loc:{start:{line:228,column:108},end:{line:234,column:7}},line:228},"33":{name:"(anonymous_33)",decl:{start:{line:244,column:44},end:{line:244,column:45}},loc:{start:{line:244,column:70},end:{line:259,column:1}},line:244},"34":{name:"(anonymous_34)",decl:{start:{line:261,column:48},end:{line:261,column:49}},loc:{start:{line:261,column:60},end:{line:305,column:1}},line:261},"35":{name:"(anonymous_35)",decl:{start:{line:263,column:59},end:{line:263,column:60}},loc:{start:{line:263,column:73},end:{line:301,column:5}},line:263},"36":{name:"(anonymous_36)",decl:{start:{line:264,column:37},end:{line:264,column:38}},loc:{start:{line:264,column:49},end:{line:264,column:86}},line:264},"37":{name:"(anonymous_37)",decl:{start:{line:266,column:39},end:{line:266,column:40}},loc:{start:{line:266,column:66},end:{line:279,column:7}},line:266},"38":{name:"(anonymous_38)",decl:{start:{line:292,column:45},end:{line:292,column:46}},loc:{start:{line:292,column:58},end:{line:294,column:11}},line:292},"39":{name:"(anonymous_39)",decl:{start:{line:297,column:39},end:{line:297,column:40}},loc:{start:{line:297,column:52},end:{line:299,column:9}},line:297},"40":{name:"(anonymous_40)",decl:{start:{line:310,column:39},end:{line:310,column:40}},loc:{start:{line:310,column:51},end:{line:349,column:1}},line:310},"41":{name:"(anonymous_41)",decl:{start:{line:337,column:47},end:{line:337,column:48}},loc:{start:{line:337,column:72},end:{line:341,column:5}},line:337},"42":{name:"(anonymous_42)",decl:{start:{line:351,column:47},end:{line:351,column:48}},loc:{start:{line:351,column:67},end:{line:366,column:1}},line:351},"43":{name:"(anonymous_43)",decl:{start:{line:352,column:48},end:{line:352,column:49}},loc:{start:{line:352,column:60},end:{line:364,column:3}},line:352},"44":{name:"(anonymous_44)",decl:{start:{line:368,column:44},end:{line:368,column:45}},loc:{start:{line:368,column:64},end:{line:392,column:1}},line:368},"45":{name:"(anonymous_45)",decl:{start:{line:370,column:33},end:{line:370,column:34}},loc:{start:{line:370,column:53},end:{line:380,column:3}},line:370},"46":{name:"(anonymous_46)",decl:{start:{line:380,column:16},end:{line:380,column:17}},loc:{start:{line:380,column:21},end:{line:382,column:3}},line:380},"47":{name:"(anonymous_47)",decl:{start:{line:394,column:43},end:{line:394,column:44}},loc:{start:{line:394,column:62},end:{line:407,column:1}},line:394},"48":{name:"(anonymous_48)",decl:{start:{line:399,column:24},end:{line:399,column:25}},loc:{start:{line:399,column:34},end:{line:406,column:3}},line:399},"49":{name:"(anonymous_49)",decl:{start:{line:409,column:37},end:{line:409,column:38}},loc:{start:{line:409,column:57},end:{line:505,column:1}},line:409},"50":{name:"(anonymous_50)",decl:{start:{line:411,column:51},end:{line:411,column:52}},loc:{start:{line:411,column:62},end:{line:504,column:3}},line:411},"51":{name:"(anonymous_51)",decl:{start:{line:418,column:36},end:{line:418,column:37}},loc:{start:{line:418,column:48},end:{line:425,column:7}},line:418},"52":{name:"(anonymous_52)",decl:{start:{line:464,column:67},end:{line:464,column:68}},loc:{start:{line:464,column:79},end:{line:483,column:9}},line:464},"53":{name:"(anonymous_53)",decl:{start:{line:471,column:49},end:{line:471,column:50}},loc:{start:{line:471,column:61},end:{line:473,column:13}},line:471},"54":{name:"(anonymous_54)",decl:{start:{line:498,column:56},end:{line:498,column:57}},loc:{start:{line:498,column:62},end:{line:503,column:5}},line:498},"55":{name:"(anonymous_55)",decl:{start:{line:508,column:36},end:{line:508,column:37}},loc:{start:{line:508,column:48},end:{line:561,column:1}},line:508},"56":{name:"(anonymous_56)",decl:{start:{line:530,column:22},end:{line:530,column:23}},loc:{start:{line:530,column:33},end:{line:532,column:5}},line:530},"57":{name:"(anonymous_57)",decl:{start:{line:531,column:30},end:{line:531,column:31}},loc:{start:{line:531,column:41},end:{line:531,column:99}},line:531},"58":{name:"(anonymous_58)",decl:{start:{line:535,column:22},end:{line:535,column:23}},loc:{start:{line:535,column:28},end:{line:556,column:3}},line:535},"59":{name:"(anonymous_59)",decl:{start:{line:550,column:47},end:{line:550,column:48}},loc:{start:{line:550,column:53},end:{line:555,column:5}},line:550},"60":{name:"(anonymous_60)",decl:{start:{line:551,column:58},end:{line:551,column:59}},loc:{start:{line:551,column:76},end:{line:554,column:7}},line:551},"61":{name:"(anonymous_61)",decl:{start:{line:556,column:10},end:{line:556,column:11}},loc:{start:{line:556,column:16},end:{line:558,column:3}},line:556},"62":{name:"(anonymous_62)",decl:{start:{line:558,column:10},end:{line:558,column:11}},loc:{start:{line:558,column:16},end:{line:560,column:3}},line:558},"63":{name:"(anonymous_63)",decl:{start:{line:563,column:40},end:{line:563,column:41}},loc:{start:{line:563,column:52},end:{line:596,column:1}},line:563},"64":{name:"(anonymous_64)",decl:{start:{line:589,column:42},end:{line:589,column:43}},loc:{start:{line:589,column:53},end:{line:595,column:3}},line:589},"65":{name:"(anonymous_65)",decl:{start:{line:611,column:37},end:{line:611,column:38}},loc:{start:{line:611,column:49},end:{line:641,column:1}},line:611},"66":{name:"(anonymous_66)",decl:{start:{line:630,column:42},end:{line:630,column:43}},loc:{start:{line:630,column:53},end:{line:640,column:3}},line:630},"67":{name:"(anonymous_67)",decl:{start:{line:643,column:46},end:{line:643,column:47}},loc:{start:{line:643,column:58},end:{line:648,column:1}},line:643},"68":{name:"(anonymous_68)",decl:{start:{line:645,column:51},end:{line:645,column:52}},loc:{start:{line:645,column:57},end:{line:647,column:3}},line:645},"69":{name:"(anonymous_69)",decl:{start:{line:650,column:52},end:{line:650,column:53}},loc:{start:{line:650,column:64},end:{line:687,column:1}},line:650},"70":{name:"(anonymous_70)",decl:{start:{line:675,column:14},end:{line:675,column:15}},loc:{start:{line:675,column:25},end:{line:682,column:7}},line:675},"71":{name:"(anonymous_71)",decl:{start:{line:689,column:47},end:{line:689,column:48}},loc:{start:{line:689,column:59},end:{line:726,column:1}},line:689},"72":{name:"(anonymous_72)",decl:{start:{line:696,column:12},end:{line:696,column:13}},loc:{start:{line:696,column:23},end:{line:722,column:5}},line:696},"73":{name:"(anonymous_73)",decl:{start:{line:707,column:40},end:{line:707,column:41}},loc:{start:{line:707,column:56},end:{line:713,column:7}},line:707},"74":{name:"(anonymous_74)",decl:{start:{line:708,column:62},end:{line:708,column:63}},loc:{start:{line:708,column:72},end:{line:712,column:9}},line:708},"75":{name:"(anonymous_75)",decl:{start:{line:715,column:40},end:{line:715,column:41}},loc:{start:{line:715,column:46},end:{line:717,column:7}},line:715},"76":{name:"(anonymous_76)",decl:{start:{line:717,column:15},end:{line:717,column:16}},loc:{start:{line:717,column:22},end:{line:721,column:7}},line:717},"77":{name:"(anonymous_77)",decl:{start:{line:728,column:49},end:{line:728,column:50}},loc:{start:{line:728,column:61},end:{line:751,column:1}},line:728},"78":{name:"(anonymous_78)",decl:{start:{line:753,column:41},end:{line:753,column:42}},loc:{start:{line:753,column:59},end:{line:781,column:1}},line:753},"79":{name:"(anonymous_79)",decl:{start:{line:783,column:26},end:{line:783,column:27}},loc:{start:{line:788,column:3},end:{line:811,column:1}},line:788},"80":{name:"(anonymous_80)",decl:{start:{line:809,column:19},end:{line:809,column:20}},loc:{start:{line:809,column:25},end:{line:809,column:108}},line:809},"81":{name:"(anonymous_81)",decl:{start:{line:814,column:52},end:{line:814,column:53}},loc:{start:{line:814,column:64},end:{line:831,column:1}},line:814},"82":{name:"(anonymous_82)",decl:{start:{line:833,column:48},end:{line:833,column:49}},loc:{start:{line:833,column:60},end:{line:861,column:1}},line:833},"83":{name:"(anonymous_83)",decl:{start:{line:864,column:37},end:{line:864,column:38}},loc:{start:{line:864,column:49},end:{line:888,column:1}},line:864},"84":{name:"(anonymous_84)",decl:{start:{line:892,column:36},end:{line:892,column:37}},loc:{start:{line:892,column:48},end:{line:950,column:1}},line:892},"85":{name:"(anonymous_85)",decl:{start:{line:937,column:32},end:{line:937,column:33}},loc:{start:{line:937,column:43},end:{line:948,column:5}},line:937},"86":{name:"(anonymous_86)",decl:{start:{line:957,column:41},end:{line:957,column:42}},loc:{start:{line:957,column:53},end:{line:1184,column:1}},line:957},"87":{name:"(anonymous_87)",decl:{start:{line:1023,column:25},end:{line:1023,column:26}},loc:{start:{line:1023,column:31},end:{line:1027,column:3}},line:1023},"88":{name:"(anonymous_88)",decl:{start:{line:1027,column:10},end:{line:1027,column:11}},loc:{start:{line:1027,column:21},end:{line:1072,column:3}},line:1027},"89":{name:"(anonymous_89)",decl:{start:{line:1028,column:20},end:{line:1028,column:21}},loc:{start:{line:1028,column:30},end:{line:1040,column:5}},line:1028},"90":{name:"(anonymous_90)",decl:{start:{line:1072,column:10},end:{line:1072,column:11}},loc:{start:{line:1072,column:16},end:{line:1173,column:3}},line:1072},"91":{name:"(anonymous_91)",decl:{start:{line:1100,column:70},end:{line:1100,column:71}},loc:{start:{line:1100,column:77},end:{line:1108,column:9}},line:1100},"92":{name:"(anonymous_92)",decl:{start:{line:1119,column:76},end:{line:1119,column:77}},loc:{start:{line:1119,column:82},end:{line:1121,column:9}},line:1119},"93":{name:"(anonymous_93)",decl:{start:{line:1121,column:17},end:{line:1121,column:18}},loc:{start:{line:1121,column:24},end:{line:1129,column:9}},line:1121},"94":{name:"(anonymous_94)",decl:{start:{line:1158,column:72},end:{line:1158,column:73}},loc:{start:{line:1158,column:79},end:{line:1166,column:11}},line:1158},"95":{name:"(anonymous_95)",decl:{start:{line:1173,column:10},end:{line:1173,column:11}},loc:{start:{line:1173,column:19},end:{line:1182,column:3}},line:1173},"96":{name:"(anonymous_96)",decl:{start:{line:1189,column:52},end:{line:1189,column:53}},loc:{start:{line:1189,column:64},end:{line:1194,column:1}},line:1189},"97":{name:"(anonymous_97)",decl:{start:{line:1196,column:43},end:{line:1196,column:44}},loc:{start:{line:1196,column:55},end:{line:1368,column:1}},line:1196},"98":{name:"(anonymous_98)",decl:{start:{line:1243,column:14},end:{line:1243,column:15}},loc:{start:{line:1243,column:25},end:{line:1262,column:7}},line:1243},"99":{name:"(anonymous_99)",decl:{start:{line:1265,column:22},end:{line:1265,column:23}},loc:{start:{line:1265,column:28},end:{line:1276,column:5}},line:1265},"100":{name:"(anonymous_100)",decl:{start:{line:1267,column:144},end:{line:1267,column:145}},loc:{start:{line:1267,column:156},end:{line:1275,column:7}},line:1267},"101":{name:"(anonymous_101)",decl:{start:{line:1306,column:124},end:{line:1306,column:125}},loc:{start:{line:1306,column:133},end:{line:1351,column:5}},line:1306},"102":{name:"(anonymous_102)",decl:{start:{line:1331,column:14},end:{line:1331,column:15}},loc:{start:{line:1331,column:25},end:{line:1344,column:7}},line:1331},"103":{name:"(anonymous_103)",decl:{start:{line:1344,column:14},end:{line:1344,column:15}},loc:{start:{line:1344,column:25},end:{line:1350,column:7}},line:1344},"104":{name:"(anonymous_104)",decl:{start:{line:1351,column:12},end:{line:1351,column:13}},loc:{start:{line:1351,column:24},end:{line:1366,column:5}},line:1351},"105":{name:"(anonymous_105)",decl:{start:{line:1371,column:42},end:{line:1371,column:43}},loc:{start:{line:1371,column:54},end:{line:1418,column:1}},line:1371},"106":{name:"(anonymous_106)",decl:{start:{line:1405,column:41},end:{line:1405,column:42}},loc:{start:{line:1405,column:61},end:{line:1409,column:3}},line:1405},"107":{name:"(anonymous_107)",decl:{start:{line:1411,column:134},end:{line:1411,column:135}},loc:{start:{line:1411,column:144},end:{line:1415,column:3}},line:1411},"108":{name:"(anonymous_108)",decl:{start:{line:1415,column:11},end:{line:1415,column:12}},loc:{start:{line:1415,column:26},end:{line:1417,column:3}},line:1415},"109":{name:"(anonymous_109)",decl:{start:{line:1421,column:31},end:{line:1421,column:32}},loc:{start:{line:1421,column:43},end:{line:1425,column:1}},line:1421},"110":{name:"(anonymous_110)",decl:{start:{line:1429,column:31},end:{line:1429,column:32}},loc:{start:{line:1429,column:43},end:{line:1431,column:1}},line:1429},"111":{name:"(anonymous_111)",decl:{start:{line:1434,column:36},end:{line:1434,column:37}},loc:{start:{line:1434,column:48},end:{line:1444,column:1}},line:1434},"112":{name:"(anonymous_112)",decl:{start:{line:1435,column:45},end:{line:1435,column:46}},loc:{start:{line:1435,column:60},end:{line:1442,column:3}},line:1435},"113":{name:"(anonymous_113)",decl:{start:{line:1447,column:41},end:{line:1447,column:42}},loc:{start:{line:1447,column:62},end:{line:1491,column:1}},line:1447},"114":{name:"(anonymous_114)",decl:{start:{line:1458,column:32},end:{line:1458,column:33}},loc:{start:{line:1458,column:53},end:{line:1482,column:3}},line:1458},"115":{name:"(anonymous_115)",decl:{start:{line:1493,column:40},end:{line:1493,column:41}},loc:{start:{line:1493,column:52},end:{line:1509,column:1}},line:1493},"116":{name:"(anonymous_116)",decl:{start:{line:1498,column:41},end:{line:1498,column:42}},loc:{start:{line:1498,column:53},end:{line:1502,column:7}},line:1498},"117":{name:"(anonymous_117)",decl:{start:{line:1511,column:46},end:{line:1511,column:47}},loc:{start:{line:1511,column:72},end:{line:1534,column:1}},line:1511},"118":{name:"(anonymous_118)",decl:{start:{line:1517,column:46},end:{line:1517,column:47}},loc:{start:{line:1517,column:59},end:{line:1532,column:3}},line:1517}},branchMap:{"0":{loc:{start:{line:14,column:46},end:{line:14,column:92}},type:"cond-expr",locations:[{start:{line:14,column:70},end:{line:14,column:73}},{start:{line:14,column:76},end:{line:14,column:92}}],line:14},"1":{loc:{start:{line:14,column:46},end:{line:14,column:67}},type:"binary-expr",locations:[{start:{line:14,column:46},end:{line:14,column:49}},{start:{line:14,column:53},end:{line:14,column:67}}],line:14},"2":{loc:{start:{line:45,column:2},end:{line:47,column:3}},type:"if",locations:[{start:{line:45,column:2},end:{line:47,column:3}},{start:{line:45,column:2},end:{line:47,column:3}}],line:45},"3":{loc:{start:{line:55,column:17},end:{line:55,column:30}},type:"binary-expr",locations:[{start:{line:55,column:17},end:{line:55,column:24}},{start:{line:55,column:28},end:{line:55,column:30}}],line:55},"4":{loc:{start:{line:57,column:2},end:{line:59,column:3}},type:"if",locations:[{start:{line:57,column:2},end:{line:59,column:3}},{start:{line:57,column:2},end:{line:59,column:3}}],line:57},"5":{loc:{start:{line:61,column:2},end:{line:75,column:3}},type:"if",locations:[{start:{line:61,column:2},end:{line:75,column:3}},{start:{line:61,column:2},end:{line:75,column:3}}],line:61},"6":{loc:{start:{line:62,column:4},end:{line:74,column:5}},type:"if",locations:[{start:{line:62,column:4},end:{line:74,column:5}},{start:{line:62,column:4},end:{line:74,column:5}}],line:62},"7":{loc:{start:{line:63,column:6},end:{line:65,column:7}},type:"if",locations:[{start:{line:63,column:6},end:{line:65,column:7}},{start:{line:63,column:6},end:{line:65,column:7}}],line:63},"8":{loc:{start:{line:63,column:10},end:{line:63,column:82}},type:"binary-expr",locations:[{start:{line:63,column:10},end:{line:63,column:64}},{start:{line:63,column:68},end:{line:63,column:82}}],line:63},"9":{loc:{start:{line:67,column:6},end:{line:69,column:7}},type:"if",locations:[{start:{line:67,column:6},end:{line:69,column:7}},{start:{line:67,column:6},end:{line:69,column:7}}],line:67},"10":{loc:{start:{line:71,column:6},end:{line:73,column:7}},type:"if",locations:[{start:{line:71,column:6},end:{line:73,column:7}},{start:{line:71,column:6},end:{line:73,column:7}}],line:71},"11":{loc:{start:{line:143,column:2},end:{line:145,column:3}},type:"if",locations:[{start:{line:143,column:2},end:{line:145,column:3}},{start:{line:143,column:2},end:{line:145,column:3}}],line:143},"12":{loc:{start:{line:149,column:2},end:{line:156,column:3}},type:"if",locations:[{start:{line:149,column:2},end:{line:156,column:3}},{start:{line:149,column:2},end:{line:156,column:3}}],line:149},"13":{loc:{start:{line:161,column:2},end:{line:169,column:3}},type:"if",locations:[{start:{line:161,column:2},end:{line:169,column:3}},{start:{line:161,column:2},end:{line:169,column:3}}],line:161},"14":{loc:{start:{line:161,column:6},end:{line:161,column:140}},type:"binary-expr",locations:[{start:{line:161,column:6},end:{line:161,column:52}},{start:{line:161,column:56},end:{line:161,column:75}},{start:{line:161,column:79},end:{line:161,column:140}}],line:161},"15":{loc:{start:{line:163,column:6},end:{line:165,column:7}},type:"if",locations:[{start:{line:163,column:6},end:{line:165,column:7}},{start:{line:163,column:6},end:{line:165,column:7}}],line:163},"16":{loc:{start:{line:180,column:2},end:{line:182,column:3}},type:"if",locations:[{start:{line:180,column:2},end:{line:182,column:3}},{start:{line:180,column:2},end:{line:182,column:3}}],line:180},"17":{loc:{start:{line:185,column:2},end:{line:187,column:3}},type:"if",locations:[{start:{line:185,column:2},end:{line:187,column:3}},{start:{line:185,column:2},end:{line:187,column:3}}],line:185},"18":{loc:{start:{line:194,column:2},end:{line:196,column:3}},type:"if",locations:[{start:{line:194,column:2},end:{line:196,column:3}},{start:{line:194,column:2},end:{line:196,column:3}}],line:194},"19":{loc:{start:{line:194,column:6},end:{line:194,column:39}},type:"binary-expr",locations:[{start:{line:194,column:6},end:{line:194,column:16}},{start:{line:194,column:20},end:{line:194,column:39}}],line:194},"20":{loc:{start:{line:201,column:2},end:{line:204,column:3}},type:"if",locations:[{start:{line:201,column:2},end:{line:204,column:3}},{start:{line:201,column:2},end:{line:204,column:3}}],line:201},"21":{loc:{start:{line:201,column:6},end:{line:201,column:39}},type:"binary-expr",locations:[{start:{line:201,column:6},end:{line:201,column:16}},{start:{line:201,column:20},end:{line:201,column:39}}],line:201},"22":{loc:{start:{line:210,column:4},end:{line:216,column:5}},type:"if",locations:[{start:{line:210,column:4},end:{line:216,column:5}},{start:{line:210,column:4},end:{line:216,column:5}}],line:210},"23":{loc:{start:{line:220,column:6},end:{line:222,column:7}},type:"if",locations:[{start:{line:220,column:6},end:{line:222,column:7}},{start:{line:220,column:6},end:{line:222,column:7}}],line:220},"24":{loc:{start:{line:220,column:10},end:{line:220,column:39}},type:"binary-expr",locations:[{start:{line:220,column:10},end:{line:220,column:17}},{start:{line:220,column:21},end:{line:220,column:39}}],line:220},"25":{loc:{start:{line:227,column:4},end:{line:240,column:5}},type:"if",locations:[{start:{line:227,column:4},end:{line:240,column:5}},{start:{line:227,column:4},end:{line:240,column:5}}],line:227},"26":{loc:{start:{line:227,column:8},end:{line:227,column:35}},type:"binary-expr",locations:[{start:{line:227,column:8},end:{line:227,column:16}},{start:{line:227,column:20},end:{line:227,column:35}}],line:227},"27":{loc:{start:{line:229,column:8},end:{line:231,column:9}},type:"if",locations:[{start:{line:229,column:8},end:{line:231,column:9}},{start:{line:229,column:8},end:{line:231,column:9}}],line:229},"28":{loc:{start:{line:237,column:6},end:{line:239,column:7}},type:"if",locations:[{start:{line:237,column:6},end:{line:239,column:7}},{start:{line:237,column:6},end:{line:239,column:7}}],line:237},"29":{loc:{start:{line:237,column:10},end:{line:237,column:43}},type:"binary-expr",locations:[{start:{line:237,column:10},end:{line:237,column:20}},{start:{line:237,column:24},end:{line:237,column:43}}],line:237},"30":{loc:{start:{line:246,column:2},end:{line:248,column:3}},type:"if",locations:[{start:{line:246,column:2},end:{line:248,column:3}},{start:{line:246,column:2},end:{line:248,column:3}}],line:246},"31":{loc:{start:{line:262,column:2},end:{line:302,column:3}},type:"if",locations:[{start:{line:262,column:2},end:{line:302,column:3}},{start:{line:262,column:2},end:{line:302,column:3}}],line:262},"32":{loc:{start:{line:267,column:8},end:{line:278,column:9}},type:"if",locations:[{start:{line:267,column:8},end:{line:278,column:9}},{start:{line:267,column:8},end:{line:278,column:9}}],line:267},"33":{loc:{start:{line:267,column:12},end:{line:267,column:196}},type:"binary-expr",locations:[{start:{line:267,column:12},end:{line:267,column:46}},{start:{line:267,column:50},end:{line:267,column:79}},{start:{line:267,column:83},end:{line:267,column:110}},{start:{line:267,column:114},end:{line:267,column:154}},{start:{line:267,column:158},end:{line:267,column:196}}],line:267},"34":{loc:{start:{line:268,column:10},end:{line:277,column:11}},type:"if",locations:[{start:{line:268,column:10},end:{line:277,column:11}},{start:{line:268,column:10},end:{line:277,column:11}}],line:268},"35":{loc:{start:{line:268,column:14},end:{line:268,column:283}},type:"binary-expr",locations:[{start:{line:268,column:14},end:{line:268,column:24}},{start:{line:268,column:28},end:{line:268,column:52}},{start:{line:268,column:56},end:{line:268,column:102}},{start:{line:268,column:106},end:{line:268,column:157}},{start:{line:268,column:162},end:{line:268,column:196}},{start:{line:268,column:200},end:{line:268,column:240}},{start:{line:268,column:244},end:{line:268,column:282}}],line:268},"36":{loc:{start:{line:270,column:50},end:{line:270,column:91}},type:"binary-expr",locations:[{start:{line:270,column:50},end:{line:270,column:85}},{start:{line:270,column:89},end:{line:270,column:91}}],line:270},"37":{loc:{start:{line:272,column:12},end:{line:274,column:13}},type:"if",locations:[{start:{line:272,column:12},end:{line:274,column:13}},{start:{line:272,column:12},end:{line:274,column:13}}],line:272},"38":{loc:{start:{line:275,column:17},end:{line:277,column:11}},type:"if",locations:[{start:{line:275,column:17},end:{line:277,column:11}},{start:{line:275,column:17},end:{line:277,column:11}}],line:275},"39":{loc:{start:{line:275,column:21},end:{line:275,column:91}},type:"binary-expr",locations:[{start:{line:275,column:21},end:{line:275,column:45}},{start:{line:275,column:49},end:{line:275,column:91}}],line:275},"40":{loc:{start:{line:284,column:6},end:{line:300,column:7}},type:"if",locations:[{start:{line:284,column:6},end:{line:300,column:7}},{start:{line:284,column:6},end:{line:300,column:7}}],line:284},"41":{loc:{start:{line:287,column:8},end:{line:289,column:9}},type:"if",locations:[{start:{line:287,column:8},end:{line:289,column:9}},{start:{line:287,column:8},end:{line:289,column:9}}],line:287},"42":{loc:{start:{line:291,column:8},end:{line:295,column:9}},type:"if",locations:[{start:{line:291,column:8},end:{line:295,column:9}},{start:{line:291,column:8},end:{line:295,column:9}}],line:291},"43":{loc:{start:{line:296,column:13},end:{line:300,column:7}},type:"if",locations:[{start:{line:296,column:13},end:{line:300,column:7}},{start:{line:296,column:13},end:{line:300,column:7}}],line:296},"44":{loc:{start:{line:311,column:2},end:{line:313,column:3}},type:"if",locations:[{start:{line:311,column:2},end:{line:313,column:3}},{start:{line:311,column:2},end:{line:313,column:3}}],line:311},"45":{loc:{start:{line:315,column:2},end:{line:323,column:3}},type:"if",locations:[{start:{line:315,column:2},end:{line:323,column:3}},{start:{line:315,column:2},end:{line:323,column:3}}],line:315},"46":{loc:{start:{line:315,column:6},end:{line:315,column:40}},type:"binary-expr",locations:[{start:{line:315,column:6},end:{line:315,column:17}},{start:{line:315,column:21},end:{line:315,column:40}}],line:315},"47":{loc:{start:{line:316,column:4},end:{line:318,column:5}},type:"if",locations:[{start:{line:316,column:4},end:{line:318,column:5}},{start:{line:316,column:4},end:{line:318,column:5}}],line:316},"48":{loc:{start:{line:316,column:8},end:{line:316,column:93}},type:"binary-expr",locations:[{start:{line:316,column:8},end:{line:316,column:46}},{start:{line:316,column:50},end:{line:316,column:93}}],line:316},"49":{loc:{start:{line:320,column:4},end:{line:322,column:5}},type:"if",locations:[{start:{line:320,column:4},end:{line:322,column:5}},{start:{line:320,column:4},end:{line:322,column:5}}],line:320},"50":{loc:{start:{line:320,column:8},end:{line:320,column:93}},type:"binary-expr",locations:[{start:{line:320,column:8},end:{line:320,column:46}},{start:{line:320,column:50},end:{line:320,column:93}}],line:320},"51":{loc:{start:{line:325,column:2},end:{line:331,column:3}},type:"if",locations:[{start:{line:325,column:2},end:{line:331,column:3}},{start:{line:325,column:2},end:{line:331,column:3}}],line:325},"52":{loc:{start:{line:325,column:6},end:{line:325,column:131}},type:"binary-expr",locations:[{start:{line:325,column:6},end:{line:325,column:24}},{start:{line:325,column:28},end:{line:325,column:67}},{start:{line:325,column:71},end:{line:325,column:131}}],line:325},"53":{loc:{start:{line:328,column:9},end:{line:331,column:3}},type:"if",locations:[{start:{line:328,column:9},end:{line:331,column:3}},{start:{line:328,column:9},end:{line:331,column:3}}],line:328},"54":{loc:{start:{line:328,column:13},end:{line:328,column:95}},type:"binary-expr",locations:[{start:{line:328,column:13},end:{line:328,column:72}},{start:{line:328,column:76},end:{line:328,column:95}}],line:328},"55":{loc:{start:{line:336,column:2},end:{line:346,column:3}},type:"if",locations:[{start:{line:336,column:2},end:{line:346,column:3}},{start:{line:336,column:2},end:{line:346,column:3}}],line:336},"56":{loc:{start:{line:339,column:21},end:{line:339,column:60}},type:"binary-expr",locations:[{start:{line:339,column:21},end:{line:339,column:37}},{start:{line:339,column:41},end:{line:339,column:60}}],line:339},"57":{loc:{start:{line:340,column:13},end:{line:340,column:64}},type:"binary-expr",locations:[{start:{line:340,column:13},end:{line:340,column:22}},{start:{line:340,column:27},end:{line:340,column:35}},{start:{line:340,column:39},end:{line:340,column:63}}],line:340},"58":{loc:{start:{line:343,column:4},end:{line:345,column:5}},type:"if",locations:[{start:{line:343,column:4},end:{line:345,column:5}},{start:{line:343,column:4},end:{line:345,column:5}}],line:343},"59":{loc:{start:{line:353,column:4},end:{line:355,column:5}},type:"if",locations:[{start:{line:353,column:4},end:{line:355,column:5}},{start:{line:353,column:4},end:{line:355,column:5}}],line:353},"60":{loc:{start:{line:359,column:4},end:{line:361,column:5}},type:"if",locations:[{start:{line:359,column:4},end:{line:361,column:5}},{start:{line:359,column:4},end:{line:361,column:5}}],line:359},"61":{loc:{start:{line:371,column:4},end:{line:373,column:5}},type:"if",locations:[{start:{line:371,column:4},end:{line:373,column:5}},{start:{line:371,column:4},end:{line:373,column:5}}],line:371},"62":{loc:{start:{line:385,column:2},end:{line:389,column:3}},type:"if",locations:[{start:{line:385,column:2},end:{line:389,column:3}},{start:{line:385,column:2},end:{line:389,column:3}}],line:385},"63":{loc:{start:{line:395,column:2},end:{line:397,column:3}},type:"if",locations:[{start:{line:395,column:2},end:{line:397,column:3}},{start:{line:395,column:2},end:{line:397,column:3}}],line:395},"64":{loc:{start:{line:400,column:4},end:{line:402,column:5}},type:"if",locations:[{start:{line:400,column:4},end:{line:402,column:5}},{start:{line:400,column:4},end:{line:402,column:5}}],line:400},"65":{loc:{start:{line:405,column:11},end:{line:405,column:59}},type:"binary-expr",locations:[{start:{line:405,column:11},end:{line:405,column:21}},{start:{line:405,column:25},end:{line:405,column:59}}],line:405},"66":{loc:{start:{line:414,column:4},end:{line:496,column:5}},type:"if",locations:[{start:{line:414,column:4},end:{line:496,column:5}},{start:{line:414,column:4},end:{line:496,column:5}}],line:414},"67":{loc:{start:{line:422,column:8},end:{line:424,column:9}},type:"if",locations:[{start:{line:422,column:8},end:{line:424,column:9}},{start:{line:422,column:8},end:{line:424,column:9}}],line:422},"68":{loc:{start:{line:429,column:6},end:{line:433,column:7}},type:"if",locations:[{start:{line:429,column:6},end:{line:433,column:7}},{start:{line:429,column:6},end:{line:433,column:7}}],line:429},"69":{loc:{start:{line:429,column:10},end:{line:429,column:43}},type:"binary-expr",locations:[{start:{line:429,column:10},end:{line:429,column:20}},{start:{line:429,column:24},end:{line:429,column:43}}],line:429},"70":{loc:{start:{line:431,column:13},end:{line:433,column:7}},type:"if",locations:[{start:{line:431,column:13},end:{line:433,column:7}},{start:{line:431,column:13},end:{line:433,column:7}}],line:431},"71":{loc:{start:{line:431,column:17},end:{line:431,column:65}},type:"binary-expr",locations:[{start:{line:431,column:17},end:{line:431,column:26}},{start:{line:431,column:30},end:{line:431,column:44}},{start:{line:431,column:48},end:{line:431,column:65}}],line:431},"72":{loc:{start:{line:435,column:6},end:{line:495,column:7}},type:"if",locations:[{start:{line:435,column:6},end:{line:495,column:7}},{start:{line:435,column:6},end:{line:495,column:7}}],line:435},"73":{loc:{start:{line:435,column:10},end:{line:435,column:51}},type:"binary-expr",locations:[{start:{line:435,column:10},end:{line:435,column:17}},{start:{line:435,column:21},end:{line:435,column:51}}],line:435},"74":{loc:{start:{line:443,column:8},end:{line:453,column:9}},type:"if",locations:[{start:{line:443,column:8},end:{line:453,column:9}},{start:{line:443,column:8},end:{line:453,column:9}}],line:443},"75":{loc:{start:{line:443,column:12},end:{line:443,column:47}},type:"binary-expr",locations:[{start:{line:443,column:12},end:{line:443,column:23}},{start:{line:443,column:27},end:{line:443,column:47}}],line:443},"76":{loc:{start:{line:456,column:8},end:{line:458,column:9}},type:"if",locations:[{start:{line:456,column:8},end:{line:458,column:9}},{start:{line:456,column:8},end:{line:458,column:9}}],line:456},"77":{loc:{start:{line:469,column:10},end:{line:482,column:11}},type:"if",locations:[{start:{line:469,column:10},end:{line:482,column:11}},{start:{line:469,column:10},end:{line:482,column:11}}],line:469},"78":{loc:{start:{line:484,column:13},end:{line:495,column:7}},type:"if",locations:[{start:{line:484,column:13},end:{line:495,column:7}},{start:{line:484,column:13},end:{line:495,column:7}}],line:484},"79":{loc:{start:{line:487,column:8},end:{line:489,column:9}},type:"if",locations:[{start:{line:487,column:8},end:{line:489,column:9}},{start:{line:487,column:8},end:{line:489,column:9}}],line:487},"80":{loc:{start:{line:492,column:8},end:{line:494,column:9}},type:"if",locations:[{start:{line:492,column:8},end:{line:494,column:9}},{start:{line:492,column:8},end:{line:494,column:9}}],line:492},"81":{loc:{start:{line:499,column:6},end:{line:502,column:7}},type:"if",locations:[{start:{line:499,column:6},end:{line:502,column:7}},{start:{line:499,column:6},end:{line:502,column:7}}],line:499},"82":{loc:{start:{line:511,column:2},end:{line:513,column:3}},type:"if",locations:[{start:{line:511,column:2},end:{line:513,column:3}},{start:{line:511,column:2},end:{line:513,column:3}}],line:511},"83":{loc:{start:{line:515,column:2},end:{line:518,column:3}},type:"if",locations:[{start:{line:515,column:2},end:{line:518,column:3}},{start:{line:515,column:2},end:{line:518,column:3}}],line:515},"84":{loc:{start:{line:515,column:6},end:{line:515,column:57}},type:"binary-expr",locations:[{start:{line:515,column:6},end:{line:515,column:25}},{start:{line:515,column:29},end:{line:515,column:57}}],line:515},"85":{loc:{start:{line:521,column:2},end:{line:533,column:3}},type:"if",locations:[{start:{line:521,column:2},end:{line:533,column:3}},{start:{line:521,column:2},end:{line:533,column:3}}],line:521},"86":{loc:{start:{line:521,column:6},end:{line:521,column:35}},type:"binary-expr",locations:[{start:{line:521,column:6},end:{line:521,column:16}},{start:{line:521,column:20},end:{line:521,column:35}}],line:521},"87":{loc:{start:{line:537,column:4},end:{line:540,column:5}},type:"if",locations:[{start:{line:537,column:4},end:{line:540,column:5}},{start:{line:537,column:4},end:{line:540,column:5}}],line:537},"88":{loc:{start:{line:542,column:4},end:{line:548,column:5}},type:"if",locations:[{start:{line:542,column:4},end:{line:548,column:5}},{start:{line:542,column:4},end:{line:548,column:5}}],line:542},"89":{loc:{start:{line:545,column:6},end:{line:547,column:7}},type:"if",locations:[{start:{line:545,column:6},end:{line:547,column:7}},{start:{line:545,column:6},end:{line:547,column:7}}],line:545},"90":{loc:{start:{line:565,column:2},end:{line:572,column:3}},type:"if",locations:[{start:{line:565,column:2},end:{line:572,column:3}},{start:{line:565,column:2},end:{line:572,column:3}}],line:565},"91":{loc:{start:{line:566,column:4},end:{line:569,column:5}},type:"if",locations:[{start:{line:566,column:4},end:{line:569,column:5}},{start:{line:566,column:4},end:{line:569,column:5}}],line:566},"92":{loc:{start:{line:590,column:4},end:{line:592,column:5}},type:"if",locations:[{start:{line:590,column:4},end:{line:592,column:5}},{start:{line:590,column:4},end:{line:592,column:5}}],line:590},"93":{loc:{start:{line:612,column:2},end:{line:614,column:3}},type:"if",locations:[{start:{line:612,column:2},end:{line:614,column:3}},{start:{line:612,column:2},end:{line:614,column:3}}],line:612},"94":{loc:{start:{line:612,column:6},end:{line:612,column:59}},type:"binary-expr",locations:[{start:{line:612,column:6},end:{line:612,column:22}},{start:{line:612,column:26},end:{line:612,column:59}}],line:612},"95":{loc:{start:{line:617,column:2},end:{line:619,column:3}},type:"if",locations:[{start:{line:617,column:2},end:{line:619,column:3}},{start:{line:617,column:2},end:{line:619,column:3}}],line:617},"96":{loc:{start:{line:631,column:4},end:{line:633,column:5}},type:"if",locations:[{start:{line:631,column:4},end:{line:633,column:5}},{start:{line:631,column:4},end:{line:633,column:5}}],line:631},"97":{loc:{start:{line:635,column:4},end:{line:639,column:5}},type:"if",locations:[{start:{line:635,column:4},end:{line:639,column:5}},{start:{line:635,column:4},end:{line:639,column:5}}],line:635},"98":{loc:{start:{line:635,column:8},end:{line:635,column:172}},type:"binary-expr",locations:[{start:{line:635,column:8},end:{line:635,column:27}},{start:{line:635,column:31},end:{line:635,column:70}},{start:{line:635,column:74},end:{line:635,column:118}},{start:{line:635,column:122},end:{line:635,column:172}}],line:635},"99":{loc:{start:{line:644,column:2},end:{line:644,column:60}},type:"if",locations:[{start:{line:644,column:2},end:{line:644,column:60}},{start:{line:644,column:2},end:{line:644,column:60}}],line:644},"100":{loc:{start:{line:659,column:22},end:{line:659,column:170}},type:"cond-expr",locations:[{start:{line:659,column:67},end:{line:659,column:109}},{start:{line:659,column:112},end:{line:659,column:170}}],line:659},"101":{loc:{start:{line:662,column:2},end:{line:664,column:3}},type:"if",locations:[{start:{line:662,column:2},end:{line:664,column:3}},{start:{line:662,column:2},end:{line:664,column:3}}],line:662},"102":{loc:{start:{line:662,column:6},end:{line:662,column:234}},type:"binary-expr",locations:[{start:{line:662,column:6},end:{line:662,column:49}},{start:{line:662,column:53},end:{line:662,column:117}},{start:{line:662,column:121},end:{line:662,column:165}},{start:{line:662,column:169},end:{line:662,column:234}}],line:662},"103":{loc:{start:{line:667,column:2},end:{line:684,column:3}},type:"if",locations:[{start:{line:667,column:2},end:{line:684,column:3}},{start:{line:667,column:2},end:{line:684,column:3}}],line:667},"104":{loc:{start:{line:668,column:4},end:{line:683,column:5}},type:"if",locations:[{start:{line:668,column:4},end:{line:683,column:5}},{start:{line:668,column:4},end:{line:683,column:5}}],line:668},"105":{loc:{start:{line:670,column:6},end:{line:670,column:155}},type:"if",locations:[{start:{line:670,column:6},end:{line:670,column:155}},{start:{line:670,column:6},end:{line:670,column:155}}],line:670},"106":{loc:{start:{line:676,column:8},end:{line:678,column:9}},type:"if",locations:[{start:{line:676,column:8},end:{line:678,column:9}},{start:{line:676,column:8},end:{line:678,column:9}}],line:676},"107":{loc:{start:{line:680,column:8},end:{line:680,column:158}},type:"if",locations:[{start:{line:680,column:8},end:{line:680,column:158}},{start:{line:680,column:8},end:{line:680,column:158}}],line:680},"108":{loc:{start:{line:691,column:2},end:{line:723,column:3}},type:"if",locations:[{start:{line:691,column:2},end:{line:723,column:3}},{start:{line:691,column:2},end:{line:723,column:3}}],line:691},"109":{loc:{start:{line:691,column:6},end:{line:691,column:65}},type:"binary-expr",locations:[{start:{line:691,column:6},end:{line:691,column:16}},{start:{line:691,column:20},end:{line:691,column:65}}],line:691},"110":{loc:{start:{line:697,column:6},end:{line:699,column:7}},type:"if",locations:[{start:{line:697,column:6},end:{line:699,column:7}},{start:{line:697,column:6},end:{line:699,column:7}}],line:697},"111":{loc:{start:{line:703,column:6},end:{line:703,column:145}},type:"if",locations:[{start:{line:703,column:6},end:{line:703,column:145}},{start:{line:703,column:6},end:{line:703,column:145}}],line:703},"112":{loc:{start:{line:709,column:10},end:{line:710,column:53}},type:"if",locations:[{start:{line:709,column:10},end:{line:710,column:53}},{start:{line:709,column:10},end:{line:710,column:53}}],line:709},"113":{loc:{start:{line:718,column:8},end:{line:719,column:186}},type:"if",locations:[{start:{line:718,column:8},end:{line:719,column:186}},{start:{line:718,column:8},end:{line:719,column:186}}],line:718},"114":{loc:{start:{line:729,column:2},end:{line:731,column:3}},type:"if",locations:[{start:{line:729,column:2},end:{line:731,column:3}},{start:{line:729,column:2},end:{line:731,column:3}}],line:729},"115":{loc:{start:{line:734,column:2},end:{line:736,column:3}},type:"if",locations:[{start:{line:734,column:2},end:{line:736,column:3}},{start:{line:734,column:2},end:{line:736,column:3}}],line:734},"116":{loc:{start:{line:734,column:6},end:{line:734,column:39}},type:"binary-expr",locations:[{start:{line:734,column:6},end:{line:734,column:16}},{start:{line:734,column:20},end:{line:734,column:39}}],line:734},"117":{loc:{start:{line:739,column:2},end:{line:741,column:3}},type:"if",locations:[{start:{line:739,column:2},end:{line:741,column:3}},{start:{line:739,column:2},end:{line:741,column:3}}],line:739},"118":{loc:{start:{line:739,column:6},end:{line:739,column:42}},type:"binary-expr",locations:[{start:{line:739,column:6},end:{line:739,column:20}},{start:{line:739,column:24},end:{line:739,column:42}}],line:739},"119":{loc:{start:{line:743,column:2},end:{line:748,column:3}},type:"if",locations:[{start:{line:743,column:2},end:{line:748,column:3}},{start:{line:743,column:2},end:{line:748,column:3}}],line:743},"120":{loc:{start:{line:743,column:6},end:{line:745,column:30}},type:"binary-expr",locations:[{start:{line:743,column:6},end:{line:743,column:35}},{start:{line:744,column:2},end:{line:744,column:45}},{start:{line:745,column:2},end:{line:745,column:30}}],line:743},"121":{loc:{start:{line:756,column:2},end:{line:758,column:3}},type:"if",locations:[{start:{line:756,column:2},end:{line:758,column:3}},{start:{line:756,column:2},end:{line:758,column:3}}],line:756},"122":{loc:{start:{line:756,column:6},end:{line:756,column:70}},type:"binary-expr",locations:[{start:{line:756,column:6},end:{line:756,column:30}},{start:{line:756,column:34},end:{line:756,column:70}}],line:756},"123":{loc:{start:{line:760,column:2},end:{line:762,column:3}},type:"if",locations:[{start:{line:760,column:2},end:{line:762,column:3}},{start:{line:760,column:2},end:{line:762,column:3}}],line:760},"124":{loc:{start:{line:760,column:6},end:{line:760,column:64}},type:"binary-expr",locations:[{start:{line:760,column:6},end:{line:760,column:42}},{start:{line:760,column:46},end:{line:760,column:64}}],line:760},"125":{loc:{start:{line:770,column:14},end:{line:770,column:63}},type:"cond-expr",locations:[{start:{line:770,column:45},end:{line:770,column:52}},{start:{line:770,column:55},end:{line:770,column:63}}],line:770},"126":{loc:{start:{line:771,column:20},end:{line:771,column:62}},type:"binary-expr",locations:[{start:{line:771,column:20},end:{line:771,column:48}},{start:{line:771,column:52},end:{line:771,column:62}}],line:771},"127":{loc:{start:{line:776,column:2},end:{line:778,column:3}},type:"if",locations:[{start:{line:776,column:2},end:{line:778,column:3}},{start:{line:776,column:2},end:{line:778,column:3}}],line:776},"128":{loc:{start:{line:776,column:6},end:{line:776,column:45}},type:"binary-expr",locations:[{start:{line:776,column:6},end:{line:776,column:19}},{start:{line:776,column:23},end:{line:776,column:45}}],line:776},"129":{loc:{start:{line:802,column:2},end:{line:804,column:3}},type:"if",locations:[{start:{line:802,column:2},end:{line:804,column:3}},{start:{line:802,column:2},end:{line:804,column:3}}],line:802},"130":{loc:{start:{line:815,column:2},end:{line:818,column:3}},type:"if",locations:[{start:{line:815,column:2},end:{line:818,column:3}},{start:{line:815,column:2},end:{line:818,column:3}}],line:815},"131":{loc:{start:{line:815,column:6},end:{line:815,column:55}},type:"binary-expr",locations:[{start:{line:815,column:6},end:{line:815,column:32}},{start:{line:815,column:36},end:{line:815,column:55}}],line:815},"132":{loc:{start:{line:820,column:2},end:{line:830,column:3}},type:"if",locations:[{start:{line:820,column:2},end:{line:830,column:3}},{start:{line:820,column:2},end:{line:830,column:3}}],line:820},"133":{loc:{start:{line:820,column:6},end:{line:820,column:53}},type:"binary-expr",locations:[{start:{line:820,column:6},end:{line:820,column:29}},{start:{line:820,column:33},end:{line:820,column:53}}],line:820},"134":{loc:{start:{line:835,column:2},end:{line:837,column:3}},type:"if",locations:[{start:{line:835,column:2},end:{line:837,column:3}},{start:{line:835,column:2},end:{line:837,column:3}}],line:835},"135":{loc:{start:{line:835,column:6},end:{line:835,column:48}},type:"binary-expr",locations:[{start:{line:835,column:6},end:{line:835,column:34}},{start:{line:835,column:38},end:{line:835,column:48}}],line:835},"136":{loc:{start:{line:846,column:2},end:{line:848,column:3}},type:"if",locations:[{start:{line:846,column:2},end:{line:848,column:3}},{start:{line:846,column:2},end:{line:848,column:3}}],line:846},"137":{loc:{start:{line:846,column:6},end:{line:846,column:30}},type:"binary-expr",locations:[{start:{line:846,column:6},end:{line:846,column:11}},{start:{line:846,column:15},end:{line:846,column:30}}],line:846},"138":{loc:{start:{line:850,column:2},end:{line:852,column:3}},type:"if",locations:[{start:{line:850,column:2},end:{line:852,column:3}},{start:{line:850,column:2},end:{line:852,column:3}}],line:850},"139":{loc:{start:{line:865,column:2},end:{line:875,column:3}},type:"if",locations:[{start:{line:865,column:2},end:{line:875,column:3}},{start:{line:865,column:2},end:{line:875,column:3}}],line:865},"140":{loc:{start:{line:865,column:6},end:{line:865,column:95}},type:"binary-expr",locations:[{start:{line:865,column:6},end:{line:865,column:18}},{start:{line:865,column:22},end:{line:865,column:51}},{start:{line:865,column:55},end:{line:865,column:95}}],line:865},"141":{loc:{start:{line:877,column:2},end:{line:880,column:3}},type:"if",locations:[{start:{line:877,column:2},end:{line:880,column:3}},{start:{line:877,column:2},end:{line:880,column:3}}],line:877},"142":{loc:{start:{line:877,column:6},end:{line:877,column:56}},type:"binary-expr",locations:[{start:{line:877,column:6},end:{line:877,column:18}},{start:{line:877,column:22},end:{line:877,column:56}}],line:877},"143":{loc:{start:{line:882,column:2},end:{line:887,column:3}},type:"if",locations:[{start:{line:882,column:2},end:{line:887,column:3}},{start:{line:882,column:2},end:{line:887,column:3}}],line:882},"144":{loc:{start:{line:882,column:6},end:{line:882,column:59}},type:"binary-expr",locations:[{start:{line:882,column:6},end:{line:882,column:18}},{start:{line:882,column:22},end:{line:882,column:59}}],line:882},"145":{loc:{start:{line:893,column:2},end:{line:895,column:3}},type:"if",locations:[{start:{line:893,column:2},end:{line:895,column:3}},{start:{line:893,column:2},end:{line:895,column:3}}],line:893},"146":{loc:{start:{line:893,column:6},end:{line:893,column:52}},type:"binary-expr",locations:[{start:{line:893,column:6},end:{line:893,column:19}},{start:{line:893,column:23},end:{line:893,column:52}}],line:893},"147":{loc:{start:{line:897,column:2},end:{line:899,column:3}},type:"if",locations:[{start:{line:897,column:2},end:{line:899,column:3}},{start:{line:897,column:2},end:{line:899,column:3}}],line:897},"148":{loc:{start:{line:897,column:6},end:{line:897,column:44}},type:"binary-expr",locations:[{start:{line:897,column:6},end:{line:897,column:21}},{start:{line:897,column:25},end:{line:897,column:44}}],line:897},"149":{loc:{start:{line:902,column:2},end:{line:904,column:3}},type:"if",locations:[{start:{line:902,column:2},end:{line:904,column:3}},{start:{line:902,column:2},end:{line:904,column:3}}],line:902},"150":{loc:{start:{line:906,column:2},end:{line:914,column:3}},type:"if",locations:[{start:{line:906,column:2},end:{line:914,column:3}},{start:{line:906,column:2},end:{line:914,column:3}}],line:906},"151":{loc:{start:{line:907,column:4},end:{line:913,column:5}},type:"if",locations:[{start:{line:907,column:4},end:{line:913,column:5}},{start:{line:907,column:4},end:{line:913,column:5}}],line:907},"152":{loc:{start:{line:907,column:8},end:{line:907,column:93}},type:"binary-expr",locations:[{start:{line:907,column:8},end:{line:907,column:22}},{start:{line:907,column:26},end:{line:907,column:45}},{start:{line:907,column:49},end:{line:907,column:93}}],line:907},"153":{loc:{start:{line:909,column:11},end:{line:913,column:5}},type:"if",locations:[{start:{line:909,column:11},end:{line:913,column:5}},{start:{line:909,column:11},end:{line:913,column:5}}],line:909},"154":{loc:{start:{line:911,column:11},end:{line:913,column:5}},type:"if",locations:[{start:{line:911,column:11},end:{line:913,column:5}},{start:{line:911,column:11},end:{line:913,column:5}}],line:911},"155":{loc:{start:{line:916,column:2},end:{line:949,column:3}},type:"if",locations:[{start:{line:916,column:2},end:{line:949,column:3}},{start:{line:916,column:2},end:{line:949,column:3}}],line:916},"156":{loc:{start:{line:916,column:6},end:{line:916,column:40}},type:"binary-expr",locations:[{start:{line:916,column:6},end:{line:916,column:17}},{start:{line:916,column:21},end:{line:916,column:40}}],line:916},"157":{loc:{start:{line:920,column:6},end:{line:922,column:7}},type:"if",locations:[{start:{line:920,column:6},end:{line:922,column:7}},{start:{line:920,column:6},end:{line:922,column:7}}],line:920},"158":{loc:{start:{line:920,column:10},end:{line:920,column:46}},type:"binary-expr",locations:[{start:{line:920,column:10},end:{line:920,column:28}},{start:{line:920,column:32},end:{line:920,column:46}}],line:920},"159":{loc:{start:{line:938,column:6},end:{line:940,column:7}},type:"if",locations:[{start:{line:938,column:6},end:{line:940,column:7}},{start:{line:938,column:6},end:{line:940,column:7}}],line:938},"160":{loc:{start:{line:958,column:2},end:{line:960,column:3}},type:"if",locations:[{start:{line:958,column:2},end:{line:960,column:3}},{start:{line:958,column:2},end:{line:960,column:3}}],line:958},"161":{loc:{start:{line:958,column:6},end:{line:958,column:57}},type:"binary-expr",locations:[{start:{line:958,column:6},end:{line:958,column:19}},{start:{line:958,column:23},end:{line:958,column:57}}],line:958},"162":{loc:{start:{line:962,column:2},end:{line:964,column:3}},type:"if",locations:[{start:{line:962,column:2},end:{line:964,column:3}},{start:{line:962,column:2},end:{line:964,column:3}}],line:962},"163":{loc:{start:{line:962,column:6},end:{line:962,column:101}},type:"binary-expr",locations:[{start:{line:962,column:6},end:{line:962,column:17}},{start:{line:962,column:21},end:{line:962,column:43}},{start:{line:962,column:47},end:{line:962,column:72}},{start:{line:962,column:76},end:{line:962,column:101}}],line:962},"164":{loc:{start:{line:968,column:2},end:{line:970,column:3}},type:"if",locations:[{start:{line:968,column:2},end:{line:970,column:3}},{start:{line:968,column:2},end:{line:970,column:3}}],line:968},"165":{loc:{start:{line:968,column:6},end:{line:968,column:65}},type:"binary-expr",locations:[{start:{line:968,column:6},end:{line:968,column:27}},{start:{line:968,column:31},end:{line:968,column:65}}],line:968},"166":{loc:{start:{line:973,column:2},end:{line:975,column:3}},type:"if",locations:[{start:{line:973,column:2},end:{line:975,column:3}},{start:{line:973,column:2},end:{line:975,column:3}}],line:973},"167":{loc:{start:{line:979,column:2},end:{line:981,column:3}},type:"if",locations:[{start:{line:979,column:2},end:{line:981,column:3}},{start:{line:979,column:2},end:{line:981,column:3}}],line:979},"168":{loc:{start:{line:979,column:6},end:{line:979,column:44}},type:"binary-expr",locations:[{start:{line:979,column:6},end:{line:979,column:21}},{start:{line:979,column:25},end:{line:979,column:44}}],line:979},"169":{loc:{start:{line:983,column:2},end:{line:985,column:3}},type:"if",locations:[{start:{line:983,column:2},end:{line:985,column:3}},{start:{line:983,column:2},end:{line:985,column:3}}],line:983},"170":{loc:{start:{line:988,column:2},end:{line:990,column:3}},type:"if",locations:[{start:{line:988,column:2},end:{line:990,column:3}},{start:{line:988,column:2},end:{line:990,column:3}}],line:988},"171":{loc:{start:{line:988,column:6},end:{line:988,column:86}},type:"binary-expr",locations:[{start:{line:988,column:6},end:{line:988,column:16}},{start:{line:988,column:20},end:{line:988,column:42}},{start:{line:988,column:46},end:{line:988,column:61}},{start:{line:988,column:65},end:{line:988,column:86}}],line:988},"172":{loc:{start:{line:1001,column:2},end:{line:1005,column:3}},type:"if",locations:[{start:{line:1001,column:2},end:{line:1005,column:3}},{start:{line:1001,column:2},end:{line:1005,column:3}}],line:1001},"173":{loc:{start:{line:1001,column:6},end:{line:1001,column:39}},type:"binary-expr",locations:[{start:{line:1001,column:6},end:{line:1001,column:16}},{start:{line:1001,column:20},end:{line:1001,column:39}}],line:1001},"174":{loc:{start:{line:1007,column:2},end:{line:1011,column:3}},type:"if",locations:[{start:{line:1007,column:2},end:{line:1011,column:3}},{start:{line:1007,column:2},end:{line:1011,column:3}}],line:1007},"175":{loc:{start:{line:1013,column:2},end:{line:1017,column:3}},type:"if",locations:[{start:{line:1013,column:2},end:{line:1017,column:3}},{start:{line:1013,column:2},end:{line:1017,column:3}}],line:1013},"176":{loc:{start:{line:1019,column:2},end:{line:1021,column:3}},type:"if",locations:[{start:{line:1019,column:2},end:{line:1021,column:3}},{start:{line:1019,column:2},end:{line:1021,column:3}}],line:1019},"177":{loc:{start:{line:1029,column:6},end:{line:1031,column:7}},type:"if",locations:[{start:{line:1029,column:6},end:{line:1031,column:7}},{start:{line:1029,column:6},end:{line:1031,column:7}}],line:1029},"178":{loc:{start:{line:1029,column:10},end:{line:1029,column:85}},type:"binary-expr",locations:[{start:{line:1029,column:10},end:{line:1029,column:20}},{start:{line:1029,column:24},end:{line:1029,column:43}},{start:{line:1029,column:47},end:{line:1029,column:85}}],line:1029},"179":{loc:{start:{line:1033,column:6},end:{line:1035,column:7}},type:"if",locations:[{start:{line:1033,column:6},end:{line:1035,column:7}},{start:{line:1033,column:6},end:{line:1035,column:7}}],line:1033},"180":{loc:{start:{line:1037,column:6},end:{line:1039,column:7}},type:"if",locations:[{start:{line:1037,column:6},end:{line:1039,column:7}},{start:{line:1037,column:6},end:{line:1039,column:7}}],line:1037},"181":{loc:{start:{line:1042,column:4},end:{line:1058,column:5}},type:"if",locations:[{start:{line:1042,column:4},end:{line:1058,column:5}},{start:{line:1042,column:4},end:{line:1058,column:5}}],line:1042},"182":{loc:{start:{line:1042,column:8},end:{line:1042,column:41}},type:"binary-expr",locations:[{start:{line:1042,column:8},end:{line:1042,column:18}},{start:{line:1042,column:22},end:{line:1042,column:41}}],line:1042},"183":{loc:{start:{line:1043,column:6},end:{line:1045,column:7}},type:"if",locations:[{start:{line:1043,column:6},end:{line:1045,column:7}},{start:{line:1043,column:6},end:{line:1045,column:7}}],line:1043},"184":{loc:{start:{line:1047,column:6},end:{line:1049,column:7}},type:"if",locations:[{start:{line:1047,column:6},end:{line:1049,column:7}},{start:{line:1047,column:6},end:{line:1049,column:7}}],line:1047},"185":{loc:{start:{line:1047,column:10},end:{line:1047,column:127}},type:"binary-expr",locations:[{start:{line:1047,column:10},end:{line:1047,column:34}},{start:{line:1047,column:38},end:{line:1047,column:66}},{start:{line:1047,column:70},end:{line:1047,column:127}}],line:1047},"186":{loc:{start:{line:1051,column:6},end:{line:1053,column:7}},type:"if",locations:[{start:{line:1051,column:6},end:{line:1053,column:7}},{start:{line:1051,column:6},end:{line:1053,column:7}}],line:1051},"187":{loc:{start:{line:1051,column:10},end:{line:1051,column:177}},type:"binary-expr",locations:[{start:{line:1051,column:10},end:{line:1051,column:31}},{start:{line:1051,column:35},end:{line:1051,column:60}},{start:{line:1051,column:64},end:{line:1051,column:115}},{start:{line:1051,column:119},end:{line:1051,column:144}},{start:{line:1051,column:148},end:{line:1051,column:177}}],line:1051},"188":{loc:{start:{line:1055,column:6},end:{line:1057,column:7}},type:"if",locations:[{start:{line:1055,column:6},end:{line:1057,column:7}},{start:{line:1055,column:6},end:{line:1057,column:7}}],line:1055},"189":{loc:{start:{line:1055,column:10},end:{line:1055,column:107}},type:"binary-expr",locations:[{start:{line:1055,column:10},end:{line:1055,column:30}},{start:{line:1055,column:34},end:{line:1055,column:54}},{start:{line:1055,column:58},end:{line:1055,column:107}}],line:1055},"190":{loc:{start:{line:1060,column:4},end:{line:1062,column:5}},type:"if",locations:[{start:{line:1060,column:4},end:{line:1062,column:5}},{start:{line:1060,column:4},end:{line:1062,column:5}}],line:1060},"191":{loc:{start:{line:1060,column:8},end:{line:1060,column:58}},type:"binary-expr",locations:[{start:{line:1060,column:8},end:{line:1060,column:18}},{start:{line:1060,column:22},end:{line:1060,column:41}},{start:{line:1060,column:45},end:{line:1060,column:58}}],line:1060},"192":{loc:{start:{line:1064,column:4},end:{line:1066,column:5}},type:"if",locations:[{start:{line:1064,column:4},end:{line:1066,column:5}},{start:{line:1064,column:4},end:{line:1066,column:5}}],line:1064},"193":{loc:{start:{line:1064,column:8},end:{line:1064,column:45}},type:"binary-expr",locations:[{start:{line:1064,column:8},end:{line:1064,column:22}},{start:{line:1064,column:26},end:{line:1064,column:45}}],line:1064},"194":{loc:{start:{line:1069,column:4},end:{line:1071,column:5}},type:"if",locations:[{start:{line:1069,column:4},end:{line:1071,column:5}},{start:{line:1069,column:4},end:{line:1071,column:5}}],line:1069},"195":{loc:{start:{line:1069,column:8},end:{line:1069,column:56}},type:"binary-expr",locations:[{start:{line:1069,column:8},end:{line:1069,column:19}},{start:{line:1069,column:23},end:{line:1069,column:44}},{start:{line:1069,column:48},end:{line:1069,column:56}}],line:1069},"196":{loc:{start:{line:1073,column:4},end:{line:1172,column:5}},type:"if",locations:[{start:{line:1073,column:4},end:{line:1172,column:5}},{start:{line:1073,column:4},end:{line:1172,column:5}}],line:1073},"197":{loc:{start:{line:1074,column:6},end:{line:1110,column:7}},type:"if",locations:[{start:{line:1074,column:6},end:{line:1110,column:7}},{start:{line:1074,column:6},end:{line:1110,column:7}}],line:1074},"198":{loc:{start:{line:1076,column:13},end:{line:1110,column:7}},type:"if",locations:[{start:{line:1076,column:13},end:{line:1110,column:7}},{start:{line:1076,column:13},end:{line:1110,column:7}}],line:1076},"199":{loc:{start:{line:1076,column:17},end:{line:1076,column:112}},type:"binary-expr",locations:[{start:{line:1076,column:17},end:{line:1076,column:47}},{start:{line:1076,column:52},end:{line:1076,column:92}},{start:{line:1076,column:96},end:{line:1076,column:111}}],line:1076},"200":{loc:{start:{line:1081,column:13},end:{line:1110,column:7}},type:"if",locations:[{start:{line:1081,column:13},end:{line:1110,column:7}},{start:{line:1081,column:13},end:{line:1110,column:7}}],line:1081},"201":{loc:{start:{line:1096,column:8},end:{line:1098,column:9}},type:"if",locations:[{start:{line:1096,column:8},end:{line:1098,column:9}},{start:{line:1096,column:8},end:{line:1098,column:9}}],line:1096},"202":{loc:{start:{line:1101,column:10},end:{line:1104,column:11}},type:"if",locations:[{start:{line:1101,column:10},end:{line:1104,column:11}},{start:{line:1101,column:10},end:{line:1104,column:11}}],line:1101},"203":{loc:{start:{line:1112,column:6},end:{line:1171,column:7}},type:"if",locations:[{start:{line:1112,column:6},end:{line:1171,column:7}},{start:{line:1112,column:6},end:{line:1171,column:7}}],line:1112},"204":{loc:{start:{line:1112,column:10},end:{line:1112,column:84}},type:"binary-expr",locations:[{start:{line:1112,column:10},end:{line:1112,column:40}},{start:{line:1112,column:44},end:{line:1112,column:84}}],line:1112},"205":{loc:{start:{line:1122,column:10},end:{line:1125,column:11}},type:"if",locations:[{start:{line:1122,column:10},end:{line:1125,column:11}},{start:{line:1122,column:10},end:{line:1125,column:11}}],line:1122},"206":{loc:{start:{line:1131,column:8},end:{line:1167,column:9}},type:"if",locations:[{start:{line:1131,column:8},end:{line:1167,column:9}},{start:{line:1131,column:8},end:{line:1167,column:9}}],line:1131},"207":{loc:{start:{line:1131,column:12},end:{line:1131,column:81}},type:"binary-expr",locations:[{start:{line:1131,column:12},end:{line:1131,column:33}},{start:{line:1131,column:37},end:{line:1131,column:81}}],line:1131},"208":{loc:{start:{line:1140,column:10},end:{line:1152,column:11}},type:"if",locations:[{start:{line:1140,column:10},end:{line:1152,column:11}},{start:{line:1140,column:10},end:{line:1152,column:11}}],line:1140},"209":{loc:{start:{line:1144,column:17},end:{line:1152,column:11}},type:"if",locations:[{start:{line:1144,column:17},end:{line:1152,column:11}},{start:{line:1144,column:17},end:{line:1152,column:11}}],line:1144},"210":{loc:{start:{line:1144,column:21},end:{line:1144,column:101}},type:"binary-expr",locations:[{start:{line:1144,column:21},end:{line:1144,column:37}},{start:{line:1144,column:41},end:{line:1144,column:59}},{start:{line:1144,column:63},end:{line:1144,column:101}}],line:1144},"211":{loc:{start:{line:1154,column:10},end:{line:1156,column:11}},type:"if",locations:[{start:{line:1154,column:10},end:{line:1156,column:11}},{start:{line:1154,column:10},end:{line:1156,column:11}}],line:1154},"212":{loc:{start:{line:1159,column:12},end:{line:1162,column:13}},type:"if",locations:[{start:{line:1159,column:12},end:{line:1162,column:13}},{start:{line:1159,column:12},end:{line:1162,column:13}}],line:1159},"213":{loc:{start:{line:1174,column:4},end:{line:1180,column:5}},type:"if",locations:[{start:{line:1174,column:4},end:{line:1180,column:5}},{start:{line:1174,column:4},end:{line:1180,column:5}}],line:1174},"214":{loc:{start:{line:1191,column:2},end:{line:1193,column:3}},type:"if",locations:[{start:{line:1191,column:2},end:{line:1193,column:3}},{start:{line:1191,column:2},end:{line:1193,column:3}}],line:1191},"215":{loc:{start:{line:1191,column:6},end:{line:1191,column:45}},type:"binary-expr",locations:[{start:{line:1191,column:6},end:{line:1191,column:19}},{start:{line:1191,column:23},end:{line:1191,column:45}}],line:1191},"216":{loc:{start:{line:1197,column:2},end:{line:1199,column:3}},type:"if",locations:[{start:{line:1197,column:2},end:{line:1199,column:3}},{start:{line:1197,column:2},end:{line:1199,column:3}}],line:1197},"217":{loc:{start:{line:1201,column:2},end:{line:1203,column:3}},type:"if",locations:[{start:{line:1201,column:2},end:{line:1203,column:3}},{start:{line:1201,column:2},end:{line:1203,column:3}}],line:1201},"218":{loc:{start:{line:1205,column:2},end:{line:1207,column:3}},type:"if",locations:[{start:{line:1205,column:2},end:{line:1207,column:3}},{start:{line:1205,column:2},end:{line:1207,column:3}}],line:1205},"219":{loc:{start:{line:1205,column:6},end:{line:1205,column:79}},type:"binary-expr",locations:[{start:{line:1205,column:6},end:{line:1205,column:32}},{start:{line:1205,column:36},end:{line:1205,column:46}},{start:{line:1205,column:50},end:{line:1205,column:79}}],line:1205},"220":{loc:{start:{line:1209,column:2},end:{line:1211,column:3}},type:"if",locations:[{start:{line:1209,column:2},end:{line:1211,column:3}},{start:{line:1209,column:2},end:{line:1211,column:3}}],line:1209},"221":{loc:{start:{line:1209,column:6},end:{line:1209,column:57}},type:"binary-expr",locations:[{start:{line:1209,column:6},end:{line:1209,column:35}},{start:{line:1209,column:39},end:{line:1209,column:57}}],line:1209},"222":{loc:{start:{line:1215,column:2},end:{line:1217,column:3}},type:"if",locations:[{start:{line:1215,column:2},end:{line:1217,column:3}},{start:{line:1215,column:2},end:{line:1217,column:3}}],line:1215},"223":{loc:{start:{line:1215,column:6},end:{line:1215,column:51}},type:"binary-expr",locations:[{start:{line:1215,column:6},end:{line:1215,column:19}},{start:{line:1215,column:23},end:{line:1215,column:51}}],line:1215},"224":{loc:{start:{line:1219,column:2},end:{line:1367,column:3}},type:"if",locations:[{start:{line:1219,column:2},end:{line:1367,column:3}},{start:{line:1219,column:2},end:{line:1367,column:3}}],line:1219},"225":{loc:{start:{line:1222,column:4},end:{line:1227,column:5}},type:"if",locations:[{start:{line:1222,column:4},end:{line:1227,column:5}},{start:{line:1222,column:4},end:{line:1227,column:5}}],line:1222},"226":{loc:{start:{line:1222,column:8},end:{line:1222,column:82}},type:"binary-expr",locations:[{start:{line:1222,column:8},end:{line:1222,column:34}},{start:{line:1222,column:38},end:{line:1222,column:51}},{start:{line:1222,column:55},end:{line:1222,column:82}}],line:1222},"227":{loc:{start:{line:1230,column:4},end:{line:1232,column:5}},type:"if",locations:[{start:{line:1230,column:4},end:{line:1232,column:5}},{start:{line:1230,column:4},end:{line:1232,column:5}}],line:1230},"228":{loc:{start:{line:1230,column:8},end:{line:1230,column:139}},type:"binary-expr",locations:[{start:{line:1230,column:8},end:{line:1230,column:34}},{start:{line:1230,column:38},end:{line:1230,column:64}},{start:{line:1230,column:68},end:{line:1230,column:94}},{start:{line:1230,column:98},end:{line:1230,column:139}}],line:1230},"229":{loc:{start:{line:1238,column:4},end:{line:1263,column:5}},type:"if",locations:[{start:{line:1238,column:4},end:{line:1263,column:5}},{start:{line:1238,column:4},end:{line:1263,column:5}}],line:1238},"230":{loc:{start:{line:1238,column:8},end:{line:1238,column:143}},type:"binary-expr",locations:[{start:{line:1238,column:8},end:{line:1238,column:34}},{start:{line:1238,column:38},end:{line:1238,column:64}},{start:{line:1238,column:68},end:{line:1238,column:94}},{start:{line:1238,column:98},end:{line:1238,column:143}}],line:1238},"231":{loc:{start:{line:1244,column:8},end:{line:1246,column:9}},type:"if",locations:[{start:{line:1244,column:8},end:{line:1246,column:9}},{start:{line:1244,column:8},end:{line:1246,column:9}}],line:1244},"232":{loc:{start:{line:1251,column:8},end:{line:1253,column:9}},type:"if",locations:[{start:{line:1251,column:8},end:{line:1253,column:9}},{start:{line:1251,column:8},end:{line:1253,column:9}}],line:1251},"233":{loc:{start:{line:1279,column:4},end:{line:1303,column:5}},type:"if",locations:[{start:{line:1279,column:4},end:{line:1303,column:5}},{start:{line:1279,column:4},end:{line:1303,column:5}}],line:1279},"234":{loc:{start:{line:1282,column:6},end:{line:1291,column:7}},type:"if",locations:[{start:{line:1282,column:6},end:{line:1291,column:7}},{start:{line:1282,column:6},end:{line:1291,column:7}}],line:1282},"235":{loc:{start:{line:1285,column:8},end:{line:1290,column:9}},type:"if",locations:[{start:{line:1285,column:8},end:{line:1290,column:9}},{start:{line:1285,column:8},end:{line:1290,column:9}}],line:1285},"236":{loc:{start:{line:1300,column:6},end:{line:1302,column:7}},type:"if",locations:[{start:{line:1300,column:6},end:{line:1302,column:7}},{start:{line:1300,column:6},end:{line:1302,column:7}}],line:1300},"237":{loc:{start:{line:1300,column:10},end:{line:1300,column:81}},type:"binary-expr",locations:[{start:{line:1300,column:10},end:{line:1300,column:36}},{start:{line:1300,column:40},end:{line:1300,column:81}}],line:1300},"238":{loc:{start:{line:1307,column:6},end:{line:1309,column:7}},type:"if",locations:[{start:{line:1307,column:6},end:{line:1309,column:7}},{start:{line:1307,column:6},end:{line:1309,column:7}}],line:1307},"239":{loc:{start:{line:1307,column:10},end:{line:1307,column:82}},type:"binary-expr",locations:[{start:{line:1307,column:10},end:{line:1307,column:36}},{start:{line:1307,column:40},end:{line:1307,column:82}}],line:1307},"240":{loc:{start:{line:1312,column:6},end:{line:1314,column:7}},type:"if",locations:[{start:{line:1312,column:6},end:{line:1314,column:7}},{start:{line:1312,column:6},end:{line:1314,column:7}}],line:1312},"241":{loc:{start:{line:1312,column:10},end:{line:1312,column:83}},type:"binary-expr",locations:[{start:{line:1312,column:10},end:{line:1312,column:15}},{start:{line:1312,column:19},end:{line:1312,column:33}},{start:{line:1312,column:37},end:{line:1312,column:83}}],line:1312},"242":{loc:{start:{line:1316,column:6},end:{line:1318,column:7}},type:"if",locations:[{start:{line:1316,column:6},end:{line:1318,column:7}},{start:{line:1316,column:6},end:{line:1318,column:7}}],line:1316},"243":{loc:{start:{line:1316,column:10},end:{line:1316,column:80}},type:"binary-expr",locations:[{start:{line:1316,column:10},end:{line:1316,column:15}},{start:{line:1316,column:19},end:{line:1316,column:33}},{start:{line:1316,column:37},end:{line:1316,column:80}}],line:1316},"244":{loc:{start:{line:1332,column:8},end:{line:1334,column:9}},type:"if",locations:[{start:{line:1332,column:8},end:{line:1334,column:9}},{start:{line:1332,column:8},end:{line:1334,column:9}}],line:1332},"245":{loc:{start:{line:1345,column:8},end:{line:1347,column:9}},type:"if",locations:[{start:{line:1345,column:8},end:{line:1347,column:9}},{start:{line:1345,column:8},end:{line:1347,column:9}}],line:1345},"246":{loc:{start:{line:1355,column:6},end:{line:1357,column:7}},type:"if",locations:[{start:{line:1355,column:6},end:{line:1357,column:7}},{start:{line:1355,column:6},end:{line:1357,column:7}}],line:1355},"247":{loc:{start:{line:1372,column:2},end:{line:1374,column:3}},type:"if",locations:[{start:{line:1372,column:2},end:{line:1374,column:3}},{start:{line:1372,column:2},end:{line:1374,column:3}}],line:1372},"248":{loc:{start:{line:1372,column:6},end:{line:1372,column:47}},type:"binary-expr",locations:[{start:{line:1372,column:6},end:{line:1372,column:20}},{start:{line:1372,column:24},end:{line:1372,column:47}}],line:1372},"249":{loc:{start:{line:1380,column:2},end:{line:1382,column:3}},type:"if",locations:[{start:{line:1380,column:2},end:{line:1382,column:3}},{start:{line:1380,column:2},end:{line:1382,column:3}}],line:1380},"250":{loc:{start:{line:1380,column:6},end:{line:1380,column:40}},type:"binary-expr",locations:[{start:{line:1380,column:6},end:{line:1380,column:23}},{start:{line:1380,column:27},end:{line:1380,column:40}}],line:1380},"251":{loc:{start:{line:1388,column:2},end:{line:1390,column:3}},type:"if",locations:[{start:{line:1388,column:2},end:{line:1390,column:3}},{start:{line:1388,column:2},end:{line:1390,column:3}}],line:1388},"252":{loc:{start:{line:1388,column:6},end:{line:1388,column:39}},type:"binary-expr",locations:[{start:{line:1388,column:6},end:{line:1388,column:16}},{start:{line:1388,column:20},end:{line:1388,column:39}}],line:1388},"253":{loc:{start:{line:1395,column:2},end:{line:1397,column:3}},type:"if",locations:[{start:{line:1395,column:2},end:{line:1397,column:3}},{start:{line:1395,column:2},end:{line:1397,column:3}}],line:1395},"254":{loc:{start:{line:1395,column:6},end:{line:1395,column:39}},type:"binary-expr",locations:[{start:{line:1395,column:6},end:{line:1395,column:16}},{start:{line:1395,column:20},end:{line:1395,column:39}}],line:1395},"255":{loc:{start:{line:1403,column:60},end:{line:1403,column:87}},type:"binary-expr",locations:[{start:{line:1403,column:60},end:{line:1403,column:80}},{start:{line:1403,column:84},end:{line:1403,column:87}}],line:1403},"256":{loc:{start:{line:1412,column:4},end:{line:1414,column:5}},type:"if",locations:[{start:{line:1412,column:4},end:{line:1414,column:5}},{start:{line:1412,column:4},end:{line:1414,column:5}}],line:1412},"257":{loc:{start:{line:1412,column:8},end:{line:1412,column:44}},type:"binary-expr",locations:[{start:{line:1412,column:8},end:{line:1412,column:14}},{start:{line:1412,column:18},end:{line:1412,column:44}}],line:1412},"258":{loc:{start:{line:1422,column:15},end:{line:1422,column:90}},type:"cond-expr",locations:[{start:{line:1422,column:44},end:{line:1422,column:53}},{start:{line:1422,column:56},end:{line:1422,column:90}}],line:1422},"259":{loc:{start:{line:1423,column:16},end:{line:1423,column:58}},type:"binary-expr",locations:[{start:{line:1423,column:16},end:{line:1423,column:33}},{start:{line:1423,column:37},end:{line:1423,column:58}}],line:1423},"260":{loc:{start:{line:1430,column:9},end:{line:1430,column:50}},type:"binary-expr",locations:[{start:{line:1430,column:9},end:{line:1430,column:27}},{start:{line:1430,column:31},end:{line:1430,column:50}}],line:1430},"261":{loc:{start:{line:1437,column:4},end:{line:1439,column:5}},type:"if",locations:[{start:{line:1437,column:4},end:{line:1439,column:5}},{start:{line:1437,column:4},end:{line:1439,column:5}}],line:1437},"262":{loc:{start:{line:1449,column:29},end:{line:1449,column:119}},type:"cond-expr",locations:[{start:{line:1449,column:72},end:{line:1449,column:114}},{start:{line:1449,column:117},end:{line:1449,column:119}}],line:1449},"263":{loc:{start:{line:1451,column:2},end:{line:1455,column:3}},type:"if",locations:[{start:{line:1451,column:2},end:{line:1455,column:3}},{start:{line:1451,column:2},end:{line:1455,column:3}}],line:1451},"264":{loc:{start:{line:1459,column:4},end:{line:1479,column:5}},type:"if",locations:[{start:{line:1459,column:4},end:{line:1479,column:5}},{start:{line:1459,column:4},end:{line:1479,column:5}}],line:1459},"265":{loc:{start:{line:1460,column:6},end:{line:1476,column:7}},type:"if",locations:[{start:{line:1460,column:6},end:{line:1476,column:7}},{start:{line:1460,column:6},end:{line:1476,column:7}}],line:1460},"266":{loc:{start:{line:1461,column:8},end:{line:1463,column:9}},type:"if",locations:[{start:{line:1461,column:8},end:{line:1463,column:9}},{start:{line:1461,column:8},end:{line:1463,column:9}}],line:1461},"267":{loc:{start:{line:1470,column:8},end:{line:1472,column:9}},type:"if",locations:[{start:{line:1470,column:8},end:{line:1472,column:9}},{start:{line:1470,column:8},end:{line:1472,column:9}}],line:1470},"268":{loc:{start:{line:1494,column:2},end:{line:1508,column:3}},type:"if",locations:[{start:{line:1494,column:2},end:{line:1508,column:3}},{start:{line:1494,column:2},end:{line:1508,column:3}}],line:1494},"269":{loc:{start:{line:1494,column:6},end:{line:1494,column:75}},type:"binary-expr",locations:[{start:{line:1494,column:6},end:{line:1494,column:19}},{start:{line:1494,column:23},end:{line:1494,column:45}},{start:{line:1494,column:49},end:{line:1494,column:75}}],line:1494},"270":{loc:{start:{line:1497,column:4},end:{line:1507,column:5}},type:"if",locations:[{start:{line:1497,column:4},end:{line:1507,column:5}},{start:{line:1497,column:4},end:{line:1507,column:5}}],line:1497},"271":{loc:{start:{line:1499,column:8},end:{line:1501,column:9}},type:"if",locations:[{start:{line:1499,column:8},end:{line:1501,column:9}},{start:{line:1499,column:8},end:{line:1501,column:9}}],line:1499},"272":{loc:{start:{line:1504,column:6},end:{line:1506,column:7}},type:"if",locations:[{start:{line:1504,column:6},end:{line:1506,column:7}},{start:{line:1504,column:6},end:{line:1506,column:7}}],line:1504},"273":{loc:{start:{line:1512,column:2},end:{line:1514,column:3}},type:"if",locations:[{start:{line:1512,column:2},end:{line:1514,column:3}},{start:{line:1512,column:2},end:{line:1514,column:3}}],line:1512},"274":{loc:{start:{line:1520,column:4},end:{line:1522,column:5}},type:"if",locations:[{start:{line:1520,column:4},end:{line:1522,column:5}},{start:{line:1520,column:4},end:{line:1522,column:5}}],line:1520},"275":{loc:{start:{line:1525,column:4},end:{line:1531,column:5}},type:"if",locations:[{start:{line:1525,column:4},end:{line:1531,column:5}},{start:{line:1525,column:4},end:{line:1531,column:5}}],line:1525},"276":{loc:{start:{line:1525,column:8},end:{line:1525,column:55}},type:"binary-expr",locations:[{start:{line:1525,column:8},end:{line:1525,column:27}},{start:{line:1525,column:31},end:{line:1525,column:55}}],line:1525},"277":{loc:{start:{line:1528,column:6},end:{line:1530,column:7}},type:"if",locations:[{start:{line:1528,column:6},end:{line:1530,column:7}},{start:{line:1528,column:6},end:{line:1530,column:7}}],line:1528},"278":{loc:{start:{line:1528,column:10},end:{line:1528,column:60}},type:"binary-expr",locations:[{start:{line:1528,column:10},end:{line:1528,column:30}},{start:{line:1528,column:34},end:{line:1528,column:60}}],line:1528}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":0,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":0,"458":0,"459":0,"460":0,"461":0,"462":0,"463":0,"464":0,"465":0,"466":0,"467":0,"468":0,"469":0,"470":0,"471":0,"472":0,"473":0,"474":0,"475":0,"476":0,"477":0,"478":0,"479":0,"480":0,"481":0,"482":0,"483":0,"484":0,"485":0,"486":0,"487":0,"488":0,"489":0,"490":0,"491":0,"492":0,"493":0,"494":0,"495":0,"496":0,"497":0,"498":0,"499":0,"500":0,"501":0,"502":0,"503":0,"504":0,"505":0,"506":0,"507":0,"508":0,"509":0,"510":0,"511":0,"512":0,"513":0,"514":0,"515":0,"516":0,"517":0,"518":0,"519":0,"520":0,"521":0,"522":0,"523":0,"524":0,"525":0,"526":0,"527":0,"528":0,"529":0,"530":0,"531":0,"532":0,"533":0,"534":0,"535":0,"536":0,"537":0,"538":0,"539":0,"540":0,"541":0,"542":0,"543":0,"544":0,"545":0,"546":0,"547":0,"548":0,"549":0,"550":0,"551":0,"552":0,"553":0,"554":0,"555":0,"556":0,"557":0,"558":0,"559":0,"560":0,"561":0,"562":0,"563":0,"564":0,"565":0,"566":0,"567":0,"568":0,"569":0,"570":0,"571":0,"572":0,"573":0,"574":0,"575":0,"576":0,"577":0,"578":0,"579":0,"580":0,"581":0,"582":0,"583":0,"584":0,"585":0,"586":0,"587":0,"588":0,"589":0,"590":0,"591":0,"592":0,"593":0,"594":0,"595":0,"596":0,"597":0,"598":0,"599":0,"600":0,"601":0,"602":0,"603":0,"604":0,"605":0,"606":0,"607":0,"608":0,"609":0,"610":0,"611":0,"612":0,"613":0,"614":0,"615":0,"616":0,"617":0,"618":0,"619":0,"620":0,"621":0,"622":0,"623":0,"624":0,"625":0,"626":0,"627":0,"628":0,"629":0,"630":0,"631":0,"632":0,"633":0,"634":0,"635":0,"636":0,"637":0,"638":0,"639":0,"640":0,"641":0,"642":0,"643":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0,0,0,0],"34":[0,0],"35":[0,0,0,0,0,0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0,0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0,0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0],"113":[0,0],"114":[0,0],"115":[0,0],"116":[0,0],"117":[0,0],"118":[0,0],"119":[0,0],"120":[0,0,0],"121":[0,0],"122":[0,0],"123":[0,0],"124":[0,0],"125":[0,0],"126":[0,0],"127":[0,0],"128":[0,0],"129":[0,0],"130":[0,0],"131":[0,0],"132":[0,0],"133":[0,0],"134":[0,0],"135":[0,0],"136":[0,0],"137":[0,0],"138":[0,0],"139":[0,0],"140":[0,0,0],"141":[0,0],"142":[0,0],"143":[0,0],"144":[0,0],"145":[0,0],"146":[0,0],"147":[0,0],"148":[0,0],"149":[0,0],"150":[0,0],"151":[0,0],"152":[0,0,0],"153":[0,0],"154":[0,0],"155":[0,0],"156":[0,0],"157":[0,0],"158":[0,0],"159":[0,0],"160":[0,0],"161":[0,0],"162":[0,0],"163":[0,0,0,0],"164":[0,0],"165":[0,0],"166":[0,0],"167":[0,0],"168":[0,0],"169":[0,0],"170":[0,0],"171":[0,0,0,0],"172":[0,0],"173":[0,0],"174":[0,0],"175":[0,0],"176":[0,0],"177":[0,0],"178":[0,0,0],"179":[0,0],"180":[0,0],"181":[0,0],"182":[0,0],"183":[0,0],"184":[0,0],"185":[0,0,0],"186":[0,0],"187":[0,0,0,0,0],"188":[0,0],"189":[0,0,0],"190":[0,0],"191":[0,0,0],"192":[0,0],"193":[0,0],"194":[0,0],"195":[0,0,0],"196":[0,0],"197":[0,0],"198":[0,0],"199":[0,0,0],"200":[0,0],"201":[0,0],"202":[0,0],"203":[0,0],"204":[0,0],"205":[0,0],"206":[0,0],"207":[0,0],"208":[0,0],"209":[0,0],"210":[0,0,0],"211":[0,0],"212":[0,0],"213":[0,0],"214":[0,0],"215":[0,0],"216":[0,0],"217":[0,0],"218":[0,0],"219":[0,0,0],"220":[0,0],"221":[0,0],"222":[0,0],"223":[0,0],"224":[0,0],"225":[0,0],"226":[0,0,0],"227":[0,0],"228":[0,0,0,0],"229":[0,0],"230":[0,0,0,0],"231":[0,0],"232":[0,0],"233":[0,0],"234":[0,0],"235":[0,0],"236":[0,0],"237":[0,0],"238":[0,0],"239":[0,0],"240":[0,0],"241":[0,0,0],"242":[0,0],"243":[0,0,0],"244":[0,0],"245":[0,0],"246":[0,0],"247":[0,0],"248":[0,0],"249":[0,0],"250":[0,0],"251":[0,0],"252":[0,0],"253":[0,0],"254":[0,0],"255":[0,0],"256":[0,0],"257":[0,0],"258":[0,0],"259":[0,0],"260":[0,0],"261":[0,0],"262":[0,0],"263":[0,0],"264":[0,0],"265":[0,0],"266":[0,0],"267":[0,0],"268":[0,0],"269":[0,0,0],"270":[0,0],"271":[0,0],"272":[0,0],"273":[0,0],"274":[0,0],"275":[0,0],"276":[0,0],"277":[0,0],"278":[0,0]},inputSourceMap:{version:3,sources:["../src/RestWrite.js"],names:["SchemaController","require","deepcopy","Auth","cryptoUtils","passwordCrypto","Parse","triggers","ClientSDK","RestWrite","config","auth","className","query","data","originalData","clientSDK","context","action","isReadOnly","Error","OPERATION_FORBIDDEN","storage","runOptions","allowCustomObjectId","Object","prototype","hasOwnProperty","call","objectId","MISSING_OBJECT_ID","INVALID_KEY_NAME","id","response","updatedAt","_encode","Date","iso","validSchemaController","execute","Promise","resolve","then","getUserAndRoleACL","validateClientClassCreation","handleInstallation","handleSession","validateAuthData","runBeforeSaveTrigger","deleteEmailResetTokenIfNeeded","validateSchema","schemaController","setRequiredFieldsIfNeeded","transformUser","expandFilesForExistingObjects","destroyDuplicatedSessions","runDatabaseOperation","createSessionTokenIfNeeded","handleFollowup","runAfterSaveTrigger","cleanUserAuthData","isMaster","acl","user","getUserRoles","roles","concat","allowClientClassCreation","systemClasses","indexOf","database","loadSchema","hasClass","validateObject","triggerExists","Types","beforeSave","applicationId","extraData","originalObject","updatedObject","buildUpdatedObject","inflate","databasePromise","update","create","result","length","OBJECT_NOT_FOUND","maybeRunTrigger","object","fieldsChangedByTrigger","_","reduce","value","key","isEqual","push","runBeforeLoginTrigger","userData","beforeLogin","filesController","expandFilesInObject","getAllClasses","allClasses","schema","find","oneClass","setRequiredFieldIfNeeded","fieldName","setDefault","undefined","__op","fields","defaultValue","required","VALIDATION_ERROR","createdAt","newObjectId","objectIdSize","keys","forEach","authData","username","isEmpty","USERNAME_MISSING","password","PASSWORD_MISSING","UNSUPPORTED_SERVICE","providers","canHandleAuthData","canHandle","provider","providerAuthData","hasToken","handleAuthData","handleAuthDataValidation","validations","map","authDataManager","getValidatorForProvider","all","findUsersWithAuthData","memo","queryKey","filter","q","findPromise","$or","filteredObjectsByACL","objects","ACL","results","r","join","userResult","mutatedAuthData","providerData","userAuthData","hasMutatedAuthData","userId","location","ACCOUNT_ALREADY_LINKED","promise","error","RestQuery","master","__type","session","cacheController","del","sessionToken","_validatePasswordPolicy","hash","hashedPassword","_hashed_password","_validateUserName","_validateEmail","randomString","responseShouldHaveUsername","$ne","limit","caseInsensitive","USERNAME_TAKEN","email","match","reject","INVALID_EMAIL_ADDRESS","EMAIL_TAKEN","userController","setEmailVerifyToken","passwordPolicy","_validatePasswordRequirements","_validatePasswordHistory","policyError","validationError","containsUsernameError","patternValidator","validatorCallback","doNotAllowUsername","maxPasswordHistory","oldPasswords","_password_history","take","newPassword","promises","compare","catch","err","preventLoginWithUnverifiedEmail","verifyUserEmails","createSessionToken","installationId","sessionData","createSession","createdWith","authProvider","additionalSessionData","token","newToken","expiresAt","generateSessionExpiresAt","assign","addOps","_perishable_token","_perishable_token_expires_at","destroy","revokeSessionOnPasswordReset","sessionQuery","bind","sendVerificationEmail","INVALID_SESSION_TOKEN","INTERNAL_SERVER_ERROR","status","deviceToken","toLowerCase","deviceType","idMatch","objectIdMatch","installationIdMatch","deviceTokenMatches","orQueries","delQuery","appIdentifier","code","objId","role","clear","isUnauthenticated","SESSION_MISSING","download","downloadName","name","INVALID_ACL","read","write","maxPasswordAge","_password_changed_at","defer","Math","max","shift","_updateResponseWithData","enforcePrivateUsers","DUPLICATE_VALUE","userInfo","duplicated_field","hasAfterSaveHook","afterSave","hasLiveQuery","liveQueryController","_handleSaveResponse","perms","getClassLevelPermissions","onAfterSave","logger","warn","middle","mount","serverURL","sanitizedData","test","_decode","fromJSON","readOnlyAttributes","constructor","attribute","includes","set","splittedKey","split","parentProp","parentVal","get","sanitized","clientSupportsDelete","supportsForwardDelete","dataValue","module","exports"],mappings:"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",sourcesContent:["// A RestWrite encapsulates everything we need to run an operation\n// that writes to the database.\n// This could be either a \"create\" or an \"update\".\n\nvar SchemaController = require('./Controllers/SchemaController');\nvar deepcopy = require('deepcopy');\n\nconst Auth = require('./Auth');\nvar cryptoUtils = require('./cryptoUtils');\nvar passwordCrypto = require('./password');\nvar Parse = require('parse/node');\nvar triggers = require('./triggers');\nvar ClientSDK = require('./ClientSDK');\nimport RestQuery from './RestQuery';\nimport _ from 'lodash';\nimport logger from './logger';\n\n// query and data are both provided in REST API format. So data\n// types are encoded by plain old objects.\n// If query is null, this is a \"create\" and the data in data should be\n// created.\n// Otherwise this is an \"update\" - the object matching the query\n// should get updated with data.\n// RestWrite will handle objectId, createdAt, and updatedAt for\n// everything. It also knows to use triggers and special modifications\n// for the _User class.\nfunction RestWrite(config, auth, className, query, data, originalData, clientSDK, context, action) {\n  if (auth.isReadOnly) {\n    throw new Parse.Error(\n      Parse.Error.OPERATION_FORBIDDEN,\n      'Cannot perform a write operation when using readOnlyMasterKey'\n    );\n  }\n  this.config = config;\n  this.auth = auth;\n  this.className = className;\n  this.clientSDK = clientSDK;\n  this.storage = {};\n  this.runOptions = {};\n  this.context = context || {};\n\n  if (action) {\n    this.runOptions.action = action;\n  }\n\n  if (!query) {\n    if (this.config.allowCustomObjectId) {\n      if (Object.prototype.hasOwnProperty.call(data, 'objectId') && !data.objectId) {\n        throw new Parse.Error(\n          Parse.Error.MISSING_OBJECT_ID,\n          'objectId must not be empty, null or undefined'\n        );\n      }\n    } else {\n      if (data.objectId) {\n        throw new Parse.Error(Parse.Error.INVALID_KEY_NAME, 'objectId is an invalid field name.');\n      }\n      if (data.id) {\n        throw new Parse.Error(Parse.Error.INVALID_KEY_NAME, 'id is an invalid field name.');\n      }\n    }\n  }\n\n  // When the operation is complete, this.response may have several\n  // fields.\n  // response: the actual data to be returned\n  // status: the http status code. if not present, treated like a 200\n  // location: the location header. if not present, no location header\n  this.response = null;\n\n  // Processing this operation may mutate our data, so we operate on a\n  // copy\n  this.query = deepcopy(query);\n  this.data = deepcopy(data);\n  // We never change originalData, so we do not need a deep copy\n  this.originalData = originalData;\n\n  // The timestamp we'll use for this whole operation\n  this.updatedAt = Parse._encode(new Date()).iso;\n\n  // Shared SchemaController to be reused to reduce the number of loadSchema() calls per request\n  // Once set the schemaData should be immutable\n  this.validSchemaController = null;\n}\n\n// A convenient method to perform all the steps of processing the\n// write, in order.\n// Returns a promise for a {response, status, location} object.\n// status and location are optional.\nRestWrite.prototype.execute = function () {\n  return Promise.resolve()\n    .then(() => {\n      return this.getUserAndRoleACL();\n    })\n    .then(() => {\n      return this.validateClientClassCreation();\n    })\n    .then(() => {\n      return this.handleInstallation();\n    })\n    .then(() => {\n      return this.handleSession();\n    })\n    .then(() => {\n      return this.validateAuthData();\n    })\n    .then(() => {\n      return this.runBeforeSaveTrigger();\n    })\n    .then(() => {\n      return this.deleteEmailResetTokenIfNeeded();\n    })\n    .then(() => {\n      return this.validateSchema();\n    })\n    .then(schemaController => {\n      this.validSchemaController = schemaController;\n      return this.setRequiredFieldsIfNeeded();\n    })\n    .then(() => {\n      return this.transformUser();\n    })\n    .then(() => {\n      return this.expandFilesForExistingObjects();\n    })\n    .then(() => {\n      return this.destroyDuplicatedSessions();\n    })\n    .then(() => {\n      return this.runDatabaseOperation();\n    })\n    .then(() => {\n      return this.createSessionTokenIfNeeded();\n    })\n    .then(() => {\n      return this.handleFollowup();\n    })\n    .then(() => {\n      return this.runAfterSaveTrigger();\n    })\n    .then(() => {\n      return this.cleanUserAuthData();\n    })\n    .then(() => {\n      return this.response;\n    });\n};\n\n// Uses the Auth object to get the list of roles, adds the user id\nRestWrite.prototype.getUserAndRoleACL = function () {\n  if (this.auth.isMaster) {\n    return Promise.resolve();\n  }\n\n  this.runOptions.acl = ['*'];\n\n  if (this.auth.user) {\n    return this.auth.getUserRoles().then(roles => {\n      this.runOptions.acl = this.runOptions.acl.concat(roles, [this.auth.user.id]);\n      return;\n    });\n  } else {\n    return Promise.resolve();\n  }\n};\n\n// Validates this operation against the allowClientClassCreation config.\nRestWrite.prototype.validateClientClassCreation = function () {\n  if (\n    this.config.allowClientClassCreation === false &&\n    !this.auth.isMaster &&\n    SchemaController.systemClasses.indexOf(this.className) === -1\n  ) {\n    return this.config.database\n      .loadSchema()\n      .then(schemaController => schemaController.hasClass(this.className))\n      .then(hasClass => {\n        if (hasClass !== true) {\n          throw new Parse.Error(\n            Parse.Error.OPERATION_FORBIDDEN,\n            'This user is not allowed to access ' + 'non-existent class: ' + this.className\n          );\n        }\n      });\n  } else {\n    return Promise.resolve();\n  }\n};\n\n// Validates this operation against the schema.\nRestWrite.prototype.validateSchema = function () {\n  return this.config.database.validateObject(\n    this.className,\n    this.data,\n    this.query,\n    this.runOptions\n  );\n};\n\n// Runs any beforeSave triggers against this operation.\n// Any change leads to our data being mutated.\nRestWrite.prototype.runBeforeSaveTrigger = function () {\n  if (this.response) {\n    return;\n  }\n\n  // Avoid doing any setup for triggers if there is no 'beforeSave' trigger for this class.\n  if (\n    !triggers.triggerExists(this.className, triggers.Types.beforeSave, this.config.applicationId)\n  ) {\n    return Promise.resolve();\n  }\n\n  // Cloud code gets a bit of extra data for its objects\n  var extraData = { className: this.className };\n  if (this.query && this.query.objectId) {\n    extraData.objectId = this.query.objectId;\n  }\n\n  let originalObject = null;\n  const updatedObject = this.buildUpdatedObject(extraData);\n  if (this.query && this.query.objectId) {\n    // This is an update for existing object.\n    originalObject = triggers.inflate(extraData, this.originalData);\n  }\n\n  return Promise.resolve()\n    .then(() => {\n      // Before calling the trigger, validate the permissions for the save operation\n      let databasePromise = null;\n      if (this.query) {\n        // Validate for updating\n        databasePromise = this.config.database.update(\n          this.className,\n          this.query,\n          this.data,\n          this.runOptions,\n          true,\n          true\n        );\n      } else {\n        // Validate for creating\n        databasePromise = this.config.database.create(\n          this.className,\n          this.data,\n          this.runOptions,\n          true\n        );\n      }\n      // In the case that there is no permission for the operation, it throws an error\n      return databasePromise.then(result => {\n        if (!result || result.length <= 0) {\n          throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Object not found.');\n        }\n      });\n    })\n    .then(() => {\n      return triggers.maybeRunTrigger(\n        triggers.Types.beforeSave,\n        this.auth,\n        updatedObject,\n        originalObject,\n        this.config,\n        this.context\n      );\n    })\n    .then(response => {\n      if (response && response.object) {\n        this.storage.fieldsChangedByTrigger = _.reduce(\n          response.object,\n          (result, value, key) => {\n            if (!_.isEqual(this.data[key], value)) {\n              result.push(key);\n            }\n            return result;\n          },\n          []\n        );\n        this.data = response.object;\n        // We should delete the objectId for an update write\n        if (this.query && this.query.objectId) {\n          delete this.data.objectId;\n        }\n      }\n    });\n};\n\nRestWrite.prototype.runBeforeLoginTrigger = async function (userData) {\n  // Avoid doing any setup for triggers if there is no 'beforeLogin' trigger\n  if (\n    !triggers.triggerExists(this.className, triggers.Types.beforeLogin, this.config.applicationId)\n  ) {\n    return;\n  }\n\n  // Cloud code gets a bit of extra data for its objects\n  const extraData = { className: this.className };\n\n  // Expand file objects\n  this.config.filesController.expandFilesInObject(this.config, userData);\n\n  const user = triggers.inflate(extraData, userData);\n\n  // no need to return a response\n  await triggers.maybeRunTrigger(\n    triggers.Types.beforeLogin,\n    this.auth,\n    user,\n    null,\n    this.config,\n    this.context\n  );\n};\n\nRestWrite.prototype.setRequiredFieldsIfNeeded = function () {\n  if (this.data) {\n    return this.validSchemaController.getAllClasses().then(allClasses => {\n      const schema = allClasses.find(oneClass => oneClass.className === this.className);\n      const setRequiredFieldIfNeeded = (fieldName, setDefault) => {\n        if (\n          this.data[fieldName] === undefined ||\n          this.data[fieldName] === null ||\n          this.data[fieldName] === '' ||\n          (typeof this.data[fieldName] === 'object' && this.data[fieldName].__op === 'Delete')\n        ) {\n          if (\n            setDefault &&\n            schema.fields[fieldName] &&\n            schema.fields[fieldName].defaultValue !== null &&\n            schema.fields[fieldName].defaultValue !== undefined &&\n            (this.data[fieldName] === undefined ||\n              (typeof this.data[fieldName] === 'object' && this.data[fieldName].__op === 'Delete'))\n          ) {\n            this.data[fieldName] = schema.fields[fieldName].defaultValue;\n            this.storage.fieldsChangedByTrigger = this.storage.fieldsChangedByTrigger || [];\n            if (this.storage.fieldsChangedByTrigger.indexOf(fieldName) < 0) {\n              this.storage.fieldsChangedByTrigger.push(fieldName);\n            }\n          } else if (schema.fields[fieldName] && schema.fields[fieldName].required === true) {\n            throw new Parse.Error(Parse.Error.VALIDATION_ERROR, `${fieldName} is required`);\n          }\n        }\n      };\n\n      // Add default fields\n      this.data.updatedAt = this.updatedAt;\n      if (!this.query) {\n        this.data.createdAt = this.updatedAt;\n\n        // Only assign new objectId if we are creating new object\n        if (!this.data.objectId) {\n          this.data.objectId = cryptoUtils.newObjectId(this.config.objectIdSize);\n        }\n        if (schema) {\n          Object.keys(schema.fields).forEach(fieldName => {\n            setRequiredFieldIfNeeded(fieldName, true);\n          });\n        }\n      } else if (schema) {\n        Object.keys(this.data).forEach(fieldName => {\n          setRequiredFieldIfNeeded(fieldName, false);\n        });\n      }\n    });\n  }\n  return Promise.resolve();\n};\n\n// Transforms auth data for a user object.\n// Does nothing if this isn't a user object.\n// Returns a promise for when we're done if it can't finish this tick.\nRestWrite.prototype.validateAuthData = function () {\n  if (this.className !== '_User') {\n    return;\n  }\n\n  if (!this.query && !this.data.authData) {\n    if (typeof this.data.username !== 'string' || _.isEmpty(this.data.username)) {\n      throw new Parse.Error(Parse.Error.USERNAME_MISSING, 'bad or missing username');\n    }\n    if (typeof this.data.password !== 'string' || _.isEmpty(this.data.password)) {\n      throw new Parse.Error(Parse.Error.PASSWORD_MISSING, 'password is required');\n    }\n  }\n\n  if (\n    (this.data.authData && !Object.keys(this.data.authData).length) ||\n    !Object.prototype.hasOwnProperty.call(this.data, 'authData')\n  ) {\n    // Handle saving authData to {} or if authData doesn't exist\n    return;\n  } else if (Object.prototype.hasOwnProperty.call(this.data, 'authData') && !this.data.authData) {\n    // Handle saving authData to null\n    throw new Parse.Error(\n      Parse.Error.UNSUPPORTED_SERVICE,\n      'This authentication method is unsupported.'\n    );\n  }\n\n  var authData = this.data.authData;\n  var providers = Object.keys(authData);\n  if (providers.length > 0) {\n    const canHandleAuthData = providers.reduce((canHandle, provider) => {\n      var providerAuthData = authData[provider];\n      var hasToken = providerAuthData && providerAuthData.id;\n      return canHandle && (hasToken || providerAuthData == null);\n    }, true);\n    if (canHandleAuthData) {\n      return this.handleAuthData(authData);\n    }\n  }\n  throw new Parse.Error(\n    Parse.Error.UNSUPPORTED_SERVICE,\n    'This authentication method is unsupported.'\n  );\n};\n\nRestWrite.prototype.handleAuthDataValidation = function (authData) {\n  const validations = Object.keys(authData).map(provider => {\n    if (authData[provider] === null) {\n      return Promise.resolve();\n    }\n    const validateAuthData = this.config.authDataManager.getValidatorForProvider(provider);\n    if (!validateAuthData) {\n      throw new Parse.Error(\n        Parse.Error.UNSUPPORTED_SERVICE,\n        'This authentication method is unsupported.'\n      );\n    }\n    return validateAuthData(authData[provider]);\n  });\n  return Promise.all(validations);\n};\n\nRestWrite.prototype.findUsersWithAuthData = function (authData) {\n  const providers = Object.keys(authData);\n  const query = providers\n    .reduce((memo, provider) => {\n      if (!authData[provider]) {\n        return memo;\n      }\n      const queryKey = `authData.${provider}.id`;\n      const query = {};\n      query[queryKey] = authData[provider].id;\n      memo.push(query);\n      return memo;\n    }, [])\n    .filter(q => {\n      return typeof q !== 'undefined';\n    });\n\n  let findPromise = Promise.resolve([]);\n  if (query.length > 0) {\n    findPromise = this.config.database.find(this.className, { $or: query }, {});\n  }\n\n  return findPromise;\n};\n\nRestWrite.prototype.filteredObjectsByACL = function (objects) {\n  if (this.auth.isMaster) {\n    return objects;\n  }\n  return objects.filter(object => {\n    if (!object.ACL) {\n      return true; // legacy users that have no ACL field on them\n    }\n    // Regular users that have been locked out.\n    return object.ACL && Object.keys(object.ACL).length > 0;\n  });\n};\n\nRestWrite.prototype.handleAuthData = function (authData) {\n  let results;\n  return this.findUsersWithAuthData(authData).then(async r => {\n    results = this.filteredObjectsByACL(r);\n\n    if (results.length == 1) {\n      this.storage['authProvider'] = Object.keys(authData).join(',');\n\n      const userResult = results[0];\n      const mutatedAuthData = {};\n      Object.keys(authData).forEach(provider => {\n        const providerData = authData[provider];\n        const userAuthData = userResult.authData[provider];\n        if (!_.isEqual(providerData, userAuthData)) {\n          mutatedAuthData[provider] = providerData;\n        }\n      });\n      const hasMutatedAuthData = Object.keys(mutatedAuthData).length !== 0;\n      let userId;\n      if (this.query && this.query.objectId) {\n        userId = this.query.objectId;\n      } else if (this.auth && this.auth.user && this.auth.user.id) {\n        userId = this.auth.user.id;\n      }\n      if (!userId || userId === userResult.objectId) {\n        // no user making the call\n        // OR the user making the call is the right one\n        // Login with auth data\n        delete results[0].password;\n\n        // need to set the objectId first otherwise location has trailing undefined\n        this.data.objectId = userResult.objectId;\n\n        if (!this.query || !this.query.objectId) {\n          // this a login call, no userId passed\n          this.response = {\n            response: userResult,\n            location: this.location(),\n          };\n          // Run beforeLogin hook before storing any updates\n          // to authData on the db; changes to userResult\n          // will be ignored.\n          await this.runBeforeLoginTrigger(deepcopy(userResult));\n        }\n\n        // If we didn't change the auth data, just keep going\n        if (!hasMutatedAuthData) {\n          return;\n        }\n        // We have authData that is updated on login\n        // that can happen when token are refreshed,\n        // We should update the token and let the user in\n        // We should only check the mutated keys\n        return this.handleAuthDataValidation(mutatedAuthData).then(async () => {\n          // IF we have a response, we'll skip the database operation / beforeSave / afterSave etc...\n          // we need to set it up there.\n          // We are supposed to have a response only on LOGIN with authData, so we skip those\n          // If we're not logging in, but just updating the current user, we can safely skip that part\n          if (this.response) {\n            // Assign the new authData in the response\n            Object.keys(mutatedAuthData).forEach(provider => {\n              this.response.response.authData[provider] = mutatedAuthData[provider];\n            });\n\n            // Run the DB update directly, as 'master'\n            // Just update the authData part\n            // Then we're good for the user, early exit of sorts\n            return this.config.database.update(\n              this.className,\n              { objectId: this.data.objectId },\n              { authData: mutatedAuthData },\n              {}\n            );\n          }\n        });\n      } else if (userId) {\n        // Trying to update auth data but users\n        // are different\n        if (userResult.objectId !== userId) {\n          throw new Parse.Error(Parse.Error.ACCOUNT_ALREADY_LINKED, 'this auth is already used');\n        }\n        // No auth data was mutated, just keep going\n        if (!hasMutatedAuthData) {\n          return;\n        }\n      }\n    }\n    return this.handleAuthDataValidation(authData).then(() => {\n      if (results.length > 1) {\n        // More than 1 user with the passed id's\n        throw new Parse.Error(Parse.Error.ACCOUNT_ALREADY_LINKED, 'this auth is already used');\n      }\n    });\n  });\n};\n\n// The non-third-party parts of User transformation\nRestWrite.prototype.transformUser = function () {\n  var promise = Promise.resolve();\n\n  if (this.className !== '_User') {\n    return promise;\n  }\n\n  if (!this.auth.isMaster && 'emailVerified' in this.data) {\n    const error = `Clients aren't allowed to manually update email verification.`;\n    throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);\n  }\n\n  // Do not cleanup session if objectId is not set\n  if (this.query && this.objectId()) {\n    // If we're updating a _User object, we need to clear out the cache for that user. Find all their\n    // session tokens, and remove them from the cache.\n    promise = new RestQuery(this.config, Auth.master(this.config), '_Session', {\n      user: {\n        __type: 'Pointer',\n        className: '_User',\n        objectId: this.objectId(),\n      },\n    })\n      .execute()\n      .then(results => {\n        results.results.forEach(session =>\n          this.config.cacheController.user.del(session.sessionToken)\n        );\n      });\n  }\n\n  return promise\n    .then(() => {\n      // Transform the password\n      if (this.data.password === undefined) {\n        // ignore only if undefined. should proceed if empty ('')\n        return Promise.resolve();\n      }\n\n      if (this.query) {\n        this.storage['clearSessions'] = true;\n        // Generate a new session only if the user requested\n        if (!this.auth.isMaster) {\n          this.storage['generateNewSession'] = true;\n        }\n      }\n\n      return this._validatePasswordPolicy().then(() => {\n        return passwordCrypto.hash(this.data.password).then(hashedPassword => {\n          this.data._hashed_password = hashedPassword;\n          delete this.data.password;\n        });\n      });\n    })\n    .then(() => {\n      return this._validateUserName();\n    })\n    .then(() => {\n      return this._validateEmail();\n    });\n};\n\nRestWrite.prototype._validateUserName = function () {\n  // Check for username uniqueness\n  if (!this.data.username) {\n    if (!this.query) {\n      this.data.username = cryptoUtils.randomString(25);\n      this.responseShouldHaveUsername = true;\n    }\n    return Promise.resolve();\n  }\n  /*\n    Usernames should be unique when compared case insensitively\n\n    Users should be able to make case sensitive usernames and\n    login using the case they entered.  I.e. 'Snoopy' should preclude\n    'snoopy' as a valid username.\n  */\n  return this.config.database\n    .find(\n      this.className,\n      {\n        username: this.data.username,\n        objectId: { $ne: this.objectId() },\n      },\n      { limit: 1, caseInsensitive: true },\n      {},\n      this.validSchemaController\n    )\n    .then(results => {\n      if (results.length > 0) {\n        throw new Parse.Error(\n          Parse.Error.USERNAME_TAKEN,\n          'Account already exists for this username.'\n        );\n      }\n      return;\n    });\n};\n\n/*\n  As with usernames, Parse should not allow case insensitive collisions of email.\n  unlike with usernames (which can have case insensitive collisions in the case of\n  auth adapters), emails should never have a case insensitive collision.\n\n  This behavior can be enforced through a properly configured index see:\n  https://docs.mongodb.com/manual/core/index-case-insensitive/#create-a-case-insensitive-index\n  which could be implemented instead of this code based validation.\n\n  Given that this lookup should be a relatively low use case and that the case sensitive\n  unique index will be used by the db for the query, this is an adequate solution.\n*/\nRestWrite.prototype._validateEmail = function () {\n  if (!this.data.email || this.data.email.__op === 'Delete') {\n    return Promise.resolve();\n  }\n  // Validate basic email address format\n  if (!this.data.email.match(/^.+@.+$/)) {\n    return Promise.reject(\n      new Parse.Error(Parse.Error.INVALID_EMAIL_ADDRESS, 'Email address format is invalid.')\n    );\n  }\n  // Case insensitive match, see note above function.\n  return this.config.database\n    .find(\n      this.className,\n      {\n        email: this.data.email,\n        objectId: { $ne: this.objectId() },\n      },\n      { limit: 1, caseInsensitive: true },\n      {},\n      this.validSchemaController\n    )\n    .then(results => {\n      if (results.length > 0) {\n        throw new Parse.Error(\n          Parse.Error.EMAIL_TAKEN,\n          'Account already exists for this email address.'\n        );\n      }\n      if (\n        !this.data.authData ||\n        !Object.keys(this.data.authData).length ||\n        (Object.keys(this.data.authData).length === 1 &&\n          Object.keys(this.data.authData)[0] === 'anonymous')\n      ) {\n        // We updated the email, send a new validation\n        this.storage['sendVerificationEmail'] = true;\n        this.config.userController.setEmailVerifyToken(this.data);\n      }\n    });\n};\n\nRestWrite.prototype._validatePasswordPolicy = function () {\n  if (!this.config.passwordPolicy) return Promise.resolve();\n  return this._validatePasswordRequirements().then(() => {\n    return this._validatePasswordHistory();\n  });\n};\n\nRestWrite.prototype._validatePasswordRequirements = function () {\n  // check if the password conforms to the defined password policy if configured\n  // If we specified a custom error in our configuration use it.\n  // Example: \"Passwords must include a Capital Letter, Lowercase Letter, and a number.\"\n  //\n  // This is especially useful on the generic \"password reset\" page,\n  // as it allows the programmer to communicate specific requirements instead of:\n  // a. making the user guess whats wrong\n  // b. making a custom password reset page that shows the requirements\n  const policyError = this.config.passwordPolicy.validationError\n    ? this.config.passwordPolicy.validationError\n    : 'Password does not meet the Password Policy requirements.';\n  const containsUsernameError = 'Password cannot contain your username.';\n\n  // check whether the password meets the password strength requirements\n  if (\n    (this.config.passwordPolicy.patternValidator &&\n      !this.config.passwordPolicy.patternValidator(this.data.password)) ||\n    (this.config.passwordPolicy.validatorCallback &&\n      !this.config.passwordPolicy.validatorCallback(this.data.password))\n  ) {\n    return Promise.reject(new Parse.Error(Parse.Error.VALIDATION_ERROR, policyError));\n  }\n\n  // check whether password contain username\n  if (this.config.passwordPolicy.doNotAllowUsername === true) {\n    if (this.data.username) {\n      // username is not passed during password reset\n      if (this.data.password.indexOf(this.data.username) >= 0)\n        return Promise.reject(new Parse.Error(Parse.Error.VALIDATION_ERROR, containsUsernameError));\n    } else {\n      // retrieve the User object using objectId during password reset\n      return this.config.database.find('_User', { objectId: this.objectId() }).then(results => {\n        if (results.length != 1) {\n          throw undefined;\n        }\n        if (this.data.password.indexOf(results[0].username) >= 0)\n          return Promise.reject(\n            new Parse.Error(Parse.Error.VALIDATION_ERROR, containsUsernameError)\n          );\n        return Promise.resolve();\n      });\n    }\n  }\n  return Promise.resolve();\n};\n\nRestWrite.prototype._validatePasswordHistory = function () {\n  // check whether password is repeating from specified history\n  if (this.query && this.config.passwordPolicy.maxPasswordHistory) {\n    return this.config.database\n      .find(\n        '_User',\n        { objectId: this.objectId() },\n        { keys: ['_password_history', '_hashed_password'] }\n      )\n      .then(results => {\n        if (results.length != 1) {\n          throw undefined;\n        }\n        const user = results[0];\n        let oldPasswords = [];\n        if (user._password_history)\n          oldPasswords = _.take(\n            user._password_history,\n            this.config.passwordPolicy.maxPasswordHistory - 1\n          );\n        oldPasswords.push(user.password);\n        const newPassword = this.data.password;\n        // compare the new password hash with all old password hashes\n        const promises = oldPasswords.map(function (hash) {\n          return passwordCrypto.compare(newPassword, hash).then(result => {\n            if (result)\n              // reject if there is a match\n              return Promise.reject('REPEAT_PASSWORD');\n            return Promise.resolve();\n          });\n        });\n        // wait for all comparisons to complete\n        return Promise.all(promises)\n          .then(() => {\n            return Promise.resolve();\n          })\n          .catch(err => {\n            if (err === 'REPEAT_PASSWORD')\n              // a match was found\n              return Promise.reject(\n                new Parse.Error(\n                  Parse.Error.VALIDATION_ERROR,\n                  `New password should not be the same as last ${this.config.passwordPolicy.maxPasswordHistory} passwords.`\n                )\n              );\n            throw err;\n          });\n      });\n  }\n  return Promise.resolve();\n};\n\nRestWrite.prototype.createSessionTokenIfNeeded = function () {\n  if (this.className !== '_User') {\n    return;\n  }\n  // Don't generate session for updating user (this.query is set) unless authData exists\n  if (this.query && !this.data.authData) {\n    return;\n  }\n  // Don't generate new sessionToken if linking via sessionToken\n  if (this.auth.user && this.data.authData) {\n    return;\n  }\n  if (\n    !this.storage['authProvider'] && // signup call, with\n    this.config.preventLoginWithUnverifiedEmail && // no login without verification\n    this.config.verifyUserEmails\n  ) {\n    // verification is on\n    return; // do not create the session token in that case!\n  }\n  return this.createSessionToken();\n};\n\nRestWrite.prototype.createSessionToken = async function () {\n  // cloud installationId from Cloud Code,\n  // never create session tokens from there.\n  if (this.auth.installationId && this.auth.installationId === 'cloud') {\n    return;\n  }\n\n  if (this.storage['authProvider'] == null && this.data.authData) {\n    this.storage['authProvider'] = Object.keys(this.data.authData).join(',');\n  }\n\n  const { sessionData, createSession } = RestWrite.createSession(this.config, {\n    userId: this.objectId(),\n    createdWith: {\n      action: this.storage['authProvider'] ? 'login' : 'signup',\n      authProvider: this.storage['authProvider'] || 'password',\n    },\n    installationId: this.auth.installationId,\n  });\n\n  if (this.response && this.response.response) {\n    this.response.response.sessionToken = sessionData.sessionToken;\n  }\n\n  return createSession();\n};\n\nRestWrite.createSession = function (\n  config,\n  { userId, createdWith, installationId, additionalSessionData }\n) {\n  const token = 'r:' + cryptoUtils.newToken();\n  const expiresAt = config.generateSessionExpiresAt();\n  const sessionData = {\n    sessionToken: token,\n    user: {\n      __type: 'Pointer',\n      className: '_User',\n      objectId: userId,\n    },\n    createdWith,\n    expiresAt: Parse._encode(expiresAt),\n  };\n\n  if (installationId) {\n    sessionData.installationId = installationId;\n  }\n\n  Object.assign(sessionData, additionalSessionData);\n\n  return {\n    sessionData,\n    createSession: () =>\n      new RestWrite(config, Auth.master(config), '_Session', null, sessionData).execute(),\n  };\n};\n\n// Delete email reset tokens if user is changing password or email.\nRestWrite.prototype.deleteEmailResetTokenIfNeeded = function () {\n  if (this.className !== '_User' || this.query === null) {\n    // null query means create\n    return;\n  }\n\n  if ('password' in this.data || 'email' in this.data) {\n    const addOps = {\n      _perishable_token: { __op: 'Delete' },\n      _perishable_token_expires_at: { __op: 'Delete' },\n    };\n    this.data = Object.assign(this.data, addOps);\n  }\n};\n\nRestWrite.prototype.destroyDuplicatedSessions = function () {\n  // Only for _Session, and at creation time\n  if (this.className != '_Session' || this.query) {\n    return;\n  }\n  // Destroy the sessions in 'Background'\n  const { user, installationId, sessionToken } = this.data;\n  if (!user || !installationId) {\n    return;\n  }\n  if (!user.objectId) {\n    return;\n  }\n  this.config.database.destroy(\n    '_Session',\n    {\n      user,\n      installationId,\n      sessionToken: { $ne: sessionToken },\n    },\n    {},\n    this.validSchemaController\n  );\n};\n\n// Handles any followup logic\nRestWrite.prototype.handleFollowup = function () {\n  if (this.storage && this.storage['clearSessions'] && this.config.revokeSessionOnPasswordReset) {\n    var sessionQuery = {\n      user: {\n        __type: 'Pointer',\n        className: '_User',\n        objectId: this.objectId(),\n      },\n    };\n    delete this.storage['clearSessions'];\n    return this.config.database\n      .destroy('_Session', sessionQuery)\n      .then(this.handleFollowup.bind(this));\n  }\n\n  if (this.storage && this.storage['generateNewSession']) {\n    delete this.storage['generateNewSession'];\n    return this.createSessionToken().then(this.handleFollowup.bind(this));\n  }\n\n  if (this.storage && this.storage['sendVerificationEmail']) {\n    delete this.storage['sendVerificationEmail'];\n    // Fire and forget!\n    this.config.userController.sendVerificationEmail(this.data);\n    return this.handleFollowup.bind(this);\n  }\n};\n\n// Handles the _Session class specialness.\n// Does nothing if this isn't an _Session object.\nRestWrite.prototype.handleSession = function () {\n  if (this.response || this.className !== '_Session') {\n    return;\n  }\n\n  if (!this.auth.user && !this.auth.isMaster) {\n    throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Session token required.');\n  }\n\n  // TODO: Verify proper error to throw\n  if (this.data.ACL) {\n    throw new Parse.Error(Parse.Error.INVALID_KEY_NAME, 'Cannot set ' + 'ACL on a Session.');\n  }\n\n  if (this.query) {\n    if (this.data.user && !this.auth.isMaster && this.data.user.objectId != this.auth.user.id) {\n      throw new Parse.Error(Parse.Error.INVALID_KEY_NAME);\n    } else if (this.data.installationId) {\n      throw new Parse.Error(Parse.Error.INVALID_KEY_NAME);\n    } else if (this.data.sessionToken) {\n      throw new Parse.Error(Parse.Error.INVALID_KEY_NAME);\n    }\n  }\n\n  if (!this.query && !this.auth.isMaster) {\n    const additionalSessionData = {};\n    for (var key in this.data) {\n      if (key === 'objectId' || key === 'user') {\n        continue;\n      }\n      additionalSessionData[key] = this.data[key];\n    }\n\n    const { sessionData, createSession } = RestWrite.createSession(this.config, {\n      userId: this.auth.user.id,\n      createdWith: {\n        action: 'create',\n      },\n      additionalSessionData,\n    });\n\n    return createSession().then(results => {\n      if (!results.response) {\n        throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR, 'Error creating session.');\n      }\n      sessionData['objectId'] = results.response['objectId'];\n      this.response = {\n        status: 201,\n        location: results.location,\n        response: sessionData,\n      };\n    });\n  }\n};\n\n// Handles the _Installation class specialness.\n// Does nothing if this isn't an installation object.\n// If an installation is found, this can mutate this.query and turn a create\n// into an update.\n// Returns a promise for when we're done if it can't finish this tick.\nRestWrite.prototype.handleInstallation = function () {\n  if (this.response || this.className !== '_Installation') {\n    return;\n  }\n\n  if (\n    !this.query &&\n    !this.data.deviceToken &&\n    !this.data.installationId &&\n    !this.auth.installationId\n  ) {\n    throw new Parse.Error(\n      135,\n      'at least one ID field (deviceToken, installationId) ' + 'must be specified in this operation'\n    );\n  }\n\n  // If the device token is 64 characters long, we assume it is for iOS\n  // and lowercase it.\n  if (this.data.deviceToken && this.data.deviceToken.length == 64) {\n    this.data.deviceToken = this.data.deviceToken.toLowerCase();\n  }\n\n  // We lowercase the installationId if present\n  if (this.data.installationId) {\n    this.data.installationId = this.data.installationId.toLowerCase();\n  }\n\n  let installationId = this.data.installationId;\n\n  // If data.installationId is not set and we're not master, we can lookup in auth\n  if (!installationId && !this.auth.isMaster) {\n    installationId = this.auth.installationId;\n  }\n\n  if (installationId) {\n    installationId = installationId.toLowerCase();\n  }\n\n  // Updating _Installation but not updating anything critical\n  if (this.query && !this.data.deviceToken && !installationId && !this.data.deviceType) {\n    return;\n  }\n\n  var promise = Promise.resolve();\n\n  var idMatch; // Will be a match on either objectId or installationId\n  var objectIdMatch;\n  var installationIdMatch;\n  var deviceTokenMatches = [];\n\n  // Instead of issuing 3 reads, let's do it with one OR.\n  const orQueries = [];\n  if (this.query && this.query.objectId) {\n    orQueries.push({\n      objectId: this.query.objectId,\n    });\n  }\n  if (installationId) {\n    orQueries.push({\n      installationId: installationId,\n    });\n  }\n  if (this.data.deviceToken) {\n    orQueries.push({ deviceToken: this.data.deviceToken });\n  }\n\n  if (orQueries.length == 0) {\n    return;\n  }\n\n  promise = promise\n    .then(() => {\n      return this.config.database.find(\n        '_Installation',\n        {\n          $or: orQueries,\n        },\n        {}\n      );\n    })\n    .then(results => {\n      results.forEach(result => {\n        if (this.query && this.query.objectId && result.objectId == this.query.objectId) {\n          objectIdMatch = result;\n        }\n        if (result.installationId == installationId) {\n          installationIdMatch = result;\n        }\n        if (result.deviceToken == this.data.deviceToken) {\n          deviceTokenMatches.push(result);\n        }\n      });\n\n      // Sanity checks when running a query\n      if (this.query && this.query.objectId) {\n        if (!objectIdMatch) {\n          throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Object not found for update.');\n        }\n        if (\n          this.data.installationId &&\n          objectIdMatch.installationId &&\n          this.data.installationId !== objectIdMatch.installationId\n        ) {\n          throw new Parse.Error(136, 'installationId may not be changed in this ' + 'operation');\n        }\n        if (\n          this.data.deviceToken &&\n          objectIdMatch.deviceToken &&\n          this.data.deviceToken !== objectIdMatch.deviceToken &&\n          !this.data.installationId &&\n          !objectIdMatch.installationId\n        ) {\n          throw new Parse.Error(136, 'deviceToken may not be changed in this ' + 'operation');\n        }\n        if (\n          this.data.deviceType &&\n          this.data.deviceType &&\n          this.data.deviceType !== objectIdMatch.deviceType\n        ) {\n          throw new Parse.Error(136, 'deviceType may not be changed in this ' + 'operation');\n        }\n      }\n\n      if (this.query && this.query.objectId && objectIdMatch) {\n        idMatch = objectIdMatch;\n      }\n\n      if (installationId && installationIdMatch) {\n        idMatch = installationIdMatch;\n      }\n      // need to specify deviceType only if it's new\n      if (!this.query && !this.data.deviceType && !idMatch) {\n        throw new Parse.Error(135, 'deviceType must be specified in this operation');\n      }\n    })\n    .then(() => {\n      if (!idMatch) {\n        if (!deviceTokenMatches.length) {\n          return;\n        } else if (\n          deviceTokenMatches.length == 1 &&\n          (!deviceTokenMatches[0]['installationId'] || !installationId)\n        ) {\n          // Single match on device token but none on installationId, and either\n          // the passed object or the match is missing an installationId, so we\n          // can just return the match.\n          return deviceTokenMatches[0]['objectId'];\n        } else if (!this.data.installationId) {\n          throw new Parse.Error(\n            132,\n            'Must specify installationId when deviceToken ' +\n              'matches multiple Installation objects'\n          );\n        } else {\n          // Multiple device token matches and we specified an installation ID,\n          // or a single match where both the passed and matching objects have\n          // an installation ID. Try cleaning out old installations that match\n          // the deviceToken, and return nil to signal that a new object should\n          // be created.\n          var delQuery = {\n            deviceToken: this.data.deviceToken,\n            installationId: {\n              $ne: installationId,\n            },\n          };\n          if (this.data.appIdentifier) {\n            delQuery['appIdentifier'] = this.data.appIdentifier;\n          }\n          this.config.database.destroy('_Installation', delQuery).catch(err => {\n            if (err.code == Parse.Error.OBJECT_NOT_FOUND) {\n              // no deletions were made. Can be ignored.\n              return;\n            }\n            // rethrow the error\n            throw err;\n          });\n          return;\n        }\n      } else {\n        if (deviceTokenMatches.length == 1 && !deviceTokenMatches[0]['installationId']) {\n          // Exactly one device token match and it doesn't have an installation\n          // ID. This is the one case where we want to merge with the existing\n          // object.\n          const delQuery = { objectId: idMatch.objectId };\n          return this.config.database\n            .destroy('_Installation', delQuery)\n            .then(() => {\n              return deviceTokenMatches[0]['objectId'];\n            })\n            .catch(err => {\n              if (err.code == Parse.Error.OBJECT_NOT_FOUND) {\n                // no deletions were made. Can be ignored\n                return;\n              }\n              // rethrow the error\n              throw err;\n            });\n        } else {\n          if (this.data.deviceToken && idMatch.deviceToken != this.data.deviceToken) {\n            // We're setting the device token on an existing installation, so\n            // we should try cleaning out old installations that match this\n            // device token.\n            const delQuery = {\n              deviceToken: this.data.deviceToken,\n            };\n            // We have a unique install Id, use that to preserve\n            // the interesting installation\n            if (this.data.installationId) {\n              delQuery['installationId'] = {\n                $ne: this.data.installationId,\n              };\n            } else if (\n              idMatch.objectId &&\n              this.data.objectId &&\n              idMatch.objectId == this.data.objectId\n            ) {\n              // we passed an objectId, preserve that instalation\n              delQuery['objectId'] = {\n                $ne: idMatch.objectId,\n              };\n            } else {\n              // What to do here? can't really clean up everything...\n              return idMatch.objectId;\n            }\n            if (this.data.appIdentifier) {\n              delQuery['appIdentifier'] = this.data.appIdentifier;\n            }\n            this.config.database.destroy('_Installation', delQuery).catch(err => {\n              if (err.code == Parse.Error.OBJECT_NOT_FOUND) {\n                // no deletions were made. Can be ignored.\n                return;\n              }\n              // rethrow the error\n              throw err;\n            });\n          }\n          // In non-merge scenarios, just return the installation match id\n          return idMatch.objectId;\n        }\n      }\n    })\n    .then(objId => {\n      if (objId) {\n        this.query = { objectId: objId };\n        delete this.data.objectId;\n        delete this.data.createdAt;\n      }\n      // TODO: Validate ops (add/remove on channels, $inc on badge, etc.)\n    });\n  return promise;\n};\n\n// If we short-circuited the object response - then we need to make sure we expand all the files,\n// since this might not have a query, meaning it won't return the full result back.\n// TODO: (nlutsenko) This should die when we move to per-class based controllers on _Session/_User\nRestWrite.prototype.expandFilesForExistingObjects = function () {\n  // Check whether we have a short-circuited response - only then run expansion.\n  if (this.response && this.response.response) {\n    this.config.filesController.expandFilesInObject(this.config, this.response.response);\n  }\n};\n\nRestWrite.prototype.runDatabaseOperation = function () {\n  if (this.response) {\n    return;\n  }\n\n  if (this.className === '_Role') {\n    this.config.cacheController.role.clear();\n  }\n\n  if (this.className === '_User' && this.query && this.auth.isUnauthenticated()) {\n    throw new Parse.Error(\n      Parse.Error.SESSION_MISSING,\n      `Cannot modify user ${this.query.objectId}.`\n    );\n  }\n\n  if (this.className === '_Product' && this.data.download) {\n    this.data.downloadName = this.data.download.name;\n  }\n\n  // TODO: Add better detection for ACL, ensuring a user can't be locked from\n  //       their own user record.\n  if (this.data.ACL && this.data.ACL['*unresolved']) {\n    throw new Parse.Error(Parse.Error.INVALID_ACL, 'Invalid ACL.');\n  }\n\n  if (this.query) {\n    // Force the user to not lockout\n    // Matched with parse.com\n    if (this.className === '_User' && this.data.ACL && this.auth.isMaster !== true) {\n      this.data.ACL[this.query.objectId] = { read: true, write: true };\n    }\n    // update password timestamp if user password is being changed\n    if (\n      this.className === '_User' &&\n      this.data._hashed_password &&\n      this.config.passwordPolicy &&\n      this.config.passwordPolicy.maxPasswordAge\n    ) {\n      this.data._password_changed_at = Parse._encode(new Date());\n    }\n    // Ignore createdAt when update\n    delete this.data.createdAt;\n\n    let defer = Promise.resolve();\n    // if password history is enabled then save the current password to history\n    if (\n      this.className === '_User' &&\n      this.data._hashed_password &&\n      this.config.passwordPolicy &&\n      this.config.passwordPolicy.maxPasswordHistory\n    ) {\n      defer = this.config.database\n        .find(\n          '_User',\n          { objectId: this.objectId() },\n          { keys: ['_password_history', '_hashed_password'] }\n        )\n        .then(results => {\n          if (results.length != 1) {\n            throw undefined;\n          }\n          const user = results[0];\n          let oldPasswords = [];\n          if (user._password_history) {\n            oldPasswords = _.take(\n              user._password_history,\n              this.config.passwordPolicy.maxPasswordHistory\n            );\n          }\n          //n-1 passwords go into history including last password\n          while (\n            oldPasswords.length > Math.max(0, this.config.passwordPolicy.maxPasswordHistory - 2)\n          ) {\n            oldPasswords.shift();\n          }\n          oldPasswords.push(user.password);\n          this.data._password_history = oldPasswords;\n        });\n    }\n\n    return defer.then(() => {\n      // Run an update\n      return this.config.database\n        .update(\n          this.className,\n          this.query,\n          this.data,\n          this.runOptions,\n          false,\n          false,\n          this.validSchemaController\n        )\n        .then(response => {\n          response.updatedAt = this.updatedAt;\n          this._updateResponseWithData(response, this.data);\n          this.response = { response };\n        });\n    });\n  } else {\n    // Set the default ACL and password timestamp for the new _User\n    if (this.className === '_User') {\n      var ACL = this.data.ACL;\n      // default public r/w ACL\n      if (!ACL) {\n        ACL = {};\n        if (!this.config.enforcePrivateUsers) {\n          ACL['*'] = { read: true, write: false };\n        }\n      }\n      // make sure the user is not locked down\n      ACL[this.data.objectId] = { read: true, write: true };\n      this.data.ACL = ACL;\n      // password timestamp to be used when password expiry policy is enforced\n      if (this.config.passwordPolicy && this.config.passwordPolicy.maxPasswordAge) {\n        this.data._password_changed_at = Parse._encode(new Date());\n      }\n    }\n\n    // Run a create\n    return this.config.database\n      .create(this.className, this.data, this.runOptions, false, this.validSchemaController)\n      .catch(error => {\n        if (this.className !== '_User' || error.code !== Parse.Error.DUPLICATE_VALUE) {\n          throw error;\n        }\n\n        // Quick check, if we were able to infer the duplicated field name\n        if (error && error.userInfo && error.userInfo.duplicated_field === 'username') {\n          throw new Parse.Error(\n            Parse.Error.USERNAME_TAKEN,\n            'Account already exists for this username.'\n          );\n        }\n\n        if (error && error.userInfo && error.userInfo.duplicated_field === 'email') {\n          throw new Parse.Error(\n            Parse.Error.EMAIL_TAKEN,\n            'Account already exists for this email address.'\n          );\n        }\n\n        // If this was a failed user creation due to username or email already taken, we need to\n        // check whether it was username or email and return the appropriate error.\n        // Fallback to the original method\n        // TODO: See if we can later do this without additional queries by using named indexes.\n        return this.config.database\n          .find(\n            this.className,\n            {\n              username: this.data.username,\n              objectId: { $ne: this.objectId() },\n            },\n            { limit: 1 }\n          )\n          .then(results => {\n            if (results.length > 0) {\n              throw new Parse.Error(\n                Parse.Error.USERNAME_TAKEN,\n                'Account already exists for this username.'\n              );\n            }\n            return this.config.database.find(\n              this.className,\n              { email: this.data.email, objectId: { $ne: this.objectId() } },\n              { limit: 1 }\n            );\n          })\n          .then(results => {\n            if (results.length > 0) {\n              throw new Parse.Error(\n                Parse.Error.EMAIL_TAKEN,\n                'Account already exists for this email address.'\n              );\n            }\n            throw new Parse.Error(\n              Parse.Error.DUPLICATE_VALUE,\n              'A duplicate value for a field with unique values was provided'\n            );\n          });\n      })\n      .then(response => {\n        response.objectId = this.data.objectId;\n        response.createdAt = this.data.createdAt;\n\n        if (this.responseShouldHaveUsername) {\n          response.username = this.data.username;\n        }\n        this._updateResponseWithData(response, this.data);\n        this.response = {\n          status: 201,\n          response,\n          location: this.location(),\n        };\n      });\n  }\n};\n\n// Returns nothing - doesn't wait for the trigger.\nRestWrite.prototype.runAfterSaveTrigger = function () {\n  if (!this.response || !this.response.response) {\n    return;\n  }\n\n  // Avoid doing any setup for triggers if there is no 'afterSave' trigger for this class.\n  const hasAfterSaveHook = triggers.triggerExists(\n    this.className,\n    triggers.Types.afterSave,\n    this.config.applicationId\n  );\n  const hasLiveQuery = this.config.liveQueryController.hasLiveQuery(this.className);\n  if (!hasAfterSaveHook && !hasLiveQuery) {\n    return Promise.resolve();\n  }\n\n  var extraData = { className: this.className };\n  if (this.query && this.query.objectId) {\n    extraData.objectId = this.query.objectId;\n  }\n\n  // Build the original object, we only do this for a update write.\n  let originalObject;\n  if (this.query && this.query.objectId) {\n    originalObject = triggers.inflate(extraData, this.originalData);\n  }\n\n  // Build the inflated object, different from beforeSave, originalData is not empty\n  // since developers can change data in the beforeSave.\n  const updatedObject = this.buildUpdatedObject(extraData);\n  updatedObject._handleSaveResponse(this.response.response, this.response.status || 200);\n\n  this.config.database.loadSchema().then(schemaController => {\n    // Notifiy LiveQueryServer if possible\n    const perms = schemaController.getClassLevelPermissions(updatedObject.className);\n    this.config.liveQueryController.onAfterSave(\n      updatedObject.className,\n      updatedObject,\n      originalObject,\n      perms\n    );\n  });\n\n  // Run afterSave trigger\n  return triggers\n    .maybeRunTrigger(\n      triggers.Types.afterSave,\n      this.auth,\n      updatedObject,\n      originalObject,\n      this.config,\n      this.context\n    )\n    .then(result => {\n      if (result && typeof result === 'object') {\n        this.response.response = result;\n      }\n    })\n    .catch(function (err) {\n      logger.warn('afterSave caught an error', err);\n    });\n};\n\n// A helper to figure out what location this operation happens at.\nRestWrite.prototype.location = function () {\n  var middle = this.className === '_User' ? '/users/' : '/classes/' + this.className + '/';\n  const mount = this.config.mount || this.config.serverURL;\n  return mount + middle + this.data.objectId;\n};\n\n// A helper to get the object id for this operation.\n// Because it could be either on the query or on the data\nRestWrite.prototype.objectId = function () {\n  return this.data.objectId || this.query.objectId;\n};\n\n// Returns a copy of the data and delete bad keys (_auth_data, _hashed_password...)\nRestWrite.prototype.sanitizedData = function () {\n  const data = Object.keys(this.data).reduce((data, key) => {\n    // Regexp comes from Parse.Object.prototype.validate\n    if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(key)) {\n      delete data[key];\n    }\n    return data;\n  }, deepcopy(this.data));\n  return Parse._decode(undefined, data);\n};\n\n// Returns an updated copy of the object\nRestWrite.prototype.buildUpdatedObject = function (extraData) {\n  const className = Parse.Object.fromJSON(extraData);\n  const readOnlyAttributes = className.constructor.readOnlyAttributes\n    ? className.constructor.readOnlyAttributes()\n    : [];\n  if (!this.originalData) {\n    for (const attribute of readOnlyAttributes) {\n      extraData[attribute] = this.data[attribute];\n    }\n  }\n  const updatedObject = triggers.inflate(extraData, this.originalData);\n  Object.keys(this.data).reduce(function (data, key) {\n    if (key.indexOf('.') > 0) {\n      if (typeof data[key].__op === 'string') {\n        if (!readOnlyAttributes.includes(key)) {\n          updatedObject.set(key, data[key]);\n        }\n      } else {\n        // subdocument key with dot notation { 'x.y': v } => { 'x': { 'y' : v } })\n        const splittedKey = key.split('.');\n        const parentProp = splittedKey[0];\n        let parentVal = updatedObject.get(parentProp);\n        if (typeof parentVal !== 'object') {\n          parentVal = {};\n        }\n        parentVal[splittedKey[1]] = data[key];\n        updatedObject.set(parentProp, parentVal);\n      }\n      delete data[key];\n    }\n    return data;\n  }, deepcopy(this.data));\n\n  const sanitized = this.sanitizedData();\n  for (const attribute of readOnlyAttributes) {\n    delete sanitized[attribute];\n  }\n  updatedObject.set(sanitized);\n  return updatedObject;\n};\n\nRestWrite.prototype.cleanUserAuthData = function () {\n  if (this.response && this.response.response && this.className === '_User') {\n    const user = this.response.response;\n    if (user.authData) {\n      Object.keys(user.authData).forEach(provider => {\n        if (user.authData[provider] === null) {\n          delete user.authData[provider];\n        }\n      });\n      if (Object.keys(user.authData).length == 0) {\n        delete user.authData;\n      }\n    }\n  }\n};\n\nRestWrite.prototype._updateResponseWithData = function (response, data) {\n  if (_.isEmpty(this.storage.fieldsChangedByTrigger)) {\n    return response;\n  }\n  const clientSupportsDelete = ClientSDK.supportsForwardDelete(this.clientSDK);\n  this.storage.fieldsChangedByTrigger.forEach(fieldName => {\n    const dataValue = data[fieldName];\n\n    if (!Object.prototype.hasOwnProperty.call(response, fieldName)) {\n      response[fieldName] = dataValue;\n    }\n\n    // Strips operations from responses\n    if (response[fieldName] && response[fieldName].__op) {\n      delete response[fieldName];\n      if (clientSupportsDelete && dataValue.__op == 'Delete') {\n        response[fieldName] = dataValue;\n      }\n    }\n  });\n  return response;\n};\n\nexport default RestWrite;\nmodule.exports = RestWrite;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"dc9129a2dbec1e928120a0b1846dda91b647e381"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2dp9rvnwbz=function(){return actualCoverage;};}return actualCoverage;}cov_2dp9rvnwbz();cov_2dp9rvnwbz().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2dp9rvnwbz().s[1]++;exports.default=void 0;var _RestQuery=(cov_2dp9rvnwbz().s[2]++,_interopRequireDefault(require("./RestQuery")));var _lodash=(cov_2dp9rvnwbz().s[3]++,_interopRequireDefault(require("lodash")));var _logger=(cov_2dp9rvnwbz().s[4]++,_interopRequireDefault(require("./logger")));function _interopRequireDefault(obj){cov_2dp9rvnwbz().f[0]++;cov_2dp9rvnwbz().s[5]++;return(cov_2dp9rvnwbz().b[1][0]++,obj)&&(cov_2dp9rvnwbz().b[1][1]++,obj.__esModule)?(cov_2dp9rvnwbz().b[0][0]++,obj):(cov_2dp9rvnwbz().b[0][1]++,{default:obj});}// A RestWrite encapsulates everything we need to run an operation
// that writes to the database.
// This could be either a "create" or an "update".
var SchemaController=(cov_2dp9rvnwbz().s[6]++,require('./Controllers/SchemaController'));var deepcopy=(cov_2dp9rvnwbz().s[7]++,require('deepcopy'));const Auth=(cov_2dp9rvnwbz().s[8]++,require('./Auth'));var cryptoUtils=(cov_2dp9rvnwbz().s[9]++,require('./cryptoUtils'));var passwordCrypto=(cov_2dp9rvnwbz().s[10]++,require('./password'));var Parse=(cov_2dp9rvnwbz().s[11]++,require('parse/node'));var triggers=(cov_2dp9rvnwbz().s[12]++,require('./triggers'));var ClientSDK=(cov_2dp9rvnwbz().s[13]++,require('./ClientSDK'));// query and data are both provided in REST API format. So data
// types are encoded by plain old objects.
// If query is null, this is a "create" and the data in data should be
// created.
// Otherwise this is an "update" - the object matching the query
// should get updated with data.
// RestWrite will handle objectId, createdAt, and updatedAt for
// everything. It also knows to use triggers and special modifications
// for the _User class.
function RestWrite(config,auth,className,query,data,originalData,clientSDK,context,action){cov_2dp9rvnwbz().f[1]++;cov_2dp9rvnwbz().s[14]++;if(auth.isReadOnly){cov_2dp9rvnwbz().b[2][0]++;cov_2dp9rvnwbz().s[15]++;throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN,'Cannot perform a write operation when using readOnlyMasterKey');}else{cov_2dp9rvnwbz().b[2][1]++;}cov_2dp9rvnwbz().s[16]++;this.config=config;cov_2dp9rvnwbz().s[17]++;this.auth=auth;cov_2dp9rvnwbz().s[18]++;this.className=className;cov_2dp9rvnwbz().s[19]++;this.clientSDK=clientSDK;cov_2dp9rvnwbz().s[20]++;this.storage={};cov_2dp9rvnwbz().s[21]++;this.runOptions={};cov_2dp9rvnwbz().s[22]++;this.context=(cov_2dp9rvnwbz().b[3][0]++,context)||(cov_2dp9rvnwbz().b[3][1]++,{});cov_2dp9rvnwbz().s[23]++;if(action){cov_2dp9rvnwbz().b[4][0]++;cov_2dp9rvnwbz().s[24]++;this.runOptions.action=action;}else{cov_2dp9rvnwbz().b[4][1]++;}cov_2dp9rvnwbz().s[25]++;if(!query){cov_2dp9rvnwbz().b[5][0]++;cov_2dp9rvnwbz().s[26]++;if(this.config.allowCustomObjectId){cov_2dp9rvnwbz().b[6][0]++;cov_2dp9rvnwbz().s[27]++;if((cov_2dp9rvnwbz().b[8][0]++,Object.prototype.hasOwnProperty.call(data,'objectId'))&&(cov_2dp9rvnwbz().b[8][1]++,!data.objectId)){cov_2dp9rvnwbz().b[7][0]++;cov_2dp9rvnwbz().s[28]++;throw new Parse.Error(Parse.Error.MISSING_OBJECT_ID,'objectId must not be empty, null or undefined');}else{cov_2dp9rvnwbz().b[7][1]++;}}else{cov_2dp9rvnwbz().b[6][1]++;cov_2dp9rvnwbz().s[29]++;if(data.objectId){cov_2dp9rvnwbz().b[9][0]++;cov_2dp9rvnwbz().s[30]++;throw new Parse.Error(Parse.Error.INVALID_KEY_NAME,'objectId is an invalid field name.');}else{cov_2dp9rvnwbz().b[9][1]++;}cov_2dp9rvnwbz().s[31]++;if(data.id){cov_2dp9rvnwbz().b[10][0]++;cov_2dp9rvnwbz().s[32]++;throw new Parse.Error(Parse.Error.INVALID_KEY_NAME,'id is an invalid field name.');}else{cov_2dp9rvnwbz().b[10][1]++;}}}else{cov_2dp9rvnwbz().b[5][1]++;}// When the operation is complete, this.response may have several
// fields.
// response: the actual data to be returned
// status: the http status code. if not present, treated like a 200
// location: the location header. if not present, no location header
cov_2dp9rvnwbz().s[33]++;this.response=null;// Processing this operation may mutate our data, so we operate on a
// copy
cov_2dp9rvnwbz().s[34]++;this.query=deepcopy(query);cov_2dp9rvnwbz().s[35]++;this.data=deepcopy(data);// We never change originalData, so we do not need a deep copy
cov_2dp9rvnwbz().s[36]++;this.originalData=originalData;// The timestamp we'll use for this whole operation
cov_2dp9rvnwbz().s[37]++;this.updatedAt=Parse._encode(new Date()).iso;// Shared SchemaController to be reused to reduce the number of loadSchema() calls per request
// Once set the schemaData should be immutable
cov_2dp9rvnwbz().s[38]++;this.validSchemaController=null;}// A convenient method to perform all the steps of processing the
// write, in order.
// Returns a promise for a {response, status, location} object.
// status and location are optional.
cov_2dp9rvnwbz().s[39]++;RestWrite.prototype.execute=function(){cov_2dp9rvnwbz().f[2]++;cov_2dp9rvnwbz().s[40]++;return Promise.resolve().then(()=>{cov_2dp9rvnwbz().f[3]++;cov_2dp9rvnwbz().s[41]++;return this.getUserAndRoleACL();}).then(()=>{cov_2dp9rvnwbz().f[4]++;cov_2dp9rvnwbz().s[42]++;return this.validateClientClassCreation();}).then(()=>{cov_2dp9rvnwbz().f[5]++;cov_2dp9rvnwbz().s[43]++;return this.handleInstallation();}).then(()=>{cov_2dp9rvnwbz().f[6]++;cov_2dp9rvnwbz().s[44]++;return this.handleSession();}).then(()=>{cov_2dp9rvnwbz().f[7]++;cov_2dp9rvnwbz().s[45]++;return this.validateAuthData();}).then(()=>{cov_2dp9rvnwbz().f[8]++;cov_2dp9rvnwbz().s[46]++;return this.runBeforeSaveTrigger();}).then(()=>{cov_2dp9rvnwbz().f[9]++;cov_2dp9rvnwbz().s[47]++;return this.deleteEmailResetTokenIfNeeded();}).then(()=>{cov_2dp9rvnwbz().f[10]++;cov_2dp9rvnwbz().s[48]++;return this.validateSchema();}).then(schemaController=>{cov_2dp9rvnwbz().f[11]++;cov_2dp9rvnwbz().s[49]++;this.validSchemaController=schemaController;cov_2dp9rvnwbz().s[50]++;return this.setRequiredFieldsIfNeeded();}).then(()=>{cov_2dp9rvnwbz().f[12]++;cov_2dp9rvnwbz().s[51]++;return this.transformUser();}).then(()=>{cov_2dp9rvnwbz().f[13]++;cov_2dp9rvnwbz().s[52]++;return this.expandFilesForExistingObjects();}).then(()=>{cov_2dp9rvnwbz().f[14]++;cov_2dp9rvnwbz().s[53]++;return this.destroyDuplicatedSessions();}).then(()=>{cov_2dp9rvnwbz().f[15]++;cov_2dp9rvnwbz().s[54]++;return this.runDatabaseOperation();}).then(()=>{cov_2dp9rvnwbz().f[16]++;cov_2dp9rvnwbz().s[55]++;return this.createSessionTokenIfNeeded();}).then(()=>{cov_2dp9rvnwbz().f[17]++;cov_2dp9rvnwbz().s[56]++;return this.handleFollowup();}).then(()=>{cov_2dp9rvnwbz().f[18]++;cov_2dp9rvnwbz().s[57]++;return this.runAfterSaveTrigger();}).then(()=>{cov_2dp9rvnwbz().f[19]++;cov_2dp9rvnwbz().s[58]++;return this.cleanUserAuthData();}).then(()=>{cov_2dp9rvnwbz().f[20]++;cov_2dp9rvnwbz().s[59]++;return this.response;});};// Uses the Auth object to get the list of roles, adds the user id
cov_2dp9rvnwbz().s[60]++;RestWrite.prototype.getUserAndRoleACL=function(){cov_2dp9rvnwbz().f[21]++;cov_2dp9rvnwbz().s[61]++;if(this.auth.isMaster){cov_2dp9rvnwbz().b[11][0]++;cov_2dp9rvnwbz().s[62]++;return Promise.resolve();}else{cov_2dp9rvnwbz().b[11][1]++;}cov_2dp9rvnwbz().s[63]++;this.runOptions.acl=['*'];cov_2dp9rvnwbz().s[64]++;if(this.auth.user){cov_2dp9rvnwbz().b[12][0]++;cov_2dp9rvnwbz().s[65]++;return this.auth.getUserRoles().then(roles=>{cov_2dp9rvnwbz().f[22]++;cov_2dp9rvnwbz().s[66]++;this.runOptions.acl=this.runOptions.acl.concat(roles,[this.auth.user.id]);cov_2dp9rvnwbz().s[67]++;return;});}else{cov_2dp9rvnwbz().b[12][1]++;cov_2dp9rvnwbz().s[68]++;return Promise.resolve();}};// Validates this operation against the allowClientClassCreation config.
cov_2dp9rvnwbz().s[69]++;RestWrite.prototype.validateClientClassCreation=function(){cov_2dp9rvnwbz().f[23]++;cov_2dp9rvnwbz().s[70]++;if((cov_2dp9rvnwbz().b[14][0]++,this.config.allowClientClassCreation===false)&&(cov_2dp9rvnwbz().b[14][1]++,!this.auth.isMaster)&&(cov_2dp9rvnwbz().b[14][2]++,SchemaController.systemClasses.indexOf(this.className)===-1)){cov_2dp9rvnwbz().b[13][0]++;cov_2dp9rvnwbz().s[71]++;return this.config.database.loadSchema().then(schemaController=>{cov_2dp9rvnwbz().f[24]++;cov_2dp9rvnwbz().s[72]++;return schemaController.hasClass(this.className);}).then(hasClass=>{cov_2dp9rvnwbz().f[25]++;cov_2dp9rvnwbz().s[73]++;if(hasClass!==true){cov_2dp9rvnwbz().b[15][0]++;cov_2dp9rvnwbz().s[74]++;throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN,'This user is not allowed to access '+'non-existent class: '+this.className);}else{cov_2dp9rvnwbz().b[15][1]++;}});}else{cov_2dp9rvnwbz().b[13][1]++;cov_2dp9rvnwbz().s[75]++;return Promise.resolve();}};// Validates this operation against the schema.
cov_2dp9rvnwbz().s[76]++;RestWrite.prototype.validateSchema=function(){cov_2dp9rvnwbz().f[26]++;cov_2dp9rvnwbz().s[77]++;return this.config.database.validateObject(this.className,this.data,this.query,this.runOptions);};// Runs any beforeSave triggers against this operation.
// Any change leads to our data being mutated.
cov_2dp9rvnwbz().s[78]++;RestWrite.prototype.runBeforeSaveTrigger=function(){cov_2dp9rvnwbz().f[27]++;cov_2dp9rvnwbz().s[79]++;if(this.response){cov_2dp9rvnwbz().b[16][0]++;cov_2dp9rvnwbz().s[80]++;return;}else{cov_2dp9rvnwbz().b[16][1]++;}// Avoid doing any setup for triggers if there is no 'beforeSave' trigger for this class.
cov_2dp9rvnwbz().s[81]++;if(!triggers.triggerExists(this.className,triggers.Types.beforeSave,this.config.applicationId)){cov_2dp9rvnwbz().b[17][0]++;cov_2dp9rvnwbz().s[82]++;return Promise.resolve();}else{cov_2dp9rvnwbz().b[17][1]++;}// Cloud code gets a bit of extra data for its objects
var extraData=(cov_2dp9rvnwbz().s[83]++,{className:this.className});cov_2dp9rvnwbz().s[84]++;if((cov_2dp9rvnwbz().b[19][0]++,this.query)&&(cov_2dp9rvnwbz().b[19][1]++,this.query.objectId)){cov_2dp9rvnwbz().b[18][0]++;cov_2dp9rvnwbz().s[85]++;extraData.objectId=this.query.objectId;}else{cov_2dp9rvnwbz().b[18][1]++;}let originalObject=(cov_2dp9rvnwbz().s[86]++,null);const updatedObject=(cov_2dp9rvnwbz().s[87]++,this.buildUpdatedObject(extraData));cov_2dp9rvnwbz().s[88]++;if((cov_2dp9rvnwbz().b[21][0]++,this.query)&&(cov_2dp9rvnwbz().b[21][1]++,this.query.objectId)){cov_2dp9rvnwbz().b[20][0]++;cov_2dp9rvnwbz().s[89]++;// This is an update for existing object.
originalObject=triggers.inflate(extraData,this.originalData);}else{cov_2dp9rvnwbz().b[20][1]++;}cov_2dp9rvnwbz().s[90]++;return Promise.resolve().then(()=>{cov_2dp9rvnwbz().f[28]++;// Before calling the trigger, validate the permissions for the save operation
let databasePromise=(cov_2dp9rvnwbz().s[91]++,null);cov_2dp9rvnwbz().s[92]++;if(this.query){cov_2dp9rvnwbz().b[22][0]++;cov_2dp9rvnwbz().s[93]++;// Validate for updating
databasePromise=this.config.database.update(this.className,this.query,this.data,this.runOptions,true,true);}else{cov_2dp9rvnwbz().b[22][1]++;cov_2dp9rvnwbz().s[94]++;// Validate for creating
databasePromise=this.config.database.create(this.className,this.data,this.runOptions,true);}// In the case that there is no permission for the operation, it throws an error
cov_2dp9rvnwbz().s[95]++;return databasePromise.then(result=>{cov_2dp9rvnwbz().f[29]++;cov_2dp9rvnwbz().s[96]++;if((cov_2dp9rvnwbz().b[24][0]++,!result)||(cov_2dp9rvnwbz().b[24][1]++,result.length<=0)){cov_2dp9rvnwbz().b[23][0]++;cov_2dp9rvnwbz().s[97]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,'Object not found.');}else{cov_2dp9rvnwbz().b[23][1]++;}});}).then(()=>{cov_2dp9rvnwbz().f[30]++;cov_2dp9rvnwbz().s[98]++;return triggers.maybeRunTrigger(triggers.Types.beforeSave,this.auth,updatedObject,originalObject,this.config,this.context);}).then(response=>{cov_2dp9rvnwbz().f[31]++;cov_2dp9rvnwbz().s[99]++;if((cov_2dp9rvnwbz().b[26][0]++,response)&&(cov_2dp9rvnwbz().b[26][1]++,response.object)){cov_2dp9rvnwbz().b[25][0]++;cov_2dp9rvnwbz().s[100]++;this.storage.fieldsChangedByTrigger=_lodash.default.reduce(response.object,(result,value,key)=>{cov_2dp9rvnwbz().f[32]++;cov_2dp9rvnwbz().s[101]++;if(!_lodash.default.isEqual(this.data[key],value)){cov_2dp9rvnwbz().b[27][0]++;cov_2dp9rvnwbz().s[102]++;result.push(key);}else{cov_2dp9rvnwbz().b[27][1]++;}cov_2dp9rvnwbz().s[103]++;return result;},[]);cov_2dp9rvnwbz().s[104]++;this.data=response.object;// We should delete the objectId for an update write
cov_2dp9rvnwbz().s[105]++;if((cov_2dp9rvnwbz().b[29][0]++,this.query)&&(cov_2dp9rvnwbz().b[29][1]++,this.query.objectId)){cov_2dp9rvnwbz().b[28][0]++;cov_2dp9rvnwbz().s[106]++;delete this.data.objectId;}else{cov_2dp9rvnwbz().b[28][1]++;}}else{cov_2dp9rvnwbz().b[25][1]++;}});};cov_2dp9rvnwbz().s[107]++;RestWrite.prototype.runBeforeLoginTrigger=async function(userData){cov_2dp9rvnwbz().f[33]++;cov_2dp9rvnwbz().s[108]++;// Avoid doing any setup for triggers if there is no 'beforeLogin' trigger
if(!triggers.triggerExists(this.className,triggers.Types.beforeLogin,this.config.applicationId)){cov_2dp9rvnwbz().b[30][0]++;cov_2dp9rvnwbz().s[109]++;return;}else{cov_2dp9rvnwbz().b[30][1]++;}// Cloud code gets a bit of extra data for its objects
const extraData=(cov_2dp9rvnwbz().s[110]++,{className:this.className});// Expand file objects
cov_2dp9rvnwbz().s[111]++;this.config.filesController.expandFilesInObject(this.config,userData);const user=(cov_2dp9rvnwbz().s[112]++,triggers.inflate(extraData,userData));// no need to return a response
cov_2dp9rvnwbz().s[113]++;await triggers.maybeRunTrigger(triggers.Types.beforeLogin,this.auth,user,null,this.config,this.context);};cov_2dp9rvnwbz().s[114]++;RestWrite.prototype.setRequiredFieldsIfNeeded=function(){cov_2dp9rvnwbz().f[34]++;cov_2dp9rvnwbz().s[115]++;if(this.data){cov_2dp9rvnwbz().b[31][0]++;cov_2dp9rvnwbz().s[116]++;return this.validSchemaController.getAllClasses().then(allClasses=>{cov_2dp9rvnwbz().f[35]++;const schema=(cov_2dp9rvnwbz().s[117]++,allClasses.find(oneClass=>{cov_2dp9rvnwbz().f[36]++;cov_2dp9rvnwbz().s[118]++;return oneClass.className===this.className;}));cov_2dp9rvnwbz().s[119]++;const setRequiredFieldIfNeeded=(fieldName,setDefault)=>{cov_2dp9rvnwbz().f[37]++;cov_2dp9rvnwbz().s[120]++;if((cov_2dp9rvnwbz().b[33][0]++,this.data[fieldName]===undefined)||(cov_2dp9rvnwbz().b[33][1]++,this.data[fieldName]===null)||(cov_2dp9rvnwbz().b[33][2]++,this.data[fieldName]==='')||(cov_2dp9rvnwbz().b[33][3]++,typeof this.data[fieldName]==='object')&&(cov_2dp9rvnwbz().b[33][4]++,this.data[fieldName].__op==='Delete')){cov_2dp9rvnwbz().b[32][0]++;cov_2dp9rvnwbz().s[121]++;if((cov_2dp9rvnwbz().b[35][0]++,setDefault)&&(cov_2dp9rvnwbz().b[35][1]++,schema.fields[fieldName])&&(cov_2dp9rvnwbz().b[35][2]++,schema.fields[fieldName].defaultValue!==null)&&(cov_2dp9rvnwbz().b[35][3]++,schema.fields[fieldName].defaultValue!==undefined)&&((cov_2dp9rvnwbz().b[35][4]++,this.data[fieldName]===undefined)||(cov_2dp9rvnwbz().b[35][5]++,typeof this.data[fieldName]==='object')&&(cov_2dp9rvnwbz().b[35][6]++,this.data[fieldName].__op==='Delete'))){cov_2dp9rvnwbz().b[34][0]++;cov_2dp9rvnwbz().s[122]++;this.data[fieldName]=schema.fields[fieldName].defaultValue;cov_2dp9rvnwbz().s[123]++;this.storage.fieldsChangedByTrigger=(cov_2dp9rvnwbz().b[36][0]++,this.storage.fieldsChangedByTrigger)||(cov_2dp9rvnwbz().b[36][1]++,[]);cov_2dp9rvnwbz().s[124]++;if(this.storage.fieldsChangedByTrigger.indexOf(fieldName)<0){cov_2dp9rvnwbz().b[37][0]++;cov_2dp9rvnwbz().s[125]++;this.storage.fieldsChangedByTrigger.push(fieldName);}else{cov_2dp9rvnwbz().b[37][1]++;}}else{cov_2dp9rvnwbz().b[34][1]++;cov_2dp9rvnwbz().s[126]++;if((cov_2dp9rvnwbz().b[39][0]++,schema.fields[fieldName])&&(cov_2dp9rvnwbz().b[39][1]++,schema.fields[fieldName].required===true)){cov_2dp9rvnwbz().b[38][0]++;cov_2dp9rvnwbz().s[127]++;throw new Parse.Error(Parse.Error.VALIDATION_ERROR,`${fieldName} is required`);}else{cov_2dp9rvnwbz().b[38][1]++;}}}else{cov_2dp9rvnwbz().b[32][1]++;}};// Add default fields
cov_2dp9rvnwbz().s[128]++;this.data.updatedAt=this.updatedAt;cov_2dp9rvnwbz().s[129]++;if(!this.query){cov_2dp9rvnwbz().b[40][0]++;cov_2dp9rvnwbz().s[130]++;this.data.createdAt=this.updatedAt;// Only assign new objectId if we are creating new object
cov_2dp9rvnwbz().s[131]++;if(!this.data.objectId){cov_2dp9rvnwbz().b[41][0]++;cov_2dp9rvnwbz().s[132]++;this.data.objectId=cryptoUtils.newObjectId(this.config.objectIdSize);}else{cov_2dp9rvnwbz().b[41][1]++;}cov_2dp9rvnwbz().s[133]++;if(schema){cov_2dp9rvnwbz().b[42][0]++;cov_2dp9rvnwbz().s[134]++;Object.keys(schema.fields).forEach(fieldName=>{cov_2dp9rvnwbz().f[38]++;cov_2dp9rvnwbz().s[135]++;setRequiredFieldIfNeeded(fieldName,true);});}else{cov_2dp9rvnwbz().b[42][1]++;}}else{cov_2dp9rvnwbz().b[40][1]++;cov_2dp9rvnwbz().s[136]++;if(schema){cov_2dp9rvnwbz().b[43][0]++;cov_2dp9rvnwbz().s[137]++;Object.keys(this.data).forEach(fieldName=>{cov_2dp9rvnwbz().f[39]++;cov_2dp9rvnwbz().s[138]++;setRequiredFieldIfNeeded(fieldName,false);});}else{cov_2dp9rvnwbz().b[43][1]++;}}});}else{cov_2dp9rvnwbz().b[31][1]++;}cov_2dp9rvnwbz().s[139]++;return Promise.resolve();};// Transforms auth data for a user object.
// Does nothing if this isn't a user object.
// Returns a promise for when we're done if it can't finish this tick.
cov_2dp9rvnwbz().s[140]++;RestWrite.prototype.validateAuthData=function(){cov_2dp9rvnwbz().f[40]++;cov_2dp9rvnwbz().s[141]++;if(this.className!=='_User'){cov_2dp9rvnwbz().b[44][0]++;cov_2dp9rvnwbz().s[142]++;return;}else{cov_2dp9rvnwbz().b[44][1]++;}cov_2dp9rvnwbz().s[143]++;if((cov_2dp9rvnwbz().b[46][0]++,!this.query)&&(cov_2dp9rvnwbz().b[46][1]++,!this.data.authData)){cov_2dp9rvnwbz().b[45][0]++;cov_2dp9rvnwbz().s[144]++;if((cov_2dp9rvnwbz().b[48][0]++,typeof this.data.username!=='string')||(cov_2dp9rvnwbz().b[48][1]++,_lodash.default.isEmpty(this.data.username))){cov_2dp9rvnwbz().b[47][0]++;cov_2dp9rvnwbz().s[145]++;throw new Parse.Error(Parse.Error.USERNAME_MISSING,'bad or missing username');}else{cov_2dp9rvnwbz().b[47][1]++;}cov_2dp9rvnwbz().s[146]++;if((cov_2dp9rvnwbz().b[50][0]++,typeof this.data.password!=='string')||(cov_2dp9rvnwbz().b[50][1]++,_lodash.default.isEmpty(this.data.password))){cov_2dp9rvnwbz().b[49][0]++;cov_2dp9rvnwbz().s[147]++;throw new Parse.Error(Parse.Error.PASSWORD_MISSING,'password is required');}else{cov_2dp9rvnwbz().b[49][1]++;}}else{cov_2dp9rvnwbz().b[45][1]++;}cov_2dp9rvnwbz().s[148]++;if((cov_2dp9rvnwbz().b[52][0]++,this.data.authData)&&(cov_2dp9rvnwbz().b[52][1]++,!Object.keys(this.data.authData).length)||(cov_2dp9rvnwbz().b[52][2]++,!Object.prototype.hasOwnProperty.call(this.data,'authData'))){cov_2dp9rvnwbz().b[51][0]++;cov_2dp9rvnwbz().s[149]++;// Handle saving authData to {} or if authData doesn't exist
return;}else{cov_2dp9rvnwbz().b[51][1]++;cov_2dp9rvnwbz().s[150]++;if((cov_2dp9rvnwbz().b[54][0]++,Object.prototype.hasOwnProperty.call(this.data,'authData'))&&(cov_2dp9rvnwbz().b[54][1]++,!this.data.authData)){cov_2dp9rvnwbz().b[53][0]++;cov_2dp9rvnwbz().s[151]++;// Handle saving authData to null
throw new Parse.Error(Parse.Error.UNSUPPORTED_SERVICE,'This authentication method is unsupported.');}else{cov_2dp9rvnwbz().b[53][1]++;}}var authData=(cov_2dp9rvnwbz().s[152]++,this.data.authData);var providers=(cov_2dp9rvnwbz().s[153]++,Object.keys(authData));cov_2dp9rvnwbz().s[154]++;if(providers.length>0){cov_2dp9rvnwbz().b[55][0]++;const canHandleAuthData=(cov_2dp9rvnwbz().s[155]++,providers.reduce((canHandle,provider)=>{cov_2dp9rvnwbz().f[41]++;var providerAuthData=(cov_2dp9rvnwbz().s[156]++,authData[provider]);var hasToken=(cov_2dp9rvnwbz().s[157]++,(cov_2dp9rvnwbz().b[56][0]++,providerAuthData)&&(cov_2dp9rvnwbz().b[56][1]++,providerAuthData.id));cov_2dp9rvnwbz().s[158]++;return(cov_2dp9rvnwbz().b[57][0]++,canHandle)&&((cov_2dp9rvnwbz().b[57][1]++,hasToken)||(cov_2dp9rvnwbz().b[57][2]++,providerAuthData==null));},true));cov_2dp9rvnwbz().s[159]++;if(canHandleAuthData){cov_2dp9rvnwbz().b[58][0]++;cov_2dp9rvnwbz().s[160]++;return this.handleAuthData(authData);}else{cov_2dp9rvnwbz().b[58][1]++;}}else{cov_2dp9rvnwbz().b[55][1]++;}cov_2dp9rvnwbz().s[161]++;throw new Parse.Error(Parse.Error.UNSUPPORTED_SERVICE,'This authentication method is unsupported.');};cov_2dp9rvnwbz().s[162]++;RestWrite.prototype.handleAuthDataValidation=function(authData){cov_2dp9rvnwbz().f[42]++;const validations=(cov_2dp9rvnwbz().s[163]++,Object.keys(authData).map(provider=>{cov_2dp9rvnwbz().f[43]++;cov_2dp9rvnwbz().s[164]++;if(authData[provider]===null){cov_2dp9rvnwbz().b[59][0]++;cov_2dp9rvnwbz().s[165]++;return Promise.resolve();}else{cov_2dp9rvnwbz().b[59][1]++;}const validateAuthData=(cov_2dp9rvnwbz().s[166]++,this.config.authDataManager.getValidatorForProvider(provider));cov_2dp9rvnwbz().s[167]++;if(!validateAuthData){cov_2dp9rvnwbz().b[60][0]++;cov_2dp9rvnwbz().s[168]++;throw new Parse.Error(Parse.Error.UNSUPPORTED_SERVICE,'This authentication method is unsupported.');}else{cov_2dp9rvnwbz().b[60][1]++;}cov_2dp9rvnwbz().s[169]++;return validateAuthData(authData[provider]);}));cov_2dp9rvnwbz().s[170]++;return Promise.all(validations);};cov_2dp9rvnwbz().s[171]++;RestWrite.prototype.findUsersWithAuthData=function(authData){cov_2dp9rvnwbz().f[44]++;const providers=(cov_2dp9rvnwbz().s[172]++,Object.keys(authData));const query=(cov_2dp9rvnwbz().s[173]++,providers.reduce((memo,provider)=>{cov_2dp9rvnwbz().f[45]++;cov_2dp9rvnwbz().s[174]++;if(!authData[provider]){cov_2dp9rvnwbz().b[61][0]++;cov_2dp9rvnwbz().s[175]++;return memo;}else{cov_2dp9rvnwbz().b[61][1]++;}const queryKey=(cov_2dp9rvnwbz().s[176]++,`authData.${provider}.id`);const query=(cov_2dp9rvnwbz().s[177]++,{});cov_2dp9rvnwbz().s[178]++;query[queryKey]=authData[provider].id;cov_2dp9rvnwbz().s[179]++;memo.push(query);cov_2dp9rvnwbz().s[180]++;return memo;},[]).filter(q=>{cov_2dp9rvnwbz().f[46]++;cov_2dp9rvnwbz().s[181]++;return typeof q!=='undefined';}));let findPromise=(cov_2dp9rvnwbz().s[182]++,Promise.resolve([]));cov_2dp9rvnwbz().s[183]++;if(query.length>0){cov_2dp9rvnwbz().b[62][0]++;cov_2dp9rvnwbz().s[184]++;findPromise=this.config.database.find(this.className,{$or:query},{});}else{cov_2dp9rvnwbz().b[62][1]++;}cov_2dp9rvnwbz().s[185]++;return findPromise;};cov_2dp9rvnwbz().s[186]++;RestWrite.prototype.filteredObjectsByACL=function(objects){cov_2dp9rvnwbz().f[47]++;cov_2dp9rvnwbz().s[187]++;if(this.auth.isMaster){cov_2dp9rvnwbz().b[63][0]++;cov_2dp9rvnwbz().s[188]++;return objects;}else{cov_2dp9rvnwbz().b[63][1]++;}cov_2dp9rvnwbz().s[189]++;return objects.filter(object=>{cov_2dp9rvnwbz().f[48]++;cov_2dp9rvnwbz().s[190]++;if(!object.ACL){cov_2dp9rvnwbz().b[64][0]++;cov_2dp9rvnwbz().s[191]++;return true;// legacy users that have no ACL field on them
}else{cov_2dp9rvnwbz().b[64][1]++;}// Regular users that have been locked out.
cov_2dp9rvnwbz().s[192]++;return(cov_2dp9rvnwbz().b[65][0]++,object.ACL)&&(cov_2dp9rvnwbz().b[65][1]++,Object.keys(object.ACL).length>0);});};cov_2dp9rvnwbz().s[193]++;RestWrite.prototype.handleAuthData=function(authData){cov_2dp9rvnwbz().f[49]++;let results;cov_2dp9rvnwbz().s[194]++;return this.findUsersWithAuthData(authData).then(async r=>{cov_2dp9rvnwbz().f[50]++;cov_2dp9rvnwbz().s[195]++;results=this.filteredObjectsByACL(r);cov_2dp9rvnwbz().s[196]++;if(results.length==1){cov_2dp9rvnwbz().b[66][0]++;cov_2dp9rvnwbz().s[197]++;this.storage['authProvider']=Object.keys(authData).join(',');const userResult=(cov_2dp9rvnwbz().s[198]++,results[0]);const mutatedAuthData=(cov_2dp9rvnwbz().s[199]++,{});cov_2dp9rvnwbz().s[200]++;Object.keys(authData).forEach(provider=>{cov_2dp9rvnwbz().f[51]++;const providerData=(cov_2dp9rvnwbz().s[201]++,authData[provider]);const userAuthData=(cov_2dp9rvnwbz().s[202]++,userResult.authData[provider]);cov_2dp9rvnwbz().s[203]++;if(!_lodash.default.isEqual(providerData,userAuthData)){cov_2dp9rvnwbz().b[67][0]++;cov_2dp9rvnwbz().s[204]++;mutatedAuthData[provider]=providerData;}else{cov_2dp9rvnwbz().b[67][1]++;}});const hasMutatedAuthData=(cov_2dp9rvnwbz().s[205]++,Object.keys(mutatedAuthData).length!==0);let userId;cov_2dp9rvnwbz().s[206]++;if((cov_2dp9rvnwbz().b[69][0]++,this.query)&&(cov_2dp9rvnwbz().b[69][1]++,this.query.objectId)){cov_2dp9rvnwbz().b[68][0]++;cov_2dp9rvnwbz().s[207]++;userId=this.query.objectId;}else{cov_2dp9rvnwbz().b[68][1]++;cov_2dp9rvnwbz().s[208]++;if((cov_2dp9rvnwbz().b[71][0]++,this.auth)&&(cov_2dp9rvnwbz().b[71][1]++,this.auth.user)&&(cov_2dp9rvnwbz().b[71][2]++,this.auth.user.id)){cov_2dp9rvnwbz().b[70][0]++;cov_2dp9rvnwbz().s[209]++;userId=this.auth.user.id;}else{cov_2dp9rvnwbz().b[70][1]++;}}cov_2dp9rvnwbz().s[210]++;if((cov_2dp9rvnwbz().b[73][0]++,!userId)||(cov_2dp9rvnwbz().b[73][1]++,userId===userResult.objectId)){cov_2dp9rvnwbz().b[72][0]++;cov_2dp9rvnwbz().s[211]++;// no user making the call
// OR the user making the call is the right one
// Login with auth data
delete results[0].password;// need to set the objectId first otherwise location has trailing undefined
cov_2dp9rvnwbz().s[212]++;this.data.objectId=userResult.objectId;cov_2dp9rvnwbz().s[213]++;if((cov_2dp9rvnwbz().b[75][0]++,!this.query)||(cov_2dp9rvnwbz().b[75][1]++,!this.query.objectId)){cov_2dp9rvnwbz().b[74][0]++;cov_2dp9rvnwbz().s[214]++;// this a login call, no userId passed
this.response={response:userResult,location:this.location()};// Run beforeLogin hook before storing any updates
// to authData on the db; changes to userResult
// will be ignored.
cov_2dp9rvnwbz().s[215]++;await this.runBeforeLoginTrigger(deepcopy(userResult));}else{cov_2dp9rvnwbz().b[74][1]++;}// If we didn't change the auth data, just keep going
cov_2dp9rvnwbz().s[216]++;if(!hasMutatedAuthData){cov_2dp9rvnwbz().b[76][0]++;cov_2dp9rvnwbz().s[217]++;return;}else{cov_2dp9rvnwbz().b[76][1]++;}// We have authData that is updated on login
// that can happen when token are refreshed,
// We should update the token and let the user in
// We should only check the mutated keys
cov_2dp9rvnwbz().s[218]++;return this.handleAuthDataValidation(mutatedAuthData).then(async()=>{cov_2dp9rvnwbz().f[52]++;cov_2dp9rvnwbz().s[219]++;// IF we have a response, we'll skip the database operation / beforeSave / afterSave etc...
// we need to set it up there.
// We are supposed to have a response only on LOGIN with authData, so we skip those
// If we're not logging in, but just updating the current user, we can safely skip that part
if(this.response){cov_2dp9rvnwbz().b[77][0]++;cov_2dp9rvnwbz().s[220]++;// Assign the new authData in the response
Object.keys(mutatedAuthData).forEach(provider=>{cov_2dp9rvnwbz().f[53]++;cov_2dp9rvnwbz().s[221]++;this.response.response.authData[provider]=mutatedAuthData[provider];});// Run the DB update directly, as 'master'
// Just update the authData part
// Then we're good for the user, early exit of sorts
cov_2dp9rvnwbz().s[222]++;return this.config.database.update(this.className,{objectId:this.data.objectId},{authData:mutatedAuthData},{});}else{cov_2dp9rvnwbz().b[77][1]++;}});}else{cov_2dp9rvnwbz().b[72][1]++;cov_2dp9rvnwbz().s[223]++;if(userId){cov_2dp9rvnwbz().b[78][0]++;cov_2dp9rvnwbz().s[224]++;// Trying to update auth data but users
// are different
if(userResult.objectId!==userId){cov_2dp9rvnwbz().b[79][0]++;cov_2dp9rvnwbz().s[225]++;throw new Parse.Error(Parse.Error.ACCOUNT_ALREADY_LINKED,'this auth is already used');}else{cov_2dp9rvnwbz().b[79][1]++;}// No auth data was mutated, just keep going
cov_2dp9rvnwbz().s[226]++;if(!hasMutatedAuthData){cov_2dp9rvnwbz().b[80][0]++;cov_2dp9rvnwbz().s[227]++;return;}else{cov_2dp9rvnwbz().b[80][1]++;}}else{cov_2dp9rvnwbz().b[78][1]++;}}}else{cov_2dp9rvnwbz().b[66][1]++;}cov_2dp9rvnwbz().s[228]++;return this.handleAuthDataValidation(authData).then(()=>{cov_2dp9rvnwbz().f[54]++;cov_2dp9rvnwbz().s[229]++;if(results.length>1){cov_2dp9rvnwbz().b[81][0]++;cov_2dp9rvnwbz().s[230]++;// More than 1 user with the passed id's
throw new Parse.Error(Parse.Error.ACCOUNT_ALREADY_LINKED,'this auth is already used');}else{cov_2dp9rvnwbz().b[81][1]++;}});});};// The non-third-party parts of User transformation
cov_2dp9rvnwbz().s[231]++;RestWrite.prototype.transformUser=function(){cov_2dp9rvnwbz().f[55]++;var promise=(cov_2dp9rvnwbz().s[232]++,Promise.resolve());cov_2dp9rvnwbz().s[233]++;if(this.className!=='_User'){cov_2dp9rvnwbz().b[82][0]++;cov_2dp9rvnwbz().s[234]++;return promise;}else{cov_2dp9rvnwbz().b[82][1]++;}cov_2dp9rvnwbz().s[235]++;if((cov_2dp9rvnwbz().b[84][0]++,!this.auth.isMaster)&&(cov_2dp9rvnwbz().b[84][1]++,'emailVerified'in this.data)){cov_2dp9rvnwbz().b[83][0]++;const error=(cov_2dp9rvnwbz().s[236]++,`Clients aren't allowed to manually update email verification.`);cov_2dp9rvnwbz().s[237]++;throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN,error);}else{cov_2dp9rvnwbz().b[83][1]++;}// Do not cleanup session if objectId is not set
cov_2dp9rvnwbz().s[238]++;if((cov_2dp9rvnwbz().b[86][0]++,this.query)&&(cov_2dp9rvnwbz().b[86][1]++,this.objectId())){cov_2dp9rvnwbz().b[85][0]++;cov_2dp9rvnwbz().s[239]++;// If we're updating a _User object, we need to clear out the cache for that user. Find all their
// session tokens, and remove them from the cache.
promise=new _RestQuery.default(this.config,Auth.master(this.config),'_Session',{user:{__type:'Pointer',className:'_User',objectId:this.objectId()}}).execute().then(results=>{cov_2dp9rvnwbz().f[56]++;cov_2dp9rvnwbz().s[240]++;results.results.forEach(session=>{cov_2dp9rvnwbz().f[57]++;cov_2dp9rvnwbz().s[241]++;return this.config.cacheController.user.del(session.sessionToken);});});}else{cov_2dp9rvnwbz().b[85][1]++;}cov_2dp9rvnwbz().s[242]++;return promise.then(()=>{cov_2dp9rvnwbz().f[58]++;cov_2dp9rvnwbz().s[243]++;// Transform the password
if(this.data.password===undefined){cov_2dp9rvnwbz().b[87][0]++;cov_2dp9rvnwbz().s[244]++;// ignore only if undefined. should proceed if empty ('')
return Promise.resolve();}else{cov_2dp9rvnwbz().b[87][1]++;}cov_2dp9rvnwbz().s[245]++;if(this.query){cov_2dp9rvnwbz().b[88][0]++;cov_2dp9rvnwbz().s[246]++;this.storage['clearSessions']=true;// Generate a new session only if the user requested
cov_2dp9rvnwbz().s[247]++;if(!this.auth.isMaster){cov_2dp9rvnwbz().b[89][0]++;cov_2dp9rvnwbz().s[248]++;this.storage['generateNewSession']=true;}else{cov_2dp9rvnwbz().b[89][1]++;}}else{cov_2dp9rvnwbz().b[88][1]++;}cov_2dp9rvnwbz().s[249]++;return this._validatePasswordPolicy().then(()=>{cov_2dp9rvnwbz().f[59]++;cov_2dp9rvnwbz().s[250]++;return passwordCrypto.hash(this.data.password).then(hashedPassword=>{cov_2dp9rvnwbz().f[60]++;cov_2dp9rvnwbz().s[251]++;this.data._hashed_password=hashedPassword;cov_2dp9rvnwbz().s[252]++;delete this.data.password;});});}).then(()=>{cov_2dp9rvnwbz().f[61]++;cov_2dp9rvnwbz().s[253]++;return this._validateUserName();}).then(()=>{cov_2dp9rvnwbz().f[62]++;cov_2dp9rvnwbz().s[254]++;return this._validateEmail();});};cov_2dp9rvnwbz().s[255]++;RestWrite.prototype._validateUserName=function(){cov_2dp9rvnwbz().f[63]++;cov_2dp9rvnwbz().s[256]++;// Check for username uniqueness
if(!this.data.username){cov_2dp9rvnwbz().b[90][0]++;cov_2dp9rvnwbz().s[257]++;if(!this.query){cov_2dp9rvnwbz().b[91][0]++;cov_2dp9rvnwbz().s[258]++;this.data.username=cryptoUtils.randomString(25);cov_2dp9rvnwbz().s[259]++;this.responseShouldHaveUsername=true;}else{cov_2dp9rvnwbz().b[91][1]++;}cov_2dp9rvnwbz().s[260]++;return Promise.resolve();}else{cov_2dp9rvnwbz().b[90][1]++;}/*
    Usernames should be unique when compared case insensitively
     Users should be able to make case sensitive usernames and
    login using the case they entered.  I.e. 'Snoopy' should preclude
    'snoopy' as a valid username.
  */cov_2dp9rvnwbz().s[261]++;return this.config.database.find(this.className,{username:this.data.username,objectId:{$ne:this.objectId()}},{limit:1,caseInsensitive:true},{},this.validSchemaController).then(results=>{cov_2dp9rvnwbz().f[64]++;cov_2dp9rvnwbz().s[262]++;if(results.length>0){cov_2dp9rvnwbz().b[92][0]++;cov_2dp9rvnwbz().s[263]++;throw new Parse.Error(Parse.Error.USERNAME_TAKEN,'Account already exists for this username.');}else{cov_2dp9rvnwbz().b[92][1]++;}cov_2dp9rvnwbz().s[264]++;return;});};/*
  As with usernames, Parse should not allow case insensitive collisions of email.
  unlike with usernames (which can have case insensitive collisions in the case of
  auth adapters), emails should never have a case insensitive collision.

  This behavior can be enforced through a properly configured index see:
  https://docs.mongodb.com/manual/core/index-case-insensitive/#create-a-case-insensitive-index
  which could be implemented instead of this code based validation.

  Given that this lookup should be a relatively low use case and that the case sensitive
  unique index will be used by the db for the query, this is an adequate solution.
*/cov_2dp9rvnwbz().s[265]++;RestWrite.prototype._validateEmail=function(){cov_2dp9rvnwbz().f[65]++;cov_2dp9rvnwbz().s[266]++;if((cov_2dp9rvnwbz().b[94][0]++,!this.data.email)||(cov_2dp9rvnwbz().b[94][1]++,this.data.email.__op==='Delete')){cov_2dp9rvnwbz().b[93][0]++;cov_2dp9rvnwbz().s[267]++;return Promise.resolve();}else{cov_2dp9rvnwbz().b[93][1]++;}// Validate basic email address format
cov_2dp9rvnwbz().s[268]++;if(!this.data.email.match(/^.+@.+$/)){cov_2dp9rvnwbz().b[95][0]++;cov_2dp9rvnwbz().s[269]++;return Promise.reject(new Parse.Error(Parse.Error.INVALID_EMAIL_ADDRESS,'Email address format is invalid.'));}else{cov_2dp9rvnwbz().b[95][1]++;}// Case insensitive match, see note above function.
cov_2dp9rvnwbz().s[270]++;return this.config.database.find(this.className,{email:this.data.email,objectId:{$ne:this.objectId()}},{limit:1,caseInsensitive:true},{},this.validSchemaController).then(results=>{cov_2dp9rvnwbz().f[66]++;cov_2dp9rvnwbz().s[271]++;if(results.length>0){cov_2dp9rvnwbz().b[96][0]++;cov_2dp9rvnwbz().s[272]++;throw new Parse.Error(Parse.Error.EMAIL_TAKEN,'Account already exists for this email address.');}else{cov_2dp9rvnwbz().b[96][1]++;}cov_2dp9rvnwbz().s[273]++;if((cov_2dp9rvnwbz().b[98][0]++,!this.data.authData)||(cov_2dp9rvnwbz().b[98][1]++,!Object.keys(this.data.authData).length)||(cov_2dp9rvnwbz().b[98][2]++,Object.keys(this.data.authData).length===1)&&(cov_2dp9rvnwbz().b[98][3]++,Object.keys(this.data.authData)[0]==='anonymous')){cov_2dp9rvnwbz().b[97][0]++;cov_2dp9rvnwbz().s[274]++;// We updated the email, send a new validation
this.storage['sendVerificationEmail']=true;cov_2dp9rvnwbz().s[275]++;this.config.userController.setEmailVerifyToken(this.data);}else{cov_2dp9rvnwbz().b[97][1]++;}});};cov_2dp9rvnwbz().s[276]++;RestWrite.prototype._validatePasswordPolicy=function(){cov_2dp9rvnwbz().f[67]++;cov_2dp9rvnwbz().s[277]++;if(!this.config.passwordPolicy){cov_2dp9rvnwbz().b[99][0]++;cov_2dp9rvnwbz().s[278]++;return Promise.resolve();}else{cov_2dp9rvnwbz().b[99][1]++;}cov_2dp9rvnwbz().s[279]++;return this._validatePasswordRequirements().then(()=>{cov_2dp9rvnwbz().f[68]++;cov_2dp9rvnwbz().s[280]++;return this._validatePasswordHistory();});};cov_2dp9rvnwbz().s[281]++;RestWrite.prototype._validatePasswordRequirements=function(){cov_2dp9rvnwbz().f[69]++;// check if the password conforms to the defined password policy if configured
// If we specified a custom error in our configuration use it.
// Example: "Passwords must include a Capital Letter, Lowercase Letter, and a number."
//
// This is especially useful on the generic "password reset" page,
// as it allows the programmer to communicate specific requirements instead of:
// a. making the user guess whats wrong
// b. making a custom password reset page that shows the requirements
const policyError=(cov_2dp9rvnwbz().s[282]++,this.config.passwordPolicy.validationError?(cov_2dp9rvnwbz().b[100][0]++,this.config.passwordPolicy.validationError):(cov_2dp9rvnwbz().b[100][1]++,'Password does not meet the Password Policy requirements.'));const containsUsernameError=(cov_2dp9rvnwbz().s[283]++,'Password cannot contain your username.');// check whether the password meets the password strength requirements
cov_2dp9rvnwbz().s[284]++;if((cov_2dp9rvnwbz().b[102][0]++,this.config.passwordPolicy.patternValidator)&&(cov_2dp9rvnwbz().b[102][1]++,!this.config.passwordPolicy.patternValidator(this.data.password))||(cov_2dp9rvnwbz().b[102][2]++,this.config.passwordPolicy.validatorCallback)&&(cov_2dp9rvnwbz().b[102][3]++,!this.config.passwordPolicy.validatorCallback(this.data.password))){cov_2dp9rvnwbz().b[101][0]++;cov_2dp9rvnwbz().s[285]++;return Promise.reject(new Parse.Error(Parse.Error.VALIDATION_ERROR,policyError));}else{cov_2dp9rvnwbz().b[101][1]++;}// check whether password contain username
cov_2dp9rvnwbz().s[286]++;if(this.config.passwordPolicy.doNotAllowUsername===true){cov_2dp9rvnwbz().b[103][0]++;cov_2dp9rvnwbz().s[287]++;if(this.data.username){cov_2dp9rvnwbz().b[104][0]++;cov_2dp9rvnwbz().s[288]++;// username is not passed during password reset
if(this.data.password.indexOf(this.data.username)>=0){cov_2dp9rvnwbz().b[105][0]++;cov_2dp9rvnwbz().s[289]++;return Promise.reject(new Parse.Error(Parse.Error.VALIDATION_ERROR,containsUsernameError));}else{cov_2dp9rvnwbz().b[105][1]++;}}else{cov_2dp9rvnwbz().b[104][1]++;cov_2dp9rvnwbz().s[290]++;// retrieve the User object using objectId during password reset
return this.config.database.find('_User',{objectId:this.objectId()}).then(results=>{cov_2dp9rvnwbz().f[70]++;cov_2dp9rvnwbz().s[291]++;if(results.length!=1){cov_2dp9rvnwbz().b[106][0]++;cov_2dp9rvnwbz().s[292]++;throw undefined;}else{cov_2dp9rvnwbz().b[106][1]++;}cov_2dp9rvnwbz().s[293]++;if(this.data.password.indexOf(results[0].username)>=0){cov_2dp9rvnwbz().b[107][0]++;cov_2dp9rvnwbz().s[294]++;return Promise.reject(new Parse.Error(Parse.Error.VALIDATION_ERROR,containsUsernameError));}else{cov_2dp9rvnwbz().b[107][1]++;}cov_2dp9rvnwbz().s[295]++;return Promise.resolve();});}}else{cov_2dp9rvnwbz().b[103][1]++;}cov_2dp9rvnwbz().s[296]++;return Promise.resolve();};cov_2dp9rvnwbz().s[297]++;RestWrite.prototype._validatePasswordHistory=function(){cov_2dp9rvnwbz().f[71]++;cov_2dp9rvnwbz().s[298]++;// check whether password is repeating from specified history
if((cov_2dp9rvnwbz().b[109][0]++,this.query)&&(cov_2dp9rvnwbz().b[109][1]++,this.config.passwordPolicy.maxPasswordHistory)){cov_2dp9rvnwbz().b[108][0]++;cov_2dp9rvnwbz().s[299]++;return this.config.database.find('_User',{objectId:this.objectId()},{keys:['_password_history','_hashed_password']}).then(results=>{cov_2dp9rvnwbz().f[72]++;cov_2dp9rvnwbz().s[300]++;if(results.length!=1){cov_2dp9rvnwbz().b[110][0]++;cov_2dp9rvnwbz().s[301]++;throw undefined;}else{cov_2dp9rvnwbz().b[110][1]++;}const user=(cov_2dp9rvnwbz().s[302]++,results[0]);let oldPasswords=(cov_2dp9rvnwbz().s[303]++,[]);cov_2dp9rvnwbz().s[304]++;if(user._password_history){cov_2dp9rvnwbz().b[111][0]++;cov_2dp9rvnwbz().s[305]++;oldPasswords=_lodash.default.take(user._password_history,this.config.passwordPolicy.maxPasswordHistory-1);}else{cov_2dp9rvnwbz().b[111][1]++;}cov_2dp9rvnwbz().s[306]++;oldPasswords.push(user.password);const newPassword=(cov_2dp9rvnwbz().s[307]++,this.data.password);// compare the new password hash with all old password hashes
const promises=(cov_2dp9rvnwbz().s[308]++,oldPasswords.map(function(hash){cov_2dp9rvnwbz().f[73]++;cov_2dp9rvnwbz().s[309]++;return passwordCrypto.compare(newPassword,hash).then(result=>{cov_2dp9rvnwbz().f[74]++;cov_2dp9rvnwbz().s[310]++;if(result){cov_2dp9rvnwbz().b[112][0]++;cov_2dp9rvnwbz().s[311]++;// reject if there is a match
return Promise.reject('REPEAT_PASSWORD');}else{cov_2dp9rvnwbz().b[112][1]++;}cov_2dp9rvnwbz().s[312]++;return Promise.resolve();});}));// wait for all comparisons to complete
cov_2dp9rvnwbz().s[313]++;return Promise.all(promises).then(()=>{cov_2dp9rvnwbz().f[75]++;cov_2dp9rvnwbz().s[314]++;return Promise.resolve();}).catch(err=>{cov_2dp9rvnwbz().f[76]++;cov_2dp9rvnwbz().s[315]++;if(err==='REPEAT_PASSWORD'){cov_2dp9rvnwbz().b[113][0]++;cov_2dp9rvnwbz().s[316]++;// a match was found
return Promise.reject(new Parse.Error(Parse.Error.VALIDATION_ERROR,`New password should not be the same as last ${this.config.passwordPolicy.maxPasswordHistory} passwords.`));}else{cov_2dp9rvnwbz().b[113][1]++;}cov_2dp9rvnwbz().s[317]++;throw err;});});}else{cov_2dp9rvnwbz().b[108][1]++;}cov_2dp9rvnwbz().s[318]++;return Promise.resolve();};cov_2dp9rvnwbz().s[319]++;RestWrite.prototype.createSessionTokenIfNeeded=function(){cov_2dp9rvnwbz().f[77]++;cov_2dp9rvnwbz().s[320]++;if(this.className!=='_User'){cov_2dp9rvnwbz().b[114][0]++;cov_2dp9rvnwbz().s[321]++;return;}else{cov_2dp9rvnwbz().b[114][1]++;}// Don't generate session for updating user (this.query is set) unless authData exists
cov_2dp9rvnwbz().s[322]++;if((cov_2dp9rvnwbz().b[116][0]++,this.query)&&(cov_2dp9rvnwbz().b[116][1]++,!this.data.authData)){cov_2dp9rvnwbz().b[115][0]++;cov_2dp9rvnwbz().s[323]++;return;}else{cov_2dp9rvnwbz().b[115][1]++;}// Don't generate new sessionToken if linking via sessionToken
cov_2dp9rvnwbz().s[324]++;if((cov_2dp9rvnwbz().b[118][0]++,this.auth.user)&&(cov_2dp9rvnwbz().b[118][1]++,this.data.authData)){cov_2dp9rvnwbz().b[117][0]++;cov_2dp9rvnwbz().s[325]++;return;}else{cov_2dp9rvnwbz().b[117][1]++;}cov_2dp9rvnwbz().s[326]++;if((cov_2dp9rvnwbz().b[120][0]++,!this.storage['authProvider'])&&(cov_2dp9rvnwbz().b[120][1]++,// signup call, with
this.config.preventLoginWithUnverifiedEmail)&&(cov_2dp9rvnwbz().b[120][2]++,// no login without verification
this.config.verifyUserEmails)){cov_2dp9rvnwbz().b[119][0]++;cov_2dp9rvnwbz().s[327]++;// verification is on
return;// do not create the session token in that case!
}else{cov_2dp9rvnwbz().b[119][1]++;}cov_2dp9rvnwbz().s[328]++;return this.createSessionToken();};cov_2dp9rvnwbz().s[329]++;RestWrite.prototype.createSessionToken=async function(){cov_2dp9rvnwbz().f[78]++;cov_2dp9rvnwbz().s[330]++;// cloud installationId from Cloud Code,
// never create session tokens from there.
if((cov_2dp9rvnwbz().b[122][0]++,this.auth.installationId)&&(cov_2dp9rvnwbz().b[122][1]++,this.auth.installationId==='cloud')){cov_2dp9rvnwbz().b[121][0]++;cov_2dp9rvnwbz().s[331]++;return;}else{cov_2dp9rvnwbz().b[121][1]++;}cov_2dp9rvnwbz().s[332]++;if((cov_2dp9rvnwbz().b[124][0]++,this.storage['authProvider']==null)&&(cov_2dp9rvnwbz().b[124][1]++,this.data.authData)){cov_2dp9rvnwbz().b[123][0]++;cov_2dp9rvnwbz().s[333]++;this.storage['authProvider']=Object.keys(this.data.authData).join(',');}else{cov_2dp9rvnwbz().b[123][1]++;}const{sessionData,createSession}=(cov_2dp9rvnwbz().s[334]++,RestWrite.createSession(this.config,{userId:this.objectId(),createdWith:{action:this.storage['authProvider']?(cov_2dp9rvnwbz().b[125][0]++,'login'):(cov_2dp9rvnwbz().b[125][1]++,'signup'),authProvider:(cov_2dp9rvnwbz().b[126][0]++,this.storage['authProvider'])||(cov_2dp9rvnwbz().b[126][1]++,'password')},installationId:this.auth.installationId}));cov_2dp9rvnwbz().s[335]++;if((cov_2dp9rvnwbz().b[128][0]++,this.response)&&(cov_2dp9rvnwbz().b[128][1]++,this.response.response)){cov_2dp9rvnwbz().b[127][0]++;cov_2dp9rvnwbz().s[336]++;this.response.response.sessionToken=sessionData.sessionToken;}else{cov_2dp9rvnwbz().b[127][1]++;}cov_2dp9rvnwbz().s[337]++;return createSession();};cov_2dp9rvnwbz().s[338]++;RestWrite.createSession=function(config,{userId,createdWith,installationId,additionalSessionData}){cov_2dp9rvnwbz().f[79]++;const token=(cov_2dp9rvnwbz().s[339]++,'r:'+cryptoUtils.newToken());const expiresAt=(cov_2dp9rvnwbz().s[340]++,config.generateSessionExpiresAt());const sessionData=(cov_2dp9rvnwbz().s[341]++,{sessionToken:token,user:{__type:'Pointer',className:'_User',objectId:userId},createdWith,expiresAt:Parse._encode(expiresAt)});cov_2dp9rvnwbz().s[342]++;if(installationId){cov_2dp9rvnwbz().b[129][0]++;cov_2dp9rvnwbz().s[343]++;sessionData.installationId=installationId;}else{cov_2dp9rvnwbz().b[129][1]++;}cov_2dp9rvnwbz().s[344]++;Object.assign(sessionData,additionalSessionData);cov_2dp9rvnwbz().s[345]++;return{sessionData,createSession:()=>{cov_2dp9rvnwbz().f[80]++;cov_2dp9rvnwbz().s[346]++;return new RestWrite(config,Auth.master(config),'_Session',null,sessionData).execute();}};};// Delete email reset tokens if user is changing password or email.
cov_2dp9rvnwbz().s[347]++;RestWrite.prototype.deleteEmailResetTokenIfNeeded=function(){cov_2dp9rvnwbz().f[81]++;cov_2dp9rvnwbz().s[348]++;if((cov_2dp9rvnwbz().b[131][0]++,this.className!=='_User')||(cov_2dp9rvnwbz().b[131][1]++,this.query===null)){cov_2dp9rvnwbz().b[130][0]++;cov_2dp9rvnwbz().s[349]++;// null query means create
return;}else{cov_2dp9rvnwbz().b[130][1]++;}cov_2dp9rvnwbz().s[350]++;if((cov_2dp9rvnwbz().b[133][0]++,'password'in this.data)||(cov_2dp9rvnwbz().b[133][1]++,'email'in this.data)){cov_2dp9rvnwbz().b[132][0]++;const addOps=(cov_2dp9rvnwbz().s[351]++,{_perishable_token:{__op:'Delete'},_perishable_token_expires_at:{__op:'Delete'}});cov_2dp9rvnwbz().s[352]++;this.data=Object.assign(this.data,addOps);}else{cov_2dp9rvnwbz().b[132][1]++;}};cov_2dp9rvnwbz().s[353]++;RestWrite.prototype.destroyDuplicatedSessions=function(){cov_2dp9rvnwbz().f[82]++;cov_2dp9rvnwbz().s[354]++;// Only for _Session, and at creation time
if((cov_2dp9rvnwbz().b[135][0]++,this.className!='_Session')||(cov_2dp9rvnwbz().b[135][1]++,this.query)){cov_2dp9rvnwbz().b[134][0]++;cov_2dp9rvnwbz().s[355]++;return;}else{cov_2dp9rvnwbz().b[134][1]++;}// Destroy the sessions in 'Background'
const{user,installationId,sessionToken}=(cov_2dp9rvnwbz().s[356]++,this.data);cov_2dp9rvnwbz().s[357]++;if((cov_2dp9rvnwbz().b[137][0]++,!user)||(cov_2dp9rvnwbz().b[137][1]++,!installationId)){cov_2dp9rvnwbz().b[136][0]++;cov_2dp9rvnwbz().s[358]++;return;}else{cov_2dp9rvnwbz().b[136][1]++;}cov_2dp9rvnwbz().s[359]++;if(!user.objectId){cov_2dp9rvnwbz().b[138][0]++;cov_2dp9rvnwbz().s[360]++;return;}else{cov_2dp9rvnwbz().b[138][1]++;}cov_2dp9rvnwbz().s[361]++;this.config.database.destroy('_Session',{user,installationId,sessionToken:{$ne:sessionToken}},{},this.validSchemaController);};// Handles any followup logic
cov_2dp9rvnwbz().s[362]++;RestWrite.prototype.handleFollowup=function(){cov_2dp9rvnwbz().f[83]++;cov_2dp9rvnwbz().s[363]++;if((cov_2dp9rvnwbz().b[140][0]++,this.storage)&&(cov_2dp9rvnwbz().b[140][1]++,this.storage['clearSessions'])&&(cov_2dp9rvnwbz().b[140][2]++,this.config.revokeSessionOnPasswordReset)){cov_2dp9rvnwbz().b[139][0]++;var sessionQuery=(cov_2dp9rvnwbz().s[364]++,{user:{__type:'Pointer',className:'_User',objectId:this.objectId()}});cov_2dp9rvnwbz().s[365]++;delete this.storage['clearSessions'];cov_2dp9rvnwbz().s[366]++;return this.config.database.destroy('_Session',sessionQuery).then(this.handleFollowup.bind(this));}else{cov_2dp9rvnwbz().b[139][1]++;}cov_2dp9rvnwbz().s[367]++;if((cov_2dp9rvnwbz().b[142][0]++,this.storage)&&(cov_2dp9rvnwbz().b[142][1]++,this.storage['generateNewSession'])){cov_2dp9rvnwbz().b[141][0]++;cov_2dp9rvnwbz().s[368]++;delete this.storage['generateNewSession'];cov_2dp9rvnwbz().s[369]++;return this.createSessionToken().then(this.handleFollowup.bind(this));}else{cov_2dp9rvnwbz().b[141][1]++;}cov_2dp9rvnwbz().s[370]++;if((cov_2dp9rvnwbz().b[144][0]++,this.storage)&&(cov_2dp9rvnwbz().b[144][1]++,this.storage['sendVerificationEmail'])){cov_2dp9rvnwbz().b[143][0]++;cov_2dp9rvnwbz().s[371]++;delete this.storage['sendVerificationEmail'];// Fire and forget!
cov_2dp9rvnwbz().s[372]++;this.config.userController.sendVerificationEmail(this.data);cov_2dp9rvnwbz().s[373]++;return this.handleFollowup.bind(this);}else{cov_2dp9rvnwbz().b[143][1]++;}};// Handles the _Session class specialness.
// Does nothing if this isn't an _Session object.
cov_2dp9rvnwbz().s[374]++;RestWrite.prototype.handleSession=function(){cov_2dp9rvnwbz().f[84]++;cov_2dp9rvnwbz().s[375]++;if((cov_2dp9rvnwbz().b[146][0]++,this.response)||(cov_2dp9rvnwbz().b[146][1]++,this.className!=='_Session')){cov_2dp9rvnwbz().b[145][0]++;cov_2dp9rvnwbz().s[376]++;return;}else{cov_2dp9rvnwbz().b[145][1]++;}cov_2dp9rvnwbz().s[377]++;if((cov_2dp9rvnwbz().b[148][0]++,!this.auth.user)&&(cov_2dp9rvnwbz().b[148][1]++,!this.auth.isMaster)){cov_2dp9rvnwbz().b[147][0]++;cov_2dp9rvnwbz().s[378]++;throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN,'Session token required.');}else{cov_2dp9rvnwbz().b[147][1]++;}// TODO: Verify proper error to throw
cov_2dp9rvnwbz().s[379]++;if(this.data.ACL){cov_2dp9rvnwbz().b[149][0]++;cov_2dp9rvnwbz().s[380]++;throw new Parse.Error(Parse.Error.INVALID_KEY_NAME,'Cannot set '+'ACL on a Session.');}else{cov_2dp9rvnwbz().b[149][1]++;}cov_2dp9rvnwbz().s[381]++;if(this.query){cov_2dp9rvnwbz().b[150][0]++;cov_2dp9rvnwbz().s[382]++;if((cov_2dp9rvnwbz().b[152][0]++,this.data.user)&&(cov_2dp9rvnwbz().b[152][1]++,!this.auth.isMaster)&&(cov_2dp9rvnwbz().b[152][2]++,this.data.user.objectId!=this.auth.user.id)){cov_2dp9rvnwbz().b[151][0]++;cov_2dp9rvnwbz().s[383]++;throw new Parse.Error(Parse.Error.INVALID_KEY_NAME);}else{cov_2dp9rvnwbz().b[151][1]++;cov_2dp9rvnwbz().s[384]++;if(this.data.installationId){cov_2dp9rvnwbz().b[153][0]++;cov_2dp9rvnwbz().s[385]++;throw new Parse.Error(Parse.Error.INVALID_KEY_NAME);}else{cov_2dp9rvnwbz().b[153][1]++;cov_2dp9rvnwbz().s[386]++;if(this.data.sessionToken){cov_2dp9rvnwbz().b[154][0]++;cov_2dp9rvnwbz().s[387]++;throw new Parse.Error(Parse.Error.INVALID_KEY_NAME);}else{cov_2dp9rvnwbz().b[154][1]++;}}}}else{cov_2dp9rvnwbz().b[150][1]++;}cov_2dp9rvnwbz().s[388]++;if((cov_2dp9rvnwbz().b[156][0]++,!this.query)&&(cov_2dp9rvnwbz().b[156][1]++,!this.auth.isMaster)){cov_2dp9rvnwbz().b[155][0]++;const additionalSessionData=(cov_2dp9rvnwbz().s[389]++,{});cov_2dp9rvnwbz().s[390]++;for(var key in this.data){cov_2dp9rvnwbz().s[391]++;if((cov_2dp9rvnwbz().b[158][0]++,key==='objectId')||(cov_2dp9rvnwbz().b[158][1]++,key==='user')){cov_2dp9rvnwbz().b[157][0]++;cov_2dp9rvnwbz().s[392]++;continue;}else{cov_2dp9rvnwbz().b[157][1]++;}cov_2dp9rvnwbz().s[393]++;additionalSessionData[key]=this.data[key];}const{sessionData,createSession}=(cov_2dp9rvnwbz().s[394]++,RestWrite.createSession(this.config,{userId:this.auth.user.id,createdWith:{action:'create'},additionalSessionData}));cov_2dp9rvnwbz().s[395]++;return createSession().then(results=>{cov_2dp9rvnwbz().f[85]++;cov_2dp9rvnwbz().s[396]++;if(!results.response){cov_2dp9rvnwbz().b[159][0]++;cov_2dp9rvnwbz().s[397]++;throw new Parse.Error(Parse.Error.INTERNAL_SERVER_ERROR,'Error creating session.');}else{cov_2dp9rvnwbz().b[159][1]++;}cov_2dp9rvnwbz().s[398]++;sessionData['objectId']=results.response['objectId'];cov_2dp9rvnwbz().s[399]++;this.response={status:201,location:results.location,response:sessionData};});}else{cov_2dp9rvnwbz().b[155][1]++;}};// Handles the _Installation class specialness.
// Does nothing if this isn't an installation object.
// If an installation is found, this can mutate this.query and turn a create
// into an update.
// Returns a promise for when we're done if it can't finish this tick.
cov_2dp9rvnwbz().s[400]++;RestWrite.prototype.handleInstallation=function(){cov_2dp9rvnwbz().f[86]++;cov_2dp9rvnwbz().s[401]++;if((cov_2dp9rvnwbz().b[161][0]++,this.response)||(cov_2dp9rvnwbz().b[161][1]++,this.className!=='_Installation')){cov_2dp9rvnwbz().b[160][0]++;cov_2dp9rvnwbz().s[402]++;return;}else{cov_2dp9rvnwbz().b[160][1]++;}cov_2dp9rvnwbz().s[403]++;if((cov_2dp9rvnwbz().b[163][0]++,!this.query)&&(cov_2dp9rvnwbz().b[163][1]++,!this.data.deviceToken)&&(cov_2dp9rvnwbz().b[163][2]++,!this.data.installationId)&&(cov_2dp9rvnwbz().b[163][3]++,!this.auth.installationId)){cov_2dp9rvnwbz().b[162][0]++;cov_2dp9rvnwbz().s[404]++;throw new Parse.Error(135,'at least one ID field (deviceToken, installationId) '+'must be specified in this operation');}else{cov_2dp9rvnwbz().b[162][1]++;}// If the device token is 64 characters long, we assume it is for iOS
// and lowercase it.
cov_2dp9rvnwbz().s[405]++;if((cov_2dp9rvnwbz().b[165][0]++,this.data.deviceToken)&&(cov_2dp9rvnwbz().b[165][1]++,this.data.deviceToken.length==64)){cov_2dp9rvnwbz().b[164][0]++;cov_2dp9rvnwbz().s[406]++;this.data.deviceToken=this.data.deviceToken.toLowerCase();}else{cov_2dp9rvnwbz().b[164][1]++;}// We lowercase the installationId if present
cov_2dp9rvnwbz().s[407]++;if(this.data.installationId){cov_2dp9rvnwbz().b[166][0]++;cov_2dp9rvnwbz().s[408]++;this.data.installationId=this.data.installationId.toLowerCase();}else{cov_2dp9rvnwbz().b[166][1]++;}let installationId=(cov_2dp9rvnwbz().s[409]++,this.data.installationId);// If data.installationId is not set and we're not master, we can lookup in auth
cov_2dp9rvnwbz().s[410]++;if((cov_2dp9rvnwbz().b[168][0]++,!installationId)&&(cov_2dp9rvnwbz().b[168][1]++,!this.auth.isMaster)){cov_2dp9rvnwbz().b[167][0]++;cov_2dp9rvnwbz().s[411]++;installationId=this.auth.installationId;}else{cov_2dp9rvnwbz().b[167][1]++;}cov_2dp9rvnwbz().s[412]++;if(installationId){cov_2dp9rvnwbz().b[169][0]++;cov_2dp9rvnwbz().s[413]++;installationId=installationId.toLowerCase();}else{cov_2dp9rvnwbz().b[169][1]++;}// Updating _Installation but not updating anything critical
cov_2dp9rvnwbz().s[414]++;if((cov_2dp9rvnwbz().b[171][0]++,this.query)&&(cov_2dp9rvnwbz().b[171][1]++,!this.data.deviceToken)&&(cov_2dp9rvnwbz().b[171][2]++,!installationId)&&(cov_2dp9rvnwbz().b[171][3]++,!this.data.deviceType)){cov_2dp9rvnwbz().b[170][0]++;cov_2dp9rvnwbz().s[415]++;return;}else{cov_2dp9rvnwbz().b[170][1]++;}var promise=(cov_2dp9rvnwbz().s[416]++,Promise.resolve());var idMatch;// Will be a match on either objectId or installationId
var objectIdMatch;var installationIdMatch;var deviceTokenMatches=(cov_2dp9rvnwbz().s[417]++,[]);// Instead of issuing 3 reads, let's do it with one OR.
const orQueries=(cov_2dp9rvnwbz().s[418]++,[]);cov_2dp9rvnwbz().s[419]++;if((cov_2dp9rvnwbz().b[173][0]++,this.query)&&(cov_2dp9rvnwbz().b[173][1]++,this.query.objectId)){cov_2dp9rvnwbz().b[172][0]++;cov_2dp9rvnwbz().s[420]++;orQueries.push({objectId:this.query.objectId});}else{cov_2dp9rvnwbz().b[172][1]++;}cov_2dp9rvnwbz().s[421]++;if(installationId){cov_2dp9rvnwbz().b[174][0]++;cov_2dp9rvnwbz().s[422]++;orQueries.push({installationId:installationId});}else{cov_2dp9rvnwbz().b[174][1]++;}cov_2dp9rvnwbz().s[423]++;if(this.data.deviceToken){cov_2dp9rvnwbz().b[175][0]++;cov_2dp9rvnwbz().s[424]++;orQueries.push({deviceToken:this.data.deviceToken});}else{cov_2dp9rvnwbz().b[175][1]++;}cov_2dp9rvnwbz().s[425]++;if(orQueries.length==0){cov_2dp9rvnwbz().b[176][0]++;cov_2dp9rvnwbz().s[426]++;return;}else{cov_2dp9rvnwbz().b[176][1]++;}cov_2dp9rvnwbz().s[427]++;promise=promise.then(()=>{cov_2dp9rvnwbz().f[87]++;cov_2dp9rvnwbz().s[428]++;return this.config.database.find('_Installation',{$or:orQueries},{});}).then(results=>{cov_2dp9rvnwbz().f[88]++;cov_2dp9rvnwbz().s[429]++;results.forEach(result=>{cov_2dp9rvnwbz().f[89]++;cov_2dp9rvnwbz().s[430]++;if((cov_2dp9rvnwbz().b[178][0]++,this.query)&&(cov_2dp9rvnwbz().b[178][1]++,this.query.objectId)&&(cov_2dp9rvnwbz().b[178][2]++,result.objectId==this.query.objectId)){cov_2dp9rvnwbz().b[177][0]++;cov_2dp9rvnwbz().s[431]++;objectIdMatch=result;}else{cov_2dp9rvnwbz().b[177][1]++;}cov_2dp9rvnwbz().s[432]++;if(result.installationId==installationId){cov_2dp9rvnwbz().b[179][0]++;cov_2dp9rvnwbz().s[433]++;installationIdMatch=result;}else{cov_2dp9rvnwbz().b[179][1]++;}cov_2dp9rvnwbz().s[434]++;if(result.deviceToken==this.data.deviceToken){cov_2dp9rvnwbz().b[180][0]++;cov_2dp9rvnwbz().s[435]++;deviceTokenMatches.push(result);}else{cov_2dp9rvnwbz().b[180][1]++;}});// Sanity checks when running a query
cov_2dp9rvnwbz().s[436]++;if((cov_2dp9rvnwbz().b[182][0]++,this.query)&&(cov_2dp9rvnwbz().b[182][1]++,this.query.objectId)){cov_2dp9rvnwbz().b[181][0]++;cov_2dp9rvnwbz().s[437]++;if(!objectIdMatch){cov_2dp9rvnwbz().b[183][0]++;cov_2dp9rvnwbz().s[438]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,'Object not found for update.');}else{cov_2dp9rvnwbz().b[183][1]++;}cov_2dp9rvnwbz().s[439]++;if((cov_2dp9rvnwbz().b[185][0]++,this.data.installationId)&&(cov_2dp9rvnwbz().b[185][1]++,objectIdMatch.installationId)&&(cov_2dp9rvnwbz().b[185][2]++,this.data.installationId!==objectIdMatch.installationId)){cov_2dp9rvnwbz().b[184][0]++;cov_2dp9rvnwbz().s[440]++;throw new Parse.Error(136,'installationId may not be changed in this '+'operation');}else{cov_2dp9rvnwbz().b[184][1]++;}cov_2dp9rvnwbz().s[441]++;if((cov_2dp9rvnwbz().b[187][0]++,this.data.deviceToken)&&(cov_2dp9rvnwbz().b[187][1]++,objectIdMatch.deviceToken)&&(cov_2dp9rvnwbz().b[187][2]++,this.data.deviceToken!==objectIdMatch.deviceToken)&&(cov_2dp9rvnwbz().b[187][3]++,!this.data.installationId)&&(cov_2dp9rvnwbz().b[187][4]++,!objectIdMatch.installationId)){cov_2dp9rvnwbz().b[186][0]++;cov_2dp9rvnwbz().s[442]++;throw new Parse.Error(136,'deviceToken may not be changed in this '+'operation');}else{cov_2dp9rvnwbz().b[186][1]++;}cov_2dp9rvnwbz().s[443]++;if((cov_2dp9rvnwbz().b[189][0]++,this.data.deviceType)&&(cov_2dp9rvnwbz().b[189][1]++,this.data.deviceType)&&(cov_2dp9rvnwbz().b[189][2]++,this.data.deviceType!==objectIdMatch.deviceType)){cov_2dp9rvnwbz().b[188][0]++;cov_2dp9rvnwbz().s[444]++;throw new Parse.Error(136,'deviceType may not be changed in this '+'operation');}else{cov_2dp9rvnwbz().b[188][1]++;}}else{cov_2dp9rvnwbz().b[181][1]++;}cov_2dp9rvnwbz().s[445]++;if((cov_2dp9rvnwbz().b[191][0]++,this.query)&&(cov_2dp9rvnwbz().b[191][1]++,this.query.objectId)&&(cov_2dp9rvnwbz().b[191][2]++,objectIdMatch)){cov_2dp9rvnwbz().b[190][0]++;cov_2dp9rvnwbz().s[446]++;idMatch=objectIdMatch;}else{cov_2dp9rvnwbz().b[190][1]++;}cov_2dp9rvnwbz().s[447]++;if((cov_2dp9rvnwbz().b[193][0]++,installationId)&&(cov_2dp9rvnwbz().b[193][1]++,installationIdMatch)){cov_2dp9rvnwbz().b[192][0]++;cov_2dp9rvnwbz().s[448]++;idMatch=installationIdMatch;}else{cov_2dp9rvnwbz().b[192][1]++;}// need to specify deviceType only if it's new
cov_2dp9rvnwbz().s[449]++;if((cov_2dp9rvnwbz().b[195][0]++,!this.query)&&(cov_2dp9rvnwbz().b[195][1]++,!this.data.deviceType)&&(cov_2dp9rvnwbz().b[195][2]++,!idMatch)){cov_2dp9rvnwbz().b[194][0]++;cov_2dp9rvnwbz().s[450]++;throw new Parse.Error(135,'deviceType must be specified in this operation');}else{cov_2dp9rvnwbz().b[194][1]++;}}).then(()=>{cov_2dp9rvnwbz().f[90]++;cov_2dp9rvnwbz().s[451]++;if(!idMatch){cov_2dp9rvnwbz().b[196][0]++;cov_2dp9rvnwbz().s[452]++;if(!deviceTokenMatches.length){cov_2dp9rvnwbz().b[197][0]++;cov_2dp9rvnwbz().s[453]++;return;}else{cov_2dp9rvnwbz().b[197][1]++;cov_2dp9rvnwbz().s[454]++;if((cov_2dp9rvnwbz().b[199][0]++,deviceTokenMatches.length==1)&&((cov_2dp9rvnwbz().b[199][1]++,!deviceTokenMatches[0]['installationId'])||(cov_2dp9rvnwbz().b[199][2]++,!installationId))){cov_2dp9rvnwbz().b[198][0]++;cov_2dp9rvnwbz().s[455]++;// Single match on device token but none on installationId, and either
// the passed object or the match is missing an installationId, so we
// can just return the match.
return deviceTokenMatches[0]['objectId'];}else{cov_2dp9rvnwbz().b[198][1]++;cov_2dp9rvnwbz().s[456]++;if(!this.data.installationId){cov_2dp9rvnwbz().b[200][0]++;cov_2dp9rvnwbz().s[457]++;throw new Parse.Error(132,'Must specify installationId when deviceToken '+'matches multiple Installation objects');}else{cov_2dp9rvnwbz().b[200][1]++;// Multiple device token matches and we specified an installation ID,
// or a single match where both the passed and matching objects have
// an installation ID. Try cleaning out old installations that match
// the deviceToken, and return nil to signal that a new object should
// be created.
var delQuery=(cov_2dp9rvnwbz().s[458]++,{deviceToken:this.data.deviceToken,installationId:{$ne:installationId}});cov_2dp9rvnwbz().s[459]++;if(this.data.appIdentifier){cov_2dp9rvnwbz().b[201][0]++;cov_2dp9rvnwbz().s[460]++;delQuery['appIdentifier']=this.data.appIdentifier;}else{cov_2dp9rvnwbz().b[201][1]++;}cov_2dp9rvnwbz().s[461]++;this.config.database.destroy('_Installation',delQuery).catch(err=>{cov_2dp9rvnwbz().f[91]++;cov_2dp9rvnwbz().s[462]++;if(err.code==Parse.Error.OBJECT_NOT_FOUND){cov_2dp9rvnwbz().b[202][0]++;cov_2dp9rvnwbz().s[463]++;// no deletions were made. Can be ignored.
return;}else{cov_2dp9rvnwbz().b[202][1]++;}// rethrow the error
cov_2dp9rvnwbz().s[464]++;throw err;});cov_2dp9rvnwbz().s[465]++;return;}}}}else{cov_2dp9rvnwbz().b[196][1]++;cov_2dp9rvnwbz().s[466]++;if((cov_2dp9rvnwbz().b[204][0]++,deviceTokenMatches.length==1)&&(cov_2dp9rvnwbz().b[204][1]++,!deviceTokenMatches[0]['installationId'])){cov_2dp9rvnwbz().b[203][0]++;// Exactly one device token match and it doesn't have an installation
// ID. This is the one case where we want to merge with the existing
// object.
const delQuery=(cov_2dp9rvnwbz().s[467]++,{objectId:idMatch.objectId});cov_2dp9rvnwbz().s[468]++;return this.config.database.destroy('_Installation',delQuery).then(()=>{cov_2dp9rvnwbz().f[92]++;cov_2dp9rvnwbz().s[469]++;return deviceTokenMatches[0]['objectId'];}).catch(err=>{cov_2dp9rvnwbz().f[93]++;cov_2dp9rvnwbz().s[470]++;if(err.code==Parse.Error.OBJECT_NOT_FOUND){cov_2dp9rvnwbz().b[205][0]++;cov_2dp9rvnwbz().s[471]++;// no deletions were made. Can be ignored
return;}else{cov_2dp9rvnwbz().b[205][1]++;}// rethrow the error
cov_2dp9rvnwbz().s[472]++;throw err;});}else{cov_2dp9rvnwbz().b[203][1]++;cov_2dp9rvnwbz().s[473]++;if((cov_2dp9rvnwbz().b[207][0]++,this.data.deviceToken)&&(cov_2dp9rvnwbz().b[207][1]++,idMatch.deviceToken!=this.data.deviceToken)){cov_2dp9rvnwbz().b[206][0]++;// We're setting the device token on an existing installation, so
// we should try cleaning out old installations that match this
// device token.
const delQuery=(cov_2dp9rvnwbz().s[474]++,{deviceToken:this.data.deviceToken});// We have a unique install Id, use that to preserve
// the interesting installation
cov_2dp9rvnwbz().s[475]++;if(this.data.installationId){cov_2dp9rvnwbz().b[208][0]++;cov_2dp9rvnwbz().s[476]++;delQuery['installationId']={$ne:this.data.installationId};}else{cov_2dp9rvnwbz().b[208][1]++;cov_2dp9rvnwbz().s[477]++;if((cov_2dp9rvnwbz().b[210][0]++,idMatch.objectId)&&(cov_2dp9rvnwbz().b[210][1]++,this.data.objectId)&&(cov_2dp9rvnwbz().b[210][2]++,idMatch.objectId==this.data.objectId)){cov_2dp9rvnwbz().b[209][0]++;cov_2dp9rvnwbz().s[478]++;// we passed an objectId, preserve that instalation
delQuery['objectId']={$ne:idMatch.objectId};}else{cov_2dp9rvnwbz().b[209][1]++;cov_2dp9rvnwbz().s[479]++;// What to do here? can't really clean up everything...
return idMatch.objectId;}}cov_2dp9rvnwbz().s[480]++;if(this.data.appIdentifier){cov_2dp9rvnwbz().b[211][0]++;cov_2dp9rvnwbz().s[481]++;delQuery['appIdentifier']=this.data.appIdentifier;}else{cov_2dp9rvnwbz().b[211][1]++;}cov_2dp9rvnwbz().s[482]++;this.config.database.destroy('_Installation',delQuery).catch(err=>{cov_2dp9rvnwbz().f[94]++;cov_2dp9rvnwbz().s[483]++;if(err.code==Parse.Error.OBJECT_NOT_FOUND){cov_2dp9rvnwbz().b[212][0]++;cov_2dp9rvnwbz().s[484]++;// no deletions were made. Can be ignored.
return;}else{cov_2dp9rvnwbz().b[212][1]++;}// rethrow the error
cov_2dp9rvnwbz().s[485]++;throw err;});}else{cov_2dp9rvnwbz().b[206][1]++;}// In non-merge scenarios, just return the installation match id
cov_2dp9rvnwbz().s[486]++;return idMatch.objectId;}}}).then(objId=>{cov_2dp9rvnwbz().f[95]++;cov_2dp9rvnwbz().s[487]++;if(objId){cov_2dp9rvnwbz().b[213][0]++;cov_2dp9rvnwbz().s[488]++;this.query={objectId:objId};cov_2dp9rvnwbz().s[489]++;delete this.data.objectId;cov_2dp9rvnwbz().s[490]++;delete this.data.createdAt;}else{cov_2dp9rvnwbz().b[213][1]++;}// TODO: Validate ops (add/remove on channels, $inc on badge, etc.)
});cov_2dp9rvnwbz().s[491]++;return promise;};// If we short-circuited the object response - then we need to make sure we expand all the files,
// since this might not have a query, meaning it won't return the full result back.
// TODO: (nlutsenko) This should die when we move to per-class based controllers on _Session/_User
cov_2dp9rvnwbz().s[492]++;RestWrite.prototype.expandFilesForExistingObjects=function(){cov_2dp9rvnwbz().f[96]++;cov_2dp9rvnwbz().s[493]++;// Check whether we have a short-circuited response - only then run expansion.
if((cov_2dp9rvnwbz().b[215][0]++,this.response)&&(cov_2dp9rvnwbz().b[215][1]++,this.response.response)){cov_2dp9rvnwbz().b[214][0]++;cov_2dp9rvnwbz().s[494]++;this.config.filesController.expandFilesInObject(this.config,this.response.response);}else{cov_2dp9rvnwbz().b[214][1]++;}};cov_2dp9rvnwbz().s[495]++;RestWrite.prototype.runDatabaseOperation=function(){cov_2dp9rvnwbz().f[97]++;cov_2dp9rvnwbz().s[496]++;if(this.response){cov_2dp9rvnwbz().b[216][0]++;cov_2dp9rvnwbz().s[497]++;return;}else{cov_2dp9rvnwbz().b[216][1]++;}cov_2dp9rvnwbz().s[498]++;if(this.className==='_Role'){cov_2dp9rvnwbz().b[217][0]++;cov_2dp9rvnwbz().s[499]++;this.config.cacheController.role.clear();}else{cov_2dp9rvnwbz().b[217][1]++;}cov_2dp9rvnwbz().s[500]++;if((cov_2dp9rvnwbz().b[219][0]++,this.className==='_User')&&(cov_2dp9rvnwbz().b[219][1]++,this.query)&&(cov_2dp9rvnwbz().b[219][2]++,this.auth.isUnauthenticated())){cov_2dp9rvnwbz().b[218][0]++;cov_2dp9rvnwbz().s[501]++;throw new Parse.Error(Parse.Error.SESSION_MISSING,`Cannot modify user ${this.query.objectId}.`);}else{cov_2dp9rvnwbz().b[218][1]++;}cov_2dp9rvnwbz().s[502]++;if((cov_2dp9rvnwbz().b[221][0]++,this.className==='_Product')&&(cov_2dp9rvnwbz().b[221][1]++,this.data.download)){cov_2dp9rvnwbz().b[220][0]++;cov_2dp9rvnwbz().s[503]++;this.data.downloadName=this.data.download.name;}else{cov_2dp9rvnwbz().b[220][1]++;}// TODO: Add better detection for ACL, ensuring a user can't be locked from
//       their own user record.
cov_2dp9rvnwbz().s[504]++;if((cov_2dp9rvnwbz().b[223][0]++,this.data.ACL)&&(cov_2dp9rvnwbz().b[223][1]++,this.data.ACL['*unresolved'])){cov_2dp9rvnwbz().b[222][0]++;cov_2dp9rvnwbz().s[505]++;throw new Parse.Error(Parse.Error.INVALID_ACL,'Invalid ACL.');}else{cov_2dp9rvnwbz().b[222][1]++;}cov_2dp9rvnwbz().s[506]++;if(this.query){cov_2dp9rvnwbz().b[224][0]++;cov_2dp9rvnwbz().s[507]++;// Force the user to not lockout
// Matched with parse.com
if((cov_2dp9rvnwbz().b[226][0]++,this.className==='_User')&&(cov_2dp9rvnwbz().b[226][1]++,this.data.ACL)&&(cov_2dp9rvnwbz().b[226][2]++,this.auth.isMaster!==true)){cov_2dp9rvnwbz().b[225][0]++;cov_2dp9rvnwbz().s[508]++;this.data.ACL[this.query.objectId]={read:true,write:true};}else{cov_2dp9rvnwbz().b[225][1]++;}// update password timestamp if user password is being changed
cov_2dp9rvnwbz().s[509]++;if((cov_2dp9rvnwbz().b[228][0]++,this.className==='_User')&&(cov_2dp9rvnwbz().b[228][1]++,this.data._hashed_password)&&(cov_2dp9rvnwbz().b[228][2]++,this.config.passwordPolicy)&&(cov_2dp9rvnwbz().b[228][3]++,this.config.passwordPolicy.maxPasswordAge)){cov_2dp9rvnwbz().b[227][0]++;cov_2dp9rvnwbz().s[510]++;this.data._password_changed_at=Parse._encode(new Date());}else{cov_2dp9rvnwbz().b[227][1]++;}// Ignore createdAt when update
cov_2dp9rvnwbz().s[511]++;delete this.data.createdAt;let defer=(cov_2dp9rvnwbz().s[512]++,Promise.resolve());// if password history is enabled then save the current password to history
cov_2dp9rvnwbz().s[513]++;if((cov_2dp9rvnwbz().b[230][0]++,this.className==='_User')&&(cov_2dp9rvnwbz().b[230][1]++,this.data._hashed_password)&&(cov_2dp9rvnwbz().b[230][2]++,this.config.passwordPolicy)&&(cov_2dp9rvnwbz().b[230][3]++,this.config.passwordPolicy.maxPasswordHistory)){cov_2dp9rvnwbz().b[229][0]++;cov_2dp9rvnwbz().s[514]++;defer=this.config.database.find('_User',{objectId:this.objectId()},{keys:['_password_history','_hashed_password']}).then(results=>{cov_2dp9rvnwbz().f[98]++;cov_2dp9rvnwbz().s[515]++;if(results.length!=1){cov_2dp9rvnwbz().b[231][0]++;cov_2dp9rvnwbz().s[516]++;throw undefined;}else{cov_2dp9rvnwbz().b[231][1]++;}const user=(cov_2dp9rvnwbz().s[517]++,results[0]);let oldPasswords=(cov_2dp9rvnwbz().s[518]++,[]);cov_2dp9rvnwbz().s[519]++;if(user._password_history){cov_2dp9rvnwbz().b[232][0]++;cov_2dp9rvnwbz().s[520]++;oldPasswords=_lodash.default.take(user._password_history,this.config.passwordPolicy.maxPasswordHistory);}else{cov_2dp9rvnwbz().b[232][1]++;}//n-1 passwords go into history including last password
cov_2dp9rvnwbz().s[521]++;while(oldPasswords.length>Math.max(0,this.config.passwordPolicy.maxPasswordHistory-2)){cov_2dp9rvnwbz().s[522]++;oldPasswords.shift();}cov_2dp9rvnwbz().s[523]++;oldPasswords.push(user.password);cov_2dp9rvnwbz().s[524]++;this.data._password_history=oldPasswords;});}else{cov_2dp9rvnwbz().b[229][1]++;}cov_2dp9rvnwbz().s[525]++;return defer.then(()=>{cov_2dp9rvnwbz().f[99]++;cov_2dp9rvnwbz().s[526]++;// Run an update
return this.config.database.update(this.className,this.query,this.data,this.runOptions,false,false,this.validSchemaController).then(response=>{cov_2dp9rvnwbz().f[100]++;cov_2dp9rvnwbz().s[527]++;response.updatedAt=this.updatedAt;cov_2dp9rvnwbz().s[528]++;this._updateResponseWithData(response,this.data);cov_2dp9rvnwbz().s[529]++;this.response={response};});});}else{cov_2dp9rvnwbz().b[224][1]++;cov_2dp9rvnwbz().s[530]++;// Set the default ACL and password timestamp for the new _User
if(this.className==='_User'){cov_2dp9rvnwbz().b[233][0]++;var ACL=(cov_2dp9rvnwbz().s[531]++,this.data.ACL);// default public r/w ACL
cov_2dp9rvnwbz().s[532]++;if(!ACL){cov_2dp9rvnwbz().b[234][0]++;cov_2dp9rvnwbz().s[533]++;ACL={};cov_2dp9rvnwbz().s[534]++;if(!this.config.enforcePrivateUsers){cov_2dp9rvnwbz().b[235][0]++;cov_2dp9rvnwbz().s[535]++;ACL['*']={read:true,write:false};}else{cov_2dp9rvnwbz().b[235][1]++;}}else{cov_2dp9rvnwbz().b[234][1]++;}// make sure the user is not locked down
cov_2dp9rvnwbz().s[536]++;ACL[this.data.objectId]={read:true,write:true};cov_2dp9rvnwbz().s[537]++;this.data.ACL=ACL;// password timestamp to be used when password expiry policy is enforced
cov_2dp9rvnwbz().s[538]++;if((cov_2dp9rvnwbz().b[237][0]++,this.config.passwordPolicy)&&(cov_2dp9rvnwbz().b[237][1]++,this.config.passwordPolicy.maxPasswordAge)){cov_2dp9rvnwbz().b[236][0]++;cov_2dp9rvnwbz().s[539]++;this.data._password_changed_at=Parse._encode(new Date());}else{cov_2dp9rvnwbz().b[236][1]++;}}else{cov_2dp9rvnwbz().b[233][1]++;}// Run a create
cov_2dp9rvnwbz().s[540]++;return this.config.database.create(this.className,this.data,this.runOptions,false,this.validSchemaController).catch(error=>{cov_2dp9rvnwbz().f[101]++;cov_2dp9rvnwbz().s[541]++;if((cov_2dp9rvnwbz().b[239][0]++,this.className!=='_User')||(cov_2dp9rvnwbz().b[239][1]++,error.code!==Parse.Error.DUPLICATE_VALUE)){cov_2dp9rvnwbz().b[238][0]++;cov_2dp9rvnwbz().s[542]++;throw error;}else{cov_2dp9rvnwbz().b[238][1]++;}// Quick check, if we were able to infer the duplicated field name
cov_2dp9rvnwbz().s[543]++;if((cov_2dp9rvnwbz().b[241][0]++,error)&&(cov_2dp9rvnwbz().b[241][1]++,error.userInfo)&&(cov_2dp9rvnwbz().b[241][2]++,error.userInfo.duplicated_field==='username')){cov_2dp9rvnwbz().b[240][0]++;cov_2dp9rvnwbz().s[544]++;throw new Parse.Error(Parse.Error.USERNAME_TAKEN,'Account already exists for this username.');}else{cov_2dp9rvnwbz().b[240][1]++;}cov_2dp9rvnwbz().s[545]++;if((cov_2dp9rvnwbz().b[243][0]++,error)&&(cov_2dp9rvnwbz().b[243][1]++,error.userInfo)&&(cov_2dp9rvnwbz().b[243][2]++,error.userInfo.duplicated_field==='email')){cov_2dp9rvnwbz().b[242][0]++;cov_2dp9rvnwbz().s[546]++;throw new Parse.Error(Parse.Error.EMAIL_TAKEN,'Account already exists for this email address.');}else{cov_2dp9rvnwbz().b[242][1]++;}// If this was a failed user creation due to username or email already taken, we need to
// check whether it was username or email and return the appropriate error.
// Fallback to the original method
// TODO: See if we can later do this without additional queries by using named indexes.
cov_2dp9rvnwbz().s[547]++;return this.config.database.find(this.className,{username:this.data.username,objectId:{$ne:this.objectId()}},{limit:1}).then(results=>{cov_2dp9rvnwbz().f[102]++;cov_2dp9rvnwbz().s[548]++;if(results.length>0){cov_2dp9rvnwbz().b[244][0]++;cov_2dp9rvnwbz().s[549]++;throw new Parse.Error(Parse.Error.USERNAME_TAKEN,'Account already exists for this username.');}else{cov_2dp9rvnwbz().b[244][1]++;}cov_2dp9rvnwbz().s[550]++;return this.config.database.find(this.className,{email:this.data.email,objectId:{$ne:this.objectId()}},{limit:1});}).then(results=>{cov_2dp9rvnwbz().f[103]++;cov_2dp9rvnwbz().s[551]++;if(results.length>0){cov_2dp9rvnwbz().b[245][0]++;cov_2dp9rvnwbz().s[552]++;throw new Parse.Error(Parse.Error.EMAIL_TAKEN,'Account already exists for this email address.');}else{cov_2dp9rvnwbz().b[245][1]++;}cov_2dp9rvnwbz().s[553]++;throw new Parse.Error(Parse.Error.DUPLICATE_VALUE,'A duplicate value for a field with unique values was provided');});}).then(response=>{cov_2dp9rvnwbz().f[104]++;cov_2dp9rvnwbz().s[554]++;response.objectId=this.data.objectId;cov_2dp9rvnwbz().s[555]++;response.createdAt=this.data.createdAt;cov_2dp9rvnwbz().s[556]++;if(this.responseShouldHaveUsername){cov_2dp9rvnwbz().b[246][0]++;cov_2dp9rvnwbz().s[557]++;response.username=this.data.username;}else{cov_2dp9rvnwbz().b[246][1]++;}cov_2dp9rvnwbz().s[558]++;this._updateResponseWithData(response,this.data);cov_2dp9rvnwbz().s[559]++;this.response={status:201,response,location:this.location()};});}};// Returns nothing - doesn't wait for the trigger.
cov_2dp9rvnwbz().s[560]++;RestWrite.prototype.runAfterSaveTrigger=function(){cov_2dp9rvnwbz().f[105]++;cov_2dp9rvnwbz().s[561]++;if((cov_2dp9rvnwbz().b[248][0]++,!this.response)||(cov_2dp9rvnwbz().b[248][1]++,!this.response.response)){cov_2dp9rvnwbz().b[247][0]++;cov_2dp9rvnwbz().s[562]++;return;}else{cov_2dp9rvnwbz().b[247][1]++;}// Avoid doing any setup for triggers if there is no 'afterSave' trigger for this class.
const hasAfterSaveHook=(cov_2dp9rvnwbz().s[563]++,triggers.triggerExists(this.className,triggers.Types.afterSave,this.config.applicationId));const hasLiveQuery=(cov_2dp9rvnwbz().s[564]++,this.config.liveQueryController.hasLiveQuery(this.className));cov_2dp9rvnwbz().s[565]++;if((cov_2dp9rvnwbz().b[250][0]++,!hasAfterSaveHook)&&(cov_2dp9rvnwbz().b[250][1]++,!hasLiveQuery)){cov_2dp9rvnwbz().b[249][0]++;cov_2dp9rvnwbz().s[566]++;return Promise.resolve();}else{cov_2dp9rvnwbz().b[249][1]++;}var extraData=(cov_2dp9rvnwbz().s[567]++,{className:this.className});cov_2dp9rvnwbz().s[568]++;if((cov_2dp9rvnwbz().b[252][0]++,this.query)&&(cov_2dp9rvnwbz().b[252][1]++,this.query.objectId)){cov_2dp9rvnwbz().b[251][0]++;cov_2dp9rvnwbz().s[569]++;extraData.objectId=this.query.objectId;}else{cov_2dp9rvnwbz().b[251][1]++;}// Build the original object, we only do this for a update write.
let originalObject;cov_2dp9rvnwbz().s[570]++;if((cov_2dp9rvnwbz().b[254][0]++,this.query)&&(cov_2dp9rvnwbz().b[254][1]++,this.query.objectId)){cov_2dp9rvnwbz().b[253][0]++;cov_2dp9rvnwbz().s[571]++;originalObject=triggers.inflate(extraData,this.originalData);}else{cov_2dp9rvnwbz().b[253][1]++;}// Build the inflated object, different from beforeSave, originalData is not empty
// since developers can change data in the beforeSave.
const updatedObject=(cov_2dp9rvnwbz().s[572]++,this.buildUpdatedObject(extraData));cov_2dp9rvnwbz().s[573]++;updatedObject._handleSaveResponse(this.response.response,(cov_2dp9rvnwbz().b[255][0]++,this.response.status)||(cov_2dp9rvnwbz().b[255][1]++,200));cov_2dp9rvnwbz().s[574]++;this.config.database.loadSchema().then(schemaController=>{cov_2dp9rvnwbz().f[106]++;// Notifiy LiveQueryServer if possible
const perms=(cov_2dp9rvnwbz().s[575]++,schemaController.getClassLevelPermissions(updatedObject.className));cov_2dp9rvnwbz().s[576]++;this.config.liveQueryController.onAfterSave(updatedObject.className,updatedObject,originalObject,perms);});// Run afterSave trigger
cov_2dp9rvnwbz().s[577]++;return triggers.maybeRunTrigger(triggers.Types.afterSave,this.auth,updatedObject,originalObject,this.config,this.context).then(result=>{cov_2dp9rvnwbz().f[107]++;cov_2dp9rvnwbz().s[578]++;if((cov_2dp9rvnwbz().b[257][0]++,result)&&(cov_2dp9rvnwbz().b[257][1]++,typeof result==='object')){cov_2dp9rvnwbz().b[256][0]++;cov_2dp9rvnwbz().s[579]++;this.response.response=result;}else{cov_2dp9rvnwbz().b[256][1]++;}}).catch(function(err){cov_2dp9rvnwbz().f[108]++;cov_2dp9rvnwbz().s[580]++;_logger.default.warn('afterSave caught an error',err);});};// A helper to figure out what location this operation happens at.
cov_2dp9rvnwbz().s[581]++;RestWrite.prototype.location=function(){cov_2dp9rvnwbz().f[109]++;var middle=(cov_2dp9rvnwbz().s[582]++,this.className==='_User'?(cov_2dp9rvnwbz().b[258][0]++,'/users/'):(cov_2dp9rvnwbz().b[258][1]++,'/classes/'+this.className+'/'));const mount=(cov_2dp9rvnwbz().s[583]++,(cov_2dp9rvnwbz().b[259][0]++,this.config.mount)||(cov_2dp9rvnwbz().b[259][1]++,this.config.serverURL));cov_2dp9rvnwbz().s[584]++;return mount+middle+this.data.objectId;};// A helper to get the object id for this operation.
// Because it could be either on the query or on the data
cov_2dp9rvnwbz().s[585]++;RestWrite.prototype.objectId=function(){cov_2dp9rvnwbz().f[110]++;cov_2dp9rvnwbz().s[586]++;return(cov_2dp9rvnwbz().b[260][0]++,this.data.objectId)||(cov_2dp9rvnwbz().b[260][1]++,this.query.objectId);};// Returns a copy of the data and delete bad keys (_auth_data, _hashed_password...)
cov_2dp9rvnwbz().s[587]++;RestWrite.prototype.sanitizedData=function(){cov_2dp9rvnwbz().f[111]++;const data=(cov_2dp9rvnwbz().s[588]++,Object.keys(this.data).reduce((data,key)=>{cov_2dp9rvnwbz().f[112]++;cov_2dp9rvnwbz().s[589]++;// Regexp comes from Parse.Object.prototype.validate
if(!/^[A-Za-z][0-9A-Za-z_]*$/.test(key)){cov_2dp9rvnwbz().b[261][0]++;cov_2dp9rvnwbz().s[590]++;delete data[key];}else{cov_2dp9rvnwbz().b[261][1]++;}cov_2dp9rvnwbz().s[591]++;return data;},deepcopy(this.data)));cov_2dp9rvnwbz().s[592]++;return Parse._decode(undefined,data);};// Returns an updated copy of the object
cov_2dp9rvnwbz().s[593]++;RestWrite.prototype.buildUpdatedObject=function(extraData){cov_2dp9rvnwbz().f[113]++;const className=(cov_2dp9rvnwbz().s[594]++,Parse.Object.fromJSON(extraData));const readOnlyAttributes=(cov_2dp9rvnwbz().s[595]++,className.constructor.readOnlyAttributes?(cov_2dp9rvnwbz().b[262][0]++,className.constructor.readOnlyAttributes()):(cov_2dp9rvnwbz().b[262][1]++,[]));cov_2dp9rvnwbz().s[596]++;if(!this.originalData){cov_2dp9rvnwbz().b[263][0]++;cov_2dp9rvnwbz().s[597]++;for(const attribute of readOnlyAttributes){cov_2dp9rvnwbz().s[598]++;extraData[attribute]=this.data[attribute];}}else{cov_2dp9rvnwbz().b[263][1]++;}const updatedObject=(cov_2dp9rvnwbz().s[599]++,triggers.inflate(extraData,this.originalData));cov_2dp9rvnwbz().s[600]++;Object.keys(this.data).reduce(function(data,key){cov_2dp9rvnwbz().f[114]++;cov_2dp9rvnwbz().s[601]++;if(key.indexOf('.')>0){cov_2dp9rvnwbz().b[264][0]++;cov_2dp9rvnwbz().s[602]++;if(typeof data[key].__op==='string'){cov_2dp9rvnwbz().b[265][0]++;cov_2dp9rvnwbz().s[603]++;if(!readOnlyAttributes.includes(key)){cov_2dp9rvnwbz().b[266][0]++;cov_2dp9rvnwbz().s[604]++;updatedObject.set(key,data[key]);}else{cov_2dp9rvnwbz().b[266][1]++;}}else{cov_2dp9rvnwbz().b[265][1]++;// subdocument key with dot notation { 'x.y': v } => { 'x': { 'y' : v } })
const splittedKey=(cov_2dp9rvnwbz().s[605]++,key.split('.'));const parentProp=(cov_2dp9rvnwbz().s[606]++,splittedKey[0]);let parentVal=(cov_2dp9rvnwbz().s[607]++,updatedObject.get(parentProp));cov_2dp9rvnwbz().s[608]++;if(typeof parentVal!=='object'){cov_2dp9rvnwbz().b[267][0]++;cov_2dp9rvnwbz().s[609]++;parentVal={};}else{cov_2dp9rvnwbz().b[267][1]++;}cov_2dp9rvnwbz().s[610]++;parentVal[splittedKey[1]]=data[key];cov_2dp9rvnwbz().s[611]++;updatedObject.set(parentProp,parentVal);}cov_2dp9rvnwbz().s[612]++;delete data[key];}else{cov_2dp9rvnwbz().b[264][1]++;}cov_2dp9rvnwbz().s[613]++;return data;},deepcopy(this.data));const sanitized=(cov_2dp9rvnwbz().s[614]++,this.sanitizedData());cov_2dp9rvnwbz().s[615]++;for(const attribute of readOnlyAttributes){cov_2dp9rvnwbz().s[616]++;delete sanitized[attribute];}cov_2dp9rvnwbz().s[617]++;updatedObject.set(sanitized);cov_2dp9rvnwbz().s[618]++;return updatedObject;};cov_2dp9rvnwbz().s[619]++;RestWrite.prototype.cleanUserAuthData=function(){cov_2dp9rvnwbz().f[115]++;cov_2dp9rvnwbz().s[620]++;if((cov_2dp9rvnwbz().b[269][0]++,this.response)&&(cov_2dp9rvnwbz().b[269][1]++,this.response.response)&&(cov_2dp9rvnwbz().b[269][2]++,this.className==='_User')){cov_2dp9rvnwbz().b[268][0]++;const user=(cov_2dp9rvnwbz().s[621]++,this.response.response);cov_2dp9rvnwbz().s[622]++;if(user.authData){cov_2dp9rvnwbz().b[270][0]++;cov_2dp9rvnwbz().s[623]++;Object.keys(user.authData).forEach(provider=>{cov_2dp9rvnwbz().f[116]++;cov_2dp9rvnwbz().s[624]++;if(user.authData[provider]===null){cov_2dp9rvnwbz().b[271][0]++;cov_2dp9rvnwbz().s[625]++;delete user.authData[provider];}else{cov_2dp9rvnwbz().b[271][1]++;}});cov_2dp9rvnwbz().s[626]++;if(Object.keys(user.authData).length==0){cov_2dp9rvnwbz().b[272][0]++;cov_2dp9rvnwbz().s[627]++;delete user.authData;}else{cov_2dp9rvnwbz().b[272][1]++;}}else{cov_2dp9rvnwbz().b[270][1]++;}}else{cov_2dp9rvnwbz().b[268][1]++;}};cov_2dp9rvnwbz().s[628]++;RestWrite.prototype._updateResponseWithData=function(response,data){cov_2dp9rvnwbz().f[117]++;cov_2dp9rvnwbz().s[629]++;if(_lodash.default.isEmpty(this.storage.fieldsChangedByTrigger)){cov_2dp9rvnwbz().b[273][0]++;cov_2dp9rvnwbz().s[630]++;return response;}else{cov_2dp9rvnwbz().b[273][1]++;}const clientSupportsDelete=(cov_2dp9rvnwbz().s[631]++,ClientSDK.supportsForwardDelete(this.clientSDK));cov_2dp9rvnwbz().s[632]++;this.storage.fieldsChangedByTrigger.forEach(fieldName=>{cov_2dp9rvnwbz().f[118]++;const dataValue=(cov_2dp9rvnwbz().s[633]++,data[fieldName]);cov_2dp9rvnwbz().s[634]++;if(!Object.prototype.hasOwnProperty.call(response,fieldName)){cov_2dp9rvnwbz().b[274][0]++;cov_2dp9rvnwbz().s[635]++;response[fieldName]=dataValue;}else{cov_2dp9rvnwbz().b[274][1]++;}// Strips operations from responses
cov_2dp9rvnwbz().s[636]++;if((cov_2dp9rvnwbz().b[276][0]++,response[fieldName])&&(cov_2dp9rvnwbz().b[276][1]++,response[fieldName].__op)){cov_2dp9rvnwbz().b[275][0]++;cov_2dp9rvnwbz().s[637]++;delete response[fieldName];cov_2dp9rvnwbz().s[638]++;if((cov_2dp9rvnwbz().b[278][0]++,clientSupportsDelete)&&(cov_2dp9rvnwbz().b[278][1]++,dataValue.__op=='Delete')){cov_2dp9rvnwbz().b[277][0]++;cov_2dp9rvnwbz().s[639]++;response[fieldName]=dataValue;}else{cov_2dp9rvnwbz().b[277][1]++;}}else{cov_2dp9rvnwbz().b[275][1]++;}});cov_2dp9rvnwbz().s[640]++;return response;};var _default=(cov_2dp9rvnwbz().s[641]++,RestWrite);cov_2dp9rvnwbz().s[642]++;exports.default=_default;cov_2dp9rvnwbz().s[643]++;module.exports=RestWrite;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,