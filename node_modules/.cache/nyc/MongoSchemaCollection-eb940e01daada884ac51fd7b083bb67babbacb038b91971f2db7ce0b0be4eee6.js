"use strict";function cov_o1gs0dqat(){var path="/parse-server/lib/Adapters/Storage/Mongo/MongoSchemaCollection.js";var hash="2a5db27c6f1bf7e381eb07190c2e50ef80182192";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Adapters/Storage/Mongo/MongoSchemaCollection.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:25}},"2":{start:{line:8,column:23},end:{line:8,column:75}},"3":{start:{line:10,column:12},end:{line:10,column:57}},"4":{start:{line:12,column:39},end:{line:12,column:93}},"5":{start:{line:14,column:22},end:{line:14,column:275}},"6":{start:{line:14,column:70},end:{line:14,column:257}},"7":{start:{line:14,column:83},end:{line:14,column:84}},"8":{start:{line:14,column:128},end:{line:14,column:140}},"9":{start:{line:14,column:142},end:{line:14,column:255}},"10":{start:{line:14,column:168},end:{line:14,column:253}},"11":{start:{line:14,column:225},end:{line:14,column:251}},"12":{start:{line:14,column:258},end:{line:14,column:272}},"13":{start:{line:14,column:276},end:{line:14,column:315}},"14":{start:{line:16,column:54},end:{line:16,column:84}},"15":{start:{line:16,column:74},end:{line:16,column:84}},"16":{start:{line:16,column:98},end:{line:16,column:145}},"17":{start:{line:16,column:159},end:{line:16,column:475}},"18":{start:{line:16,column:218},end:{line:16,column:254}},"19":{start:{line:16,column:256},end:{line:16,column:473}},"20":{start:{line:16,column:304},end:{line:16,column:330}},"21":{start:{line:16,column:331},end:{line:16,column:372}},"22":{start:{line:16,column:363},end:{line:16,column:372}},"23":{start:{line:16,column:373},end:{line:16,column:444}},"24":{start:{line:16,column:435},end:{line:16,column:444}},"25":{start:{line:16,column:445},end:{line:16,column:471}},"26":{start:{line:16,column:476},end:{line:16,column:490}},"27":{start:{line:18,column:59},end:{line:18,column:89}},"28":{start:{line:18,column:79},end:{line:18,column:89}},"29":{start:{line:18,column:103},end:{line:18,column:105}},"30":{start:{line:18,column:124},end:{line:18,column:143}},"31":{start:{line:18,column:157},end:{line:18,column:290}},"32":{start:{line:18,column:199},end:{line:18,column:219}},"33":{start:{line:18,column:220},end:{line:18,column:261}},"34":{start:{line:18,column:252},end:{line:18,column:261}},"35":{start:{line:18,column:262},end:{line:18,column:288}},"36":{start:{line:18,column:291},end:{line:18,column:305}},"37":{start:{line:20,column:54},end:{line:20,column:73}},"38":{start:{line:20,column:75},end:{line:20,column:330}},"39":{start:{line:20,column:125},end:{line:20,column:161}},"40":{start:{line:20,column:163},end:{line:20,column:296}},"41":{start:{line:20,column:185},end:{line:20,column:294}},"42":{start:{line:20,column:227},end:{line:20,column:290}},"43":{start:{line:20,column:297},end:{line:20,column:328}},"44":{start:{line:20,column:331},end:{line:20,column:343}},"45":{start:{line:22,column:33},end:{line:22,column:517}},"46":{start:{line:22,column:46},end:{line:22,column:47}},"47":{start:{line:22,column:91},end:{line:22,column:131}},"48":{start:{line:22,column:133},end:{line:22,column:515}},"49":{start:{line:22,column:146},end:{line:22,column:247}},"50":{start:{line:22,column:201},end:{line:22,column:243}},"51":{start:{line:22,column:255},end:{line:22,column:515}},"52":{start:{line:22,column:295},end:{line:22,column:369}},"53":{start:{line:22,column:379},end:{line:22,column:513}},"54":{start:{line:22,column:428},end:{line:22,column:509}},"55":{start:{line:22,column:518},end:{line:22,column:532}},"56":{start:{line:24,column:44},end:{line:24,column:195}},"57":{start:{line:24,column:62},end:{line:24,column:166}},"58":{start:{line:24,column:176},end:{line:24,column:193}},"59":{start:{line:24,column:196},end:{line:24,column:207}},"60":{start:{line:27,column:2},end:{line:32,column:3}},"61":{start:{line:28,column:4},end:{line:31,column:6}},"62":{start:{line:34,column:2},end:{line:39,column:3}},"63":{start:{line:35,column:4},end:{line:38,column:6}},"64":{start:{line:41,column:2},end:{line:92,column:3}},"65":{start:{line:43,column:6},end:{line:45,column:8}},"66":{start:{line:48,column:6},end:{line:50,column:8}},"67":{start:{line:53,column:6},end:{line:55,column:8}},"68":{start:{line:58,column:6},end:{line:60,column:8}},"69":{start:{line:64,column:6},end:{line:66,column:8}},"70":{start:{line:69,column:6},end:{line:71,column:8}},"71":{start:{line:74,column:6},end:{line:76,column:8}},"72":{start:{line:79,column:6},end:{line:81,column:8}},"73":{start:{line:84,column:6},end:{line:86,column:8}},"74":{start:{line:89,column:6},end:{line:91,column:8}},"75":{start:{line:95,column:27},end:{line:95,column:70}},"76":{start:{line:98,column:19},end:{line:98,column:92}},"77":{start:{line:98,column:53},end:{line:98,column:91}},"78":{start:{line:99,column:17},end:{line:107,column:8}},"79":{start:{line:100,column:4},end:{line:100,column:69}},"80":{start:{line:102,column:4},end:{line:104,column:5}},"81":{start:{line:103,column:6},end:{line:103,column:101}},"82":{start:{line:106,column:4},end:{line:106,column:15}},"83":{start:{line:108,column:2},end:{line:110,column:4}},"84":{start:{line:111,column:2},end:{line:113,column:4}},"85":{start:{line:114,column:2},end:{line:116,column:4}},"86":{start:{line:117,column:2},end:{line:119,column:4}},"87":{start:{line:120,column:2},end:{line:120,column:18}},"88":{start:{line:123,column:18},end:{line:132,column:2}},"89":{start:{line:133,column:20},end:{line:158,column:2}},"90":{start:{line:161,column:13},end:{line:161,column:24}},"91":{start:{line:162,column:16},end:{line:162,column:18}},"92":{start:{line:164,column:2},end:{line:172,column:3}},"93":{start:{line:165,column:4},end:{line:167,column:5}},"94":{start:{line:166,column:6},end:{line:166,column:98}},"95":{start:{line:169,column:4},end:{line:171,column:5}},"96":{start:{line:170,column:6},end:{line:170,column:65}},"97":{start:{line:174,column:2},end:{line:179,column:4}},"98":{start:{line:183,column:17},end:{line:185,column:3}},"99":{start:{line:187,column:2},end:{line:191,column:3}},"100":{start:{line:188,column:4},end:{line:190,column:7}},"101":{start:{line:189,column:6},end:{line:189,column:31}},"102":{start:{line:193,column:2},end:{line:193,column:16}},"103":{start:{line:202,column:2},end:{line:238,column:3}},"104":{start:{line:204,column:6},end:{line:204,column:31}},"105":{start:{line:207,column:6},end:{line:207,column:40}},"106":{start:{line:210,column:6},end:{line:210,column:22}},"107":{start:{line:213,column:6},end:{line:213,column:22}},"108":{start:{line:216,column:6},end:{line:216,column:23}},"109":{start:{line:219,column:6},end:{line:219,column:20}},"110":{start:{line:222,column:6},end:{line:222,column:22}},"111":{start:{line:225,column:6},end:{line:225,column:21}},"112":{start:{line:228,column:6},end:{line:228,column:24}},"113":{start:{line:231,column:6},end:{line:231,column:20}},"114":{start:{line:234,column:6},end:{line:234,column:21}},"115":{start:{line:237,column:6},end:{line:237,column:23}},"116":{start:{line:243,column:4},end:{line:243,column:34}},"117":{start:{line:247,column:4},end:{line:247,column:96}},"118":{start:{line:247,column:57},end:{line:247,column:94}},"119":{start:{line:251,column:4},end:{line:259,column:7}},"120":{start:{line:254,column:6},end:{line:258,column:7}},"121":{start:{line:255,column:8},end:{line:255,column:52}},"122":{start:{line:257,column:8},end:{line:257,column:24}},"123":{start:{line:264,column:4},end:{line:264,column:100}},"124":{start:{line:268,column:4},end:{line:275,column:7}},"125":{start:{line:268,column:61},end:{line:268,column:100}},"126":{start:{line:269,column:6},end:{line:274,column:7}},"127":{start:{line:271,column:8},end:{line:271,column:100}},"128":{start:{line:273,column:8},end:{line:273,column:20}},"129":{start:{line:279,column:4},end:{line:279,column:84}},"130":{start:{line:283,column:4},end:{line:283,column:91}},"131":{start:{line:296,column:4},end:{line:356,column:7}},"132":{start:{line:298,column:6},end:{line:300,column:7}},"133":{start:{line:299,column:8},end:{line:299,column:15}},"134":{start:{line:303,column:6},end:{line:308,column:7}},"135":{start:{line:305,column:8},end:{line:307,column:9}},"136":{start:{line:305,column:61},end:{line:305,column:109}},"137":{start:{line:306,column:10},end:{line:306,column:132}},"138":{start:{line:310,column:6},end:{line:310,column:13}},"139":{start:{line:314,column:6},end:{line:316,column:7}},"140":{start:{line:315,column:8},end:{line:315,column:15}},"141":{start:{line:318,column:6},end:{line:318,column:18}},"142":{start:{line:323,column:10},end:{line:323,column:19}},"143":{start:{line:324,column:27},end:{line:324,column:87}},"144":{start:{line:328,column:6},end:{line:355,column:7}},"145":{start:{line:329,column:8},end:{line:341,column:11}},"146":{start:{line:343,column:8},end:{line:354,column:11}},"147":{start:{line:360,column:25},end:{line:360,column:48}},"148":{start:{line:362,column:4},end:{line:362,column:29}},"149":{start:{line:363,column:4},end:{line:363,column:36}},"150":{start:{line:364,column:4},end:{line:372,column:7}},"151":{start:{line:379,column:0},end:{line:379,column:79}},"152":{start:{line:380,column:0},end:{line:380,column:86}},"153":{start:{line:381,column:15},end:{line:381,column:36}},"154":{start:{line:382,column:0},end:{line:382,column:27}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:12,column:9},end:{line:12,column:31}},loc:{start:{line:12,column:37},end:{line:12,column:95}},line:12},"1":{name:"_extends",decl:{start:{line:14,column:9},end:{line:14,column:17}},loc:{start:{line:14,column:20},end:{line:14,column:317}},line:14},"2":{name:"(anonymous_2)",decl:{start:{line:14,column:50},end:{line:14,column:51}},loc:{start:{line:14,column:68},end:{line:14,column:274}},line:14},"3":{name:"_objectWithoutProperties",decl:{start:{line:16,column:9},end:{line:16,column:33}},loc:{start:{line:16,column:52},end:{line:16,column:492}},line:16},"4":{name:"_objectWithoutPropertiesLoose",decl:{start:{line:18,column:9},end:{line:18,column:38}},loc:{start:{line:18,column:57},end:{line:18,column:307}},line:18},"5":{name:"ownKeys",decl:{start:{line:20,column:9},end:{line:20,column:16}},loc:{start:{line:20,column:41},end:{line:20,column:345}},line:20},"6":{name:"(anonymous_6)",decl:{start:{line:20,column:210},end:{line:20,column:211}},loc:{start:{line:20,column:225},end:{line:20,column:292}},line:20},"7":{name:"_objectSpread",decl:{start:{line:22,column:9},end:{line:22,column:22}},loc:{start:{line:22,column:31},end:{line:22,column:534}},line:22},"8":{name:"(anonymous_8)",decl:{start:{line:22,column:184},end:{line:22,column:185}},loc:{start:{line:22,column:199},end:{line:22,column:245}},line:22},"9":{name:"(anonymous_9)",decl:{start:{line:22,column:411},end:{line:22,column:412}},loc:{start:{line:22,column:426},end:{line:22,column:511}},line:22},"10":{name:"_defineProperty",decl:{start:{line:24,column:9},end:{line:24,column:24}},loc:{start:{line:24,column:42},end:{line:24,column:209}},line:24},"11":{name:"mongoFieldToParseSchemaField",decl:{start:{line:26,column:9},end:{line:26,column:37}},loc:{start:{line:26,column:44},end:{line:93,column:1}},line:26},"12":{name:"mongoSchemaFieldsToParseSchemaFields",decl:{start:{line:97,column:9},end:{line:97,column:45}},loc:{start:{line:97,column:54},end:{line:121,column:1}},line:97},"13":{name:"(anonymous_13)",decl:{start:{line:98,column:46},end:{line:98,column:47}},loc:{start:{line:98,column:53},end:{line:98,column:91}},line:98},"14":{name:"(anonymous_14)",decl:{start:{line:99,column:35},end:{line:99,column:36}},loc:{start:{line:99,column:55},end:{line:107,column:3}},line:99},"15":{name:"mongoSchemaToParseSchema",decl:{start:{line:160,column:9},end:{line:160,column:33}},loc:{start:{line:160,column:47},end:{line:180,column:1}},line:160},"16":{name:"_mongoSchemaQueryFromNameQuery",decl:{start:{line:182,column:9},end:{line:182,column:39}},loc:{start:{line:182,column:53},end:{line:194,column:1}},line:182},"17":{name:"(anonymous_17)",decl:{start:{line:188,column:31},end:{line:188,column:32}},loc:{start:{line:188,column:38},end:{line:190,column:5}},line:188},"18":{name:"parseFieldTypeToMongoFieldType",decl:{start:{line:198,column:9},end:{line:198,column:39}},loc:{start:{line:201,column:3},end:{line:239,column:1}},line:201},"19":{name:"(anonymous_19)",decl:{start:{line:242,column:2},end:{line:242,column:3}},loc:{start:{line:242,column:26},end:{line:244,column:3}},line:242},"20":{name:"(anonymous_20)",decl:{start:{line:246,column:2},end:{line:246,column:3}},loc:{start:{line:246,column:32},end:{line:248,column:3}},line:246},"21":{name:"(anonymous_21)",decl:{start:{line:247,column:46},end:{line:247,column:47}},loc:{start:{line:247,column:57},end:{line:247,column:94}},line:247},"22":{name:"(anonymous_22)",decl:{start:{line:250,column:2},end:{line:250,column:3}},loc:{start:{line:250,column:35},end:{line:260,column:3}},line:250},"23":{name:"(anonymous_23)",decl:{start:{line:253,column:12},end:{line:253,column:13}},loc:{start:{line:253,column:23},end:{line:259,column:5}},line:253},"24":{name:"(anonymous_24)",decl:{start:{line:263,column:2},end:{line:263,column:3}},loc:{start:{line:263,column:28},end:{line:265,column:3}},line:263},"25":{name:"(anonymous_25)",decl:{start:{line:267,column:2},end:{line:267,column:3}},loc:{start:{line:267,column:23},end:{line:276,column:3}},line:267},"26":{name:"(anonymous_26)",decl:{start:{line:268,column:51},end:{line:268,column:52}},loc:{start:{line:268,column:61},end:{line:268,column:100}},line:268},"27":{name:"(anonymous_27)",decl:{start:{line:268,column:108},end:{line:268,column:109}},loc:{start:{line:268,column:117},end:{line:275,column:5}},line:268},"28":{name:"(anonymous_28)",decl:{start:{line:278,column:2},end:{line:278,column:3}},loc:{start:{line:278,column:29},end:{line:280,column:3}},line:278},"29":{name:"(anonymous_29)",decl:{start:{line:282,column:2},end:{line:282,column:3}},loc:{start:{line:282,column:36},end:{line:284,column:3}},line:282},"30":{name:"(anonymous_30)",decl:{start:{line:295,column:2},end:{line:295,column:3}},loc:{start:{line:295,column:55},end:{line:357,column:3}},line:295},"31":{name:"(anonymous_31)",decl:{start:{line:296,column:59},end:{line:296,column:60}},loc:{start:{line:296,column:69},end:{line:311,column:5}},line:296},"32":{name:"(anonymous_32)",decl:{start:{line:305,column:44},end:{line:305,column:45}},loc:{start:{line:305,column:61},end:{line:305,column:109}},line:305},"33":{name:"(anonymous_33)",decl:{start:{line:311,column:7},end:{line:311,column:8}},loc:{start:{line:311,column:16},end:{line:319,column:5}},line:311},"34":{name:"(anonymous_34)",decl:{start:{line:319,column:12},end:{line:319,column:13}},loc:{start:{line:319,column:18},end:{line:356,column:5}},line:319},"35":{name:"(anonymous_35)",decl:{start:{line:359,column:2},end:{line:359,column:3}},loc:{start:{line:359,column:60},end:{line:373,column:3}},line:359}},branchMap:{"0":{loc:{start:{line:12,column:46},end:{line:12,column:92}},type:"cond-expr",locations:[{start:{line:12,column:70},end:{line:12,column:73}},{start:{line:12,column:76},end:{line:12,column:92}}],line:12},"1":{loc:{start:{line:12,column:46},end:{line:12,column:67}},type:"binary-expr",locations:[{start:{line:12,column:46},end:{line:12,column:49}},{start:{line:12,column:53},end:{line:12,column:67}}],line:12},"2":{loc:{start:{line:14,column:33},end:{line:14,column:274}},type:"binary-expr",locations:[{start:{line:14,column:33},end:{line:14,column:46}},{start:{line:14,column:50},end:{line:14,column:274}}],line:14},"3":{loc:{start:{line:14,column:168},end:{line:14,column:253}},type:"if",locations:[{start:{line:14,column:168},end:{line:14,column:253}},{start:{line:14,column:168},end:{line:14,column:253}}],line:14},"4":{loc:{start:{line:16,column:54},end:{line:16,column:84}},type:"if",locations:[{start:{line:16,column:54},end:{line:16,column:84}},{start:{line:16,column:54},end:{line:16,column:84}}],line:16},"5":{loc:{start:{line:16,column:159},end:{line:16,column:475}},type:"if",locations:[{start:{line:16,column:159},end:{line:16,column:475}},{start:{line:16,column:159},end:{line:16,column:475}}],line:16},"6":{loc:{start:{line:16,column:331},end:{line:16,column:372}},type:"if",locations:[{start:{line:16,column:331},end:{line:16,column:372}},{start:{line:16,column:331},end:{line:16,column:372}}],line:16},"7":{loc:{start:{line:16,column:373},end:{line:16,column:444}},type:"if",locations:[{start:{line:16,column:373},end:{line:16,column:444}},{start:{line:16,column:373},end:{line:16,column:444}}],line:16},"8":{loc:{start:{line:18,column:59},end:{line:18,column:89}},type:"if",locations:[{start:{line:18,column:59},end:{line:18,column:89}},{start:{line:18,column:59},end:{line:18,column:89}}],line:18},"9":{loc:{start:{line:18,column:220},end:{line:18,column:261}},type:"if",locations:[{start:{line:18,column:220},end:{line:18,column:261}},{start:{line:18,column:220},end:{line:18,column:261}}],line:18},"10":{loc:{start:{line:20,column:75},end:{line:20,column:330}},type:"if",locations:[{start:{line:20,column:75},end:{line:20,column:330}},{start:{line:20,column:75},end:{line:20,column:330}}],line:20},"11":{loc:{start:{line:20,column:163},end:{line:20,column:296}},type:"if",locations:[{start:{line:20,column:163},end:{line:20,column:296}},{start:{line:20,column:163},end:{line:20,column:296}}],line:20},"12":{loc:{start:{line:22,column:91},end:{line:22,column:131}},type:"cond-expr",locations:[{start:{line:22,column:114},end:{line:22,column:126}},{start:{line:22,column:129},end:{line:22,column:131}}],line:22},"13":{loc:{start:{line:22,column:133},end:{line:22,column:515}},type:"if",locations:[{start:{line:22,column:133},end:{line:22,column:515}},{start:{line:22,column:133},end:{line:22,column:515}}],line:22},"14":{loc:{start:{line:22,column:255},end:{line:22,column:515}},type:"if",locations:[{start:{line:22,column:255},end:{line:22,column:515}},{start:{line:22,column:255},end:{line:22,column:515}}],line:22},"15":{loc:{start:{line:24,column:44},end:{line:24,column:195}},type:"if",locations:[{start:{line:24,column:44},end:{line:24,column:195}},{start:{line:24,column:44},end:{line:24,column:195}}],line:24},"16":{loc:{start:{line:27,column:2},end:{line:32,column:3}},type:"if",locations:[{start:{line:27,column:2},end:{line:32,column:3}},{start:{line:27,column:2},end:{line:32,column:3}}],line:27},"17":{loc:{start:{line:34,column:2},end:{line:39,column:3}},type:"if",locations:[{start:{line:34,column:2},end:{line:39,column:3}},{start:{line:34,column:2},end:{line:39,column:3}}],line:34},"18":{loc:{start:{line:41,column:2},end:{line:92,column:3}},type:"switch",locations:[{start:{line:42,column:4},end:{line:45,column:8}},{start:{line:47,column:4},end:{line:50,column:8}},{start:{line:52,column:4},end:{line:55,column:8}},{start:{line:57,column:4},end:{line:60,column:8}},{start:{line:62,column:4},end:{line:62,column:15}},{start:{line:63,column:4},end:{line:66,column:8}},{start:{line:68,column:4},end:{line:71,column:8}},{start:{line:73,column:4},end:{line:76,column:8}},{start:{line:78,column:4},end:{line:81,column:8}},{start:{line:83,column:4},end:{line:86,column:8}},{start:{line:88,column:4},end:{line:91,column:8}}],line:41},"19":{loc:{start:{line:102,column:4},end:{line:104,column:5}},type:"if",locations:[{start:{line:102,column:4},end:{line:104,column:5}},{start:{line:102,column:4},end:{line:104,column:5}}],line:102},"20":{loc:{start:{line:102,column:8},end:{line:102,column:105}},type:"binary-expr",locations:[{start:{line:102,column:8},end:{line:102,column:24}},{start:{line:102,column:28},end:{line:102,column:59}},{start:{line:102,column:63},end:{line:102,column:105}}],line:102},"21":{loc:{start:{line:164,column:2},end:{line:172,column:3}},type:"if",locations:[{start:{line:164,column:2},end:{line:172,column:3}},{start:{line:164,column:2},end:{line:172,column:3}}],line:164},"22":{loc:{start:{line:165,column:4},end:{line:167,column:5}},type:"if",locations:[{start:{line:165,column:4},end:{line:167,column:5}},{start:{line:165,column:4},end:{line:167,column:5}}],line:165},"23":{loc:{start:{line:169,column:4},end:{line:171,column:5}},type:"if",locations:[{start:{line:169,column:4},end:{line:171,column:5}},{start:{line:169,column:4},end:{line:171,column:5}}],line:169},"24":{loc:{start:{line:187,column:2},end:{line:191,column:3}},type:"if",locations:[{start:{line:187,column:2},end:{line:191,column:3}},{start:{line:187,column:2},end:{line:191,column:3}}],line:187},"25":{loc:{start:{line:202,column:2},end:{line:238,column:3}},type:"switch",locations:[{start:{line:203,column:4},end:{line:204,column:31}},{start:{line:206,column:4},end:{line:207,column:40}},{start:{line:209,column:4},end:{line:210,column:22}},{start:{line:212,column:4},end:{line:213,column:22}},{start:{line:215,column:4},end:{line:216,column:23}},{start:{line:218,column:4},end:{line:219,column:20}},{start:{line:221,column:4},end:{line:222,column:22}},{start:{line:224,column:4},end:{line:225,column:21}},{start:{line:227,column:4},end:{line:228,column:24}},{start:{line:230,column:4},end:{line:231,column:20}},{start:{line:233,column:4},end:{line:234,column:21}},{start:{line:236,column:4},end:{line:237,column:23}}],line:202},"26":{loc:{start:{line:254,column:6},end:{line:258,column:7}},type:"if",locations:[{start:{line:254,column:6},end:{line:258,column:7}},{start:{line:254,column:6},end:{line:258,column:7}}],line:254},"27":{loc:{start:{line:269,column:6},end:{line:274,column:7}},type:"if",locations:[{start:{line:269,column:6},end:{line:274,column:7}},{start:{line:269,column:6},end:{line:274,column:7}}],line:269},"28":{loc:{start:{line:298,column:6},end:{line:300,column:7}},type:"if",locations:[{start:{line:298,column:6},end:{line:300,column:7}},{start:{line:298,column:6},end:{line:300,column:7}}],line:298},"29":{loc:{start:{line:303,column:6},end:{line:308,column:7}},type:"if",locations:[{start:{line:303,column:6},end:{line:308,column:7}},{start:{line:303,column:6},end:{line:308,column:7}}],line:303},"30":{loc:{start:{line:305,column:8},end:{line:307,column:9}},type:"if",locations:[{start:{line:305,column:8},end:{line:307,column:9}},{start:{line:305,column:8},end:{line:307,column:9}}],line:305},"31":{loc:{start:{line:314,column:6},end:{line:316,column:7}},type:"if",locations:[{start:{line:314,column:6},end:{line:316,column:7}},{start:{line:314,column:6},end:{line:316,column:7}}],line:314},"32":{loc:{start:{line:328,column:6},end:{line:355,column:7}},type:"if",locations:[{start:{line:328,column:6},end:{line:355,column:7}},{start:{line:328,column:6},end:{line:355,column:7}}],line:328},"33":{loc:{start:{line:328,column:10},end:{line:328,column:62}},type:"binary-expr",locations:[{start:{line:328,column:10},end:{line:328,column:22}},{start:{line:328,column:26},end:{line:328,column:62}}],line:328}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0,0,0,0,0,0,0,0,0,0],"19":[0,0],"20":[0,0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0,0,0,0,0,0,0,0,0,0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0]},inputSourceMap:{version:3,sources:["../../../../src/Adapters/Storage/Mongo/MongoSchemaCollection.js"],names:["mongoFieldToParseSchemaField","type","targetClass","slice","startsWith","length","nonFieldSchemaKeys","mongoSchemaFieldsToParseSchemaFields","schema","fieldNames","Object","keys","filter","key","indexOf","response","reduce","obj","fieldName","_metadata","fields_options","assign","ACL","createdAt","updatedAt","objectId","emptyCLPS","freeze","find","count","get","create","update","delete","addField","protectedFields","defaultCLPS","mongoSchemaToParseSchema","mongoSchema","clps","indexes","class_permissions","className","_id","fields","classLevelPermissions","_mongoSchemaQueryFromNameQuery","name","query","object","forEach","parseFieldTypeToMongoFieldType","MongoSchemaCollection","constructor","collection","_collection","_fetchAllSchemasFrom_SCHEMA","_rawFind","then","schemas","map","_fetchOneSchemaFrom_SCHEMA","limit","results","undefined","findAndDeleteSchema","_mongoCollection","findOneAndDelete","insertSchema","insertOne","result","ops","catch","error","code","Parse","Error","DUPLICATE_VALUE","updateSchema","updateOne","upsertSchema","upsertOne","addFieldIfNotExists","fieldType","some","existingField","INCORRECT_TYPE","fieldOptions","$exists","$set","updateFieldOptions","_TESTmongoSchemaToParseSchema"],mappings:"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",sourcesContent:["import MongoCollection from './MongoCollection';\nimport Parse from 'parse/node';\n\nfunction mongoFieldToParseSchemaField(type) {\n  if (type[0] === '*') {\n    return {\n      type: 'Pointer',\n      targetClass: type.slice(1),\n    };\n  }\n  if (type.startsWith('relation<')) {\n    return {\n      type: 'Relation',\n      targetClass: type.slice('relation<'.length, type.length - 1),\n    };\n  }\n  switch (type) {\n    case 'number':\n      return { type: 'Number' };\n    case 'string':\n      return { type: 'String' };\n    case 'boolean':\n      return { type: 'Boolean' };\n    case 'date':\n      return { type: 'Date' };\n    case 'map':\n    case 'object':\n      return { type: 'Object' };\n    case 'array':\n      return { type: 'Array' };\n    case 'geopoint':\n      return { type: 'GeoPoint' };\n    case 'file':\n      return { type: 'File' };\n    case 'bytes':\n      return { type: 'Bytes' };\n    case 'polygon':\n      return { type: 'Polygon' };\n  }\n}\n\nconst nonFieldSchemaKeys = ['_id', '_metadata', '_client_permissions'];\nfunction mongoSchemaFieldsToParseSchemaFields(schema) {\n  var fieldNames = Object.keys(schema).filter(key => nonFieldSchemaKeys.indexOf(key) === -1);\n  var response = fieldNames.reduce((obj, fieldName) => {\n    obj[fieldName] = mongoFieldToParseSchemaField(schema[fieldName]);\n    if (\n      schema._metadata &&\n      schema._metadata.fields_options &&\n      schema._metadata.fields_options[fieldName]\n    ) {\n      obj[fieldName] = Object.assign(\n        {},\n        obj[fieldName],\n        schema._metadata.fields_options[fieldName]\n      );\n    }\n    return obj;\n  }, {});\n  response.ACL = { type: 'ACL' };\n  response.createdAt = { type: 'Date' };\n  response.updatedAt = { type: 'Date' };\n  response.objectId = { type: 'String' };\n  return response;\n}\n\nconst emptyCLPS = Object.freeze({\n  find: {},\n  count: {},\n  get: {},\n  create: {},\n  update: {},\n  delete: {},\n  addField: {},\n  protectedFields: {},\n});\n\nconst defaultCLPS = Object.freeze({\n  find: { '*': true },\n  count: { '*': true },\n  get: { '*': true },\n  create: { '*': true },\n  update: { '*': true },\n  delete: { '*': true },\n  addField: { '*': true },\n  protectedFields: { '*': [] },\n});\n\nfunction mongoSchemaToParseSchema(mongoSchema) {\n  let clps = defaultCLPS;\n  let indexes = {};\n  if (mongoSchema._metadata) {\n    if (mongoSchema._metadata.class_permissions) {\n      clps = { ...emptyCLPS, ...mongoSchema._metadata.class_permissions };\n    }\n    if (mongoSchema._metadata.indexes) {\n      indexes = { ...mongoSchema._metadata.indexes };\n    }\n  }\n  return {\n    className: mongoSchema._id,\n    fields: mongoSchemaFieldsToParseSchemaFields(mongoSchema),\n    classLevelPermissions: clps,\n    indexes: indexes,\n  };\n}\n\nfunction _mongoSchemaQueryFromNameQuery(name: string, query) {\n  const object = { _id: name };\n  if (query) {\n    Object.keys(query).forEach(key => {\n      object[key] = query[key];\n    });\n  }\n  return object;\n}\n\n// Returns a type suitable for inserting into mongo _SCHEMA collection.\n// Does no validation. That is expected to be done in Parse Server.\nfunction parseFieldTypeToMongoFieldType({ type, targetClass }) {\n  switch (type) {\n    case 'Pointer':\n      return `*${targetClass}`;\n    case 'Relation':\n      return `relation<${targetClass}>`;\n    case 'Number':\n      return 'number';\n    case 'String':\n      return 'string';\n    case 'Boolean':\n      return 'boolean';\n    case 'Date':\n      return 'date';\n    case 'Object':\n      return 'object';\n    case 'Array':\n      return 'array';\n    case 'GeoPoint':\n      return 'geopoint';\n    case 'File':\n      return 'file';\n    case 'Bytes':\n      return 'bytes';\n    case 'Polygon':\n      return 'polygon';\n  }\n}\n\nclass MongoSchemaCollection {\n  _collection: MongoCollection;\n\n  constructor(collection: MongoCollection) {\n    this._collection = collection;\n  }\n\n  _fetchAllSchemasFrom_SCHEMA() {\n    return this._collection._rawFind({}).then(schemas => schemas.map(mongoSchemaToParseSchema));\n  }\n\n  _fetchOneSchemaFrom_SCHEMA(name: string) {\n    return this._collection\n      ._rawFind(_mongoSchemaQueryFromNameQuery(name), { limit: 1 })\n      .then(results => {\n        if (results.length === 1) {\n          return mongoSchemaToParseSchema(results[0]);\n        } else {\n          throw undefined;\n        }\n      });\n  }\n\n  // Atomically find and delete an object based on query.\n  findAndDeleteSchema(name: string) {\n    return this._collection._mongoCollection.findOneAndDelete(_mongoSchemaQueryFromNameQuery(name));\n  }\n\n  insertSchema(schema: any) {\n    return this._collection\n      .insertOne(schema)\n      .then(result => mongoSchemaToParseSchema(result.ops[0]))\n      .catch(error => {\n        if (error.code === 11000) {\n          //Mongo's duplicate key error\n          throw new Parse.Error(Parse.Error.DUPLICATE_VALUE, 'Class already exists.');\n        } else {\n          throw error;\n        }\n      });\n  }\n\n  updateSchema(name: string, update) {\n    return this._collection.updateOne(_mongoSchemaQueryFromNameQuery(name), update);\n  }\n\n  upsertSchema(name: string, query: string, update) {\n    return this._collection.upsertOne(_mongoSchemaQueryFromNameQuery(name, query), update);\n  }\n\n  // Add a field to the schema. If database does not support the field\n  // type (e.g. mongo doesn't support more than one GeoPoint in a class) reject with an \"Incorrect Type\"\n  // Parse error with a desciptive message. If the field already exists, this function must\n  // not modify the schema, and must reject with DUPLICATE_VALUE error.\n  // If this is called for a class that doesn't exist, this function must create that class.\n\n  // TODO: throw an error if an unsupported field type is passed. Deciding whether a type is supported\n  // should be the job of the adapter. Some adapters may not support GeoPoint at all. Others may\n  // Support additional types that Mongo doesn't, like Money, or something.\n\n  // TODO: don't spend an extra query on finding the schema if the type we are trying to add isn't a GeoPoint.\n  addFieldIfNotExists(className: string, fieldName: string, fieldType: string) {\n    return this._fetchOneSchemaFrom_SCHEMA(className)\n      .then(\n        schema => {\n          // If a field with this name already exists, it will be handled elsewhere.\n          if (schema.fields[fieldName] !== undefined) {\n            return;\n          }\n          // The schema exists. Check for existing GeoPoints.\n          if (fieldType.type === 'GeoPoint') {\n            // Make sure there are not other geopoint fields\n            if (\n              Object.keys(schema.fields).some(\n                existingField => schema.fields[existingField].type === 'GeoPoint'\n              )\n            ) {\n              throw new Parse.Error(\n                Parse.Error.INCORRECT_TYPE,\n                'MongoDB only supports one GeoPoint field in a class.'\n              );\n            }\n          }\n          return;\n        },\n        error => {\n          // If error is undefined, the schema doesn't exist, and we can create the schema with the field.\n          // If some other error, reject with it.\n          if (error === undefined) {\n            return;\n          }\n          throw error;\n        }\n      )\n      .then(() => {\n        const { type, targetClass, ...fieldOptions } = fieldType;\n        // We use $exists and $set to avoid overwriting the field type if it\n        // already exists. (it could have added inbetween the last query and the update)\n        if (fieldOptions && Object.keys(fieldOptions).length > 0) {\n          return this.upsertSchema(\n            className,\n            { [fieldName]: { $exists: false } },\n            {\n              $set: {\n                [fieldName]: parseFieldTypeToMongoFieldType({\n                  type,\n                  targetClass,\n                }),\n                [`_metadata.fields_options.${fieldName}`]: fieldOptions,\n              },\n            }\n          );\n        } else {\n          return this.upsertSchema(\n            className,\n            { [fieldName]: { $exists: false } },\n            {\n              $set: {\n                [fieldName]: parseFieldTypeToMongoFieldType({\n                  type,\n                  targetClass,\n                }),\n              },\n            }\n          );\n        }\n      });\n  }\n\n  async updateFieldOptions(className: string, fieldName: string, fieldType: any) {\n    const { ...fieldOptions } = fieldType;\n    delete fieldOptions.type;\n    delete fieldOptions.targetClass;\n\n    await this.upsertSchema(\n      className,\n      { [fieldName]: { $exists: true } },\n      {\n        $set: {\n          [`_metadata.fields_options.${fieldName}`]: fieldOptions,\n        },\n      }\n    );\n  }\n}\n\n// Exported for testing reasons and because we haven't moved all mongo schema format\n// related logic into the database adapter yet.\nMongoSchemaCollection._TESTmongoSchemaToParseSchema = mongoSchemaToParseSchema;\nMongoSchemaCollection.parseFieldTypeToMongoFieldType = parseFieldTypeToMongoFieldType;\n\nexport default MongoSchemaCollection;\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"2a5db27c6f1bf7e381eb07190c2e50ef80182192"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_o1gs0dqat=function(){return actualCoverage;};}return actualCoverage;}cov_o1gs0dqat();cov_o1gs0dqat().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_o1gs0dqat().s[1]++;exports.default=void 0;var _MongoCollection=(cov_o1gs0dqat().s[2]++,_interopRequireDefault(require("./MongoCollection")));var _node=(cov_o1gs0dqat().s[3]++,_interopRequireDefault(require("parse/node")));function _interopRequireDefault(obj){cov_o1gs0dqat().f[0]++;cov_o1gs0dqat().s[4]++;return(cov_o1gs0dqat().b[1][0]++,obj)&&(cov_o1gs0dqat().b[1][1]++,obj.__esModule)?(cov_o1gs0dqat().b[0][0]++,obj):(cov_o1gs0dqat().b[0][1]++,{default:obj});}function _extends(){cov_o1gs0dqat().f[1]++;cov_o1gs0dqat().s[5]++;_extends=(cov_o1gs0dqat().b[2][0]++,Object.assign)||(cov_o1gs0dqat().b[2][1]++,function(target){cov_o1gs0dqat().f[2]++;cov_o1gs0dqat().s[6]++;for(var i=(cov_o1gs0dqat().s[7]++,1);i<arguments.length;i++){var source=(cov_o1gs0dqat().s[8]++,arguments[i]);cov_o1gs0dqat().s[9]++;for(var key in source){cov_o1gs0dqat().s[10]++;if(Object.prototype.hasOwnProperty.call(source,key)){cov_o1gs0dqat().b[3][0]++;cov_o1gs0dqat().s[11]++;target[key]=source[key];}else{cov_o1gs0dqat().b[3][1]++;}}}cov_o1gs0dqat().s[12]++;return target;});cov_o1gs0dqat().s[13]++;return _extends.apply(this,arguments);}function _objectWithoutProperties(source,excluded){cov_o1gs0dqat().f[3]++;cov_o1gs0dqat().s[14]++;if(source==null){cov_o1gs0dqat().b[4][0]++;cov_o1gs0dqat().s[15]++;return{};}else{cov_o1gs0dqat().b[4][1]++;}var target=(cov_o1gs0dqat().s[16]++,_objectWithoutPropertiesLoose(source,excluded));var key,i;cov_o1gs0dqat().s[17]++;if(Object.getOwnPropertySymbols){cov_o1gs0dqat().b[5][0]++;var sourceSymbolKeys=(cov_o1gs0dqat().s[18]++,Object.getOwnPropertySymbols(source));cov_o1gs0dqat().s[19]++;for(i=0;i<sourceSymbolKeys.length;i++){cov_o1gs0dqat().s[20]++;key=sourceSymbolKeys[i];cov_o1gs0dqat().s[21]++;if(excluded.indexOf(key)>=0){cov_o1gs0dqat().b[6][0]++;cov_o1gs0dqat().s[22]++;continue;}else{cov_o1gs0dqat().b[6][1]++;}cov_o1gs0dqat().s[23]++;if(!Object.prototype.propertyIsEnumerable.call(source,key)){cov_o1gs0dqat().b[7][0]++;cov_o1gs0dqat().s[24]++;continue;}else{cov_o1gs0dqat().b[7][1]++;}cov_o1gs0dqat().s[25]++;target[key]=source[key];}}else{cov_o1gs0dqat().b[5][1]++;}cov_o1gs0dqat().s[26]++;return target;}function _objectWithoutPropertiesLoose(source,excluded){cov_o1gs0dqat().f[4]++;cov_o1gs0dqat().s[27]++;if(source==null){cov_o1gs0dqat().b[8][0]++;cov_o1gs0dqat().s[28]++;return{};}else{cov_o1gs0dqat().b[8][1]++;}var target=(cov_o1gs0dqat().s[29]++,{});var sourceKeys=(cov_o1gs0dqat().s[30]++,Object.keys(source));var key,i;cov_o1gs0dqat().s[31]++;for(i=0;i<sourceKeys.length;i++){cov_o1gs0dqat().s[32]++;key=sourceKeys[i];cov_o1gs0dqat().s[33]++;if(excluded.indexOf(key)>=0){cov_o1gs0dqat().b[9][0]++;cov_o1gs0dqat().s[34]++;continue;}else{cov_o1gs0dqat().b[9][1]++;}cov_o1gs0dqat().s[35]++;target[key]=source[key];}cov_o1gs0dqat().s[36]++;return target;}function ownKeys(object,enumerableOnly){cov_o1gs0dqat().f[5]++;var keys=(cov_o1gs0dqat().s[37]++,Object.keys(object));cov_o1gs0dqat().s[38]++;if(Object.getOwnPropertySymbols){cov_o1gs0dqat().b[10][0]++;var symbols=(cov_o1gs0dqat().s[39]++,Object.getOwnPropertySymbols(object));cov_o1gs0dqat().s[40]++;if(enumerableOnly){cov_o1gs0dqat().b[11][0]++;cov_o1gs0dqat().s[41]++;symbols=symbols.filter(function(sym){cov_o1gs0dqat().f[6]++;cov_o1gs0dqat().s[42]++;return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}else{cov_o1gs0dqat().b[11][1]++;}cov_o1gs0dqat().s[43]++;keys.push.apply(keys,symbols);}else{cov_o1gs0dqat().b[10][1]++;}cov_o1gs0dqat().s[44]++;return keys;}function _objectSpread(target){cov_o1gs0dqat().f[7]++;cov_o1gs0dqat().s[45]++;for(var i=(cov_o1gs0dqat().s[46]++,1);i<arguments.length;i++){var source=(cov_o1gs0dqat().s[47]++,arguments[i]!=null?(cov_o1gs0dqat().b[12][0]++,arguments[i]):(cov_o1gs0dqat().b[12][1]++,{}));cov_o1gs0dqat().s[48]++;if(i%2){cov_o1gs0dqat().b[13][0]++;cov_o1gs0dqat().s[49]++;ownKeys(Object(source),true).forEach(function(key){cov_o1gs0dqat().f[8]++;cov_o1gs0dqat().s[50]++;_defineProperty(target,key,source[key]);});}else{cov_o1gs0dqat().b[13][1]++;cov_o1gs0dqat().s[51]++;if(Object.getOwnPropertyDescriptors){cov_o1gs0dqat().b[14][0]++;cov_o1gs0dqat().s[52]++;Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{cov_o1gs0dqat().b[14][1]++;cov_o1gs0dqat().s[53]++;ownKeys(Object(source)).forEach(function(key){cov_o1gs0dqat().f[9]++;cov_o1gs0dqat().s[54]++;Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}}cov_o1gs0dqat().s[55]++;return target;}function _defineProperty(obj,key,value){cov_o1gs0dqat().f[10]++;cov_o1gs0dqat().s[56]++;if(key in obj){cov_o1gs0dqat().b[15][0]++;cov_o1gs0dqat().s[57]++;Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{cov_o1gs0dqat().b[15][1]++;cov_o1gs0dqat().s[58]++;obj[key]=value;}cov_o1gs0dqat().s[59]++;return obj;}function mongoFieldToParseSchemaField(type){cov_o1gs0dqat().f[11]++;cov_o1gs0dqat().s[60]++;if(type[0]==='*'){cov_o1gs0dqat().b[16][0]++;cov_o1gs0dqat().s[61]++;return{type:'Pointer',targetClass:type.slice(1)};}else{cov_o1gs0dqat().b[16][1]++;}cov_o1gs0dqat().s[62]++;if(type.startsWith('relation<')){cov_o1gs0dqat().b[17][0]++;cov_o1gs0dqat().s[63]++;return{type:'Relation',targetClass:type.slice('relation<'.length,type.length-1)};}else{cov_o1gs0dqat().b[17][1]++;}cov_o1gs0dqat().s[64]++;switch(type){case'number':cov_o1gs0dqat().b[18][0]++;cov_o1gs0dqat().s[65]++;return{type:'Number'};case'string':cov_o1gs0dqat().b[18][1]++;cov_o1gs0dqat().s[66]++;return{type:'String'};case'boolean':cov_o1gs0dqat().b[18][2]++;cov_o1gs0dqat().s[67]++;return{type:'Boolean'};case'date':cov_o1gs0dqat().b[18][3]++;cov_o1gs0dqat().s[68]++;return{type:'Date'};case'map':cov_o1gs0dqat().b[18][4]++;case'object':cov_o1gs0dqat().b[18][5]++;cov_o1gs0dqat().s[69]++;return{type:'Object'};case'array':cov_o1gs0dqat().b[18][6]++;cov_o1gs0dqat().s[70]++;return{type:'Array'};case'geopoint':cov_o1gs0dqat().b[18][7]++;cov_o1gs0dqat().s[71]++;return{type:'GeoPoint'};case'file':cov_o1gs0dqat().b[18][8]++;cov_o1gs0dqat().s[72]++;return{type:'File'};case'bytes':cov_o1gs0dqat().b[18][9]++;cov_o1gs0dqat().s[73]++;return{type:'Bytes'};case'polygon':cov_o1gs0dqat().b[18][10]++;cov_o1gs0dqat().s[74]++;return{type:'Polygon'};}}const nonFieldSchemaKeys=(cov_o1gs0dqat().s[75]++,['_id','_metadata','_client_permissions']);function mongoSchemaFieldsToParseSchemaFields(schema){cov_o1gs0dqat().f[12]++;var fieldNames=(cov_o1gs0dqat().s[76]++,Object.keys(schema).filter(key=>{cov_o1gs0dqat().f[13]++;cov_o1gs0dqat().s[77]++;return nonFieldSchemaKeys.indexOf(key)===-1;}));var response=(cov_o1gs0dqat().s[78]++,fieldNames.reduce((obj,fieldName)=>{cov_o1gs0dqat().f[14]++;cov_o1gs0dqat().s[79]++;obj[fieldName]=mongoFieldToParseSchemaField(schema[fieldName]);cov_o1gs0dqat().s[80]++;if((cov_o1gs0dqat().b[20][0]++,schema._metadata)&&(cov_o1gs0dqat().b[20][1]++,schema._metadata.fields_options)&&(cov_o1gs0dqat().b[20][2]++,schema._metadata.fields_options[fieldName])){cov_o1gs0dqat().b[19][0]++;cov_o1gs0dqat().s[81]++;obj[fieldName]=Object.assign({},obj[fieldName],schema._metadata.fields_options[fieldName]);}else{cov_o1gs0dqat().b[19][1]++;}cov_o1gs0dqat().s[82]++;return obj;},{}));cov_o1gs0dqat().s[83]++;response.ACL={type:'ACL'};cov_o1gs0dqat().s[84]++;response.createdAt={type:'Date'};cov_o1gs0dqat().s[85]++;response.updatedAt={type:'Date'};cov_o1gs0dqat().s[86]++;response.objectId={type:'String'};cov_o1gs0dqat().s[87]++;return response;}const emptyCLPS=(cov_o1gs0dqat().s[88]++,Object.freeze({find:{},count:{},get:{},create:{},update:{},delete:{},addField:{},protectedFields:{}}));const defaultCLPS=(cov_o1gs0dqat().s[89]++,Object.freeze({find:{'*':true},count:{'*':true},get:{'*':true},create:{'*':true},update:{'*':true},delete:{'*':true},addField:{'*':true},protectedFields:{'*':[]}}));function mongoSchemaToParseSchema(mongoSchema){cov_o1gs0dqat().f[15]++;let clps=(cov_o1gs0dqat().s[90]++,defaultCLPS);let indexes=(cov_o1gs0dqat().s[91]++,{});cov_o1gs0dqat().s[92]++;if(mongoSchema._metadata){cov_o1gs0dqat().b[21][0]++;cov_o1gs0dqat().s[93]++;if(mongoSchema._metadata.class_permissions){cov_o1gs0dqat().b[22][0]++;cov_o1gs0dqat().s[94]++;clps=_objectSpread(_objectSpread({},emptyCLPS),mongoSchema._metadata.class_permissions);}else{cov_o1gs0dqat().b[22][1]++;}cov_o1gs0dqat().s[95]++;if(mongoSchema._metadata.indexes){cov_o1gs0dqat().b[23][0]++;cov_o1gs0dqat().s[96]++;indexes=_objectSpread({},mongoSchema._metadata.indexes);}else{cov_o1gs0dqat().b[23][1]++;}}else{cov_o1gs0dqat().b[21][1]++;}cov_o1gs0dqat().s[97]++;return{className:mongoSchema._id,fields:mongoSchemaFieldsToParseSchemaFields(mongoSchema),classLevelPermissions:clps,indexes:indexes};}function _mongoSchemaQueryFromNameQuery(name,query){cov_o1gs0dqat().f[16]++;const object=(cov_o1gs0dqat().s[98]++,{_id:name});cov_o1gs0dqat().s[99]++;if(query){cov_o1gs0dqat().b[24][0]++;cov_o1gs0dqat().s[100]++;Object.keys(query).forEach(key=>{cov_o1gs0dqat().f[17]++;cov_o1gs0dqat().s[101]++;object[key]=query[key];});}else{cov_o1gs0dqat().b[24][1]++;}cov_o1gs0dqat().s[102]++;return object;}// Returns a type suitable for inserting into mongo _SCHEMA collection.
// Does no validation. That is expected to be done in Parse Server.
function parseFieldTypeToMongoFieldType({type,targetClass}){cov_o1gs0dqat().f[18]++;cov_o1gs0dqat().s[103]++;switch(type){case'Pointer':cov_o1gs0dqat().b[25][0]++;cov_o1gs0dqat().s[104]++;return`*${targetClass}`;case'Relation':cov_o1gs0dqat().b[25][1]++;cov_o1gs0dqat().s[105]++;return`relation<${targetClass}>`;case'Number':cov_o1gs0dqat().b[25][2]++;cov_o1gs0dqat().s[106]++;return'number';case'String':cov_o1gs0dqat().b[25][3]++;cov_o1gs0dqat().s[107]++;return'string';case'Boolean':cov_o1gs0dqat().b[25][4]++;cov_o1gs0dqat().s[108]++;return'boolean';case'Date':cov_o1gs0dqat().b[25][5]++;cov_o1gs0dqat().s[109]++;return'date';case'Object':cov_o1gs0dqat().b[25][6]++;cov_o1gs0dqat().s[110]++;return'object';case'Array':cov_o1gs0dqat().b[25][7]++;cov_o1gs0dqat().s[111]++;return'array';case'GeoPoint':cov_o1gs0dqat().b[25][8]++;cov_o1gs0dqat().s[112]++;return'geopoint';case'File':cov_o1gs0dqat().b[25][9]++;cov_o1gs0dqat().s[113]++;return'file';case'Bytes':cov_o1gs0dqat().b[25][10]++;cov_o1gs0dqat().s[114]++;return'bytes';case'Polygon':cov_o1gs0dqat().b[25][11]++;cov_o1gs0dqat().s[115]++;return'polygon';}}class MongoSchemaCollection{constructor(collection){cov_o1gs0dqat().f[19]++;cov_o1gs0dqat().s[116]++;this._collection=collection;}_fetchAllSchemasFrom_SCHEMA(){cov_o1gs0dqat().f[20]++;cov_o1gs0dqat().s[117]++;return this._collection._rawFind({}).then(schemas=>{cov_o1gs0dqat().f[21]++;cov_o1gs0dqat().s[118]++;return schemas.map(mongoSchemaToParseSchema);});}_fetchOneSchemaFrom_SCHEMA(name){cov_o1gs0dqat().f[22]++;cov_o1gs0dqat().s[119]++;return this._collection._rawFind(_mongoSchemaQueryFromNameQuery(name),{limit:1}).then(results=>{cov_o1gs0dqat().f[23]++;cov_o1gs0dqat().s[120]++;if(results.length===1){cov_o1gs0dqat().b[26][0]++;cov_o1gs0dqat().s[121]++;return mongoSchemaToParseSchema(results[0]);}else{cov_o1gs0dqat().b[26][1]++;cov_o1gs0dqat().s[122]++;throw undefined;}});}// Atomically find and delete an object based on query.
findAndDeleteSchema(name){cov_o1gs0dqat().f[24]++;cov_o1gs0dqat().s[123]++;return this._collection._mongoCollection.findOneAndDelete(_mongoSchemaQueryFromNameQuery(name));}insertSchema(schema){cov_o1gs0dqat().f[25]++;cov_o1gs0dqat().s[124]++;return this._collection.insertOne(schema).then(result=>{cov_o1gs0dqat().f[26]++;cov_o1gs0dqat().s[125]++;return mongoSchemaToParseSchema(result.ops[0]);}).catch(error=>{cov_o1gs0dqat().f[27]++;cov_o1gs0dqat().s[126]++;if(error.code===11000){cov_o1gs0dqat().b[27][0]++;cov_o1gs0dqat().s[127]++;//Mongo's duplicate key error
throw new _node.default.Error(_node.default.Error.DUPLICATE_VALUE,'Class already exists.');}else{cov_o1gs0dqat().b[27][1]++;cov_o1gs0dqat().s[128]++;throw error;}});}updateSchema(name,update){cov_o1gs0dqat().f[28]++;cov_o1gs0dqat().s[129]++;return this._collection.updateOne(_mongoSchemaQueryFromNameQuery(name),update);}upsertSchema(name,query,update){cov_o1gs0dqat().f[29]++;cov_o1gs0dqat().s[130]++;return this._collection.upsertOne(_mongoSchemaQueryFromNameQuery(name,query),update);}// Add a field to the schema. If database does not support the field
// type (e.g. mongo doesn't support more than one GeoPoint in a class) reject with an "Incorrect Type"
// Parse error with a desciptive message. If the field already exists, this function must
// not modify the schema, and must reject with DUPLICATE_VALUE error.
// If this is called for a class that doesn't exist, this function must create that class.
// TODO: throw an error if an unsupported field type is passed. Deciding whether a type is supported
// should be the job of the adapter. Some adapters may not support GeoPoint at all. Others may
// Support additional types that Mongo doesn't, like Money, or something.
// TODO: don't spend an extra query on finding the schema if the type we are trying to add isn't a GeoPoint.
addFieldIfNotExists(className,fieldName,fieldType){cov_o1gs0dqat().f[30]++;cov_o1gs0dqat().s[131]++;return this._fetchOneSchemaFrom_SCHEMA(className).then(schema=>{cov_o1gs0dqat().f[31]++;cov_o1gs0dqat().s[132]++;// If a field with this name already exists, it will be handled elsewhere.
if(schema.fields[fieldName]!==undefined){cov_o1gs0dqat().b[28][0]++;cov_o1gs0dqat().s[133]++;return;}else{cov_o1gs0dqat().b[28][1]++;}// The schema exists. Check for existing GeoPoints.
cov_o1gs0dqat().s[134]++;if(fieldType.type==='GeoPoint'){cov_o1gs0dqat().b[29][0]++;cov_o1gs0dqat().s[135]++;// Make sure there are not other geopoint fields
if(Object.keys(schema.fields).some(existingField=>{cov_o1gs0dqat().f[32]++;cov_o1gs0dqat().s[136]++;return schema.fields[existingField].type==='GeoPoint';})){cov_o1gs0dqat().b[30][0]++;cov_o1gs0dqat().s[137]++;throw new _node.default.Error(_node.default.Error.INCORRECT_TYPE,'MongoDB only supports one GeoPoint field in a class.');}else{cov_o1gs0dqat().b[30][1]++;}}else{cov_o1gs0dqat().b[29][1]++;}cov_o1gs0dqat().s[138]++;return;},error=>{cov_o1gs0dqat().f[33]++;cov_o1gs0dqat().s[139]++;// If error is undefined, the schema doesn't exist, and we can create the schema with the field.
// If some other error, reject with it.
if(error===undefined){cov_o1gs0dqat().b[31][0]++;cov_o1gs0dqat().s[140]++;return;}else{cov_o1gs0dqat().b[31][1]++;}cov_o1gs0dqat().s[141]++;throw error;}).then(()=>{cov_o1gs0dqat().f[34]++;const{type,targetClass}=(cov_o1gs0dqat().s[142]++,fieldType),fieldOptions=(cov_o1gs0dqat().s[143]++,_objectWithoutProperties(fieldType,["type","targetClass"]));// We use $exists and $set to avoid overwriting the field type if it
// already exists. (it could have added inbetween the last query and the update)
cov_o1gs0dqat().s[144]++;if((cov_o1gs0dqat().b[33][0]++,fieldOptions)&&(cov_o1gs0dqat().b[33][1]++,Object.keys(fieldOptions).length>0)){cov_o1gs0dqat().b[32][0]++;cov_o1gs0dqat().s[145]++;return this.upsertSchema(className,{[fieldName]:{$exists:false}},{$set:{[fieldName]:parseFieldTypeToMongoFieldType({type,targetClass}),[`_metadata.fields_options.${fieldName}`]:fieldOptions}});}else{cov_o1gs0dqat().b[32][1]++;cov_o1gs0dqat().s[146]++;return this.upsertSchema(className,{[fieldName]:{$exists:false}},{$set:{[fieldName]:parseFieldTypeToMongoFieldType({type,targetClass})}});}});}async updateFieldOptions(className,fieldName,fieldType){cov_o1gs0dqat().f[35]++;const fieldOptions=(cov_o1gs0dqat().s[147]++,_extends({},fieldType));cov_o1gs0dqat().s[148]++;delete fieldOptions.type;cov_o1gs0dqat().s[149]++;delete fieldOptions.targetClass;cov_o1gs0dqat().s[150]++;await this.upsertSchema(className,{[fieldName]:{$exists:true}},{$set:{[`_metadata.fields_options.${fieldName}`]:fieldOptions}});}}// Exported for testing reasons and because we haven't moved all mongo schema format
// related logic into the database adapter yet.
cov_o1gs0dqat().s[151]++;MongoSchemaCollection._TESTmongoSchemaToParseSchema=mongoSchemaToParseSchema;cov_o1gs0dqat().s[152]++;MongoSchemaCollection.parseFieldTypeToMongoFieldType=parseFieldTypeToMongoFieldType;var _default=(cov_o1gs0dqat().s[153]++,MongoSchemaCollection);cov_o1gs0dqat().s[154]++;exports.default=_default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,