"use strict";function cov_26e1rr261v(){var path="/parse-server/lib/Adapters/Storage/Postgres/PostgresClient.js";var hash="ded2f2b585910943b89697a560debf00d86b61e5";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Adapters/Storage/Postgres/PostgresClient.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:36}},"2":{start:{line:8,column:15},end:{line:8,column:48}},"3":{start:{line:11,column:18},end:{line:11,column:20}},"4":{start:{line:12,column:2},end:{line:12,column:42}},"5":{start:{line:14,column:2},end:{line:16,column:3}},"6":{start:{line:15,column:4},end:{line:15,column:54}},"7":{start:{line:18,column:2},end:{line:20,column:3}},"8":{start:{line:19,column:4},end:{line:19,column:42}},"9":{start:{line:22,column:22},end:{line:22,column:49}},"10":{start:{line:23,column:2},end:{line:23,column:58}},"11":{start:{line:25,column:14},end:{line:25,column:48}},"12":{start:{line:27,column:17},end:{line:27,column:31}},"13":{start:{line:29,column:2},end:{line:37,column:3}},"14":{start:{line:30,column:20},end:{line:30,column:41}},"15":{start:{line:32,column:4},end:{line:34,column:5}},"16":{start:{line:33,column:6},end:{line:33,column:23}},"17":{start:{line:36,column:4},end:{line:36,column:32}},"18":{start:{line:39,column:2},end:{line:43,column:3}},"19":{start:{line:40,column:4},end:{line:42,column:5}},"20":{start:{line:41,column:6},end:{line:41,column:54}},"21":{start:{line:45,column:2},end:{line:48,column:4}}},fnMap:{"0":{name:"createClient",decl:{start:{line:10,column:9},end:{line:10,column:21}},loc:{start:{line:10,column:44},end:{line:49,column:1}},line:10}},branchMap:{"0":{loc:{start:{line:12,column:20},end:{line:12,column:41}},type:"binary-expr",locations:[{start:{line:12,column:20},end:{line:12,column:35}},{start:{line:12,column:39},end:{line:12,column:41}}],line:12},"1":{loc:{start:{line:14,column:2},end:{line:16,column:3}},type:"if",locations:[{start:{line:14,column:2},end:{line:16,column:3}},{start:{line:14,column:2},end:{line:16,column:3}}],line:14},"2":{loc:{start:{line:22,column:22},end:{line:22,column:49}},type:"binary-expr",locations:[{start:{line:22,column:22},end:{line:22,column:43}},{start:{line:22,column:47},end:{line:22,column:49}}],line:22},"3":{loc:{start:{line:23,column:27},end:{line:23,column:57}},type:"binary-expr",locations:[{start:{line:23,column:27},end:{line:23,column:34}},{start:{line:23,column:38},end:{line:23,column:57}}],line:23},"4":{loc:{start:{line:29,column:2},end:{line:37,column:3}},type:"if",locations:[{start:{line:29,column:2},end:{line:37,column:3}},{start:{line:29,column:2},end:{line:37,column:3}}],line:29},"5":{loc:{start:{line:32,column:4},end:{line:34,column:5}},type:"if",locations:[{start:{line:32,column:4},end:{line:34,column:5}},{start:{line:32,column:4},end:{line:34,column:5}}],line:32},"6":{loc:{start:{line:39,column:2},end:{line:43,column:3}},type:"if",locations:[{start:{line:39,column:2},end:{line:43,column:3}},{start:{line:39,column:2},end:{line:43,column:3}}],line:39}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},f:{"0":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},inputSourceMap:{version:3,sources:["../../../../src/Adapters/Storage/Postgres/PostgresClient.js"],names:["parser","require","createClient","uri","databaseOptions","dbOptions","getDatabaseOptionsFromURI","key","initOptions","noWarnings","process","env","TESTING","pgp","client","PARSE_SERVER_LOG_LEVEL","monitor","isAttached","detach","attach","pgOptions","pg","defaults"],mappings:";;;;;;;AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,wBAAD,CAAtB;;AAEO,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,eAA3B,EAA4C;AACjD,MAAIC,SAAS,GAAG,EAAhB;AACAD,EAAAA,eAAe,GAAGA,eAAe,IAAI,EAArC;;AAEA,MAAID,GAAJ,EAAS;AACPE,IAAAA,SAAS,GAAGL,MAAM,CAACM,yBAAP,CAAiCH,GAAjC,CAAZ;AACD;;AAED,OAAK,MAAMI,GAAX,IAAkBH,eAAlB,EAAmC;AACjCC,IAAAA,SAAS,CAACE,GAAD,CAAT,GAAiBH,eAAe,CAACG,GAAD,CAAhC;AACD;;AAED,QAAMC,WAAW,GAAGH,SAAS,CAACG,WAAV,IAAyB,EAA7C;AACAA,EAAAA,WAAW,CAACC,UAAZ,GAAyBC,OAAO,IAAIA,OAAO,CAACC,GAAR,CAAYC,OAAhD;;AAEA,QAAMC,GAAG,GAAGZ,OAAO,CAAC,YAAD,CAAP,CAAsBO,WAAtB,CAAZ;;AACA,QAAMM,MAAM,GAAGD,GAAG,CAACR,SAAD,CAAlB;;AAEA,MAAIK,OAAO,CAACC,GAAR,CAAYI,sBAAZ,KAAuC,OAA3C,EAAoD;AAClD,UAAMC,OAAO,GAAGf,OAAO,CAAC,YAAD,CAAvB;;AACA,QAAIe,OAAO,CAACC,UAAR,EAAJ,EAA0B;AACxBD,MAAAA,OAAO,CAACE,MAAR;AACD;;AACDF,IAAAA,OAAO,CAACG,MAAR,CAAeX,WAAf;AACD;;AAED,MAAIH,SAAS,CAACe,SAAd,EAAyB;AACvB,SAAK,MAAMb,GAAX,IAAkBF,SAAS,CAACe,SAA5B,EAAuC;AACrCP,MAAAA,GAAG,CAACQ,EAAJ,CAAOC,QAAP,CAAgBf,GAAhB,IAAuBF,SAAS,CAACe,SAAV,CAAoBb,GAApB,CAAvB;AACD;AACF;;AAED,SAAO;AAAEO,IAAAA,MAAF;AAAUD,IAAAA;AAAV,GAAP;AACD",sourcesContent:["const parser = require('./PostgresConfigParser');\n\nexport function createClient(uri, databaseOptions) {\n  let dbOptions = {};\n  databaseOptions = databaseOptions || {};\n\n  if (uri) {\n    dbOptions = parser.getDatabaseOptionsFromURI(uri);\n  }\n\n  for (const key in databaseOptions) {\n    dbOptions[key] = databaseOptions[key];\n  }\n\n  const initOptions = dbOptions.initOptions || {};\n  initOptions.noWarnings = process && process.env.TESTING;\n\n  const pgp = require('pg-promise')(initOptions);\n  const client = pgp(dbOptions);\n\n  if (process.env.PARSE_SERVER_LOG_LEVEL === 'debug') {\n    const monitor = require('pg-monitor');\n    if (monitor.isAttached()) {\n      monitor.detach();\n    }\n    monitor.attach(initOptions);\n  }\n\n  if (dbOptions.pgOptions) {\n    for (const key in dbOptions.pgOptions) {\n      pgp.pg.defaults[key] = dbOptions.pgOptions[key];\n    }\n  }\n\n  return { client, pgp };\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ded2f2b585910943b89697a560debf00d86b61e5"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_26e1rr261v=function(){return actualCoverage;};}return actualCoverage;}cov_26e1rr261v();cov_26e1rr261v().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_26e1rr261v().s[1]++;exports.createClient=createClient;const parser=(cov_26e1rr261v().s[2]++,require('./PostgresConfigParser'));function createClient(uri,databaseOptions){cov_26e1rr261v().f[0]++;let dbOptions=(cov_26e1rr261v().s[3]++,{});cov_26e1rr261v().s[4]++;databaseOptions=(cov_26e1rr261v().b[0][0]++,databaseOptions)||(cov_26e1rr261v().b[0][1]++,{});cov_26e1rr261v().s[5]++;if(uri){cov_26e1rr261v().b[1][0]++;cov_26e1rr261v().s[6]++;dbOptions=parser.getDatabaseOptionsFromURI(uri);}else{cov_26e1rr261v().b[1][1]++;}cov_26e1rr261v().s[7]++;for(const key in databaseOptions){cov_26e1rr261v().s[8]++;dbOptions[key]=databaseOptions[key];}const initOptions=(cov_26e1rr261v().s[9]++,(cov_26e1rr261v().b[2][0]++,dbOptions.initOptions)||(cov_26e1rr261v().b[2][1]++,{}));cov_26e1rr261v().s[10]++;initOptions.noWarnings=(cov_26e1rr261v().b[3][0]++,process)&&(cov_26e1rr261v().b[3][1]++,process.env.TESTING);const pgp=(cov_26e1rr261v().s[11]++,require('pg-promise')(initOptions));const client=(cov_26e1rr261v().s[12]++,pgp(dbOptions));cov_26e1rr261v().s[13]++;if(process.env.PARSE_SERVER_LOG_LEVEL==='debug'){cov_26e1rr261v().b[4][0]++;const monitor=(cov_26e1rr261v().s[14]++,require('pg-monitor'));cov_26e1rr261v().s[15]++;if(monitor.isAttached()){cov_26e1rr261v().b[5][0]++;cov_26e1rr261v().s[16]++;monitor.detach();}else{cov_26e1rr261v().b[5][1]++;}cov_26e1rr261v().s[17]++;monitor.attach(initOptions);}else{cov_26e1rr261v().b[4][1]++;}cov_26e1rr261v().s[18]++;if(dbOptions.pgOptions){cov_26e1rr261v().b[6][0]++;cov_26e1rr261v().s[19]++;for(const key in dbOptions.pgOptions){cov_26e1rr261v().s[20]++;pgp.pg.defaults[key]=dbOptions.pgOptions[key];}}else{cov_26e1rr261v().b[6][1]++;}cov_26e1rr261v().s[21]++;return{client,pgp};}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9BZGFwdGVycy9TdG9yYWdlL1Bvc3RncmVzL1Bvc3RncmVzQ2xpZW50LmpzIl0sIm5hbWVzIjpbInBhcnNlciIsInJlcXVpcmUiLCJjcmVhdGVDbGllbnQiLCJ1cmkiLCJkYXRhYmFzZU9wdGlvbnMiLCJkYk9wdGlvbnMiLCJnZXREYXRhYmFzZU9wdGlvbnNGcm9tVVJJIiwia2V5IiwiaW5pdE9wdGlvbnMiLCJub1dhcm5pbmdzIiwicHJvY2VzcyIsImVudiIsIlRFU1RJTkciLCJwZ3AiLCJjbGllbnQiLCJQQVJTRV9TRVJWRVJfTE9HX0xFVkVMIiwibW9uaXRvciIsImlzQXR0YWNoZWQiLCJkZXRhY2giLCJhdHRhY2giLCJwZ09wdGlvbnMiLCJwZyIsImRlZmF1bHRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsd0JBQUQsQ0FBdEI7O0FBRU8sU0FBU0MsWUFBVCxDQUFzQkMsR0FBdEIsRUFBMkJDLGVBQTNCLEVBQTRDO0FBQ2pELE1BQUlDLFNBQVMsR0FBRyxFQUFoQjtBQUNBRCxFQUFBQSxlQUFlLEdBQUdBLGVBQWUsSUFBSSxFQUFyQzs7QUFFQSxNQUFJRCxHQUFKLEVBQVM7QUFDUEUsSUFBQUEsU0FBUyxHQUFHTCxNQUFNLENBQUNNLHlCQUFQLENBQWlDSCxHQUFqQyxDQUFaO0FBQ0Q7O0FBRUQsT0FBSyxNQUFNSSxHQUFYLElBQWtCSCxlQUFsQixFQUFtQztBQUNqQ0MsSUFBQUEsU0FBUyxDQUFDRSxHQUFELENBQVQsR0FBaUJILGVBQWUsQ0FBQ0csR0FBRCxDQUFoQztBQUNEOztBQUVELFFBQU1DLFdBQVcsR0FBR0gsU0FBUyxDQUFDRyxXQUFWLElBQXlCLEVBQTdDO0FBQ0FBLEVBQUFBLFdBQVcsQ0FBQ0MsVUFBWixHQUF5QkMsT0FBTyxJQUFJQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsT0FBaEQ7O0FBRUEsUUFBTUMsR0FBRyxHQUFHWixPQUFPLENBQUMsWUFBRCxDQUFQLENBQXNCTyxXQUF0QixDQUFaOztBQUNBLFFBQU1NLE1BQU0sR0FBR0QsR0FBRyxDQUFDUixTQUFELENBQWxCOztBQUVBLE1BQUlLLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSSxzQkFBWixLQUF1QyxPQUEzQyxFQUFvRDtBQUNsRCxVQUFNQyxPQUFPLEdBQUdmLE9BQU8sQ0FBQyxZQUFELENBQXZCOztBQUNBLFFBQUllLE9BQU8sQ0FBQ0MsVUFBUixFQUFKLEVBQTBCO0FBQ3hCRCxNQUFBQSxPQUFPLENBQUNFLE1BQVI7QUFDRDs7QUFDREYsSUFBQUEsT0FBTyxDQUFDRyxNQUFSLENBQWVYLFdBQWY7QUFDRDs7QUFFRCxNQUFJSCxTQUFTLENBQUNlLFNBQWQsRUFBeUI7QUFDdkIsU0FBSyxNQUFNYixHQUFYLElBQWtCRixTQUFTLENBQUNlLFNBQTVCLEVBQXVDO0FBQ3JDUCxNQUFBQSxHQUFHLENBQUNRLEVBQUosQ0FBT0MsUUFBUCxDQUFnQmYsR0FBaEIsSUFBdUJGLFNBQVMsQ0FBQ2UsU0FBVixDQUFvQmIsR0FBcEIsQ0FBdkI7QUFDRDtBQUNGOztBQUVELFNBQU87QUFBRU8sSUFBQUEsTUFBRjtBQUFVRCxJQUFBQTtBQUFWLEdBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhcnNlciA9IHJlcXVpcmUoJy4vUG9zdGdyZXNDb25maWdQYXJzZXInKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNsaWVudCh1cmksIGRhdGFiYXNlT3B0aW9ucykge1xuICBsZXQgZGJPcHRpb25zID0ge307XG4gIGRhdGFiYXNlT3B0aW9ucyA9IGRhdGFiYXNlT3B0aW9ucyB8fCB7fTtcblxuICBpZiAodXJpKSB7XG4gICAgZGJPcHRpb25zID0gcGFyc2VyLmdldERhdGFiYXNlT3B0aW9uc0Zyb21VUkkodXJpKTtcbiAgfVxuXG4gIGZvciAoY29uc3Qga2V5IGluIGRhdGFiYXNlT3B0aW9ucykge1xuICAgIGRiT3B0aW9uc1trZXldID0gZGF0YWJhc2VPcHRpb25zW2tleV07XG4gIH1cblxuICBjb25zdCBpbml0T3B0aW9ucyA9IGRiT3B0aW9ucy5pbml0T3B0aW9ucyB8fCB7fTtcbiAgaW5pdE9wdGlvbnMubm9XYXJuaW5ncyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy5lbnYuVEVTVElORztcblxuICBjb25zdCBwZ3AgPSByZXF1aXJlKCdwZy1wcm9taXNlJykoaW5pdE9wdGlvbnMpO1xuICBjb25zdCBjbGllbnQgPSBwZ3AoZGJPcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuUEFSU0VfU0VSVkVSX0xPR19MRVZFTCA9PT0gJ2RlYnVnJykge1xuICAgIGNvbnN0IG1vbml0b3IgPSByZXF1aXJlKCdwZy1tb25pdG9yJyk7XG4gICAgaWYgKG1vbml0b3IuaXNBdHRhY2hlZCgpKSB7XG4gICAgICBtb25pdG9yLmRldGFjaCgpO1xuICAgIH1cbiAgICBtb25pdG9yLmF0dGFjaChpbml0T3B0aW9ucyk7XG4gIH1cblxuICBpZiAoZGJPcHRpb25zLnBnT3B0aW9ucykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIGRiT3B0aW9ucy5wZ09wdGlvbnMpIHtcbiAgICAgIHBncC5wZy5kZWZhdWx0c1trZXldID0gZGJPcHRpb25zLnBnT3B0aW9uc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7IGNsaWVudCwgcGdwIH07XG59XG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9BZGFwdGVycy9TdG9yYWdlL1Bvc3RncmVzL1Bvc3RncmVzQ2xpZW50LmpzIl0sIm5hbWVzIjpbInBhcnNlciIsInJlcXVpcmUiLCJkYk9wdGlvbnMiLCJkYXRhYmFzZU9wdGlvbnMiLCJpbml0T3B0aW9ucyIsInByb2Nlc3MiLCJwZ3AiLCJjbGllbnQiLCJtb25pdG9yIl0sIm1hcHBpbmdzIjoiaTFMQVFHO3NPQVJILEtBQU1BLENBQUFBLE1BQU0sMEJBQUdDLE9BQU8sQ0FBdEIsd0JBQXNCLENBQVYsQ0FBWixDQUVPLFFBQUEsQ0FBQSxZQUFBLENBQUEsR0FBQSxDQUFBLGVBQUEsQ0FBNEMseUJBQ2pELEdBQUlDLENBQUFBLFNBQVMsMEJBQWIsRUFBYSxDQUFiLENBRGlELHdCQUVqREMsZUFBZSxDQUFHQSw0QkFBQUEsZUFBZSwrQkFBakNBLEVBQWlDLENBQWpDQSxDQUZpRCx3QkFJakQsR0FBQSxHQUFBLENBQVMsb0RBQ1BELFNBQVMsQ0FBR0YsTUFBTSxDQUFOQSx5QkFBQUEsQ0FBWkUsR0FBWUYsQ0FBWkUsQ0FDRCxDQUZELGlDQUppRCx3QkFRakQsSUFBSyxLQUFMLENBQUEsR0FBQSxHQUFBLENBQUEsZUFBQSxDQUFtQyx5QkFDakNBLFNBQVMsQ0FBVEEsR0FBUyxDQUFUQSxDQUFpQkMsZUFBZSxDQUFoQ0QsR0FBZ0MsQ0FBaENBLENBQ0QsQ0FFRCxLQUFNRSxDQUFBQSxXQUFXLDBCQUFHRiw0QkFBQUEsU0FBUyxDQUFUQSxXQUFBQSwrQkFBcEIsRUFBb0JBLENBQUgsQ0FBakIsQ0FaaUQseUJBYWpERSxXQUFXLENBQVhBLFVBQUFBLENBQXlCQyw0QkFBQUEsT0FBTywrQkFBSUEsT0FBTyxDQUFQQSxHQUFBQSxDQUFwQ0QsT0FBZ0MsQ0FBaENBLENBRUEsS0FBTUUsQ0FBQUEsR0FBRywyQkFBR0wsT0FBTyxDQUFQQSxZQUFPLENBQVBBLENBQVosV0FBWUEsQ0FBSCxDQUFULENBQ0EsS0FBTU0sQ0FBQUEsTUFBTSwyQkFBR0QsR0FBRyxDQUFsQixTQUFrQixDQUFOLENBQVosQ0FoQmlELHlCQWtCakQsR0FBSUQsT0FBTyxDQUFQQSxHQUFBQSxDQUFBQSxzQkFBQUEsR0FBSixPQUFBLENBQW9ELDRCQUNsRCxLQUFNRyxDQUFBQSxPQUFPLDJCQUFHUCxPQUFPLENBQXZCLFlBQXVCLENBQVYsQ0FBYixDQURrRCx5QkFFbEQsR0FBSU8sT0FBTyxDQUFYLFVBQUlBLEVBQUosQ0FBMEIscURBQ3hCQSxPQUFPLENBQVBBLE1BQUFBLEdBQ0QsQ0FGRCxpQ0FGa0QseUJBS2xEQSxPQUFPLENBQVBBLE1BQUFBLENBQUFBLFdBQUFBLEVBQ0QsQ0FORCxpQ0FsQmlELHlCQTBCakQsR0FBSU4sU0FBUyxDQUFiLFNBQUEsQ0FBeUIscURBQ3ZCLElBQUssS0FBTCxDQUFBLEdBQUEsR0FBa0JBLENBQUFBLFNBQVMsQ0FBM0IsU0FBQSxDQUF1QywwQkFDckNJLEdBQUcsQ0FBSEEsRUFBQUEsQ0FBQUEsUUFBQUEsQ0FBQUEsR0FBQUEsRUFBdUJKLFNBQVMsQ0FBVEEsU0FBQUEsQ0FBdkJJLEdBQXVCSixDQUF2QkksQ0FDRCxDQUNGLENBSkQsaUNBMUJpRCx5QkFnQ2pELE1BQU8sQ0FBQSxNQUFBLENBQVVBLEdBQVYsQ0FBUCxDQUNELEMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwYXJzZXIgPSByZXF1aXJlKCcuL1Bvc3RncmVzQ29uZmlnUGFyc2VyJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDbGllbnQodXJpLCBkYXRhYmFzZU9wdGlvbnMpIHtcbiAgbGV0IGRiT3B0aW9ucyA9IHt9O1xuICBkYXRhYmFzZU9wdGlvbnMgPSBkYXRhYmFzZU9wdGlvbnMgfHwge307XG5cbiAgaWYgKHVyaSkge1xuICAgIGRiT3B0aW9ucyA9IHBhcnNlci5nZXREYXRhYmFzZU9wdGlvbnNGcm9tVVJJKHVyaSk7XG4gIH1cblxuICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhYmFzZU9wdGlvbnMpIHtcbiAgICBkYk9wdGlvbnNba2V5XSA9IGRhdGFiYXNlT3B0aW9uc1trZXldO1xuICB9XG5cbiAgY29uc3QgaW5pdE9wdGlvbnMgPSBkYk9wdGlvbnMuaW5pdE9wdGlvbnMgfHwge307XG4gIGluaXRPcHRpb25zLm5vV2FybmluZ3MgPSBwcm9jZXNzICYmIHByb2Nlc3MuZW52LlRFU1RJTkc7XG5cbiAgY29uc3QgcGdwID0gcmVxdWlyZSgncGctcHJvbWlzZScpKGluaXRPcHRpb25zKTtcbiAgY29uc3QgY2xpZW50ID0gcGdwKGRiT3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52LlBBUlNFX1NFUlZFUl9MT0dfTEVWRUwgPT09ICdkZWJ1ZycpIHtcbiAgICBjb25zdCBtb25pdG9yID0gcmVxdWlyZSgncGctbW9uaXRvcicpO1xuICAgIGlmIChtb25pdG9yLmlzQXR0YWNoZWQoKSkge1xuICAgICAgbW9uaXRvci5kZXRhY2goKTtcbiAgICB9XG4gICAgbW9uaXRvci5hdHRhY2goaW5pdE9wdGlvbnMpO1xuICB9XG5cbiAgaWYgKGRiT3B0aW9ucy5wZ09wdGlvbnMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBkYk9wdGlvbnMucGdPcHRpb25zKSB7XG4gICAgICBwZ3AucGcuZGVmYXVsdHNba2V5XSA9IGRiT3B0aW9ucy5wZ09wdGlvbnNba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4geyBjbGllbnQsIHBncCB9O1xufVxuIl19