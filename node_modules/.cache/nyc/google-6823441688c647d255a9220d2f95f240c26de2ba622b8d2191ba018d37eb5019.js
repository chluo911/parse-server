'use strict';// Helper functions for accessing the google API.
function cov_1s0qj2s22n(){var path="/parse-server/lib/Adapters/Auth/google.js";var hash="d7ec3a58442ca46bab4e13b741982ae89bee3347";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/Adapters/Auth/google.js",statementMap:{"0":{start:{line:3,column:12},end:{line:3,column:39}},"1":{start:{line:5,column:14},end:{line:5,column:30}},"2":{start:{line:7,column:12},end:{line:7,column:35}},"3":{start:{line:9,column:21},end:{line:9,column:42}},"4":{start:{line:10,column:27},end:{line:10,column:56}},"5":{start:{line:11,column:12},end:{line:11,column:14}},"6":{start:{line:14,column:2},end:{line:16,column:3}},"7":{start:{line:15,column:4},end:{line:15,column:24}},"8":{start:{line:18,column:2},end:{line:49,column:5}},"9":{start:{line:19,column:4},end:{line:48,column:27}},"10":{start:{line:20,column:17},end:{line:20,column:19}},"11":{start:{line:21,column:6},end:{line:23,column:9}},"12":{start:{line:22,column:8},end:{line:22,column:39}},"13":{start:{line:24,column:6},end:{line:47,column:9}},"14":{start:{line:27,column:12},end:{line:27,column:28}},"15":{start:{line:28,column:21},end:{line:34,column:15}},"16":{start:{line:32,column:14},end:{line:34,column:10}},"17":{start:{line:36,column:8},end:{line:44,column:9}},"18":{start:{line:37,column:23},end:{line:37,column:77}},"19":{start:{line:39,column:10},end:{line:43,column:11}},"20":{start:{line:40,column:12},end:{line:42,column:15}},"21":{start:{line:46,column:8},end:{line:46,column:29}},"22":{start:{line:53,column:23},end:{line:55,column:4}},"23":{start:{line:57,column:2},end:{line:59,column:3}},"24":{start:{line:58,column:4},end:{line:58,column:97}},"25":{start:{line:61,column:2},end:{line:61,column:29}},"26":{start:{line:70,column:2},end:{line:72,column:3}},"27":{start:{line:71,column:4},end:{line:71,column:94}},"28":{start:{line:77,column:6},end:{line:77,column:31}},"29":{start:{line:79,column:20},end:{line:79,column:52}},"30":{start:{line:81,column:2},end:{line:89,column:3}},"31":{start:{line:82,column:4},end:{line:85,column:7}},"32":{start:{line:87,column:20},end:{line:87,column:37}},"33":{start:{line:88,column:4},end:{line:88,column:70}},"34":{start:{line:91,column:2},end:{line:93,column:3}},"35":{start:{line:92,column:4},end:{line:92,column:177}},"36":{start:{line:95,column:2},end:{line:97,column:3}},"37":{start:{line:96,column:4},end:{line:96,column:95}},"38":{start:{line:99,column:2},end:{line:101,column:3}},"39":{start:{line:100,column:4},end:{line:100,column:102}},"40":{start:{line:103,column:2},end:{line:103,column:19}},"41":{start:{line:108,column:2},end:{line:108,column:42}},"42":{start:{line:113,column:2},end:{line:113,column:27}},"43":{start:{line:116,column:0},end:{line:119,column:2}},"44":{start:{line:122,column:18},end:{line:122,column:50}},"45":{start:{line:123,column:19},end:{line:123,column:52}},"46":{start:{line:124,column:21},end:{line:124,column:58}},"47":{start:{line:125,column:22},end:{line:125,column:60}},"48":{start:{line:126,column:17},end:{line:126,column:38}},"49":{start:{line:127,column:17},end:{line:127,column:39}},"50":{start:{line:128,column:24},end:{line:128,column:47}},"51":{start:{line:129,column:24},end:{line:129,column:47}},"52":{start:{line:130,column:24},end:{line:130,column:194}},"53":{start:{line:131,column:14},end:{line:131,column:65}},"54":{start:{line:132,column:12},end:{line:132,column:46}},"55":{start:{line:133,column:2},end:{line:133,column:47}},"56":{start:{line:134,column:2},end:{line:134,column:44}},"57":{start:{line:135,column:2},end:{line:135,column:13}},"58":{start:{line:139,column:14},end:{line:139,column:23}},"59":{start:{line:141,column:2},end:{line:143,column:3}},"60":{start:{line:142,column:4},end:{line:142,column:25}},"61":{start:{line:145,column:2},end:{line:145,column:16}},"62":{start:{line:149,column:15},end:{line:149,column:34}},"63":{start:{line:151,column:2},end:{line:153,column:3}},"64":{start:{line:152,column:4},end:{line:152,column:22}},"65":{start:{line:155,column:2},end:{line:155,column:14}},"66":{start:{line:159,column:2},end:{line:161,column:3}},"67":{start:{line:160,column:4},end:{line:160,column:20}},"68":{start:{line:163,column:15},end:{line:163,column:23}},"69":{start:{line:164,column:29},end:{line:164,column:50}},"70":{start:{line:165,column:2},end:{line:165,column:42}}},fnMap:{"0":{name:"getGoogleKeyByKeyId",decl:{start:{line:13,column:9},end:{line:13,column:28}},loc:{start:{line:13,column:36},end:{line:50,column:1}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:18,column:21},end:{line:18,column:22}},loc:{start:{line:18,column:42},end:{line:49,column:3}},line:18},"2":{name:"(anonymous_2)",decl:{start:{line:19,column:60},end:{line:19,column:61}},loc:{start:{line:19,column:67},end:{line:48,column:5}},line:19},"3":{name:"(anonymous_3)",decl:{start:{line:21,column:21},end:{line:21,column:22}},loc:{start:{line:21,column:30},end:{line:23,column:7}},line:21},"4":{name:"(anonymous_4)",decl:{start:{line:24,column:20},end:{line:24,column:21}},loc:{start:{line:24,column:26},end:{line:47,column:7}},line:24},"5":{name:"(anonymous_5)",decl:{start:{line:28,column:33},end:{line:28,column:34}},loc:{start:{line:32,column:14},end:{line:34,column:10}},line:32},"6":{name:"getHeaderFromToken",decl:{start:{line:52,column:9},end:{line:52,column:27}},loc:{start:{line:52,column:35},end:{line:62,column:1}},line:52},"7":{name:"verifyIdToken",decl:{start:{line:64,column:15},end:{line:64,column:28}},loc:{start:{line:69,column:3},end:{line:104,column:1}},line:69},"8":{name:"validateAuthData",decl:{start:{line:107,column:9},end:{line:107,column:25}},loc:{start:{line:107,column:50},end:{line:109,column:1}},line:107},"9":{name:"validateAppId",decl:{start:{line:112,column:9},end:{line:112,column:22}},loc:{start:{line:112,column:25},end:{line:114,column:1}},line:112},"10":{name:"rsaPublicKeyToPEM",decl:{start:{line:121,column:9},end:{line:121,column:26}},loc:{start:{line:121,column:52},end:{line:136,column:1}},line:121},"11":{name:"prepadSigned",decl:{start:{line:138,column:9},end:{line:138,column:21}},loc:{start:{line:138,column:30},end:{line:146,column:1}},line:138},"12":{name:"toHex",decl:{start:{line:148,column:9},end:{line:148,column:14}},loc:{start:{line:148,column:23},end:{line:156,column:1}},line:148},"13":{name:"encodeLengthHex",decl:{start:{line:158,column:9},end:{line:158,column:24}},loc:{start:{line:158,column:28},end:{line:166,column:1}},line:158}},branchMap:{"0":{loc:{start:{line:14,column:2},end:{line:16,column:3}},type:"if",locations:[{start:{line:14,column:2},end:{line:16,column:3}},{start:{line:14,column:2},end:{line:16,column:3}}],line:14},"1":{loc:{start:{line:14,column:6},end:{line:14,column:50}},type:"binary-expr",locations:[{start:{line:14,column:6},end:{line:14,column:18}},{start:{line:14,column:22},end:{line:14,column:50}}],line:14},"2":{loc:{start:{line:36,column:8},end:{line:44,column:9}},type:"if",locations:[{start:{line:36,column:8},end:{line:44,column:9}},{start:{line:36,column:8},end:{line:44,column:9}}],line:36},"3":{loc:{start:{line:39,column:10},end:{line:43,column:11}},type:"if",locations:[{start:{line:39,column:10},end:{line:43,column:11}},{start:{line:39,column:10},end:{line:43,column:11}}],line:39},"4":{loc:{start:{line:57,column:2},end:{line:59,column:3}},type:"if",locations:[{start:{line:57,column:2},end:{line:59,column:3}},{start:{line:57,column:2},end:{line:59,column:3}}],line:57},"5":{loc:{start:{line:70,column:2},end:{line:72,column:3}},type:"if",locations:[{start:{line:70,column:2},end:{line:72,column:3}},{start:{line:70,column:2},end:{line:72,column:3}}],line:70},"6":{loc:{start:{line:91,column:2},end:{line:93,column:3}},type:"if",locations:[{start:{line:91,column:2},end:{line:93,column:3}},{start:{line:91,column:2},end:{line:93,column:3}}],line:91},"7":{loc:{start:{line:91,column:6},end:{line:91,column:76}},type:"binary-expr",locations:[{start:{line:91,column:6},end:{line:91,column:36}},{start:{line:91,column:40},end:{line:91,column:76}}],line:91},"8":{loc:{start:{line:95,column:2},end:{line:97,column:3}},type:"if",locations:[{start:{line:95,column:2},end:{line:97,column:3}},{start:{line:95,column:2},end:{line:97,column:3}}],line:95},"9":{loc:{start:{line:99,column:2},end:{line:101,column:3}},type:"if",locations:[{start:{line:99,column:2},end:{line:101,column:3}},{start:{line:99,column:2},end:{line:101,column:3}}],line:99},"10":{loc:{start:{line:99,column:6},end:{line:99,column:44}},type:"binary-expr",locations:[{start:{line:99,column:6},end:{line:99,column:14}},{start:{line:99,column:18},end:{line:99,column:44}}],line:99},"11":{loc:{start:{line:107,column:36},end:{line:107,column:48}},type:"default-arg",locations:[{start:{line:107,column:46},end:{line:107,column:48}}],line:107},"12":{loc:{start:{line:141,column:2},end:{line:143,column:3}},type:"if",locations:[{start:{line:141,column:2},end:{line:143,column:3}},{start:{line:141,column:2},end:{line:143,column:3}}],line:141},"13":{loc:{start:{line:141,column:6},end:{line:141,column:28}},type:"binary-expr",locations:[{start:{line:141,column:6},end:{line:141,column:15}},{start:{line:141,column:19},end:{line:141,column:28}}],line:141},"14":{loc:{start:{line:151,column:2},end:{line:153,column:3}},type:"if",locations:[{start:{line:151,column:2},end:{line:153,column:3}},{start:{line:151,column:2},end:{line:153,column:3}}],line:151},"15":{loc:{start:{line:159,column:2},end:{line:161,column:3}},type:"if",locations:[{start:{line:159,column:2},end:{line:161,column:3}},{start:{line:159,column:2},end:{line:161,column:3}}],line:159}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},inputSourceMap:{version:3,sources:["../../../src/Adapters/Auth/google.js"],names:["Parse","require","https","jwt","TOKEN_ISSUER","HTTPS_TOKEN_ISSUER","cache","getGoogleKeyByKeyId","keyId","expiresAt","Date","Promise","resolve","reject","get","res","data","on","chunk","toString","keys","JSON","parse","pems","reduce","n","modulus","e","exposant","kid","Object","assign","rsaPublicKeyToPEM","headers","expire","match","getTime","Number","getHeaderFromToken","token","decodedToken","decode","complete","Error","OBJECT_NOT_FOUND","header","verifyIdToken","id_token","id","clientId","alg","algorithm","jwtClaims","googleKey","verify","algorithms","audience","exception","message","iss","sub","aud","validateAuthData","authData","options","validateAppId","module","exports","modulusB64","exponentB64","Buffer","exponent","modulusHex","prepadSigned","exponentHex","modlen","length","explen","encodedModlen","encodeLengthHex","encodedExplen","encodedPubkey","der","pem","join","hexStr","msb","toHex","number","nstr","nHex","lengthOfLengthByte"],mappings:"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",sourcesContent:["'use strict';\n\n// Helper functions for accessing the google API.\nvar Parse = require('parse/node').Parse;\n\nconst https = require('https');\nconst jwt = require('jsonwebtoken');\n\nconst TOKEN_ISSUER = 'accounts.google.com';\nconst HTTPS_TOKEN_ISSUER = 'https://accounts.google.com';\n\nlet cache = {};\n\n// Retrieve Google Signin Keys (with cache control)\nfunction getGoogleKeyByKeyId(keyId) {\n  if (cache[keyId] && cache.expiresAt > new Date()) {\n    return cache[keyId];\n  }\n\n  return new Promise((resolve, reject) => {\n    https\n      .get(`https://www.googleapis.com/oauth2/v3/certs`, res => {\n        let data = '';\n        res.on('data', chunk => {\n          data += chunk.toString('utf8');\n        });\n        res.on('end', () => {\n          const { keys } = JSON.parse(data);\n          const pems = keys.reduce(\n            (pems, { n: modulus, e: exposant, kid }) =>\n              Object.assign(pems, {\n                [kid]: rsaPublicKeyToPEM(modulus, exposant),\n              }),\n            {}\n          );\n\n          if (res.headers['cache-control']) {\n            var expire = res.headers['cache-control'].match(/max-age=([0-9]+)/);\n\n            if (expire) {\n              cache = Object.assign({}, pems, {\n                expiresAt: new Date(new Date().getTime() + Number(expire[1]) * 1000),\n              });\n            }\n          }\n\n          resolve(pems[keyId]);\n        });\n      })\n      .on('error', reject);\n  });\n}\n\nfunction getHeaderFromToken(token) {\n  const decodedToken = jwt.decode(token, { complete: true });\n\n  if (!decodedToken) {\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `provided token does not decode as JWT`);\n  }\n\n  return decodedToken.header;\n}\n\nasync function verifyIdToken({ id_token: token, id }, { clientId }) {\n  if (!token) {\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `id token is invalid for this user.`);\n  }\n\n  const { kid: keyId, alg: algorithm } = getHeaderFromToken(token);\n  let jwtClaims;\n  const googleKey = await getGoogleKeyByKeyId(keyId);\n\n  try {\n    jwtClaims = jwt.verify(token, googleKey, {\n      algorithms: algorithm,\n      audience: clientId,\n    });\n  } catch (exception) {\n    const message = exception.message;\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `${message}`);\n  }\n\n  if (jwtClaims.iss !== TOKEN_ISSUER && jwtClaims.iss !== HTTPS_TOKEN_ISSUER) {\n    throw new Parse.Error(\n      Parse.Error.OBJECT_NOT_FOUND,\n      `id token not issued by correct provider - expected: ${TOKEN_ISSUER} or ${HTTPS_TOKEN_ISSUER} | from: ${jwtClaims.iss}`\n    );\n  }\n\n  if (jwtClaims.sub !== id) {\n    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `auth data is invalid for this user.`);\n  }\n\n  if (clientId && jwtClaims.aud !== clientId) {\n    throw new Parse.Error(\n      Parse.Error.OBJECT_NOT_FOUND,\n      `id token not authorized for this clientId.`\n    );\n  }\n\n  return jwtClaims;\n}\n\n// Returns a promise that fulfills if this user id is valid.\nfunction validateAuthData(authData, options = {}) {\n  return verifyIdToken(authData, options);\n}\n\n// Returns a promise that fulfills if this app id is valid.\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\nmodule.exports = {\n  validateAppId: validateAppId,\n  validateAuthData: validateAuthData,\n};\n\n// Helpers functions to convert the RSA certs to PEM (from jwks-rsa)\nfunction rsaPublicKeyToPEM(modulusB64, exponentB64) {\n  const modulus = new Buffer(modulusB64, 'base64');\n  const exponent = new Buffer(exponentB64, 'base64');\n  const modulusHex = prepadSigned(modulus.toString('hex'));\n  const exponentHex = prepadSigned(exponent.toString('hex'));\n  const modlen = modulusHex.length / 2;\n  const explen = exponentHex.length / 2;\n\n  const encodedModlen = encodeLengthHex(modlen);\n  const encodedExplen = encodeLengthHex(explen);\n  const encodedPubkey =\n    '30' +\n    encodeLengthHex(modlen + explen + encodedModlen.length / 2 + encodedExplen.length / 2 + 2) +\n    '02' +\n    encodedModlen +\n    modulusHex +\n    '02' +\n    encodedExplen +\n    exponentHex;\n\n  const der = new Buffer(encodedPubkey, 'hex').toString('base64');\n\n  let pem = '-----BEGIN RSA PUBLIC KEY-----\\n';\n  pem += `${der.match(/.{1,64}/g).join('\\n')}`;\n  pem += '\\n-----END RSA PUBLIC KEY-----\\n';\n  return pem;\n}\n\nfunction prepadSigned(hexStr) {\n  const msb = hexStr[0];\n  if (msb < '0' || msb > '7') {\n    return `00${hexStr}`;\n  }\n  return hexStr;\n}\n\nfunction toHex(number) {\n  const nstr = number.toString(16);\n  if (nstr.length % 2) {\n    return `0${nstr}`;\n  }\n  return nstr;\n}\n\nfunction encodeLengthHex(n) {\n  if (n <= 127) {\n    return toHex(n);\n  }\n  const nHex = toHex(n);\n  const lengthOfLengthByte = 128 + nHex.length / 2;\n  return toHex(lengthOfLengthByte) + nHex;\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d7ec3a58442ca46bab4e13b741982ae89bee3347"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1s0qj2s22n=function(){return actualCoverage;};}return actualCoverage;}cov_1s0qj2s22n();var Parse=(cov_1s0qj2s22n().s[0]++,require('parse/node').Parse);const https=(cov_1s0qj2s22n().s[1]++,require('https'));const jwt=(cov_1s0qj2s22n().s[2]++,require('jsonwebtoken'));const TOKEN_ISSUER=(cov_1s0qj2s22n().s[3]++,'accounts.google.com');const HTTPS_TOKEN_ISSUER=(cov_1s0qj2s22n().s[4]++,'https://accounts.google.com');let cache=(cov_1s0qj2s22n().s[5]++,{});// Retrieve Google Signin Keys (with cache control)
function getGoogleKeyByKeyId(keyId){cov_1s0qj2s22n().f[0]++;cov_1s0qj2s22n().s[6]++;if((cov_1s0qj2s22n().b[1][0]++,cache[keyId])&&(cov_1s0qj2s22n().b[1][1]++,cache.expiresAt>new Date())){cov_1s0qj2s22n().b[0][0]++;cov_1s0qj2s22n().s[7]++;return cache[keyId];}else{cov_1s0qj2s22n().b[0][1]++;}cov_1s0qj2s22n().s[8]++;return new Promise((resolve,reject)=>{cov_1s0qj2s22n().f[1]++;cov_1s0qj2s22n().s[9]++;https.get(`https://www.googleapis.com/oauth2/v3/certs`,res=>{cov_1s0qj2s22n().f[2]++;let data=(cov_1s0qj2s22n().s[10]++,'');cov_1s0qj2s22n().s[11]++;res.on('data',chunk=>{cov_1s0qj2s22n().f[3]++;cov_1s0qj2s22n().s[12]++;data+=chunk.toString('utf8');});cov_1s0qj2s22n().s[13]++;res.on('end',()=>{cov_1s0qj2s22n().f[4]++;const{keys}=(cov_1s0qj2s22n().s[14]++,JSON.parse(data));const pems=(cov_1s0qj2s22n().s[15]++,keys.reduce((pems,{n:modulus,e:exposant,kid})=>{cov_1s0qj2s22n().f[5]++;cov_1s0qj2s22n().s[16]++;return Object.assign(pems,{[kid]:rsaPublicKeyToPEM(modulus,exposant)});},{}));cov_1s0qj2s22n().s[17]++;if(res.headers['cache-control']){cov_1s0qj2s22n().b[2][0]++;var expire=(cov_1s0qj2s22n().s[18]++,res.headers['cache-control'].match(/max-age=([0-9]+)/));cov_1s0qj2s22n().s[19]++;if(expire){cov_1s0qj2s22n().b[3][0]++;cov_1s0qj2s22n().s[20]++;cache=Object.assign({},pems,{expiresAt:new Date(new Date().getTime()+Number(expire[1])*1000)});}else{cov_1s0qj2s22n().b[3][1]++;}}else{cov_1s0qj2s22n().b[2][1]++;}cov_1s0qj2s22n().s[21]++;resolve(pems[keyId]);});}).on('error',reject);});}function getHeaderFromToken(token){cov_1s0qj2s22n().f[6]++;const decodedToken=(cov_1s0qj2s22n().s[22]++,jwt.decode(token,{complete:true}));cov_1s0qj2s22n().s[23]++;if(!decodedToken){cov_1s0qj2s22n().b[4][0]++;cov_1s0qj2s22n().s[24]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,`provided token does not decode as JWT`);}else{cov_1s0qj2s22n().b[4][1]++;}cov_1s0qj2s22n().s[25]++;return decodedToken.header;}async function verifyIdToken({id_token:token,id},{clientId}){cov_1s0qj2s22n().f[7]++;cov_1s0qj2s22n().s[26]++;if(!token){cov_1s0qj2s22n().b[5][0]++;cov_1s0qj2s22n().s[27]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,`id token is invalid for this user.`);}else{cov_1s0qj2s22n().b[5][1]++;}const{kid:keyId,alg:algorithm}=(cov_1s0qj2s22n().s[28]++,getHeaderFromToken(token));let jwtClaims;const googleKey=(cov_1s0qj2s22n().s[29]++,await getGoogleKeyByKeyId(keyId));cov_1s0qj2s22n().s[30]++;try{cov_1s0qj2s22n().s[31]++;jwtClaims=jwt.verify(token,googleKey,{algorithms:algorithm,audience:clientId});}catch(exception){const message=(cov_1s0qj2s22n().s[32]++,exception.message);cov_1s0qj2s22n().s[33]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,`${message}`);}cov_1s0qj2s22n().s[34]++;if((cov_1s0qj2s22n().b[7][0]++,jwtClaims.iss!==TOKEN_ISSUER)&&(cov_1s0qj2s22n().b[7][1]++,jwtClaims.iss!==HTTPS_TOKEN_ISSUER)){cov_1s0qj2s22n().b[6][0]++;cov_1s0qj2s22n().s[35]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,`id token not issued by correct provider - expected: ${TOKEN_ISSUER} or ${HTTPS_TOKEN_ISSUER} | from: ${jwtClaims.iss}`);}else{cov_1s0qj2s22n().b[6][1]++;}cov_1s0qj2s22n().s[36]++;if(jwtClaims.sub!==id){cov_1s0qj2s22n().b[8][0]++;cov_1s0qj2s22n().s[37]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,`auth data is invalid for this user.`);}else{cov_1s0qj2s22n().b[8][1]++;}cov_1s0qj2s22n().s[38]++;if((cov_1s0qj2s22n().b[10][0]++,clientId)&&(cov_1s0qj2s22n().b[10][1]++,jwtClaims.aud!==clientId)){cov_1s0qj2s22n().b[9][0]++;cov_1s0qj2s22n().s[39]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,`id token not authorized for this clientId.`);}else{cov_1s0qj2s22n().b[9][1]++;}cov_1s0qj2s22n().s[40]++;return jwtClaims;}// Returns a promise that fulfills if this user id is valid.
function validateAuthData(authData,options=(cov_1s0qj2s22n().b[11][0]++,{})){cov_1s0qj2s22n().f[8]++;cov_1s0qj2s22n().s[41]++;return verifyIdToken(authData,options);}// Returns a promise that fulfills if this app id is valid.
function validateAppId(){cov_1s0qj2s22n().f[9]++;cov_1s0qj2s22n().s[42]++;return Promise.resolve();}cov_1s0qj2s22n().s[43]++;module.exports={validateAppId:validateAppId,validateAuthData:validateAuthData};// Helpers functions to convert the RSA certs to PEM (from jwks-rsa)
function rsaPublicKeyToPEM(modulusB64,exponentB64){cov_1s0qj2s22n().f[10]++;const modulus=(cov_1s0qj2s22n().s[44]++,new Buffer(modulusB64,'base64'));const exponent=(cov_1s0qj2s22n().s[45]++,new Buffer(exponentB64,'base64'));const modulusHex=(cov_1s0qj2s22n().s[46]++,prepadSigned(modulus.toString('hex')));const exponentHex=(cov_1s0qj2s22n().s[47]++,prepadSigned(exponent.toString('hex')));const modlen=(cov_1s0qj2s22n().s[48]++,modulusHex.length/2);const explen=(cov_1s0qj2s22n().s[49]++,exponentHex.length/2);const encodedModlen=(cov_1s0qj2s22n().s[50]++,encodeLengthHex(modlen));const encodedExplen=(cov_1s0qj2s22n().s[51]++,encodeLengthHex(explen));const encodedPubkey=(cov_1s0qj2s22n().s[52]++,'30'+encodeLengthHex(modlen+explen+encodedModlen.length/2+encodedExplen.length/2+2)+'02'+encodedModlen+modulusHex+'02'+encodedExplen+exponentHex);const der=(cov_1s0qj2s22n().s[53]++,new Buffer(encodedPubkey,'hex').toString('base64'));let pem=(cov_1s0qj2s22n().s[54]++,'-----BEGIN RSA PUBLIC KEY-----\n');cov_1s0qj2s22n().s[55]++;pem+=`${der.match(/.{1,64}/g).join('\n')}`;cov_1s0qj2s22n().s[56]++;pem+='\n-----END RSA PUBLIC KEY-----\n';cov_1s0qj2s22n().s[57]++;return pem;}function prepadSigned(hexStr){cov_1s0qj2s22n().f[11]++;const msb=(cov_1s0qj2s22n().s[58]++,hexStr[0]);cov_1s0qj2s22n().s[59]++;if((cov_1s0qj2s22n().b[13][0]++,msb<'0')||(cov_1s0qj2s22n().b[13][1]++,msb>'7')){cov_1s0qj2s22n().b[12][0]++;cov_1s0qj2s22n().s[60]++;return`00${hexStr}`;}else{cov_1s0qj2s22n().b[12][1]++;}cov_1s0qj2s22n().s[61]++;return hexStr;}function toHex(number){cov_1s0qj2s22n().f[12]++;const nstr=(cov_1s0qj2s22n().s[62]++,number.toString(16));cov_1s0qj2s22n().s[63]++;if(nstr.length%2){cov_1s0qj2s22n().b[14][0]++;cov_1s0qj2s22n().s[64]++;return`0${nstr}`;}else{cov_1s0qj2s22n().b[14][1]++;}cov_1s0qj2s22n().s[65]++;return nstr;}function encodeLengthHex(n){cov_1s0qj2s22n().f[13]++;cov_1s0qj2s22n().s[66]++;if(n<=127){cov_1s0qj2s22n().b[15][0]++;cov_1s0qj2s22n().s[67]++;return toHex(n);}else{cov_1s0qj2s22n().b[15][1]++;}const nHex=(cov_1s0qj2s22n().s[68]++,toHex(n));const lengthOfLengthByte=(cov_1s0qj2s22n().s[69]++,128+nHex.length/2);cov_1s0qj2s22n().s[70]++;return toHex(lengthOfLengthByte)+nHex;}//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,