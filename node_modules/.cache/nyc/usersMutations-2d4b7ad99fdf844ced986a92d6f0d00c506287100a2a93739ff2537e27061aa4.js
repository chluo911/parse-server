"use strict";function cov_28oljr7mlx(){var path="/parse-server/lib/GraphQL/loaders/usersMutations.js";var hash="9c62b285a9d9520e1d2d6aeffad7810480c293e9";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/GraphQL/loaders/usersMutations.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:22}},"2":{start:{line:8,column:15},end:{line:8,column:33}},"3":{start:{line:10,column:20},end:{line:10,column:44}},"4":{start:{line:12,column:16},end:{line:12,column:59}},"5":{start:{line:14,column:19},end:{line:14,column:79}},"6":{start:{line:16,column:23},end:{line:16,column:86}},"7":{start:{line:18,column:27},end:{line:18,column:59}},"8":{start:{line:20,column:20},end:{line:20,column:45}},"9":{start:{line:22,column:16},end:{line:22,column:51}},"10":{start:{line:24,column:12},end:{line:24,column:57}},"11":{start:{line:26,column:49},end:{line:26,column:96}},"12":{start:{line:26,column:84},end:{line:26,column:96}},"13":{start:{line:26,column:121},end:{line:26,column:134}},"14":{start:{line:26,column:159},end:{line:26,column:172}},"15":{start:{line:26,column:174},end:{line:26,column:309}},"16":{start:{line:26,column:234},end:{line:26,column:292}},"17":{start:{line:28,column:53},end:{line:28,column:111}},"18":{start:{line:28,column:98},end:{line:28,column:109}},"19":{start:{line:28,column:112},end:{line:28,column:214}},"20":{start:{line:28,column:188},end:{line:28,column:212}},"21":{start:{line:28,column:227},end:{line:28,column:264}},"22":{start:{line:28,column:266},end:{line:28,column:321}},"23":{start:{line:28,column:297},end:{line:28,column:319}},"24":{start:{line:28,column:335},end:{line:28,column:337}},"25":{start:{line:28,column:367},end:{line:28,column:423}},"26":{start:{line:28,column:425},end:{line:28,column:726}},"27":{start:{line:28,column:448},end:{line:28,column:724}},"28":{start:{line:28,column:534},end:{line:28,column:606}},"29":{start:{line:28,column:608},end:{line:28,column:722}},"30":{start:{line:28,column:646},end:{line:28,column:687}},"31":{start:{line:28,column:697},end:{line:28,column:720}},"32":{start:{line:28,column:727},end:{line:28,column:748}},"33":{start:{line:28,column:749},end:{line:28,column:787}},"34":{start:{line:28,column:762},end:{line:28,column:785}},"35":{start:{line:28,column:788},end:{line:28,column:802}},"36":{start:{line:30,column:39},end:{line:30,column:93}},"37":{start:{line:32,column:54},end:{line:32,column:73}},"38":{start:{line:32,column:75},end:{line:32,column:330}},"39":{start:{line:32,column:125},end:{line:32,column:161}},"40":{start:{line:32,column:163},end:{line:32,column:296}},"41":{start:{line:32,column:185},end:{line:32,column:294}},"42":{start:{line:32,column:227},end:{line:32,column:290}},"43":{start:{line:32,column:297},end:{line:32,column:328}},"44":{start:{line:32,column:331},end:{line:32,column:343}},"45":{start:{line:34,column:33},end:{line:34,column:517}},"46":{start:{line:34,column:46},end:{line:34,column:47}},"47":{start:{line:34,column:91},end:{line:34,column:131}},"48":{start:{line:34,column:133},end:{line:34,column:515}},"49":{start:{line:34,column:146},end:{line:34,column:247}},"50":{start:{line:34,column:201},end:{line:34,column:243}},"51":{start:{line:34,column:255},end:{line:34,column:515}},"52":{start:{line:34,column:295},end:{line:34,column:369}},"53":{start:{line:34,column:379},end:{line:34,column:513}},"54":{start:{line:34,column:428},end:{line:34,column:509}},"55":{start:{line:34,column:518},end:{line:34,column:532}},"56":{start:{line:36,column:44},end:{line:36,column:195}},"57":{start:{line:36,column:62},end:{line:36,column:166}},"58":{start:{line:36,column:176},end:{line:36,column:193}},"59":{start:{line:36,column:196},end:{line:36,column:207}},"60":{start:{line:38,column:20},end:{line:38,column:46}},"61":{start:{line:40,column:13},end:{line:387,column:1}},"62":{start:{line:41,column:2},end:{line:43,column:3}},"63":{start:{line:42,column:4},end:{line:42,column:11}},"64":{start:{line:45,column:25},end:{line:91,column:4}},"65":{start:{line:61,column:6},end:{line:89,column:7}},"66":{start:{line:64,column:12},end:{line:64,column:40}},"67":{start:{line:69,column:12},end:{line:69,column:19}},"68":{start:{line:70,column:28},end:{line:78,column:10}},"69":{start:{line:82,column:12},end:{line:82,column:89}},"70":{start:{line:83,column:8},end:{line:83,column:49}},"71":{start:{line:84,column:8},end:{line:86,column:10}},"72":{start:{line:88,column:8},end:{line:88,column:42}},"73":{start:{line:92,column:2},end:{line:92,column:87}},"74":{start:{line:93,column:2},end:{line:93,column:69}},"75":{start:{line:94,column:2},end:{line:94,column:78}},"76":{start:{line:95,column:28},end:{line:160,column:4}},"77":{start:{line:108,column:45},end:{line:108,column:123}},"78":{start:{line:109,column:12},end:{line:115,column:19}},"79":{start:{line:110,column:14},end:{line:112,column:15}},"80":{start:{line:111,column:16},end:{line:111,column:72}},"81":{start:{line:114,column:14},end:{line:114,column:28}},"82":{start:{line:127,column:6},end:{line:158,column:7}},"83":{start:{line:131,column:12},end:{line:131,column:40}},"84":{start:{line:136,column:12},end:{line:136,column:19}},"85":{start:{line:137,column:28},end:{line:145,column:10}},"86":{start:{line:149,column:12},end:{line:151,column:31}},"87":{start:{line:152,column:8},end:{line:152,column:49}},"88":{start:{line:153,column:8},end:{line:155,column:10}},"89":{start:{line:157,column:8},end:{line:157,column:42}},"90":{start:{line:161,column:2},end:{line:161,column:90}},"91":{start:{line:162,column:2},end:{line:162,column:72}},"92":{start:{line:163,column:2},end:{line:163,column:84}},"93":{start:{line:164,column:24},end:{line:215,column:4}},"94":{start:{line:184,column:6},end:{line:213,column:7}},"95":{start:{line:188,column:12},end:{line:188,column:40}},"96":{start:{line:193,column:12},end:{line:193,column:19}},"97":{start:{line:197,column:12},end:{line:206,column:20}},"98":{start:{line:207,column:8},end:{line:207,column:49}},"99":{start:{line:208,column:8},end:{line:210,column:10}},"100":{start:{line:212,column:8},end:{line:212,column:42}},"101":{start:{line:216,column:2},end:{line:216,column:86}},"102":{start:{line:217,column:2},end:{line:217,column:68}},"103":{start:{line:218,column:2},end:{line:218,column:76}},"104":{start:{line:219,column:25},end:{line:247,column:4}},"105":{start:{line:229,column:6},end:{line:245,column:7}},"106":{start:{line:234,column:12},end:{line:234,column:19}},"107":{start:{line:235,column:8},end:{line:239,column:11}},"108":{start:{line:240,column:8},end:{line:242,column:10}},"109":{start:{line:244,column:8},end:{line:244,column:42}},"110":{start:{line:248,column:2},end:{line:248,column:87}},"111":{start:{line:249,column:2},end:{line:249,column:69}},"112":{start:{line:250,column:2},end:{line:250,column:78}},"113":{start:{line:251,column:32},end:{line:286,column:4}},"114":{start:{line:273,column:10},end:{line:273,column:17}},"115":{start:{line:274,column:6},end:{line:281,column:9}},"116":{start:{line:282,column:6},end:{line:284,column:8}},"117":{start:{line:287,column:2},end:{line:287,column:94}},"118":{start:{line:288,column:2},end:{line:288,column:76}},"119":{start:{line:289,column:2},end:{line:289,column:92}},"120":{start:{line:290,column:39},end:{line:340,column:4}},"121":{start:{line:320,column:10},end:{line:320,column:17}},"122":{start:{line:322,column:6},end:{line:324,column:7}},"123":{start:{line:323,column:8},end:{line:323,column:107}},"124":{start:{line:326,column:6},end:{line:328,column:7}},"125":{start:{line:327,column:8},end:{line:327,column:107}},"126":{start:{line:330,column:6},end:{line:332,column:7}},"127":{start:{line:331,column:8},end:{line:331,column:99}},"128":{start:{line:334,column:29},end:{line:334,column:50}},"129":{start:{line:335,column:6},end:{line:335,column:69}},"130":{start:{line:336,column:6},end:{line:338,column:8}},"131":{start:{line:341,column:2},end:{line:341,column:101}},"132":{start:{line:342,column:2},end:{line:342,column:83}},"133":{start:{line:343,column:2},end:{line:343,column:106}},"134":{start:{line:344,column:40},end:{line:383,column:4}},"135":{start:{line:362,column:6},end:{line:381,column:7}},"136":{start:{line:367,column:12},end:{line:367,column:19}},"137":{start:{line:368,column:8},end:{line:375,column:11}},"138":{start:{line:376,column:8},end:{line:378,column:10}},"139":{start:{line:380,column:8},end:{line:380,column:42}},"140":{start:{line:384,column:2},end:{line:384,column:102}},"141":{start:{line:385,column:2},end:{line:385,column:84}},"142":{start:{line:386,column:2},end:{line:386,column:108}},"143":{start:{line:389,column:0},end:{line:389,column:20}}},fnMap:{"0":{name:"_getRequireWildcardCache",decl:{start:{line:26,column:9},end:{line:26,column:33}},loc:{start:{line:26,column:47},end:{line:26,column:311}},line:26},"1":{name:"(anonymous_1)",decl:{start:{line:26,column:209},end:{line:26,column:210}},loc:{start:{line:26,column:232},end:{line:26,column:294}},line:26},"2":{name:"_interopRequireWildcard",decl:{start:{line:28,column:9},end:{line:28,column:32}},loc:{start:{line:28,column:51},end:{line:28,column:804}},line:28},"3":{name:"_interopRequireDefault",decl:{start:{line:30,column:9},end:{line:30,column:31}},loc:{start:{line:30,column:37},end:{line:30,column:95}},line:30},"4":{name:"ownKeys",decl:{start:{line:32,column:9},end:{line:32,column:16}},loc:{start:{line:32,column:41},end:{line:32,column:345}},line:32},"5":{name:"(anonymous_5)",decl:{start:{line:32,column:210},end:{line:32,column:211}},loc:{start:{line:32,column:225},end:{line:32,column:292}},line:32},"6":{name:"_objectSpread",decl:{start:{line:34,column:9},end:{line:34,column:22}},loc:{start:{line:34,column:31},end:{line:34,column:534}},line:34},"7":{name:"(anonymous_7)",decl:{start:{line:34,column:184},end:{line:34,column:185}},loc:{start:{line:34,column:199},end:{line:34,column:245}},line:34},"8":{name:"(anonymous_8)",decl:{start:{line:34,column:411},end:{line:34,column:412}},loc:{start:{line:34,column:426},end:{line:34,column:511}},line:34},"9":{name:"_defineProperty",decl:{start:{line:36,column:9},end:{line:36,column:24}},loc:{start:{line:36,column:42},end:{line:36,column:209}},line:36},"10":{name:"(anonymous_10)",decl:{start:{line:40,column:13},end:{line:40,column:14}},loc:{start:{line:40,column:35},end:{line:387,column:1}},line:40},"11":{name:"(anonymous_11)",decl:{start:{line:60,column:25},end:{line:60,column:26}},loc:{start:{line:60,column:64},end:{line:90,column:5}},line:60},"12":{name:"(anonymous_12)",decl:{start:{line:107,column:18},end:{line:107,column:19}},loc:{start:{line:107,column:24},end:{line:116,column:11}},line:107},"13":{name:"(anonymous_13)",decl:{start:{line:109,column:64},end:{line:109,column:65}},loc:{start:{line:109,column:87},end:{line:115,column:13}},line:109},"14":{name:"(anonymous_14)",decl:{start:{line:126,column:25},end:{line:126,column:26}},loc:{start:{line:126,column:64},end:{line:159,column:5}},line:126},"15":{name:"(anonymous_15)",decl:{start:{line:183,column:25},end:{line:183,column:26}},loc:{start:{line:183,column:64},end:{line:214,column:5}},line:183},"16":{name:"(anonymous_16)",decl:{start:{line:228,column:25},end:{line:228,column:26}},loc:{start:{line:228,column:51},end:{line:246,column:5}},line:228},"17":{name:"(anonymous_17)",decl:{start:{line:266,column:25},end:{line:266,column:26}},loc:{start:{line:268,column:19},end:{line:285,column:5}},line:268},"18":{name:"(anonymous_18)",decl:{start:{line:313,column:25},end:{line:313,column:26}},loc:{start:{line:317,column:19},end:{line:339,column:5}},line:317},"19":{name:"(anonymous_19)",decl:{start:{line:359,column:25},end:{line:359,column:26}},loc:{start:{line:361,column:19},end:{line:382,column:5}},line:361}},branchMap:{"0":{loc:{start:{line:26,column:49},end:{line:26,column:96}},type:"if",locations:[{start:{line:26,column:49},end:{line:26,column:96}},{start:{line:26,column:49},end:{line:26,column:96}}],line:26},"1":{loc:{start:{line:26,column:241},end:{line:26,column:291}},type:"cond-expr",locations:[{start:{line:26,column:255},end:{line:26,column:271}},{start:{line:26,column:274},end:{line:26,column:291}}],line:26},"2":{loc:{start:{line:28,column:53},end:{line:28,column:111}},type:"if",locations:[{start:{line:28,column:53},end:{line:28,column:111}},{start:{line:28,column:53},end:{line:28,column:111}}],line:28},"3":{loc:{start:{line:28,column:57},end:{line:28,column:94}},type:"binary-expr",locations:[{start:{line:28,column:57},end:{line:28,column:69}},{start:{line:28,column:73},end:{line:28,column:76}},{start:{line:28,column:80},end:{line:28,column:94}}],line:28},"4":{loc:{start:{line:28,column:112},end:{line:28,column:214}},type:"if",locations:[{start:{line:28,column:112},end:{line:28,column:214}},{start:{line:28,column:112},end:{line:28,column:214}}],line:28},"5":{loc:{start:{line:28,column:116},end:{line:28,column:184}},type:"binary-expr",locations:[{start:{line:28,column:116},end:{line:28,column:128}},{start:{line:28,column:132},end:{line:28,column:155}},{start:{line:28,column:159},end:{line:28,column:184}}],line:28},"6":{loc:{start:{line:28,column:266},end:{line:28,column:321}},type:"if",locations:[{start:{line:28,column:266},end:{line:28,column:321}},{start:{line:28,column:266},end:{line:28,column:321}}],line:28},"7":{loc:{start:{line:28,column:270},end:{line:28,column:293}},type:"binary-expr",locations:[{start:{line:28,column:270},end:{line:28,column:275}},{start:{line:28,column:279},end:{line:28,column:293}}],line:28},"8":{loc:{start:{line:28,column:367},end:{line:28,column:423}},type:"binary-expr",locations:[{start:{line:28,column:367},end:{line:28,column:388}},{start:{line:28,column:392},end:{line:28,column:423}}],line:28},"9":{loc:{start:{line:28,column:448},end:{line:28,column:724}},type:"if",locations:[{start:{line:28,column:448},end:{line:28,column:724}},{start:{line:28,column:448},end:{line:28,column:724}}],line:28},"10":{loc:{start:{line:28,column:452},end:{line:28,column:519}},type:"binary-expr",locations:[{start:{line:28,column:452},end:{line:28,column:469}},{start:{line:28,column:473},end:{line:28,column:519}}],line:28},"11":{loc:{start:{line:28,column:534},end:{line:28,column:606}},type:"cond-expr",locations:[{start:{line:28,column:558},end:{line:28,column:599}},{start:{line:28,column:602},end:{line:28,column:606}}],line:28},"12":{loc:{start:{line:28,column:608},end:{line:28,column:722}},type:"if",locations:[{start:{line:28,column:608},end:{line:28,column:722}},{start:{line:28,column:608},end:{line:28,column:722}}],line:28},"13":{loc:{start:{line:28,column:612},end:{line:28,column:642}},type:"binary-expr",locations:[{start:{line:28,column:612},end:{line:28,column:616}},{start:{line:28,column:621},end:{line:28,column:629}},{start:{line:28,column:633},end:{line:28,column:641}}],line:28},"14":{loc:{start:{line:28,column:749},end:{line:28,column:787}},type:"if",locations:[{start:{line:28,column:749},end:{line:28,column:787}},{start:{line:28,column:749},end:{line:28,column:787}}],line:28},"15":{loc:{start:{line:30,column:46},end:{line:30,column:92}},type:"cond-expr",locations:[{start:{line:30,column:70},end:{line:30,column:73}},{start:{line:30,column:76},end:{line:30,column:92}}],line:30},"16":{loc:{start:{line:30,column:46},end:{line:30,column:67}},type:"binary-expr",locations:[{start:{line:30,column:46},end:{line:30,column:49}},{start:{line:30,column:53},end:{line:30,column:67}}],line:30},"17":{loc:{start:{line:32,column:75},end:{line:32,column:330}},type:"if",locations:[{start:{line:32,column:75},end:{line:32,column:330}},{start:{line:32,column:75},end:{line:32,column:330}}],line:32},"18":{loc:{start:{line:32,column:163},end:{line:32,column:296}},type:"if",locations:[{start:{line:32,column:163},end:{line:32,column:296}},{start:{line:32,column:163},end:{line:32,column:296}}],line:32},"19":{loc:{start:{line:34,column:91},end:{line:34,column:131}},type:"cond-expr",locations:[{start:{line:34,column:114},end:{line:34,column:126}},{start:{line:34,column:129},end:{line:34,column:131}}],line:34},"20":{loc:{start:{line:34,column:133},end:{line:34,column:515}},type:"if",locations:[{start:{line:34,column:133},end:{line:34,column:515}},{start:{line:34,column:133},end:{line:34,column:515}}],line:34},"21":{loc:{start:{line:34,column:255},end:{line:34,column:515}},type:"if",locations:[{start:{line:34,column:255},end:{line:34,column:515}},{start:{line:34,column:255},end:{line:34,column:515}}],line:34},"22":{loc:{start:{line:36,column:44},end:{line:36,column:195}},type:"if",locations:[{start:{line:36,column:44},end:{line:36,column:195}},{start:{line:36,column:44},end:{line:36,column:195}}],line:36},"23":{loc:{start:{line:41,column:2},end:{line:43,column:3}},type:"if",locations:[{start:{line:41,column:2},end:{line:43,column:3}},{start:{line:41,column:2},end:{line:43,column:3}}],line:41},"24":{loc:{start:{line:110,column:14},end:{line:112,column:15}},type:"if",locations:[{start:{line:110,column:14},end:{line:112,column:15}},{start:{line:110,column:14},end:{line:112,column:15}}],line:110},"25":{loc:{start:{line:110,column:18},end:{line:110,column:98}},type:"binary-expr",locations:[{start:{line:110,column:18},end:{line:110,column:42}},{start:{line:110,column:46},end:{line:110,column:70}},{start:{line:110,column:74},end:{line:110,column:98}}],line:110},"26":{loc:{start:{line:322,column:6},end:{line:324,column:7}},type:"if",locations:[{start:{line:322,column:6},end:{line:324,column:7}},{start:{line:322,column:6},end:{line:324,column:7}}],line:322},"27":{loc:{start:{line:326,column:6},end:{line:328,column:7}},type:"if",locations:[{start:{line:326,column:6},end:{line:328,column:7}},{start:{line:326,column:6},end:{line:328,column:7}}],line:326},"28":{loc:{start:{line:330,column:6},end:{line:332,column:7}},type:"if",locations:[{start:{line:330,column:6},end:{line:332,column:7}},{start:{line:330,column:6},end:{line:332,column:7}}],line:330}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0,0],"26":[0,0],"27":[0,0],"28":[0,0]},inputSourceMap:{version:3,sources:["../../../src/GraphQL/loaders/usersMutations.js"],names:["usersRouter","UsersRouter","load","parseGraphQLSchema","isUsersClassDisabled","signUpMutation","name","description","inputFields","fields","descriptions","type","parseClassTypes","classGraphQLCreateType","outputFields","viewer","GraphQLNonNull","viewerType","mutateAndGetPayload","args","context","mutationInfo","config","auth","info","parseFields","className","req","sessionToken","objectId","objectsMutations","createObject","e","handleError","addGraphQLType","input","ofType","addGraphQLMutation","logInWithMutation","authData","OBJECT","GraphQLInputObjectType","classGraphQLCreateFields","getFields","Object","keys","reduce","fieldName","logInMutation","username","GraphQLString","password","handleLogIn","body","query","response","logOutMutation","ok","GraphQLBoolean","_args","handleLogOut","resetPasswordMutation","email","handleResetRequest","confirmResetPasswordMutation","token","Parse","Error","USERNAME_MISSING","PASSWORD_MISSING","OTHER_CAUSE","userController","updatePassword","sendVerificationEmailMutation","handleVerificationEmailRequest"],mappings:"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",sourcesContent:["import { GraphQLNonNull, GraphQLString, GraphQLBoolean, GraphQLInputObjectType } from 'graphql';\nimport { mutationWithClientMutationId } from 'graphql-relay';\nimport deepcopy from 'deepcopy';\nimport UsersRouter from '../../Routers/UsersRouter';\nimport * as objectsMutations from '../helpers/objectsMutations';\nimport { OBJECT } from './defaultGraphQLTypes';\nimport { getUserFromSessionToken } from './usersQueries';\nimport { transformTypes } from '../transformers/mutation';\nimport Parse from 'parse/node';\n\nconst usersRouter = new UsersRouter();\n\nconst load = parseGraphQLSchema => {\n  if (parseGraphQLSchema.isUsersClassDisabled) {\n    return;\n  }\n\n  const signUpMutation = mutationWithClientMutationId({\n    name: 'SignUp',\n    description: 'The signUp mutation can be used to create and sign up a new user.',\n    inputFields: {\n      fields: {\n        descriptions: 'These are the fields of the new user to be created and signed up.',\n        type: parseGraphQLSchema.parseClassTypes['_User'].classGraphQLCreateType,\n      },\n    },\n    outputFields: {\n      viewer: {\n        description: 'This is the new user that was created, signed up and returned as a viewer.',\n        type: new GraphQLNonNull(parseGraphQLSchema.viewerType),\n      },\n    },\n    mutateAndGetPayload: async (args, context, mutationInfo) => {\n      try {\n        const { fields } = deepcopy(args);\n        const { config, auth, info } = context;\n\n        const parseFields = await transformTypes('create', fields, {\n          className: '_User',\n          parseGraphQLSchema,\n          req: { config, auth, info },\n        });\n\n        const { sessionToken, objectId } = await objectsMutations.createObject(\n          '_User',\n          parseFields,\n          config,\n          auth,\n          info\n        );\n\n        context.info.sessionToken = sessionToken;\n\n        return {\n          viewer: await getUserFromSessionToken(context, mutationInfo, 'viewer.user.', objectId),\n        };\n      } catch (e) {\n        parseGraphQLSchema.handleError(e);\n      }\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(signUpMutation.args.input.type.ofType, true, true);\n  parseGraphQLSchema.addGraphQLType(signUpMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation('signUp', signUpMutation, true, true);\n  const logInWithMutation = mutationWithClientMutationId({\n    name: 'LogInWith',\n    description:\n      'The logInWith mutation can be used to signup, login user with 3rd party authentication system. This mutation create a user if the authData do not correspond to an existing one.',\n    inputFields: {\n      authData: {\n        descriptions: 'This is the auth data of your custom auth provider',\n        type: new GraphQLNonNull(OBJECT),\n      },\n      fields: {\n        descriptions: 'These are the fields of the user to be created/updated and logged in.',\n        type: new GraphQLInputObjectType({\n          name: 'UserLoginWithInput',\n          fields: () => {\n            const classGraphQLCreateFields = parseGraphQLSchema.parseClassTypes[\n              '_User'\n            ].classGraphQLCreateType.getFields();\n            return Object.keys(classGraphQLCreateFields).reduce((fields, fieldName) => {\n              if (\n                fieldName !== 'password' &&\n                fieldName !== 'username' &&\n                fieldName !== 'authData'\n              ) {\n                fields[fieldName] = classGraphQLCreateFields[fieldName];\n              }\n              return fields;\n            }, {});\n          },\n        }),\n      },\n    },\n    outputFields: {\n      viewer: {\n        description: 'This is the new user that was created, signed up and returned as a viewer.',\n        type: new GraphQLNonNull(parseGraphQLSchema.viewerType),\n      },\n    },\n    mutateAndGetPayload: async (args, context, mutationInfo) => {\n      try {\n        const { fields, authData } = deepcopy(args);\n        const { config, auth, info } = context;\n\n        const parseFields = await transformTypes('create', fields, {\n          className: '_User',\n          parseGraphQLSchema,\n          req: { config, auth, info },\n        });\n\n        const { sessionToken, objectId } = await objectsMutations.createObject(\n          '_User',\n          { ...parseFields, authData },\n          config,\n          auth,\n          info\n        );\n\n        context.info.sessionToken = sessionToken;\n\n        return {\n          viewer: await getUserFromSessionToken(context, mutationInfo, 'viewer.user.', objectId),\n        };\n      } catch (e) {\n        parseGraphQLSchema.handleError(e);\n      }\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(logInWithMutation.args.input.type.ofType, true, true);\n  parseGraphQLSchema.addGraphQLType(logInWithMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation('logInWith', logInWithMutation, true, true);\n\n  const logInMutation = mutationWithClientMutationId({\n    name: 'LogIn',\n    description: 'The logIn mutation can be used to log in an existing user.',\n    inputFields: {\n      username: {\n        description: 'This is the username used to log in the user.',\n        type: new GraphQLNonNull(GraphQLString),\n      },\n      password: {\n        description: 'This is the password used to log in the user.',\n        type: new GraphQLNonNull(GraphQLString),\n      },\n    },\n    outputFields: {\n      viewer: {\n        description: 'This is the existing user that was logged in and returned as a viewer.',\n        type: new GraphQLNonNull(parseGraphQLSchema.viewerType),\n      },\n    },\n    mutateAndGetPayload: async (args, context, mutationInfo) => {\n      try {\n        const { username, password } = deepcopy(args);\n        const { config, auth, info } = context;\n\n        const { sessionToken, objectId } = (\n          await usersRouter.handleLogIn({\n            body: {\n              username,\n              password,\n            },\n            query: {},\n            config,\n            auth,\n            info,\n          })\n        ).response;\n\n        context.info.sessionToken = sessionToken;\n\n        return {\n          viewer: await getUserFromSessionToken(context, mutationInfo, 'viewer.user.', objectId),\n        };\n      } catch (e) {\n        parseGraphQLSchema.handleError(e);\n      }\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(logInMutation.args.input.type.ofType, true, true);\n  parseGraphQLSchema.addGraphQLType(logInMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation('logIn', logInMutation, true, true);\n\n  const logOutMutation = mutationWithClientMutationId({\n    name: 'LogOut',\n    description: 'The logOut mutation can be used to log out an existing user.',\n    outputFields: {\n      ok: {\n        description: \"It's always true.\",\n        type: new GraphQLNonNull(GraphQLBoolean),\n      },\n    },\n    mutateAndGetPayload: async (_args, context) => {\n      try {\n        const { config, auth, info } = context;\n\n        await usersRouter.handleLogOut({\n          config,\n          auth,\n          info,\n        });\n\n        return { ok: true };\n      } catch (e) {\n        parseGraphQLSchema.handleError(e);\n      }\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(logOutMutation.args.input.type.ofType, true, true);\n  parseGraphQLSchema.addGraphQLType(logOutMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation('logOut', logOutMutation, true, true);\n\n  const resetPasswordMutation = mutationWithClientMutationId({\n    name: 'ResetPassword',\n    description:\n      'The resetPassword mutation can be used to reset the password of an existing user.',\n    inputFields: {\n      email: {\n        descriptions: 'Email of the user that should receive the reset email',\n        type: new GraphQLNonNull(GraphQLString),\n      },\n    },\n    outputFields: {\n      ok: {\n        description: \"It's always true.\",\n        type: new GraphQLNonNull(GraphQLBoolean),\n      },\n    },\n    mutateAndGetPayload: async ({ email }, context) => {\n      const { config, auth, info } = context;\n\n      await usersRouter.handleResetRequest({\n        body: {\n          email,\n        },\n        config,\n        auth,\n        info,\n      });\n\n      return { ok: true };\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(resetPasswordMutation.args.input.type.ofType, true, true);\n  parseGraphQLSchema.addGraphQLType(resetPasswordMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation('resetPassword', resetPasswordMutation, true, true);\n\n  const confirmResetPasswordMutation = mutationWithClientMutationId({\n    name: 'ConfirmResetPassword',\n    description:\n      'The confirmResetPassword mutation can be used to reset the password of an existing user.',\n    inputFields: {\n      username: {\n        descriptions: 'Username of the user that have received the reset email',\n        type: new GraphQLNonNull(GraphQLString),\n      },\n      password: {\n        descriptions: 'New password of the user',\n        type: new GraphQLNonNull(GraphQLString),\n      },\n      token: {\n        descriptions: 'Reset token that was emailed to the user',\n        type: new GraphQLNonNull(GraphQLString),\n      },\n    },\n    outputFields: {\n      ok: {\n        description: \"It's always true.\",\n        type: new GraphQLNonNull(GraphQLBoolean),\n      },\n    },\n    mutateAndGetPayload: async ({ username, password, token }, context) => {\n      const { config } = context;\n      if (!username) {\n        throw new Parse.Error(Parse.Error.USERNAME_MISSING, 'you must provide a username');\n      }\n      if (!password) {\n        throw new Parse.Error(Parse.Error.PASSWORD_MISSING, 'you must provide a password');\n      }\n      if (!token) {\n        throw new Parse.Error(Parse.Error.OTHER_CAUSE, 'you must provide a token');\n      }\n\n      const userController = config.userController;\n      await userController.updatePassword(username, token, password);\n      return { ok: true };\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(\n    confirmResetPasswordMutation.args.input.type.ofType,\n    true,\n    true\n  );\n  parseGraphQLSchema.addGraphQLType(confirmResetPasswordMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation(\n    'confirmResetPassword',\n    confirmResetPasswordMutation,\n    true,\n    true\n  );\n\n  const sendVerificationEmailMutation = mutationWithClientMutationId({\n    name: 'SendVerificationEmail',\n    description:\n      'The sendVerificationEmail mutation can be used to send the verification email again.',\n    inputFields: {\n      email: {\n        descriptions: 'Email of the user that should receive the verification email',\n        type: new GraphQLNonNull(GraphQLString),\n      },\n    },\n    outputFields: {\n      ok: {\n        description: \"It's always true.\",\n        type: new GraphQLNonNull(GraphQLBoolean),\n      },\n    },\n    mutateAndGetPayload: async ({ email }, context) => {\n      try {\n        const { config, auth, info } = context;\n\n        await usersRouter.handleVerificationEmailRequest({\n          body: {\n            email,\n          },\n          config,\n          auth,\n          info,\n        });\n\n        return { ok: true };\n      } catch (e) {\n        parseGraphQLSchema.handleError(e);\n      }\n    },\n  });\n\n  parseGraphQLSchema.addGraphQLType(\n    sendVerificationEmailMutation.args.input.type.ofType,\n    true,\n    true\n  );\n  parseGraphQLSchema.addGraphQLType(sendVerificationEmailMutation.type, true, true);\n  parseGraphQLSchema.addGraphQLMutation(\n    'sendVerificationEmail',\n    sendVerificationEmailMutation,\n    true,\n    true\n  );\n};\n\nexport { load };\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"9c62b285a9d9520e1d2d6aeffad7810480c293e9"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_28oljr7mlx=function(){return actualCoverage;};}return actualCoverage;}cov_28oljr7mlx();cov_28oljr7mlx().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_28oljr7mlx().s[1]++;exports.load=void 0;var _graphql=(cov_28oljr7mlx().s[2]++,require("graphql"));var _graphqlRelay=(cov_28oljr7mlx().s[3]++,require("graphql-relay"));var _deepcopy=(cov_28oljr7mlx().s[4]++,_interopRequireDefault(require("deepcopy")));var _UsersRouter=(cov_28oljr7mlx().s[5]++,_interopRequireDefault(require("../../Routers/UsersRouter")));var objectsMutations=(cov_28oljr7mlx().s[6]++,_interopRequireWildcard(require("../helpers/objectsMutations")));var _defaultGraphQLTypes=(cov_28oljr7mlx().s[7]++,require("./defaultGraphQLTypes"));var _usersQueries=(cov_28oljr7mlx().s[8]++,require("./usersQueries"));var _mutation=(cov_28oljr7mlx().s[9]++,require("../transformers/mutation"));var _node=(cov_28oljr7mlx().s[10]++,_interopRequireDefault(require("parse/node")));function _getRequireWildcardCache(nodeInterop){cov_28oljr7mlx().f[0]++;cov_28oljr7mlx().s[11]++;if(typeof WeakMap!=="function"){cov_28oljr7mlx().b[0][0]++;cov_28oljr7mlx().s[12]++;return null;}else{cov_28oljr7mlx().b[0][1]++;}var cacheBabelInterop=(cov_28oljr7mlx().s[13]++,new WeakMap());var cacheNodeInterop=(cov_28oljr7mlx().s[14]++,new WeakMap());cov_28oljr7mlx().s[15]++;return(_getRequireWildcardCache=function(nodeInterop){cov_28oljr7mlx().f[1]++;cov_28oljr7mlx().s[16]++;return nodeInterop?(cov_28oljr7mlx().b[1][0]++,cacheNodeInterop):(cov_28oljr7mlx().b[1][1]++,cacheBabelInterop);})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){cov_28oljr7mlx().f[2]++;cov_28oljr7mlx().s[17]++;if((cov_28oljr7mlx().b[3][0]++,!nodeInterop)&&(cov_28oljr7mlx().b[3][1]++,obj)&&(cov_28oljr7mlx().b[3][2]++,obj.__esModule)){cov_28oljr7mlx().b[2][0]++;cov_28oljr7mlx().s[18]++;return obj;}else{cov_28oljr7mlx().b[2][1]++;}cov_28oljr7mlx().s[19]++;if((cov_28oljr7mlx().b[5][0]++,obj===null)||(cov_28oljr7mlx().b[5][1]++,typeof obj!=="object")&&(cov_28oljr7mlx().b[5][2]++,typeof obj!=="function")){cov_28oljr7mlx().b[4][0]++;cov_28oljr7mlx().s[20]++;return{default:obj};}else{cov_28oljr7mlx().b[4][1]++;}var cache=(cov_28oljr7mlx().s[21]++,_getRequireWildcardCache(nodeInterop));cov_28oljr7mlx().s[22]++;if((cov_28oljr7mlx().b[7][0]++,cache)&&(cov_28oljr7mlx().b[7][1]++,cache.has(obj))){cov_28oljr7mlx().b[6][0]++;cov_28oljr7mlx().s[23]++;return cache.get(obj);}else{cov_28oljr7mlx().b[6][1]++;}var newObj=(cov_28oljr7mlx().s[24]++,{});var hasPropertyDescriptor=(cov_28oljr7mlx().s[25]++,(cov_28oljr7mlx().b[8][0]++,Object.defineProperty)&&(cov_28oljr7mlx().b[8][1]++,Object.getOwnPropertyDescriptor));cov_28oljr7mlx().s[26]++;for(var key in obj){cov_28oljr7mlx().s[27]++;if((cov_28oljr7mlx().b[10][0]++,key!=="default")&&(cov_28oljr7mlx().b[10][1]++,Object.prototype.hasOwnProperty.call(obj,key))){cov_28oljr7mlx().b[9][0]++;var desc=(cov_28oljr7mlx().s[28]++,hasPropertyDescriptor?(cov_28oljr7mlx().b[11][0]++,Object.getOwnPropertyDescriptor(obj,key)):(cov_28oljr7mlx().b[11][1]++,null));cov_28oljr7mlx().s[29]++;if((cov_28oljr7mlx().b[13][0]++,desc)&&((cov_28oljr7mlx().b[13][1]++,desc.get)||(cov_28oljr7mlx().b[13][2]++,desc.set))){cov_28oljr7mlx().b[12][0]++;cov_28oljr7mlx().s[30]++;Object.defineProperty(newObj,key,desc);}else{cov_28oljr7mlx().b[12][1]++;cov_28oljr7mlx().s[31]++;newObj[key]=obj[key];}}else{cov_28oljr7mlx().b[9][1]++;}}cov_28oljr7mlx().s[32]++;newObj.default=obj;cov_28oljr7mlx().s[33]++;if(cache){cov_28oljr7mlx().b[14][0]++;cov_28oljr7mlx().s[34]++;cache.set(obj,newObj);}else{cov_28oljr7mlx().b[14][1]++;}cov_28oljr7mlx().s[35]++;return newObj;}function _interopRequireDefault(obj){cov_28oljr7mlx().f[3]++;cov_28oljr7mlx().s[36]++;return(cov_28oljr7mlx().b[16][0]++,obj)&&(cov_28oljr7mlx().b[16][1]++,obj.__esModule)?(cov_28oljr7mlx().b[15][0]++,obj):(cov_28oljr7mlx().b[15][1]++,{default:obj});}function ownKeys(object,enumerableOnly){cov_28oljr7mlx().f[4]++;var keys=(cov_28oljr7mlx().s[37]++,Object.keys(object));cov_28oljr7mlx().s[38]++;if(Object.getOwnPropertySymbols){cov_28oljr7mlx().b[17][0]++;var symbols=(cov_28oljr7mlx().s[39]++,Object.getOwnPropertySymbols(object));cov_28oljr7mlx().s[40]++;if(enumerableOnly){cov_28oljr7mlx().b[18][0]++;cov_28oljr7mlx().s[41]++;symbols=symbols.filter(function(sym){cov_28oljr7mlx().f[5]++;cov_28oljr7mlx().s[42]++;return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}else{cov_28oljr7mlx().b[18][1]++;}cov_28oljr7mlx().s[43]++;keys.push.apply(keys,symbols);}else{cov_28oljr7mlx().b[17][1]++;}cov_28oljr7mlx().s[44]++;return keys;}function _objectSpread(target){cov_28oljr7mlx().f[6]++;cov_28oljr7mlx().s[45]++;for(var i=(cov_28oljr7mlx().s[46]++,1);i<arguments.length;i++){var source=(cov_28oljr7mlx().s[47]++,arguments[i]!=null?(cov_28oljr7mlx().b[19][0]++,arguments[i]):(cov_28oljr7mlx().b[19][1]++,{}));cov_28oljr7mlx().s[48]++;if(i%2){cov_28oljr7mlx().b[20][0]++;cov_28oljr7mlx().s[49]++;ownKeys(Object(source),true).forEach(function(key){cov_28oljr7mlx().f[7]++;cov_28oljr7mlx().s[50]++;_defineProperty(target,key,source[key]);});}else{cov_28oljr7mlx().b[20][1]++;cov_28oljr7mlx().s[51]++;if(Object.getOwnPropertyDescriptors){cov_28oljr7mlx().b[21][0]++;cov_28oljr7mlx().s[52]++;Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{cov_28oljr7mlx().b[21][1]++;cov_28oljr7mlx().s[53]++;ownKeys(Object(source)).forEach(function(key){cov_28oljr7mlx().f[8]++;cov_28oljr7mlx().s[54]++;Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}}cov_28oljr7mlx().s[55]++;return target;}function _defineProperty(obj,key,value){cov_28oljr7mlx().f[9]++;cov_28oljr7mlx().s[56]++;if(key in obj){cov_28oljr7mlx().b[22][0]++;cov_28oljr7mlx().s[57]++;Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{cov_28oljr7mlx().b[22][1]++;cov_28oljr7mlx().s[58]++;obj[key]=value;}cov_28oljr7mlx().s[59]++;return obj;}const usersRouter=(cov_28oljr7mlx().s[60]++,new _UsersRouter.default());cov_28oljr7mlx().s[61]++;const load=parseGraphQLSchema=>{cov_28oljr7mlx().f[10]++;cov_28oljr7mlx().s[62]++;if(parseGraphQLSchema.isUsersClassDisabled){cov_28oljr7mlx().b[23][0]++;cov_28oljr7mlx().s[63]++;return;}else{cov_28oljr7mlx().b[23][1]++;}const signUpMutation=(cov_28oljr7mlx().s[64]++,(0,_graphqlRelay.mutationWithClientMutationId)({name:'SignUp',description:'The signUp mutation can be used to create and sign up a new user.',inputFields:{fields:{descriptions:'These are the fields of the new user to be created and signed up.',type:parseGraphQLSchema.parseClassTypes['_User'].classGraphQLCreateType}},outputFields:{viewer:{description:'This is the new user that was created, signed up and returned as a viewer.',type:new _graphql.GraphQLNonNull(parseGraphQLSchema.viewerType)}},mutateAndGetPayload:async(args,context,mutationInfo)=>{cov_28oljr7mlx().f[11]++;cov_28oljr7mlx().s[65]++;try{const{fields}=(cov_28oljr7mlx().s[66]++,(0,_deepcopy.default)(args));const{config,auth,info}=(cov_28oljr7mlx().s[67]++,context);const parseFields=(cov_28oljr7mlx().s[68]++,await(0,_mutation.transformTypes)('create',fields,{className:'_User',parseGraphQLSchema,req:{config,auth,info}}));const{sessionToken,objectId}=(cov_28oljr7mlx().s[69]++,await objectsMutations.createObject('_User',parseFields,config,auth,info));cov_28oljr7mlx().s[70]++;context.info.sessionToken=sessionToken;cov_28oljr7mlx().s[71]++;return{viewer:await(0,_usersQueries.getUserFromSessionToken)(context,mutationInfo,'viewer.user.',objectId)};}catch(e){cov_28oljr7mlx().s[72]++;parseGraphQLSchema.handleError(e);}}}));cov_28oljr7mlx().s[73]++;parseGraphQLSchema.addGraphQLType(signUpMutation.args.input.type.ofType,true,true);cov_28oljr7mlx().s[74]++;parseGraphQLSchema.addGraphQLType(signUpMutation.type,true,true);cov_28oljr7mlx().s[75]++;parseGraphQLSchema.addGraphQLMutation('signUp',signUpMutation,true,true);const logInWithMutation=(cov_28oljr7mlx().s[76]++,(0,_graphqlRelay.mutationWithClientMutationId)({name:'LogInWith',description:'The logInWith mutation can be used to signup, login user with 3rd party authentication system. This mutation create a user if the authData do not correspond to an existing one.',inputFields:{authData:{descriptions:'This is the auth data of your custom auth provider',type:new _graphql.GraphQLNonNull(_defaultGraphQLTypes.OBJECT)},fields:{descriptions:'These are the fields of the user to be created/updated and logged in.',type:new _graphql.GraphQLInputObjectType({name:'UserLoginWithInput',fields:()=>{cov_28oljr7mlx().f[12]++;const classGraphQLCreateFields=(cov_28oljr7mlx().s[77]++,parseGraphQLSchema.parseClassTypes['_User'].classGraphQLCreateType.getFields());cov_28oljr7mlx().s[78]++;return Object.keys(classGraphQLCreateFields).reduce((fields,fieldName)=>{cov_28oljr7mlx().f[13]++;cov_28oljr7mlx().s[79]++;if((cov_28oljr7mlx().b[25][0]++,fieldName!=='password')&&(cov_28oljr7mlx().b[25][1]++,fieldName!=='username')&&(cov_28oljr7mlx().b[25][2]++,fieldName!=='authData')){cov_28oljr7mlx().b[24][0]++;cov_28oljr7mlx().s[80]++;fields[fieldName]=classGraphQLCreateFields[fieldName];}else{cov_28oljr7mlx().b[24][1]++;}cov_28oljr7mlx().s[81]++;return fields;},{});}})}},outputFields:{viewer:{description:'This is the new user that was created, signed up and returned as a viewer.',type:new _graphql.GraphQLNonNull(parseGraphQLSchema.viewerType)}},mutateAndGetPayload:async(args,context,mutationInfo)=>{cov_28oljr7mlx().f[14]++;cov_28oljr7mlx().s[82]++;try{const{fields,authData}=(cov_28oljr7mlx().s[83]++,(0,_deepcopy.default)(args));const{config,auth,info}=(cov_28oljr7mlx().s[84]++,context);const parseFields=(cov_28oljr7mlx().s[85]++,await(0,_mutation.transformTypes)('create',fields,{className:'_User',parseGraphQLSchema,req:{config,auth,info}}));const{sessionToken,objectId}=(cov_28oljr7mlx().s[86]++,await objectsMutations.createObject('_User',_objectSpread(_objectSpread({},parseFields),{},{authData}),config,auth,info));cov_28oljr7mlx().s[87]++;context.info.sessionToken=sessionToken;cov_28oljr7mlx().s[88]++;return{viewer:await(0,_usersQueries.getUserFromSessionToken)(context,mutationInfo,'viewer.user.',objectId)};}catch(e){cov_28oljr7mlx().s[89]++;parseGraphQLSchema.handleError(e);}}}));cov_28oljr7mlx().s[90]++;parseGraphQLSchema.addGraphQLType(logInWithMutation.args.input.type.ofType,true,true);cov_28oljr7mlx().s[91]++;parseGraphQLSchema.addGraphQLType(logInWithMutation.type,true,true);cov_28oljr7mlx().s[92]++;parseGraphQLSchema.addGraphQLMutation('logInWith',logInWithMutation,true,true);const logInMutation=(cov_28oljr7mlx().s[93]++,(0,_graphqlRelay.mutationWithClientMutationId)({name:'LogIn',description:'The logIn mutation can be used to log in an existing user.',inputFields:{username:{description:'This is the username used to log in the user.',type:new _graphql.GraphQLNonNull(_graphql.GraphQLString)},password:{description:'This is the password used to log in the user.',type:new _graphql.GraphQLNonNull(_graphql.GraphQLString)}},outputFields:{viewer:{description:'This is the existing user that was logged in and returned as a viewer.',type:new _graphql.GraphQLNonNull(parseGraphQLSchema.viewerType)}},mutateAndGetPayload:async(args,context,mutationInfo)=>{cov_28oljr7mlx().f[15]++;cov_28oljr7mlx().s[94]++;try{const{username,password}=(cov_28oljr7mlx().s[95]++,(0,_deepcopy.default)(args));const{config,auth,info}=(cov_28oljr7mlx().s[96]++,context);const{sessionToken,objectId}=(cov_28oljr7mlx().s[97]++,(await usersRouter.handleLogIn({body:{username,password},query:{},config,auth,info})).response);cov_28oljr7mlx().s[98]++;context.info.sessionToken=sessionToken;cov_28oljr7mlx().s[99]++;return{viewer:await(0,_usersQueries.getUserFromSessionToken)(context,mutationInfo,'viewer.user.',objectId)};}catch(e){cov_28oljr7mlx().s[100]++;parseGraphQLSchema.handleError(e);}}}));cov_28oljr7mlx().s[101]++;parseGraphQLSchema.addGraphQLType(logInMutation.args.input.type.ofType,true,true);cov_28oljr7mlx().s[102]++;parseGraphQLSchema.addGraphQLType(logInMutation.type,true,true);cov_28oljr7mlx().s[103]++;parseGraphQLSchema.addGraphQLMutation('logIn',logInMutation,true,true);const logOutMutation=(cov_28oljr7mlx().s[104]++,(0,_graphqlRelay.mutationWithClientMutationId)({name:'LogOut',description:'The logOut mutation can be used to log out an existing user.',outputFields:{ok:{description:"It's always true.",type:new _graphql.GraphQLNonNull(_graphql.GraphQLBoolean)}},mutateAndGetPayload:async(_args,context)=>{cov_28oljr7mlx().f[16]++;cov_28oljr7mlx().s[105]++;try{const{config,auth,info}=(cov_28oljr7mlx().s[106]++,context);cov_28oljr7mlx().s[107]++;await usersRouter.handleLogOut({config,auth,info});cov_28oljr7mlx().s[108]++;return{ok:true};}catch(e){cov_28oljr7mlx().s[109]++;parseGraphQLSchema.handleError(e);}}}));cov_28oljr7mlx().s[110]++;parseGraphQLSchema.addGraphQLType(logOutMutation.args.input.type.ofType,true,true);cov_28oljr7mlx().s[111]++;parseGraphQLSchema.addGraphQLType(logOutMutation.type,true,true);cov_28oljr7mlx().s[112]++;parseGraphQLSchema.addGraphQLMutation('logOut',logOutMutation,true,true);const resetPasswordMutation=(cov_28oljr7mlx().s[113]++,(0,_graphqlRelay.mutationWithClientMutationId)({name:'ResetPassword',description:'The resetPassword mutation can be used to reset the password of an existing user.',inputFields:{email:{descriptions:'Email of the user that should receive the reset email',type:new _graphql.GraphQLNonNull(_graphql.GraphQLString)}},outputFields:{ok:{description:"It's always true.",type:new _graphql.GraphQLNonNull(_graphql.GraphQLBoolean)}},mutateAndGetPayload:async({email},context)=>{cov_28oljr7mlx().f[17]++;const{config,auth,info}=(cov_28oljr7mlx().s[114]++,context);cov_28oljr7mlx().s[115]++;await usersRouter.handleResetRequest({body:{email},config,auth,info});cov_28oljr7mlx().s[116]++;return{ok:true};}}));cov_28oljr7mlx().s[117]++;parseGraphQLSchema.addGraphQLType(resetPasswordMutation.args.input.type.ofType,true,true);cov_28oljr7mlx().s[118]++;parseGraphQLSchema.addGraphQLType(resetPasswordMutation.type,true,true);cov_28oljr7mlx().s[119]++;parseGraphQLSchema.addGraphQLMutation('resetPassword',resetPasswordMutation,true,true);const confirmResetPasswordMutation=(cov_28oljr7mlx().s[120]++,(0,_graphqlRelay.mutationWithClientMutationId)({name:'ConfirmResetPassword',description:'The confirmResetPassword mutation can be used to reset the password of an existing user.',inputFields:{username:{descriptions:'Username of the user that have received the reset email',type:new _graphql.GraphQLNonNull(_graphql.GraphQLString)},password:{descriptions:'New password of the user',type:new _graphql.GraphQLNonNull(_graphql.GraphQLString)},token:{descriptions:'Reset token that was emailed to the user',type:new _graphql.GraphQLNonNull(_graphql.GraphQLString)}},outputFields:{ok:{description:"It's always true.",type:new _graphql.GraphQLNonNull(_graphql.GraphQLBoolean)}},mutateAndGetPayload:async({username,password,token},context)=>{cov_28oljr7mlx().f[18]++;const{config}=(cov_28oljr7mlx().s[121]++,context);cov_28oljr7mlx().s[122]++;if(!username){cov_28oljr7mlx().b[26][0]++;cov_28oljr7mlx().s[123]++;throw new _node.default.Error(_node.default.Error.USERNAME_MISSING,'you must provide a username');}else{cov_28oljr7mlx().b[26][1]++;}cov_28oljr7mlx().s[124]++;if(!password){cov_28oljr7mlx().b[27][0]++;cov_28oljr7mlx().s[125]++;throw new _node.default.Error(_node.default.Error.PASSWORD_MISSING,'you must provide a password');}else{cov_28oljr7mlx().b[27][1]++;}cov_28oljr7mlx().s[126]++;if(!token){cov_28oljr7mlx().b[28][0]++;cov_28oljr7mlx().s[127]++;throw new _node.default.Error(_node.default.Error.OTHER_CAUSE,'you must provide a token');}else{cov_28oljr7mlx().b[28][1]++;}const userController=(cov_28oljr7mlx().s[128]++,config.userController);cov_28oljr7mlx().s[129]++;await userController.updatePassword(username,token,password);cov_28oljr7mlx().s[130]++;return{ok:true};}}));cov_28oljr7mlx().s[131]++;parseGraphQLSchema.addGraphQLType(confirmResetPasswordMutation.args.input.type.ofType,true,true);cov_28oljr7mlx().s[132]++;parseGraphQLSchema.addGraphQLType(confirmResetPasswordMutation.type,true,true);cov_28oljr7mlx().s[133]++;parseGraphQLSchema.addGraphQLMutation('confirmResetPassword',confirmResetPasswordMutation,true,true);const sendVerificationEmailMutation=(cov_28oljr7mlx().s[134]++,(0,_graphqlRelay.mutationWithClientMutationId)({name:'SendVerificationEmail',description:'The sendVerificationEmail mutation can be used to send the verification email again.',inputFields:{email:{descriptions:'Email of the user that should receive the verification email',type:new _graphql.GraphQLNonNull(_graphql.GraphQLString)}},outputFields:{ok:{description:"It's always true.",type:new _graphql.GraphQLNonNull(_graphql.GraphQLBoolean)}},mutateAndGetPayload:async({email},context)=>{cov_28oljr7mlx().f[19]++;cov_28oljr7mlx().s[135]++;try{const{config,auth,info}=(cov_28oljr7mlx().s[136]++,context);cov_28oljr7mlx().s[137]++;await usersRouter.handleVerificationEmailRequest({body:{email},config,auth,info});cov_28oljr7mlx().s[138]++;return{ok:true};}catch(e){cov_28oljr7mlx().s[139]++;parseGraphQLSchema.handleError(e);}}}));cov_28oljr7mlx().s[140]++;parseGraphQLSchema.addGraphQLType(sendVerificationEmailMutation.args.input.type.ofType,true,true);cov_28oljr7mlx().s[141]++;parseGraphQLSchema.addGraphQLType(sendVerificationEmailMutation.type,true,true);cov_28oljr7mlx().s[142]++;parseGraphQLSchema.addGraphQLMutation('sendVerificationEmail',sendVerificationEmailMutation,true,true);};cov_28oljr7mlx().s[143]++;exports.load=load;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,