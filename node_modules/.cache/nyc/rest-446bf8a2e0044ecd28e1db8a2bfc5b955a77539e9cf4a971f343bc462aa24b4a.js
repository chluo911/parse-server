"use strict";// This file contains helpers for running operations in REST format.
// The goal is that handlers that explicitly handle an express route
// should just be shallow wrappers around things in this file, but
// these functions should not explicitly depend on the request
// object.
// This means that one of these handlers can support multiple
// routes. That's useful for the routes that do really similar
// things.
function cov_aohwdi8hf(){var path="/parse-server/lib/rest.js";var hash="5e385780836471d2b694dd242be8fc2f8feff343";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/parse-server/lib/rest.js",statementMap:{"0":{start:{line:11,column:12},end:{line:11,column:39}},"1":{start:{line:13,column:16},end:{line:13,column:38}},"2":{start:{line:15,column:16},end:{line:15,column:38}},"3":{start:{line:17,column:15},end:{line:17,column:36}},"4":{start:{line:20,column:2},end:{line:22,column:5}},"5":{start:{line:21,column:4},end:{line:21,column:93}},"6":{start:{line:26,column:2},end:{line:26,column:90}},"7":{start:{line:31,column:2},end:{line:31,column:47}},"8":{start:{line:32,column:2},end:{line:37,column:5}},"9":{start:{line:33,column:4},end:{line:33,column:46}},"10":{start:{line:34,column:4},end:{line:34,column:52}},"11":{start:{line:35,column:18},end:{line:35,column:106}},"12":{start:{line:36,column:4},end:{line:36,column:27}},"13":{start:{line:41,column:12},end:{line:52,column:1}},"14":{start:{line:42,column:18},end:{line:44,column:3}},"15":{start:{line:45,column:2},end:{line:45,column:46}},"16":{start:{line:46,column:2},end:{line:51,column:5}},"17":{start:{line:47,column:4},end:{line:47,column:46}},"18":{start:{line:48,column:4},end:{line:48,column:52}},"19":{start:{line:49,column:18},end:{line:49,column:106}},"20":{start:{line:50,column:4},end:{line:50,column:27}},"21":{start:{line:56,column:2},end:{line:58,column:3}},"22":{start:{line:57,column:4},end:{line:57,column:68}},"23":{start:{line:60,column:2},end:{line:62,column:3}},"24":{start:{line:61,column:4},end:{line:61,column:91}},"25":{start:{line:64,column:2},end:{line:64,column:49}},"26":{start:{line:67,column:2},end:{line:127,column:5}},"27":{start:{line:68,column:24},end:{line:68,column:89}},"28":{start:{line:69,column:25},end:{line:69,column:58}},"29":{start:{line:71,column:4},end:{line:95,column:5}},"30":{start:{line:72,column:6},end:{line:94,column:9}},"31":{start:{line:77,column:8},end:{line:91,column:9}},"32":{start:{line:78,column:30},end:{line:78,column:49}},"33":{start:{line:79,column:10},end:{line:79,column:44}},"34":{start:{line:81,column:10},end:{line:85,column:11}},"35":{start:{line:82,column:12},end:{line:84,column:13}},"36":{start:{line:83,column:14},end:{line:83,column:96}},"37":{start:{line:87,column:29},end:{line:87,column:51}},"38":{start:{line:88,column:10},end:{line:88,column:58}},"39":{start:{line:89,column:10},end:{line:89,column:62}},"40":{start:{line:90,column:10},end:{line:90,column:116}},"41":{start:{line:93,column:8},end:{line:93,column:92}},"42":{start:{line:97,column:4},end:{line:97,column:31}},"43":{start:{line:99,column:4},end:{line:103,column:5}},"44":{start:{line:100,column:6},end:{line:100,column:33}},"45":{start:{line:102,column:6},end:{line:102,column:13}},"46":{start:{line:104,column:16},end:{line:104,column:44}},"47":{start:{line:105,column:4},end:{line:105,column:25}},"48":{start:{line:106,column:20},end:{line:106,column:22}},"49":{start:{line:108,column:4},end:{line:115,column:5}},"50":{start:{line:109,column:6},end:{line:109,column:26}},"51":{start:{line:111,column:6},end:{line:114,column:7}},"52":{start:{line:112,column:8},end:{line:112,column:39}},"53":{start:{line:113,column:8},end:{line:113,column:57}},"54":{start:{line:117,column:4},end:{line:119,column:34}},"55":{start:{line:122,column:18},end:{line:122,column:70}},"56":{start:{line:123,column:4},end:{line:123,column:85}},"57":{start:{line:124,column:4},end:{line:124,column:109}},"58":{start:{line:126,column:4},end:{line:126,column:54}},"59":{start:{line:132,column:2},end:{line:132,column:49}},"60":{start:{line:133,column:14},end:{line:133,column:96}},"61":{start:{line:134,column:2},end:{line:134,column:25}},"62":{start:{line:141,column:2},end:{line:141,column:49}},"63":{start:{line:142,column:2},end:{line:166,column:5}},"64":{start:{line:143,column:24},end:{line:143,column:85}},"65":{start:{line:144,column:25},end:{line:144,column:58}},"66":{start:{line:146,column:4},end:{line:151,column:5}},"67":{start:{line:148,column:6},end:{line:150,column:9}},"68":{start:{line:153,column:4},end:{line:153,column:31}},"69":{start:{line:159,column:4},end:{line:161,column:5}},"70":{start:{line:160,column:6},end:{line:160,column:38}},"71":{start:{line:163,column:4},end:{line:163,column:133}},"72":{start:{line:165,column:4},end:{line:165,column:54}},"73":{start:{line:171,column:2},end:{line:173,column:3}},"74":{start:{line:172,column:4},end:{line:172,column:77}},"75":{start:{line:175,column:2},end:{line:175,column:14}},"76":{start:{line:178,column:36},end:{line:178,column:124}},"77":{start:{line:181,column:2},end:{line:186,column:3}},"78":{start:{line:182,column:4},end:{line:185,column:5}},"79":{start:{line:183,column:20},end:{line:183,column:111}},"80":{start:{line:184,column:6},end:{line:184,column:68}},"81":{start:{line:189,column:2},end:{line:192,column:3}},"82":{start:{line:190,column:18},end:{line:190,column:109}},"83":{start:{line:191,column:4},end:{line:191,column:66}},"84":{start:{line:195,column:2},end:{line:198,column:3}},"85":{start:{line:196,column:18},end:{line:196,column:89}},"86":{start:{line:197,column:4},end:{line:197,column:66}},"87":{start:{line:201,column:0},end:{line:207,column:2}}},fnMap:{"0":{name:"checkTriggers",decl:{start:{line:19,column:9},end:{line:19,column:22}},loc:{start:{line:19,column:49},end:{line:23,column:1}},line:19},"1":{name:"(anonymous_1)",decl:{start:{line:20,column:20},end:{line:20,column:21}},loc:{start:{line:20,column:35},end:{line:22,column:3}},line:20},"2":{name:"checkLiveQuery",decl:{start:{line:25,column:9},end:{line:25,column:23}},loc:{start:{line:25,column:43},end:{line:27,column:1}},line:25},"3":{name:"find",decl:{start:{line:30,column:9},end:{line:30,column:13}},loc:{start:{line:30,column:83},end:{line:38,column:1}},line:30},"4":{name:"(anonymous_4)",decl:{start:{line:32,column:129},end:{line:32,column:130}},loc:{start:{line:32,column:139},end:{line:37,column:3}},line:32},"5":{name:"(anonymous_5)",decl:{start:{line:41,column:12},end:{line:41,column:13}},loc:{start:{line:41,column:84},end:{line:52,column:1}},line:41},"6":{name:"(anonymous_6)",decl:{start:{line:46,column:135},end:{line:46,column:136}},loc:{start:{line:46,column:145},end:{line:51,column:3}},line:46},"7":{name:"del",decl:{start:{line:55,column:9},end:{line:55,column:12}},loc:{start:{line:55,column:57},end:{line:128,column:1}},line:55},"8":{name:"(anonymous_8)",decl:{start:{line:67,column:32},end:{line:67,column:33}},loc:{start:{line:67,column:38},end:{line:98,column:3}},line:67},"9":{name:"(anonymous_9)",decl:{start:{line:76,column:14},end:{line:76,column:15}},loc:{start:{line:76,column:26},end:{line:94,column:7}},line:76},"10":{name:"(anonymous_10)",decl:{start:{line:98,column:10},end:{line:98,column:11}},loc:{start:{line:98,column:16},end:{line:104,column:3}},line:98},"11":{name:"(anonymous_11)",decl:{start:{line:104,column:10},end:{line:104,column:11}},loc:{start:{line:104,column:16},end:{line:104,column:44}},line:104},"12":{name:"(anonymous_12)",decl:{start:{line:104,column:51},end:{line:104,column:52}},loc:{start:{line:104,column:56},end:{line:120,column:3}},line:104},"13":{name:"(anonymous_13)",decl:{start:{line:120,column:10},end:{line:120,column:11}},loc:{start:{line:120,column:16},end:{line:125,column:3}},line:120},"14":{name:"(anonymous_14)",decl:{start:{line:125,column:11},end:{line:125,column:12}},loc:{start:{line:125,column:20},end:{line:127,column:3}},line:125},"15":{name:"create",decl:{start:{line:131,column:9},end:{line:131,column:15}},loc:{start:{line:131,column:73},end:{line:135,column:1}},line:131},"16":{name:"update",decl:{start:{line:140,column:9},end:{line:140,column:15}},loc:{start:{line:140,column:84},end:{line:167,column:1}},line:140},"17":{name:"(anonymous_17)",decl:{start:{line:142,column:32},end:{line:142,column:33}},loc:{start:{line:142,column:38},end:{line:154,column:3}},line:142},"18":{name:"(anonymous_18)",decl:{start:{line:154,column:10},end:{line:154,column:11}},loc:{start:{line:156,column:8},end:{line:164,column:3}},line:156},"19":{name:"(anonymous_19)",decl:{start:{line:164,column:11},end:{line:164,column:12}},loc:{start:{line:164,column:20},end:{line:166,column:3}},line:164},"20":{name:"handleSessionMissingError",decl:{start:{line:169,column:9},end:{line:169,column:34}},loc:{start:{line:169,column:59},end:{line:176,column:1}},line:169},"21":{name:"enforceRoleSecurity",decl:{start:{line:180,column:9},end:{line:180,column:28}},loc:{start:{line:180,column:54},end:{line:199,column:1}},line:180}},branchMap:{"0":{loc:{start:{line:26,column:9},end:{line:26,column:89}},type:"binary-expr",locations:[{start:{line:26,column:9},end:{line:26,column:35}},{start:{line:26,column:39},end:{line:26,column:89}}],line:26},"1":{loc:{start:{line:33,column:16},end:{line:33,column:45}},type:"binary-expr",locations:[{start:{line:33,column:16},end:{line:33,column:32}},{start:{line:33,column:36},end:{line:33,column:45}}],line:33},"2":{loc:{start:{line:34,column:18},end:{line:34,column:51}},type:"binary-expr",locations:[{start:{line:34,column:18},end:{line:34,column:36}},{start:{line:34,column:40},end:{line:34,column:51}}],line:34},"3":{loc:{start:{line:47,column:16},end:{line:47,column:45}},type:"binary-expr",locations:[{start:{line:47,column:16},end:{line:47,column:32}},{start:{line:47,column:36},end:{line:47,column:45}}],line:47},"4":{loc:{start:{line:48,column:18},end:{line:48,column:51}},type:"binary-expr",locations:[{start:{line:48,column:18},end:{line:48,column:36}},{start:{line:48,column:40},end:{line:48,column:51}}],line:48},"5":{loc:{start:{line:56,column:2},end:{line:58,column:3}},type:"if",locations:[{start:{line:56,column:2},end:{line:58,column:3}},{start:{line:56,column:2},end:{line:58,column:3}}],line:56},"6":{loc:{start:{line:60,column:2},end:{line:62,column:3}},type:"if",locations:[{start:{line:60,column:2},end:{line:62,column:3}},{start:{line:60,column:2},end:{line:62,column:3}}],line:60},"7":{loc:{start:{line:60,column:6},end:{line:60,column:55}},type:"binary-expr",locations:[{start:{line:60,column:6},end:{line:60,column:27}},{start:{line:60,column:31},end:{line:60,column:55}}],line:60},"8":{loc:{start:{line:71,column:4},end:{line:95,column:5}},type:"if",locations:[{start:{line:71,column:4},end:{line:95,column:5}},{start:{line:71,column:4},end:{line:95,column:5}}],line:71},"9":{loc:{start:{line:71,column:8},end:{line:71,column:62}},type:"binary-expr",locations:[{start:{line:71,column:8},end:{line:71,column:19}},{start:{line:71,column:23},end:{line:71,column:35}},{start:{line:71,column:39},end:{line:71,column:62}}],line:71},"10":{loc:{start:{line:77,column:8},end:{line:91,column:9}},type:"if",locations:[{start:{line:77,column:8},end:{line:91,column:9}},{start:{line:77,column:8},end:{line:91,column:9}}],line:77},"11":{loc:{start:{line:77,column:12},end:{line:77,column:67}},type:"binary-expr",locations:[{start:{line:77,column:12},end:{line:77,column:20}},{start:{line:77,column:24},end:{line:77,column:40}},{start:{line:77,column:44},end:{line:77,column:67}}],line:77},"12":{loc:{start:{line:81,column:10},end:{line:85,column:11}},type:"if",locations:[{start:{line:81,column:10},end:{line:85,column:11}},{start:{line:81,column:10},end:{line:85,column:11}}],line:81},"13":{loc:{start:{line:81,column:14},end:{line:81,column:56}},type:"binary-expr",locations:[{start:{line:81,column:14},end:{line:81,column:38}},{start:{line:81,column:42},end:{line:81,column:56}}],line:81},"14":{loc:{start:{line:82,column:12},end:{line:84,column:13}},type:"if",locations:[{start:{line:82,column:12},end:{line:84,column:13}},{start:{line:82,column:12},end:{line:84,column:13}}],line:82},"15":{loc:{start:{line:82,column:16},end:{line:82,column:72}},type:"binary-expr",locations:[{start:{line:82,column:16},end:{line:82,column:26}},{start:{line:82,column:30},end:{line:82,column:72}}],line:82},"16":{loc:{start:{line:99,column:4},end:{line:103,column:5}},type:"if",locations:[{start:{line:99,column:4},end:{line:103,column:5}},{start:{line:99,column:4},end:{line:103,column:5}}],line:99},"17":{loc:{start:{line:108,column:4},end:{line:115,column:5}},type:"if",locations:[{start:{line:108,column:4},end:{line:115,column:5}},{start:{line:108,column:4},end:{line:115,column:5}}],line:108},"18":{loc:{start:{line:111,column:6},end:{line:114,column:7}},type:"if",locations:[{start:{line:111,column:6},end:{line:114,column:7}},{start:{line:111,column:6},end:{line:114,column:7}}],line:111},"19":{loc:{start:{line:146,column:4},end:{line:151,column:5}},type:"if",locations:[{start:{line:146,column:4},end:{line:151,column:5}},{start:{line:146,column:4},end:{line:151,column:5}}],line:146},"20":{loc:{start:{line:146,column:8},end:{line:146,column:35}},type:"binary-expr",locations:[{start:{line:146,column:8},end:{line:146,column:19}},{start:{line:146,column:23},end:{line:146,column:35}}],line:146},"21":{loc:{start:{line:159,column:4},end:{line:161,column:5}},type:"if",locations:[{start:{line:159,column:4},end:{line:161,column:5}},{start:{line:159,column:4},end:{line:161,column:5}}],line:159},"22":{loc:{start:{line:159,column:8},end:{line:159,column:33}},type:"binary-expr",locations:[{start:{line:159,column:8},end:{line:159,column:15}},{start:{line:159,column:19},end:{line:159,column:33}}],line:159},"23":{loc:{start:{line:171,column:2},end:{line:173,column:3}},type:"if",locations:[{start:{line:171,column:2},end:{line:173,column:3}},{start:{line:171,column:2},end:{line:173,column:3}}],line:171},"24":{loc:{start:{line:171,column:6},end:{line:171,column:92}},type:"binary-expr",locations:[{start:{line:171,column:6},end:{line:171,column:27}},{start:{line:171,column:31},end:{line:171,column:74}},{start:{line:171,column:78},end:{line:171,column:92}}],line:171},"25":{loc:{start:{line:181,column:2},end:{line:186,column:3}},type:"if",locations:[{start:{line:181,column:2},end:{line:186,column:3}},{start:{line:181,column:2},end:{line:186,column:3}}],line:181},"26":{loc:{start:{line:181,column:6},end:{line:181,column:53}},type:"binary-expr",locations:[{start:{line:181,column:6},end:{line:181,column:35}},{start:{line:181,column:39},end:{line:181,column:53}}],line:181},"27":{loc:{start:{line:182,column:4},end:{line:185,column:5}},type:"if",locations:[{start:{line:182,column:4},end:{line:185,column:5}},{start:{line:182,column:4},end:{line:185,column:5}}],line:182},"28":{loc:{start:{line:182,column:8},end:{line:182,column:48}},type:"binary-expr",locations:[{start:{line:182,column:8},end:{line:182,column:27}},{start:{line:182,column:31},end:{line:182,column:48}}],line:182},"29":{loc:{start:{line:189,column:2},end:{line:192,column:3}},type:"if",locations:[{start:{line:189,column:2},end:{line:192,column:3}},{start:{line:189,column:2},end:{line:192,column:3}}],line:189},"30":{loc:{start:{line:189,column:6},end:{line:189,column:75}},type:"binary-expr",locations:[{start:{line:189,column:6},end:{line:189,column:57}},{start:{line:189,column:61},end:{line:189,column:75}}],line:189},"31":{loc:{start:{line:195,column:2},end:{line:198,column:3}},type:"if",locations:[{start:{line:195,column:2},end:{line:198,column:3}},{start:{line:195,column:2},end:{line:198,column:3}}],line:195},"32":{loc:{start:{line:195,column:6},end:{line:195,column:92}},type:"binary-expr",locations:[{start:{line:195,column:6},end:{line:195,column:21}},{start:{line:195,column:26},end:{line:195,column:45}},{start:{line:195,column:49},end:{line:195,column:68}},{start:{line:195,column:72},end:{line:195,column:91}}],line:195}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0,0,0]},inputSourceMap:{version:3,sources:["../src/rest.js"],names:["Parse","require","RestQuery","RestWrite","triggers","checkTriggers","className","config","types","some","triggerType","getTrigger","Types","applicationId","checkLiveQuery","liveQueryController","hasLiveQuery","find","auth","restWhere","restOptions","clientSDK","context","enforceRoleSecurity","maybeRunQueryTrigger","beforeFind","then","result","query","execute","get","objectId","del","Error","INVALID_JSON","isUnauthenticated","SESSION_MISSING","inflatedObject","schemaController","Promise","resolve","hasTriggers","op","response","results","length","firstResult","isMaster","user","id","INVALID_SESSION_TOKEN","cacheAdapter","cacheController","sessionToken","Object","fromJSON","maybeRunTrigger","beforeDelete","OBJECT_NOT_FOUND","getUserRoles","database","loadSchema","s","options","acl","push","concat","userRoles","destroy","perms","getClassLevelPermissions","onAfterDelete","afterDelete","catch","error","handleSessionMissingError","create","restObject","write","update","undefined","originalRestObject","code","classesWithMasterOnlyAccess","method","OPERATION_FORBIDDEN","indexOf","isReadOnly","module","exports"],mappings:"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",sourcesContent:["// This file contains helpers for running operations in REST format.\n// The goal is that handlers that explicitly handle an express route\n// should just be shallow wrappers around things in this file, but\n// these functions should not explicitly depend on the request\n// object.\n// This means that one of these handlers can support multiple\n// routes. That's useful for the routes that do really similar\n// things.\n\nvar Parse = require('parse/node').Parse;\n\nvar RestQuery = require('./RestQuery');\nvar RestWrite = require('./RestWrite');\nvar triggers = require('./triggers');\n\nfunction checkTriggers(className, config, types) {\n  return types.some(triggerType => {\n    return triggers.getTrigger(className, triggers.Types[triggerType], config.applicationId);\n  });\n}\n\nfunction checkLiveQuery(className, config) {\n  return config.liveQueryController && config.liveQueryController.hasLiveQuery(className);\n}\n\n// Returns a promise for an object with optional keys 'results' and 'count'.\nfunction find(config, auth, className, restWhere, restOptions, clientSDK, context) {\n  enforceRoleSecurity('find', className, auth);\n  return triggers\n    .maybeRunQueryTrigger(\n      triggers.Types.beforeFind,\n      className,\n      restWhere,\n      restOptions,\n      config,\n      auth,\n      context\n    )\n    .then(result => {\n      restWhere = result.restWhere || restWhere;\n      restOptions = result.restOptions || restOptions;\n      const query = new RestQuery(\n        config,\n        auth,\n        className,\n        restWhere,\n        restOptions,\n        clientSDK,\n        true,\n        context\n      );\n      return query.execute();\n    });\n}\n\n// get is just like find but only queries an objectId.\nconst get = (config, auth, className, objectId, restOptions, clientSDK, context) => {\n  var restWhere = { objectId };\n  enforceRoleSecurity('get', className, auth);\n  return triggers\n    .maybeRunQueryTrigger(\n      triggers.Types.beforeFind,\n      className,\n      restWhere,\n      restOptions,\n      config,\n      auth,\n      context,\n      true\n    )\n    .then(result => {\n      restWhere = result.restWhere || restWhere;\n      restOptions = result.restOptions || restOptions;\n      const query = new RestQuery(\n        config,\n        auth,\n        className,\n        restWhere,\n        restOptions,\n        clientSDK,\n        true,\n        context\n      );\n      return query.execute();\n    });\n};\n\n// Returns a promise that doesn't resolve to any useful value.\nfunction del(config, auth, className, objectId, context) {\n  if (typeof objectId !== 'string') {\n    throw new Parse.Error(Parse.Error.INVALID_JSON, 'bad objectId');\n  }\n\n  if (className === '_User' && auth.isUnauthenticated()) {\n    throw new Parse.Error(Parse.Error.SESSION_MISSING, 'Insufficient auth to delete user');\n  }\n\n  enforceRoleSecurity('delete', className, auth);\n\n  let inflatedObject;\n  let schemaController;\n\n  return Promise.resolve()\n    .then(() => {\n      const hasTriggers = checkTriggers(className, config, ['beforeDelete', 'afterDelete']);\n      const hasLiveQuery = checkLiveQuery(className, config);\n      if (hasTriggers || hasLiveQuery || className == '_Session') {\n        return new RestQuery(config, auth, className, { objectId })\n          .execute({ op: 'delete' })\n          .then(response => {\n            if (response && response.results && response.results.length) {\n              const firstResult = response.results[0];\n              firstResult.className = className;\n              if (className === '_Session' && !auth.isMaster) {\n                if (!auth.user || firstResult.user.objectId !== auth.user.id) {\n                  throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN, 'Invalid session token');\n                }\n              }\n              var cacheAdapter = config.cacheController;\n              cacheAdapter.user.del(firstResult.sessionToken);\n              inflatedObject = Parse.Object.fromJSON(firstResult);\n              return triggers.maybeRunTrigger(\n                triggers.Types.beforeDelete,\n                auth,\n                inflatedObject,\n                null,\n                config,\n                context\n              );\n            }\n            throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Object not found for delete.');\n          });\n      }\n      return Promise.resolve({});\n    })\n    .then(() => {\n      if (!auth.isMaster) {\n        return auth.getUserRoles();\n      } else {\n        return;\n      }\n    })\n    .then(() => config.database.loadSchema())\n    .then(s => {\n      schemaController = s;\n      const options = {};\n      if (!auth.isMaster) {\n        options.acl = ['*'];\n        if (auth.user) {\n          options.acl.push(auth.user.id);\n          options.acl = options.acl.concat(auth.userRoles);\n        }\n      }\n\n      return config.database.destroy(\n        className,\n        {\n          objectId: objectId,\n        },\n        options,\n        schemaController\n      );\n    })\n    .then(() => {\n      // Notify LiveQuery server if possible\n      const perms = schemaController.getClassLevelPermissions(className);\n      config.liveQueryController.onAfterDelete(className, inflatedObject, null, perms);\n      return triggers.maybeRunTrigger(\n        triggers.Types.afterDelete,\n        auth,\n        inflatedObject,\n        null,\n        config,\n        context\n      );\n    })\n    .catch(error => {\n      handleSessionMissingError(error, className, auth);\n    });\n}\n\n// Returns a promise for a {response, status, location} object.\nfunction create(config, auth, className, restObject, clientSDK, context) {\n  enforceRoleSecurity('create', className, auth);\n  var write = new RestWrite(config, auth, className, null, restObject, null, clientSDK, context);\n  return write.execute();\n}\n\n// Returns a promise that contains the fields of the update that the\n// REST API is supposed to return.\n// Usually, this is just updatedAt.\nfunction update(config, auth, className, restWhere, restObject, clientSDK, context) {\n  enforceRoleSecurity('update', className, auth);\n\n  return Promise.resolve()\n    .then(() => {\n      const hasTriggers = checkTriggers(className, config, ['beforeSave', 'afterSave']);\n      const hasLiveQuery = checkLiveQuery(className, config);\n      if (hasTriggers || hasLiveQuery) {\n        // Do not use find, as it runs the before finds\n        return new RestQuery(\n          config,\n          auth,\n          className,\n          restWhere,\n          undefined,\n          undefined,\n          false,\n          context\n        ).execute({\n          op: 'update',\n        });\n      }\n      return Promise.resolve({});\n    })\n    .then(({ results }) => {\n      var originalRestObject;\n      if (results && results.length) {\n        originalRestObject = results[0];\n      }\n      return new RestWrite(\n        config,\n        auth,\n        className,\n        restWhere,\n        restObject,\n        originalRestObject,\n        clientSDK,\n        context,\n        'update'\n      ).execute();\n    })\n    .catch(error => {\n      handleSessionMissingError(error, className, auth);\n    });\n}\n\nfunction handleSessionMissingError(error, className, auth) {\n  // If we're trying to update a user without / with bad session token\n  if (className === '_User' && error.code === Parse.Error.OBJECT_NOT_FOUND && !auth.isMaster) {\n    throw new Parse.Error(Parse.Error.SESSION_MISSING, 'Insufficient auth.');\n  }\n  throw error;\n}\n\nconst classesWithMasterOnlyAccess = [\n  '_JobStatus',\n  '_PushStatus',\n  '_Hooks',\n  '_GlobalConfig',\n  '_JobSchedule',\n  '_Idempotency',\n];\n// Disallowing access to the _Role collection except by master key\nfunction enforceRoleSecurity(method, className, auth) {\n  if (className === '_Installation' && !auth.isMaster) {\n    if (method === 'delete' || method === 'find') {\n      const error = `Clients aren't allowed to perform the ${method} operation on the installation collection.`;\n      throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);\n    }\n  }\n\n  //all volatileClasses are masterKey only\n  if (classesWithMasterOnlyAccess.indexOf(className) >= 0 && !auth.isMaster) {\n    const error = `Clients aren't allowed to perform the ${method} operation on the ${className} collection.`;\n    throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);\n  }\n\n  // readOnly masterKey is not allowed\n  if (auth.isReadOnly && (method === 'delete' || method === 'create' || method === 'update')) {\n    const error = `read-only masterKey isn't allowed to perform the ${method} operation.`;\n    throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN, error);\n  }\n}\n\nmodule.exports = {\n  create,\n  del,\n  find,\n  get,\n  update,\n};\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5e385780836471d2b694dd242be8fc2f8feff343"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_aohwdi8hf=function(){return actualCoverage;};}return actualCoverage;}cov_aohwdi8hf();var Parse=(cov_aohwdi8hf().s[0]++,require('parse/node').Parse);var RestQuery=(cov_aohwdi8hf().s[1]++,require('./RestQuery'));var RestWrite=(cov_aohwdi8hf().s[2]++,require('./RestWrite'));var triggers=(cov_aohwdi8hf().s[3]++,require('./triggers'));function checkTriggers(className,config,types){cov_aohwdi8hf().f[0]++;cov_aohwdi8hf().s[4]++;return types.some(triggerType=>{cov_aohwdi8hf().f[1]++;cov_aohwdi8hf().s[5]++;return triggers.getTrigger(className,triggers.Types[triggerType],config.applicationId);});}function checkLiveQuery(className,config){cov_aohwdi8hf().f[2]++;cov_aohwdi8hf().s[6]++;return(cov_aohwdi8hf().b[0][0]++,config.liveQueryController)&&(cov_aohwdi8hf().b[0][1]++,config.liveQueryController.hasLiveQuery(className));}// Returns a promise for an object with optional keys 'results' and 'count'.
function find(config,auth,className,restWhere,restOptions,clientSDK,context){cov_aohwdi8hf().f[3]++;cov_aohwdi8hf().s[7]++;enforceRoleSecurity('find',className,auth);cov_aohwdi8hf().s[8]++;return triggers.maybeRunQueryTrigger(triggers.Types.beforeFind,className,restWhere,restOptions,config,auth,context).then(result=>{cov_aohwdi8hf().f[4]++;cov_aohwdi8hf().s[9]++;restWhere=(cov_aohwdi8hf().b[1][0]++,result.restWhere)||(cov_aohwdi8hf().b[1][1]++,restWhere);cov_aohwdi8hf().s[10]++;restOptions=(cov_aohwdi8hf().b[2][0]++,result.restOptions)||(cov_aohwdi8hf().b[2][1]++,restOptions);const query=(cov_aohwdi8hf().s[11]++,new RestQuery(config,auth,className,restWhere,restOptions,clientSDK,true,context));cov_aohwdi8hf().s[12]++;return query.execute();});}// get is just like find but only queries an objectId.
cov_aohwdi8hf().s[13]++;const get=(config,auth,className,objectId,restOptions,clientSDK,context)=>{cov_aohwdi8hf().f[5]++;var restWhere=(cov_aohwdi8hf().s[14]++,{objectId});cov_aohwdi8hf().s[15]++;enforceRoleSecurity('get',className,auth);cov_aohwdi8hf().s[16]++;return triggers.maybeRunQueryTrigger(triggers.Types.beforeFind,className,restWhere,restOptions,config,auth,context,true).then(result=>{cov_aohwdi8hf().f[6]++;cov_aohwdi8hf().s[17]++;restWhere=(cov_aohwdi8hf().b[3][0]++,result.restWhere)||(cov_aohwdi8hf().b[3][1]++,restWhere);cov_aohwdi8hf().s[18]++;restOptions=(cov_aohwdi8hf().b[4][0]++,result.restOptions)||(cov_aohwdi8hf().b[4][1]++,restOptions);const query=(cov_aohwdi8hf().s[19]++,new RestQuery(config,auth,className,restWhere,restOptions,clientSDK,true,context));cov_aohwdi8hf().s[20]++;return query.execute();});};// Returns a promise that doesn't resolve to any useful value.
function del(config,auth,className,objectId,context){cov_aohwdi8hf().f[7]++;cov_aohwdi8hf().s[21]++;if(typeof objectId!=='string'){cov_aohwdi8hf().b[5][0]++;cov_aohwdi8hf().s[22]++;throw new Parse.Error(Parse.Error.INVALID_JSON,'bad objectId');}else{cov_aohwdi8hf().b[5][1]++;}cov_aohwdi8hf().s[23]++;if((cov_aohwdi8hf().b[7][0]++,className==='_User')&&(cov_aohwdi8hf().b[7][1]++,auth.isUnauthenticated())){cov_aohwdi8hf().b[6][0]++;cov_aohwdi8hf().s[24]++;throw new Parse.Error(Parse.Error.SESSION_MISSING,'Insufficient auth to delete user');}else{cov_aohwdi8hf().b[6][1]++;}cov_aohwdi8hf().s[25]++;enforceRoleSecurity('delete',className,auth);let inflatedObject;let schemaController;cov_aohwdi8hf().s[26]++;return Promise.resolve().then(()=>{cov_aohwdi8hf().f[8]++;const hasTriggers=(cov_aohwdi8hf().s[27]++,checkTriggers(className,config,['beforeDelete','afterDelete']));const hasLiveQuery=(cov_aohwdi8hf().s[28]++,checkLiveQuery(className,config));cov_aohwdi8hf().s[29]++;if((cov_aohwdi8hf().b[9][0]++,hasTriggers)||(cov_aohwdi8hf().b[9][1]++,hasLiveQuery)||(cov_aohwdi8hf().b[9][2]++,className=='_Session')){cov_aohwdi8hf().b[8][0]++;cov_aohwdi8hf().s[30]++;return new RestQuery(config,auth,className,{objectId}).execute({op:'delete'}).then(response=>{cov_aohwdi8hf().f[9]++;cov_aohwdi8hf().s[31]++;if((cov_aohwdi8hf().b[11][0]++,response)&&(cov_aohwdi8hf().b[11][1]++,response.results)&&(cov_aohwdi8hf().b[11][2]++,response.results.length)){cov_aohwdi8hf().b[10][0]++;const firstResult=(cov_aohwdi8hf().s[32]++,response.results[0]);cov_aohwdi8hf().s[33]++;firstResult.className=className;cov_aohwdi8hf().s[34]++;if((cov_aohwdi8hf().b[13][0]++,className==='_Session')&&(cov_aohwdi8hf().b[13][1]++,!auth.isMaster)){cov_aohwdi8hf().b[12][0]++;cov_aohwdi8hf().s[35]++;if((cov_aohwdi8hf().b[15][0]++,!auth.user)||(cov_aohwdi8hf().b[15][1]++,firstResult.user.objectId!==auth.user.id)){cov_aohwdi8hf().b[14][0]++;cov_aohwdi8hf().s[36]++;throw new Parse.Error(Parse.Error.INVALID_SESSION_TOKEN,'Invalid session token');}else{cov_aohwdi8hf().b[14][1]++;}}else{cov_aohwdi8hf().b[12][1]++;}var cacheAdapter=(cov_aohwdi8hf().s[37]++,config.cacheController);cov_aohwdi8hf().s[38]++;cacheAdapter.user.del(firstResult.sessionToken);cov_aohwdi8hf().s[39]++;inflatedObject=Parse.Object.fromJSON(firstResult);cov_aohwdi8hf().s[40]++;return triggers.maybeRunTrigger(triggers.Types.beforeDelete,auth,inflatedObject,null,config,context);}else{cov_aohwdi8hf().b[10][1]++;}cov_aohwdi8hf().s[41]++;throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND,'Object not found for delete.');});}else{cov_aohwdi8hf().b[8][1]++;}cov_aohwdi8hf().s[42]++;return Promise.resolve({});}).then(()=>{cov_aohwdi8hf().f[10]++;cov_aohwdi8hf().s[43]++;if(!auth.isMaster){cov_aohwdi8hf().b[16][0]++;cov_aohwdi8hf().s[44]++;return auth.getUserRoles();}else{cov_aohwdi8hf().b[16][1]++;cov_aohwdi8hf().s[45]++;return;}}).then(()=>{cov_aohwdi8hf().f[11]++;cov_aohwdi8hf().s[46]++;return config.database.loadSchema();}).then(s=>{cov_aohwdi8hf().f[12]++;cov_aohwdi8hf().s[47]++;schemaController=s;const options=(cov_aohwdi8hf().s[48]++,{});cov_aohwdi8hf().s[49]++;if(!auth.isMaster){cov_aohwdi8hf().b[17][0]++;cov_aohwdi8hf().s[50]++;options.acl=['*'];cov_aohwdi8hf().s[51]++;if(auth.user){cov_aohwdi8hf().b[18][0]++;cov_aohwdi8hf().s[52]++;options.acl.push(auth.user.id);cov_aohwdi8hf().s[53]++;options.acl=options.acl.concat(auth.userRoles);}else{cov_aohwdi8hf().b[18][1]++;}}else{cov_aohwdi8hf().b[17][1]++;}cov_aohwdi8hf().s[54]++;return config.database.destroy(className,{objectId:objectId},options,schemaController);}).then(()=>{cov_aohwdi8hf().f[13]++;// Notify LiveQuery server if possible
const perms=(cov_aohwdi8hf().s[55]++,schemaController.getClassLevelPermissions(className));cov_aohwdi8hf().s[56]++;config.liveQueryController.onAfterDelete(className,inflatedObject,null,perms);cov_aohwdi8hf().s[57]++;return triggers.maybeRunTrigger(triggers.Types.afterDelete,auth,inflatedObject,null,config,context);}).catch(error=>{cov_aohwdi8hf().f[14]++;cov_aohwdi8hf().s[58]++;handleSessionMissingError(error,className,auth);});}// Returns a promise for a {response, status, location} object.
function create(config,auth,className,restObject,clientSDK,context){cov_aohwdi8hf().f[15]++;cov_aohwdi8hf().s[59]++;enforceRoleSecurity('create',className,auth);var write=(cov_aohwdi8hf().s[60]++,new RestWrite(config,auth,className,null,restObject,null,clientSDK,context));cov_aohwdi8hf().s[61]++;return write.execute();}// Returns a promise that contains the fields of the update that the
// REST API is supposed to return.
// Usually, this is just updatedAt.
function update(config,auth,className,restWhere,restObject,clientSDK,context){cov_aohwdi8hf().f[16]++;cov_aohwdi8hf().s[62]++;enforceRoleSecurity('update',className,auth);cov_aohwdi8hf().s[63]++;return Promise.resolve().then(()=>{cov_aohwdi8hf().f[17]++;const hasTriggers=(cov_aohwdi8hf().s[64]++,checkTriggers(className,config,['beforeSave','afterSave']));const hasLiveQuery=(cov_aohwdi8hf().s[65]++,checkLiveQuery(className,config));cov_aohwdi8hf().s[66]++;if((cov_aohwdi8hf().b[20][0]++,hasTriggers)||(cov_aohwdi8hf().b[20][1]++,hasLiveQuery)){cov_aohwdi8hf().b[19][0]++;cov_aohwdi8hf().s[67]++;// Do not use find, as it runs the before finds
return new RestQuery(config,auth,className,restWhere,undefined,undefined,false,context).execute({op:'update'});}else{cov_aohwdi8hf().b[19][1]++;}cov_aohwdi8hf().s[68]++;return Promise.resolve({});}).then(({results})=>{cov_aohwdi8hf().f[18]++;var originalRestObject;cov_aohwdi8hf().s[69]++;if((cov_aohwdi8hf().b[22][0]++,results)&&(cov_aohwdi8hf().b[22][1]++,results.length)){cov_aohwdi8hf().b[21][0]++;cov_aohwdi8hf().s[70]++;originalRestObject=results[0];}else{cov_aohwdi8hf().b[21][1]++;}cov_aohwdi8hf().s[71]++;return new RestWrite(config,auth,className,restWhere,restObject,originalRestObject,clientSDK,context,'update').execute();}).catch(error=>{cov_aohwdi8hf().f[19]++;cov_aohwdi8hf().s[72]++;handleSessionMissingError(error,className,auth);});}function handleSessionMissingError(error,className,auth){cov_aohwdi8hf().f[20]++;cov_aohwdi8hf().s[73]++;// If we're trying to update a user without / with bad session token
if((cov_aohwdi8hf().b[24][0]++,className==='_User')&&(cov_aohwdi8hf().b[24][1]++,error.code===Parse.Error.OBJECT_NOT_FOUND)&&(cov_aohwdi8hf().b[24][2]++,!auth.isMaster)){cov_aohwdi8hf().b[23][0]++;cov_aohwdi8hf().s[74]++;throw new Parse.Error(Parse.Error.SESSION_MISSING,'Insufficient auth.');}else{cov_aohwdi8hf().b[23][1]++;}cov_aohwdi8hf().s[75]++;throw error;}const classesWithMasterOnlyAccess=(cov_aohwdi8hf().s[76]++,['_JobStatus','_PushStatus','_Hooks','_GlobalConfig','_JobSchedule','_Idempotency']);// Disallowing access to the _Role collection except by master key
function enforceRoleSecurity(method,className,auth){cov_aohwdi8hf().f[21]++;cov_aohwdi8hf().s[77]++;if((cov_aohwdi8hf().b[26][0]++,className==='_Installation')&&(cov_aohwdi8hf().b[26][1]++,!auth.isMaster)){cov_aohwdi8hf().b[25][0]++;cov_aohwdi8hf().s[78]++;if((cov_aohwdi8hf().b[28][0]++,method==='delete')||(cov_aohwdi8hf().b[28][1]++,method==='find')){cov_aohwdi8hf().b[27][0]++;const error=(cov_aohwdi8hf().s[79]++,`Clients aren't allowed to perform the ${method} operation on the installation collection.`);cov_aohwdi8hf().s[80]++;throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN,error);}else{cov_aohwdi8hf().b[27][1]++;}}else{cov_aohwdi8hf().b[25][1]++;}//all volatileClasses are masterKey only
cov_aohwdi8hf().s[81]++;if((cov_aohwdi8hf().b[30][0]++,classesWithMasterOnlyAccess.indexOf(className)>=0)&&(cov_aohwdi8hf().b[30][1]++,!auth.isMaster)){cov_aohwdi8hf().b[29][0]++;const error=(cov_aohwdi8hf().s[82]++,`Clients aren't allowed to perform the ${method} operation on the ${className} collection.`);cov_aohwdi8hf().s[83]++;throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN,error);}else{cov_aohwdi8hf().b[29][1]++;}// readOnly masterKey is not allowed
cov_aohwdi8hf().s[84]++;if((cov_aohwdi8hf().b[32][0]++,auth.isReadOnly)&&((cov_aohwdi8hf().b[32][1]++,method==='delete')||(cov_aohwdi8hf().b[32][2]++,method==='create')||(cov_aohwdi8hf().b[32][3]++,method==='update'))){cov_aohwdi8hf().b[31][0]++;const error=(cov_aohwdi8hf().s[85]++,`read-only masterKey isn't allowed to perform the ${method} operation.`);cov_aohwdi8hf().s[86]++;throw new Parse.Error(Parse.Error.OPERATION_FORBIDDEN,error);}else{cov_aohwdi8hf().b[31][1]++;}}cov_aohwdi8hf().s[87]++;module.exports={create,del,find,get,update};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXN0LmpzIl0sIm5hbWVzIjpbIlBhcnNlIiwicmVxdWlyZSIsIlJlc3RRdWVyeSIsIlJlc3RXcml0ZSIsInRyaWdnZXJzIiwiY2hlY2tUcmlnZ2VycyIsImNsYXNzTmFtZSIsImNvbmZpZyIsInR5cGVzIiwic29tZSIsInRyaWdnZXJUeXBlIiwiZ2V0VHJpZ2dlciIsIlR5cGVzIiwiYXBwbGljYXRpb25JZCIsImNoZWNrTGl2ZVF1ZXJ5IiwibGl2ZVF1ZXJ5Q29udHJvbGxlciIsImhhc0xpdmVRdWVyeSIsImZpbmQiLCJhdXRoIiwicmVzdFdoZXJlIiwicmVzdE9wdGlvbnMiLCJjbGllbnRTREsiLCJjb250ZXh0IiwiZW5mb3JjZVJvbGVTZWN1cml0eSIsIm1heWJlUnVuUXVlcnlUcmlnZ2VyIiwiYmVmb3JlRmluZCIsInRoZW4iLCJyZXN1bHQiLCJxdWVyeSIsImV4ZWN1dGUiLCJnZXQiLCJvYmplY3RJZCIsImRlbCIsIkVycm9yIiwiSU5WQUxJRF9KU09OIiwiaXNVbmF1dGhlbnRpY2F0ZWQiLCJTRVNTSU9OX01JU1NJTkciLCJpbmZsYXRlZE9iamVjdCIsInNjaGVtYUNvbnRyb2xsZXIiLCJQcm9taXNlIiwicmVzb2x2ZSIsImhhc1RyaWdnZXJzIiwib3AiLCJyZXNwb25zZSIsInJlc3VsdHMiLCJsZW5ndGgiLCJmaXJzdFJlc3VsdCIsImlzTWFzdGVyIiwidXNlciIsImlkIiwiSU5WQUxJRF9TRVNTSU9OX1RPS0VOIiwiY2FjaGVBZGFwdGVyIiwiY2FjaGVDb250cm9sbGVyIiwic2Vzc2lvblRva2VuIiwiT2JqZWN0IiwiZnJvbUpTT04iLCJtYXliZVJ1blRyaWdnZXIiLCJiZWZvcmVEZWxldGUiLCJPQkpFQ1RfTk9UX0ZPVU5EIiwiZ2V0VXNlclJvbGVzIiwiZGF0YWJhc2UiLCJsb2FkU2NoZW1hIiwicyIsIm9wdGlvbnMiLCJhY2wiLCJwdXNoIiwiY29uY2F0IiwidXNlclJvbGVzIiwiZGVzdHJveSIsInBlcm1zIiwiZ2V0Q2xhc3NMZXZlbFBlcm1pc3Npb25zIiwib25BZnRlckRlbGV0ZSIsImFmdGVyRGVsZXRlIiwiY2F0Y2giLCJlcnJvciIsImhhbmRsZVNlc3Npb25NaXNzaW5nRXJyb3IiLCJjcmVhdGUiLCJyZXN0T2JqZWN0Iiwid3JpdGUiLCJ1cGRhdGUiLCJ1bmRlZmluZWQiLCJvcmlnaW5hbFJlc3RPYmplY3QiLCJjb2RlIiwiY2xhc3Nlc1dpdGhNYXN0ZXJPbmx5QWNjZXNzIiwibWV0aG9kIiwiT1BFUkFUSU9OX0ZPUkJJRERFTiIsImluZGV4T2YiLCJpc1JlYWRPbmx5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBSUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsWUFBRCxDQUFQLENBQXNCRCxLQUFsQzs7QUFFQSxJQUFJRSxTQUFTLEdBQUdELE9BQU8sQ0FBQyxhQUFELENBQXZCOztBQUNBLElBQUlFLFNBQVMsR0FBR0YsT0FBTyxDQUFDLGFBQUQsQ0FBdkI7O0FBQ0EsSUFBSUcsUUFBUSxHQUFHSCxPQUFPLENBQUMsWUFBRCxDQUF0Qjs7QUFFQSxTQUFTSSxhQUFULENBQXVCQyxTQUF2QixFQUFrQ0MsTUFBbEMsRUFBMENDLEtBQTFDLEVBQWlEO0FBQy9DLFNBQU9BLEtBQUssQ0FBQ0MsSUFBTixDQUFXQyxXQUFXLElBQUk7QUFDL0IsV0FBT04sUUFBUSxDQUFDTyxVQUFULENBQW9CTCxTQUFwQixFQUErQkYsUUFBUSxDQUFDUSxLQUFULENBQWVGLFdBQWYsQ0FBL0IsRUFBNERILE1BQU0sQ0FBQ00sYUFBbkUsQ0FBUDtBQUNELEdBRk0sQ0FBUDtBQUdEOztBQUVELFNBQVNDLGNBQVQsQ0FBd0JSLFNBQXhCLEVBQW1DQyxNQUFuQyxFQUEyQztBQUN6QyxTQUFPQSxNQUFNLENBQUNRLG1CQUFQLElBQThCUixNQUFNLENBQUNRLG1CQUFQLENBQTJCQyxZQUEzQixDQUF3Q1YsU0FBeEMsQ0FBckM7QUFDRCxDLENBRUQ7OztB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bHBlcnMgZm9yIHJ1bm5pbmcgb3BlcmF0aW9ucyBpbiBSRVNUIGZvcm1hdC5cbi8vIFRoZSBnb2FsIGlzIHRoYXQgaGFuZGxlcnMgdGhhdCBleHBsaWNpdGx5IGhhbmRsZSBhbiBleHByZXNzIHJvdXRlXG4vLyBzaG91bGQganVzdCBiZSBzaGFsbG93IHdyYXBwZXJzIGFyb3VuZCB0aGluZ3MgaW4gdGhpcyBmaWxlLCBidXRcbi8vIHRoZXNlIGZ1bmN0aW9ucyBzaG91bGQgbm90IGV4cGxpY2l0bHkgZGVwZW5kIG9uIHRoZSByZXF1ZXN0XG4vLyBvYmplY3QuXG4vLyBUaGlzIG1lYW5zIHRoYXQgb25lIG9mIHRoZXNlIGhhbmRsZXJzIGNhbiBzdXBwb3J0IG11bHRpcGxlXG4vLyByb3V0ZXMuIFRoYXQncyB1c2VmdWwgZm9yIHRoZSByb3V0ZXMgdGhhdCBkbyByZWFsbHkgc2ltaWxhclxuLy8gdGhpbmdzLlxuXG52YXIgUGFyc2UgPSByZXF1aXJlKCdwYXJzZS9ub2RlJykuUGFyc2U7XG5cbnZhciBSZXN0UXVlcnkgPSByZXF1aXJlKCcuL1Jlc3RRdWVyeScpO1xudmFyIFJlc3RXcml0ZSA9IHJlcXVpcmUoJy4vUmVzdFdyaXRlJyk7XG52YXIgdHJpZ2dlcnMgPSByZXF1aXJlKCcuL3RyaWdnZXJzJyk7XG5cbmZ1bmN0aW9uIGNoZWNrVHJpZ2dlcnMoY2xhc3NOYW1lLCBjb25maWcsIHR5cGVzKSB7XG4gIHJldHVybiB0eXBlcy5zb21lKHRyaWdnZXJUeXBlID0+IHtcbiAgICByZXR1cm4gdHJpZ2dlcnMuZ2V0VHJpZ2dlcihjbGFzc05hbWUsIHRyaWdnZXJzLlR5cGVzW3RyaWdnZXJUeXBlXSwgY29uZmlnLmFwcGxpY2F0aW9uSWQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY2hlY2tMaXZlUXVlcnkoY2xhc3NOYW1lLCBjb25maWcpIHtcbiAgcmV0dXJuIGNvbmZpZy5saXZlUXVlcnlDb250cm9sbGVyICYmIGNvbmZpZy5saXZlUXVlcnlDb250cm9sbGVyLmhhc0xpdmVRdWVyeShjbGFzc05hbWUpO1xufVxuXG4vLyBSZXR1cm5zIGEgcHJvbWlzZSBmb3IgYW4gb2JqZWN0IHdpdGggb3B0aW9uYWwga2V5cyAncmVzdWx0cycgYW5kICdjb3VudCcuXG5mdW5jdGlvbiBmaW5kKGNvbmZpZywgYXV0aCwgY2xhc3NOYW1lLCByZXN0V2hlcmUsIHJlc3RPcHRpb25zLCBjbGllbnRTREssIGNvbnRleHQpIHtcbiAgZW5mb3JjZVJvbGVTZWN1cml0eSgnZmluZCcsIGNsYXNzTmFtZSwgYXV0aCk7XG4gIHJldHVybiB0cmlnZ2Vyc1xuICAgIC5tYXliZVJ1blF1ZXJ5VHJpZ2dlcihcbiAgICAgIHRyaWdnZXJzLlR5cGVzLmJlZm9yZUZpbmQsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICByZXN0V2hlcmUsXG4gICAgICByZXN0T3B0aW9ucyxcbiAgICAgIGNvbmZpZyxcbiAgICAgIGF1dGgsXG4gICAgICBjb250ZXh0XG4gICAgKVxuICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICByZXN0V2hlcmUgPSByZXN1bHQucmVzdFdoZXJlIHx8IHJlc3RXaGVyZTtcbiAgICAgIHJlc3RPcHRpb25zID0gcmVzdWx0LnJlc3RPcHRpb25zIHx8IHJlc3RPcHRpb25zO1xuICAgICAgY29uc3QgcXVlcnkgPSBuZXcgUmVzdFF1ZXJ5KFxuICAgICAgICBjb25maWcsXG4gICAgICAgIGF1dGgsXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgcmVzdFdoZXJlLFxuICAgICAgICByZXN0T3B0aW9ucyxcbiAgICAgICAgY2xpZW50U0RLLFxuICAgICAgICB0cnVlLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgICAgcmV0dXJuIHF1ZXJ5LmV4ZWN1dGUoKTtcbiAgICB9KTtcbn1cblxuLy8gZ2V0IGlzIGp1c3QgbGlrZSBmaW5kIGJ1dCBvbmx5IHF1ZXJpZXMgYW4gb2JqZWN0SWQuXG5jb25zdCBnZXQgPSAoY29uZmlnLCBhdXRoLCBjbGFzc05hbWUsIG9iamVjdElkLCByZXN0T3B0aW9ucywgY2xpZW50U0RLLCBjb250ZXh0KSA9PiB7XG4gIHZhciByZXN0V2hlcmUgPSB7IG9iamVjdElkIH07XG4gIGVuZm9yY2VSb2xlU2VjdXJpdHkoJ2dldCcsIGNsYXNzTmFtZSwgYXV0aCk7XG4gIHJldHVybiB0cmlnZ2Vyc1xuICAgIC5tYXliZVJ1blF1ZXJ5VHJpZ2dlcihcbiAgICAgIHRyaWdnZXJzLlR5cGVzLmJlZm9yZUZpbmQsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICByZXN0V2hlcmUsXG4gICAgICByZXN0T3B0aW9ucyxcbiAgICAgIGNvbmZpZyxcbiAgICAgIGF1dGgsXG4gICAgICBjb250ZXh0LFxuICAgICAgdHJ1ZVxuICAgIClcbiAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgcmVzdFdoZXJlID0gcmVzdWx0LnJlc3RXaGVyZSB8fCByZXN0V2hlcmU7XG4gICAgICByZXN0T3B0aW9ucyA9IHJlc3VsdC5yZXN0T3B0aW9ucyB8fCByZXN0T3B0aW9ucztcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gbmV3IFJlc3RRdWVyeShcbiAgICAgICAgY29uZmlnLFxuICAgICAgICBhdXRoLFxuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIHJlc3RXaGVyZSxcbiAgICAgICAgcmVzdE9wdGlvbnMsXG4gICAgICAgIGNsaWVudFNESyxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICAgIHJldHVybiBxdWVyeS5leGVjdXRlKCk7XG4gICAgfSk7XG59O1xuXG4vLyBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGRvZXNuJ3QgcmVzb2x2ZSB0byBhbnkgdXNlZnVsIHZhbHVlLlxuZnVuY3Rpb24gZGVsKGNvbmZpZywgYXV0aCwgY2xhc3NOYW1lLCBvYmplY3RJZCwgY29udGV4dCkge1xuICBpZiAodHlwZW9mIG9iamVjdElkICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5JTlZBTElEX0pTT04sICdiYWQgb2JqZWN0SWQnKTtcbiAgfVxuXG4gIGlmIChjbGFzc05hbWUgPT09ICdfVXNlcicgJiYgYXV0aC5pc1VuYXV0aGVudGljYXRlZCgpKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLlNFU1NJT05fTUlTU0lORywgJ0luc3VmZmljaWVudCBhdXRoIHRvIGRlbGV0ZSB1c2VyJyk7XG4gIH1cblxuICBlbmZvcmNlUm9sZVNlY3VyaXR5KCdkZWxldGUnLCBjbGFzc05hbWUsIGF1dGgpO1xuXG4gIGxldCBpbmZsYXRlZE9iamVjdDtcbiAgbGV0IHNjaGVtYUNvbnRyb2xsZXI7XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc3QgaGFzVHJpZ2dlcnMgPSBjaGVja1RyaWdnZXJzKGNsYXNzTmFtZSwgY29uZmlnLCBbJ2JlZm9yZURlbGV0ZScsICdhZnRlckRlbGV0ZSddKTtcbiAgICAgIGNvbnN0IGhhc0xpdmVRdWVyeSA9IGNoZWNrTGl2ZVF1ZXJ5KGNsYXNzTmFtZSwgY29uZmlnKTtcbiAgICAgIGlmIChoYXNUcmlnZ2VycyB8fCBoYXNMaXZlUXVlcnkgfHwgY2xhc3NOYW1lID09ICdfU2Vzc2lvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXN0UXVlcnkoY29uZmlnLCBhdXRoLCBjbGFzc05hbWUsIHsgb2JqZWN0SWQgfSlcbiAgICAgICAgICAuZXhlY3V0ZSh7IG9wOiAnZGVsZXRlJyB9KVxuICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5yZXN1bHRzICYmIHJlc3BvbnNlLnJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGZpcnN0UmVzdWx0ID0gcmVzcG9uc2UucmVzdWx0c1swXTtcbiAgICAgICAgICAgICAgZmlyc3RSZXN1bHQuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lID09PSAnX1Nlc3Npb24nICYmICFhdXRoLmlzTWFzdGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFhdXRoLnVzZXIgfHwgZmlyc3RSZXN1bHQudXNlci5vYmplY3RJZCAhPT0gYXV0aC51c2VyLmlkKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuSU5WQUxJRF9TRVNTSU9OX1RPS0VOLCAnSW52YWxpZCBzZXNzaW9uIHRva2VuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBjYWNoZUFkYXB0ZXIgPSBjb25maWcuY2FjaGVDb250cm9sbGVyO1xuICAgICAgICAgICAgICBjYWNoZUFkYXB0ZXIudXNlci5kZWwoZmlyc3RSZXN1bHQuc2Vzc2lvblRva2VuKTtcbiAgICAgICAgICAgICAgaW5mbGF0ZWRPYmplY3QgPSBQYXJzZS5PYmplY3QuZnJvbUpTT04oZmlyc3RSZXN1bHQpO1xuICAgICAgICAgICAgICByZXR1cm4gdHJpZ2dlcnMubWF5YmVSdW5UcmlnZ2VyKFxuICAgICAgICAgICAgICAgIHRyaWdnZXJzLlR5cGVzLmJlZm9yZURlbGV0ZSxcbiAgICAgICAgICAgICAgICBhdXRoLFxuICAgICAgICAgICAgICAgIGluZmxhdGVkT2JqZWN0LFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgY29uZmlnLFxuICAgICAgICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELCAnT2JqZWN0IG5vdCBmb3VuZCBmb3IgZGVsZXRlLicpO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7fSk7XG4gICAgfSlcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICBpZiAoIWF1dGguaXNNYXN0ZXIpIHtcbiAgICAgICAgcmV0dXJuIGF1dGguZ2V0VXNlclJvbGVzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSlcbiAgICAudGhlbigoKSA9PiBjb25maWcuZGF0YWJhc2UubG9hZFNjaGVtYSgpKVxuICAgIC50aGVuKHMgPT4ge1xuICAgICAgc2NoZW1hQ29udHJvbGxlciA9IHM7XG4gICAgICBjb25zdCBvcHRpb25zID0ge307XG4gICAgICBpZiAoIWF1dGguaXNNYXN0ZXIpIHtcbiAgICAgICAgb3B0aW9ucy5hY2wgPSBbJyonXTtcbiAgICAgICAgaWYgKGF1dGgudXNlcikge1xuICAgICAgICAgIG9wdGlvbnMuYWNsLnB1c2goYXV0aC51c2VyLmlkKTtcbiAgICAgICAgICBvcHRpb25zLmFjbCA9IG9wdGlvbnMuYWNsLmNvbmNhdChhdXRoLnVzZXJSb2xlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbmZpZy5kYXRhYmFzZS5kZXN0cm95KFxuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIHtcbiAgICAgICAgICBvYmplY3RJZDogb2JqZWN0SWQsXG4gICAgICAgIH0sXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIHNjaGVtYUNvbnRyb2xsZXJcbiAgICAgICk7XG4gICAgfSlcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICAvLyBOb3RpZnkgTGl2ZVF1ZXJ5IHNlcnZlciBpZiBwb3NzaWJsZVxuICAgICAgY29uc3QgcGVybXMgPSBzY2hlbWFDb250cm9sbGVyLmdldENsYXNzTGV2ZWxQZXJtaXNzaW9ucyhjbGFzc05hbWUpO1xuICAgICAgY29uZmlnLmxpdmVRdWVyeUNvbnRyb2xsZXIub25BZnRlckRlbGV0ZShjbGFzc05hbWUsIGluZmxhdGVkT2JqZWN0LCBudWxsLCBwZXJtcyk7XG4gICAgICByZXR1cm4gdHJpZ2dlcnMubWF5YmVSdW5UcmlnZ2VyKFxuICAgICAgICB0cmlnZ2Vycy5UeXBlcy5hZnRlckRlbGV0ZSxcbiAgICAgICAgYXV0aCxcbiAgICAgICAgaW5mbGF0ZWRPYmplY3QsXG4gICAgICAgIG51bGwsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICB9KVxuICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICBoYW5kbGVTZXNzaW9uTWlzc2luZ0Vycm9yKGVycm9yLCBjbGFzc05hbWUsIGF1dGgpO1xuICAgIH0pO1xufVxuXG4vLyBSZXR1cm5zIGEgcHJvbWlzZSBmb3IgYSB7cmVzcG9uc2UsIHN0YXR1cywgbG9jYXRpb259IG9iamVjdC5cbmZ1bmN0aW9uIGNyZWF0ZShjb25maWcsIGF1dGgsIGNsYXNzTmFtZSwgcmVzdE9iamVjdCwgY2xpZW50U0RLLCBjb250ZXh0KSB7XG4gIGVuZm9yY2VSb2xlU2VjdXJpdHkoJ2NyZWF0ZScsIGNsYXNzTmFtZSwgYXV0aCk7XG4gIHZhciB3cml0ZSA9IG5ldyBSZXN0V3JpdGUoY29uZmlnLCBhdXRoLCBjbGFzc05hbWUsIG51bGwsIHJlc3RPYmplY3QsIG51bGwsIGNsaWVudFNESywgY29udGV4dCk7XG4gIHJldHVybiB3cml0ZS5leGVjdXRlKCk7XG59XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgY29udGFpbnMgdGhlIGZpZWxkcyBvZiB0aGUgdXBkYXRlIHRoYXQgdGhlXG4vLyBSRVNUIEFQSSBpcyBzdXBwb3NlZCB0byByZXR1cm4uXG4vLyBVc3VhbGx5LCB0aGlzIGlzIGp1c3QgdXBkYXRlZEF0LlxuZnVuY3Rpb24gdXBkYXRlKGNvbmZpZywgYXV0aCwgY2xhc3NOYW1lLCByZXN0V2hlcmUsIHJlc3RPYmplY3QsIGNsaWVudFNESywgY29udGV4dCkge1xuICBlbmZvcmNlUm9sZVNlY3VyaXR5KCd1cGRhdGUnLCBjbGFzc05hbWUsIGF1dGgpO1xuXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgIGNvbnN0IGhhc1RyaWdnZXJzID0gY2hlY2tUcmlnZ2VycyhjbGFzc05hbWUsIGNvbmZpZywgWydiZWZvcmVTYXZlJywgJ2FmdGVyU2F2ZSddKTtcbiAgICAgIGNvbnN0IGhhc0xpdmVRdWVyeSA9IGNoZWNrTGl2ZVF1ZXJ5KGNsYXNzTmFtZSwgY29uZmlnKTtcbiAgICAgIGlmIChoYXNUcmlnZ2VycyB8fCBoYXNMaXZlUXVlcnkpIHtcbiAgICAgICAgLy8gRG8gbm90IHVzZSBmaW5kLCBhcyBpdCBydW5zIHRoZSBiZWZvcmUgZmluZHNcbiAgICAgICAgcmV0dXJuIG5ldyBSZXN0UXVlcnkoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGF1dGgsXG4gICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICAgIHJlc3RXaGVyZSxcbiAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgKS5leGVjdXRlKHtcbiAgICAgICAgICBvcDogJ3VwZGF0ZScsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7fSk7XG4gICAgfSlcbiAgICAudGhlbigoeyByZXN1bHRzIH0pID0+IHtcbiAgICAgIHZhciBvcmlnaW5hbFJlc3RPYmplY3Q7XG4gICAgICBpZiAocmVzdWx0cyAmJiByZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICBvcmlnaW5hbFJlc3RPYmplY3QgPSByZXN1bHRzWzBdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBSZXN0V3JpdGUoXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgYXV0aCxcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICByZXN0V2hlcmUsXG4gICAgICAgIHJlc3RPYmplY3QsXG4gICAgICAgIG9yaWdpbmFsUmVzdE9iamVjdCxcbiAgICAgICAgY2xpZW50U0RLLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICAndXBkYXRlJ1xuICAgICAgKS5leGVjdXRlKCk7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgaGFuZGxlU2Vzc2lvbk1pc3NpbmdFcnJvcihlcnJvciwgY2xhc3NOYW1lLCBhdXRoKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlU2Vzc2lvbk1pc3NpbmdFcnJvcihlcnJvciwgY2xhc3NOYW1lLCBhdXRoKSB7XG4gIC8vIElmIHdlJ3JlIHRyeWluZyB0byB1cGRhdGUgYSB1c2VyIHdpdGhvdXQgLyB3aXRoIGJhZCBzZXNzaW9uIHRva2VuXG4gIGlmIChjbGFzc05hbWUgPT09ICdfVXNlcicgJiYgZXJyb3IuY29kZSA9PT0gUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCAmJiAhYXV0aC5pc01hc3Rlcikge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5TRVNTSU9OX01JU1NJTkcsICdJbnN1ZmZpY2llbnQgYXV0aC4nKTtcbiAgfVxuICB0aHJvdyBlcnJvcjtcbn1cblxuY29uc3QgY2xhc3Nlc1dpdGhNYXN0ZXJPbmx5QWNjZXNzID0gW1xuICAnX0pvYlN0YXR1cycsXG4gICdfUHVzaFN0YXR1cycsXG4gICdfSG9va3MnLFxuICAnX0dsb2JhbENvbmZpZycsXG4gICdfSm9iU2NoZWR1bGUnLFxuICAnX0lkZW1wb3RlbmN5Jyxcbl07XG4vLyBEaXNhbGxvd2luZyBhY2Nlc3MgdG8gdGhlIF9Sb2xlIGNvbGxlY3Rpb24gZXhjZXB0IGJ5IG1hc3RlciBrZXlcbmZ1bmN0aW9uIGVuZm9yY2VSb2xlU2VjdXJpdHkobWV0aG9kLCBjbGFzc05hbWUsIGF1dGgpIHtcbiAgaWYgKGNsYXNzTmFtZSA9PT0gJ19JbnN0YWxsYXRpb24nICYmICFhdXRoLmlzTWFzdGVyKSB7XG4gICAgaWYgKG1ldGhvZCA9PT0gJ2RlbGV0ZScgfHwgbWV0aG9kID09PSAnZmluZCcpIHtcbiAgICAgIGNvbnN0IGVycm9yID0gYENsaWVudHMgYXJlbid0IGFsbG93ZWQgdG8gcGVyZm9ybSB0aGUgJHttZXRob2R9IG9wZXJhdGlvbiBvbiB0aGUgaW5zdGFsbGF0aW9uIGNvbGxlY3Rpb24uYDtcbiAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5PUEVSQVRJT05fRk9SQklEREVOLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgLy9hbGwgdm9sYXRpbGVDbGFzc2VzIGFyZSBtYXN0ZXJLZXkgb25seVxuICBpZiAoY2xhc3Nlc1dpdGhNYXN0ZXJPbmx5QWNjZXNzLmluZGV4T2YoY2xhc3NOYW1lKSA+PSAwICYmICFhdXRoLmlzTWFzdGVyKSB7XG4gICAgY29uc3QgZXJyb3IgPSBgQ2xpZW50cyBhcmVuJ3QgYWxsb3dlZCB0byBwZXJmb3JtIHRoZSAke21ldGhvZH0gb3BlcmF0aW9uIG9uIHRoZSAke2NsYXNzTmFtZX0gY29sbGVjdGlvbi5gO1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5PUEVSQVRJT05fRk9SQklEREVOLCBlcnJvcik7XG4gIH1cblxuICAvLyByZWFkT25seSBtYXN0ZXJLZXkgaXMgbm90IGFsbG93ZWRcbiAgaWYgKGF1dGguaXNSZWFkT25seSAmJiAobWV0aG9kID09PSAnZGVsZXRlJyB8fCBtZXRob2QgPT09ICdjcmVhdGUnIHx8IG1ldGhvZCA9PT0gJ3VwZGF0ZScpKSB7XG4gICAgY29uc3QgZXJyb3IgPSBgcmVhZC1vbmx5IG1hc3RlcktleSBpc24ndCBhbGxvd2VkIHRvIHBlcmZvcm0gdGhlICR7bWV0aG9kfSBvcGVyYXRpb24uYDtcbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuT1BFUkFUSU9OX0ZPUkJJRERFTiwgZXJyb3IpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGUsXG4gIGRlbCxcbiAgZmluZCxcbiAgZ2V0LFxuICB1cGRhdGUsXG59O1xuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,